#!/usr/bin/env node
/** @format */

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) =>
    function __init() {
        return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])((fn = 0))), res;
    };
var __commonJS = (cb, mod) =>
    function __require() {
        return (
            mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod),
            mod.exports
        );
    };
var __export = (target, all) => {
    for (var name in all) __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
    if ((from && typeof from === 'object') || typeof from === 'function') {
        for (let key of __getOwnPropNames(from))
            if (!__hasOwnProp.call(to, key) && key !== except)
                __defProp(to, key, {
                    get: () => from[key],
                    enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable,
                });
    }
    return to;
};
var __toESM = (mod, isNodeMode, target) => (
    (target = mod != null ? __create(__getProtoOf(mod)) : {}),
    __copyProps(
        // If the importer is in node compatibility mode or this is not an ESM
        // file that has been converted to a CommonJS file using a Babel-
        // compatible transform (i.e. "__esModule" has not been set), then set
        // "default" to the CommonJS "module.exports" for node compatibility.
        isNodeMode || !mod || !mod.__esModule
            ? __defProp(target, 'default', { value: mod, enumerable: true })
            : target,
        mod,
    )
);
var __accessCheck = (obj, member, msg) => {
    if (!member.has(obj)) throw TypeError('Cannot ' + msg);
};
var __privateGet = (obj, member, getter) => {
    __accessCheck(obj, member, 'read from private field');
    return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
    if (member.has(obj)) throw TypeError('Cannot add the same private member more than once');
    member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
    __accessCheck(obj, member, 'write to private field');
    setter ? setter.call(obj, value) : member.set(obj, value);
    return value;
};
var __privateMethod = (obj, member, method) => {
    __accessCheck(obj, member, 'access private method');
    return method;
};

// node_modules/kleur/index.js
var require_kleur = __commonJS({
    'node_modules/kleur/index.js'(exports2, module2) {
        'use strict';
        var { FORCE_COLOR, NODE_DISABLE_COLORS, TERM } = process.env;
        var $4 = {
            enabled: !NODE_DISABLE_COLORS && TERM !== 'dumb' && FORCE_COLOR !== '0',
            // modifiers
            reset: init2(0, 0),
            bold: init2(1, 22),
            dim: init2(2, 22),
            italic: init2(3, 23),
            underline: init2(4, 24),
            inverse: init2(7, 27),
            hidden: init2(8, 28),
            strikethrough: init2(9, 29),
            // colors
            black: init2(30, 39),
            red: init2(31, 39),
            green: init2(32, 39),
            yellow: init2(33, 39),
            blue: init2(34, 39),
            magenta: init2(35, 39),
            cyan: init2(36, 39),
            white: init2(37, 39),
            gray: init2(90, 39),
            grey: init2(90, 39),
            // background colors
            bgBlack: init2(40, 49),
            bgRed: init2(41, 49),
            bgGreen: init2(42, 49),
            bgYellow: init2(43, 49),
            bgBlue: init2(44, 49),
            bgMagenta: init2(45, 49),
            bgCyan: init2(46, 49),
            bgWhite: init2(47, 49),
        };
        function run(arr, str) {
            let i2 = 0,
                tmp,
                beg = '',
                end2 = '';
            for (; i2 < arr.length; i2++) {
                tmp = arr[i2];
                beg += tmp.open;
                end2 += tmp.close;
                if (str.includes(tmp.close)) {
                    str = str.replace(tmp.rgx, tmp.close + tmp.open);
                }
            }
            return beg + str + end2;
        }
        function chain(has2, keys) {
            let ctx = { has: has2, keys };
            ctx.reset = $4.reset.bind(ctx);
            ctx.bold = $4.bold.bind(ctx);
            ctx.dim = $4.dim.bind(ctx);
            ctx.italic = $4.italic.bind(ctx);
            ctx.underline = $4.underline.bind(ctx);
            ctx.inverse = $4.inverse.bind(ctx);
            ctx.hidden = $4.hidden.bind(ctx);
            ctx.strikethrough = $4.strikethrough.bind(ctx);
            ctx.black = $4.black.bind(ctx);
            ctx.red = $4.red.bind(ctx);
            ctx.green = $4.green.bind(ctx);
            ctx.yellow = $4.yellow.bind(ctx);
            ctx.blue = $4.blue.bind(ctx);
            ctx.magenta = $4.magenta.bind(ctx);
            ctx.cyan = $4.cyan.bind(ctx);
            ctx.white = $4.white.bind(ctx);
            ctx.gray = $4.gray.bind(ctx);
            ctx.grey = $4.grey.bind(ctx);
            ctx.bgBlack = $4.bgBlack.bind(ctx);
            ctx.bgRed = $4.bgRed.bind(ctx);
            ctx.bgGreen = $4.bgGreen.bind(ctx);
            ctx.bgYellow = $4.bgYellow.bind(ctx);
            ctx.bgBlue = $4.bgBlue.bind(ctx);
            ctx.bgMagenta = $4.bgMagenta.bind(ctx);
            ctx.bgCyan = $4.bgCyan.bind(ctx);
            ctx.bgWhite = $4.bgWhite.bind(ctx);
            return ctx;
        }
        function init2(open, close) {
            let blk = {
                open: `\x1B[${open}m`,
                close: `\x1B[${close}m`,
                rgx: new RegExp(`\\x1b\\[${close}m`, 'g'),
            };
            return function (txt) {
                if (this !== void 0 && this.has !== void 0) {
                    this.has.includes(open) || (this.has.push(open), this.keys.push(blk));
                    return txt === void 0 ? this : $4.enabled ? run(this.keys, txt + '') : txt + '';
                }
                return txt === void 0
                    ? chain([open], [blk])
                    : $4.enabled
                      ? run([blk], txt + '')
                      : txt + '';
            };
        }
        module2.exports = $4;
    },
});

// node_modules/prompts/dist/util/action.js
var require_action = __commonJS({
    'node_modules/prompts/dist/util/action.js'(exports2, module2) {
        'use strict';
        module2.exports = (key, isSelect) => {
            if (key.meta && key.name !== 'escape') return;
            if (key.ctrl) {
                if (key.name === 'a') return 'first';
                if (key.name === 'c') return 'abort';
                if (key.name === 'd') return 'abort';
                if (key.name === 'e') return 'last';
                if (key.name === 'g') return 'reset';
            }
            if (isSelect) {
                if (key.name === 'j') return 'down';
                if (key.name === 'k') return 'up';
            }
            if (key.name === 'return') return 'submit';
            if (key.name === 'enter') return 'submit';
            if (key.name === 'backspace') return 'delete';
            if (key.name === 'delete') return 'deleteForward';
            if (key.name === 'abort') return 'abort';
            if (key.name === 'escape') return 'exit';
            if (key.name === 'tab') return 'next';
            if (key.name === 'pagedown') return 'nextPage';
            if (key.name === 'pageup') return 'prevPage';
            if (key.name === 'home') return 'home';
            if (key.name === 'end') return 'end';
            if (key.name === 'up') return 'up';
            if (key.name === 'down') return 'down';
            if (key.name === 'right') return 'right';
            if (key.name === 'left') return 'left';
            return false;
        };
    },
});

// node_modules/prompts/dist/util/strip.js
var require_strip = __commonJS({
    'node_modules/prompts/dist/util/strip.js'(exports2, module2) {
        'use strict';
        module2.exports = (str) => {
            const pattern = [
                '[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)',
                '(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PRZcf-ntqry=><~]))',
            ].join('|');
            const RGX = new RegExp(pattern, 'g');
            return typeof str === 'string' ? str.replace(RGX, '') : str;
        };
    },
});

// node_modules/sisteransi/src/index.js
var require_src = __commonJS({
    'node_modules/sisteransi/src/index.js'(exports2, module2) {
        'use strict';
        var ESC = '\x1B';
        var CSI = `${ESC}[`;
        var beep = '\x07';
        var cursor = {
            to(x2, y) {
                if (!y) return `${CSI}${x2 + 1}G`;
                return `${CSI}${y + 1};${x2 + 1}H`;
            },
            move(x2, y) {
                let ret = '';
                if (x2 < 0) ret += `${CSI}${-x2}D`;
                else if (x2 > 0) ret += `${CSI}${x2}C`;
                if (y < 0) ret += `${CSI}${-y}A`;
                else if (y > 0) ret += `${CSI}${y}B`;
                return ret;
            },
            up: (count = 1) => `${CSI}${count}A`,
            down: (count = 1) => `${CSI}${count}B`,
            forward: (count = 1) => `${CSI}${count}C`,
            backward: (count = 1) => `${CSI}${count}D`,
            nextLine: (count = 1) => `${CSI}E`.repeat(count),
            prevLine: (count = 1) => `${CSI}F`.repeat(count),
            left: `${CSI}G`,
            hide: `${CSI}?25l`,
            show: `${CSI}?25h`,
            save: `${ESC}7`,
            restore: `${ESC}8`,
        };
        var scroll = {
            up: (count = 1) => `${CSI}S`.repeat(count),
            down: (count = 1) => `${CSI}T`.repeat(count),
        };
        var erase = {
            screen: `${CSI}2J`,
            up: (count = 1) => `${CSI}1J`.repeat(count),
            down: (count = 1) => `${CSI}J`.repeat(count),
            line: `${CSI}2K`,
            lineEnd: `${CSI}K`,
            lineStart: `${CSI}1K`,
            lines(count) {
                let clear = '';
                for (let i2 = 0; i2 < count; i2++)
                    clear += this.line + (i2 < count - 1 ? cursor.up() : '');
                if (count) clear += cursor.left;
                return clear;
            },
        };
        module2.exports = { cursor, scroll, erase, beep };
    },
});

// node_modules/prompts/dist/util/clear.js
var require_clear = __commonJS({
    'node_modules/prompts/dist/util/clear.js'(exports2, module2) {
        'use strict';
        function _createForOfIteratorHelper(o, allowArrayLike) {
            var it = (typeof Symbol !== 'undefined' && o[Symbol.iterator]) || o['@@iterator'];
            if (!it) {
                if (
                    Array.isArray(o) ||
                    (it = _unsupportedIterableToArray(o)) ||
                    (allowArrayLike && o && typeof o.length === 'number')
                ) {
                    if (it) o = it;
                    var i2 = 0;
                    var F2 = function F3() {};
                    return {
                        s: F2,
                        n: function n() {
                            if (i2 >= o.length) return { done: true };
                            return { done: false, value: o[i2++] };
                        },
                        e: function e2(_e) {
                            throw _e;
                        },
                        f: F2,
                    };
                }
                throw new TypeError(
                    'Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
                );
            }
            var normalCompletion = true,
                didErr = false,
                err;
            return {
                s: function s2() {
                    it = it.call(o);
                },
                n: function n() {
                    var step = it.next();
                    normalCompletion = step.done;
                    return step;
                },
                e: function e2(_e2) {
                    didErr = true;
                    err = _e2;
                },
                f: function f3() {
                    try {
                        if (!normalCompletion && it.return != null) it.return();
                    } finally {
                        if (didErr) throw err;
                    }
                },
            };
        }
        function _unsupportedIterableToArray(o, minLen) {
            if (!o) return;
            if (typeof o === 'string') return _arrayLikeToArray(o, minLen);
            var n = Object.prototype.toString.call(o).slice(8, -1);
            if (n === 'Object' && o.constructor) n = o.constructor.name;
            if (n === 'Map' || n === 'Set') return Array.from(o);
            if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                return _arrayLikeToArray(o, minLen);
        }
        function _arrayLikeToArray(arr, len) {
            if (len == null || len > arr.length) len = arr.length;
            for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) arr2[i2] = arr[i2];
            return arr2;
        }
        var strip = require_strip();
        var _require = require_src();
        var erase = _require.erase;
        var cursor = _require.cursor;
        var width = (str) => [...strip(str)].length;
        module2.exports = function (prompt, perLine) {
            if (!perLine) return erase.line + cursor.to(0);
            let rows = 0;
            const lines = prompt.split(/\r?\n/);
            var _iterator = _createForOfIteratorHelper(lines),
                _step;
            try {
                for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                    let line = _step.value;
                    rows += 1 + Math.floor(Math.max(width(line) - 1, 0) / perLine);
                }
            } catch (err) {
                _iterator.e(err);
            } finally {
                _iterator.f();
            }
            return erase.lines(rows);
        };
    },
});

// node_modules/prompts/dist/util/figures.js
var require_figures = __commonJS({
    'node_modules/prompts/dist/util/figures.js'(exports2, module2) {
        'use strict';
        var main = {
            arrowUp: '\u2191',
            arrowDown: '\u2193',
            arrowLeft: '\u2190',
            arrowRight: '\u2192',
            radioOn: '\u25C9',
            radioOff: '\u25EF',
            tick: '\u2714',
            cross: '\u2716',
            ellipsis: '\u2026',
            pointerSmall: '\u203A',
            line: '\u2500',
            pointer: '\u276F',
        };
        var win = {
            arrowUp: main.arrowUp,
            arrowDown: main.arrowDown,
            arrowLeft: main.arrowLeft,
            arrowRight: main.arrowRight,
            radioOn: '(*)',
            radioOff: '( )',
            tick: '\u221A',
            cross: '\xD7',
            ellipsis: '...',
            pointerSmall: '\xBB',
            line: '\u2500',
            pointer: '>',
        };
        var figures = process.platform === 'win32' ? win : main;
        module2.exports = figures;
    },
});

// node_modules/prompts/dist/util/style.js
var require_style = __commonJS({
    'node_modules/prompts/dist/util/style.js'(exports2, module2) {
        'use strict';
        var c = require_kleur();
        var figures = require_figures();
        var styles = Object.freeze({
            password: {
                scale: 1,
                render: (input) => '*'.repeat(input.length),
            },
            emoji: {
                scale: 2,
                render: (input) => '\u{1F603}'.repeat(input.length),
            },
            invisible: {
                scale: 0,
                render: (input) => '',
            },
            default: {
                scale: 1,
                render: (input) => `${input}`,
            },
        });
        var render3 = (type) => styles[type] || styles.default;
        var symbols = Object.freeze({
            aborted: c.red(figures.cross),
            done: c.green(figures.tick),
            exited: c.yellow(figures.cross),
            default: c.cyan('?'),
        });
        var symbol = (done, aborted, exited) =>
            aborted
                ? symbols.aborted
                : exited
                  ? symbols.exited
                  : done
                    ? symbols.done
                    : symbols.default;
        var delimiter = (completing) =>
            c.gray(completing ? figures.ellipsis : figures.pointerSmall);
        var item = (expandable, expanded) =>
            c.gray(expandable ? (expanded ? figures.pointerSmall : '+') : figures.line);
        module2.exports = {
            styles,
            render: render3,
            symbols,
            symbol,
            delimiter,
            item,
        };
    },
});

// node_modules/prompts/dist/util/lines.js
var require_lines = __commonJS({
    'node_modules/prompts/dist/util/lines.js'(exports2, module2) {
        'use strict';
        var strip = require_strip();
        module2.exports = function (msg, perLine) {
            let lines = String(strip(msg) || '').split(/\r?\n/);
            if (!perLine) return lines.length;
            return lines.map((l) => Math.ceil(l.length / perLine)).reduce((a, b) => a + b);
        };
    },
});

// node_modules/prompts/dist/util/wrap.js
var require_wrap = __commonJS({
    'node_modules/prompts/dist/util/wrap.js'(exports2, module2) {
        'use strict';
        module2.exports = (msg, opts = {}) => {
            const tab = Number.isSafeInteger(parseInt(opts.margin))
                ? new Array(parseInt(opts.margin)).fill(' ').join('')
                : opts.margin || '';
            const width = opts.width;
            return (msg || '')
                .split(/\r?\n/g)
                .map((line) =>
                    line
                        .split(/\s+/g)
                        .reduce(
                            (arr, w) => {
                                if (
                                    w.length + tab.length >= width ||
                                    arr[arr.length - 1].length + w.length + 1 < width
                                )
                                    arr[arr.length - 1] += ` ${w}`;
                                else arr.push(`${tab}${w}`);
                                return arr;
                            },
                            [tab],
                        )
                        .join('\n'),
                )
                .join('\n');
        };
    },
});

// node_modules/prompts/dist/util/entriesToDisplay.js
var require_entriesToDisplay = __commonJS({
    'node_modules/prompts/dist/util/entriesToDisplay.js'(exports2, module2) {
        'use strict';
        module2.exports = (cursor, total, maxVisible) => {
            maxVisible = maxVisible || total;
            let startIndex = Math.min(total - maxVisible, cursor - Math.floor(maxVisible / 2));
            if (startIndex < 0) startIndex = 0;
            let endIndex = Math.min(startIndex + maxVisible, total);
            return {
                startIndex,
                endIndex,
            };
        };
    },
});

// node_modules/prompts/dist/util/index.js
var require_util = __commonJS({
    'node_modules/prompts/dist/util/index.js'(exports2, module2) {
        'use strict';
        module2.exports = {
            action: require_action(),
            clear: require_clear(),
            style: require_style(),
            strip: require_strip(),
            figures: require_figures(),
            lines: require_lines(),
            wrap: require_wrap(),
            entriesToDisplay: require_entriesToDisplay(),
        };
    },
});

// node_modules/prompts/dist/elements/prompt.js
var require_prompt = __commonJS({
    'node_modules/prompts/dist/elements/prompt.js'(exports2, module2) {
        'use strict';
        var readline = require('readline');
        var _require = require_util();
        var action = _require.action;
        var EventEmitter = require('events');
        var _require2 = require_src();
        var beep = _require2.beep;
        var cursor = _require2.cursor;
        var color = require_kleur();
        var Prompt = class extends EventEmitter {
            constructor(opts = {}) {
                super();
                this.firstRender = true;
                this.in = opts.stdin || process.stdin;
                this.out = opts.stdout || process.stdout;
                this.onRender = (opts.onRender || (() => void 0)).bind(this);
                const rl = readline.createInterface({
                    input: this.in,
                    escapeCodeTimeout: 50,
                });
                readline.emitKeypressEvents(this.in, rl);
                if (this.in.isTTY) this.in.setRawMode(true);
                const isSelect =
                    ['SelectPrompt', 'MultiselectPrompt'].indexOf(this.constructor.name) > -1;
                const keypress = (str, key) => {
                    let a = action(key, isSelect);
                    if (a === false) {
                        this._ && this._(str, key);
                    } else if (typeof this[a] === 'function') {
                        this[a](key);
                    } else {
                        this.bell();
                    }
                };
                this.close = () => {
                    this.out.write(cursor.show);
                    this.in.removeListener('keypress', keypress);
                    if (this.in.isTTY) this.in.setRawMode(false);
                    rl.close();
                    this.emit(this.aborted ? 'abort' : this.exited ? 'exit' : 'submit', this.value);
                    this.closed = true;
                };
                this.in.on('keypress', keypress);
            }
            fire() {
                this.emit('state', {
                    value: this.value,
                    aborted: !!this.aborted,
                    exited: !!this.exited,
                });
            }
            bell() {
                this.out.write(beep);
            }
            render() {
                this.onRender(color);
                if (this.firstRender) this.firstRender = false;
            }
        };
        module2.exports = Prompt;
    },
});

// node_modules/prompts/dist/elements/text.js
var require_text = __commonJS({
    'node_modules/prompts/dist/elements/text.js'(exports2, module2) {
        'use strict';
        function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
            try {
                var info = gen[key](arg);
                var value = info.value;
            } catch (error) {
                reject(error);
                return;
            }
            if (info.done) {
                resolve(value);
            } else {
                Promise.resolve(value).then(_next, _throw);
            }
        }
        function _asyncToGenerator(fn) {
            return function () {
                var self2 = this,
                    args = arguments;
                return new Promise(function (resolve, reject) {
                    var gen = fn.apply(self2, args);
                    function _next(value) {
                        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'next', value);
                    }
                    function _throw(err) {
                        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'throw', err);
                    }
                    _next(void 0);
                });
            };
        }
        var color = require_kleur();
        var Prompt = require_prompt();
        var _require = require_src();
        var erase = _require.erase;
        var cursor = _require.cursor;
        var _require2 = require_util();
        var style = _require2.style;
        var clear = _require2.clear;
        var lines = _require2.lines;
        var figures = _require2.figures;
        var TextPrompt = class extends Prompt {
            constructor(opts = {}) {
                super(opts);
                this.transform = style.render(opts.style);
                this.scale = this.transform.scale;
                this.msg = opts.message;
                this.initial = opts.initial || ``;
                this.validator = opts.validate || (() => true);
                this.value = ``;
                this.errorMsg = opts.error || `Please Enter A Valid Value`;
                this.cursor = Number(!!this.initial);
                this.cursorOffset = 0;
                this.clear = clear(``, this.out.columns);
                this.render();
            }
            set value(v) {
                if (!v && this.initial) {
                    this.placeholder = true;
                    this.rendered = color.gray(this.transform.render(this.initial));
                } else {
                    this.placeholder = false;
                    this.rendered = this.transform.render(v);
                }
                this._value = v;
                this.fire();
            }
            get value() {
                return this._value;
            }
            reset() {
                this.value = ``;
                this.cursor = Number(!!this.initial);
                this.cursorOffset = 0;
                this.fire();
                this.render();
            }
            exit() {
                this.abort();
            }
            abort() {
                this.value = this.value || this.initial;
                this.done = this.aborted = true;
                this.error = false;
                this.red = false;
                this.fire();
                this.render();
                this.out.write('\n');
                this.close();
            }
            validate() {
                var _this = this;
                return _asyncToGenerator(function* () {
                    let valid = yield _this.validator(_this.value);
                    if (typeof valid === `string`) {
                        _this.errorMsg = valid;
                        valid = false;
                    }
                    _this.error = !valid;
                })();
            }
            submit() {
                var _this2 = this;
                return _asyncToGenerator(function* () {
                    _this2.value = _this2.value || _this2.initial;
                    _this2.cursorOffset = 0;
                    _this2.cursor = _this2.rendered.length;
                    yield _this2.validate();
                    if (_this2.error) {
                        _this2.red = true;
                        _this2.fire();
                        _this2.render();
                        return;
                    }
                    _this2.done = true;
                    _this2.aborted = false;
                    _this2.fire();
                    _this2.render();
                    _this2.out.write('\n');
                    _this2.close();
                })();
            }
            next() {
                if (!this.placeholder) return this.bell();
                this.value = this.initial;
                this.cursor = this.rendered.length;
                this.fire();
                this.render();
            }
            moveCursor(n) {
                if (this.placeholder) return;
                this.cursor = this.cursor + n;
                this.cursorOffset += n;
            }
            _(c, key) {
                let s1 = this.value.slice(0, this.cursor);
                let s2 = this.value.slice(this.cursor);
                this.value = `${s1}${c}${s2}`;
                this.red = false;
                this.cursor = this.placeholder ? 0 : s1.length + 1;
                this.render();
            }
            delete() {
                if (this.isCursorAtStart()) return this.bell();
                let s1 = this.value.slice(0, this.cursor - 1);
                let s2 = this.value.slice(this.cursor);
                this.value = `${s1}${s2}`;
                this.red = false;
                if (this.isCursorAtStart()) {
                    this.cursorOffset = 0;
                } else {
                    this.cursorOffset++;
                    this.moveCursor(-1);
                }
                this.render();
            }
            deleteForward() {
                if (this.cursor * this.scale >= this.rendered.length || this.placeholder)
                    return this.bell();
                let s1 = this.value.slice(0, this.cursor);
                let s2 = this.value.slice(this.cursor + 1);
                this.value = `${s1}${s2}`;
                this.red = false;
                if (this.isCursorAtEnd()) {
                    this.cursorOffset = 0;
                } else {
                    this.cursorOffset++;
                }
                this.render();
            }
            first() {
                this.cursor = 0;
                this.render();
            }
            last() {
                this.cursor = this.value.length;
                this.render();
            }
            left() {
                if (this.cursor <= 0 || this.placeholder) return this.bell();
                this.moveCursor(-1);
                this.render();
            }
            right() {
                if (this.cursor * this.scale >= this.rendered.length || this.placeholder)
                    return this.bell();
                this.moveCursor(1);
                this.render();
            }
            isCursorAtStart() {
                return this.cursor === 0 || (this.placeholder && this.cursor === 1);
            }
            isCursorAtEnd() {
                return (
                    this.cursor === this.rendered.length ||
                    (this.placeholder && this.cursor === this.rendered.length + 1)
                );
            }
            render() {
                if (this.closed) return;
                if (!this.firstRender) {
                    if (this.outputError)
                        this.out.write(
                            cursor.down(lines(this.outputError, this.out.columns) - 1) +
                                clear(this.outputError, this.out.columns),
                        );
                    this.out.write(clear(this.outputText, this.out.columns));
                }
                super.render();
                this.outputError = '';
                this.outputText = [
                    style.symbol(this.done, this.aborted),
                    color.bold(this.msg),
                    style.delimiter(this.done),
                    this.red ? color.red(this.rendered) : this.rendered,
                ].join(` `);
                if (this.error) {
                    this.outputError += this.errorMsg
                        .split(
                            `
`,
                        )
                        .reduce(
                            (a, l, i2) =>
                                a +
                                `
${i2 ? ' ' : figures.pointerSmall} ${color.red().italic(l)}`,
                            ``,
                        );
                }
                this.out.write(
                    erase.line +
                        cursor.to(0) +
                        this.outputText +
                        cursor.save +
                        this.outputError +
                        cursor.restore +
                        cursor.move(this.cursorOffset, 0),
                );
            }
        };
        module2.exports = TextPrompt;
    },
});

// node_modules/prompts/dist/elements/select.js
var require_select = __commonJS({
    'node_modules/prompts/dist/elements/select.js'(exports2, module2) {
        'use strict';
        var color = require_kleur();
        var Prompt = require_prompt();
        var _require = require_util();
        var style = _require.style;
        var clear = _require.clear;
        var figures = _require.figures;
        var wrap2 = _require.wrap;
        var entriesToDisplay = _require.entriesToDisplay;
        var _require2 = require_src();
        var cursor = _require2.cursor;
        var SelectPrompt = class extends Prompt {
            constructor(opts = {}) {
                super(opts);
                this.msg = opts.message;
                this.hint = opts.hint || '- Use arrow-keys. Return to submit.';
                this.warn = opts.warn || '- This option is disabled';
                this.cursor = opts.initial || 0;
                this.choices = opts.choices.map((ch, idx) => {
                    if (typeof ch === 'string')
                        ch = {
                            title: ch,
                            value: idx,
                        };
                    return {
                        title: ch && (ch.title || ch.value || ch),
                        value: ch && (ch.value === void 0 ? idx : ch.value),
                        description: ch && ch.description,
                        selected: ch && ch.selected,
                        disabled: ch && ch.disabled,
                    };
                });
                this.optionsPerPage = opts.optionsPerPage || 10;
                this.value = (this.choices[this.cursor] || {}).value;
                this.clear = clear('', this.out.columns);
                this.render();
            }
            moveCursor(n) {
                this.cursor = n;
                this.value = this.choices[n].value;
                this.fire();
            }
            reset() {
                this.moveCursor(0);
                this.fire();
                this.render();
            }
            exit() {
                this.abort();
            }
            abort() {
                this.done = this.aborted = true;
                this.fire();
                this.render();
                this.out.write('\n');
                this.close();
            }
            submit() {
                if (!this.selection.disabled) {
                    this.done = true;
                    this.aborted = false;
                    this.fire();
                    this.render();
                    this.out.write('\n');
                    this.close();
                } else this.bell();
            }
            first() {
                this.moveCursor(0);
                this.render();
            }
            last() {
                this.moveCursor(this.choices.length - 1);
                this.render();
            }
            up() {
                if (this.cursor === 0) {
                    this.moveCursor(this.choices.length - 1);
                } else {
                    this.moveCursor(this.cursor - 1);
                }
                this.render();
            }
            down() {
                if (this.cursor === this.choices.length - 1) {
                    this.moveCursor(0);
                } else {
                    this.moveCursor(this.cursor + 1);
                }
                this.render();
            }
            next() {
                this.moveCursor((this.cursor + 1) % this.choices.length);
                this.render();
            }
            _(c, key) {
                if (c === ' ') return this.submit();
            }
            get selection() {
                return this.choices[this.cursor];
            }
            render() {
                if (this.closed) return;
                if (this.firstRender) this.out.write(cursor.hide);
                else this.out.write(clear(this.outputText, this.out.columns));
                super.render();
                let _entriesToDisplay = entriesToDisplay(
                        this.cursor,
                        this.choices.length,
                        this.optionsPerPage,
                    ),
                    startIndex = _entriesToDisplay.startIndex,
                    endIndex = _entriesToDisplay.endIndex;
                this.outputText = [
                    style.symbol(this.done, this.aborted),
                    color.bold(this.msg),
                    style.delimiter(false),
                    this.done
                        ? this.selection.title
                        : this.selection.disabled
                          ? color.yellow(this.warn)
                          : color.gray(this.hint),
                ].join(' ');
                if (!this.done) {
                    this.outputText += '\n';
                    for (let i2 = startIndex; i2 < endIndex; i2++) {
                        let title,
                            prefix,
                            desc = '',
                            v = this.choices[i2];
                        if (i2 === startIndex && startIndex > 0) {
                            prefix = figures.arrowUp;
                        } else if (i2 === endIndex - 1 && endIndex < this.choices.length) {
                            prefix = figures.arrowDown;
                        } else {
                            prefix = ' ';
                        }
                        if (v.disabled) {
                            title =
                                this.cursor === i2
                                    ? color.gray().underline(v.title)
                                    : color.strikethrough().gray(v.title);
                            prefix =
                                (this.cursor === i2
                                    ? color.bold().gray(figures.pointer) + ' '
                                    : '  ') + prefix;
                        } else {
                            title = this.cursor === i2 ? color.cyan().underline(v.title) : v.title;
                            prefix =
                                (this.cursor === i2 ? color.cyan(figures.pointer) + ' ' : '  ') +
                                prefix;
                            if (v.description && this.cursor === i2) {
                                desc = ` - ${v.description}`;
                                if (
                                    prefix.length + title.length + desc.length >=
                                        this.out.columns ||
                                    v.description.split(/\r?\n/).length > 1
                                ) {
                                    desc =
                                        '\n' +
                                        wrap2(v.description, {
                                            margin: 3,
                                            width: this.out.columns,
                                        });
                                }
                            }
                        }
                        this.outputText += `${prefix} ${title}${color.gray(desc)}
`;
                    }
                }
                this.out.write(this.outputText);
            }
        };
        module2.exports = SelectPrompt;
    },
});

// node_modules/prompts/dist/elements/toggle.js
var require_toggle = __commonJS({
    'node_modules/prompts/dist/elements/toggle.js'(exports2, module2) {
        'use strict';
        var color = require_kleur();
        var Prompt = require_prompt();
        var _require = require_util();
        var style = _require.style;
        var clear = _require.clear;
        var _require2 = require_src();
        var cursor = _require2.cursor;
        var erase = _require2.erase;
        var TogglePrompt = class extends Prompt {
            constructor(opts = {}) {
                super(opts);
                this.msg = opts.message;
                this.value = !!opts.initial;
                this.active = opts.active || 'on';
                this.inactive = opts.inactive || 'off';
                this.initialValue = this.value;
                this.render();
            }
            reset() {
                this.value = this.initialValue;
                this.fire();
                this.render();
            }
            exit() {
                this.abort();
            }
            abort() {
                this.done = this.aborted = true;
                this.fire();
                this.render();
                this.out.write('\n');
                this.close();
            }
            submit() {
                this.done = true;
                this.aborted = false;
                this.fire();
                this.render();
                this.out.write('\n');
                this.close();
            }
            deactivate() {
                if (this.value === false) return this.bell();
                this.value = false;
                this.render();
            }
            activate() {
                if (this.value === true) return this.bell();
                this.value = true;
                this.render();
            }
            delete() {
                this.deactivate();
            }
            left() {
                this.deactivate();
            }
            right() {
                this.activate();
            }
            down() {
                this.deactivate();
            }
            up() {
                this.activate();
            }
            next() {
                this.value = !this.value;
                this.fire();
                this.render();
            }
            _(c, key) {
                if (c === ' ') {
                    this.value = !this.value;
                } else if (c === '1') {
                    this.value = true;
                } else if (c === '0') {
                    this.value = false;
                } else return this.bell();
                this.render();
            }
            render() {
                if (this.closed) return;
                if (this.firstRender) this.out.write(cursor.hide);
                else this.out.write(clear(this.outputText, this.out.columns));
                super.render();
                this.outputText = [
                    style.symbol(this.done, this.aborted),
                    color.bold(this.msg),
                    style.delimiter(this.done),
                    this.value ? this.inactive : color.cyan().underline(this.inactive),
                    color.gray('/'),
                    this.value ? color.cyan().underline(this.active) : this.active,
                ].join(' ');
                this.out.write(erase.line + cursor.to(0) + this.outputText);
            }
        };
        module2.exports = TogglePrompt;
    },
});

// node_modules/prompts/dist/dateparts/datepart.js
var require_datepart = __commonJS({
    'node_modules/prompts/dist/dateparts/datepart.js'(exports2, module2) {
        'use strict';
        var DatePart = class _DatePart {
            constructor({ token, date, parts, locales }) {
                this.token = token;
                this.date = date || /* @__PURE__ */ new Date();
                this.parts = parts || [this];
                this.locales = locales || {};
            }
            up() {}
            down() {}
            next() {
                const currentIdx = this.parts.indexOf(this);
                return this.parts.find(
                    (part, idx) => idx > currentIdx && part instanceof _DatePart,
                );
            }
            setTo(val2) {}
            prev() {
                let parts = [].concat(this.parts).reverse();
                const currentIdx = parts.indexOf(this);
                return parts.find((part, idx) => idx > currentIdx && part instanceof _DatePart);
            }
            toString() {
                return String(this.date);
            }
        };
        module2.exports = DatePart;
    },
});

// node_modules/prompts/dist/dateparts/meridiem.js
var require_meridiem = __commonJS({
    'node_modules/prompts/dist/dateparts/meridiem.js'(exports2, module2) {
        'use strict';
        var DatePart = require_datepart();
        var Meridiem = class extends DatePart {
            constructor(opts = {}) {
                super(opts);
            }
            up() {
                this.date.setHours((this.date.getHours() + 12) % 24);
            }
            down() {
                this.up();
            }
            toString() {
                let meridiem = this.date.getHours() > 12 ? 'pm' : 'am';
                return /\A/.test(this.token) ? meridiem.toUpperCase() : meridiem;
            }
        };
        module2.exports = Meridiem;
    },
});

// node_modules/prompts/dist/dateparts/day.js
var require_day = __commonJS({
    'node_modules/prompts/dist/dateparts/day.js'(exports2, module2) {
        'use strict';
        var DatePart = require_datepart();
        var pos = (n) => {
            n = n % 10;
            return n === 1 ? 'st' : n === 2 ? 'nd' : n === 3 ? 'rd' : 'th';
        };
        var Day = class extends DatePart {
            constructor(opts = {}) {
                super(opts);
            }
            up() {
                this.date.setDate(this.date.getDate() + 1);
            }
            down() {
                this.date.setDate(this.date.getDate() - 1);
            }
            setTo(val2) {
                this.date.setDate(parseInt(val2.substr(-2)));
            }
            toString() {
                let date = this.date.getDate();
                let day = this.date.getDay();
                return this.token === 'DD'
                    ? String(date).padStart(2, '0')
                    : this.token === 'Do'
                      ? date + pos(date)
                      : this.token === 'd'
                        ? day + 1
                        : this.token === 'ddd'
                          ? this.locales.weekdaysShort[day]
                          : this.token === 'dddd'
                            ? this.locales.weekdays[day]
                            : date;
            }
        };
        module2.exports = Day;
    },
});

// node_modules/prompts/dist/dateparts/hours.js
var require_hours = __commonJS({
    'node_modules/prompts/dist/dateparts/hours.js'(exports2, module2) {
        'use strict';
        var DatePart = require_datepart();
        var Hours = class extends DatePart {
            constructor(opts = {}) {
                super(opts);
            }
            up() {
                this.date.setHours(this.date.getHours() + 1);
            }
            down() {
                this.date.setHours(this.date.getHours() - 1);
            }
            setTo(val2) {
                this.date.setHours(parseInt(val2.substr(-2)));
            }
            toString() {
                let hours = this.date.getHours();
                if (/h/.test(this.token)) hours = hours % 12 || 12;
                return this.token.length > 1 ? String(hours).padStart(2, '0') : hours;
            }
        };
        module2.exports = Hours;
    },
});

// node_modules/prompts/dist/dateparts/milliseconds.js
var require_milliseconds = __commonJS({
    'node_modules/prompts/dist/dateparts/milliseconds.js'(exports2, module2) {
        'use strict';
        var DatePart = require_datepart();
        var Milliseconds = class extends DatePart {
            constructor(opts = {}) {
                super(opts);
            }
            up() {
                this.date.setMilliseconds(this.date.getMilliseconds() + 1);
            }
            down() {
                this.date.setMilliseconds(this.date.getMilliseconds() - 1);
            }
            setTo(val2) {
                this.date.setMilliseconds(parseInt(val2.substr(-this.token.length)));
            }
            toString() {
                return String(this.date.getMilliseconds())
                    .padStart(4, '0')
                    .substr(0, this.token.length);
            }
        };
        module2.exports = Milliseconds;
    },
});

// node_modules/prompts/dist/dateparts/minutes.js
var require_minutes = __commonJS({
    'node_modules/prompts/dist/dateparts/minutes.js'(exports2, module2) {
        'use strict';
        var DatePart = require_datepart();
        var Minutes = class extends DatePart {
            constructor(opts = {}) {
                super(opts);
            }
            up() {
                this.date.setMinutes(this.date.getMinutes() + 1);
            }
            down() {
                this.date.setMinutes(this.date.getMinutes() - 1);
            }
            setTo(val2) {
                this.date.setMinutes(parseInt(val2.substr(-2)));
            }
            toString() {
                let m2 = this.date.getMinutes();
                return this.token.length > 1 ? String(m2).padStart(2, '0') : m2;
            }
        };
        module2.exports = Minutes;
    },
});

// node_modules/prompts/dist/dateparts/month.js
var require_month = __commonJS({
    'node_modules/prompts/dist/dateparts/month.js'(exports2, module2) {
        'use strict';
        var DatePart = require_datepart();
        var Month = class extends DatePart {
            constructor(opts = {}) {
                super(opts);
            }
            up() {
                this.date.setMonth(this.date.getMonth() + 1);
            }
            down() {
                this.date.setMonth(this.date.getMonth() - 1);
            }
            setTo(val2) {
                val2 = parseInt(val2.substr(-2)) - 1;
                this.date.setMonth(val2 < 0 ? 0 : val2);
            }
            toString() {
                let month = this.date.getMonth();
                let tl = this.token.length;
                return tl === 2
                    ? String(month + 1).padStart(2, '0')
                    : tl === 3
                      ? this.locales.monthsShort[month]
                      : tl === 4
                        ? this.locales.months[month]
                        : String(month + 1);
            }
        };
        module2.exports = Month;
    },
});

// node_modules/prompts/dist/dateparts/seconds.js
var require_seconds = __commonJS({
    'node_modules/prompts/dist/dateparts/seconds.js'(exports2, module2) {
        'use strict';
        var DatePart = require_datepart();
        var Seconds = class extends DatePart {
            constructor(opts = {}) {
                super(opts);
            }
            up() {
                this.date.setSeconds(this.date.getSeconds() + 1);
            }
            down() {
                this.date.setSeconds(this.date.getSeconds() - 1);
            }
            setTo(val2) {
                this.date.setSeconds(parseInt(val2.substr(-2)));
            }
            toString() {
                let s2 = this.date.getSeconds();
                return this.token.length > 1 ? String(s2).padStart(2, '0') : s2;
            }
        };
        module2.exports = Seconds;
    },
});

// node_modules/prompts/dist/dateparts/year.js
var require_year = __commonJS({
    'node_modules/prompts/dist/dateparts/year.js'(exports2, module2) {
        'use strict';
        var DatePart = require_datepart();
        var Year = class extends DatePart {
            constructor(opts = {}) {
                super(opts);
            }
            up() {
                this.date.setFullYear(this.date.getFullYear() + 1);
            }
            down() {
                this.date.setFullYear(this.date.getFullYear() - 1);
            }
            setTo(val2) {
                this.date.setFullYear(val2.substr(-4));
            }
            toString() {
                let year = String(this.date.getFullYear()).padStart(4, '0');
                return this.token.length === 2 ? year.substr(-2) : year;
            }
        };
        module2.exports = Year;
    },
});

// node_modules/prompts/dist/dateparts/index.js
var require_dateparts = __commonJS({
    'node_modules/prompts/dist/dateparts/index.js'(exports2, module2) {
        'use strict';
        module2.exports = {
            DatePart: require_datepart(),
            Meridiem: require_meridiem(),
            Day: require_day(),
            Hours: require_hours(),
            Milliseconds: require_milliseconds(),
            Minutes: require_minutes(),
            Month: require_month(),
            Seconds: require_seconds(),
            Year: require_year(),
        };
    },
});

// node_modules/prompts/dist/elements/date.js
var require_date = __commonJS({
    'node_modules/prompts/dist/elements/date.js'(exports2, module2) {
        'use strict';
        function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
            try {
                var info = gen[key](arg);
                var value = info.value;
            } catch (error) {
                reject(error);
                return;
            }
            if (info.done) {
                resolve(value);
            } else {
                Promise.resolve(value).then(_next, _throw);
            }
        }
        function _asyncToGenerator(fn) {
            return function () {
                var self2 = this,
                    args = arguments;
                return new Promise(function (resolve, reject) {
                    var gen = fn.apply(self2, args);
                    function _next(value) {
                        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'next', value);
                    }
                    function _throw(err) {
                        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'throw', err);
                    }
                    _next(void 0);
                });
            };
        }
        var color = require_kleur();
        var Prompt = require_prompt();
        var _require = require_util();
        var style = _require.style;
        var clear = _require.clear;
        var figures = _require.figures;
        var _require2 = require_src();
        var erase = _require2.erase;
        var cursor = _require2.cursor;
        var _require3 = require_dateparts();
        var DatePart = _require3.DatePart;
        var Meridiem = _require3.Meridiem;
        var Day = _require3.Day;
        var Hours = _require3.Hours;
        var Milliseconds = _require3.Milliseconds;
        var Minutes = _require3.Minutes;
        var Month = _require3.Month;
        var Seconds = _require3.Seconds;
        var Year = _require3.Year;
        var regex =
            /\\(.)|"((?:\\["\\]|[^"])+)"|(D[Do]?|d{3,4}|d)|(M{1,4})|(YY(?:YY)?)|([aA])|([Hh]{1,2})|(m{1,2})|(s{1,2})|(S{1,4})|./g;
        var regexGroups = {
            1: ({ token }) => token.replace(/\\(.)/g, '$1'),
            2: (opts) => new Day(opts),
            // Day // TODO
            3: (opts) => new Month(opts),
            // Month
            4: (opts) => new Year(opts),
            // Year
            5: (opts) => new Meridiem(opts),
            // AM/PM // TODO (special)
            6: (opts) => new Hours(opts),
            // Hours
            7: (opts) => new Minutes(opts),
            // Minutes
            8: (opts) => new Seconds(opts),
            // Seconds
            9: (opts) => new Milliseconds(opts),
            // Fractional seconds
        };
        var dfltLocales = {
            months: 'January,February,March,April,May,June,July,August,September,October,November,December'.split(
                ',',
            ),
            monthsShort: 'Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec'.split(','),
            weekdays: 'Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday'.split(','),
            weekdaysShort: 'Sun,Mon,Tue,Wed,Thu,Fri,Sat'.split(','),
        };
        var DatePrompt = class extends Prompt {
            constructor(opts = {}) {
                super(opts);
                this.msg = opts.message;
                this.cursor = 0;
                this.typed = '';
                this.locales = Object.assign(dfltLocales, opts.locales);
                this._date = opts.initial || /* @__PURE__ */ new Date();
                this.errorMsg = opts.error || 'Please Enter A Valid Value';
                this.validator = opts.validate || (() => true);
                this.mask = opts.mask || 'YYYY-MM-DD HH:mm:ss';
                this.clear = clear('', this.out.columns);
                this.render();
            }
            get value() {
                return this.date;
            }
            get date() {
                return this._date;
            }
            set date(date) {
                if (date) this._date.setTime(date.getTime());
            }
            set mask(mask) {
                let result;
                this.parts = [];
                while ((result = regex.exec(mask))) {
                    let match = result.shift();
                    let idx = result.findIndex((gr) => gr != null);
                    this.parts.push(
                        idx in regexGroups
                            ? regexGroups[idx]({
                                  token: result[idx] || match,
                                  date: this.date,
                                  parts: this.parts,
                                  locales: this.locales,
                              })
                            : result[idx] || match,
                    );
                }
                let parts = this.parts.reduce((arr, i2) => {
                    if (typeof i2 === 'string' && typeof arr[arr.length - 1] === 'string')
                        arr[arr.length - 1] += i2;
                    else arr.push(i2);
                    return arr;
                }, []);
                this.parts.splice(0);
                this.parts.push(...parts);
                this.reset();
            }
            moveCursor(n) {
                this.typed = '';
                this.cursor = n;
                this.fire();
            }
            reset() {
                this.moveCursor(this.parts.findIndex((p) => p instanceof DatePart));
                this.fire();
                this.render();
            }
            exit() {
                this.abort();
            }
            abort() {
                this.done = this.aborted = true;
                this.error = false;
                this.fire();
                this.render();
                this.out.write('\n');
                this.close();
            }
            validate() {
                var _this = this;
                return _asyncToGenerator(function* () {
                    let valid = yield _this.validator(_this.value);
                    if (typeof valid === 'string') {
                        _this.errorMsg = valid;
                        valid = false;
                    }
                    _this.error = !valid;
                })();
            }
            submit() {
                var _this2 = this;
                return _asyncToGenerator(function* () {
                    yield _this2.validate();
                    if (_this2.error) {
                        _this2.color = 'red';
                        _this2.fire();
                        _this2.render();
                        return;
                    }
                    _this2.done = true;
                    _this2.aborted = false;
                    _this2.fire();
                    _this2.render();
                    _this2.out.write('\n');
                    _this2.close();
                })();
            }
            up() {
                this.typed = '';
                this.parts[this.cursor].up();
                this.render();
            }
            down() {
                this.typed = '';
                this.parts[this.cursor].down();
                this.render();
            }
            left() {
                let prev2 = this.parts[this.cursor].prev();
                if (prev2 == null) return this.bell();
                this.moveCursor(this.parts.indexOf(prev2));
                this.render();
            }
            right() {
                let next2 = this.parts[this.cursor].next();
                if (next2 == null) return this.bell();
                this.moveCursor(this.parts.indexOf(next2));
                this.render();
            }
            next() {
                let next2 = this.parts[this.cursor].next();
                this.moveCursor(
                    next2
                        ? this.parts.indexOf(next2)
                        : this.parts.findIndex((part) => part instanceof DatePart),
                );
                this.render();
            }
            _(c) {
                if (/\d/.test(c)) {
                    this.typed += c;
                    this.parts[this.cursor].setTo(this.typed);
                    this.render();
                }
            }
            render() {
                if (this.closed) return;
                if (this.firstRender) this.out.write(cursor.hide);
                else this.out.write(clear(this.outputText, this.out.columns));
                super.render();
                this.outputText = [
                    style.symbol(this.done, this.aborted),
                    color.bold(this.msg),
                    style.delimiter(false),
                    this.parts
                        .reduce(
                            (arr, p, idx) =>
                                arr.concat(
                                    idx === this.cursor && !this.done
                                        ? color.cyan().underline(p.toString())
                                        : p,
                                ),
                            [],
                        )
                        .join(''),
                ].join(' ');
                if (this.error) {
                    this.outputText += this.errorMsg.split('\n').reduce(
                        (a, l, i2) =>
                            a +
                            `
${i2 ? ` ` : figures.pointerSmall} ${color.red().italic(l)}`,
                        ``,
                    );
                }
                this.out.write(erase.line + cursor.to(0) + this.outputText);
            }
        };
        module2.exports = DatePrompt;
    },
});

// node_modules/prompts/dist/elements/number.js
var require_number = __commonJS({
    'node_modules/prompts/dist/elements/number.js'(exports2, module2) {
        'use strict';
        function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
            try {
                var info = gen[key](arg);
                var value = info.value;
            } catch (error) {
                reject(error);
                return;
            }
            if (info.done) {
                resolve(value);
            } else {
                Promise.resolve(value).then(_next, _throw);
            }
        }
        function _asyncToGenerator(fn) {
            return function () {
                var self2 = this,
                    args = arguments;
                return new Promise(function (resolve, reject) {
                    var gen = fn.apply(self2, args);
                    function _next(value) {
                        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'next', value);
                    }
                    function _throw(err) {
                        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'throw', err);
                    }
                    _next(void 0);
                });
            };
        }
        var color = require_kleur();
        var Prompt = require_prompt();
        var _require = require_src();
        var cursor = _require.cursor;
        var erase = _require.erase;
        var _require2 = require_util();
        var style = _require2.style;
        var figures = _require2.figures;
        var clear = _require2.clear;
        var lines = _require2.lines;
        var isNumber3 = /[0-9]/;
        var isDef = (any) => any !== void 0;
        var round = (number, precision) => {
            let factor = Math.pow(10, precision);
            return Math.round(number * factor) / factor;
        };
        var NumberPrompt = class extends Prompt {
            constructor(opts = {}) {
                super(opts);
                this.transform = style.render(opts.style);
                this.msg = opts.message;
                this.initial = isDef(opts.initial) ? opts.initial : '';
                this.float = !!opts.float;
                this.round = opts.round || 2;
                this.inc = opts.increment || 1;
                this.min = isDef(opts.min) ? opts.min : -Infinity;
                this.max = isDef(opts.max) ? opts.max : Infinity;
                this.errorMsg = opts.error || `Please Enter A Valid Value`;
                this.validator = opts.validate || (() => true);
                this.color = `cyan`;
                this.value = ``;
                this.typed = ``;
                this.lastHit = 0;
                this.render();
            }
            set value(v) {
                if (!v && v !== 0) {
                    this.placeholder = true;
                    this.rendered = color.gray(this.transform.render(`${this.initial}`));
                    this._value = ``;
                } else {
                    this.placeholder = false;
                    this.rendered = this.transform.render(`${round(v, this.round)}`);
                    this._value = round(v, this.round);
                }
                this.fire();
            }
            get value() {
                return this._value;
            }
            parse(x2) {
                return this.float ? parseFloat(x2) : parseInt(x2);
            }
            valid(c) {
                return c === `-` || (c === `.` && this.float) || isNumber3.test(c);
            }
            reset() {
                this.typed = ``;
                this.value = ``;
                this.fire();
                this.render();
            }
            exit() {
                this.abort();
            }
            abort() {
                let x2 = this.value;
                this.value = x2 !== `` ? x2 : this.initial;
                this.done = this.aborted = true;
                this.error = false;
                this.fire();
                this.render();
                this.out.write(`
`);
                this.close();
            }
            validate() {
                var _this = this;
                return _asyncToGenerator(function* () {
                    let valid = yield _this.validator(_this.value);
                    if (typeof valid === `string`) {
                        _this.errorMsg = valid;
                        valid = false;
                    }
                    _this.error = !valid;
                })();
            }
            submit() {
                var _this2 = this;
                return _asyncToGenerator(function* () {
                    yield _this2.validate();
                    if (_this2.error) {
                        _this2.color = `red`;
                        _this2.fire();
                        _this2.render();
                        return;
                    }
                    let x2 = _this2.value;
                    _this2.value = x2 !== `` ? x2 : _this2.initial;
                    _this2.done = true;
                    _this2.aborted = false;
                    _this2.error = false;
                    _this2.fire();
                    _this2.render();
                    _this2.out.write(`
`);
                    _this2.close();
                })();
            }
            up() {
                this.typed = ``;
                if (this.value === '') {
                    this.value = this.min - this.inc;
                }
                if (this.value >= this.max) return this.bell();
                this.value += this.inc;
                this.color = `cyan`;
                this.fire();
                this.render();
            }
            down() {
                this.typed = ``;
                if (this.value === '') {
                    this.value = this.min + this.inc;
                }
                if (this.value <= this.min) return this.bell();
                this.value -= this.inc;
                this.color = `cyan`;
                this.fire();
                this.render();
            }
            delete() {
                let val2 = this.value.toString();
                if (val2.length === 0) return this.bell();
                this.value = this.parse((val2 = val2.slice(0, -1))) || ``;
                if (this.value !== '' && this.value < this.min) {
                    this.value = this.min;
                }
                this.color = `cyan`;
                this.fire();
                this.render();
            }
            next() {
                this.value = this.initial;
                this.fire();
                this.render();
            }
            _(c, key) {
                if (!this.valid(c)) return this.bell();
                const now = Date.now();
                if (now - this.lastHit > 1e3) this.typed = ``;
                this.typed += c;
                this.lastHit = now;
                this.color = `cyan`;
                if (c === `.`) return this.fire();
                this.value = Math.min(this.parse(this.typed), this.max);
                if (this.value > this.max) this.value = this.max;
                if (this.value < this.min) this.value = this.min;
                this.fire();
                this.render();
            }
            render() {
                if (this.closed) return;
                if (!this.firstRender) {
                    if (this.outputError)
                        this.out.write(
                            cursor.down(lines(this.outputError, this.out.columns) - 1) +
                                clear(this.outputError, this.out.columns),
                        );
                    this.out.write(clear(this.outputText, this.out.columns));
                }
                super.render();
                this.outputError = '';
                this.outputText = [
                    style.symbol(this.done, this.aborted),
                    color.bold(this.msg),
                    style.delimiter(this.done),
                    !this.done || (!this.done && !this.placeholder)
                        ? color[this.color]().underline(this.rendered)
                        : this.rendered,
                ].join(` `);
                if (this.error) {
                    this.outputError += this.errorMsg
                        .split(
                            `
`,
                        )
                        .reduce(
                            (a, l, i2) =>
                                a +
                                `
${i2 ? ` ` : figures.pointerSmall} ${color.red().italic(l)}`,
                            ``,
                        );
                }
                this.out.write(
                    erase.line +
                        cursor.to(0) +
                        this.outputText +
                        cursor.save +
                        this.outputError +
                        cursor.restore,
                );
            }
        };
        module2.exports = NumberPrompt;
    },
});

// node_modules/prompts/dist/elements/multiselect.js
var require_multiselect = __commonJS({
    'node_modules/prompts/dist/elements/multiselect.js'(exports2, module2) {
        'use strict';
        var color = require_kleur();
        var _require = require_src();
        var cursor = _require.cursor;
        var Prompt = require_prompt();
        var _require2 = require_util();
        var clear = _require2.clear;
        var figures = _require2.figures;
        var style = _require2.style;
        var wrap2 = _require2.wrap;
        var entriesToDisplay = _require2.entriesToDisplay;
        var MultiselectPrompt = class extends Prompt {
            constructor(opts = {}) {
                super(opts);
                this.msg = opts.message;
                this.cursor = opts.cursor || 0;
                this.scrollIndex = opts.cursor || 0;
                this.hint = opts.hint || '';
                this.warn = opts.warn || '- This option is disabled -';
                this.minSelected = opts.min;
                this.showMinError = false;
                this.maxChoices = opts.max;
                this.instructions = opts.instructions;
                this.optionsPerPage = opts.optionsPerPage || 10;
                this.value = opts.choices.map((ch, idx) => {
                    if (typeof ch === 'string')
                        ch = {
                            title: ch,
                            value: idx,
                        };
                    return {
                        title: ch && (ch.title || ch.value || ch),
                        description: ch && ch.description,
                        value: ch && (ch.value === void 0 ? idx : ch.value),
                        selected: ch && ch.selected,
                        disabled: ch && ch.disabled,
                    };
                });
                this.clear = clear('', this.out.columns);
                if (!opts.overrideRender) {
                    this.render();
                }
            }
            reset() {
                this.value.map((v) => !v.selected);
                this.cursor = 0;
                this.fire();
                this.render();
            }
            selected() {
                return this.value.filter((v) => v.selected);
            }
            exit() {
                this.abort();
            }
            abort() {
                this.done = this.aborted = true;
                this.fire();
                this.render();
                this.out.write('\n');
                this.close();
            }
            submit() {
                const selected = this.value.filter((e2) => e2.selected);
                if (this.minSelected && selected.length < this.minSelected) {
                    this.showMinError = true;
                    this.render();
                } else {
                    this.done = true;
                    this.aborted = false;
                    this.fire();
                    this.render();
                    this.out.write('\n');
                    this.close();
                }
            }
            first() {
                this.cursor = 0;
                this.render();
            }
            last() {
                this.cursor = this.value.length - 1;
                this.render();
            }
            next() {
                this.cursor = (this.cursor + 1) % this.value.length;
                this.render();
            }
            up() {
                if (this.cursor === 0) {
                    this.cursor = this.value.length - 1;
                } else {
                    this.cursor--;
                }
                this.render();
            }
            down() {
                if (this.cursor === this.value.length - 1) {
                    this.cursor = 0;
                } else {
                    this.cursor++;
                }
                this.render();
            }
            left() {
                this.value[this.cursor].selected = false;
                this.render();
            }
            right() {
                if (this.value.filter((e2) => e2.selected).length >= this.maxChoices)
                    return this.bell();
                this.value[this.cursor].selected = true;
                this.render();
            }
            handleSpaceToggle() {
                const v = this.value[this.cursor];
                if (v.selected) {
                    v.selected = false;
                    this.render();
                } else if (
                    v.disabled ||
                    this.value.filter((e2) => e2.selected).length >= this.maxChoices
                ) {
                    return this.bell();
                } else {
                    v.selected = true;
                    this.render();
                }
            }
            toggleAll() {
                if (this.maxChoices !== void 0 || this.value[this.cursor].disabled) {
                    return this.bell();
                }
                const newSelected = !this.value[this.cursor].selected;
                this.value.filter((v) => !v.disabled).forEach((v) => (v.selected = newSelected));
                this.render();
            }
            _(c, key) {
                if (c === ' ') {
                    this.handleSpaceToggle();
                } else if (c === 'a') {
                    this.toggleAll();
                } else {
                    return this.bell();
                }
            }
            renderInstructions() {
                if (this.instructions === void 0 || this.instructions) {
                    if (typeof this.instructions === 'string') {
                        return this.instructions;
                    }
                    return (
                        `
Instructions:
    ${figures.arrowUp}/${figures.arrowDown}: Highlight option
    ${figures.arrowLeft}/${figures.arrowRight}/[space]: Toggle selection
` +
                        (this.maxChoices === void 0
                            ? `    a: Toggle all
`
                            : '') +
                        `    enter/return: Complete answer`
                    );
                }
                return '';
            }
            renderOption(cursor2, v, i2, arrowIndicator) {
                const prefix =
                    (v.selected ? color.green(figures.radioOn) : figures.radioOff) +
                    ' ' +
                    arrowIndicator +
                    ' ';
                let title, desc;
                if (v.disabled) {
                    title =
                        cursor2 === i2
                            ? color.gray().underline(v.title)
                            : color.strikethrough().gray(v.title);
                } else {
                    title = cursor2 === i2 ? color.cyan().underline(v.title) : v.title;
                    if (cursor2 === i2 && v.description) {
                        desc = ` - ${v.description}`;
                        if (
                            prefix.length + title.length + desc.length >= this.out.columns ||
                            v.description.split(/\r?\n/).length > 1
                        ) {
                            desc =
                                '\n' +
                                wrap2(v.description, {
                                    margin: prefix.length,
                                    width: this.out.columns,
                                });
                        }
                    }
                }
                return prefix + title + color.gray(desc || '');
            }
            // shared with autocompleteMultiselect
            paginateOptions(options2) {
                if (options2.length === 0) {
                    return color.red('No matches for this query.');
                }
                let _entriesToDisplay = entriesToDisplay(
                        this.cursor,
                        options2.length,
                        this.optionsPerPage,
                    ),
                    startIndex = _entriesToDisplay.startIndex,
                    endIndex = _entriesToDisplay.endIndex;
                let prefix,
                    styledOptions = [];
                for (let i2 = startIndex; i2 < endIndex; i2++) {
                    if (i2 === startIndex && startIndex > 0) {
                        prefix = figures.arrowUp;
                    } else if (i2 === endIndex - 1 && endIndex < options2.length) {
                        prefix = figures.arrowDown;
                    } else {
                        prefix = ' ';
                    }
                    styledOptions.push(this.renderOption(this.cursor, options2[i2], i2, prefix));
                }
                return '\n' + styledOptions.join('\n');
            }
            // shared with autocomleteMultiselect
            renderOptions(options2) {
                if (!this.done) {
                    return this.paginateOptions(options2);
                }
                return '';
            }
            renderDoneOrInstructions() {
                if (this.done) {
                    return this.value
                        .filter((e2) => e2.selected)
                        .map((v) => v.title)
                        .join(', ');
                }
                const output = [color.gray(this.hint), this.renderInstructions()];
                if (this.value[this.cursor].disabled) {
                    output.push(color.yellow(this.warn));
                }
                return output.join(' ');
            }
            render() {
                if (this.closed) return;
                if (this.firstRender) this.out.write(cursor.hide);
                super.render();
                let prompt = [
                    style.symbol(this.done, this.aborted),
                    color.bold(this.msg),
                    style.delimiter(false),
                    this.renderDoneOrInstructions(),
                ].join(' ');
                if (this.showMinError) {
                    prompt += color.red(
                        `You must select a minimum of ${this.minSelected} choices.`,
                    );
                    this.showMinError = false;
                }
                prompt += this.renderOptions(this.value);
                this.out.write(this.clear + prompt);
                this.clear = clear(prompt, this.out.columns);
            }
        };
        module2.exports = MultiselectPrompt;
    },
});

// node_modules/prompts/dist/elements/autocomplete.js
var require_autocomplete = __commonJS({
    'node_modules/prompts/dist/elements/autocomplete.js'(exports2, module2) {
        'use strict';
        function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
            try {
                var info = gen[key](arg);
                var value = info.value;
            } catch (error) {
                reject(error);
                return;
            }
            if (info.done) {
                resolve(value);
            } else {
                Promise.resolve(value).then(_next, _throw);
            }
        }
        function _asyncToGenerator(fn) {
            return function () {
                var self2 = this,
                    args = arguments;
                return new Promise(function (resolve, reject) {
                    var gen = fn.apply(self2, args);
                    function _next(value) {
                        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'next', value);
                    }
                    function _throw(err) {
                        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'throw', err);
                    }
                    _next(void 0);
                });
            };
        }
        var color = require_kleur();
        var Prompt = require_prompt();
        var _require = require_src();
        var erase = _require.erase;
        var cursor = _require.cursor;
        var _require2 = require_util();
        var style = _require2.style;
        var clear = _require2.clear;
        var figures = _require2.figures;
        var wrap2 = _require2.wrap;
        var entriesToDisplay = _require2.entriesToDisplay;
        var getVal = (arr, i2) => arr[i2] && (arr[i2].value || arr[i2].title || arr[i2]);
        var getTitle = (arr, i2) => arr[i2] && (arr[i2].title || arr[i2].value || arr[i2]);
        var getIndex = (arr, valOrTitle) => {
            const index2 = arr.findIndex(
                (el) => el.value === valOrTitle || el.title === valOrTitle,
            );
            return index2 > -1 ? index2 : void 0;
        };
        var AutocompletePrompt = class extends Prompt {
            constructor(opts = {}) {
                super(opts);
                this.msg = opts.message;
                this.suggest = opts.suggest;
                this.choices = opts.choices;
                this.initial =
                    typeof opts.initial === 'number'
                        ? opts.initial
                        : getIndex(opts.choices, opts.initial);
                this.select = this.initial || opts.cursor || 0;
                this.i18n = {
                    noMatches: opts.noMatches || 'no matches found',
                };
                this.fallback = opts.fallback || this.initial;
                this.clearFirst = opts.clearFirst || false;
                this.suggestions = [];
                this.input = '';
                this.limit = opts.limit || 10;
                this.cursor = 0;
                this.transform = style.render(opts.style);
                this.scale = this.transform.scale;
                this.render = this.render.bind(this);
                this.complete = this.complete.bind(this);
                this.clear = clear('', this.out.columns);
                this.complete(this.render);
                this.render();
            }
            set fallback(fb) {
                this._fb = Number.isSafeInteger(parseInt(fb)) ? parseInt(fb) : fb;
            }
            get fallback() {
                let choice;
                if (typeof this._fb === 'number') choice = this.choices[this._fb];
                else if (typeof this._fb === 'string')
                    choice = {
                        title: this._fb,
                    };
                return (
                    choice ||
                    this._fb || {
                        title: this.i18n.noMatches,
                    }
                );
            }
            moveSelect(i2) {
                this.select = i2;
                if (this.suggestions.length > 0) this.value = getVal(this.suggestions, i2);
                else this.value = this.fallback.value;
                this.fire();
            }
            complete(cb) {
                var _this = this;
                return _asyncToGenerator(function* () {
                    const p = (_this.completing = _this.suggest(_this.input, _this.choices));
                    const suggestions = yield p;
                    if (_this.completing !== p) return;
                    _this.suggestions = suggestions.map((s2, i2, arr) => ({
                        title: getTitle(arr, i2),
                        value: getVal(arr, i2),
                        description: s2.description,
                    }));
                    _this.completing = false;
                    const l = Math.max(suggestions.length - 1, 0);
                    _this.moveSelect(Math.min(l, _this.select));
                    cb && cb();
                })();
            }
            reset() {
                this.input = '';
                this.complete(() => {
                    this.moveSelect(this.initial !== void 0 ? this.initial : 0);
                    this.render();
                });
                this.render();
            }
            exit() {
                if (this.clearFirst && this.input.length > 0) {
                    this.reset();
                } else {
                    this.done = this.exited = true;
                    this.aborted = false;
                    this.fire();
                    this.render();
                    this.out.write('\n');
                    this.close();
                }
            }
            abort() {
                this.done = this.aborted = true;
                this.exited = false;
                this.fire();
                this.render();
                this.out.write('\n');
                this.close();
            }
            submit() {
                this.done = true;
                this.aborted = this.exited = false;
                this.fire();
                this.render();
                this.out.write('\n');
                this.close();
            }
            _(c, key) {
                let s1 = this.input.slice(0, this.cursor);
                let s2 = this.input.slice(this.cursor);
                this.input = `${s1}${c}${s2}`;
                this.cursor = s1.length + 1;
                this.complete(this.render);
                this.render();
            }
            delete() {
                if (this.cursor === 0) return this.bell();
                let s1 = this.input.slice(0, this.cursor - 1);
                let s2 = this.input.slice(this.cursor);
                this.input = `${s1}${s2}`;
                this.complete(this.render);
                this.cursor = this.cursor - 1;
                this.render();
            }
            deleteForward() {
                if (this.cursor * this.scale >= this.rendered.length) return this.bell();
                let s1 = this.input.slice(0, this.cursor);
                let s2 = this.input.slice(this.cursor + 1);
                this.input = `${s1}${s2}`;
                this.complete(this.render);
                this.render();
            }
            first() {
                this.moveSelect(0);
                this.render();
            }
            last() {
                this.moveSelect(this.suggestions.length - 1);
                this.render();
            }
            up() {
                if (this.select === 0) {
                    this.moveSelect(this.suggestions.length - 1);
                } else {
                    this.moveSelect(this.select - 1);
                }
                this.render();
            }
            down() {
                if (this.select === this.suggestions.length - 1) {
                    this.moveSelect(0);
                } else {
                    this.moveSelect(this.select + 1);
                }
                this.render();
            }
            next() {
                if (this.select === this.suggestions.length - 1) {
                    this.moveSelect(0);
                } else this.moveSelect(this.select + 1);
                this.render();
            }
            nextPage() {
                this.moveSelect(Math.min(this.select + this.limit, this.suggestions.length - 1));
                this.render();
            }
            prevPage() {
                this.moveSelect(Math.max(this.select - this.limit, 0));
                this.render();
            }
            left() {
                if (this.cursor <= 0) return this.bell();
                this.cursor = this.cursor - 1;
                this.render();
            }
            right() {
                if (this.cursor * this.scale >= this.rendered.length) return this.bell();
                this.cursor = this.cursor + 1;
                this.render();
            }
            renderOption(v, hovered, isStart, isEnd) {
                let desc;
                let prefix = isStart ? figures.arrowUp : isEnd ? figures.arrowDown : ' ';
                let title = hovered ? color.cyan().underline(v.title) : v.title;
                prefix = (hovered ? color.cyan(figures.pointer) + ' ' : '  ') + prefix;
                if (v.description) {
                    desc = ` - ${v.description}`;
                    if (
                        prefix.length + title.length + desc.length >= this.out.columns ||
                        v.description.split(/\r?\n/).length > 1
                    ) {
                        desc =
                            '\n' +
                            wrap2(v.description, {
                                margin: 3,
                                width: this.out.columns,
                            });
                    }
                }
                return prefix + ' ' + title + color.gray(desc || '');
            }
            render() {
                if (this.closed) return;
                if (this.firstRender) this.out.write(cursor.hide);
                else this.out.write(clear(this.outputText, this.out.columns));
                super.render();
                let _entriesToDisplay = entriesToDisplay(
                        this.select,
                        this.choices.length,
                        this.limit,
                    ),
                    startIndex = _entriesToDisplay.startIndex,
                    endIndex = _entriesToDisplay.endIndex;
                this.outputText = [
                    style.symbol(this.done, this.aborted, this.exited),
                    color.bold(this.msg),
                    style.delimiter(this.completing),
                    this.done && this.suggestions[this.select]
                        ? this.suggestions[this.select].title
                        : (this.rendered = this.transform.render(this.input)),
                ].join(' ');
                if (!this.done) {
                    const suggestions = this.suggestions
                        .slice(startIndex, endIndex)
                        .map((item, i2) =>
                            this.renderOption(
                                item,
                                this.select === i2 + startIndex,
                                i2 === 0 && startIndex > 0,
                                i2 + startIndex === endIndex - 1 && endIndex < this.choices.length,
                            ),
                        )
                        .join('\n');
                    this.outputText +=
                        `
` + (suggestions || color.gray(this.fallback.title));
                }
                this.out.write(erase.line + cursor.to(0) + this.outputText);
            }
        };
        module2.exports = AutocompletePrompt;
    },
});

// node_modules/prompts/dist/elements/autocompleteMultiselect.js
var require_autocompleteMultiselect = __commonJS({
    'node_modules/prompts/dist/elements/autocompleteMultiselect.js'(exports2, module2) {
        'use strict';
        var color = require_kleur();
        var _require = require_src();
        var cursor = _require.cursor;
        var MultiselectPrompt = require_multiselect();
        var _require2 = require_util();
        var clear = _require2.clear;
        var style = _require2.style;
        var figures = _require2.figures;
        var AutocompleteMultiselectPrompt = class extends MultiselectPrompt {
            constructor(opts = {}) {
                opts.overrideRender = true;
                super(opts);
                this.inputValue = '';
                this.clear = clear('', this.out.columns);
                this.filteredOptions = this.value;
                this.render();
            }
            last() {
                this.cursor = this.filteredOptions.length - 1;
                this.render();
            }
            next() {
                this.cursor = (this.cursor + 1) % this.filteredOptions.length;
                this.render();
            }
            up() {
                if (this.cursor === 0) {
                    this.cursor = this.filteredOptions.length - 1;
                } else {
                    this.cursor--;
                }
                this.render();
            }
            down() {
                if (this.cursor === this.filteredOptions.length - 1) {
                    this.cursor = 0;
                } else {
                    this.cursor++;
                }
                this.render();
            }
            left() {
                this.filteredOptions[this.cursor].selected = false;
                this.render();
            }
            right() {
                if (this.value.filter((e2) => e2.selected).length >= this.maxChoices)
                    return this.bell();
                this.filteredOptions[this.cursor].selected = true;
                this.render();
            }
            delete() {
                if (this.inputValue.length) {
                    this.inputValue = this.inputValue.substr(0, this.inputValue.length - 1);
                    this.updateFilteredOptions();
                }
            }
            updateFilteredOptions() {
                const currentHighlight = this.filteredOptions[this.cursor];
                this.filteredOptions = this.value.filter((v) => {
                    if (this.inputValue) {
                        if (typeof v.title === 'string') {
                            if (v.title.toLowerCase().includes(this.inputValue.toLowerCase())) {
                                return true;
                            }
                        }
                        if (typeof v.value === 'string') {
                            if (v.value.toLowerCase().includes(this.inputValue.toLowerCase())) {
                                return true;
                            }
                        }
                        return false;
                    }
                    return true;
                });
                const newHighlightIndex = this.filteredOptions.findIndex(
                    (v) => v === currentHighlight,
                );
                this.cursor = newHighlightIndex < 0 ? 0 : newHighlightIndex;
                this.render();
            }
            handleSpaceToggle() {
                const v = this.filteredOptions[this.cursor];
                if (v.selected) {
                    v.selected = false;
                    this.render();
                } else if (
                    v.disabled ||
                    this.value.filter((e2) => e2.selected).length >= this.maxChoices
                ) {
                    return this.bell();
                } else {
                    v.selected = true;
                    this.render();
                }
            }
            handleInputChange(c) {
                this.inputValue = this.inputValue + c;
                this.updateFilteredOptions();
            }
            _(c, key) {
                if (c === ' ') {
                    this.handleSpaceToggle();
                } else {
                    this.handleInputChange(c);
                }
            }
            renderInstructions() {
                if (this.instructions === void 0 || this.instructions) {
                    if (typeof this.instructions === 'string') {
                        return this.instructions;
                    }
                    return `
Instructions:
    ${figures.arrowUp}/${figures.arrowDown}: Highlight option
    ${figures.arrowLeft}/${figures.arrowRight}/[space]: Toggle selection
    [a,b,c]/delete: Filter choices
    enter/return: Complete answer
`;
                }
                return '';
            }
            renderCurrentInput() {
                return `
Filtered results for: ${this.inputValue ? this.inputValue : color.gray('Enter something to filter')}
`;
            }
            renderOption(cursor2, v, i2) {
                let title;
                if (v.disabled)
                    title =
                        cursor2 === i2
                            ? color.gray().underline(v.title)
                            : color.strikethrough().gray(v.title);
                else title = cursor2 === i2 ? color.cyan().underline(v.title) : v.title;
                return (
                    (v.selected ? color.green(figures.radioOn) : figures.radioOff) + '  ' + title
                );
            }
            renderDoneOrInstructions() {
                if (this.done) {
                    return this.value
                        .filter((e2) => e2.selected)
                        .map((v) => v.title)
                        .join(', ');
                }
                const output = [
                    color.gray(this.hint),
                    this.renderInstructions(),
                    this.renderCurrentInput(),
                ];
                if (this.filteredOptions.length && this.filteredOptions[this.cursor].disabled) {
                    output.push(color.yellow(this.warn));
                }
                return output.join(' ');
            }
            render() {
                if (this.closed) return;
                if (this.firstRender) this.out.write(cursor.hide);
                super.render();
                let prompt = [
                    style.symbol(this.done, this.aborted),
                    color.bold(this.msg),
                    style.delimiter(false),
                    this.renderDoneOrInstructions(),
                ].join(' ');
                if (this.showMinError) {
                    prompt += color.red(
                        `You must select a minimum of ${this.minSelected} choices.`,
                    );
                    this.showMinError = false;
                }
                prompt += this.renderOptions(this.filteredOptions);
                this.out.write(this.clear + prompt);
                this.clear = clear(prompt, this.out.columns);
            }
        };
        module2.exports = AutocompleteMultiselectPrompt;
    },
});

// node_modules/prompts/dist/elements/confirm.js
var require_confirm = __commonJS({
    'node_modules/prompts/dist/elements/confirm.js'(exports2, module2) {
        'use strict';
        var color = require_kleur();
        var Prompt = require_prompt();
        var _require = require_util();
        var style = _require.style;
        var clear = _require.clear;
        var _require2 = require_src();
        var erase = _require2.erase;
        var cursor = _require2.cursor;
        var ConfirmPrompt = class extends Prompt {
            constructor(opts = {}) {
                super(opts);
                this.msg = opts.message;
                this.value = opts.initial;
                this.initialValue = !!opts.initial;
                this.yesMsg = opts.yes || 'yes';
                this.yesOption = opts.yesOption || '(Y/n)';
                this.noMsg = opts.no || 'no';
                this.noOption = opts.noOption || '(y/N)';
                this.render();
            }
            reset() {
                this.value = this.initialValue;
                this.fire();
                this.render();
            }
            exit() {
                this.abort();
            }
            abort() {
                this.done = this.aborted = true;
                this.fire();
                this.render();
                this.out.write('\n');
                this.close();
            }
            submit() {
                this.value = this.value || false;
                this.done = true;
                this.aborted = false;
                this.fire();
                this.render();
                this.out.write('\n');
                this.close();
            }
            _(c, key) {
                if (c.toLowerCase() === 'y') {
                    this.value = true;
                    return this.submit();
                }
                if (c.toLowerCase() === 'n') {
                    this.value = false;
                    return this.submit();
                }
                return this.bell();
            }
            render() {
                if (this.closed) return;
                if (this.firstRender) this.out.write(cursor.hide);
                else this.out.write(clear(this.outputText, this.out.columns));
                super.render();
                this.outputText = [
                    style.symbol(this.done, this.aborted),
                    color.bold(this.msg),
                    style.delimiter(this.done),
                    this.done
                        ? this.value
                            ? this.yesMsg
                            : this.noMsg
                        : color.gray(this.initialValue ? this.yesOption : this.noOption),
                ].join(' ');
                this.out.write(erase.line + cursor.to(0) + this.outputText);
            }
        };
        module2.exports = ConfirmPrompt;
    },
});

// node_modules/prompts/dist/elements/index.js
var require_elements = __commonJS({
    'node_modules/prompts/dist/elements/index.js'(exports2, module2) {
        'use strict';
        module2.exports = {
            TextPrompt: require_text(),
            SelectPrompt: require_select(),
            TogglePrompt: require_toggle(),
            DatePrompt: require_date(),
            NumberPrompt: require_number(),
            MultiselectPrompt: require_multiselect(),
            AutocompletePrompt: require_autocomplete(),
            AutocompleteMultiselectPrompt: require_autocompleteMultiselect(),
            ConfirmPrompt: require_confirm(),
        };
    },
});

// node_modules/prompts/dist/prompts.js
var require_prompts = __commonJS({
    'node_modules/prompts/dist/prompts.js'(exports2) {
        'use strict';
        var $4 = exports2;
        var el = require_elements();
        var noop3 = (v) => v;
        function toPrompt(type, args, opts = {}) {
            return new Promise((res, rej) => {
                const p = new el[type](args);
                const onAbort = opts.onAbort || noop3;
                const onSubmit = opts.onSubmit || noop3;
                const onExit2 = opts.onExit || noop3;
                p.on('state', args.onState || noop3);
                p.on('submit', (x2) => res(onSubmit(x2)));
                p.on('exit', (x2) => res(onExit2(x2)));
                p.on('abort', (x2) => rej(onAbort(x2)));
            });
        }
        $4.text = (args) => toPrompt('TextPrompt', args);
        $4.password = (args) => {
            args.style = 'password';
            return $4.text(args);
        };
        $4.invisible = (args) => {
            args.style = 'invisible';
            return $4.text(args);
        };
        $4.number = (args) => toPrompt('NumberPrompt', args);
        $4.date = (args) => toPrompt('DatePrompt', args);
        $4.confirm = (args) => toPrompt('ConfirmPrompt', args);
        $4.list = (args) => {
            const sep = args.separator || ',';
            return toPrompt('TextPrompt', args, {
                onSubmit: (str) => str.split(sep).map((s2) => s2.trim()),
            });
        };
        $4.toggle = (args) => toPrompt('TogglePrompt', args);
        $4.select = (args) => toPrompt('SelectPrompt', args);
        $4.multiselect = (args) => {
            args.choices = [].concat(args.choices || []);
            const toSelected = (items) =>
                items.filter((item) => item.selected).map((item) => item.value);
            return toPrompt('MultiselectPrompt', args, {
                onAbort: toSelected,
                onSubmit: toSelected,
            });
        };
        $4.autocompleteMultiselect = (args) => {
            args.choices = [].concat(args.choices || []);
            const toSelected = (items) =>
                items.filter((item) => item.selected).map((item) => item.value);
            return toPrompt('AutocompleteMultiselectPrompt', args, {
                onAbort: toSelected,
                onSubmit: toSelected,
            });
        };
        var byTitle = (input, choices) =>
            Promise.resolve(
                choices.filter(
                    (item) =>
                        item.title.slice(0, input.length).toLowerCase() === input.toLowerCase(),
                ),
            );
        $4.autocomplete = (args) => {
            args.suggest = args.suggest || byTitle;
            args.choices = [].concat(args.choices || []);
            return toPrompt('AutocompletePrompt', args);
        };
    },
});

// node_modules/prompts/dist/index.js
var require_dist = __commonJS({
    'node_modules/prompts/dist/index.js'(exports2, module2) {
        'use strict';
        function ownKeys(object, enumerableOnly) {
            var keys = Object.keys(object);
            if (Object.getOwnPropertySymbols) {
                var symbols = Object.getOwnPropertySymbols(object);
                if (enumerableOnly) {
                    symbols = symbols.filter(function (sym) {
                        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
                    });
                }
                keys.push.apply(keys, symbols);
            }
            return keys;
        }
        function _objectSpread(target) {
            for (var i2 = 1; i2 < arguments.length; i2++) {
                var source = arguments[i2] != null ? arguments[i2] : {};
                if (i2 % 2) {
                    ownKeys(Object(source), true).forEach(function (key) {
                        _defineProperty(target, key, source[key]);
                    });
                } else if (Object.getOwnPropertyDescriptors) {
                    Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
                } else {
                    ownKeys(Object(source)).forEach(function (key) {
                        Object.defineProperty(
                            target,
                            key,
                            Object.getOwnPropertyDescriptor(source, key),
                        );
                    });
                }
            }
            return target;
        }
        function _defineProperty(obj, key, value) {
            if (key in obj) {
                Object.defineProperty(obj, key, {
                    value,
                    enumerable: true,
                    configurable: true,
                    writable: true,
                });
            } else {
                obj[key] = value;
            }
            return obj;
        }
        function _createForOfIteratorHelper(o, allowArrayLike) {
            var it = (typeof Symbol !== 'undefined' && o[Symbol.iterator]) || o['@@iterator'];
            if (!it) {
                if (
                    Array.isArray(o) ||
                    (it = _unsupportedIterableToArray(o)) ||
                    (allowArrayLike && o && typeof o.length === 'number')
                ) {
                    if (it) o = it;
                    var i2 = 0;
                    var F2 = function F3() {};
                    return {
                        s: F2,
                        n: function n() {
                            if (i2 >= o.length) return { done: true };
                            return { done: false, value: o[i2++] };
                        },
                        e: function e2(_e) {
                            throw _e;
                        },
                        f: F2,
                    };
                }
                throw new TypeError(
                    'Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
                );
            }
            var normalCompletion = true,
                didErr = false,
                err;
            return {
                s: function s2() {
                    it = it.call(o);
                },
                n: function n() {
                    var step = it.next();
                    normalCompletion = step.done;
                    return step;
                },
                e: function e2(_e2) {
                    didErr = true;
                    err = _e2;
                },
                f: function f3() {
                    try {
                        if (!normalCompletion && it.return != null) it.return();
                    } finally {
                        if (didErr) throw err;
                    }
                },
            };
        }
        function _unsupportedIterableToArray(o, minLen) {
            if (!o) return;
            if (typeof o === 'string') return _arrayLikeToArray(o, minLen);
            var n = Object.prototype.toString.call(o).slice(8, -1);
            if (n === 'Object' && o.constructor) n = o.constructor.name;
            if (n === 'Map' || n === 'Set') return Array.from(o);
            if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
                return _arrayLikeToArray(o, minLen);
        }
        function _arrayLikeToArray(arr, len) {
            if (len == null || len > arr.length) len = arr.length;
            for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) arr2[i2] = arr[i2];
            return arr2;
        }
        function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
            try {
                var info = gen[key](arg);
                var value = info.value;
            } catch (error) {
                reject(error);
                return;
            }
            if (info.done) {
                resolve(value);
            } else {
                Promise.resolve(value).then(_next, _throw);
            }
        }
        function _asyncToGenerator(fn) {
            return function () {
                var self2 = this,
                    args = arguments;
                return new Promise(function (resolve, reject) {
                    var gen = fn.apply(self2, args);
                    function _next(value) {
                        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'next', value);
                    }
                    function _throw(err) {
                        asyncGeneratorStep(gen, resolve, reject, _next, _throw, 'throw', err);
                    }
                    _next(void 0);
                });
            };
        }
        var prompts2 = require_prompts();
        var passOn = ['suggest', 'format', 'onState', 'validate', 'onRender', 'type'];
        var noop3 = () => {};
        function prompt() {
            return _prompt.apply(this, arguments);
        }
        function _prompt() {
            _prompt = _asyncToGenerator(function* (
                questions = [],
                { onSubmit = noop3, onCancel = noop3 } = {},
            ) {
                const answers = {};
                const override2 = prompt._override || {};
                questions = [].concat(questions);
                let answer, question, quit, name, type, lastPrompt;
                const getFormattedAnswer = /* @__PURE__ */ (function () {
                    var _ref = _asyncToGenerator(function* (
                        question2,
                        answer2,
                        skipValidation = false,
                    ) {
                        if (
                            !skipValidation &&
                            question2.validate &&
                            question2.validate(answer2) !== true
                        ) {
                            return;
                        }
                        return question2.format
                            ? yield question2.format(answer2, answers)
                            : answer2;
                    });
                    return function getFormattedAnswer2(_x, _x2) {
                        return _ref.apply(this, arguments);
                    };
                })();
                var _iterator = _createForOfIteratorHelper(questions),
                    _step;
                try {
                    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
                        question = _step.value;
                        var _question = question;
                        name = _question.name;
                        type = _question.type;
                        if (typeof type === 'function') {
                            type = yield type(answer, _objectSpread({}, answers), question);
                            question['type'] = type;
                        }
                        if (!type) continue;
                        for (let key in question) {
                            if (passOn.includes(key)) continue;
                            let value = question[key];
                            question[key] =
                                typeof value === 'function'
                                    ? yield value(answer, _objectSpread({}, answers), lastPrompt)
                                    : value;
                        }
                        lastPrompt = question;
                        if (typeof question.message !== 'string') {
                            throw new Error('prompt message is required');
                        }
                        var _question2 = question;
                        name = _question2.name;
                        type = _question2.type;
                        if (prompts2[type] === void 0) {
                            throw new Error(`prompt type (${type}) is not defined`);
                        }
                        if (override2[question.name] !== void 0) {
                            answer = yield getFormattedAnswer(question, override2[question.name]);
                            if (answer !== void 0) {
                                answers[name] = answer;
                                continue;
                            }
                        }
                        try {
                            answer = prompt._injected
                                ? getInjectedAnswer(prompt._injected, question.initial)
                                : yield prompts2[type](question);
                            answers[name] = answer = yield getFormattedAnswer(
                                question,
                                answer,
                                true,
                            );
                            quit = yield onSubmit(question, answer, answers);
                        } catch (err) {
                            quit = !(yield onCancel(question, answers));
                        }
                        if (quit) return answers;
                    }
                } catch (err) {
                    _iterator.e(err);
                } finally {
                    _iterator.f();
                }
                return answers;
            });
            return _prompt.apply(this, arguments);
        }
        function getInjectedAnswer(injected, deafultValue) {
            const answer = injected.shift();
            if (answer instanceof Error) {
                throw answer;
            }
            return answer === void 0 ? deafultValue : answer;
        }
        function inject(answers) {
            prompt._injected = (prompt._injected || []).concat(answers);
        }
        function override(answers) {
            prompt._override = Object.assign({}, answers);
        }
        module2.exports = Object.assign(prompt, {
            prompt,
            prompts: prompts2,
            inject,
            override,
        });
    },
});

// node_modules/prompts/lib/util/action.js
var require_action2 = __commonJS({
    'node_modules/prompts/lib/util/action.js'(exports2, module2) {
        'use strict';
        module2.exports = (key, isSelect) => {
            if (key.meta && key.name !== 'escape') return;
            if (key.ctrl) {
                if (key.name === 'a') return 'first';
                if (key.name === 'c') return 'abort';
                if (key.name === 'd') return 'abort';
                if (key.name === 'e') return 'last';
                if (key.name === 'g') return 'reset';
            }
            if (isSelect) {
                if (key.name === 'j') return 'down';
                if (key.name === 'k') return 'up';
            }
            if (key.name === 'return') return 'submit';
            if (key.name === 'enter') return 'submit';
            if (key.name === 'backspace') return 'delete';
            if (key.name === 'delete') return 'deleteForward';
            if (key.name === 'abort') return 'abort';
            if (key.name === 'escape') return 'exit';
            if (key.name === 'tab') return 'next';
            if (key.name === 'pagedown') return 'nextPage';
            if (key.name === 'pageup') return 'prevPage';
            if (key.name === 'home') return 'home';
            if (key.name === 'end') return 'end';
            if (key.name === 'up') return 'up';
            if (key.name === 'down') return 'down';
            if (key.name === 'right') return 'right';
            if (key.name === 'left') return 'left';
            return false;
        };
    },
});

// node_modules/prompts/lib/util/strip.js
var require_strip2 = __commonJS({
    'node_modules/prompts/lib/util/strip.js'(exports2, module2) {
        'use strict';
        module2.exports = (str) => {
            const pattern = [
                '[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)',
                '(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PRZcf-ntqry=><~]))',
            ].join('|');
            const RGX = new RegExp(pattern, 'g');
            return typeof str === 'string' ? str.replace(RGX, '') : str;
        };
    },
});

// node_modules/prompts/lib/util/clear.js
var require_clear2 = __commonJS({
    'node_modules/prompts/lib/util/clear.js'(exports2, module2) {
        'use strict';
        var strip = require_strip2();
        var { erase, cursor } = require_src();
        var width = (str) => [...strip(str)].length;
        module2.exports = function (prompt, perLine) {
            if (!perLine) return erase.line + cursor.to(0);
            let rows = 0;
            const lines = prompt.split(/\r?\n/);
            for (let line of lines) {
                rows += 1 + Math.floor(Math.max(width(line) - 1, 0) / perLine);
            }
            return erase.lines(rows);
        };
    },
});

// node_modules/prompts/lib/util/figures.js
var require_figures2 = __commonJS({
    'node_modules/prompts/lib/util/figures.js'(exports2, module2) {
        'use strict';
        var main = {
            arrowUp: '\u2191',
            arrowDown: '\u2193',
            arrowLeft: '\u2190',
            arrowRight: '\u2192',
            radioOn: '\u25C9',
            radioOff: '\u25EF',
            tick: '\u2714',
            cross: '\u2716',
            ellipsis: '\u2026',
            pointerSmall: '\u203A',
            line: '\u2500',
            pointer: '\u276F',
        };
        var win = {
            arrowUp: main.arrowUp,
            arrowDown: main.arrowDown,
            arrowLeft: main.arrowLeft,
            arrowRight: main.arrowRight,
            radioOn: '(*)',
            radioOff: '( )',
            tick: '\u221A',
            cross: '\xD7',
            ellipsis: '...',
            pointerSmall: '\xBB',
            line: '\u2500',
            pointer: '>',
        };
        var figures = process.platform === 'win32' ? win : main;
        module2.exports = figures;
    },
});

// node_modules/prompts/lib/util/style.js
var require_style2 = __commonJS({
    'node_modules/prompts/lib/util/style.js'(exports2, module2) {
        'use strict';
        var c = require_kleur();
        var figures = require_figures2();
        var styles = Object.freeze({
            password: { scale: 1, render: (input) => '*'.repeat(input.length) },
            emoji: { scale: 2, render: (input) => '\u{1F603}'.repeat(input.length) },
            invisible: { scale: 0, render: (input) => '' },
            default: { scale: 1, render: (input) => `${input}` },
        });
        var render3 = (type) => styles[type] || styles.default;
        var symbols = Object.freeze({
            aborted: c.red(figures.cross),
            done: c.green(figures.tick),
            exited: c.yellow(figures.cross),
            default: c.cyan('?'),
        });
        var symbol = (done, aborted, exited) =>
            aborted
                ? symbols.aborted
                : exited
                  ? symbols.exited
                  : done
                    ? symbols.done
                    : symbols.default;
        var delimiter = (completing) =>
            c.gray(completing ? figures.ellipsis : figures.pointerSmall);
        var item = (expandable, expanded) =>
            c.gray(expandable ? (expanded ? figures.pointerSmall : '+') : figures.line);
        module2.exports = {
            styles,
            render: render3,
            symbols,
            symbol,
            delimiter,
            item,
        };
    },
});

// node_modules/prompts/lib/util/lines.js
var require_lines2 = __commonJS({
    'node_modules/prompts/lib/util/lines.js'(exports2, module2) {
        'use strict';
        var strip = require_strip2();
        module2.exports = function (msg, perLine) {
            let lines = String(strip(msg) || '').split(/\r?\n/);
            if (!perLine) return lines.length;
            return lines.map((l) => Math.ceil(l.length / perLine)).reduce((a, b) => a + b);
        };
    },
});

// node_modules/prompts/lib/util/wrap.js
var require_wrap2 = __commonJS({
    'node_modules/prompts/lib/util/wrap.js'(exports2, module2) {
        'use strict';
        module2.exports = (msg, opts = {}) => {
            const tab = Number.isSafeInteger(parseInt(opts.margin))
                ? new Array(parseInt(opts.margin)).fill(' ').join('')
                : opts.margin || '';
            const width = opts.width;
            return (msg || '')
                .split(/\r?\n/g)
                .map((line) =>
                    line
                        .split(/\s+/g)
                        .reduce(
                            (arr, w) => {
                                if (
                                    w.length + tab.length >= width ||
                                    arr[arr.length - 1].length + w.length + 1 < width
                                )
                                    arr[arr.length - 1] += ` ${w}`;
                                else arr.push(`${tab}${w}`);
                                return arr;
                            },
                            [tab],
                        )
                        .join('\n'),
                )
                .join('\n');
        };
    },
});

// node_modules/prompts/lib/util/entriesToDisplay.js
var require_entriesToDisplay2 = __commonJS({
    'node_modules/prompts/lib/util/entriesToDisplay.js'(exports2, module2) {
        'use strict';
        module2.exports = (cursor, total, maxVisible) => {
            maxVisible = maxVisible || total;
            let startIndex = Math.min(total - maxVisible, cursor - Math.floor(maxVisible / 2));
            if (startIndex < 0) startIndex = 0;
            let endIndex = Math.min(startIndex + maxVisible, total);
            return { startIndex, endIndex };
        };
    },
});

// node_modules/prompts/lib/util/index.js
var require_util2 = __commonJS({
    'node_modules/prompts/lib/util/index.js'(exports2, module2) {
        'use strict';
        module2.exports = {
            action: require_action2(),
            clear: require_clear2(),
            style: require_style2(),
            strip: require_strip2(),
            figures: require_figures2(),
            lines: require_lines2(),
            wrap: require_wrap2(),
            entriesToDisplay: require_entriesToDisplay2(),
        };
    },
});

// node_modules/prompts/lib/elements/prompt.js
var require_prompt2 = __commonJS({
    'node_modules/prompts/lib/elements/prompt.js'(exports2, module2) {
        'use strict';
        var readline = require('readline');
        var { action } = require_util2();
        var EventEmitter = require('events');
        var { beep, cursor } = require_src();
        var color = require_kleur();
        var Prompt = class extends EventEmitter {
            constructor(opts = {}) {
                super();
                this.firstRender = true;
                this.in = opts.stdin || process.stdin;
                this.out = opts.stdout || process.stdout;
                this.onRender = (opts.onRender || (() => void 0)).bind(this);
                const rl = readline.createInterface({ input: this.in, escapeCodeTimeout: 50 });
                readline.emitKeypressEvents(this.in, rl);
                if (this.in.isTTY) this.in.setRawMode(true);
                const isSelect =
                    ['SelectPrompt', 'MultiselectPrompt'].indexOf(this.constructor.name) > -1;
                const keypress = (str, key) => {
                    let a = action(key, isSelect);
                    if (a === false) {
                        this._ && this._(str, key);
                    } else if (typeof this[a] === 'function') {
                        this[a](key);
                    } else {
                        this.bell();
                    }
                };
                this.close = () => {
                    this.out.write(cursor.show);
                    this.in.removeListener('keypress', keypress);
                    if (this.in.isTTY) this.in.setRawMode(false);
                    rl.close();
                    this.emit(this.aborted ? 'abort' : this.exited ? 'exit' : 'submit', this.value);
                    this.closed = true;
                };
                this.in.on('keypress', keypress);
            }
            fire() {
                this.emit('state', {
                    value: this.value,
                    aborted: !!this.aborted,
                    exited: !!this.exited,
                });
            }
            bell() {
                this.out.write(beep);
            }
            render() {
                this.onRender(color);
                if (this.firstRender) this.firstRender = false;
            }
        };
        module2.exports = Prompt;
    },
});

// node_modules/prompts/lib/elements/text.js
var require_text2 = __commonJS({
    'node_modules/prompts/lib/elements/text.js'(exports2, module2) {
        var color = require_kleur();
        var Prompt = require_prompt2();
        var { erase, cursor } = require_src();
        var { style, clear, lines, figures } = require_util2();
        var TextPrompt = class extends Prompt {
            constructor(opts = {}) {
                super(opts);
                this.transform = style.render(opts.style);
                this.scale = this.transform.scale;
                this.msg = opts.message;
                this.initial = opts.initial || ``;
                this.validator = opts.validate || (() => true);
                this.value = ``;
                this.errorMsg = opts.error || `Please Enter A Valid Value`;
                this.cursor = Number(!!this.initial);
                this.cursorOffset = 0;
                this.clear = clear(``, this.out.columns);
                this.render();
            }
            set value(v) {
                if (!v && this.initial) {
                    this.placeholder = true;
                    this.rendered = color.gray(this.transform.render(this.initial));
                } else {
                    this.placeholder = false;
                    this.rendered = this.transform.render(v);
                }
                this._value = v;
                this.fire();
            }
            get value() {
                return this._value;
            }
            reset() {
                this.value = ``;
                this.cursor = Number(!!this.initial);
                this.cursorOffset = 0;
                this.fire();
                this.render();
            }
            exit() {
                this.abort();
            }
            abort() {
                this.value = this.value || this.initial;
                this.done = this.aborted = true;
                this.error = false;
                this.red = false;
                this.fire();
                this.render();
                this.out.write('\n');
                this.close();
            }
            async validate() {
                let valid = await this.validator(this.value);
                if (typeof valid === `string`) {
                    this.errorMsg = valid;
                    valid = false;
                }
                this.error = !valid;
            }
            async submit() {
                this.value = this.value || this.initial;
                this.cursorOffset = 0;
                this.cursor = this.rendered.length;
                await this.validate();
                if (this.error) {
                    this.red = true;
                    this.fire();
                    this.render();
                    return;
                }
                this.done = true;
                this.aborted = false;
                this.fire();
                this.render();
                this.out.write('\n');
                this.close();
            }
            next() {
                if (!this.placeholder) return this.bell();
                this.value = this.initial;
                this.cursor = this.rendered.length;
                this.fire();
                this.render();
            }
            moveCursor(n) {
                if (this.placeholder) return;
                this.cursor = this.cursor + n;
                this.cursorOffset += n;
            }
            _(c, key) {
                let s1 = this.value.slice(0, this.cursor);
                let s2 = this.value.slice(this.cursor);
                this.value = `${s1}${c}${s2}`;
                this.red = false;
                this.cursor = this.placeholder ? 0 : s1.length + 1;
                this.render();
            }
            delete() {
                if (this.isCursorAtStart()) return this.bell();
                let s1 = this.value.slice(0, this.cursor - 1);
                let s2 = this.value.slice(this.cursor);
                this.value = `${s1}${s2}`;
                this.red = false;
                if (this.isCursorAtStart()) {
                    this.cursorOffset = 0;
                } else {
                    this.cursorOffset++;
                    this.moveCursor(-1);
                }
                this.render();
            }
            deleteForward() {
                if (this.cursor * this.scale >= this.rendered.length || this.placeholder)
                    return this.bell();
                let s1 = this.value.slice(0, this.cursor);
                let s2 = this.value.slice(this.cursor + 1);
                this.value = `${s1}${s2}`;
                this.red = false;
                if (this.isCursorAtEnd()) {
                    this.cursorOffset = 0;
                } else {
                    this.cursorOffset++;
                }
                this.render();
            }
            first() {
                this.cursor = 0;
                this.render();
            }
            last() {
                this.cursor = this.value.length;
                this.render();
            }
            left() {
                if (this.cursor <= 0 || this.placeholder) return this.bell();
                this.moveCursor(-1);
                this.render();
            }
            right() {
                if (this.cursor * this.scale >= this.rendered.length || this.placeholder)
                    return this.bell();
                this.moveCursor(1);
                this.render();
            }
            isCursorAtStart() {
                return this.cursor === 0 || (this.placeholder && this.cursor === 1);
            }
            isCursorAtEnd() {
                return (
                    this.cursor === this.rendered.length ||
                    (this.placeholder && this.cursor === this.rendered.length + 1)
                );
            }
            render() {
                if (this.closed) return;
                if (!this.firstRender) {
                    if (this.outputError)
                        this.out.write(
                            cursor.down(lines(this.outputError, this.out.columns) - 1) +
                                clear(this.outputError, this.out.columns),
                        );
                    this.out.write(clear(this.outputText, this.out.columns));
                }
                super.render();
                this.outputError = '';
                this.outputText = [
                    style.symbol(this.done, this.aborted),
                    color.bold(this.msg),
                    style.delimiter(this.done),
                    this.red ? color.red(this.rendered) : this.rendered,
                ].join(` `);
                if (this.error) {
                    this.outputError += this.errorMsg
                        .split(
                            `
`,
                        )
                        .reduce(
                            (a, l, i2) =>
                                a +
                                `
${i2 ? ' ' : figures.pointerSmall} ${color.red().italic(l)}`,
                            ``,
                        );
                }
                this.out.write(
                    erase.line +
                        cursor.to(0) +
                        this.outputText +
                        cursor.save +
                        this.outputError +
                        cursor.restore +
                        cursor.move(this.cursorOffset, 0),
                );
            }
        };
        module2.exports = TextPrompt;
    },
});

// node_modules/prompts/lib/elements/select.js
var require_select2 = __commonJS({
    'node_modules/prompts/lib/elements/select.js'(exports2, module2) {
        'use strict';
        var color = require_kleur();
        var Prompt = require_prompt2();
        var { style, clear, figures, wrap: wrap2, entriesToDisplay } = require_util2();
        var { cursor } = require_src();
        var SelectPrompt = class extends Prompt {
            constructor(opts = {}) {
                super(opts);
                this.msg = opts.message;
                this.hint = opts.hint || '- Use arrow-keys. Return to submit.';
                this.warn = opts.warn || '- This option is disabled';
                this.cursor = opts.initial || 0;
                this.choices = opts.choices.map((ch, idx) => {
                    if (typeof ch === 'string') ch = { title: ch, value: idx };
                    return {
                        title: ch && (ch.title || ch.value || ch),
                        value: ch && (ch.value === void 0 ? idx : ch.value),
                        description: ch && ch.description,
                        selected: ch && ch.selected,
                        disabled: ch && ch.disabled,
                    };
                });
                this.optionsPerPage = opts.optionsPerPage || 10;
                this.value = (this.choices[this.cursor] || {}).value;
                this.clear = clear('', this.out.columns);
                this.render();
            }
            moveCursor(n) {
                this.cursor = n;
                this.value = this.choices[n].value;
                this.fire();
            }
            reset() {
                this.moveCursor(0);
                this.fire();
                this.render();
            }
            exit() {
                this.abort();
            }
            abort() {
                this.done = this.aborted = true;
                this.fire();
                this.render();
                this.out.write('\n');
                this.close();
            }
            submit() {
                if (!this.selection.disabled) {
                    this.done = true;
                    this.aborted = false;
                    this.fire();
                    this.render();
                    this.out.write('\n');
                    this.close();
                } else this.bell();
            }
            first() {
                this.moveCursor(0);
                this.render();
            }
            last() {
                this.moveCursor(this.choices.length - 1);
                this.render();
            }
            up() {
                if (this.cursor === 0) {
                    this.moveCursor(this.choices.length - 1);
                } else {
                    this.moveCursor(this.cursor - 1);
                }
                this.render();
            }
            down() {
                if (this.cursor === this.choices.length - 1) {
                    this.moveCursor(0);
                } else {
                    this.moveCursor(this.cursor + 1);
                }
                this.render();
            }
            next() {
                this.moveCursor((this.cursor + 1) % this.choices.length);
                this.render();
            }
            _(c, key) {
                if (c === ' ') return this.submit();
            }
            get selection() {
                return this.choices[this.cursor];
            }
            render() {
                if (this.closed) return;
                if (this.firstRender) this.out.write(cursor.hide);
                else this.out.write(clear(this.outputText, this.out.columns));
                super.render();
                let { startIndex, endIndex } = entriesToDisplay(
                    this.cursor,
                    this.choices.length,
                    this.optionsPerPage,
                );
                this.outputText = [
                    style.symbol(this.done, this.aborted),
                    color.bold(this.msg),
                    style.delimiter(false),
                    this.done
                        ? this.selection.title
                        : this.selection.disabled
                          ? color.yellow(this.warn)
                          : color.gray(this.hint),
                ].join(' ');
                if (!this.done) {
                    this.outputText += '\n';
                    for (let i2 = startIndex; i2 < endIndex; i2++) {
                        let title,
                            prefix,
                            desc = '',
                            v = this.choices[i2];
                        if (i2 === startIndex && startIndex > 0) {
                            prefix = figures.arrowUp;
                        } else if (i2 === endIndex - 1 && endIndex < this.choices.length) {
                            prefix = figures.arrowDown;
                        } else {
                            prefix = ' ';
                        }
                        if (v.disabled) {
                            title =
                                this.cursor === i2
                                    ? color.gray().underline(v.title)
                                    : color.strikethrough().gray(v.title);
                            prefix =
                                (this.cursor === i2
                                    ? color.bold().gray(figures.pointer) + ' '
                                    : '  ') + prefix;
                        } else {
                            title = this.cursor === i2 ? color.cyan().underline(v.title) : v.title;
                            prefix =
                                (this.cursor === i2 ? color.cyan(figures.pointer) + ' ' : '  ') +
                                prefix;
                            if (v.description && this.cursor === i2) {
                                desc = ` - ${v.description}`;
                                if (
                                    prefix.length + title.length + desc.length >=
                                        this.out.columns ||
                                    v.description.split(/\r?\n/).length > 1
                                ) {
                                    desc =
                                        '\n' +
                                        wrap2(v.description, {
                                            margin: 3,
                                            width: this.out.columns,
                                        });
                                }
                            }
                        }
                        this.outputText += `${prefix} ${title}${color.gray(desc)}
`;
                    }
                }
                this.out.write(this.outputText);
            }
        };
        module2.exports = SelectPrompt;
    },
});

// node_modules/prompts/lib/elements/toggle.js
var require_toggle2 = __commonJS({
    'node_modules/prompts/lib/elements/toggle.js'(exports2, module2) {
        var color = require_kleur();
        var Prompt = require_prompt2();
        var { style, clear } = require_util2();
        var { cursor, erase } = require_src();
        var TogglePrompt = class extends Prompt {
            constructor(opts = {}) {
                super(opts);
                this.msg = opts.message;
                this.value = !!opts.initial;
                this.active = opts.active || 'on';
                this.inactive = opts.inactive || 'off';
                this.initialValue = this.value;
                this.render();
            }
            reset() {
                this.value = this.initialValue;
                this.fire();
                this.render();
            }
            exit() {
                this.abort();
            }
            abort() {
                this.done = this.aborted = true;
                this.fire();
                this.render();
                this.out.write('\n');
                this.close();
            }
            submit() {
                this.done = true;
                this.aborted = false;
                this.fire();
                this.render();
                this.out.write('\n');
                this.close();
            }
            deactivate() {
                if (this.value === false) return this.bell();
                this.value = false;
                this.render();
            }
            activate() {
                if (this.value === true) return this.bell();
                this.value = true;
                this.render();
            }
            delete() {
                this.deactivate();
            }
            left() {
                this.deactivate();
            }
            right() {
                this.activate();
            }
            down() {
                this.deactivate();
            }
            up() {
                this.activate();
            }
            next() {
                this.value = !this.value;
                this.fire();
                this.render();
            }
            _(c, key) {
                if (c === ' ') {
                    this.value = !this.value;
                } else if (c === '1') {
                    this.value = true;
                } else if (c === '0') {
                    this.value = false;
                } else return this.bell();
                this.render();
            }
            render() {
                if (this.closed) return;
                if (this.firstRender) this.out.write(cursor.hide);
                else this.out.write(clear(this.outputText, this.out.columns));
                super.render();
                this.outputText = [
                    style.symbol(this.done, this.aborted),
                    color.bold(this.msg),
                    style.delimiter(this.done),
                    this.value ? this.inactive : color.cyan().underline(this.inactive),
                    color.gray('/'),
                    this.value ? color.cyan().underline(this.active) : this.active,
                ].join(' ');
                this.out.write(erase.line + cursor.to(0) + this.outputText);
            }
        };
        module2.exports = TogglePrompt;
    },
});

// node_modules/prompts/lib/dateparts/datepart.js
var require_datepart2 = __commonJS({
    'node_modules/prompts/lib/dateparts/datepart.js'(exports2, module2) {
        'use strict';
        var DatePart = class _DatePart {
            constructor({ token, date, parts, locales }) {
                this.token = token;
                this.date = date || /* @__PURE__ */ new Date();
                this.parts = parts || [this];
                this.locales = locales || {};
            }
            up() {}
            down() {}
            next() {
                const currentIdx = this.parts.indexOf(this);
                return this.parts.find(
                    (part, idx) => idx > currentIdx && part instanceof _DatePart,
                );
            }
            setTo(val2) {}
            prev() {
                let parts = [].concat(this.parts).reverse();
                const currentIdx = parts.indexOf(this);
                return parts.find((part, idx) => idx > currentIdx && part instanceof _DatePart);
            }
            toString() {
                return String(this.date);
            }
        };
        module2.exports = DatePart;
    },
});

// node_modules/prompts/lib/dateparts/meridiem.js
var require_meridiem2 = __commonJS({
    'node_modules/prompts/lib/dateparts/meridiem.js'(exports2, module2) {
        'use strict';
        var DatePart = require_datepart2();
        var Meridiem = class extends DatePart {
            constructor(opts = {}) {
                super(opts);
            }
            up() {
                this.date.setHours((this.date.getHours() + 12) % 24);
            }
            down() {
                this.up();
            }
            toString() {
                let meridiem = this.date.getHours() > 12 ? 'pm' : 'am';
                return /\A/.test(this.token) ? meridiem.toUpperCase() : meridiem;
            }
        };
        module2.exports = Meridiem;
    },
});

// node_modules/prompts/lib/dateparts/day.js
var require_day2 = __commonJS({
    'node_modules/prompts/lib/dateparts/day.js'(exports2, module2) {
        'use strict';
        var DatePart = require_datepart2();
        var pos = (n) => {
            n = n % 10;
            return n === 1 ? 'st' : n === 2 ? 'nd' : n === 3 ? 'rd' : 'th';
        };
        var Day = class extends DatePart {
            constructor(opts = {}) {
                super(opts);
            }
            up() {
                this.date.setDate(this.date.getDate() + 1);
            }
            down() {
                this.date.setDate(this.date.getDate() - 1);
            }
            setTo(val2) {
                this.date.setDate(parseInt(val2.substr(-2)));
            }
            toString() {
                let date = this.date.getDate();
                let day = this.date.getDay();
                return this.token === 'DD'
                    ? String(date).padStart(2, '0')
                    : this.token === 'Do'
                      ? date + pos(date)
                      : this.token === 'd'
                        ? day + 1
                        : this.token === 'ddd'
                          ? this.locales.weekdaysShort[day]
                          : this.token === 'dddd'
                            ? this.locales.weekdays[day]
                            : date;
            }
        };
        module2.exports = Day;
    },
});

// node_modules/prompts/lib/dateparts/hours.js
var require_hours2 = __commonJS({
    'node_modules/prompts/lib/dateparts/hours.js'(exports2, module2) {
        'use strict';
        var DatePart = require_datepart2();
        var Hours = class extends DatePart {
            constructor(opts = {}) {
                super(opts);
            }
            up() {
                this.date.setHours(this.date.getHours() + 1);
            }
            down() {
                this.date.setHours(this.date.getHours() - 1);
            }
            setTo(val2) {
                this.date.setHours(parseInt(val2.substr(-2)));
            }
            toString() {
                let hours = this.date.getHours();
                if (/h/.test(this.token)) hours = hours % 12 || 12;
                return this.token.length > 1 ? String(hours).padStart(2, '0') : hours;
            }
        };
        module2.exports = Hours;
    },
});

// node_modules/prompts/lib/dateparts/milliseconds.js
var require_milliseconds2 = __commonJS({
    'node_modules/prompts/lib/dateparts/milliseconds.js'(exports2, module2) {
        'use strict';
        var DatePart = require_datepart2();
        var Milliseconds = class extends DatePart {
            constructor(opts = {}) {
                super(opts);
            }
            up() {
                this.date.setMilliseconds(this.date.getMilliseconds() + 1);
            }
            down() {
                this.date.setMilliseconds(this.date.getMilliseconds() - 1);
            }
            setTo(val2) {
                this.date.setMilliseconds(parseInt(val2.substr(-this.token.length)));
            }
            toString() {
                return String(this.date.getMilliseconds())
                    .padStart(4, '0')
                    .substr(0, this.token.length);
            }
        };
        module2.exports = Milliseconds;
    },
});

// node_modules/prompts/lib/dateparts/minutes.js
var require_minutes2 = __commonJS({
    'node_modules/prompts/lib/dateparts/minutes.js'(exports2, module2) {
        'use strict';
        var DatePart = require_datepart2();
        var Minutes = class extends DatePart {
            constructor(opts = {}) {
                super(opts);
            }
            up() {
                this.date.setMinutes(this.date.getMinutes() + 1);
            }
            down() {
                this.date.setMinutes(this.date.getMinutes() - 1);
            }
            setTo(val2) {
                this.date.setMinutes(parseInt(val2.substr(-2)));
            }
            toString() {
                let m2 = this.date.getMinutes();
                return this.token.length > 1 ? String(m2).padStart(2, '0') : m2;
            }
        };
        module2.exports = Minutes;
    },
});

// node_modules/prompts/lib/dateparts/month.js
var require_month2 = __commonJS({
    'node_modules/prompts/lib/dateparts/month.js'(exports2, module2) {
        'use strict';
        var DatePart = require_datepart2();
        var Month = class extends DatePart {
            constructor(opts = {}) {
                super(opts);
            }
            up() {
                this.date.setMonth(this.date.getMonth() + 1);
            }
            down() {
                this.date.setMonth(this.date.getMonth() - 1);
            }
            setTo(val2) {
                val2 = parseInt(val2.substr(-2)) - 1;
                this.date.setMonth(val2 < 0 ? 0 : val2);
            }
            toString() {
                let month = this.date.getMonth();
                let tl = this.token.length;
                return tl === 2
                    ? String(month + 1).padStart(2, '0')
                    : tl === 3
                      ? this.locales.monthsShort[month]
                      : tl === 4
                        ? this.locales.months[month]
                        : String(month + 1);
            }
        };
        module2.exports = Month;
    },
});

// node_modules/prompts/lib/dateparts/seconds.js
var require_seconds2 = __commonJS({
    'node_modules/prompts/lib/dateparts/seconds.js'(exports2, module2) {
        'use strict';
        var DatePart = require_datepart2();
        var Seconds = class extends DatePart {
            constructor(opts = {}) {
                super(opts);
            }
            up() {
                this.date.setSeconds(this.date.getSeconds() + 1);
            }
            down() {
                this.date.setSeconds(this.date.getSeconds() - 1);
            }
            setTo(val2) {
                this.date.setSeconds(parseInt(val2.substr(-2)));
            }
            toString() {
                let s2 = this.date.getSeconds();
                return this.token.length > 1 ? String(s2).padStart(2, '0') : s2;
            }
        };
        module2.exports = Seconds;
    },
});

// node_modules/prompts/lib/dateparts/year.js
var require_year2 = __commonJS({
    'node_modules/prompts/lib/dateparts/year.js'(exports2, module2) {
        'use strict';
        var DatePart = require_datepart2();
        var Year = class extends DatePart {
            constructor(opts = {}) {
                super(opts);
            }
            up() {
                this.date.setFullYear(this.date.getFullYear() + 1);
            }
            down() {
                this.date.setFullYear(this.date.getFullYear() - 1);
            }
            setTo(val2) {
                this.date.setFullYear(val2.substr(-4));
            }
            toString() {
                let year = String(this.date.getFullYear()).padStart(4, '0');
                return this.token.length === 2 ? year.substr(-2) : year;
            }
        };
        module2.exports = Year;
    },
});

// node_modules/prompts/lib/dateparts/index.js
var require_dateparts2 = __commonJS({
    'node_modules/prompts/lib/dateparts/index.js'(exports2, module2) {
        'use strict';
        module2.exports = {
            DatePart: require_datepart2(),
            Meridiem: require_meridiem2(),
            Day: require_day2(),
            Hours: require_hours2(),
            Milliseconds: require_milliseconds2(),
            Minutes: require_minutes2(),
            Month: require_month2(),
            Seconds: require_seconds2(),
            Year: require_year2(),
        };
    },
});

// node_modules/prompts/lib/elements/date.js
var require_date2 = __commonJS({
    'node_modules/prompts/lib/elements/date.js'(exports2, module2) {
        'use strict';
        var color = require_kleur();
        var Prompt = require_prompt2();
        var { style, clear, figures } = require_util2();
        var { erase, cursor } = require_src();
        var { DatePart, Meridiem, Day, Hours, Milliseconds, Minutes, Month, Seconds, Year } =
            require_dateparts2();
        var regex =
            /\\(.)|"((?:\\["\\]|[^"])+)"|(D[Do]?|d{3,4}|d)|(M{1,4})|(YY(?:YY)?)|([aA])|([Hh]{1,2})|(m{1,2})|(s{1,2})|(S{1,4})|./g;
        var regexGroups = {
            1: ({ token }) => token.replace(/\\(.)/g, '$1'),
            2: (opts) => new Day(opts),
            // Day // TODO
            3: (opts) => new Month(opts),
            // Month
            4: (opts) => new Year(opts),
            // Year
            5: (opts) => new Meridiem(opts),
            // AM/PM // TODO (special)
            6: (opts) => new Hours(opts),
            // Hours
            7: (opts) => new Minutes(opts),
            // Minutes
            8: (opts) => new Seconds(opts),
            // Seconds
            9: (opts) => new Milliseconds(opts),
            // Fractional seconds
        };
        var dfltLocales = {
            months: 'January,February,March,April,May,June,July,August,September,October,November,December'.split(
                ',',
            ),
            monthsShort: 'Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec'.split(','),
            weekdays: 'Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday'.split(','),
            weekdaysShort: 'Sun,Mon,Tue,Wed,Thu,Fri,Sat'.split(','),
        };
        var DatePrompt = class extends Prompt {
            constructor(opts = {}) {
                super(opts);
                this.msg = opts.message;
                this.cursor = 0;
                this.typed = '';
                this.locales = Object.assign(dfltLocales, opts.locales);
                this._date = opts.initial || /* @__PURE__ */ new Date();
                this.errorMsg = opts.error || 'Please Enter A Valid Value';
                this.validator = opts.validate || (() => true);
                this.mask = opts.mask || 'YYYY-MM-DD HH:mm:ss';
                this.clear = clear('', this.out.columns);
                this.render();
            }
            get value() {
                return this.date;
            }
            get date() {
                return this._date;
            }
            set date(date) {
                if (date) this._date.setTime(date.getTime());
            }
            set mask(mask) {
                let result;
                this.parts = [];
                while ((result = regex.exec(mask))) {
                    let match = result.shift();
                    let idx = result.findIndex((gr) => gr != null);
                    this.parts.push(
                        idx in regexGroups
                            ? regexGroups[idx]({
                                  token: result[idx] || match,
                                  date: this.date,
                                  parts: this.parts,
                                  locales: this.locales,
                              })
                            : result[idx] || match,
                    );
                }
                let parts = this.parts.reduce((arr, i2) => {
                    if (typeof i2 === 'string' && typeof arr[arr.length - 1] === 'string')
                        arr[arr.length - 1] += i2;
                    else arr.push(i2);
                    return arr;
                }, []);
                this.parts.splice(0);
                this.parts.push(...parts);
                this.reset();
            }
            moveCursor(n) {
                this.typed = '';
                this.cursor = n;
                this.fire();
            }
            reset() {
                this.moveCursor(this.parts.findIndex((p) => p instanceof DatePart));
                this.fire();
                this.render();
            }
            exit() {
                this.abort();
            }
            abort() {
                this.done = this.aborted = true;
                this.error = false;
                this.fire();
                this.render();
                this.out.write('\n');
                this.close();
            }
            async validate() {
                let valid = await this.validator(this.value);
                if (typeof valid === 'string') {
                    this.errorMsg = valid;
                    valid = false;
                }
                this.error = !valid;
            }
            async submit() {
                await this.validate();
                if (this.error) {
                    this.color = 'red';
                    this.fire();
                    this.render();
                    return;
                }
                this.done = true;
                this.aborted = false;
                this.fire();
                this.render();
                this.out.write('\n');
                this.close();
            }
            up() {
                this.typed = '';
                this.parts[this.cursor].up();
                this.render();
            }
            down() {
                this.typed = '';
                this.parts[this.cursor].down();
                this.render();
            }
            left() {
                let prev2 = this.parts[this.cursor].prev();
                if (prev2 == null) return this.bell();
                this.moveCursor(this.parts.indexOf(prev2));
                this.render();
            }
            right() {
                let next2 = this.parts[this.cursor].next();
                if (next2 == null) return this.bell();
                this.moveCursor(this.parts.indexOf(next2));
                this.render();
            }
            next() {
                let next2 = this.parts[this.cursor].next();
                this.moveCursor(
                    next2
                        ? this.parts.indexOf(next2)
                        : this.parts.findIndex((part) => part instanceof DatePart),
                );
                this.render();
            }
            _(c) {
                if (/\d/.test(c)) {
                    this.typed += c;
                    this.parts[this.cursor].setTo(this.typed);
                    this.render();
                }
            }
            render() {
                if (this.closed) return;
                if (this.firstRender) this.out.write(cursor.hide);
                else this.out.write(clear(this.outputText, this.out.columns));
                super.render();
                this.outputText = [
                    style.symbol(this.done, this.aborted),
                    color.bold(this.msg),
                    style.delimiter(false),
                    this.parts
                        .reduce(
                            (arr, p, idx) =>
                                arr.concat(
                                    idx === this.cursor && !this.done
                                        ? color.cyan().underline(p.toString())
                                        : p,
                                ),
                            [],
                        )
                        .join(''),
                ].join(' ');
                if (this.error) {
                    this.outputText += this.errorMsg.split('\n').reduce(
                        (a, l, i2) =>
                            a +
                            `
${i2 ? ` ` : figures.pointerSmall} ${color.red().italic(l)}`,
                        ``,
                    );
                }
                this.out.write(erase.line + cursor.to(0) + this.outputText);
            }
        };
        module2.exports = DatePrompt;
    },
});

// node_modules/prompts/lib/elements/number.js
var require_number2 = __commonJS({
    'node_modules/prompts/lib/elements/number.js'(exports2, module2) {
        var color = require_kleur();
        var Prompt = require_prompt2();
        var { cursor, erase } = require_src();
        var { style, figures, clear, lines } = require_util2();
        var isNumber3 = /[0-9]/;
        var isDef = (any) => any !== void 0;
        var round = (number, precision) => {
            let factor = Math.pow(10, precision);
            return Math.round(number * factor) / factor;
        };
        var NumberPrompt = class extends Prompt {
            constructor(opts = {}) {
                super(opts);
                this.transform = style.render(opts.style);
                this.msg = opts.message;
                this.initial = isDef(opts.initial) ? opts.initial : '';
                this.float = !!opts.float;
                this.round = opts.round || 2;
                this.inc = opts.increment || 1;
                this.min = isDef(opts.min) ? opts.min : -Infinity;
                this.max = isDef(opts.max) ? opts.max : Infinity;
                this.errorMsg = opts.error || `Please Enter A Valid Value`;
                this.validator = opts.validate || (() => true);
                this.color = `cyan`;
                this.value = ``;
                this.typed = ``;
                this.lastHit = 0;
                this.render();
            }
            set value(v) {
                if (!v && v !== 0) {
                    this.placeholder = true;
                    this.rendered = color.gray(this.transform.render(`${this.initial}`));
                    this._value = ``;
                } else {
                    this.placeholder = false;
                    this.rendered = this.transform.render(`${round(v, this.round)}`);
                    this._value = round(v, this.round);
                }
                this.fire();
            }
            get value() {
                return this._value;
            }
            parse(x2) {
                return this.float ? parseFloat(x2) : parseInt(x2);
            }
            valid(c) {
                return c === `-` || (c === `.` && this.float) || isNumber3.test(c);
            }
            reset() {
                this.typed = ``;
                this.value = ``;
                this.fire();
                this.render();
            }
            exit() {
                this.abort();
            }
            abort() {
                let x2 = this.value;
                this.value = x2 !== `` ? x2 : this.initial;
                this.done = this.aborted = true;
                this.error = false;
                this.fire();
                this.render();
                this.out.write(`
`);
                this.close();
            }
            async validate() {
                let valid = await this.validator(this.value);
                if (typeof valid === `string`) {
                    this.errorMsg = valid;
                    valid = false;
                }
                this.error = !valid;
            }
            async submit() {
                await this.validate();
                if (this.error) {
                    this.color = `red`;
                    this.fire();
                    this.render();
                    return;
                }
                let x2 = this.value;
                this.value = x2 !== `` ? x2 : this.initial;
                this.done = true;
                this.aborted = false;
                this.error = false;
                this.fire();
                this.render();
                this.out.write(`
`);
                this.close();
            }
            up() {
                this.typed = ``;
                if (this.value === '') {
                    this.value = this.min - this.inc;
                }
                if (this.value >= this.max) return this.bell();
                this.value += this.inc;
                this.color = `cyan`;
                this.fire();
                this.render();
            }
            down() {
                this.typed = ``;
                if (this.value === '') {
                    this.value = this.min + this.inc;
                }
                if (this.value <= this.min) return this.bell();
                this.value -= this.inc;
                this.color = `cyan`;
                this.fire();
                this.render();
            }
            delete() {
                let val2 = this.value.toString();
                if (val2.length === 0) return this.bell();
                this.value = this.parse((val2 = val2.slice(0, -1))) || ``;
                if (this.value !== '' && this.value < this.min) {
                    this.value = this.min;
                }
                this.color = `cyan`;
                this.fire();
                this.render();
            }
            next() {
                this.value = this.initial;
                this.fire();
                this.render();
            }
            _(c, key) {
                if (!this.valid(c)) return this.bell();
                const now = Date.now();
                if (now - this.lastHit > 1e3) this.typed = ``;
                this.typed += c;
                this.lastHit = now;
                this.color = `cyan`;
                if (c === `.`) return this.fire();
                this.value = Math.min(this.parse(this.typed), this.max);
                if (this.value > this.max) this.value = this.max;
                if (this.value < this.min) this.value = this.min;
                this.fire();
                this.render();
            }
            render() {
                if (this.closed) return;
                if (!this.firstRender) {
                    if (this.outputError)
                        this.out.write(
                            cursor.down(lines(this.outputError, this.out.columns) - 1) +
                                clear(this.outputError, this.out.columns),
                        );
                    this.out.write(clear(this.outputText, this.out.columns));
                }
                super.render();
                this.outputError = '';
                this.outputText = [
                    style.symbol(this.done, this.aborted),
                    color.bold(this.msg),
                    style.delimiter(this.done),
                    !this.done || (!this.done && !this.placeholder)
                        ? color[this.color]().underline(this.rendered)
                        : this.rendered,
                ].join(` `);
                if (this.error) {
                    this.outputError += this.errorMsg
                        .split(
                            `
`,
                        )
                        .reduce(
                            (a, l, i2) =>
                                a +
                                `
${i2 ? ` ` : figures.pointerSmall} ${color.red().italic(l)}`,
                            ``,
                        );
                }
                this.out.write(
                    erase.line +
                        cursor.to(0) +
                        this.outputText +
                        cursor.save +
                        this.outputError +
                        cursor.restore,
                );
            }
        };
        module2.exports = NumberPrompt;
    },
});

// node_modules/prompts/lib/elements/multiselect.js
var require_multiselect2 = __commonJS({
    'node_modules/prompts/lib/elements/multiselect.js'(exports2, module2) {
        'use strict';
        var color = require_kleur();
        var { cursor } = require_src();
        var Prompt = require_prompt2();
        var { clear, figures, style, wrap: wrap2, entriesToDisplay } = require_util2();
        var MultiselectPrompt = class extends Prompt {
            constructor(opts = {}) {
                super(opts);
                this.msg = opts.message;
                this.cursor = opts.cursor || 0;
                this.scrollIndex = opts.cursor || 0;
                this.hint = opts.hint || '';
                this.warn = opts.warn || '- This option is disabled -';
                this.minSelected = opts.min;
                this.showMinError = false;
                this.maxChoices = opts.max;
                this.instructions = opts.instructions;
                this.optionsPerPage = opts.optionsPerPage || 10;
                this.value = opts.choices.map((ch, idx) => {
                    if (typeof ch === 'string') ch = { title: ch, value: idx };
                    return {
                        title: ch && (ch.title || ch.value || ch),
                        description: ch && ch.description,
                        value: ch && (ch.value === void 0 ? idx : ch.value),
                        selected: ch && ch.selected,
                        disabled: ch && ch.disabled,
                    };
                });
                this.clear = clear('', this.out.columns);
                if (!opts.overrideRender) {
                    this.render();
                }
            }
            reset() {
                this.value.map((v) => !v.selected);
                this.cursor = 0;
                this.fire();
                this.render();
            }
            selected() {
                return this.value.filter((v) => v.selected);
            }
            exit() {
                this.abort();
            }
            abort() {
                this.done = this.aborted = true;
                this.fire();
                this.render();
                this.out.write('\n');
                this.close();
            }
            submit() {
                const selected = this.value.filter((e2) => e2.selected);
                if (this.minSelected && selected.length < this.minSelected) {
                    this.showMinError = true;
                    this.render();
                } else {
                    this.done = true;
                    this.aborted = false;
                    this.fire();
                    this.render();
                    this.out.write('\n');
                    this.close();
                }
            }
            first() {
                this.cursor = 0;
                this.render();
            }
            last() {
                this.cursor = this.value.length - 1;
                this.render();
            }
            next() {
                this.cursor = (this.cursor + 1) % this.value.length;
                this.render();
            }
            up() {
                if (this.cursor === 0) {
                    this.cursor = this.value.length - 1;
                } else {
                    this.cursor--;
                }
                this.render();
            }
            down() {
                if (this.cursor === this.value.length - 1) {
                    this.cursor = 0;
                } else {
                    this.cursor++;
                }
                this.render();
            }
            left() {
                this.value[this.cursor].selected = false;
                this.render();
            }
            right() {
                if (this.value.filter((e2) => e2.selected).length >= this.maxChoices)
                    return this.bell();
                this.value[this.cursor].selected = true;
                this.render();
            }
            handleSpaceToggle() {
                const v = this.value[this.cursor];
                if (v.selected) {
                    v.selected = false;
                    this.render();
                } else if (
                    v.disabled ||
                    this.value.filter((e2) => e2.selected).length >= this.maxChoices
                ) {
                    return this.bell();
                } else {
                    v.selected = true;
                    this.render();
                }
            }
            toggleAll() {
                if (this.maxChoices !== void 0 || this.value[this.cursor].disabled) {
                    return this.bell();
                }
                const newSelected = !this.value[this.cursor].selected;
                this.value.filter((v) => !v.disabled).forEach((v) => (v.selected = newSelected));
                this.render();
            }
            _(c, key) {
                if (c === ' ') {
                    this.handleSpaceToggle();
                } else if (c === 'a') {
                    this.toggleAll();
                } else {
                    return this.bell();
                }
            }
            renderInstructions() {
                if (this.instructions === void 0 || this.instructions) {
                    if (typeof this.instructions === 'string') {
                        return this.instructions;
                    }
                    return (
                        `
Instructions:
    ${figures.arrowUp}/${figures.arrowDown}: Highlight option
    ${figures.arrowLeft}/${figures.arrowRight}/[space]: Toggle selection
` +
                        (this.maxChoices === void 0
                            ? `    a: Toggle all
`
                            : '') +
                        `    enter/return: Complete answer`
                    );
                }
                return '';
            }
            renderOption(cursor2, v, i2, arrowIndicator) {
                const prefix =
                    (v.selected ? color.green(figures.radioOn) : figures.radioOff) +
                    ' ' +
                    arrowIndicator +
                    ' ';
                let title, desc;
                if (v.disabled) {
                    title =
                        cursor2 === i2
                            ? color.gray().underline(v.title)
                            : color.strikethrough().gray(v.title);
                } else {
                    title = cursor2 === i2 ? color.cyan().underline(v.title) : v.title;
                    if (cursor2 === i2 && v.description) {
                        desc = ` - ${v.description}`;
                        if (
                            prefix.length + title.length + desc.length >= this.out.columns ||
                            v.description.split(/\r?\n/).length > 1
                        ) {
                            desc =
                                '\n' +
                                wrap2(v.description, {
                                    margin: prefix.length,
                                    width: this.out.columns,
                                });
                        }
                    }
                }
                return prefix + title + color.gray(desc || '');
            }
            // shared with autocompleteMultiselect
            paginateOptions(options2) {
                if (options2.length === 0) {
                    return color.red('No matches for this query.');
                }
                let { startIndex, endIndex } = entriesToDisplay(
                    this.cursor,
                    options2.length,
                    this.optionsPerPage,
                );
                let prefix,
                    styledOptions = [];
                for (let i2 = startIndex; i2 < endIndex; i2++) {
                    if (i2 === startIndex && startIndex > 0) {
                        prefix = figures.arrowUp;
                    } else if (i2 === endIndex - 1 && endIndex < options2.length) {
                        prefix = figures.arrowDown;
                    } else {
                        prefix = ' ';
                    }
                    styledOptions.push(this.renderOption(this.cursor, options2[i2], i2, prefix));
                }
                return '\n' + styledOptions.join('\n');
            }
            // shared with autocomleteMultiselect
            renderOptions(options2) {
                if (!this.done) {
                    return this.paginateOptions(options2);
                }
                return '';
            }
            renderDoneOrInstructions() {
                if (this.done) {
                    return this.value
                        .filter((e2) => e2.selected)
                        .map((v) => v.title)
                        .join(', ');
                }
                const output = [color.gray(this.hint), this.renderInstructions()];
                if (this.value[this.cursor].disabled) {
                    output.push(color.yellow(this.warn));
                }
                return output.join(' ');
            }
            render() {
                if (this.closed) return;
                if (this.firstRender) this.out.write(cursor.hide);
                super.render();
                let prompt = [
                    style.symbol(this.done, this.aborted),
                    color.bold(this.msg),
                    style.delimiter(false),
                    this.renderDoneOrInstructions(),
                ].join(' ');
                if (this.showMinError) {
                    prompt += color.red(
                        `You must select a minimum of ${this.minSelected} choices.`,
                    );
                    this.showMinError = false;
                }
                prompt += this.renderOptions(this.value);
                this.out.write(this.clear + prompt);
                this.clear = clear(prompt, this.out.columns);
            }
        };
        module2.exports = MultiselectPrompt;
    },
});

// node_modules/prompts/lib/elements/autocomplete.js
var require_autocomplete2 = __commonJS({
    'node_modules/prompts/lib/elements/autocomplete.js'(exports2, module2) {
        'use strict';
        var color = require_kleur();
        var Prompt = require_prompt2();
        var { erase, cursor } = require_src();
        var { style, clear, figures, wrap: wrap2, entriesToDisplay } = require_util2();
        var getVal = (arr, i2) => arr[i2] && (arr[i2].value || arr[i2].title || arr[i2]);
        var getTitle = (arr, i2) => arr[i2] && (arr[i2].title || arr[i2].value || arr[i2]);
        var getIndex = (arr, valOrTitle) => {
            const index2 = arr.findIndex(
                (el) => el.value === valOrTitle || el.title === valOrTitle,
            );
            return index2 > -1 ? index2 : void 0;
        };
        var AutocompletePrompt = class extends Prompt {
            constructor(opts = {}) {
                super(opts);
                this.msg = opts.message;
                this.suggest = opts.suggest;
                this.choices = opts.choices;
                this.initial =
                    typeof opts.initial === 'number'
                        ? opts.initial
                        : getIndex(opts.choices, opts.initial);
                this.select = this.initial || opts.cursor || 0;
                this.i18n = { noMatches: opts.noMatches || 'no matches found' };
                this.fallback = opts.fallback || this.initial;
                this.clearFirst = opts.clearFirst || false;
                this.suggestions = [];
                this.input = '';
                this.limit = opts.limit || 10;
                this.cursor = 0;
                this.transform = style.render(opts.style);
                this.scale = this.transform.scale;
                this.render = this.render.bind(this);
                this.complete = this.complete.bind(this);
                this.clear = clear('', this.out.columns);
                this.complete(this.render);
                this.render();
            }
            set fallback(fb) {
                this._fb = Number.isSafeInteger(parseInt(fb)) ? parseInt(fb) : fb;
            }
            get fallback() {
                let choice;
                if (typeof this._fb === 'number') choice = this.choices[this._fb];
                else if (typeof this._fb === 'string') choice = { title: this._fb };
                return choice || this._fb || { title: this.i18n.noMatches };
            }
            moveSelect(i2) {
                this.select = i2;
                if (this.suggestions.length > 0) this.value = getVal(this.suggestions, i2);
                else this.value = this.fallback.value;
                this.fire();
            }
            async complete(cb) {
                const p = (this.completing = this.suggest(this.input, this.choices));
                const suggestions = await p;
                if (this.completing !== p) return;
                this.suggestions = suggestions.map((s2, i2, arr) => ({
                    title: getTitle(arr, i2),
                    value: getVal(arr, i2),
                    description: s2.description,
                }));
                this.completing = false;
                const l = Math.max(suggestions.length - 1, 0);
                this.moveSelect(Math.min(l, this.select));
                cb && cb();
            }
            reset() {
                this.input = '';
                this.complete(() => {
                    this.moveSelect(this.initial !== void 0 ? this.initial : 0);
                    this.render();
                });
                this.render();
            }
            exit() {
                if (this.clearFirst && this.input.length > 0) {
                    this.reset();
                } else {
                    this.done = this.exited = true;
                    this.aborted = false;
                    this.fire();
                    this.render();
                    this.out.write('\n');
                    this.close();
                }
            }
            abort() {
                this.done = this.aborted = true;
                this.exited = false;
                this.fire();
                this.render();
                this.out.write('\n');
                this.close();
            }
            submit() {
                this.done = true;
                this.aborted = this.exited = false;
                this.fire();
                this.render();
                this.out.write('\n');
                this.close();
            }
            _(c, key) {
                let s1 = this.input.slice(0, this.cursor);
                let s2 = this.input.slice(this.cursor);
                this.input = `${s1}${c}${s2}`;
                this.cursor = s1.length + 1;
                this.complete(this.render);
                this.render();
            }
            delete() {
                if (this.cursor === 0) return this.bell();
                let s1 = this.input.slice(0, this.cursor - 1);
                let s2 = this.input.slice(this.cursor);
                this.input = `${s1}${s2}`;
                this.complete(this.render);
                this.cursor = this.cursor - 1;
                this.render();
            }
            deleteForward() {
                if (this.cursor * this.scale >= this.rendered.length) return this.bell();
                let s1 = this.input.slice(0, this.cursor);
                let s2 = this.input.slice(this.cursor + 1);
                this.input = `${s1}${s2}`;
                this.complete(this.render);
                this.render();
            }
            first() {
                this.moveSelect(0);
                this.render();
            }
            last() {
                this.moveSelect(this.suggestions.length - 1);
                this.render();
            }
            up() {
                if (this.select === 0) {
                    this.moveSelect(this.suggestions.length - 1);
                } else {
                    this.moveSelect(this.select - 1);
                }
                this.render();
            }
            down() {
                if (this.select === this.suggestions.length - 1) {
                    this.moveSelect(0);
                } else {
                    this.moveSelect(this.select + 1);
                }
                this.render();
            }
            next() {
                if (this.select === this.suggestions.length - 1) {
                    this.moveSelect(0);
                } else this.moveSelect(this.select + 1);
                this.render();
            }
            nextPage() {
                this.moveSelect(Math.min(this.select + this.limit, this.suggestions.length - 1));
                this.render();
            }
            prevPage() {
                this.moveSelect(Math.max(this.select - this.limit, 0));
                this.render();
            }
            left() {
                if (this.cursor <= 0) return this.bell();
                this.cursor = this.cursor - 1;
                this.render();
            }
            right() {
                if (this.cursor * this.scale >= this.rendered.length) return this.bell();
                this.cursor = this.cursor + 1;
                this.render();
            }
            renderOption(v, hovered, isStart, isEnd) {
                let desc;
                let prefix = isStart ? figures.arrowUp : isEnd ? figures.arrowDown : ' ';
                let title = hovered ? color.cyan().underline(v.title) : v.title;
                prefix = (hovered ? color.cyan(figures.pointer) + ' ' : '  ') + prefix;
                if (v.description) {
                    desc = ` - ${v.description}`;
                    if (
                        prefix.length + title.length + desc.length >= this.out.columns ||
                        v.description.split(/\r?\n/).length > 1
                    ) {
                        desc = '\n' + wrap2(v.description, { margin: 3, width: this.out.columns });
                    }
                }
                return prefix + ' ' + title + color.gray(desc || '');
            }
            render() {
                if (this.closed) return;
                if (this.firstRender) this.out.write(cursor.hide);
                else this.out.write(clear(this.outputText, this.out.columns));
                super.render();
                let { startIndex, endIndex } = entriesToDisplay(
                    this.select,
                    this.choices.length,
                    this.limit,
                );
                this.outputText = [
                    style.symbol(this.done, this.aborted, this.exited),
                    color.bold(this.msg),
                    style.delimiter(this.completing),
                    this.done && this.suggestions[this.select]
                        ? this.suggestions[this.select].title
                        : (this.rendered = this.transform.render(this.input)),
                ].join(' ');
                if (!this.done) {
                    const suggestions = this.suggestions
                        .slice(startIndex, endIndex)
                        .map((item, i2) =>
                            this.renderOption(
                                item,
                                this.select === i2 + startIndex,
                                i2 === 0 && startIndex > 0,
                                i2 + startIndex === endIndex - 1 && endIndex < this.choices.length,
                            ),
                        )
                        .join('\n');
                    this.outputText +=
                        `
` + (suggestions || color.gray(this.fallback.title));
                }
                this.out.write(erase.line + cursor.to(0) + this.outputText);
            }
        };
        module2.exports = AutocompletePrompt;
    },
});

// node_modules/prompts/lib/elements/autocompleteMultiselect.js
var require_autocompleteMultiselect2 = __commonJS({
    'node_modules/prompts/lib/elements/autocompleteMultiselect.js'(exports2, module2) {
        'use strict';
        var color = require_kleur();
        var { cursor } = require_src();
        var MultiselectPrompt = require_multiselect2();
        var { clear, style, figures } = require_util2();
        var AutocompleteMultiselectPrompt = class extends MultiselectPrompt {
            constructor(opts = {}) {
                opts.overrideRender = true;
                super(opts);
                this.inputValue = '';
                this.clear = clear('', this.out.columns);
                this.filteredOptions = this.value;
                this.render();
            }
            last() {
                this.cursor = this.filteredOptions.length - 1;
                this.render();
            }
            next() {
                this.cursor = (this.cursor + 1) % this.filteredOptions.length;
                this.render();
            }
            up() {
                if (this.cursor === 0) {
                    this.cursor = this.filteredOptions.length - 1;
                } else {
                    this.cursor--;
                }
                this.render();
            }
            down() {
                if (this.cursor === this.filteredOptions.length - 1) {
                    this.cursor = 0;
                } else {
                    this.cursor++;
                }
                this.render();
            }
            left() {
                this.filteredOptions[this.cursor].selected = false;
                this.render();
            }
            right() {
                if (this.value.filter((e2) => e2.selected).length >= this.maxChoices)
                    return this.bell();
                this.filteredOptions[this.cursor].selected = true;
                this.render();
            }
            delete() {
                if (this.inputValue.length) {
                    this.inputValue = this.inputValue.substr(0, this.inputValue.length - 1);
                    this.updateFilteredOptions();
                }
            }
            updateFilteredOptions() {
                const currentHighlight = this.filteredOptions[this.cursor];
                this.filteredOptions = this.value.filter((v) => {
                    if (this.inputValue) {
                        if (typeof v.title === 'string') {
                            if (v.title.toLowerCase().includes(this.inputValue.toLowerCase())) {
                                return true;
                            }
                        }
                        if (typeof v.value === 'string') {
                            if (v.value.toLowerCase().includes(this.inputValue.toLowerCase())) {
                                return true;
                            }
                        }
                        return false;
                    }
                    return true;
                });
                const newHighlightIndex = this.filteredOptions.findIndex(
                    (v) => v === currentHighlight,
                );
                this.cursor = newHighlightIndex < 0 ? 0 : newHighlightIndex;
                this.render();
            }
            handleSpaceToggle() {
                const v = this.filteredOptions[this.cursor];
                if (v.selected) {
                    v.selected = false;
                    this.render();
                } else if (
                    v.disabled ||
                    this.value.filter((e2) => e2.selected).length >= this.maxChoices
                ) {
                    return this.bell();
                } else {
                    v.selected = true;
                    this.render();
                }
            }
            handleInputChange(c) {
                this.inputValue = this.inputValue + c;
                this.updateFilteredOptions();
            }
            _(c, key) {
                if (c === ' ') {
                    this.handleSpaceToggle();
                } else {
                    this.handleInputChange(c);
                }
            }
            renderInstructions() {
                if (this.instructions === void 0 || this.instructions) {
                    if (typeof this.instructions === 'string') {
                        return this.instructions;
                    }
                    return `
Instructions:
    ${figures.arrowUp}/${figures.arrowDown}: Highlight option
    ${figures.arrowLeft}/${figures.arrowRight}/[space]: Toggle selection
    [a,b,c]/delete: Filter choices
    enter/return: Complete answer
`;
                }
                return '';
            }
            renderCurrentInput() {
                return `
Filtered results for: ${this.inputValue ? this.inputValue : color.gray('Enter something to filter')}
`;
            }
            renderOption(cursor2, v, i2) {
                let title;
                if (v.disabled)
                    title =
                        cursor2 === i2
                            ? color.gray().underline(v.title)
                            : color.strikethrough().gray(v.title);
                else title = cursor2 === i2 ? color.cyan().underline(v.title) : v.title;
                return (
                    (v.selected ? color.green(figures.radioOn) : figures.radioOff) + '  ' + title
                );
            }
            renderDoneOrInstructions() {
                if (this.done) {
                    return this.value
                        .filter((e2) => e2.selected)
                        .map((v) => v.title)
                        .join(', ');
                }
                const output = [
                    color.gray(this.hint),
                    this.renderInstructions(),
                    this.renderCurrentInput(),
                ];
                if (this.filteredOptions.length && this.filteredOptions[this.cursor].disabled) {
                    output.push(color.yellow(this.warn));
                }
                return output.join(' ');
            }
            render() {
                if (this.closed) return;
                if (this.firstRender) this.out.write(cursor.hide);
                super.render();
                let prompt = [
                    style.symbol(this.done, this.aborted),
                    color.bold(this.msg),
                    style.delimiter(false),
                    this.renderDoneOrInstructions(),
                ].join(' ');
                if (this.showMinError) {
                    prompt += color.red(
                        `You must select a minimum of ${this.minSelected} choices.`,
                    );
                    this.showMinError = false;
                }
                prompt += this.renderOptions(this.filteredOptions);
                this.out.write(this.clear + prompt);
                this.clear = clear(prompt, this.out.columns);
            }
        };
        module2.exports = AutocompleteMultiselectPrompt;
    },
});

// node_modules/prompts/lib/elements/confirm.js
var require_confirm2 = __commonJS({
    'node_modules/prompts/lib/elements/confirm.js'(exports2, module2) {
        var color = require_kleur();
        var Prompt = require_prompt2();
        var { style, clear } = require_util2();
        var { erase, cursor } = require_src();
        var ConfirmPrompt = class extends Prompt {
            constructor(opts = {}) {
                super(opts);
                this.msg = opts.message;
                this.value = opts.initial;
                this.initialValue = !!opts.initial;
                this.yesMsg = opts.yes || 'yes';
                this.yesOption = opts.yesOption || '(Y/n)';
                this.noMsg = opts.no || 'no';
                this.noOption = opts.noOption || '(y/N)';
                this.render();
            }
            reset() {
                this.value = this.initialValue;
                this.fire();
                this.render();
            }
            exit() {
                this.abort();
            }
            abort() {
                this.done = this.aborted = true;
                this.fire();
                this.render();
                this.out.write('\n');
                this.close();
            }
            submit() {
                this.value = this.value || false;
                this.done = true;
                this.aborted = false;
                this.fire();
                this.render();
                this.out.write('\n');
                this.close();
            }
            _(c, key) {
                if (c.toLowerCase() === 'y') {
                    this.value = true;
                    return this.submit();
                }
                if (c.toLowerCase() === 'n') {
                    this.value = false;
                    return this.submit();
                }
                return this.bell();
            }
            render() {
                if (this.closed) return;
                if (this.firstRender) this.out.write(cursor.hide);
                else this.out.write(clear(this.outputText, this.out.columns));
                super.render();
                this.outputText = [
                    style.symbol(this.done, this.aborted),
                    color.bold(this.msg),
                    style.delimiter(this.done),
                    this.done
                        ? this.value
                            ? this.yesMsg
                            : this.noMsg
                        : color.gray(this.initialValue ? this.yesOption : this.noOption),
                ].join(' ');
                this.out.write(erase.line + cursor.to(0) + this.outputText);
            }
        };
        module2.exports = ConfirmPrompt;
    },
});

// node_modules/prompts/lib/elements/index.js
var require_elements2 = __commonJS({
    'node_modules/prompts/lib/elements/index.js'(exports2, module2) {
        'use strict';
        module2.exports = {
            TextPrompt: require_text2(),
            SelectPrompt: require_select2(),
            TogglePrompt: require_toggle2(),
            DatePrompt: require_date2(),
            NumberPrompt: require_number2(),
            MultiselectPrompt: require_multiselect2(),
            AutocompletePrompt: require_autocomplete2(),
            AutocompleteMultiselectPrompt: require_autocompleteMultiselect2(),
            ConfirmPrompt: require_confirm2(),
        };
    },
});

// node_modules/prompts/lib/prompts.js
var require_prompts2 = __commonJS({
    'node_modules/prompts/lib/prompts.js'(exports2) {
        'use strict';
        var $4 = exports2;
        var el = require_elements2();
        var noop3 = (v) => v;
        function toPrompt(type, args, opts = {}) {
            return new Promise((res, rej) => {
                const p = new el[type](args);
                const onAbort = opts.onAbort || noop3;
                const onSubmit = opts.onSubmit || noop3;
                const onExit2 = opts.onExit || noop3;
                p.on('state', args.onState || noop3);
                p.on('submit', (x2) => res(onSubmit(x2)));
                p.on('exit', (x2) => res(onExit2(x2)));
                p.on('abort', (x2) => rej(onAbort(x2)));
            });
        }
        $4.text = (args) => toPrompt('TextPrompt', args);
        $4.password = (args) => {
            args.style = 'password';
            return $4.text(args);
        };
        $4.invisible = (args) => {
            args.style = 'invisible';
            return $4.text(args);
        };
        $4.number = (args) => toPrompt('NumberPrompt', args);
        $4.date = (args) => toPrompt('DatePrompt', args);
        $4.confirm = (args) => toPrompt('ConfirmPrompt', args);
        $4.list = (args) => {
            const sep = args.separator || ',';
            return toPrompt('TextPrompt', args, {
                onSubmit: (str) => str.split(sep).map((s2) => s2.trim()),
            });
        };
        $4.toggle = (args) => toPrompt('TogglePrompt', args);
        $4.select = (args) => toPrompt('SelectPrompt', args);
        $4.multiselect = (args) => {
            args.choices = [].concat(args.choices || []);
            const toSelected = (items) =>
                items.filter((item) => item.selected).map((item) => item.value);
            return toPrompt('MultiselectPrompt', args, {
                onAbort: toSelected,
                onSubmit: toSelected,
            });
        };
        $4.autocompleteMultiselect = (args) => {
            args.choices = [].concat(args.choices || []);
            const toSelected = (items) =>
                items.filter((item) => item.selected).map((item) => item.value);
            return toPrompt('AutocompleteMultiselectPrompt', args, {
                onAbort: toSelected,
                onSubmit: toSelected,
            });
        };
        var byTitle = (input, choices) =>
            Promise.resolve(
                choices.filter(
                    (item) =>
                        item.title.slice(0, input.length).toLowerCase() === input.toLowerCase(),
                ),
            );
        $4.autocomplete = (args) => {
            args.suggest = args.suggest || byTitle;
            args.choices = [].concat(args.choices || []);
            return toPrompt('AutocompletePrompt', args);
        };
    },
});

// node_modules/prompts/lib/index.js
var require_lib = __commonJS({
    'node_modules/prompts/lib/index.js'(exports2, module2) {
        'use strict';
        var prompts2 = require_prompts2();
        var passOn = ['suggest', 'format', 'onState', 'validate', 'onRender', 'type'];
        var noop3 = () => {};
        async function prompt(questions = [], { onSubmit = noop3, onCancel = noop3 } = {}) {
            const answers = {};
            const override2 = prompt._override || {};
            questions = [].concat(questions);
            let answer, question, quit, name, type, lastPrompt;
            const getFormattedAnswer = async (question2, answer2, skipValidation = false) => {
                if (!skipValidation && question2.validate && question2.validate(answer2) !== true) {
                    return;
                }
                return question2.format ? await question2.format(answer2, answers) : answer2;
            };
            for (question of questions) {
                ({ name, type } = question);
                if (typeof type === 'function') {
                    type = await type(answer, { ...answers }, question);
                    question['type'] = type;
                }
                if (!type) continue;
                for (let key in question) {
                    if (passOn.includes(key)) continue;
                    let value = question[key];
                    question[key] =
                        typeof value === 'function'
                            ? await value(answer, { ...answers }, lastPrompt)
                            : value;
                }
                lastPrompt = question;
                if (typeof question.message !== 'string') {
                    throw new Error('prompt message is required');
                }
                ({ name, type } = question);
                if (prompts2[type] === void 0) {
                    throw new Error(`prompt type (${type}) is not defined`);
                }
                if (override2[question.name] !== void 0) {
                    answer = await getFormattedAnswer(question, override2[question.name]);
                    if (answer !== void 0) {
                        answers[name] = answer;
                        continue;
                    }
                }
                try {
                    answer = prompt._injected
                        ? getInjectedAnswer(prompt._injected, question.initial)
                        : await prompts2[type](question);
                    answers[name] = answer = await getFormattedAnswer(question, answer, true);
                    quit = await onSubmit(question, answer, answers);
                } catch (err) {
                    quit = !(await onCancel(question, answers));
                }
                if (quit) return answers;
            }
            return answers;
        }
        function getInjectedAnswer(injected, deafultValue) {
            const answer = injected.shift();
            if (answer instanceof Error) {
                throw answer;
            }
            return answer === void 0 ? deafultValue : answer;
        }
        function inject(answers) {
            prompt._injected = (prompt._injected || []).concat(answers);
        }
        function override(answers) {
            prompt._override = Object.assign({}, answers);
        }
        module2.exports = Object.assign(prompt, { prompt, prompts: prompts2, inject, override });
    },
});

// node_modules/prompts/index.js
var require_prompts3 = __commonJS({
    'node_modules/prompts/index.js'(exports2, module2) {
        function isNodeLT(tar) {
            tar = (Array.isArray(tar) ? tar : tar.split('.')).map(Number);
            let i2 = 0,
                src = process.versions.node.split('.').map(Number);
            for (; i2 < tar.length; i2++) {
                if (src[i2] > tar[i2]) return false;
                if (tar[i2] > src[i2]) return true;
            }
            return false;
        }
        module2.exports = isNodeLT('8.6.0') ? require_dist() : require_lib();
    },
});

// node_modules/color-name/index.js
var require_color_name = __commonJS({
    'node_modules/color-name/index.js'(exports2, module2) {
        'use strict';
        module2.exports = {
            aliceblue: [240, 248, 255],
            antiquewhite: [250, 235, 215],
            aqua: [0, 255, 255],
            aquamarine: [127, 255, 212],
            azure: [240, 255, 255],
            beige: [245, 245, 220],
            bisque: [255, 228, 196],
            black: [0, 0, 0],
            blanchedalmond: [255, 235, 205],
            blue: [0, 0, 255],
            blueviolet: [138, 43, 226],
            brown: [165, 42, 42],
            burlywood: [222, 184, 135],
            cadetblue: [95, 158, 160],
            chartreuse: [127, 255, 0],
            chocolate: [210, 105, 30],
            coral: [255, 127, 80],
            cornflowerblue: [100, 149, 237],
            cornsilk: [255, 248, 220],
            crimson: [220, 20, 60],
            cyan: [0, 255, 255],
            darkblue: [0, 0, 139],
            darkcyan: [0, 139, 139],
            darkgoldenrod: [184, 134, 11],
            darkgray: [169, 169, 169],
            darkgreen: [0, 100, 0],
            darkgrey: [169, 169, 169],
            darkkhaki: [189, 183, 107],
            darkmagenta: [139, 0, 139],
            darkolivegreen: [85, 107, 47],
            darkorange: [255, 140, 0],
            darkorchid: [153, 50, 204],
            darkred: [139, 0, 0],
            darksalmon: [233, 150, 122],
            darkseagreen: [143, 188, 143],
            darkslateblue: [72, 61, 139],
            darkslategray: [47, 79, 79],
            darkslategrey: [47, 79, 79],
            darkturquoise: [0, 206, 209],
            darkviolet: [148, 0, 211],
            deeppink: [255, 20, 147],
            deepskyblue: [0, 191, 255],
            dimgray: [105, 105, 105],
            dimgrey: [105, 105, 105],
            dodgerblue: [30, 144, 255],
            firebrick: [178, 34, 34],
            floralwhite: [255, 250, 240],
            forestgreen: [34, 139, 34],
            fuchsia: [255, 0, 255],
            gainsboro: [220, 220, 220],
            ghostwhite: [248, 248, 255],
            gold: [255, 215, 0],
            goldenrod: [218, 165, 32],
            gray: [128, 128, 128],
            green: [0, 128, 0],
            greenyellow: [173, 255, 47],
            grey: [128, 128, 128],
            honeydew: [240, 255, 240],
            hotpink: [255, 105, 180],
            indianred: [205, 92, 92],
            indigo: [75, 0, 130],
            ivory: [255, 255, 240],
            khaki: [240, 230, 140],
            lavender: [230, 230, 250],
            lavenderblush: [255, 240, 245],
            lawngreen: [124, 252, 0],
            lemonchiffon: [255, 250, 205],
            lightblue: [173, 216, 230],
            lightcoral: [240, 128, 128],
            lightcyan: [224, 255, 255],
            lightgoldenrodyellow: [250, 250, 210],
            lightgray: [211, 211, 211],
            lightgreen: [144, 238, 144],
            lightgrey: [211, 211, 211],
            lightpink: [255, 182, 193],
            lightsalmon: [255, 160, 122],
            lightseagreen: [32, 178, 170],
            lightskyblue: [135, 206, 250],
            lightslategray: [119, 136, 153],
            lightslategrey: [119, 136, 153],
            lightsteelblue: [176, 196, 222],
            lightyellow: [255, 255, 224],
            lime: [0, 255, 0],
            limegreen: [50, 205, 50],
            linen: [250, 240, 230],
            magenta: [255, 0, 255],
            maroon: [128, 0, 0],
            mediumaquamarine: [102, 205, 170],
            mediumblue: [0, 0, 205],
            mediumorchid: [186, 85, 211],
            mediumpurple: [147, 112, 219],
            mediumseagreen: [60, 179, 113],
            mediumslateblue: [123, 104, 238],
            mediumspringgreen: [0, 250, 154],
            mediumturquoise: [72, 209, 204],
            mediumvioletred: [199, 21, 133],
            midnightblue: [25, 25, 112],
            mintcream: [245, 255, 250],
            mistyrose: [255, 228, 225],
            moccasin: [255, 228, 181],
            navajowhite: [255, 222, 173],
            navy: [0, 0, 128],
            oldlace: [253, 245, 230],
            olive: [128, 128, 0],
            olivedrab: [107, 142, 35],
            orange: [255, 165, 0],
            orangered: [255, 69, 0],
            orchid: [218, 112, 214],
            palegoldenrod: [238, 232, 170],
            palegreen: [152, 251, 152],
            paleturquoise: [175, 238, 238],
            palevioletred: [219, 112, 147],
            papayawhip: [255, 239, 213],
            peachpuff: [255, 218, 185],
            peru: [205, 133, 63],
            pink: [255, 192, 203],
            plum: [221, 160, 221],
            powderblue: [176, 224, 230],
            purple: [128, 0, 128],
            rebeccapurple: [102, 51, 153],
            red: [255, 0, 0],
            rosybrown: [188, 143, 143],
            royalblue: [65, 105, 225],
            saddlebrown: [139, 69, 19],
            salmon: [250, 128, 114],
            sandybrown: [244, 164, 96],
            seagreen: [46, 139, 87],
            seashell: [255, 245, 238],
            sienna: [160, 82, 45],
            silver: [192, 192, 192],
            skyblue: [135, 206, 235],
            slateblue: [106, 90, 205],
            slategray: [112, 128, 144],
            slategrey: [112, 128, 144],
            snow: [255, 250, 250],
            springgreen: [0, 255, 127],
            steelblue: [70, 130, 180],
            tan: [210, 180, 140],
            teal: [0, 128, 128],
            thistle: [216, 191, 216],
            tomato: [255, 99, 71],
            turquoise: [64, 224, 208],
            violet: [238, 130, 238],
            wheat: [245, 222, 179],
            white: [255, 255, 255],
            whitesmoke: [245, 245, 245],
            yellow: [255, 255, 0],
            yellowgreen: [154, 205, 50],
        };
    },
});

// node_modules/color-convert/conversions.js
var require_conversions = __commonJS({
    'node_modules/color-convert/conversions.js'(exports2, module2) {
        var cssKeywords = require_color_name();
        var reverseKeywords = {};
        for (const key of Object.keys(cssKeywords)) {
            reverseKeywords[cssKeywords[key]] = key;
        }
        var convert = {
            rgb: { channels: 3, labels: 'rgb' },
            hsl: { channels: 3, labels: 'hsl' },
            hsv: { channels: 3, labels: 'hsv' },
            hwb: { channels: 3, labels: 'hwb' },
            cmyk: { channels: 4, labels: 'cmyk' },
            xyz: { channels: 3, labels: 'xyz' },
            lab: { channels: 3, labels: 'lab' },
            lch: { channels: 3, labels: 'lch' },
            hex: { channels: 1, labels: ['hex'] },
            keyword: { channels: 1, labels: ['keyword'] },
            ansi16: { channels: 1, labels: ['ansi16'] },
            ansi256: { channels: 1, labels: ['ansi256'] },
            hcg: { channels: 3, labels: ['h', 'c', 'g'] },
            apple: { channels: 3, labels: ['r16', 'g16', 'b16'] },
            gray: { channels: 1, labels: ['gray'] },
        };
        module2.exports = convert;
        for (const model of Object.keys(convert)) {
            if (!('channels' in convert[model])) {
                throw new Error('missing channels property: ' + model);
            }
            if (!('labels' in convert[model])) {
                throw new Error('missing channel labels property: ' + model);
            }
            if (convert[model].labels.length !== convert[model].channels) {
                throw new Error('channel and label counts mismatch: ' + model);
            }
            const { channels, labels } = convert[model];
            delete convert[model].channels;
            delete convert[model].labels;
            Object.defineProperty(convert[model], 'channels', { value: channels });
            Object.defineProperty(convert[model], 'labels', { value: labels });
        }
        convert.rgb.hsl = function (rgb) {
            const r2 = rgb[0] / 255;
            const g = rgb[1] / 255;
            const b = rgb[2] / 255;
            const min = Math.min(r2, g, b);
            const max = Math.max(r2, g, b);
            const delta = max - min;
            let h2;
            let s2;
            if (max === min) {
                h2 = 0;
            } else if (r2 === max) {
                h2 = (g - b) / delta;
            } else if (g === max) {
                h2 = 2 + (b - r2) / delta;
            } else if (b === max) {
                h2 = 4 + (r2 - g) / delta;
            }
            h2 = Math.min(h2 * 60, 360);
            if (h2 < 0) {
                h2 += 360;
            }
            const l = (min + max) / 2;
            if (max === min) {
                s2 = 0;
            } else if (l <= 0.5) {
                s2 = delta / (max + min);
            } else {
                s2 = delta / (2 - max - min);
            }
            return [h2, s2 * 100, l * 100];
        };
        convert.rgb.hsv = function (rgb) {
            let rdif;
            let gdif;
            let bdif;
            let h2;
            let s2;
            const r2 = rgb[0] / 255;
            const g = rgb[1] / 255;
            const b = rgb[2] / 255;
            const v = Math.max(r2, g, b);
            const diff = v - Math.min(r2, g, b);
            const diffc = function (c) {
                return (v - c) / 6 / diff + 1 / 2;
            };
            if (diff === 0) {
                h2 = 0;
                s2 = 0;
            } else {
                s2 = diff / v;
                rdif = diffc(r2);
                gdif = diffc(g);
                bdif = diffc(b);
                if (r2 === v) {
                    h2 = bdif - gdif;
                } else if (g === v) {
                    h2 = 1 / 3 + rdif - bdif;
                } else if (b === v) {
                    h2 = 2 / 3 + gdif - rdif;
                }
                if (h2 < 0) {
                    h2 += 1;
                } else if (h2 > 1) {
                    h2 -= 1;
                }
            }
            return [h2 * 360, s2 * 100, v * 100];
        };
        convert.rgb.hwb = function (rgb) {
            const r2 = rgb[0];
            const g = rgb[1];
            let b = rgb[2];
            const h2 = convert.rgb.hsl(rgb)[0];
            const w = (1 / 255) * Math.min(r2, Math.min(g, b));
            b = 1 - (1 / 255) * Math.max(r2, Math.max(g, b));
            return [h2, w * 100, b * 100];
        };
        convert.rgb.cmyk = function (rgb) {
            const r2 = rgb[0] / 255;
            const g = rgb[1] / 255;
            const b = rgb[2] / 255;
            const k = Math.min(1 - r2, 1 - g, 1 - b);
            const c = (1 - r2 - k) / (1 - k) || 0;
            const m2 = (1 - g - k) / (1 - k) || 0;
            const y = (1 - b - k) / (1 - k) || 0;
            return [c * 100, m2 * 100, y * 100, k * 100];
        };
        function comparativeDistance(x2, y) {
            return (x2[0] - y[0]) ** 2 + (x2[1] - y[1]) ** 2 + (x2[2] - y[2]) ** 2;
        }
        convert.rgb.keyword = function (rgb) {
            const reversed = reverseKeywords[rgb];
            if (reversed) {
                return reversed;
            }
            let currentClosestDistance = Infinity;
            let currentClosestKeyword;
            for (const keyword of Object.keys(cssKeywords)) {
                const value = cssKeywords[keyword];
                const distance = comparativeDistance(rgb, value);
                if (distance < currentClosestDistance) {
                    currentClosestDistance = distance;
                    currentClosestKeyword = keyword;
                }
            }
            return currentClosestKeyword;
        };
        convert.keyword.rgb = function (keyword) {
            return cssKeywords[keyword];
        };
        convert.rgb.xyz = function (rgb) {
            let r2 = rgb[0] / 255;
            let g = rgb[1] / 255;
            let b = rgb[2] / 255;
            r2 = r2 > 0.04045 ? ((r2 + 0.055) / 1.055) ** 2.4 : r2 / 12.92;
            g = g > 0.04045 ? ((g + 0.055) / 1.055) ** 2.4 : g / 12.92;
            b = b > 0.04045 ? ((b + 0.055) / 1.055) ** 2.4 : b / 12.92;
            const x2 = r2 * 0.4124 + g * 0.3576 + b * 0.1805;
            const y = r2 * 0.2126 + g * 0.7152 + b * 0.0722;
            const z = r2 * 0.0193 + g * 0.1192 + b * 0.9505;
            return [x2 * 100, y * 100, z * 100];
        };
        convert.rgb.lab = function (rgb) {
            const xyz = convert.rgb.xyz(rgb);
            let x2 = xyz[0];
            let y = xyz[1];
            let z = xyz[2];
            x2 /= 95.047;
            y /= 100;
            z /= 108.883;
            x2 = x2 > 8856e-6 ? x2 ** (1 / 3) : 7.787 * x2 + 16 / 116;
            y = y > 8856e-6 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
            z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
            const l = 116 * y - 16;
            const a = 500 * (x2 - y);
            const b = 200 * (y - z);
            return [l, a, b];
        };
        convert.hsl.rgb = function (hsl) {
            const h2 = hsl[0] / 360;
            const s2 = hsl[1] / 100;
            const l = hsl[2] / 100;
            let t2;
            let t3;
            let val2;
            if (s2 === 0) {
                val2 = l * 255;
                return [val2, val2, val2];
            }
            if (l < 0.5) {
                t2 = l * (1 + s2);
            } else {
                t2 = l + s2 - l * s2;
            }
            const t1 = 2 * l - t2;
            const rgb = [0, 0, 0];
            for (let i2 = 0; i2 < 3; i2++) {
                t3 = h2 + (1 / 3) * -(i2 - 1);
                if (t3 < 0) {
                    t3++;
                }
                if (t3 > 1) {
                    t3--;
                }
                if (6 * t3 < 1) {
                    val2 = t1 + (t2 - t1) * 6 * t3;
                } else if (2 * t3 < 1) {
                    val2 = t2;
                } else if (3 * t3 < 2) {
                    val2 = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
                } else {
                    val2 = t1;
                }
                rgb[i2] = val2 * 255;
            }
            return rgb;
        };
        convert.hsl.hsv = function (hsl) {
            const h2 = hsl[0];
            let s2 = hsl[1] / 100;
            let l = hsl[2] / 100;
            let smin = s2;
            const lmin = Math.max(l, 0.01);
            l *= 2;
            s2 *= l <= 1 ? l : 2 - l;
            smin *= lmin <= 1 ? lmin : 2 - lmin;
            const v = (l + s2) / 2;
            const sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s2) / (l + s2);
            return [h2, sv * 100, v * 100];
        };
        convert.hsv.rgb = function (hsv) {
            const h2 = hsv[0] / 60;
            const s2 = hsv[1] / 100;
            let v = hsv[2] / 100;
            const hi = Math.floor(h2) % 6;
            const f3 = h2 - Math.floor(h2);
            const p = 255 * v * (1 - s2);
            const q = 255 * v * (1 - s2 * f3);
            const t2 = 255 * v * (1 - s2 * (1 - f3));
            v *= 255;
            switch (hi) {
                case 0:
                    return [v, t2, p];
                case 1:
                    return [q, v, p];
                case 2:
                    return [p, v, t2];
                case 3:
                    return [p, q, v];
                case 4:
                    return [t2, p, v];
                case 5:
                    return [v, p, q];
            }
        };
        convert.hsv.hsl = function (hsv) {
            const h2 = hsv[0];
            const s2 = hsv[1] / 100;
            const v = hsv[2] / 100;
            const vmin = Math.max(v, 0.01);
            let sl;
            let l;
            l = (2 - s2) * v;
            const lmin = (2 - s2) * vmin;
            sl = s2 * vmin;
            sl /= lmin <= 1 ? lmin : 2 - lmin;
            sl = sl || 0;
            l /= 2;
            return [h2, sl * 100, l * 100];
        };
        convert.hwb.rgb = function (hwb) {
            const h2 = hwb[0] / 360;
            let wh = hwb[1] / 100;
            let bl = hwb[2] / 100;
            const ratio = wh + bl;
            let f3;
            if (ratio > 1) {
                wh /= ratio;
                bl /= ratio;
            }
            const i2 = Math.floor(6 * h2);
            const v = 1 - bl;
            f3 = 6 * h2 - i2;
            if ((i2 & 1) !== 0) {
                f3 = 1 - f3;
            }
            const n = wh + f3 * (v - wh);
            let r2;
            let g;
            let b;
            switch (i2) {
                default:
                case 6:
                case 0:
                    r2 = v;
                    g = n;
                    b = wh;
                    break;
                case 1:
                    r2 = n;
                    g = v;
                    b = wh;
                    break;
                case 2:
                    r2 = wh;
                    g = v;
                    b = n;
                    break;
                case 3:
                    r2 = wh;
                    g = n;
                    b = v;
                    break;
                case 4:
                    r2 = n;
                    g = wh;
                    b = v;
                    break;
                case 5:
                    r2 = v;
                    g = wh;
                    b = n;
                    break;
            }
            return [r2 * 255, g * 255, b * 255];
        };
        convert.cmyk.rgb = function (cmyk) {
            const c = cmyk[0] / 100;
            const m2 = cmyk[1] / 100;
            const y = cmyk[2] / 100;
            const k = cmyk[3] / 100;
            const r2 = 1 - Math.min(1, c * (1 - k) + k);
            const g = 1 - Math.min(1, m2 * (1 - k) + k);
            const b = 1 - Math.min(1, y * (1 - k) + k);
            return [r2 * 255, g * 255, b * 255];
        };
        convert.xyz.rgb = function (xyz) {
            const x2 = xyz[0] / 100;
            const y = xyz[1] / 100;
            const z = xyz[2] / 100;
            let r2;
            let g;
            let b;
            r2 = x2 * 3.2406 + y * -1.5372 + z * -0.4986;
            g = x2 * -0.9689 + y * 1.8758 + z * 0.0415;
            b = x2 * 0.0557 + y * -0.204 + z * 1.057;
            r2 = r2 > 31308e-7 ? 1.055 * r2 ** (1 / 2.4) - 0.055 : r2 * 12.92;
            g = g > 31308e-7 ? 1.055 * g ** (1 / 2.4) - 0.055 : g * 12.92;
            b = b > 31308e-7 ? 1.055 * b ** (1 / 2.4) - 0.055 : b * 12.92;
            r2 = Math.min(Math.max(0, r2), 1);
            g = Math.min(Math.max(0, g), 1);
            b = Math.min(Math.max(0, b), 1);
            return [r2 * 255, g * 255, b * 255];
        };
        convert.xyz.lab = function (xyz) {
            let x2 = xyz[0];
            let y = xyz[1];
            let z = xyz[2];
            x2 /= 95.047;
            y /= 100;
            z /= 108.883;
            x2 = x2 > 8856e-6 ? x2 ** (1 / 3) : 7.787 * x2 + 16 / 116;
            y = y > 8856e-6 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
            z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
            const l = 116 * y - 16;
            const a = 500 * (x2 - y);
            const b = 200 * (y - z);
            return [l, a, b];
        };
        convert.lab.xyz = function (lab) {
            const l = lab[0];
            const a = lab[1];
            const b = lab[2];
            let x2;
            let y;
            let z;
            y = (l + 16) / 116;
            x2 = a / 500 + y;
            z = y - b / 200;
            const y2 = y ** 3;
            const x22 = x2 ** 3;
            const z2 = z ** 3;
            y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
            x2 = x22 > 8856e-6 ? x22 : (x2 - 16 / 116) / 7.787;
            z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
            x2 *= 95.047;
            y *= 100;
            z *= 108.883;
            return [x2, y, z];
        };
        convert.lab.lch = function (lab) {
            const l = lab[0];
            const a = lab[1];
            const b = lab[2];
            let h2;
            const hr = Math.atan2(b, a);
            h2 = (hr * 360) / 2 / Math.PI;
            if (h2 < 0) {
                h2 += 360;
            }
            const c = Math.sqrt(a * a + b * b);
            return [l, c, h2];
        };
        convert.lch.lab = function (lch) {
            const l = lch[0];
            const c = lch[1];
            const h2 = lch[2];
            const hr = (h2 / 360) * 2 * Math.PI;
            const a = c * Math.cos(hr);
            const b = c * Math.sin(hr);
            return [l, a, b];
        };
        convert.rgb.ansi16 = function (args, saturation = null) {
            const [r2, g, b] = args;
            let value = saturation === null ? convert.rgb.hsv(args)[2] : saturation;
            value = Math.round(value / 50);
            if (value === 0) {
                return 30;
            }
            let ansi =
                30 +
                ((Math.round(b / 255) << 2) | (Math.round(g / 255) << 1) | Math.round(r2 / 255));
            if (value === 2) {
                ansi += 60;
            }
            return ansi;
        };
        convert.hsv.ansi16 = function (args) {
            return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
        };
        convert.rgb.ansi256 = function (args) {
            const r2 = args[0];
            const g = args[1];
            const b = args[2];
            if (r2 === g && g === b) {
                if (r2 < 8) {
                    return 16;
                }
                if (r2 > 248) {
                    return 231;
                }
                return Math.round(((r2 - 8) / 247) * 24) + 232;
            }
            const ansi =
                16 +
                36 * Math.round((r2 / 255) * 5) +
                6 * Math.round((g / 255) * 5) +
                Math.round((b / 255) * 5);
            return ansi;
        };
        convert.ansi16.rgb = function (args) {
            let color = args % 10;
            if (color === 0 || color === 7) {
                if (args > 50) {
                    color += 3.5;
                }
                color = (color / 10.5) * 255;
                return [color, color, color];
            }
            const mult = (~~(args > 50) + 1) * 0.5;
            const r2 = (color & 1) * mult * 255;
            const g = ((color >> 1) & 1) * mult * 255;
            const b = ((color >> 2) & 1) * mult * 255;
            return [r2, g, b];
        };
        convert.ansi256.rgb = function (args) {
            if (args >= 232) {
                const c = (args - 232) * 10 + 8;
                return [c, c, c];
            }
            args -= 16;
            let rem;
            const r2 = (Math.floor(args / 36) / 5) * 255;
            const g = (Math.floor((rem = args % 36) / 6) / 5) * 255;
            const b = ((rem % 6) / 5) * 255;
            return [r2, g, b];
        };
        convert.rgb.hex = function (args) {
            const integer =
                ((Math.round(args[0]) & 255) << 16) +
                ((Math.round(args[1]) & 255) << 8) +
                (Math.round(args[2]) & 255);
            const string = integer.toString(16).toUpperCase();
            return '000000'.substring(string.length) + string;
        };
        convert.hex.rgb = function (args) {
            const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
            if (!match) {
                return [0, 0, 0];
            }
            let colorString = match[0];
            if (match[0].length === 3) {
                colorString = colorString
                    .split('')
                    .map((char) => {
                        return char + char;
                    })
                    .join('');
            }
            const integer = parseInt(colorString, 16);
            const r2 = (integer >> 16) & 255;
            const g = (integer >> 8) & 255;
            const b = integer & 255;
            return [r2, g, b];
        };
        convert.rgb.hcg = function (rgb) {
            const r2 = rgb[0] / 255;
            const g = rgb[1] / 255;
            const b = rgb[2] / 255;
            const max = Math.max(Math.max(r2, g), b);
            const min = Math.min(Math.min(r2, g), b);
            const chroma = max - min;
            let grayscale;
            let hue;
            if (chroma < 1) {
                grayscale = min / (1 - chroma);
            } else {
                grayscale = 0;
            }
            if (chroma <= 0) {
                hue = 0;
            } else if (max === r2) {
                hue = ((g - b) / chroma) % 6;
            } else if (max === g) {
                hue = 2 + (b - r2) / chroma;
            } else {
                hue = 4 + (r2 - g) / chroma;
            }
            hue /= 6;
            hue %= 1;
            return [hue * 360, chroma * 100, grayscale * 100];
        };
        convert.hsl.hcg = function (hsl) {
            const s2 = hsl[1] / 100;
            const l = hsl[2] / 100;
            const c = l < 0.5 ? 2 * s2 * l : 2 * s2 * (1 - l);
            let f3 = 0;
            if (c < 1) {
                f3 = (l - 0.5 * c) / (1 - c);
            }
            return [hsl[0], c * 100, f3 * 100];
        };
        convert.hsv.hcg = function (hsv) {
            const s2 = hsv[1] / 100;
            const v = hsv[2] / 100;
            const c = s2 * v;
            let f3 = 0;
            if (c < 1) {
                f3 = (v - c) / (1 - c);
            }
            return [hsv[0], c * 100, f3 * 100];
        };
        convert.hcg.rgb = function (hcg) {
            const h2 = hcg[0] / 360;
            const c = hcg[1] / 100;
            const g = hcg[2] / 100;
            if (c === 0) {
                return [g * 255, g * 255, g * 255];
            }
            const pure = [0, 0, 0];
            const hi = (h2 % 1) * 6;
            const v = hi % 1;
            const w = 1 - v;
            let mg = 0;
            switch (Math.floor(hi)) {
                case 0:
                    pure[0] = 1;
                    pure[1] = v;
                    pure[2] = 0;
                    break;
                case 1:
                    pure[0] = w;
                    pure[1] = 1;
                    pure[2] = 0;
                    break;
                case 2:
                    pure[0] = 0;
                    pure[1] = 1;
                    pure[2] = v;
                    break;
                case 3:
                    pure[0] = 0;
                    pure[1] = w;
                    pure[2] = 1;
                    break;
                case 4:
                    pure[0] = v;
                    pure[1] = 0;
                    pure[2] = 1;
                    break;
                default:
                    pure[0] = 1;
                    pure[1] = 0;
                    pure[2] = w;
            }
            mg = (1 - c) * g;
            return [(c * pure[0] + mg) * 255, (c * pure[1] + mg) * 255, (c * pure[2] + mg) * 255];
        };
        convert.hcg.hsv = function (hcg) {
            const c = hcg[1] / 100;
            const g = hcg[2] / 100;
            const v = c + g * (1 - c);
            let f3 = 0;
            if (v > 0) {
                f3 = c / v;
            }
            return [hcg[0], f3 * 100, v * 100];
        };
        convert.hcg.hsl = function (hcg) {
            const c = hcg[1] / 100;
            const g = hcg[2] / 100;
            const l = g * (1 - c) + 0.5 * c;
            let s2 = 0;
            if (l > 0 && l < 0.5) {
                s2 = c / (2 * l);
            } else if (l >= 0.5 && l < 1) {
                s2 = c / (2 * (1 - l));
            }
            return [hcg[0], s2 * 100, l * 100];
        };
        convert.hcg.hwb = function (hcg) {
            const c = hcg[1] / 100;
            const g = hcg[2] / 100;
            const v = c + g * (1 - c);
            return [hcg[0], (v - c) * 100, (1 - v) * 100];
        };
        convert.hwb.hcg = function (hwb) {
            const w = hwb[1] / 100;
            const b = hwb[2] / 100;
            const v = 1 - b;
            const c = v - w;
            let g = 0;
            if (c < 1) {
                g = (v - c) / (1 - c);
            }
            return [hwb[0], c * 100, g * 100];
        };
        convert.apple.rgb = function (apple) {
            return [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];
        };
        convert.rgb.apple = function (rgb) {
            return [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];
        };
        convert.gray.rgb = function (args) {
            return [(args[0] / 100) * 255, (args[0] / 100) * 255, (args[0] / 100) * 255];
        };
        convert.gray.hsl = function (args) {
            return [0, 0, args[0]];
        };
        convert.gray.hsv = convert.gray.hsl;
        convert.gray.hwb = function (gray2) {
            return [0, 100, gray2[0]];
        };
        convert.gray.cmyk = function (gray2) {
            return [0, 0, 0, gray2[0]];
        };
        convert.gray.lab = function (gray2) {
            return [gray2[0], 0, 0];
        };
        convert.gray.hex = function (gray2) {
            const val2 = Math.round((gray2[0] / 100) * 255) & 255;
            const integer = (val2 << 16) + (val2 << 8) + val2;
            const string = integer.toString(16).toUpperCase();
            return '000000'.substring(string.length) + string;
        };
        convert.rgb.gray = function (rgb) {
            const val2 = (rgb[0] + rgb[1] + rgb[2]) / 3;
            return [(val2 / 255) * 100];
        };
    },
});

// node_modules/color-convert/route.js
var require_route = __commonJS({
    'node_modules/color-convert/route.js'(exports2, module2) {
        var conversions = require_conversions();
        function buildGraph() {
            const graph = {};
            const models = Object.keys(conversions);
            for (let len = models.length, i2 = 0; i2 < len; i2++) {
                graph[models[i2]] = {
                    // http://jsperf.com/1-vs-infinity
                    // micro-opt, but this is simple.
                    distance: -1,
                    parent: null,
                };
            }
            return graph;
        }
        function deriveBFS(fromModel) {
            const graph = buildGraph();
            const queue = [fromModel];
            graph[fromModel].distance = 0;
            while (queue.length) {
                const current = queue.pop();
                const adjacents = Object.keys(conversions[current]);
                for (let len = adjacents.length, i2 = 0; i2 < len; i2++) {
                    const adjacent = adjacents[i2];
                    const node = graph[adjacent];
                    if (node.distance === -1) {
                        node.distance = graph[current].distance + 1;
                        node.parent = current;
                        queue.unshift(adjacent);
                    }
                }
            }
            return graph;
        }
        function link(from, to) {
            return function (args) {
                return to(from(args));
            };
        }
        function wrapConversion(toModel, graph) {
            const path4 = [graph[toModel].parent, toModel];
            let fn = conversions[graph[toModel].parent][toModel];
            let cur = graph[toModel].parent;
            while (graph[cur].parent) {
                path4.unshift(graph[cur].parent);
                fn = link(conversions[graph[cur].parent][cur], fn);
                cur = graph[cur].parent;
            }
            fn.conversion = path4;
            return fn;
        }
        module2.exports = function (fromModel) {
            const graph = deriveBFS(fromModel);
            const conversion = {};
            const models = Object.keys(graph);
            for (let len = models.length, i2 = 0; i2 < len; i2++) {
                const toModel = models[i2];
                const node = graph[toModel];
                if (node.parent === null) {
                    continue;
                }
                conversion[toModel] = wrapConversion(toModel, graph);
            }
            return conversion;
        };
    },
});

// node_modules/color-convert/index.js
var require_color_convert = __commonJS({
    'node_modules/color-convert/index.js'(exports2, module2) {
        var conversions = require_conversions();
        var route = require_route();
        var convert = {};
        var models = Object.keys(conversions);
        function wrapRaw(fn) {
            const wrappedFn = function (...args) {
                const arg0 = args[0];
                if (arg0 === void 0 || arg0 === null) {
                    return arg0;
                }
                if (arg0.length > 1) {
                    args = arg0;
                }
                return fn(args);
            };
            if ('conversion' in fn) {
                wrappedFn.conversion = fn.conversion;
            }
            return wrappedFn;
        }
        function wrapRounded(fn) {
            const wrappedFn = function (...args) {
                const arg0 = args[0];
                if (arg0 === void 0 || arg0 === null) {
                    return arg0;
                }
                if (arg0.length > 1) {
                    args = arg0;
                }
                const result = fn(args);
                if (typeof result === 'object') {
                    for (let len = result.length, i2 = 0; i2 < len; i2++) {
                        result[i2] = Math.round(result[i2]);
                    }
                }
                return result;
            };
            if ('conversion' in fn) {
                wrappedFn.conversion = fn.conversion;
            }
            return wrappedFn;
        }
        models.forEach((fromModel) => {
            convert[fromModel] = {};
            Object.defineProperty(convert[fromModel], 'channels', {
                value: conversions[fromModel].channels,
            });
            Object.defineProperty(convert[fromModel], 'labels', {
                value: conversions[fromModel].labels,
            });
            const routes = route(fromModel);
            const routeModels = Object.keys(routes);
            routeModels.forEach((toModel) => {
                const fn = routes[toModel];
                convert[fromModel][toModel] = wrapRounded(fn);
                convert[fromModel][toModel].raw = wrapRaw(fn);
            });
        });
        module2.exports = convert;
    },
});

// node_modules/gradient-string/node_modules/ansi-styles/index.js
var require_ansi_styles = __commonJS({
    'node_modules/gradient-string/node_modules/ansi-styles/index.js'(exports2, module2) {
        'use strict';
        var wrapAnsi16 =
            (fn, offset) =>
            (...args) => {
                const code = fn(...args);
                return `\x1B[${code + offset}m`;
            };
        var wrapAnsi256 =
            (fn, offset) =>
            (...args) => {
                const code = fn(...args);
                return `\x1B[${38 + offset};5;${code}m`;
            };
        var wrapAnsi16m =
            (fn, offset) =>
            (...args) => {
                const rgb = fn(...args);
                return `\x1B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
            };
        var ansi2ansi = (n) => n;
        var rgb2rgb = (r2, g, b) => [r2, g, b];
        var setLazyProperty = (object, property, get2) => {
            Object.defineProperty(object, property, {
                get: () => {
                    const value = get2();
                    Object.defineProperty(object, property, {
                        value,
                        enumerable: true,
                        configurable: true,
                    });
                    return value;
                },
                enumerable: true,
                configurable: true,
            });
        };
        var colorConvert;
        var makeDynamicStyles = (wrap2, targetSpace, identity2, isBackground) => {
            if (colorConvert === void 0) {
                colorConvert = require_color_convert();
            }
            const offset = isBackground ? 10 : 0;
            const styles = {};
            for (const [sourceSpace, suite] of Object.entries(colorConvert)) {
                const name = sourceSpace === 'ansi16' ? 'ansi' : sourceSpace;
                if (sourceSpace === targetSpace) {
                    styles[name] = wrap2(identity2, offset);
                } else if (typeof suite === 'object') {
                    styles[name] = wrap2(suite[targetSpace], offset);
                }
            }
            return styles;
        };
        function assembleStyles() {
            const codes = /* @__PURE__ */ new Map();
            const styles = {
                modifier: {
                    reset: [0, 0],
                    // 21 isn't widely supported and 22 does the same thing
                    bold: [1, 22],
                    dim: [2, 22],
                    italic: [3, 23],
                    underline: [4, 24],
                    inverse: [7, 27],
                    hidden: [8, 28],
                    strikethrough: [9, 29],
                },
                color: {
                    black: [30, 39],
                    red: [31, 39],
                    green: [32, 39],
                    yellow: [33, 39],
                    blue: [34, 39],
                    magenta: [35, 39],
                    cyan: [36, 39],
                    white: [37, 39],
                    // Bright color
                    blackBright: [90, 39],
                    redBright: [91, 39],
                    greenBright: [92, 39],
                    yellowBright: [93, 39],
                    blueBright: [94, 39],
                    magentaBright: [95, 39],
                    cyanBright: [96, 39],
                    whiteBright: [97, 39],
                },
                bgColor: {
                    bgBlack: [40, 49],
                    bgRed: [41, 49],
                    bgGreen: [42, 49],
                    bgYellow: [43, 49],
                    bgBlue: [44, 49],
                    bgMagenta: [45, 49],
                    bgCyan: [46, 49],
                    bgWhite: [47, 49],
                    // Bright color
                    bgBlackBright: [100, 49],
                    bgRedBright: [101, 49],
                    bgGreenBright: [102, 49],
                    bgYellowBright: [103, 49],
                    bgBlueBright: [104, 49],
                    bgMagentaBright: [105, 49],
                    bgCyanBright: [106, 49],
                    bgWhiteBright: [107, 49],
                },
            };
            styles.color.gray = styles.color.blackBright;
            styles.bgColor.bgGray = styles.bgColor.bgBlackBright;
            styles.color.grey = styles.color.blackBright;
            styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;
            for (const [groupName, group] of Object.entries(styles)) {
                for (const [styleName, style] of Object.entries(group)) {
                    styles[styleName] = {
                        open: `\x1B[${style[0]}m`,
                        close: `\x1B[${style[1]}m`,
                    };
                    group[styleName] = styles[styleName];
                    codes.set(style[0], style[1]);
                }
                Object.defineProperty(styles, groupName, {
                    value: group,
                    enumerable: false,
                });
            }
            Object.defineProperty(styles, 'codes', {
                value: codes,
                enumerable: false,
            });
            styles.color.close = '\x1B[39m';
            styles.bgColor.close = '\x1B[49m';
            setLazyProperty(styles.color, 'ansi', () =>
                makeDynamicStyles(wrapAnsi16, 'ansi16', ansi2ansi, false),
            );
            setLazyProperty(styles.color, 'ansi256', () =>
                makeDynamicStyles(wrapAnsi256, 'ansi256', ansi2ansi, false),
            );
            setLazyProperty(styles.color, 'ansi16m', () =>
                makeDynamicStyles(wrapAnsi16m, 'rgb', rgb2rgb, false),
            );
            setLazyProperty(styles.bgColor, 'ansi', () =>
                makeDynamicStyles(wrapAnsi16, 'ansi16', ansi2ansi, true),
            );
            setLazyProperty(styles.bgColor, 'ansi256', () =>
                makeDynamicStyles(wrapAnsi256, 'ansi256', ansi2ansi, true),
            );
            setLazyProperty(styles.bgColor, 'ansi16m', () =>
                makeDynamicStyles(wrapAnsi16m, 'rgb', rgb2rgb, true),
            );
            return styles;
        }
        Object.defineProperty(module2, 'exports', {
            enumerable: true,
            get: assembleStyles,
        });
    },
});

// node_modules/has-flag/index.js
var require_has_flag = __commonJS({
    'node_modules/has-flag/index.js'(exports2, module2) {
        'use strict';
        module2.exports = (flag, argv = process.argv) => {
            const prefix = flag.startsWith('-') ? '' : flag.length === 1 ? '-' : '--';
            const position = argv.indexOf(prefix + flag);
            const terminatorPosition = argv.indexOf('--');
            return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
        };
    },
});

// node_modules/supports-color/index.js
var require_supports_color = __commonJS({
    'node_modules/supports-color/index.js'(exports2, module2) {
        'use strict';
        var os2 = require('os');
        var tty = require('tty');
        var hasFlag = require_has_flag();
        var { env } = process;
        var forceColor;
        if (
            hasFlag('no-color') ||
            hasFlag('no-colors') ||
            hasFlag('color=false') ||
            hasFlag('color=never')
        ) {
            forceColor = 0;
        } else if (
            hasFlag('color') ||
            hasFlag('colors') ||
            hasFlag('color=true') ||
            hasFlag('color=always')
        ) {
            forceColor = 1;
        }
        if ('FORCE_COLOR' in env) {
            if (env.FORCE_COLOR === 'true') {
                forceColor = 1;
            } else if (env.FORCE_COLOR === 'false') {
                forceColor = 0;
            } else {
                forceColor =
                    env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);
            }
        }
        function translateLevel(level) {
            if (level === 0) {
                return false;
            }
            return {
                level,
                hasBasic: true,
                has256: level >= 2,
                has16m: level >= 3,
            };
        }
        function supportsColor(haveStream, streamIsTTY) {
            if (forceColor === 0) {
                return 0;
            }
            if (hasFlag('color=16m') || hasFlag('color=full') || hasFlag('color=truecolor')) {
                return 3;
            }
            if (hasFlag('color=256')) {
                return 2;
            }
            if (haveStream && !streamIsTTY && forceColor === void 0) {
                return 0;
            }
            const min = forceColor || 0;
            if (env.TERM === 'dumb') {
                return min;
            }
            if (process.platform === 'win32') {
                const osRelease = os2.release().split('.');
                if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
                    return Number(osRelease[2]) >= 14931 ? 3 : 2;
                }
                return 1;
            }
            if ('CI' in env) {
                if (
                    [
                        'TRAVIS',
                        'CIRCLECI',
                        'APPVEYOR',
                        'GITLAB_CI',
                        'GITHUB_ACTIONS',
                        'BUILDKITE',
                    ].some((sign) => sign in env) ||
                    env.CI_NAME === 'codeship'
                ) {
                    return 1;
                }
                return min;
            }
            if ('TEAMCITY_VERSION' in env) {
                return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
            }
            if (env.COLORTERM === 'truecolor') {
                return 3;
            }
            if ('TERM_PROGRAM' in env) {
                const version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);
                switch (env.TERM_PROGRAM) {
                    case 'iTerm.app':
                        return version >= 3 ? 3 : 2;
                    case 'Apple_Terminal':
                        return 2;
                }
            }
            if (/-256(color)?$/i.test(env.TERM)) {
                return 2;
            }
            if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
                return 1;
            }
            if ('COLORTERM' in env) {
                return 1;
            }
            return min;
        }
        function getSupportLevel(stream) {
            const level = supportsColor(stream, stream && stream.isTTY);
            return translateLevel(level);
        }
        module2.exports = {
            supportsColor: getSupportLevel,
            stdout: translateLevel(supportsColor(true, tty.isatty(1))),
            stderr: translateLevel(supportsColor(true, tty.isatty(2))),
        };
    },
});

// node_modules/gradient-string/node_modules/chalk/source/util.js
var require_util3 = __commonJS({
    'node_modules/gradient-string/node_modules/chalk/source/util.js'(exports2, module2) {
        'use strict';
        var stringReplaceAll = (string, substring, replacer) => {
            let index2 = string.indexOf(substring);
            if (index2 === -1) {
                return string;
            }
            const substringLength = substring.length;
            let endIndex = 0;
            let returnValue = '';
            do {
                returnValue += string.substr(endIndex, index2 - endIndex) + substring + replacer;
                endIndex = index2 + substringLength;
                index2 = string.indexOf(substring, endIndex);
            } while (index2 !== -1);
            returnValue += string.substr(endIndex);
            return returnValue;
        };
        var stringEncaseCRLFWithFirstIndex = (string, prefix, postfix, index2) => {
            let endIndex = 0;
            let returnValue = '';
            do {
                const gotCR = string[index2 - 1] === '\r';
                returnValue +=
                    string.substr(endIndex, (gotCR ? index2 - 1 : index2) - endIndex) +
                    prefix +
                    (gotCR ? '\r\n' : '\n') +
                    postfix;
                endIndex = index2 + 1;
                index2 = string.indexOf('\n', endIndex);
            } while (index2 !== -1);
            returnValue += string.substr(endIndex);
            return returnValue;
        };
        module2.exports = {
            stringReplaceAll,
            stringEncaseCRLFWithFirstIndex,
        };
    },
});

// node_modules/gradient-string/node_modules/chalk/source/templates.js
var require_templates = __commonJS({
    'node_modules/gradient-string/node_modules/chalk/source/templates.js'(exports2, module2) {
        'use strict';
        var TEMPLATE_REGEX =
            /(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
        var STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
        var STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
        var ESCAPE_REGEX = /\\(u(?:[a-f\d]{4}|{[a-f\d]{1,6}})|x[a-f\d]{2}|.)|([^\\])/gi;
        var ESCAPES = /* @__PURE__ */ new Map([
            ['n', '\n'],
            ['r', '\r'],
            ['t', '	'],
            ['b', '\b'],
            ['f', '\f'],
            ['v', '\v'],
            ['0', '\0'],
            ['\\', '\\'],
            ['e', '\x1B'],
            ['a', '\x07'],
        ]);
        function unescape2(c) {
            const u = c[0] === 'u';
            const bracket = c[1] === '{';
            if ((u && !bracket && c.length === 5) || (c[0] === 'x' && c.length === 3)) {
                return String.fromCharCode(parseInt(c.slice(1), 16));
            }
            if (u && bracket) {
                return String.fromCodePoint(parseInt(c.slice(2, -1), 16));
            }
            return ESCAPES.get(c) || c;
        }
        function parseArguments(name, arguments_) {
            const results = [];
            const chunks = arguments_.trim().split(/\s*,\s*/g);
            let matches;
            for (const chunk of chunks) {
                const number = Number(chunk);
                if (!Number.isNaN(number)) {
                    results.push(number);
                } else if ((matches = chunk.match(STRING_REGEX))) {
                    results.push(
                        matches[2].replace(ESCAPE_REGEX, (m2, escape2, character) =>
                            escape2 ? unescape2(escape2) : character,
                        ),
                    );
                } else {
                    throw new Error(
                        `Invalid Chalk template style argument: ${chunk} (in style '${name}')`,
                    );
                }
            }
            return results;
        }
        function parseStyle(style) {
            STYLE_REGEX.lastIndex = 0;
            const results = [];
            let matches;
            while ((matches = STYLE_REGEX.exec(style)) !== null) {
                const name = matches[1];
                if (matches[2]) {
                    const args = parseArguments(name, matches[2]);
                    results.push([name].concat(args));
                } else {
                    results.push([name]);
                }
            }
            return results;
        }
        function buildStyle(chalk, styles) {
            const enabled2 = {};
            for (const layer of styles) {
                for (const style of layer.styles) {
                    enabled2[style[0]] = layer.inverse ? null : style.slice(1);
                }
            }
            let current = chalk;
            for (const [styleName, styles2] of Object.entries(enabled2)) {
                if (!Array.isArray(styles2)) {
                    continue;
                }
                if (!(styleName in current)) {
                    throw new Error(`Unknown Chalk style: ${styleName}`);
                }
                current = styles2.length > 0 ? current[styleName](...styles2) : current[styleName];
            }
            return current;
        }
        module2.exports = (chalk, temporary) => {
            const styles = [];
            const chunks = [];
            let chunk = [];
            temporary.replace(
                TEMPLATE_REGEX,
                (m2, escapeCharacter, inverse2, style, close, character) => {
                    if (escapeCharacter) {
                        chunk.push(unescape2(escapeCharacter));
                    } else if (style) {
                        const string = chunk.join('');
                        chunk = [];
                        chunks.push(
                            styles.length === 0 ? string : buildStyle(chalk, styles)(string),
                        );
                        styles.push({ inverse: inverse2, styles: parseStyle(style) });
                    } else if (close) {
                        if (styles.length === 0) {
                            throw new Error('Found extraneous } in Chalk template literal');
                        }
                        chunks.push(buildStyle(chalk, styles)(chunk.join('')));
                        chunk = [];
                        styles.pop();
                    } else {
                        chunk.push(character);
                    }
                },
            );
            chunks.push(chunk.join(''));
            if (styles.length > 0) {
                const errMessage = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? '' : 's'} (\`}\`)`;
                throw new Error(errMessage);
            }
            return chunks.join('');
        };
    },
});

// node_modules/gradient-string/node_modules/chalk/source/index.js
var require_source = __commonJS({
    'node_modules/gradient-string/node_modules/chalk/source/index.js'(exports2, module2) {
        'use strict';
        var ansiStyles = require_ansi_styles();
        var { stdout: stdoutColor, stderr: stderrColor } = require_supports_color();
        var { stringReplaceAll, stringEncaseCRLFWithFirstIndex } = require_util3();
        var { isArray } = Array;
        var levelMapping = ['ansi', 'ansi', 'ansi256', 'ansi16m'];
        var styles = /* @__PURE__ */ Object.create(null);
        var applyOptions = (object, options2 = {}) => {
            if (
                options2.level &&
                !(Number.isInteger(options2.level) && options2.level >= 0 && options2.level <= 3)
            ) {
                throw new Error('The `level` option should be an integer from 0 to 3');
            }
            const colorLevel = stdoutColor ? stdoutColor.level : 0;
            object.level = options2.level === void 0 ? colorLevel : options2.level;
        };
        var ChalkClass = class {
            constructor(options2) {
                return chalkFactory(options2);
            }
        };
        var chalkFactory = (options2) => {
            const chalk2 = {};
            applyOptions(chalk2, options2);
            chalk2.template = (...arguments_) => chalkTag(chalk2.template, ...arguments_);
            Object.setPrototypeOf(chalk2, Chalk.prototype);
            Object.setPrototypeOf(chalk2.template, chalk2);
            chalk2.template.constructor = () => {
                throw new Error(
                    '`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.',
                );
            };
            chalk2.template.Instance = ChalkClass;
            return chalk2.template;
        };
        function Chalk(options2) {
            return chalkFactory(options2);
        }
        for (const [styleName, style] of Object.entries(ansiStyles)) {
            styles[styleName] = {
                get() {
                    const builder = createBuilder(
                        this,
                        createStyler(style.open, style.close, this._styler),
                        this._isEmpty,
                    );
                    Object.defineProperty(this, styleName, { value: builder });
                    return builder;
                },
            };
        }
        styles.visible = {
            get() {
                const builder = createBuilder(this, this._styler, true);
                Object.defineProperty(this, 'visible', { value: builder });
                return builder;
            },
        };
        var usedModels = ['rgb', 'hex', 'keyword', 'hsl', 'hsv', 'hwb', 'ansi', 'ansi256'];
        for (const model of usedModels) {
            styles[model] = {
                get() {
                    const { level } = this;
                    return function (...arguments_) {
                        const styler = createStyler(
                            ansiStyles.color[levelMapping[level]][model](...arguments_),
                            ansiStyles.color.close,
                            this._styler,
                        );
                        return createBuilder(this, styler, this._isEmpty);
                    };
                },
            };
        }
        for (const model of usedModels) {
            const bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);
            styles[bgModel] = {
                get() {
                    const { level } = this;
                    return function (...arguments_) {
                        const styler = createStyler(
                            ansiStyles.bgColor[levelMapping[level]][model](...arguments_),
                            ansiStyles.bgColor.close,
                            this._styler,
                        );
                        return createBuilder(this, styler, this._isEmpty);
                    };
                },
            };
        }
        var proto = Object.defineProperties(() => {}, {
            ...styles,
            level: {
                enumerable: true,
                get() {
                    return this._generator.level;
                },
                set(level) {
                    this._generator.level = level;
                },
            },
        });
        var createStyler = (open, close, parent2) => {
            let openAll;
            let closeAll;
            if (parent2 === void 0) {
                openAll = open;
                closeAll = close;
            } else {
                openAll = parent2.openAll + open;
                closeAll = close + parent2.closeAll;
            }
            return {
                open,
                close,
                openAll,
                closeAll,
                parent: parent2,
            };
        };
        var createBuilder = (self2, _styler, _isEmpty) => {
            const builder = (...arguments_) => {
                if (isArray(arguments_[0]) && isArray(arguments_[0].raw)) {
                    return applyStyle(builder, chalkTag(builder, ...arguments_));
                }
                return applyStyle(
                    builder,
                    arguments_.length === 1 ? '' + arguments_[0] : arguments_.join(' '),
                );
            };
            Object.setPrototypeOf(builder, proto);
            builder._generator = self2;
            builder._styler = _styler;
            builder._isEmpty = _isEmpty;
            return builder;
        };
        var applyStyle = (self2, string) => {
            if (self2.level <= 0 || !string) {
                return self2._isEmpty ? '' : string;
            }
            let styler = self2._styler;
            if (styler === void 0) {
                return string;
            }
            const { openAll, closeAll } = styler;
            if (string.indexOf('\x1B') !== -1) {
                while (styler !== void 0) {
                    string = stringReplaceAll(string, styler.close, styler.open);
                    styler = styler.parent;
                }
            }
            const lfIndex = string.indexOf('\n');
            if (lfIndex !== -1) {
                string = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);
            }
            return openAll + string + closeAll;
        };
        var template;
        var chalkTag = (chalk2, ...strings) => {
            const [firstString] = strings;
            if (!isArray(firstString) || !isArray(firstString.raw)) {
                return strings.join(' ');
            }
            const arguments_ = strings.slice(1);
            const parts = [firstString.raw[0]];
            for (let i2 = 1; i2 < firstString.length; i2++) {
                parts.push(
                    String(arguments_[i2 - 1]).replace(/[{}\\]/g, '\\$&'),
                    String(firstString.raw[i2]),
                );
            }
            if (template === void 0) {
                template = require_templates();
            }
            return template(chalk2, parts.join(''));
        };
        Object.defineProperties(Chalk.prototype, styles);
        var chalk = Chalk();
        chalk.supportsColor = stdoutColor;
        chalk.stderr = Chalk({ level: stderrColor ? stderrColor.level : 0 });
        chalk.stderr.supportsColor = stderrColor;
        module2.exports = chalk;
    },
});

// node_modules/tinycolor2/cjs/tinycolor.js
var require_tinycolor = __commonJS({
    'node_modules/tinycolor2/cjs/tinycolor.js'(exports2, module2) {
        (function (global3, factory) {
            typeof exports2 === 'object' && typeof module2 !== 'undefined'
                ? (module2.exports = factory())
                : typeof define === 'function' && define.amd
                  ? define(factory)
                  : ((global3 = typeof globalThis !== 'undefined' ? globalThis : global3 || self),
                    (global3.tinycolor = factory()));
        })(exports2, function () {
            'use strict';
            function _typeof(obj) {
                '@babel/helpers - typeof';
                return (
                    (_typeof =
                        'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
                            ? function (obj2) {
                                  return typeof obj2;
                              }
                            : function (obj2) {
                                  return obj2 &&
                                      'function' == typeof Symbol &&
                                      obj2.constructor === Symbol &&
                                      obj2 !== Symbol.prototype
                                      ? 'symbol'
                                      : typeof obj2;
                              }),
                    _typeof(obj)
                );
            }
            var trimLeft = /^\s+/;
            var trimRight = /\s+$/;
            function tinycolor(color, opts) {
                color = color ? color : '';
                opts = opts || {};
                if (color instanceof tinycolor) {
                    return color;
                }
                if (!(this instanceof tinycolor)) {
                    return new tinycolor(color, opts);
                }
                var rgb = inputToRGB(color);
                (this._originalInput = color),
                    (this._r = rgb.r),
                    (this._g = rgb.g),
                    (this._b = rgb.b),
                    (this._a = rgb.a),
                    (this._roundA = Math.round(100 * this._a) / 100),
                    (this._format = opts.format || rgb.format);
                this._gradientType = opts.gradientType;
                if (this._r < 1) this._r = Math.round(this._r);
                if (this._g < 1) this._g = Math.round(this._g);
                if (this._b < 1) this._b = Math.round(this._b);
                this._ok = rgb.ok;
            }
            tinycolor.prototype = {
                isDark: function isDark() {
                    return this.getBrightness() < 128;
                },
                isLight: function isLight() {
                    return !this.isDark();
                },
                isValid: function isValid() {
                    return this._ok;
                },
                getOriginalInput: function getOriginalInput() {
                    return this._originalInput;
                },
                getFormat: function getFormat() {
                    return this._format;
                },
                getAlpha: function getAlpha() {
                    return this._a;
                },
                getBrightness: function getBrightness() {
                    var rgb = this.toRgb();
                    return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1e3;
                },
                getLuminance: function getLuminance() {
                    var rgb = this.toRgb();
                    var RsRGB, GsRGB, BsRGB, R, G, B;
                    RsRGB = rgb.r / 255;
                    GsRGB = rgb.g / 255;
                    BsRGB = rgb.b / 255;
                    if (RsRGB <= 0.03928) R = RsRGB / 12.92;
                    else R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
                    if (GsRGB <= 0.03928) G = GsRGB / 12.92;
                    else G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
                    if (BsRGB <= 0.03928) B = BsRGB / 12.92;
                    else B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
                    return 0.2126 * R + 0.7152 * G + 0.0722 * B;
                },
                setAlpha: function setAlpha(value) {
                    this._a = boundAlpha(value);
                    this._roundA = Math.round(100 * this._a) / 100;
                    return this;
                },
                toHsv: function toHsv() {
                    var hsv = rgbToHsv(this._r, this._g, this._b);
                    return {
                        h: hsv.h * 360,
                        s: hsv.s,
                        v: hsv.v,
                        a: this._a,
                    };
                },
                toHsvString: function toHsvString() {
                    var hsv = rgbToHsv(this._r, this._g, this._b);
                    var h2 = Math.round(hsv.h * 360),
                        s2 = Math.round(hsv.s * 100),
                        v = Math.round(hsv.v * 100);
                    return this._a == 1
                        ? 'hsv(' + h2 + ', ' + s2 + '%, ' + v + '%)'
                        : 'hsva(' + h2 + ', ' + s2 + '%, ' + v + '%, ' + this._roundA + ')';
                },
                toHsl: function toHsl() {
                    var hsl = rgbToHsl(this._r, this._g, this._b);
                    return {
                        h: hsl.h * 360,
                        s: hsl.s,
                        l: hsl.l,
                        a: this._a,
                    };
                },
                toHslString: function toHslString() {
                    var hsl = rgbToHsl(this._r, this._g, this._b);
                    var h2 = Math.round(hsl.h * 360),
                        s2 = Math.round(hsl.s * 100),
                        l = Math.round(hsl.l * 100);
                    return this._a == 1
                        ? 'hsl(' + h2 + ', ' + s2 + '%, ' + l + '%)'
                        : 'hsla(' + h2 + ', ' + s2 + '%, ' + l + '%, ' + this._roundA + ')';
                },
                toHex: function toHex(allow3Char) {
                    return rgbToHex(this._r, this._g, this._b, allow3Char);
                },
                toHexString: function toHexString(allow3Char) {
                    return '#' + this.toHex(allow3Char);
                },
                toHex8: function toHex8(allow4Char) {
                    return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
                },
                toHex8String: function toHex8String(allow4Char) {
                    return '#' + this.toHex8(allow4Char);
                },
                toRgb: function toRgb() {
                    return {
                        r: Math.round(this._r),
                        g: Math.round(this._g),
                        b: Math.round(this._b),
                        a: this._a,
                    };
                },
                toRgbString: function toRgbString() {
                    return this._a == 1
                        ? 'rgb(' +
                              Math.round(this._r) +
                              ', ' +
                              Math.round(this._g) +
                              ', ' +
                              Math.round(this._b) +
                              ')'
                        : 'rgba(' +
                              Math.round(this._r) +
                              ', ' +
                              Math.round(this._g) +
                              ', ' +
                              Math.round(this._b) +
                              ', ' +
                              this._roundA +
                              ')';
                },
                toPercentageRgb: function toPercentageRgb() {
                    return {
                        r: Math.round(bound01(this._r, 255) * 100) + '%',
                        g: Math.round(bound01(this._g, 255) * 100) + '%',
                        b: Math.round(bound01(this._b, 255) * 100) + '%',
                        a: this._a,
                    };
                },
                toPercentageRgbString: function toPercentageRgbString() {
                    return this._a == 1
                        ? 'rgb(' +
                              Math.round(bound01(this._r, 255) * 100) +
                              '%, ' +
                              Math.round(bound01(this._g, 255) * 100) +
                              '%, ' +
                              Math.round(bound01(this._b, 255) * 100) +
                              '%)'
                        : 'rgba(' +
                              Math.round(bound01(this._r, 255) * 100) +
                              '%, ' +
                              Math.round(bound01(this._g, 255) * 100) +
                              '%, ' +
                              Math.round(bound01(this._b, 255) * 100) +
                              '%, ' +
                              this._roundA +
                              ')';
                },
                toName: function toName() {
                    if (this._a === 0) {
                        return 'transparent';
                    }
                    if (this._a < 1) {
                        return false;
                    }
                    return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
                },
                toFilter: function toFilter(secondColor) {
                    var hex8String = '#' + rgbaToArgbHex(this._r, this._g, this._b, this._a);
                    var secondHex8String = hex8String;
                    var gradientType = this._gradientType ? 'GradientType = 1, ' : '';
                    if (secondColor) {
                        var s2 = tinycolor(secondColor);
                        secondHex8String = '#' + rgbaToArgbHex(s2._r, s2._g, s2._b, s2._a);
                    }
                    return (
                        'progid:DXImageTransform.Microsoft.gradient(' +
                        gradientType +
                        'startColorstr=' +
                        hex8String +
                        ',endColorstr=' +
                        secondHex8String +
                        ')'
                    );
                },
                toString: function toString2(format) {
                    var formatSet = !!format;
                    format = format || this._format;
                    var formattedString = false;
                    var hasAlpha = this._a < 1 && this._a >= 0;
                    var needsAlphaFormat =
                        !formatSet &&
                        hasAlpha &&
                        (format === 'hex' ||
                            format === 'hex6' ||
                            format === 'hex3' ||
                            format === 'hex4' ||
                            format === 'hex8' ||
                            format === 'name');
                    if (needsAlphaFormat) {
                        if (format === 'name' && this._a === 0) {
                            return this.toName();
                        }
                        return this.toRgbString();
                    }
                    if (format === 'rgb') {
                        formattedString = this.toRgbString();
                    }
                    if (format === 'prgb') {
                        formattedString = this.toPercentageRgbString();
                    }
                    if (format === 'hex' || format === 'hex6') {
                        formattedString = this.toHexString();
                    }
                    if (format === 'hex3') {
                        formattedString = this.toHexString(true);
                    }
                    if (format === 'hex4') {
                        formattedString = this.toHex8String(true);
                    }
                    if (format === 'hex8') {
                        formattedString = this.toHex8String();
                    }
                    if (format === 'name') {
                        formattedString = this.toName();
                    }
                    if (format === 'hsl') {
                        formattedString = this.toHslString();
                    }
                    if (format === 'hsv') {
                        formattedString = this.toHsvString();
                    }
                    return formattedString || this.toHexString();
                },
                clone: function clone3() {
                    return tinycolor(this.toString());
                },
                _applyModification: function _applyModification(fn, args) {
                    var color = fn.apply(null, [this].concat([].slice.call(args)));
                    this._r = color._r;
                    this._g = color._g;
                    this._b = color._b;
                    this.setAlpha(color._a);
                    return this;
                },
                lighten: function lighten() {
                    return this._applyModification(_lighten, arguments);
                },
                brighten: function brighten() {
                    return this._applyModification(_brighten, arguments);
                },
                darken: function darken() {
                    return this._applyModification(_darken, arguments);
                },
                desaturate: function desaturate() {
                    return this._applyModification(_desaturate, arguments);
                },
                saturate: function saturate() {
                    return this._applyModification(_saturate, arguments);
                },
                greyscale: function greyscale() {
                    return this._applyModification(_greyscale, arguments);
                },
                spin: function spin() {
                    return this._applyModification(_spin, arguments);
                },
                _applyCombination: function _applyCombination(fn, args) {
                    return fn.apply(null, [this].concat([].slice.call(args)));
                },
                analogous: function analogous() {
                    return this._applyCombination(_analogous, arguments);
                },
                complement: function complement() {
                    return this._applyCombination(_complement, arguments);
                },
                monochromatic: function monochromatic() {
                    return this._applyCombination(_monochromatic, arguments);
                },
                splitcomplement: function splitcomplement() {
                    return this._applyCombination(_splitcomplement, arguments);
                },
                // Disabled until https://github.com/bgrins/TinyColor/issues/254
                // polyad: function (number) {
                //   return this._applyCombination(polyad, [number]);
                // },
                triad: function triad() {
                    return this._applyCombination(polyad, [3]);
                },
                tetrad: function tetrad() {
                    return this._applyCombination(polyad, [4]);
                },
            };
            tinycolor.fromRatio = function (color, opts) {
                if (_typeof(color) == 'object') {
                    var newColor = {};
                    for (var i2 in color) {
                        if (color.hasOwnProperty(i2)) {
                            if (i2 === 'a') {
                                newColor[i2] = color[i2];
                            } else {
                                newColor[i2] = convertToPercentage(color[i2]);
                            }
                        }
                    }
                    color = newColor;
                }
                return tinycolor(color, opts);
            };
            function inputToRGB(color) {
                var rgb = {
                    r: 0,
                    g: 0,
                    b: 0,
                };
                var a = 1;
                var s2 = null;
                var v = null;
                var l = null;
                var ok = false;
                var format = false;
                if (typeof color == 'string') {
                    color = stringInputToObject(color);
                }
                if (_typeof(color) == 'object') {
                    if (
                        isValidCSSUnit(color.r) &&
                        isValidCSSUnit(color.g) &&
                        isValidCSSUnit(color.b)
                    ) {
                        rgb = rgbToRgb(color.r, color.g, color.b);
                        ok = true;
                        format = String(color.r).substr(-1) === '%' ? 'prgb' : 'rgb';
                    } else if (
                        isValidCSSUnit(color.h) &&
                        isValidCSSUnit(color.s) &&
                        isValidCSSUnit(color.v)
                    ) {
                        s2 = convertToPercentage(color.s);
                        v = convertToPercentage(color.v);
                        rgb = hsvToRgb(color.h, s2, v);
                        ok = true;
                        format = 'hsv';
                    } else if (
                        isValidCSSUnit(color.h) &&
                        isValidCSSUnit(color.s) &&
                        isValidCSSUnit(color.l)
                    ) {
                        s2 = convertToPercentage(color.s);
                        l = convertToPercentage(color.l);
                        rgb = hslToRgb(color.h, s2, l);
                        ok = true;
                        format = 'hsl';
                    }
                    if (color.hasOwnProperty('a')) {
                        a = color.a;
                    }
                }
                a = boundAlpha(a);
                return {
                    ok,
                    format: color.format || format,
                    r: Math.min(255, Math.max(rgb.r, 0)),
                    g: Math.min(255, Math.max(rgb.g, 0)),
                    b: Math.min(255, Math.max(rgb.b, 0)),
                    a,
                };
            }
            function rgbToRgb(r2, g, b) {
                return {
                    r: bound01(r2, 255) * 255,
                    g: bound01(g, 255) * 255,
                    b: bound01(b, 255) * 255,
                };
            }
            function rgbToHsl(r2, g, b) {
                r2 = bound01(r2, 255);
                g = bound01(g, 255);
                b = bound01(b, 255);
                var max = Math.max(r2, g, b),
                    min = Math.min(r2, g, b);
                var h2,
                    s2,
                    l = (max + min) / 2;
                if (max == min) {
                    h2 = s2 = 0;
                } else {
                    var d = max - min;
                    s2 = l > 0.5 ? d / (2 - max - min) : d / (max + min);
                    switch (max) {
                        case r2:
                            h2 = (g - b) / d + (g < b ? 6 : 0);
                            break;
                        case g:
                            h2 = (b - r2) / d + 2;
                            break;
                        case b:
                            h2 = (r2 - g) / d + 4;
                            break;
                    }
                    h2 /= 6;
                }
                return {
                    h: h2,
                    s: s2,
                    l,
                };
            }
            function hslToRgb(h2, s2, l) {
                var r2, g, b;
                h2 = bound01(h2, 360);
                s2 = bound01(s2, 100);
                l = bound01(l, 100);
                function hue2rgb(p2, q2, t2) {
                    if (t2 < 0) t2 += 1;
                    if (t2 > 1) t2 -= 1;
                    if (t2 < 1 / 6) return p2 + (q2 - p2) * 6 * t2;
                    if (t2 < 1 / 2) return q2;
                    if (t2 < 2 / 3) return p2 + (q2 - p2) * (2 / 3 - t2) * 6;
                    return p2;
                }
                if (s2 === 0) {
                    r2 = g = b = l;
                } else {
                    var q = l < 0.5 ? l * (1 + s2) : l + s2 - l * s2;
                    var p = 2 * l - q;
                    r2 = hue2rgb(p, q, h2 + 1 / 3);
                    g = hue2rgb(p, q, h2);
                    b = hue2rgb(p, q, h2 - 1 / 3);
                }
                return {
                    r: r2 * 255,
                    g: g * 255,
                    b: b * 255,
                };
            }
            function rgbToHsv(r2, g, b) {
                r2 = bound01(r2, 255);
                g = bound01(g, 255);
                b = bound01(b, 255);
                var max = Math.max(r2, g, b),
                    min = Math.min(r2, g, b);
                var h2,
                    s2,
                    v = max;
                var d = max - min;
                s2 = max === 0 ? 0 : d / max;
                if (max == min) {
                    h2 = 0;
                } else {
                    switch (max) {
                        case r2:
                            h2 = (g - b) / d + (g < b ? 6 : 0);
                            break;
                        case g:
                            h2 = (b - r2) / d + 2;
                            break;
                        case b:
                            h2 = (r2 - g) / d + 4;
                            break;
                    }
                    h2 /= 6;
                }
                return {
                    h: h2,
                    s: s2,
                    v,
                };
            }
            function hsvToRgb(h2, s2, v) {
                h2 = bound01(h2, 360) * 6;
                s2 = bound01(s2, 100);
                v = bound01(v, 100);
                var i2 = Math.floor(h2),
                    f3 = h2 - i2,
                    p = v * (1 - s2),
                    q = v * (1 - f3 * s2),
                    t2 = v * (1 - (1 - f3) * s2),
                    mod = i2 % 6,
                    r2 = [v, q, p, p, t2, v][mod],
                    g = [t2, v, v, q, p, p][mod],
                    b = [p, p, t2, v, v, q][mod];
                return {
                    r: r2 * 255,
                    g: g * 255,
                    b: b * 255,
                };
            }
            function rgbToHex(r2, g, b, allow3Char) {
                var hex = [
                    pad2(Math.round(r2).toString(16)),
                    pad2(Math.round(g).toString(16)),
                    pad2(Math.round(b).toString(16)),
                ];
                if (
                    allow3Char &&
                    hex[0].charAt(0) == hex[0].charAt(1) &&
                    hex[1].charAt(0) == hex[1].charAt(1) &&
                    hex[2].charAt(0) == hex[2].charAt(1)
                ) {
                    return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);
                }
                return hex.join('');
            }
            function rgbaToHex(r2, g, b, a, allow4Char) {
                var hex = [
                    pad2(Math.round(r2).toString(16)),
                    pad2(Math.round(g).toString(16)),
                    pad2(Math.round(b).toString(16)),
                    pad2(convertDecimalToHex(a)),
                ];
                if (
                    allow4Char &&
                    hex[0].charAt(0) == hex[0].charAt(1) &&
                    hex[1].charAt(0) == hex[1].charAt(1) &&
                    hex[2].charAt(0) == hex[2].charAt(1) &&
                    hex[3].charAt(0) == hex[3].charAt(1)
                ) {
                    return (
                        hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0)
                    );
                }
                return hex.join('');
            }
            function rgbaToArgbHex(r2, g, b, a) {
                var hex = [
                    pad2(convertDecimalToHex(a)),
                    pad2(Math.round(r2).toString(16)),
                    pad2(Math.round(g).toString(16)),
                    pad2(Math.round(b).toString(16)),
                ];
                return hex.join('');
            }
            tinycolor.equals = function (color1, color2) {
                if (!color1 || !color2) return false;
                return tinycolor(color1).toRgbString() == tinycolor(color2).toRgbString();
            };
            tinycolor.random = function () {
                return tinycolor.fromRatio({
                    r: Math.random(),
                    g: Math.random(),
                    b: Math.random(),
                });
            };
            function _desaturate(color, amount) {
                amount = amount === 0 ? 0 : amount || 10;
                var hsl = tinycolor(color).toHsl();
                hsl.s -= amount / 100;
                hsl.s = clamp01(hsl.s);
                return tinycolor(hsl);
            }
            function _saturate(color, amount) {
                amount = amount === 0 ? 0 : amount || 10;
                var hsl = tinycolor(color).toHsl();
                hsl.s += amount / 100;
                hsl.s = clamp01(hsl.s);
                return tinycolor(hsl);
            }
            function _greyscale(color) {
                return tinycolor(color).desaturate(100);
            }
            function _lighten(color, amount) {
                amount = amount === 0 ? 0 : amount || 10;
                var hsl = tinycolor(color).toHsl();
                hsl.l += amount / 100;
                hsl.l = clamp01(hsl.l);
                return tinycolor(hsl);
            }
            function _brighten(color, amount) {
                amount = amount === 0 ? 0 : amount || 10;
                var rgb = tinycolor(color).toRgb();
                rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));
                rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));
                rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));
                return tinycolor(rgb);
            }
            function _darken(color, amount) {
                amount = amount === 0 ? 0 : amount || 10;
                var hsl = tinycolor(color).toHsl();
                hsl.l -= amount / 100;
                hsl.l = clamp01(hsl.l);
                return tinycolor(hsl);
            }
            function _spin(color, amount) {
                var hsl = tinycolor(color).toHsl();
                var hue = (hsl.h + amount) % 360;
                hsl.h = hue < 0 ? 360 + hue : hue;
                return tinycolor(hsl);
            }
            function _complement(color) {
                var hsl = tinycolor(color).toHsl();
                hsl.h = (hsl.h + 180) % 360;
                return tinycolor(hsl);
            }
            function polyad(color, number) {
                if (isNaN(number) || number <= 0) {
                    throw new Error('Argument to polyad must be a positive number');
                }
                var hsl = tinycolor(color).toHsl();
                var result = [tinycolor(color)];
                var step = 360 / number;
                for (var i2 = 1; i2 < number; i2++) {
                    result.push(
                        tinycolor({
                            h: (hsl.h + i2 * step) % 360,
                            s: hsl.s,
                            l: hsl.l,
                        }),
                    );
                }
                return result;
            }
            function _splitcomplement(color) {
                var hsl = tinycolor(color).toHsl();
                var h2 = hsl.h;
                return [
                    tinycolor(color),
                    tinycolor({
                        h: (h2 + 72) % 360,
                        s: hsl.s,
                        l: hsl.l,
                    }),
                    tinycolor({
                        h: (h2 + 216) % 360,
                        s: hsl.s,
                        l: hsl.l,
                    }),
                ];
            }
            function _analogous(color, results, slices) {
                results = results || 6;
                slices = slices || 30;
                var hsl = tinycolor(color).toHsl();
                var part = 360 / slices;
                var ret = [tinycolor(color)];
                for (hsl.h = (hsl.h - ((part * results) >> 1) + 720) % 360; --results; ) {
                    hsl.h = (hsl.h + part) % 360;
                    ret.push(tinycolor(hsl));
                }
                return ret;
            }
            function _monochromatic(color, results) {
                results = results || 6;
                var hsv = tinycolor(color).toHsv();
                var h2 = hsv.h,
                    s2 = hsv.s,
                    v = hsv.v;
                var ret = [];
                var modification = 1 / results;
                while (results--) {
                    ret.push(
                        tinycolor({
                            h: h2,
                            s: s2,
                            v,
                        }),
                    );
                    v = (v + modification) % 1;
                }
                return ret;
            }
            tinycolor.mix = function (color1, color2, amount) {
                amount = amount === 0 ? 0 : amount || 50;
                var rgb1 = tinycolor(color1).toRgb();
                var rgb2 = tinycolor(color2).toRgb();
                var p = amount / 100;
                var rgba = {
                    r: (rgb2.r - rgb1.r) * p + rgb1.r,
                    g: (rgb2.g - rgb1.g) * p + rgb1.g,
                    b: (rgb2.b - rgb1.b) * p + rgb1.b,
                    a: (rgb2.a - rgb1.a) * p + rgb1.a,
                };
                return tinycolor(rgba);
            };
            tinycolor.readability = function (color1, color2) {
                var c1 = tinycolor(color1);
                var c2 = tinycolor(color2);
                return (
                    (Math.max(c1.getLuminance(), c2.getLuminance()) + 0.05) /
                    (Math.min(c1.getLuminance(), c2.getLuminance()) + 0.05)
                );
            };
            tinycolor.isReadable = function (color1, color2, wcag2) {
                var readability = tinycolor.readability(color1, color2);
                var wcag2Parms, out;
                out = false;
                wcag2Parms = validateWCAG2Parms(wcag2);
                switch (wcag2Parms.level + wcag2Parms.size) {
                    case 'AAsmall':
                    case 'AAAlarge':
                        out = readability >= 4.5;
                        break;
                    case 'AAlarge':
                        out = readability >= 3;
                        break;
                    case 'AAAsmall':
                        out = readability >= 7;
                        break;
                }
                return out;
            };
            tinycolor.mostReadable = function (baseColor, colorList, args) {
                var bestColor = null;
                var bestScore = 0;
                var readability;
                var includeFallbackColors, level, size;
                args = args || {};
                includeFallbackColors = args.includeFallbackColors;
                level = args.level;
                size = args.size;
                for (var i2 = 0; i2 < colorList.length; i2++) {
                    readability = tinycolor.readability(baseColor, colorList[i2]);
                    if (readability > bestScore) {
                        bestScore = readability;
                        bestColor = tinycolor(colorList[i2]);
                    }
                }
                if (
                    tinycolor.isReadable(baseColor, bestColor, {
                        level,
                        size,
                    }) ||
                    !includeFallbackColors
                ) {
                    return bestColor;
                } else {
                    args.includeFallbackColors = false;
                    return tinycolor.mostReadable(baseColor, ['#fff', '#000'], args);
                }
            };
            var names = (tinycolor.names = {
                aliceblue: 'f0f8ff',
                antiquewhite: 'faebd7',
                aqua: '0ff',
                aquamarine: '7fffd4',
                azure: 'f0ffff',
                beige: 'f5f5dc',
                bisque: 'ffe4c4',
                black: '000',
                blanchedalmond: 'ffebcd',
                blue: '00f',
                blueviolet: '8a2be2',
                brown: 'a52a2a',
                burlywood: 'deb887',
                burntsienna: 'ea7e5d',
                cadetblue: '5f9ea0',
                chartreuse: '7fff00',
                chocolate: 'd2691e',
                coral: 'ff7f50',
                cornflowerblue: '6495ed',
                cornsilk: 'fff8dc',
                crimson: 'dc143c',
                cyan: '0ff',
                darkblue: '00008b',
                darkcyan: '008b8b',
                darkgoldenrod: 'b8860b',
                darkgray: 'a9a9a9',
                darkgreen: '006400',
                darkgrey: 'a9a9a9',
                darkkhaki: 'bdb76b',
                darkmagenta: '8b008b',
                darkolivegreen: '556b2f',
                darkorange: 'ff8c00',
                darkorchid: '9932cc',
                darkred: '8b0000',
                darksalmon: 'e9967a',
                darkseagreen: '8fbc8f',
                darkslateblue: '483d8b',
                darkslategray: '2f4f4f',
                darkslategrey: '2f4f4f',
                darkturquoise: '00ced1',
                darkviolet: '9400d3',
                deeppink: 'ff1493',
                deepskyblue: '00bfff',
                dimgray: '696969',
                dimgrey: '696969',
                dodgerblue: '1e90ff',
                firebrick: 'b22222',
                floralwhite: 'fffaf0',
                forestgreen: '228b22',
                fuchsia: 'f0f',
                gainsboro: 'dcdcdc',
                ghostwhite: 'f8f8ff',
                gold: 'ffd700',
                goldenrod: 'daa520',
                gray: '808080',
                green: '008000',
                greenyellow: 'adff2f',
                grey: '808080',
                honeydew: 'f0fff0',
                hotpink: 'ff69b4',
                indianred: 'cd5c5c',
                indigo: '4b0082',
                ivory: 'fffff0',
                khaki: 'f0e68c',
                lavender: 'e6e6fa',
                lavenderblush: 'fff0f5',
                lawngreen: '7cfc00',
                lemonchiffon: 'fffacd',
                lightblue: 'add8e6',
                lightcoral: 'f08080',
                lightcyan: 'e0ffff',
                lightgoldenrodyellow: 'fafad2',
                lightgray: 'd3d3d3',
                lightgreen: '90ee90',
                lightgrey: 'd3d3d3',
                lightpink: 'ffb6c1',
                lightsalmon: 'ffa07a',
                lightseagreen: '20b2aa',
                lightskyblue: '87cefa',
                lightslategray: '789',
                lightslategrey: '789',
                lightsteelblue: 'b0c4de',
                lightyellow: 'ffffe0',
                lime: '0f0',
                limegreen: '32cd32',
                linen: 'faf0e6',
                magenta: 'f0f',
                maroon: '800000',
                mediumaquamarine: '66cdaa',
                mediumblue: '0000cd',
                mediumorchid: 'ba55d3',
                mediumpurple: '9370db',
                mediumseagreen: '3cb371',
                mediumslateblue: '7b68ee',
                mediumspringgreen: '00fa9a',
                mediumturquoise: '48d1cc',
                mediumvioletred: 'c71585',
                midnightblue: '191970',
                mintcream: 'f5fffa',
                mistyrose: 'ffe4e1',
                moccasin: 'ffe4b5',
                navajowhite: 'ffdead',
                navy: '000080',
                oldlace: 'fdf5e6',
                olive: '808000',
                olivedrab: '6b8e23',
                orange: 'ffa500',
                orangered: 'ff4500',
                orchid: 'da70d6',
                palegoldenrod: 'eee8aa',
                palegreen: '98fb98',
                paleturquoise: 'afeeee',
                palevioletred: 'db7093',
                papayawhip: 'ffefd5',
                peachpuff: 'ffdab9',
                peru: 'cd853f',
                pink: 'ffc0cb',
                plum: 'dda0dd',
                powderblue: 'b0e0e6',
                purple: '800080',
                rebeccapurple: '663399',
                red: 'f00',
                rosybrown: 'bc8f8f',
                royalblue: '4169e1',
                saddlebrown: '8b4513',
                salmon: 'fa8072',
                sandybrown: 'f4a460',
                seagreen: '2e8b57',
                seashell: 'fff5ee',
                sienna: 'a0522d',
                silver: 'c0c0c0',
                skyblue: '87ceeb',
                slateblue: '6a5acd',
                slategray: '708090',
                slategrey: '708090',
                snow: 'fffafa',
                springgreen: '00ff7f',
                steelblue: '4682b4',
                tan: 'd2b48c',
                teal: '008080',
                thistle: 'd8bfd8',
                tomato: 'ff6347',
                turquoise: '40e0d0',
                violet: 'ee82ee',
                wheat: 'f5deb3',
                white: 'fff',
                whitesmoke: 'f5f5f5',
                yellow: 'ff0',
                yellowgreen: '9acd32',
            });
            var hexNames = (tinycolor.hexNames = flip(names));
            function flip(o) {
                var flipped = {};
                for (var i2 in o) {
                    if (o.hasOwnProperty(i2)) {
                        flipped[o[i2]] = i2;
                    }
                }
                return flipped;
            }
            function boundAlpha(a) {
                a = parseFloat(a);
                if (isNaN(a) || a < 0 || a > 1) {
                    a = 1;
                }
                return a;
            }
            function bound01(n, max) {
                if (isOnePointZero(n)) n = '100%';
                var processPercent = isPercentage(n);
                n = Math.min(max, Math.max(0, parseFloat(n)));
                if (processPercent) {
                    n = parseInt(n * max, 10) / 100;
                }
                if (Math.abs(n - max) < 1e-6) {
                    return 1;
                }
                return (n % max) / parseFloat(max);
            }
            function clamp01(val2) {
                return Math.min(1, Math.max(0, val2));
            }
            function parseIntFromHex(val2) {
                return parseInt(val2, 16);
            }
            function isOnePointZero(n) {
                return typeof n == 'string' && n.indexOf('.') != -1 && parseFloat(n) === 1;
            }
            function isPercentage(n) {
                return typeof n === 'string' && n.indexOf('%') != -1;
            }
            function pad2(c) {
                return c.length == 1 ? '0' + c : '' + c;
            }
            function convertToPercentage(n) {
                if (n <= 1) {
                    n = n * 100 + '%';
                }
                return n;
            }
            function convertDecimalToHex(d) {
                return Math.round(parseFloat(d) * 255).toString(16);
            }
            function convertHexToDecimal(h2) {
                return parseIntFromHex(h2) / 255;
            }
            var matchers = (function () {
                var CSS_INTEGER = '[-\\+]?\\d+%?';
                var CSS_NUMBER = '[-\\+]?\\d*\\.\\d+%?';
                var CSS_UNIT = '(?:' + CSS_NUMBER + ')|(?:' + CSS_INTEGER + ')';
                var PERMISSIVE_MATCH3 =
                    '[\\s|\\(]+(' +
                    CSS_UNIT +
                    ')[,|\\s]+(' +
                    CSS_UNIT +
                    ')[,|\\s]+(' +
                    CSS_UNIT +
                    ')\\s*\\)?';
                var PERMISSIVE_MATCH4 =
                    '[\\s|\\(]+(' +
                    CSS_UNIT +
                    ')[,|\\s]+(' +
                    CSS_UNIT +
                    ')[,|\\s]+(' +
                    CSS_UNIT +
                    ')[,|\\s]+(' +
                    CSS_UNIT +
                    ')\\s*\\)?';
                return {
                    CSS_UNIT: new RegExp(CSS_UNIT),
                    rgb: new RegExp('rgb' + PERMISSIVE_MATCH3),
                    rgba: new RegExp('rgba' + PERMISSIVE_MATCH4),
                    hsl: new RegExp('hsl' + PERMISSIVE_MATCH3),
                    hsla: new RegExp('hsla' + PERMISSIVE_MATCH4),
                    hsv: new RegExp('hsv' + PERMISSIVE_MATCH3),
                    hsva: new RegExp('hsva' + PERMISSIVE_MATCH4),
                    hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
                    hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
                    hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
                    hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
                };
            })();
            function isValidCSSUnit(color) {
                return !!matchers.CSS_UNIT.exec(color);
            }
            function stringInputToObject(color) {
                color = color.replace(trimLeft, '').replace(trimRight, '').toLowerCase();
                var named = false;
                if (names[color]) {
                    color = names[color];
                    named = true;
                } else if (color == 'transparent') {
                    return {
                        r: 0,
                        g: 0,
                        b: 0,
                        a: 0,
                        format: 'name',
                    };
                }
                var match;
                if ((match = matchers.rgb.exec(color))) {
                    return {
                        r: match[1],
                        g: match[2],
                        b: match[3],
                    };
                }
                if ((match = matchers.rgba.exec(color))) {
                    return {
                        r: match[1],
                        g: match[2],
                        b: match[3],
                        a: match[4],
                    };
                }
                if ((match = matchers.hsl.exec(color))) {
                    return {
                        h: match[1],
                        s: match[2],
                        l: match[3],
                    };
                }
                if ((match = matchers.hsla.exec(color))) {
                    return {
                        h: match[1],
                        s: match[2],
                        l: match[3],
                        a: match[4],
                    };
                }
                if ((match = matchers.hsv.exec(color))) {
                    return {
                        h: match[1],
                        s: match[2],
                        v: match[3],
                    };
                }
                if ((match = matchers.hsva.exec(color))) {
                    return {
                        h: match[1],
                        s: match[2],
                        v: match[3],
                        a: match[4],
                    };
                }
                if ((match = matchers.hex8.exec(color))) {
                    return {
                        r: parseIntFromHex(match[1]),
                        g: parseIntFromHex(match[2]),
                        b: parseIntFromHex(match[3]),
                        a: convertHexToDecimal(match[4]),
                        format: named ? 'name' : 'hex8',
                    };
                }
                if ((match = matchers.hex6.exec(color))) {
                    return {
                        r: parseIntFromHex(match[1]),
                        g: parseIntFromHex(match[2]),
                        b: parseIntFromHex(match[3]),
                        format: named ? 'name' : 'hex',
                    };
                }
                if ((match = matchers.hex4.exec(color))) {
                    return {
                        r: parseIntFromHex(match[1] + '' + match[1]),
                        g: parseIntFromHex(match[2] + '' + match[2]),
                        b: parseIntFromHex(match[3] + '' + match[3]),
                        a: convertHexToDecimal(match[4] + '' + match[4]),
                        format: named ? 'name' : 'hex8',
                    };
                }
                if ((match = matchers.hex3.exec(color))) {
                    return {
                        r: parseIntFromHex(match[1] + '' + match[1]),
                        g: parseIntFromHex(match[2] + '' + match[2]),
                        b: parseIntFromHex(match[3] + '' + match[3]),
                        format: named ? 'name' : 'hex',
                    };
                }
                return false;
            }
            function validateWCAG2Parms(parms) {
                var level, size;
                parms = parms || {
                    level: 'AA',
                    size: 'small',
                };
                level = (parms.level || 'AA').toUpperCase();
                size = (parms.size || 'small').toLowerCase();
                if (level !== 'AA' && level !== 'AAA') {
                    level = 'AA';
                }
                if (size !== 'small' && size !== 'large') {
                    size = 'small';
                }
                return {
                    level,
                    size,
                };
            }
            return tinycolor;
        });
    },
});

// node_modules/tinygradient/index.js
var require_tinygradient = __commonJS({
    'node_modules/tinygradient/index.js'(exports2, module2) {
        var tinycolor = require_tinycolor();
        var RGBA_MAX = { r: 256, g: 256, b: 256, a: 1 };
        var HSVA_MAX = { h: 360, s: 1, v: 1, a: 1 };
        function stepize(start, end2, steps) {
            let step = {};
            for (let k in start) {
                if (start.hasOwnProperty(k)) {
                    step[k] = steps === 0 ? 0 : (end2[k] - start[k]) / steps;
                }
            }
            return step;
        }
        function interpolate(step, start, i2, max) {
            let color = {};
            for (let k in start) {
                if (start.hasOwnProperty(k)) {
                    color[k] = step[k] * i2 + start[k];
                    color[k] =
                        color[k] < 0
                            ? color[k] + max[k]
                            : max[k] !== 1
                              ? color[k] % max[k]
                              : color[k];
                }
            }
            return color;
        }
        function interpolateRgb(stop1, stop2, steps) {
            const start = stop1.color.toRgb();
            const end2 = stop2.color.toRgb();
            const step = stepize(start, end2, steps);
            let gradient2 = [stop1.color];
            for (let i2 = 1; i2 < steps; i2++) {
                const color = interpolate(step, start, i2, RGBA_MAX);
                gradient2.push(tinycolor(color));
            }
            return gradient2;
        }
        function interpolateHsv(stop1, stop2, steps, mode) {
            const start = stop1.color.toHsv();
            const end2 = stop2.color.toHsv();
            if (start.s === 0 || end2.s === 0) {
                return interpolateRgb(stop1, stop2, steps);
            }
            let trigonometric;
            if (typeof mode === 'boolean') {
                trigonometric = mode;
            } else {
                const trigShortest =
                    (start.h < end2.h && end2.h - start.h < 180) ||
                    (start.h > end2.h && start.h - end2.h > 180);
                trigonometric =
                    (mode === 'long' && trigShortest) || (mode === 'short' && !trigShortest);
            }
            const step = stepize(start, end2, steps);
            let gradient2 = [stop1.color];
            let diff;
            if ((start.h <= end2.h && !trigonometric) || (start.h >= end2.h && trigonometric)) {
                diff = end2.h - start.h;
            } else if (trigonometric) {
                diff = 360 - end2.h + start.h;
            } else {
                diff = 360 - start.h + end2.h;
            }
            step.h = (Math.pow(-1, trigonometric ? 1 : 0) * Math.abs(diff)) / steps;
            for (let i2 = 1; i2 < steps; i2++) {
                const color = interpolate(step, start, i2, HSVA_MAX);
                gradient2.push(tinycolor(color));
            }
            return gradient2;
        }
        function computeSubsteps(stops, steps) {
            const l = stops.length;
            steps = parseInt(steps, 10);
            if (isNaN(steps) || steps < 2) {
                throw new Error('Invalid number of steps (< 2)');
            }
            if (steps < l) {
                throw new Error('Number of steps cannot be inferior to number of stops');
            }
            let substeps = [];
            for (let i2 = 1; i2 < l; i2++) {
                const step = (steps - 1) * (stops[i2].pos - stops[i2 - 1].pos);
                substeps.push(Math.max(1, Math.round(step)));
            }
            let totalSubsteps = 1;
            for (let n = l - 1; n--; ) totalSubsteps += substeps[n];
            while (totalSubsteps !== steps) {
                if (totalSubsteps < steps) {
                    const min = Math.min.apply(null, substeps);
                    substeps[substeps.indexOf(min)]++;
                    totalSubsteps++;
                } else {
                    const max = Math.max.apply(null, substeps);
                    substeps[substeps.indexOf(max)]--;
                    totalSubsteps--;
                }
            }
            return substeps;
        }
        function computeAt(stops, pos, method, max) {
            if (pos < 0 || pos > 1) {
                throw new Error('Position must be between 0 and 1');
            }
            let start, end2;
            for (let i2 = 0, l = stops.length; i2 < l - 1; i2++) {
                if (pos >= stops[i2].pos && pos < stops[i2 + 1].pos) {
                    start = stops[i2];
                    end2 = stops[i2 + 1];
                    break;
                }
            }
            if (!start) {
                start = end2 = stops[stops.length - 1];
            }
            const step = stepize(
                start.color[method](),
                end2.color[method](),
                (end2.pos - start.pos) * 100,
            );
            const color = interpolate(step, start.color[method](), (pos - start.pos) * 100, max);
            return tinycolor(color);
        }
        var TinyGradient = class _TinyGradient {
            /**
             * @param {StopInput[]|ColorInput[]} stops
             * @returns {TinyGradient}
             */
            constructor(stops) {
                if (stops.length < 2) {
                    throw new Error('Invalid number of stops (< 2)');
                }
                const havingPositions = stops[0].pos !== void 0;
                let l = stops.length;
                let p = -1;
                let lastColorLess = false;
                this.stops = stops.map((stop, i2) => {
                    const hasPosition = stop.pos !== void 0;
                    if (havingPositions ^ hasPosition) {
                        throw new Error('Cannot mix positionned and not posionned color stops');
                    }
                    if (hasPosition) {
                        const hasColor = stop.color !== void 0;
                        if (!hasColor && (lastColorLess || i2 === 0 || i2 === l - 1)) {
                            throw new Error('Cannot define two consecutive position-only stops');
                        }
                        lastColorLess = !hasColor;
                        stop = {
                            color: hasColor ? tinycolor(stop.color) : null,
                            colorLess: !hasColor,
                            pos: stop.pos,
                        };
                        if (stop.pos < 0 || stop.pos > 1) {
                            throw new Error('Color stops positions must be between 0 and 1');
                        } else if (stop.pos < p) {
                            throw new Error('Color stops positions are not ordered');
                        }
                        p = stop.pos;
                    } else {
                        stop = {
                            color: tinycolor(stop.color !== void 0 ? stop.color : stop),
                            pos: i2 / (l - 1),
                        };
                    }
                    return stop;
                });
                if (this.stops[0].pos !== 0) {
                    this.stops.unshift({
                        color: this.stops[0].color,
                        pos: 0,
                    });
                    l++;
                }
                if (this.stops[l - 1].pos !== 1) {
                    this.stops.push({
                        color: this.stops[l - 1].color,
                        pos: 1,
                    });
                }
            }
            /**
             * Return new instance with reversed stops
             * @return {TinyGradient}
             */
            reverse() {
                let stops = [];
                this.stops.forEach(function (stop) {
                    stops.push({
                        color: stop.color,
                        pos: 1 - stop.pos,
                    });
                });
                return new _TinyGradient(stops.reverse());
            }
            /**
             * Return new instance with looped stops
             * @return {TinyGradient}
             */
            loop() {
                let stops1 = [];
                let stops2 = [];
                this.stops.forEach((stop) => {
                    stops1.push({
                        color: stop.color,
                        pos: stop.pos / 2,
                    });
                });
                this.stops.slice(0, -1).forEach((stop) => {
                    stops2.push({
                        color: stop.color,
                        pos: 1 - stop.pos / 2,
                    });
                });
                return new _TinyGradient(stops1.concat(stops2.reverse()));
            }
            /**
             * Generate gradient with RGBa interpolation
             * @param {number} steps
             * @return {tinycolor[]}
             */
            rgb(steps) {
                const substeps = computeSubsteps(this.stops, steps);
                let gradient2 = [];
                this.stops.forEach((stop, i2) => {
                    if (stop.colorLess) {
                        stop.color = interpolateRgb(this.stops[i2 - 1], this.stops[i2 + 1], 2)[1];
                    }
                });
                for (let i2 = 0, l = this.stops.length; i2 < l - 1; i2++) {
                    const rgb = interpolateRgb(this.stops[i2], this.stops[i2 + 1], substeps[i2]);
                    gradient2.splice(gradient2.length, 0, ...rgb);
                }
                gradient2.push(this.stops[this.stops.length - 1].color);
                return gradient2;
            }
            /**
             * Generate gradient with HSVa interpolation
             * @param {number} steps
             * @param {boolean|'long'|'short'} [mode=false]
             *    - false to step in clockwise
             *    - true to step in trigonometric order
             *    - 'short' to use the shortest way
             *    - 'long' to use the longest way
             * @return {tinycolor[]}
             */
            hsv(steps, mode) {
                const substeps = computeSubsteps(this.stops, steps);
                let gradient2 = [];
                this.stops.forEach((stop, i2) => {
                    if (stop.colorLess) {
                        stop.color = interpolateHsv(
                            this.stops[i2 - 1],
                            this.stops[i2 + 1],
                            2,
                            mode,
                        )[1];
                    }
                });
                for (let i2 = 0, l = this.stops.length; i2 < l - 1; i2++) {
                    const hsv = interpolateHsv(
                        this.stops[i2],
                        this.stops[i2 + 1],
                        substeps[i2],
                        mode,
                    );
                    gradient2.splice(gradient2.length, 0, ...hsv);
                }
                gradient2.push(this.stops[this.stops.length - 1].color);
                return gradient2;
            }
            /**
             * Generate CSS3 command (no prefix) for this gradient
             * @param {String} [mode=linear] - 'linear' or 'radial'
             * @param {String} [direction] - default is 'to right' or 'ellipse at center'
             * @return {String}
             */
            css(mode, direction) {
                mode = mode || 'linear';
                direction = direction || (mode === 'linear' ? 'to right' : 'ellipse at center');
                let css2 = mode + '-gradient(' + direction;
                this.stops.forEach(function (stop) {
                    css2 +=
                        ', ' +
                        (stop.colorLess ? '' : stop.color.toRgbString() + ' ') +
                        stop.pos * 100 +
                        '%';
                });
                css2 += ')';
                return css2;
            }
            /**
             * Returns the color at specific position with RGBa interpolation
             * @param {number} pos, between 0 and 1
             * @return {tinycolor}
             */
            rgbAt(pos) {
                return computeAt(this.stops, pos, 'toRgb', RGBA_MAX);
            }
            /**
             * Returns the color at specific position with HSVa interpolation
             * @param {number} pos, between 0 and 1
             * @return {tinycolor}
             */
            hsvAt(pos) {
                return computeAt(this.stops, pos, 'toHsv', HSVA_MAX);
            }
        };
        module2.exports = function (stops) {
            if (arguments.length === 1) {
                if (!Array.isArray(arguments[0])) {
                    throw new Error('"stops" is not an array');
                }
                stops = arguments[0];
            } else {
                stops = Array.prototype.slice.call(arguments);
            }
            return new TinyGradient(stops);
        };
    },
});

// node_modules/gradient-string/index.js
var require_gradient_string = __commonJS({
    'node_modules/gradient-string/index.js'(exports2, module2) {
        'use strict';
        var chalk = require_source();
        var tinygradient = require_tinygradient();
        var forbiddenChars = /\s/g;
        function InitGradient(...args) {
            const grad = tinygradient.apply(this, args);
            const ret = (str, opts) => applyGradient(str ? str.toString() : '', grad, opts);
            ret.multiline = (str, opts) => multilineGradient(str ? str.toString() : '', grad, opts);
            return ret;
        }
        var getColors = (gradient2, options2, count) =>
            options2.interpolation.toLowerCase() === 'hsv'
                ? gradient2.hsv(count, options2.hsvSpin.toLowerCase())
                : gradient2.rgb(count);
        function applyGradient(str, gradient2, opts) {
            const options2 = validateOptions(opts);
            const colorsCount = Math.max(
                str.replace(forbiddenChars, '').length,
                gradient2.stops.length,
            );
            const colors = getColors(gradient2, options2, colorsCount);
            let result = '';
            for (const s2 of str) {
                result += s2.match(forbiddenChars) ? s2 : chalk.hex(colors.shift().toHex())(s2);
            }
            return result;
        }
        function multilineGradient(str, gradient2, opts) {
            const options2 = validateOptions(opts);
            const lines = str.split('\n');
            const maxLength = Math.max.apply(
                null,
                lines.map((l) => l.length).concat([gradient2.stops.length]),
            );
            const colors = getColors(gradient2, options2, maxLength);
            const results = [];
            for (const line of lines) {
                const lineColors = colors.slice(0);
                let lineResult = '';
                for (const l of line) {
                    lineResult += chalk.hex(lineColors.shift().toHex())(l);
                }
                results.push(lineResult);
            }
            return results.join('\n');
        }
        function validateOptions(opts) {
            const options2 = { interpolation: 'rgb', hsvSpin: 'short', ...opts };
            if (opts !== void 0 && typeof opts !== 'object') {
                throw new TypeError(
                    `Expected \`options\` to be an \`object\`, got \`${typeof opts}\``,
                );
            }
            if (typeof options2.interpolation !== 'string') {
                throw new TypeError(
                    `Expected \`options.interpolation\` to be a \`string\`, got \`${typeof options2.interpolation}\``,
                );
            }
            if (
                options2.interpolation.toLowerCase() === 'hsv' &&
                typeof options2.hsvSpin !== 'string'
            ) {
                throw new TypeError(
                    `Expected \`options.hsvSpin\` to be a \`string\`, got \`${typeof options2.hsvSpin}\``,
                );
            }
            return options2;
        }
        var aliases3 = {
            atlas: { colors: ['#feac5e', '#c779d0', '#4bc0c8'], options: {} },
            cristal: { colors: ['#bdfff3', '#4ac29a'], options: {} },
            teen: { colors: ['#77a1d3', '#79cbca', '#e684ae'], options: {} },
            mind: { colors: ['#473b7b', '#3584a7', '#30d2be'], options: {} },
            morning: { colors: ['#ff5f6d', '#ffc371'], options: { interpolation: 'hsv' } },
            vice: { colors: ['#5ee7df', '#b490ca'], options: { interpolation: 'hsv' } },
            passion: { colors: ['#f43b47', '#453a94'], options: {} },
            fruit: { colors: ['#ff4e50', '#f9d423'], options: {} },
            instagram: { colors: ['#833ab4', '#fd1d1d', '#fcb045'], options: {} },
            retro: {
                colors: [
                    '#3f51b1',
                    '#5a55ae',
                    '#7b5fac',
                    '#8f6aae',
                    '#a86aa4',
                    '#cc6b8e',
                    '#f18271',
                    '#f3a469',
                    '#f7c978',
                ],
                options: {},
            },
            summer: { colors: ['#fdbb2d', '#22c1c3'], options: {} },
            rainbow: {
                colors: ['#ff0000', '#ff0100'],
                options: { interpolation: 'hsv', hsvSpin: 'long' },
            },
            pastel: {
                colors: ['#74ebd5', '#74ecd5'],
                options: { interpolation: 'hsv', hsvSpin: 'long' },
            },
        };
        module2.exports = InitGradient;
        for (const a in aliases3) {
            module2.exports[a] = (str) =>
                new InitGradient(aliases3[a].colors)(str, aliases3[a].options);
            module2.exports[a].multiline = (str) =>
                new InitGradient(aliases3[a].colors).multiline(str, aliases3[a].options);
        }
    },
});

// node_modules/isexe/windows.js
var require_windows = __commonJS({
    'node_modules/isexe/windows.js'(exports2, module2) {
        module2.exports = isexe;
        isexe.sync = sync;
        var fs3 = require('fs');
        function checkPathExt(path4, options2) {
            var pathext = options2.pathExt !== void 0 ? options2.pathExt : process.env.PATHEXT;
            if (!pathext) {
                return true;
            }
            pathext = pathext.split(';');
            if (pathext.indexOf('') !== -1) {
                return true;
            }
            for (var i2 = 0; i2 < pathext.length; i2++) {
                var p = pathext[i2].toLowerCase();
                if (p && path4.substr(-p.length).toLowerCase() === p) {
                    return true;
                }
            }
            return false;
        }
        function checkStat(stat2, path4, options2) {
            if (!stat2.isSymbolicLink() && !stat2.isFile()) {
                return false;
            }
            return checkPathExt(path4, options2);
        }
        function isexe(path4, options2, cb) {
            fs3.stat(path4, function (er, stat2) {
                cb(er, er ? false : checkStat(stat2, path4, options2));
            });
        }
        function sync(path4, options2) {
            return checkStat(fs3.statSync(path4), path4, options2);
        }
    },
});

// node_modules/isexe/mode.js
var require_mode = __commonJS({
    'node_modules/isexe/mode.js'(exports2, module2) {
        module2.exports = isexe;
        isexe.sync = sync;
        var fs3 = require('fs');
        function isexe(path4, options2, cb) {
            fs3.stat(path4, function (er, stat2) {
                cb(er, er ? false : checkStat(stat2, options2));
            });
        }
        function sync(path4, options2) {
            return checkStat(fs3.statSync(path4), options2);
        }
        function checkStat(stat2, options2) {
            return stat2.isFile() && checkMode(stat2, options2);
        }
        function checkMode(stat2, options2) {
            var mod = stat2.mode;
            var uid = stat2.uid;
            var gid = stat2.gid;
            var myUid = options2.uid !== void 0 ? options2.uid : process.getuid && process.getuid();
            var myGid = options2.gid !== void 0 ? options2.gid : process.getgid && process.getgid();
            var u = parseInt('100', 8);
            var g = parseInt('010', 8);
            var o = parseInt('001', 8);
            var ug = u | g;
            var ret =
                mod & o ||
                (mod & g && gid === myGid) ||
                (mod & u && uid === myUid) ||
                (mod & ug && myUid === 0);
            return ret;
        }
    },
});

// node_modules/isexe/index.js
var require_isexe = __commonJS({
    'node_modules/isexe/index.js'(exports2, module2) {
        var fs3 = require('fs');
        var core;
        if (process.platform === 'win32' || global.TESTING_WINDOWS) {
            core = require_windows();
        } else {
            core = require_mode();
        }
        module2.exports = isexe;
        isexe.sync = sync;
        function isexe(path4, options2, cb) {
            if (typeof options2 === 'function') {
                cb = options2;
                options2 = {};
            }
            if (!cb) {
                if (typeof Promise !== 'function') {
                    throw new TypeError('callback not provided');
                }
                return new Promise(function (resolve, reject) {
                    isexe(path4, options2 || {}, function (er, is4) {
                        if (er) {
                            reject(er);
                        } else {
                            resolve(is4);
                        }
                    });
                });
            }
            core(path4, options2 || {}, function (er, is4) {
                if (er) {
                    if (er.code === 'EACCES' || (options2 && options2.ignoreErrors)) {
                        er = null;
                        is4 = false;
                    }
                }
                cb(er, is4);
            });
        }
        function sync(path4, options2) {
            try {
                return core.sync(path4, options2 || {});
            } catch (er) {
                if ((options2 && options2.ignoreErrors) || er.code === 'EACCES') {
                    return false;
                } else {
                    throw er;
                }
            }
        }
    },
});

// node_modules/cross-spawn/node_modules/which/which.js
var require_which = __commonJS({
    'node_modules/cross-spawn/node_modules/which/which.js'(exports2, module2) {
        var isWindows =
            process.platform === 'win32' ||
            process.env.OSTYPE === 'cygwin' ||
            process.env.OSTYPE === 'msys';
        var path4 = require('path');
        var COLON2 = isWindows ? ';' : ':';
        var isexe = require_isexe();
        var getNotFoundError = (cmd) =>
            Object.assign(new Error(`not found: ${cmd}`), { code: 'ENOENT' });
        var getPathInfo = (cmd, opt) => {
            const colon = opt.colon || COLON2;
            const pathEnv =
                cmd.match(/\//) || (isWindows && cmd.match(/\\/))
                    ? ['']
                    : [
                          // windows always checks the cwd first
                          ...(isWindows ? [process.cwd()] : []),
                          ...(
                              opt.path ||
                              process.env.PATH /* istanbul ignore next: very unusual */ ||
                              ''
                          ).split(colon),
                      ];
            const pathExtExe = isWindows
                ? opt.pathExt || process.env.PATHEXT || '.EXE;.CMD;.BAT;.COM'
                : '';
            const pathExt = isWindows ? pathExtExe.split(colon) : [''];
            if (isWindows) {
                if (cmd.indexOf('.') !== -1 && pathExt[0] !== '') pathExt.unshift('');
            }
            return {
                pathEnv,
                pathExt,
                pathExtExe,
            };
        };
        var which = (cmd, opt, cb) => {
            if (typeof opt === 'function') {
                cb = opt;
                opt = {};
            }
            if (!opt) opt = {};
            const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt);
            const found = [];
            const step = (i2) =>
                new Promise((resolve, reject) => {
                    if (i2 === pathEnv.length)
                        return opt.all && found.length
                            ? resolve(found)
                            : reject(getNotFoundError(cmd));
                    const ppRaw = pathEnv[i2];
                    const pathPart = /^".*"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw;
                    const pCmd = path4.join(pathPart, cmd);
                    const p = !pathPart && /^\.[\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd : pCmd;
                    resolve(subStep(p, i2, 0));
                });
            const subStep = (p, i2, ii) =>
                new Promise((resolve, reject) => {
                    if (ii === pathExt.length) return resolve(step(i2 + 1));
                    const ext = pathExt[ii];
                    isexe(p + ext, { pathExt: pathExtExe }, (er, is4) => {
                        if (!er && is4) {
                            if (opt.all) found.push(p + ext);
                            else return resolve(p + ext);
                        }
                        return resolve(subStep(p, i2, ii + 1));
                    });
                });
            return cb ? step(0).then((res) => cb(null, res), cb) : step(0);
        };
        var whichSync = (cmd, opt) => {
            opt = opt || {};
            const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt);
            const found = [];
            for (let i2 = 0; i2 < pathEnv.length; i2++) {
                const ppRaw = pathEnv[i2];
                const pathPart = /^".*"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw;
                const pCmd = path4.join(pathPart, cmd);
                const p = !pathPart && /^\.[\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd : pCmd;
                for (let j = 0; j < pathExt.length; j++) {
                    const cur = p + pathExt[j];
                    try {
                        const is4 = isexe.sync(cur, { pathExt: pathExtExe });
                        if (is4) {
                            if (opt.all) found.push(cur);
                            else return cur;
                        }
                    } catch (ex) {}
                }
            }
            if (opt.all && found.length) return found;
            if (opt.nothrow) return null;
            throw getNotFoundError(cmd);
        };
        module2.exports = which;
        which.sync = whichSync;
    },
});

// node_modules/path-key/index.js
var require_path_key = __commonJS({
    'node_modules/path-key/index.js'(exports2, module2) {
        'use strict';
        var pathKey2 = (options2 = {}) => {
            const environment = options2.env || process.env;
            const platform = options2.platform || process.platform;
            if (platform !== 'win32') {
                return 'PATH';
            }
            return (
                Object.keys(environment)
                    .reverse()
                    .find((key) => key.toUpperCase() === 'PATH') || 'Path'
            );
        };
        module2.exports = pathKey2;
        module2.exports.default = pathKey2;
    },
});

// node_modules/cross-spawn/lib/util/resolveCommand.js
var require_resolveCommand = __commonJS({
    'node_modules/cross-spawn/lib/util/resolveCommand.js'(exports2, module2) {
        'use strict';
        var path4 = require('path');
        var which = require_which();
        var getPathKey = require_path_key();
        function resolveCommandAttempt(parsed, withoutPathExt) {
            const env = parsed.options.env || process.env;
            const cwd = process.cwd();
            const hasCustomCwd = parsed.options.cwd != null;
            const shouldSwitchCwd =
                hasCustomCwd && process.chdir !== void 0 && !process.chdir.disabled;
            if (shouldSwitchCwd) {
                try {
                    process.chdir(parsed.options.cwd);
                } catch (err) {}
            }
            let resolved;
            try {
                resolved = which.sync(parsed.command, {
                    path: env[getPathKey({ env })],
                    pathExt: withoutPathExt ? path4.delimiter : void 0,
                });
            } catch (e2) {
            } finally {
                if (shouldSwitchCwd) {
                    process.chdir(cwd);
                }
            }
            if (resolved) {
                resolved = path4.resolve(hasCustomCwd ? parsed.options.cwd : '', resolved);
            }
            return resolved;
        }
        function resolveCommand(parsed) {
            return resolveCommandAttempt(parsed) || resolveCommandAttempt(parsed, true);
        }
        module2.exports = resolveCommand;
    },
});

// node_modules/cross-spawn/lib/util/escape.js
var require_escape = __commonJS({
    'node_modules/cross-spawn/lib/util/escape.js'(exports2, module2) {
        'use strict';
        var metaCharsRegExp = /([()\][%!^"`<>&|;, *?])/g;
        function escapeCommand(arg) {
            arg = arg.replace(metaCharsRegExp, '^$1');
            return arg;
        }
        function escapeArgument(arg, doubleEscapeMetaChars) {
            arg = `${arg}`;
            arg = arg.replace(/(\\*)"/g, '$1$1\\"');
            arg = arg.replace(/(\\*)$/, '$1$1');
            arg = `"${arg}"`;
            arg = arg.replace(metaCharsRegExp, '^$1');
            if (doubleEscapeMetaChars) {
                arg = arg.replace(metaCharsRegExp, '^$1');
            }
            return arg;
        }
        module2.exports.command = escapeCommand;
        module2.exports.argument = escapeArgument;
    },
});

// node_modules/shebang-regex/index.js
var require_shebang_regex = __commonJS({
    'node_modules/shebang-regex/index.js'(exports2, module2) {
        'use strict';
        module2.exports = /^#!(.*)/;
    },
});

// node_modules/shebang-command/index.js
var require_shebang_command = __commonJS({
    'node_modules/shebang-command/index.js'(exports2, module2) {
        'use strict';
        var shebangRegex = require_shebang_regex();
        module2.exports = (string = '') => {
            const match = string.match(shebangRegex);
            if (!match) {
                return null;
            }
            const [path4, argument] = match[0].replace(/#! ?/, '').split(' ');
            const binary = path4.split('/').pop();
            if (binary === 'env') {
                return argument;
            }
            return argument ? `${binary} ${argument}` : binary;
        };
    },
});

// node_modules/cross-spawn/lib/util/readShebang.js
var require_readShebang = __commonJS({
    'node_modules/cross-spawn/lib/util/readShebang.js'(exports2, module2) {
        'use strict';
        var fs3 = require('fs');
        var shebangCommand = require_shebang_command();
        function readShebang(command) {
            const size = 150;
            const buffer = Buffer.alloc(size);
            let fd;
            try {
                fd = fs3.openSync(command, 'r');
                fs3.readSync(fd, buffer, 0, size, 0);
                fs3.closeSync(fd);
            } catch (e2) {}
            return shebangCommand(buffer.toString());
        }
        module2.exports = readShebang;
    },
});

// node_modules/cross-spawn/lib/parse.js
var require_parse = __commonJS({
    'node_modules/cross-spawn/lib/parse.js'(exports2, module2) {
        'use strict';
        var path4 = require('path');
        var resolveCommand = require_resolveCommand();
        var escape2 = require_escape();
        var readShebang = require_readShebang();
        var isWin = process.platform === 'win32';
        var isExecutableRegExp = /\.(?:com|exe)$/i;
        var isCmdShimRegExp = /node_modules[\\/].bin[\\/][^\\/]+\.cmd$/i;
        function detectShebang(parsed) {
            parsed.file = resolveCommand(parsed);
            const shebang = parsed.file && readShebang(parsed.file);
            if (shebang) {
                parsed.args.unshift(parsed.file);
                parsed.command = shebang;
                return resolveCommand(parsed);
            }
            return parsed.file;
        }
        function parseNonShell(parsed) {
            if (!isWin) {
                return parsed;
            }
            const commandFile = detectShebang(parsed);
            const needsShell = !isExecutableRegExp.test(commandFile);
            if (parsed.options.forceShell || needsShell) {
                const needsDoubleEscapeMetaChars = isCmdShimRegExp.test(commandFile);
                parsed.command = path4.normalize(parsed.command);
                parsed.command = escape2.command(parsed.command);
                parsed.args = parsed.args.map((arg) =>
                    escape2.argument(arg, needsDoubleEscapeMetaChars),
                );
                const shellCommand = [parsed.command].concat(parsed.args).join(' ');
                parsed.args = ['/d', '/s', '/c', `"${shellCommand}"`];
                parsed.command = process.env.comspec || 'cmd.exe';
                parsed.options.windowsVerbatimArguments = true;
            }
            return parsed;
        }
        function parse8(command, args, options2) {
            if (args && !Array.isArray(args)) {
                options2 = args;
                args = null;
            }
            args = args ? args.slice(0) : [];
            options2 = Object.assign({}, options2);
            const parsed = {
                command,
                args,
                options: options2,
                file: void 0,
                original: {
                    command,
                    args,
                },
            };
            return options2.shell ? parsed : parseNonShell(parsed);
        }
        module2.exports = parse8;
    },
});

// node_modules/cross-spawn/lib/enoent.js
var require_enoent = __commonJS({
    'node_modules/cross-spawn/lib/enoent.js'(exports2, module2) {
        'use strict';
        var isWin = process.platform === 'win32';
        function notFoundError(original, syscall) {
            return Object.assign(new Error(`${syscall} ${original.command} ENOENT`), {
                code: 'ENOENT',
                errno: 'ENOENT',
                syscall: `${syscall} ${original.command}`,
                path: original.command,
                spawnargs: original.args,
            });
        }
        function hookChildProcess(cp, parsed) {
            if (!isWin) {
                return;
            }
            const originalEmit = cp.emit;
            cp.emit = function (name, arg1) {
                if (name === 'exit') {
                    const err = verifyENOENT(arg1, parsed, 'spawn');
                    if (err) {
                        return originalEmit.call(cp, 'error', err);
                    }
                }
                return originalEmit.apply(cp, arguments);
            };
        }
        function verifyENOENT(status, parsed) {
            if (isWin && status === 1 && !parsed.file) {
                return notFoundError(parsed.original, 'spawn');
            }
            return null;
        }
        function verifyENOENTSync(status, parsed) {
            if (isWin && status === 1 && !parsed.file) {
                return notFoundError(parsed.original, 'spawnSync');
            }
            return null;
        }
        module2.exports = {
            hookChildProcess,
            verifyENOENT,
            verifyENOENTSync,
            notFoundError,
        };
    },
});

// node_modules/cross-spawn/index.js
var require_cross_spawn = __commonJS({
    'node_modules/cross-spawn/index.js'(exports2, module2) {
        'use strict';
        var cp = require('child_process');
        var parse8 = require_parse();
        var enoent = require_enoent();
        function spawn(command, args, options2) {
            const parsed = parse8(command, args, options2);
            const spawned = cp.spawn(parsed.command, parsed.args, parsed.options);
            enoent.hookChildProcess(spawned, parsed);
            return spawned;
        }
        function spawnSync(command, args, options2) {
            const parsed = parse8(command, args, options2);
            const result = cp.spawnSync(parsed.command, parsed.args, parsed.options);
            result.error = result.error || enoent.verifyENOENTSync(result.status, parsed);
            return result;
        }
        module2.exports = spawn;
        module2.exports.spawn = spawn;
        module2.exports.sync = spawnSync;
        module2.exports._parse = parse8;
        module2.exports._enoent = enoent;
    },
});

// node_modules/merge-stream/index.js
var require_merge_stream = __commonJS({
    'node_modules/merge-stream/index.js'(exports2, module2) {
        'use strict';
        var { PassThrough: PassThrough3 } = require('stream');
        module2.exports = function () {
            var sources = [];
            var output = new PassThrough3({ objectMode: true });
            output.setMaxListeners(0);
            output.add = add2;
            output.isEmpty = isEmpty;
            output.on('unpipe', remove2);
            Array.prototype.slice.call(arguments).forEach(add2);
            return output;
            function add2(source) {
                if (Array.isArray(source)) {
                    source.forEach(add2);
                    return this;
                }
                sources.push(source);
                source.once('end', remove2.bind(null, source));
                source.once('error', output.emit.bind(output, 'error'));
                source.pipe(output, { end: false });
                return this;
            }
            function isEmpty() {
                return sources.length == 0;
            }
            function remove2(source) {
                sources = sources.filter(function (it) {
                    return it !== source;
                });
                if (!sources.length && output.readable) {
                    output.end();
                }
            }
        };
    },
});

// node_modules/xlsx/dist/cpexcel.js
var require_cpexcel = __commonJS({
    'node_modules/xlsx/dist/cpexcel.js'(exports2, module2) {
        var cptable2 = { version: '1.15.0' };
        cptable2[437] = (function () {
            var d =
                    '\0\x07\b	\n\v\f\r\x1B !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\xEC\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\xFF\xD6\xDC\xA2\xA3\xA5\u20A7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0',
                D = [],
                e2 = {};
            for (var i2 = 0; i2 != d.length; ++i2) {
                if (d.charCodeAt(i2) !== 65533) e2[d.charAt(i2)] = i2;
                D[i2] = d.charAt(i2);
            }
            return { enc: e2, dec: D };
        })();
        cptable2[620] = (function () {
            var d =
                    '\0\x07\b	\n\v\f\r\x1B !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC7\xFC\xE9\xE2\xE4\xE0\u0105\xE7\xEA\xEB\xE8\xEF\xEE\u0107\xC4\u0104\u0118\u0119\u0142\xF4\xF6\u0106\xFB\xF9\u015A\xD6\xDC\xA2\u0141\xA5\u015B\u0192\u0179\u017B\xF3\xD3\u0144\u0143\u017A\u017C\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0',
                D = [],
                e2 = {};
            for (var i2 = 0; i2 != d.length; ++i2) {
                if (d.charCodeAt(i2) !== 65533) e2[d.charAt(i2)] = i2;
                D[i2] = d.charAt(i2);
            }
            return { enc: e2, dec: D };
        })();
        cptable2[737] = (function () {
            var d =
                    '\0\x07\b	\n\v\f\r\x1B !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C3\u03C2\u03C4\u03C5\u03C6\u03C7\u03C8\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03C9\u03AC\u03AD\u03AE\u03CA\u03AF\u03CC\u03CD\u03CB\u03CE\u0386\u0388\u0389\u038A\u038C\u038E\u038F\xB1\u2265\u2264\u03AA\u03AB\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0',
                D = [],
                e2 = {};
            for (var i2 = 0; i2 != d.length; ++i2) {
                if (d.charCodeAt(i2) !== 65533) e2[d.charAt(i2)] = i2;
                D[i2] = d.charAt(i2);
            }
            return { enc: e2, dec: D };
        })();
        cptable2[850] = (function () {
            var d =
                    '\0\x07\b	\n\v\f\r\x1B !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\xEC\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\xFF\xD6\xDC\xF8\xA3\xD8\xD7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\xAE\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\xC1\xC2\xC0\xA9\u2563\u2551\u2557\u255D\xA2\xA5\u2510\u2514\u2534\u252C\u251C\u2500\u253C\xE3\xC3\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\xF0\xD0\xCA\xCB\xC8\u0131\xCD\xCE\xCF\u2518\u250C\u2588\u2584\xA6\xCC\u2580\xD3\xDF\xD4\xD2\xF5\xD5\xB5\xFE\xDE\xDA\xDB\xD9\xFD\xDD\xAF\xB4\xAD\xB1\u2017\xBE\xB6\xA7\xF7\xB8\xB0\xA8\xB7\xB9\xB3\xB2\u25A0\xA0',
                D = [],
                e2 = {};
            for (var i2 = 0; i2 != d.length; ++i2) {
                if (d.charCodeAt(i2) !== 65533) e2[d.charAt(i2)] = i2;
                D[i2] = d.charAt(i2);
            }
            return { enc: e2, dec: D };
        })();
        cptable2[852] = (function () {
            var d =
                    '\0\x07\b	\n\v\f\r\x1B !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC7\xFC\xE9\xE2\xE4\u016F\u0107\xE7\u0142\xEB\u0150\u0151\xEE\u0179\xC4\u0106\xC9\u0139\u013A\xF4\xF6\u013D\u013E\u015A\u015B\xD6\xDC\u0164\u0165\u0141\xD7\u010D\xE1\xED\xF3\xFA\u0104\u0105\u017D\u017E\u0118\u0119\xAC\u017A\u010C\u015F\xAB\xBB\u2591\u2592\u2593\u2502\u2524\xC1\xC2\u011A\u015E\u2563\u2551\u2557\u255D\u017B\u017C\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u0102\u0103\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\u0111\u0110\u010E\xCB\u010F\u0147\xCD\xCE\u011B\u2518\u250C\u2588\u2584\u0162\u016E\u2580\xD3\xDF\xD4\u0143\u0144\u0148\u0160\u0161\u0154\xDA\u0155\u0170\xFD\xDD\u0163\xB4\xAD\u02DD\u02DB\u02C7\u02D8\xA7\xF7\xB8\xB0\xA8\u02D9\u0171\u0158\u0159\u25A0\xA0',
                D = [],
                e2 = {};
            for (var i2 = 0; i2 != d.length; ++i2) {
                if (d.charCodeAt(i2) !== 65533) e2[d.charAt(i2)] = i2;
                D[i2] = d.charAt(i2);
            }
            return { enc: e2, dec: D };
        })();
        cptable2[857] = (function () {
            var d =
                    '\0\x07\b	\n\v\f\r\x1B !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\u0131\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\u0130\xD6\xDC\xF8\xA3\xD8\u015E\u015F\xE1\xED\xF3\xFA\xF1\xD1\u011E\u011F\xBF\xAE\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\xC1\xC2\xC0\xA9\u2563\u2551\u2557\u255D\xA2\xA5\u2510\u2514\u2534\u252C\u251C\u2500\u253C\xE3\xC3\u255A\u2554\u2569\u2566\u2560\u2550\u256C\xA4\xBA\xAA\xCA\xCB\xC8\uFFFD\xCD\xCE\xCF\u2518\u250C\u2588\u2584\xA6\xCC\u2580\xD3\xDF\xD4\xD2\xF5\xD5\xB5\uFFFD\xD7\xDA\xDB\xD9\xEC\xFF\xAF\xB4\xAD\xB1\uFFFD\xBE\xB6\xA7\xF7\xB8\xB0\xA8\xB7\xB9\xB3\xB2\u25A0\xA0',
                D = [],
                e2 = {};
            for (var i2 = 0; i2 != d.length; ++i2) {
                if (d.charCodeAt(i2) !== 65533) e2[d.charAt(i2)] = i2;
                D[i2] = d.charAt(i2);
            }
            return { enc: e2, dec: D };
        })();
        cptable2[861] = (function () {
            var d =
                    '\0\x07\b	\n\v\f\r\x1B !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xD0\xF0\xDE\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xFE\xFB\xDD\xFD\xD6\xDC\xF8\xA3\xD8\u20A7\u0192\xE1\xED\xF3\xFA\xC1\xCD\xD3\xDA\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0',
                D = [],
                e2 = {};
            for (var i2 = 0; i2 != d.length; ++i2) {
                if (d.charCodeAt(i2) !== 65533) e2[d.charAt(i2)] = i2;
                D[i2] = d.charAt(i2);
            }
            return { enc: e2, dec: D };
        })();
        cptable2[865] = (function () {
            var d =
                    '\0\x07\b	\n\v\f\r\x1B !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC7\xFC\xE9\xE2\xE4\xE0\xE5\xE7\xEA\xEB\xE8\xEF\xEE\xEC\xC4\xC5\xC9\xE6\xC6\xF4\xF6\xF2\xFB\xF9\xFF\xD6\xDC\xF8\xA3\xD8\u20A7\u0192\xE1\xED\xF3\xFA\xF1\xD1\xAA\xBA\xBF\u2310\xAC\xBD\xBC\xA1\xAB\xA4\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0',
                D = [],
                e2 = {};
            for (var i2 = 0; i2 != d.length; ++i2) {
                if (d.charCodeAt(i2) !== 65533) e2[d.charAt(i2)] = i2;
                D[i2] = d.charAt(i2);
            }
            return { enc: e2, dec: D };
        })();
        cptable2[866] = (function () {
            var d =
                    '\0\x07\b	\n\v\f\r\x1B !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\u0401\u0451\u0404\u0454\u0407\u0457\u040E\u045E\xB0\u2219\xB7\u221A\u2116\xA4\u25A0\xA0',
                D = [],
                e2 = {};
            for (var i2 = 0; i2 != d.length; ++i2) {
                if (d.charCodeAt(i2) !== 65533) e2[d.charAt(i2)] = i2;
                D[i2] = d.charAt(i2);
            }
            return { enc: e2, dec: D };
        })();
        cptable2[874] = (function () {
            var d =
                    '\0\x07\b	\n\v\f\r\x1B !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u20AC\uFFFD\uFFFD\uFFFD\uFFFD\u2026\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\xA0\u0E01\u0E02\u0E03\u0E04\u0E05\u0E06\u0E07\u0E08\u0E09\u0E0A\u0E0B\u0E0C\u0E0D\u0E0E\u0E0F\u0E10\u0E11\u0E12\u0E13\u0E14\u0E15\u0E16\u0E17\u0E18\u0E19\u0E1A\u0E1B\u0E1C\u0E1D\u0E1E\u0E1F\u0E20\u0E21\u0E22\u0E23\u0E24\u0E25\u0E26\u0E27\u0E28\u0E29\u0E2A\u0E2B\u0E2C\u0E2D\u0E2E\u0E2F\u0E30\u0E31\u0E32\u0E33\u0E34\u0E35\u0E36\u0E37\u0E38\u0E39\u0E3A\uFFFD\uFFFD\uFFFD\uFFFD\u0E3F\u0E40\u0E41\u0E42\u0E43\u0E44\u0E45\u0E46\u0E47\u0E48\u0E49\u0E4A\u0E4B\u0E4C\u0E4D\u0E4E\u0E4F\u0E50\u0E51\u0E52\u0E53\u0E54\u0E55\u0E56\u0E57\u0E58\u0E59\u0E5A\u0E5B\uFFFD\uFFFD\uFFFD\uFFFD',
                D = [],
                e2 = {};
            for (var i2 = 0; i2 != d.length; ++i2) {
                if (d.charCodeAt(i2) !== 65533) e2[d.charAt(i2)] = i2;
                D[i2] = d.charAt(i2);
            }
            return { enc: e2, dec: D };
        })();
        cptable2[895] = (function () {
            var d =
                    '\0\x07\b	\n\v\f\r\x1B !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u010C\xFC\xE9\u010F\xE4\u010E\u0164\u010D\u011B\u011A\u0139\xCD\u013E\u01EA\xC4\xC1\xC9\u017E\u017D\xF4\xF6\xD3\u016F\xDA\xFD\xD6\xDC\u0160\u013D\xDD\u0158\u0165\xE1\xED\xF3\xFA\u0148\u0147\u016E\xD4\u0161\u0159\u0155\u0154\xBC\xA7\xAB\xBB\u2591\u2592\u2593\u2502\u2524\u2561\u2562\u2556\u2555\u2563\u2551\u2557\u255D\u255C\u255B\u2510\u2514\u2534\u252C\u251C\u2500\u253C\u255E\u255F\u255A\u2554\u2569\u2566\u2560\u2550\u256C\u2567\u2568\u2564\u2565\u2559\u2558\u2552\u2553\u256B\u256A\u2518\u250C\u2588\u2584\u258C\u2590\u2580\u03B1\xDF\u0393\u03C0\u03A3\u03C3\xB5\u03C4\u03A6\u0398\u03A9\u03B4\u221E\u03C6\u03B5\u2229\u2261\xB1\u2265\u2264\u2320\u2321\xF7\u2248\xB0\u2219\xB7\u221A\u207F\xB2\u25A0\xA0',
                D = [],
                e2 = {};
            for (var i2 = 0; i2 != d.length; ++i2) {
                if (d.charCodeAt(i2) !== 65533) e2[d.charAt(i2)] = i2;
                D[i2] = d.charAt(i2);
            }
            return { enc: e2, dec: D };
        })();
        cptable2[932] = (function () {
            var d = [],
                e2 = {},
                D = [],
                j;
            D[0] =
                '\0\x07\b	\n\v\f\r\x1B !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFF61\uFF62\uFF63\uFF64\uFF65\uFF66\uFF67\uFF68\uFF69\uFF6A\uFF6B\uFF6C\uFF6D\uFF6E\uFF6F\uFF70\uFF71\uFF72\uFF73\uFF74\uFF75\uFF76\uFF77\uFF78\uFF79\uFF7A\uFF7B\uFF7C\uFF7D\uFF7E\uFF7F\uFF80\uFF81\uFF82\uFF83\uFF84\uFF85\uFF86\uFF87\uFF88\uFF89\uFF8A\uFF8B\uFF8C\uFF8D\uFF8E\uFF8F\uFF90\uFF91\uFF92\uFF93\uFF94\uFF95\uFF96\uFF97\uFF98\uFF99\uFF9A\uFF9B\uFF9C\uFF9D\uFF9E\uFF9F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[0].length; ++j)
                if (D[0][j].charCodeAt(0) !== 65533) {
                    e2[D[0][j]] = 0 + j;
                    d[0 + j] = D[0][j];
                }
            D[129] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u3000\u3001\u3002\uFF0C\uFF0E\u30FB\uFF1A\uFF1B\uFF1F\uFF01\u309B\u309C\xB4\uFF40\xA8\uFF3E\uFFE3\uFF3F\u30FD\u30FE\u309D\u309E\u3003\u4EDD\u3005\u3006\u3007\u30FC\u2015\u2010\uFF0F\uFF3C\uFF5E\u2225\uFF5C\u2026\u2025\u2018\u2019\u201C\u201D\uFF08\uFF09\u3014\u3015\uFF3B\uFF3D\uFF5B\uFF5D\u3008\u3009\u300A\u300B\u300C\u300D\u300E\u300F\u3010\u3011\uFF0B\uFF0D\xB1\xD7\uFFFD\xF7\uFF1D\u2260\uFF1C\uFF1E\u2266\u2267\u221E\u2234\u2642\u2640\xB0\u2032\u2033\u2103\uFFE5\uFF04\uFFE0\uFFE1\uFF05\uFF03\uFF06\uFF0A\uFF20\xA7\u2606\u2605\u25CB\u25CF\u25CE\u25C7\u25C6\u25A1\u25A0\u25B3\u25B2\u25BD\u25BC\u203B\u3012\u2192\u2190\u2191\u2193\u3013\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2208\u220B\u2286\u2287\u2282\u2283\u222A\u2229\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2227\u2228\uFFE2\u21D2\u21D4\u2200\u2203\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2220\u22A5\u2312\u2202\u2207\u2261\u2252\u226A\u226B\u221A\u223D\u221D\u2235\u222B\u222C\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u212B\u2030\u266F\u266D\u266A\u2020\u2021\xB6\uFFFD\uFFFD\uFFFD\uFFFD\u25EF\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[129].length; ++j)
                if (D[129][j].charCodeAt(0) !== 65533) {
                    e2[D[129][j]] = 33024 + j;
                    d[33024 + j] = D[129][j];
                }
            D[130] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFF10\uFF11\uFF12\uFF13\uFF14\uFF15\uFF16\uFF17\uFF18\uFF19\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFF21\uFF22\uFF23\uFF24\uFF25\uFF26\uFF27\uFF28\uFF29\uFF2A\uFF2B\uFF2C\uFF2D\uFF2E\uFF2F\uFF30\uFF31\uFF32\uFF33\uFF34\uFF35\uFF36\uFF37\uFF38\uFF39\uFF3A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFF41\uFF42\uFF43\uFF44\uFF45\uFF46\uFF47\uFF48\uFF49\uFF4A\uFF4B\uFF4C\uFF4D\uFF4E\uFF4F\uFF50\uFF51\uFF52\uFF53\uFF54\uFF55\uFF56\uFF57\uFF58\uFF59\uFF5A\uFFFD\uFFFD\uFFFD\uFFFD\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304A\u304B\u304C\u304D\u304E\u304F\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305A\u305B\u305C\u305D\u305E\u305F\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306A\u306B\u306C\u306D\u306E\u306F\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307A\u307B\u307C\u307D\u307E\u307F\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308A\u308B\u308C\u308D\u308E\u308F\u3090\u3091\u3092\u3093\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[130].length; ++j)
                if (D[130][j].charCodeAt(0) !== 65533) {
                    e2[D[130][j]] = 33280 + j;
                    d[33280 + j] = D[130][j];
                }
            D[131] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u30A1\u30A2\u30A3\u30A4\u30A5\u30A6\u30A7\u30A8\u30A9\u30AA\u30AB\u30AC\u30AD\u30AE\u30AF\u30B0\u30B1\u30B2\u30B3\u30B4\u30B5\u30B6\u30B7\u30B8\u30B9\u30BA\u30BB\u30BC\u30BD\u30BE\u30BF\u30C0\u30C1\u30C2\u30C3\u30C4\u30C5\u30C6\u30C7\u30C8\u30C9\u30CA\u30CB\u30CC\u30CD\u30CE\u30CF\u30D0\u30D1\u30D2\u30D3\u30D4\u30D5\u30D6\u30D7\u30D8\u30D9\u30DA\u30DB\u30DC\u30DD\u30DE\u30DF\uFFFD\u30E0\u30E1\u30E2\u30E3\u30E4\u30E5\u30E6\u30E7\u30E8\u30E9\u30EA\u30EB\u30EC\u30ED\u30EE\u30EF\u30F0\u30F1\u30F2\u30F3\u30F4\u30F5\u30F6\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C3\u03C4\u03C5\u03C6\u03C7\u03C8\u03C9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[131].length; ++j)
                if (D[131][j].charCodeAt(0) !== 65533) {
                    e2[D[131][j]] = 33536 + j;
                    d[33536 + j] = D[131][j];
                }
            D[132] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0410\u0411\u0412\u0413\u0414\u0415\u0401\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0430\u0431\u0432\u0433\u0434\u0435\u0451\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\uFFFD\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2500\u2502\u250C\u2510\u2518\u2514\u251C\u252C\u2524\u2534\u253C\u2501\u2503\u250F\u2513\u251B\u2517\u2523\u2533\u252B\u253B\u254B\u2520\u252F\u2528\u2537\u253F\u251D\u2530\u2525\u2538\u2542\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[132].length; ++j)
                if (D[132][j].charCodeAt(0) !== 65533) {
                    e2[D[132][j]] = 33792 + j;
                    d[33792 + j] = D[132][j];
                }
            D[135] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2460\u2461\u2462\u2463\u2464\u2465\u2466\u2467\u2468\u2469\u246A\u246B\u246C\u246D\u246E\u246F\u2470\u2471\u2472\u2473\u2160\u2161\u2162\u2163\u2164\u2165\u2166\u2167\u2168\u2169\uFFFD\u3349\u3314\u3322\u334D\u3318\u3327\u3303\u3336\u3351\u3357\u330D\u3326\u3323\u332B\u334A\u333B\u339C\u339D\u339E\u338E\u338F\u33C4\u33A1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u337B\uFFFD\u301D\u301F\u2116\u33CD\u2121\u32A4\u32A5\u32A6\u32A7\u32A8\u3231\u3232\u3239\u337E\u337D\u337C\u2252\u2261\u222B\u222E\u2211\u221A\u22A5\u2220\u221F\u22BF\u2235\u2229\u222A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[135].length; ++j)
                if (D[135][j].charCodeAt(0) !== 65533) {
                    e2[D[135][j]] = 34560 + j;
                    d[34560 + j] = D[135][j];
                }
            D[136] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4E9C\u5516\u5A03\u963F\u54C0\u611B\u6328\u59F6\u9022\u8475\u831C\u7A50\u60AA\u63E1\u6E25\u65ED\u8466\u82A6\u9BF5\u6893\u5727\u65A1\u6271\u5B9B\u59D0\u867B\u98F4\u7D62\u7DBE\u9B8E\u6216\u7C9F\u88B7\u5B89\u5EB5\u6309\u6697\u6848\u95C7\u978D\u674F\u4EE5\u4F0A\u4F4D\u4F9D\u5049\u56F2\u5937\u59D4\u5A01\u5C09\u60DF\u610F\u6170\u6613\u6905\u70BA\u754F\u7570\u79FB\u7DAD\u7DEF\u80C3\u840E\u8863\u8B02\u9055\u907A\u533B\u4E95\u4EA5\u57DF\u80B2\u90C1\u78EF\u4E00\u58F1\u6EA2\u9038\u7A32\u8328\u828B\u9C2F\u5141\u5370\u54BD\u54E1\u56E0\u59FB\u5F15\u98F2\u6DEB\u80E4\u852D\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[136].length; ++j)
                if (D[136][j].charCodeAt(0) !== 65533) {
                    e2[D[136][j]] = 34816 + j;
                    d[34816 + j] = D[136][j];
                }
            D[137] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9662\u9670\u96A0\u97FB\u540B\u53F3\u5B87\u70CF\u7FBD\u8FC2\u96E8\u536F\u9D5C\u7ABA\u4E11\u7893\u81FC\u6E26\u5618\u5504\u6B1D\u851A\u9C3B\u59E5\u53A9\u6D66\u74DC\u958F\u5642\u4E91\u904B\u96F2\u834F\u990C\u53E1\u55B6\u5B30\u5F71\u6620\u66F3\u6804\u6C38\u6CF3\u6D29\u745B\u76C8\u7A4E\u9834\u82F1\u885B\u8A60\u92ED\u6DB2\u75AB\u76CA\u99C5\u60A6\u8B01\u8D8A\u95B2\u698E\u53AD\u5186\uFFFD\u5712\u5830\u5944\u5BB4\u5EF6\u6028\u63A9\u63F4\u6CBF\u6F14\u708E\u7114\u7159\u71D5\u733F\u7E01\u8276\u82D1\u8597\u9060\u925B\u9D1B\u5869\u65BC\u6C5A\u7525\u51F9\u592E\u5965\u5F80\u5FDC\u62BC\u65FA\u6A2A\u6B27\u6BB4\u738B\u7FC1\u8956\u9D2C\u9D0E\u9EC4\u5CA1\u6C96\u837B\u5104\u5C4B\u61B6\u81C6\u6876\u7261\u4E59\u4FFA\u5378\u6069\u6E29\u7A4F\u97F3\u4E0B\u5316\u4EEE\u4F55\u4F3D\u4FA1\u4F73\u52A0\u53EF\u5609\u590F\u5AC1\u5BB6\u5BE1\u79D1\u6687\u679C\u67B6\u6B4C\u6CB3\u706B\u73C2\u798D\u79BE\u7A3C\u7B87\u82B1\u82DB\u8304\u8377\u83EF\u83D3\u8766\u8AB2\u5629\u8CA8\u8FE6\u904E\u971E\u868A\u4FC4\u5CE8\u6211\u7259\u753B\u81E5\u82BD\u86FE\u8CC0\u96C5\u9913\u99D5\u4ECB\u4F1A\u89E3\u56DE\u584A\u58CA\u5EFB\u5FEB\u602A\u6094\u6062\u61D0\u6212\u62D0\u6539\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[137].length; ++j)
                if (D[137][j].charCodeAt(0) !== 65533) {
                    e2[D[137][j]] = 35072 + j;
                    d[35072 + j] = D[137][j];
                }
            D[138] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9B41\u6666\u68B0\u6D77\u7070\u754C\u7686\u7D75\u82A5\u87F9\u958B\u968E\u8C9D\u51F1\u52BE\u5916\u54B3\u5BB3\u5D16\u6168\u6982\u6DAF\u788D\u84CB\u8857\u8A72\u93A7\u9AB8\u6D6C\u99A8\u86D9\u57A3\u67FF\u86CE\u920E\u5283\u5687\u5404\u5ED3\u62E1\u64B9\u683C\u6838\u6BBB\u7372\u78BA\u7A6B\u899A\u89D2\u8D6B\u8F03\u90ED\u95A3\u9694\u9769\u5B66\u5CB3\u697D\u984D\u984E\u639B\u7B20\u6A2B\uFFFD\u6A7F\u68B6\u9C0D\u6F5F\u5272\u559D\u6070\u62EC\u6D3B\u6E07\u6ED1\u845B\u8910\u8F44\u4E14\u9C39\u53F6\u691B\u6A3A\u9784\u682A\u515C\u7AC3\u84B2\u91DC\u938C\u565B\u9D28\u6822\u8305\u8431\u7CA5\u5208\u82C5\u74E6\u4E7E\u4F83\u51A0\u5BD2\u520A\u52D8\u52E7\u5DFB\u559A\u582A\u59E6\u5B8C\u5B98\u5BDB\u5E72\u5E79\u60A3\u611F\u6163\u61BE\u63DB\u6562\u67D1\u6853\u68FA\u6B3E\u6B53\u6C57\u6F22\u6F97\u6F45\u74B0\u7518\u76E3\u770B\u7AFF\u7BA1\u7C21\u7DE9\u7F36\u7FF0\u809D\u8266\u839E\u89B3\u8ACC\u8CAB\u9084\u9451\u9593\u9591\u95A2\u9665\u97D3\u9928\u8218\u4E38\u542B\u5CB8\u5DCC\u73A9\u764C\u773C\u5CA9\u7FEB\u8D0B\u96C1\u9811\u9854\u9858\u4F01\u4F0E\u5371\u559C\u5668\u57FA\u5947\u5B09\u5BC4\u5C90\u5E0C\u5E7E\u5FCC\u63EE\u673A\u65D7\u65E2\u671F\u68CB\u68C4\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[138].length; ++j)
                if (D[138][j].charCodeAt(0) !== 65533) {
                    e2[D[138][j]] = 35328 + j;
                    d[35328 + j] = D[138][j];
                }
            D[139] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6A5F\u5E30\u6BC5\u6C17\u6C7D\u757F\u7948\u5B63\u7A00\u7D00\u5FBD\u898F\u8A18\u8CB4\u8D77\u8ECC\u8F1D\u98E2\u9A0E\u9B3C\u4E80\u507D\u5100\u5993\u5B9C\u622F\u6280\u64EC\u6B3A\u72A0\u7591\u7947\u7FA9\u87FB\u8ABC\u8B70\u63AC\u83CA\u97A0\u5409\u5403\u55AB\u6854\u6A58\u8A70\u7827\u6775\u9ECD\u5374\u5BA2\u811A\u8650\u9006\u4E18\u4E45\u4EC7\u4F11\u53CA\u5438\u5BAE\u5F13\u6025\u6551\uFFFD\u673D\u6C42\u6C72\u6CE3\u7078\u7403\u7A76\u7AAE\u7B08\u7D1A\u7CFE\u7D66\u65E7\u725B\u53BB\u5C45\u5DE8\u62D2\u62E0\u6319\u6E20\u865A\u8A31\u8DDD\u92F8\u6F01\u79A6\u9B5A\u4EA8\u4EAB\u4EAC\u4F9B\u4FA0\u50D1\u5147\u7AF6\u5171\u51F6\u5354\u5321\u537F\u53EB\u55AC\u5883\u5CE1\u5F37\u5F4A\u602F\u6050\u606D\u631F\u6559\u6A4B\u6CC1\u72C2\u72ED\u77EF\u80F8\u8105\u8208\u854E\u90F7\u93E1\u97FF\u9957\u9A5A\u4EF0\u51DD\u5C2D\u6681\u696D\u5C40\u66F2\u6975\u7389\u6850\u7C81\u50C5\u52E4\u5747\u5DFE\u9326\u65A4\u6B23\u6B3D\u7434\u7981\u79BD\u7B4B\u7DCA\u82B9\u83CC\u887F\u895F\u8B39\u8FD1\u91D1\u541F\u9280\u4E5D\u5036\u53E5\u533A\u72D7\u7396\u77E9\u82E6\u8EAF\u99C6\u99C8\u99D2\u5177\u611A\u865E\u55B0\u7A7A\u5076\u5BD3\u9047\u9685\u4E32\u6ADB\u91E7\u5C51\u5C48\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[139].length; ++j)
                if (D[139][j].charCodeAt(0) !== 65533) {
                    e2[D[139][j]] = 35584 + j;
                    d[35584 + j] = D[139][j];
                }
            D[140] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6398\u7A9F\u6C93\u9774\u8F61\u7AAA\u718A\u9688\u7C82\u6817\u7E70\u6851\u936C\u52F2\u541B\u85AB\u8A13\u7FA4\u8ECD\u90E1\u5366\u8888\u7941\u4FC2\u50BE\u5211\u5144\u5553\u572D\u73EA\u578B\u5951\u5F62\u5F84\u6075\u6176\u6167\u61A9\u63B2\u643A\u656C\u666F\u6842\u6E13\u7566\u7A3D\u7CFB\u7D4C\u7D99\u7E4B\u7F6B\u830E\u834A\u86CD\u8A08\u8A63\u8B66\u8EFD\u981A\u9D8F\u82B8\u8FCE\u9BE8\uFFFD\u5287\u621F\u6483\u6FC0\u9699\u6841\u5091\u6B20\u6C7A\u6F54\u7A74\u7D50\u8840\u8A23\u6708\u4EF6\u5039\u5026\u5065\u517C\u5238\u5263\u55A7\u570F\u5805\u5ACC\u5EFA\u61B2\u61F8\u62F3\u6372\u691C\u6A29\u727D\u72AC\u732E\u7814\u786F\u7D79\u770C\u80A9\u898B\u8B19\u8CE2\u8ED2\u9063\u9375\u967A\u9855\u9A13\u9E78\u5143\u539F\u53B3\u5E7B\u5F26\u6E1B\u6E90\u7384\u73FE\u7D43\u8237\u8A00\u8AFA\u9650\u4E4E\u500B\u53E4\u547C\u56FA\u59D1\u5B64\u5DF1\u5EAB\u5F27\u6238\u6545\u67AF\u6E56\u72D0\u7CCA\u88B4\u80A1\u80E1\u83F0\u864E\u8A87\u8DE8\u9237\u96C7\u9867\u9F13\u4E94\u4E92\u4F0D\u5348\u5449\u543E\u5A2F\u5F8C\u5FA1\u609F\u68A7\u6A8E\u745A\u7881\u8A9E\u8AA4\u8B77\u9190\u4E5E\u9BC9\u4EA4\u4F7C\u4FAF\u5019\u5016\u5149\u516C\u529F\u52B9\u52FE\u539A\u53E3\u5411\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[140].length; ++j)
                if (D[140][j].charCodeAt(0) !== 65533) {
                    e2[D[140][j]] = 35840 + j;
                    d[35840 + j] = D[140][j];
                }
            D[141] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u540E\u5589\u5751\u57A2\u597D\u5B54\u5B5D\u5B8F\u5DE5\u5DE7\u5DF7\u5E78\u5E83\u5E9A\u5EB7\u5F18\u6052\u614C\u6297\u62D8\u63A7\u653B\u6602\u6643\u66F4\u676D\u6821\u6897\u69CB\u6C5F\u6D2A\u6D69\u6E2F\u6E9D\u7532\u7687\u786C\u7A3F\u7CE0\u7D05\u7D18\u7D5E\u7DB1\u8015\u8003\u80AF\u80B1\u8154\u818F\u822A\u8352\u884C\u8861\u8B1B\u8CA2\u8CFC\u90CA\u9175\u9271\u783F\u92FC\u95A4\u964D\uFFFD\u9805\u9999\u9AD8\u9D3B\u525B\u52AB\u53F7\u5408\u58D5\u62F7\u6FE0\u8C6A\u8F5F\u9EB9\u514B\u523B\u544A\u56FD\u7A40\u9177\u9D60\u9ED2\u7344\u6F09\u8170\u7511\u5FFD\u60DA\u9AA8\u72DB\u8FBC\u6B64\u9803\u4ECA\u56F0\u5764\u58BE\u5A5A\u6068\u61C7\u660F\u6606\u6839\u68B1\u6DF7\u75D5\u7D3A\u826E\u9B42\u4E9B\u4F50\u53C9\u5506\u5D6F\u5DE6\u5DEE\u67FB\u6C99\u7473\u7802\u8A50\u9396\u88DF\u5750\u5EA7\u632B\u50B5\u50AC\u518D\u6700\u54C9\u585E\u59BB\u5BB0\u5F69\u624D\u63A1\u683D\u6B73\u6E08\u707D\u91C7\u7280\u7815\u7826\u796D\u658E\u7D30\u83DC\u88C1\u8F09\u969B\u5264\u5728\u6750\u7F6A\u8CA1\u51B4\u5742\u962A\u583A\u698A\u80B4\u54B2\u5D0E\u57FC\u7895\u9DFA\u4F5C\u524A\u548B\u643E\u6628\u6714\u67F5\u7A84\u7B56\u7D22\u932F\u685C\u9BAD\u7B39\u5319\u518A\u5237\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[141].length; ++j)
                if (D[141][j].charCodeAt(0) !== 65533) {
                    e2[D[141][j]] = 36096 + j;
                    d[36096 + j] = D[141][j];
                }
            D[142] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5BDF\u62F6\u64AE\u64E6\u672D\u6BBA\u85A9\u96D1\u7690\u9BD6\u634C\u9306\u9BAB\u76BF\u6652\u4E09\u5098\u53C2\u5C71\u60E8\u6492\u6563\u685F\u71E6\u73CA\u7523\u7B97\u7E82\u8695\u8B83\u8CDB\u9178\u9910\u65AC\u66AB\u6B8B\u4ED5\u4ED4\u4F3A\u4F7F\u523A\u53F8\u53F2\u55E3\u56DB\u58EB\u59CB\u59C9\u59FF\u5B50\u5C4D\u5E02\u5E2B\u5FD7\u601D\u6307\u652F\u5B5C\u65AF\u65BD\u65E8\u679D\u6B62\uFFFD\u6B7B\u6C0F\u7345\u7949\u79C1\u7CF8\u7D19\u7D2B\u80A2\u8102\u81F3\u8996\u8A5E\u8A69\u8A66\u8A8C\u8AEE\u8CC7\u8CDC\u96CC\u98FC\u6B6F\u4E8B\u4F3C\u4F8D\u5150\u5B57\u5BFA\u6148\u6301\u6642\u6B21\u6ECB\u6CBB\u723E\u74BD\u75D4\u78C1\u793A\u800C\u8033\u81EA\u8494\u8F9E\u6C50\u9E7F\u5F0F\u8B58\u9D2B\u7AFA\u8EF8\u5B8D\u96EB\u4E03\u53F1\u57F7\u5931\u5AC9\u5BA4\u6089\u6E7F\u6F06\u75BE\u8CEA\u5B9F\u8500\u7BE0\u5072\u67F4\u829D\u5C61\u854A\u7E1E\u820E\u5199\u5C04\u6368\u8D66\u659C\u716E\u793E\u7D17\u8005\u8B1D\u8ECA\u906E\u86C7\u90AA\u501F\u52FA\u5C3A\u6753\u707C\u7235\u914C\u91C8\u932B\u82E5\u5BC2\u5F31\u60F9\u4E3B\u53D6\u5B88\u624B\u6731\u6B8A\u72E9\u73E0\u7A2E\u816B\u8DA3\u9152\u9996\u5112\u53D7\u546A\u5BFF\u6388\u6A39\u7DAC\u9700\u56DA\u53CE\u5468\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[142].length; ++j)
                if (D[142][j].charCodeAt(0) !== 65533) {
                    e2[D[142][j]] = 36352 + j;
                    d[36352 + j] = D[142][j];
                }
            D[143] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5B97\u5C31\u5DDE\u4FEE\u6101\u62FE\u6D32\u79C0\u79CB\u7D42\u7E4D\u7FD2\u81ED\u821F\u8490\u8846\u8972\u8B90\u8E74\u8F2F\u9031\u914B\u916C\u96C6\u919C\u4EC0\u4F4F\u5145\u5341\u5F93\u620E\u67D4\u6C41\u6E0B\u7363\u7E26\u91CD\u9283\u53D4\u5919\u5BBF\u6DD1\u795D\u7E2E\u7C9B\u587E\u719F\u51FA\u8853\u8FF0\u4FCA\u5CFB\u6625\u77AC\u7AE3\u821C\u99FF\u51C6\u5FAA\u65EC\u696F\u6B89\u6DF3\uFFFD\u6E96\u6F64\u76FE\u7D14\u5DE1\u9075\u9187\u9806\u51E6\u521D\u6240\u6691\u66D9\u6E1A\u5EB6\u7DD2\u7F72\u66F8\u85AF\u85F7\u8AF8\u52A9\u53D9\u5973\u5E8F\u5F90\u6055\u92E4\u9664\u50B7\u511F\u52DD\u5320\u5347\u53EC\u54E8\u5546\u5531\u5617\u5968\u59BE\u5A3C\u5BB5\u5C06\u5C0F\u5C11\u5C1A\u5E84\u5E8A\u5EE0\u5F70\u627F\u6284\u62DB\u638C\u6377\u6607\u660C\u662D\u6676\u677E\u68A2\u6A1F\u6A35\u6CBC\u6D88\u6E09\u6E58\u713C\u7126\u7167\u75C7\u7701\u785D\u7901\u7965\u79F0\u7AE0\u7B11\u7CA7\u7D39\u8096\u83D6\u848B\u8549\u885D\u88F3\u8A1F\u8A3C\u8A54\u8A73\u8C61\u8CDE\u91A4\u9266\u937E\u9418\u969C\u9798\u4E0A\u4E08\u4E1E\u4E57\u5197\u5270\u57CE\u5834\u58CC\u5B22\u5E38\u60C5\u64FE\u6761\u6756\u6D44\u72B6\u7573\u7A63\u84B8\u8B72\u91B8\u9320\u5631\u57F4\u98FE\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[143].length; ++j)
                if (D[143][j].charCodeAt(0) !== 65533) {
                    e2[D[143][j]] = 36608 + j;
                    d[36608 + j] = D[143][j];
                }
            D[144] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u62ED\u690D\u6B96\u71ED\u7E54\u8077\u8272\u89E6\u98DF\u8755\u8FB1\u5C3B\u4F38\u4FE1\u4FB5\u5507\u5A20\u5BDD\u5BE9\u5FC3\u614E\u632F\u65B0\u664B\u68EE\u699B\u6D78\u6DF1\u7533\u75B9\u771F\u795E\u79E6\u7D33\u81E3\u82AF\u85AA\u89AA\u8A3A\u8EAB\u8F9B\u9032\u91DD\u9707\u4EBA\u4EC1\u5203\u5875\u58EC\u5C0B\u751A\u5C3D\u814E\u8A0A\u8FC5\u9663\u976D\u7B25\u8ACF\u9808\u9162\u56F3\u53A8\uFFFD\u9017\u5439\u5782\u5E25\u63A8\u6C34\u708A\u7761\u7C8B\u7FE0\u8870\u9042\u9154\u9310\u9318\u968F\u745E\u9AC4\u5D07\u5D69\u6570\u67A2\u8DA8\u96DB\u636E\u6749\u6919\u83C5\u9817\u96C0\u88FE\u6F84\u647A\u5BF8\u4E16\u702C\u755D\u662F\u51C4\u5236\u52E2\u59D3\u5F81\u6027\u6210\u653F\u6574\u661F\u6674\u68F2\u6816\u6B63\u6E05\u7272\u751F\u76DB\u7CBE\u8056\u58F0\u88FD\u897F\u8AA0\u8A93\u8ACB\u901D\u9192\u9752\u9759\u6589\u7A0E\u8106\u96BB\u5E2D\u60DC\u621A\u65A5\u6614\u6790\u77F3\u7A4D\u7C4D\u7E3E\u810A\u8CAC\u8D64\u8DE1\u8E5F\u78A9\u5207\u62D9\u63A5\u6442\u6298\u8A2D\u7A83\u7BC0\u8AAC\u96EA\u7D76\u820C\u8749\u4ED9\u5148\u5343\u5360\u5BA3\u5C02\u5C16\u5DDD\u6226\u6247\u64B0\u6813\u6834\u6CC9\u6D45\u6D17\u67D3\u6F5C\u714E\u717D\u65CB\u7A7F\u7BAD\u7DDA\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[144].length; ++j)
                if (D[144][j].charCodeAt(0) !== 65533) {
                    e2[D[144][j]] = 36864 + j;
                    d[36864 + j] = D[144][j];
                }
            D[145] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7E4A\u7FA8\u817A\u821B\u8239\u85A6\u8A6E\u8CCE\u8DF5\u9078\u9077\u92AD\u9291\u9583\u9BAE\u524D\u5584\u6F38\u7136\u5168\u7985\u7E55\u81B3\u7CCE\u564C\u5851\u5CA8\u63AA\u66FE\u66FD\u695A\u72D9\u758F\u758E\u790E\u7956\u79DF\u7C97\u7D20\u7D44\u8607\u8A34\u963B\u9061\u9F20\u50E7\u5275\u53CC\u53E2\u5009\u55AA\u58EE\u594F\u723D\u5B8B\u5C64\u531D\u60E3\u60F3\u635C\u6383\u633F\u63BB\uFFFD\u64CD\u65E9\u66F9\u5DE3\u69CD\u69FD\u6F15\u71E5\u4E89\u75E9\u76F8\u7A93\u7CDF\u7DCF\u7D9C\u8061\u8349\u8358\u846C\u84BC\u85FB\u88C5\u8D70\u9001\u906D\u9397\u971C\u9A12\u50CF\u5897\u618E\u81D3\u8535\u8D08\u9020\u4FC3\u5074\u5247\u5373\u606F\u6349\u675F\u6E2C\u8DB3\u901F\u4FD7\u5C5E\u8CCA\u65CF\u7D9A\u5352\u8896\u5176\u63C3\u5B58\u5B6B\u5C0A\u640D\u6751\u905C\u4ED6\u591A\u592A\u6C70\u8A51\u553E\u5815\u59A5\u60F0\u6253\u67C1\u8235\u6955\u9640\u99C4\u9A28\u4F53\u5806\u5BFE\u8010\u5CB1\u5E2F\u5F85\u6020\u614B\u6234\u66FF\u6CF0\u6EDE\u80CE\u817F\u82D4\u888B\u8CB8\u9000\u902E\u968A\u9EDB\u9BDB\u4EE3\u53F0\u5927\u7B2C\u918D\u984C\u9DF9\u6EDD\u7027\u5353\u5544\u5B85\u6258\u629E\u62D3\u6CA2\u6FEF\u7422\u8A17\u9438\u6FC1\u8AFE\u8338\u51E7\u86F8\u53EA\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[145].length; ++j)
                if (D[145][j].charCodeAt(0) !== 65533) {
                    e2[D[145][j]] = 37120 + j;
                    d[37120 + j] = D[145][j];
                }
            D[146] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u53E9\u4F46\u9054\u8FB0\u596A\u8131\u5DFD\u7AEA\u8FBF\u68DA\u8C37\u72F8\u9C48\u6A3D\u8AB0\u4E39\u5358\u5606\u5766\u62C5\u63A2\u65E6\u6B4E\u6DE1\u6E5B\u70AD\u77ED\u7AEF\u7BAA\u7DBB\u803D\u80C6\u86CB\u8A95\u935B\u56E3\u58C7\u5F3E\u65AD\u6696\u6A80\u6BB5\u7537\u8AC7\u5024\u77E5\u5730\u5F1B\u6065\u667A\u6C60\u75F4\u7A1A\u7F6E\u81F4\u8718\u9045\u99B3\u7BC9\u755C\u7AF9\u7B51\u84C4\uFFFD\u9010\u79E9\u7A92\u8336\u5AE1\u7740\u4E2D\u4EF2\u5B99\u5FE0\u62BD\u663C\u67F1\u6CE8\u866B\u8877\u8A3B\u914E\u92F3\u99D0\u6A17\u7026\u732A\u82E7\u8457\u8CAF\u4E01\u5146\u51CB\u558B\u5BF5\u5E16\u5E33\u5E81\u5F14\u5F35\u5F6B\u5FB4\u61F2\u6311\u66A2\u671D\u6F6E\u7252\u753A\u773A\u8074\u8139\u8178\u8776\u8ABF\u8ADC\u8D85\u8DF3\u929A\u9577\u9802\u9CE5\u52C5\u6357\u76F4\u6715\u6C88\u73CD\u8CC3\u93AE\u9673\u6D25\u589C\u690E\u69CC\u8FFD\u939A\u75DB\u901A\u585A\u6802\u63B4\u69FB\u4F43\u6F2C\u67D8\u8FBB\u8526\u7DB4\u9354\u693F\u6F70\u576A\u58F7\u5B2C\u7D2C\u722A\u540A\u91E3\u9DB4\u4EAD\u4F4E\u505C\u5075\u5243\u8C9E\u5448\u5824\u5B9A\u5E1D\u5E95\u5EAD\u5EF7\u5F1F\u608C\u62B5\u633A\u63D0\u68AF\u6C40\u7887\u798E\u7A0B\u7DE0\u8247\u8A02\u8AE6\u8E44\u9013\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[146].length; ++j)
                if (D[146][j].charCodeAt(0) !== 65533) {
                    e2[D[146][j]] = 37376 + j;
                    d[37376 + j] = D[146][j];
                }
            D[147] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u90B8\u912D\u91D8\u9F0E\u6CE5\u6458\u64E2\u6575\u6EF4\u7684\u7B1B\u9069\u93D1\u6EBA\u54F2\u5FB9\u64A4\u8F4D\u8FED\u9244\u5178\u586B\u5929\u5C55\u5E97\u6DFB\u7E8F\u751C\u8CBC\u8EE2\u985B\u70B9\u4F1D\u6BBF\u6FB1\u7530\u96FB\u514E\u5410\u5835\u5857\u59AC\u5C60\u5F92\u6597\u675C\u6E21\u767B\u83DF\u8CED\u9014\u90FD\u934D\u7825\u783A\u52AA\u5EA6\u571F\u5974\u6012\u5012\u515A\u51AC\uFFFD\u51CD\u5200\u5510\u5854\u5858\u5957\u5B95\u5CF6\u5D8B\u60BC\u6295\u642D\u6771\u6843\u68BC\u68DF\u76D7\u6DD8\u6E6F\u6D9B\u706F\u71C8\u5F53\u75D8\u7977\u7B49\u7B54\u7B52\u7CD6\u7D71\u5230\u8463\u8569\u85E4\u8A0E\u8B04\u8C46\u8E0F\u9003\u900F\u9419\u9676\u982D\u9A30\u95D8\u50CD\u52D5\u540C\u5802\u5C0E\u61A7\u649E\u6D1E\u77B3\u7AE5\u80F4\u8404\u9053\u9285\u5CE0\u9D07\u533F\u5F97\u5FB3\u6D9C\u7279\u7763\u79BF\u7BE4\u6BD2\u72EC\u8AAD\u6803\u6A61\u51F8\u7A81\u6934\u5C4A\u9CF6\u82EB\u5BC5\u9149\u701E\u5678\u5C6F\u60C7\u6566\u6C8C\u8C5A\u9041\u9813\u5451\u66C7\u920D\u5948\u90A3\u5185\u4E4D\u51EA\u8599\u8B0E\u7058\u637A\u934B\u6962\u99B4\u7E04\u7577\u5357\u6960\u8EDF\u96E3\u6C5D\u4E8C\u5C3C\u5F10\u8FE9\u5302\u8CD1\u8089\u8679\u5EFF\u65E5\u4E73\u5165\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[147].length; ++j)
                if (D[147][j].charCodeAt(0) !== 65533) {
                    e2[D[147][j]] = 37632 + j;
                    d[37632 + j] = D[147][j];
                }
            D[148] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5982\u5C3F\u97EE\u4EFB\u598A\u5FCD\u8A8D\u6FE1\u79B0\u7962\u5BE7\u8471\u732B\u71B1\u5E74\u5FF5\u637B\u649A\u71C3\u7C98\u4E43\u5EFC\u4E4B\u57DC\u56A2\u60A9\u6FC3\u7D0D\u80FD\u8133\u81BF\u8FB2\u8997\u86A4\u5DF4\u628A\u64AD\u8987\u6777\u6CE2\u6D3E\u7436\u7834\u5A46\u7F75\u82AD\u99AC\u4FF3\u5EC3\u62DD\u6392\u6557\u676F\u76C3\u724C\u80CC\u80BA\u8F29\u914D\u500D\u57F9\u5A92\u6885\uFFFD\u6973\u7164\u72FD\u8CB7\u58F2\u8CE0\u966A\u9019\u877F\u79E4\u77E7\u8429\u4F2F\u5265\u535A\u62CD\u67CF\u6CCA\u767D\u7B94\u7C95\u8236\u8584\u8FEB\u66DD\u6F20\u7206\u7E1B\u83AB\u99C1\u9EA6\u51FD\u7BB1\u7872\u7BB8\u8087\u7B48\u6AE8\u5E61\u808C\u7551\u7560\u516B\u9262\u6E8C\u767A\u9197\u9AEA\u4F10\u7F70\u629C\u7B4F\u95A5\u9CE9\u567A\u5859\u86E4\u96BC\u4F34\u5224\u534A\u53CD\u53DB\u5E06\u642C\u6591\u677F\u6C3E\u6C4E\u7248\u72AF\u73ED\u7554\u7E41\u822C\u85E9\u8CA9\u7BC4\u91C6\u7169\u9812\u98EF\u633D\u6669\u756A\u76E4\u78D0\u8543\u86EE\u532A\u5351\u5426\u5983\u5E87\u5F7C\u60B2\u6249\u6279\u62AB\u6590\u6BD4\u6CCC\u75B2\u76AE\u7891\u79D8\u7DCB\u7F77\u80A5\u88AB\u8AB9\u8CBB\u907F\u975E\u98DB\u6A0B\u7C38\u5099\u5C3E\u5FAE\u6787\u6BD8\u7435\u7709\u7F8E\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[148].length; ++j)
                if (D[148][j].charCodeAt(0) !== 65533) {
                    e2[D[148][j]] = 37888 + j;
                    d[37888 + j] = D[148][j];
                }
            D[149] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9F3B\u67CA\u7A17\u5339\u758B\u9AED\u5F66\u819D\u83F1\u8098\u5F3C\u5FC5\u7562\u7B46\u903C\u6867\u59EB\u5A9B\u7D10\u767E\u8B2C\u4FF5\u5F6A\u6A19\u6C37\u6F02\u74E2\u7968\u8868\u8A55\u8C79\u5EDF\u63CF\u75C5\u79D2\u82D7\u9328\u92F2\u849C\u86ED\u9C2D\u54C1\u5F6C\u658C\u6D5C\u7015\u8CA7\u8CD3\u983B\u654F\u74F6\u4E0D\u4ED8\u57E0\u592B\u5A66\u5BCC\u51A8\u5E03\u5E9C\u6016\u6276\u6577\uFFFD\u65A7\u666E\u6D6E\u7236\u7B26\u8150\u819A\u8299\u8B5C\u8CA0\u8CE6\u8D74\u961C\u9644\u4FAE\u64AB\u6B66\u821E\u8461\u856A\u90E8\u5C01\u6953\u98A8\u847A\u8557\u4F0F\u526F\u5FA9\u5E45\u670D\u798F\u8179\u8907\u8986\u6DF5\u5F17\u6255\u6CB8\u4ECF\u7269\u9B92\u5206\u543B\u5674\u58B3\u61A4\u626E\u711A\u596E\u7C89\u7CDE\u7D1B\u96F0\u6587\u805E\u4E19\u4F75\u5175\u5840\u5E63\u5E73\u5F0A\u67C4\u4E26\u853D\u9589\u965B\u7C73\u9801\u50FB\u58C1\u7656\u78A7\u5225\u77A5\u8511\u7B86\u504F\u5909\u7247\u7BC7\u7DE8\u8FBA\u8FD4\u904D\u4FBF\u52C9\u5A29\u5F01\u97AD\u4FDD\u8217\u92EA\u5703\u6355\u6B69\u752B\u88DC\u8F14\u7A42\u52DF\u5893\u6155\u620A\u66AE\u6BCD\u7C3F\u83E9\u5023\u4FF8\u5305\u5446\u5831\u5949\u5B9D\u5CF0\u5CEF\u5D29\u5E96\u62B1\u6367\u653E\u65B9\u670B\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[149].length; ++j)
                if (D[149][j].charCodeAt(0) !== 65533) {
                    e2[D[149][j]] = 38144 + j;
                    d[38144 + j] = D[149][j];
                }
            D[150] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6CD5\u6CE1\u70F9\u7832\u7E2B\u80DE\u82B3\u840C\u84EC\u8702\u8912\u8A2A\u8C4A\u90A6\u92D2\u98FD\u9CF3\u9D6C\u4E4F\u4EA1\u508D\u5256\u574A\u59A8\u5E3D\u5FD8\u5FD9\u623F\u66B4\u671B\u67D0\u68D2\u5192\u7D21\u80AA\u81A8\u8B00\u8C8C\u8CBF\u927E\u9632\u5420\u982C\u5317\u50D5\u535C\u58A8\u64B2\u6734\u7267\u7766\u7A46\u91E6\u52C3\u6CA1\u6B86\u5800\u5E4C\u5954\u672C\u7FFB\u51E1\u76C6\uFFFD\u6469\u78E8\u9B54\u9EBB\u57CB\u59B9\u6627\u679A\u6BCE\u54E9\u69D9\u5E55\u819C\u6795\u9BAA\u67FE\u9C52\u685D\u4EA6\u4FE3\u53C8\u62B9\u672B\u6CAB\u8FC4\u4FAD\u7E6D\u9EBF\u4E07\u6162\u6E80\u6F2B\u8513\u5473\u672A\u9B45\u5DF3\u7B95\u5CAC\u5BC6\u871C\u6E4A\u84D1\u7A14\u8108\u5999\u7C8D\u6C11\u7720\u52D9\u5922\u7121\u725F\u77DB\u9727\u9D61\u690B\u5A7F\u5A18\u51A5\u540D\u547D\u660E\u76DF\u8FF7\u9298\u9CF4\u59EA\u725D\u6EC5\u514D\u68C9\u7DBF\u7DEC\u9762\u9EBA\u6478\u6A21\u8302\u5984\u5B5F\u6BDB\u731B\u76F2\u7DB2\u8017\u8499\u5132\u6728\u9ED9\u76EE\u6762\u52FF\u9905\u5C24\u623B\u7C7E\u8CB0\u554F\u60B6\u7D0B\u9580\u5301\u4E5F\u51B6\u591C\u723A\u8036\u91CE\u5F25\u77E2\u5384\u5F79\u7D04\u85AC\u8A33\u8E8D\u9756\u67F3\u85AE\u9453\u6109\u6108\u6CB9\u7652\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[150].length; ++j)
                if (D[150][j].charCodeAt(0) !== 65533) {
                    e2[D[150][j]] = 38400 + j;
                    d[38400 + j] = D[150][j];
                }
            D[151] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8AED\u8F38\u552F\u4F51\u512A\u52C7\u53CB\u5BA5\u5E7D\u60A0\u6182\u63D6\u6709\u67DA\u6E67\u6D8C\u7336\u7337\u7531\u7950\u88D5\u8A98\u904A\u9091\u90F5\u96C4\u878D\u5915\u4E88\u4F59\u4E0E\u8A89\u8F3F\u9810\u50AD\u5E7C\u5996\u5BB9\u5EB8\u63DA\u63FA\u64C1\u66DC\u694A\u69D8\u6D0B\u6EB6\u7194\u7528\u7AAF\u7F8A\u8000\u8449\u84C9\u8981\u8B21\u8E0A\u9065\u967D\u990A\u617E\u6291\u6B32\uFFFD\u6C83\u6D74\u7FCC\u7FFC\u6DC0\u7F85\u87BA\u88F8\u6765\u83B1\u983C\u96F7\u6D1B\u7D61\u843D\u916A\u4E71\u5375\u5D50\u6B04\u6FEB\u85CD\u862D\u89A7\u5229\u540F\u5C65\u674E\u68A8\u7406\u7483\u75E2\u88CF\u88E1\u91CC\u96E2\u9678\u5F8B\u7387\u7ACB\u844E\u63A0\u7565\u5289\u6D41\u6E9C\u7409\u7559\u786B\u7C92\u9686\u7ADC\u9F8D\u4FB6\u616E\u65C5\u865C\u4E86\u4EAE\u50DA\u4E21\u51CC\u5BEE\u6599\u6881\u6DBC\u731F\u7642\u77AD\u7A1C\u7CE7\u826F\u8AD2\u907C\u91CF\u9675\u9818\u529B\u7DD1\u502B\u5398\u6797\u6DCB\u71D0\u7433\u81E8\u8F2A\u96A3\u9C57\u9E9F\u7460\u5841\u6D99\u7D2F\u985E\u4EE4\u4F36\u4F8B\u51B7\u52B1\u5DBA\u601C\u73B2\u793C\u82D3\u9234\u96B7\u96F6\u970A\u9E97\u9F62\u66A6\u6B74\u5217\u52A3\u70C8\u88C2\u5EC9\u604B\u6190\u6F23\u7149\u7C3E\u7DF4\u806F\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[151].length; ++j)
                if (D[151][j].charCodeAt(0) !== 65533) {
                    e2[D[151][j]] = 38656 + j;
                    d[38656 + j] = D[151][j];
                }
            D[152] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u84EE\u9023\u932C\u5442\u9B6F\u6AD3\u7089\u8CC2\u8DEF\u9732\u52B4\u5A41\u5ECA\u5F04\u6717\u697C\u6994\u6D6A\u6F0F\u7262\u72FC\u7BED\u8001\u807E\u874B\u90CE\u516D\u9E93\u7984\u808B\u9332\u8AD6\u502D\u548C\u8A71\u6B6A\u8CC4\u8107\u60D1\u67A0\u9DF2\u4E99\u4E98\u9C10\u8A6B\u85C1\u8568\u6900\u6E7E\u7897\u8155\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5F0C\u4E10\u4E15\u4E2A\u4E31\u4E36\u4E3C\u4E3F\u4E42\u4E56\u4E58\u4E82\u4E85\u8C6B\u4E8A\u8212\u5F0D\u4E8E\u4E9E\u4E9F\u4EA0\u4EA2\u4EB0\u4EB3\u4EB6\u4ECE\u4ECD\u4EC4\u4EC6\u4EC2\u4ED7\u4EDE\u4EED\u4EDF\u4EF7\u4F09\u4F5A\u4F30\u4F5B\u4F5D\u4F57\u4F47\u4F76\u4F88\u4F8F\u4F98\u4F7B\u4F69\u4F70\u4F91\u4F6F\u4F86\u4F96\u5118\u4FD4\u4FDF\u4FCE\u4FD8\u4FDB\u4FD1\u4FDA\u4FD0\u4FE4\u4FE5\u501A\u5028\u5014\u502A\u5025\u5005\u4F1C\u4FF6\u5021\u5029\u502C\u4FFE\u4FEF\u5011\u5006\u5043\u5047\u6703\u5055\u5050\u5048\u505A\u5056\u506C\u5078\u5080\u509A\u5085\u50B4\u50B2\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[152].length; ++j)
                if (D[152][j].charCodeAt(0) !== 65533) {
                    e2[D[152][j]] = 38912 + j;
                    d[38912 + j] = D[152][j];
                }
            D[153] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u50C9\u50CA\u50B3\u50C2\u50D6\u50DE\u50E5\u50ED\u50E3\u50EE\u50F9\u50F5\u5109\u5101\u5102\u5116\u5115\u5114\u511A\u5121\u513A\u5137\u513C\u513B\u513F\u5140\u5152\u514C\u5154\u5162\u7AF8\u5169\u516A\u516E\u5180\u5182\u56D8\u518C\u5189\u518F\u5191\u5193\u5195\u5196\u51A4\u51A6\u51A2\u51A9\u51AA\u51AB\u51B3\u51B1\u51B2\u51B0\u51B5\u51BD\u51C5\u51C9\u51DB\u51E0\u8655\u51E9\u51ED\uFFFD\u51F0\u51F5\u51FE\u5204\u520B\u5214\u520E\u5227\u522A\u522E\u5233\u5239\u524F\u5244\u524B\u524C\u525E\u5254\u526A\u5274\u5269\u5273\u527F\u527D\u528D\u5294\u5292\u5271\u5288\u5291\u8FA8\u8FA7\u52AC\u52AD\u52BC\u52B5\u52C1\u52CD\u52D7\u52DE\u52E3\u52E6\u98ED\u52E0\u52F3\u52F5\u52F8\u52F9\u5306\u5308\u7538\u530D\u5310\u530F\u5315\u531A\u5323\u532F\u5331\u5333\u5338\u5340\u5346\u5345\u4E17\u5349\u534D\u51D6\u535E\u5369\u536E\u5918\u537B\u5377\u5382\u5396\u53A0\u53A6\u53A5\u53AE\u53B0\u53B6\u53C3\u7C12\u96D9\u53DF\u66FC\u71EE\u53EE\u53E8\u53ED\u53FA\u5401\u543D\u5440\u542C\u542D\u543C\u542E\u5436\u5429\u541D\u544E\u548F\u5475\u548E\u545F\u5471\u5477\u5470\u5492\u547B\u5480\u5476\u5484\u5490\u5486\u54C7\u54A2\u54B8\u54A5\u54AC\u54C4\u54C8\u54A8\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[153].length; ++j)
                if (D[153][j].charCodeAt(0) !== 65533) {
                    e2[D[153][j]] = 39168 + j;
                    d[39168 + j] = D[153][j];
                }
            D[154] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u54AB\u54C2\u54A4\u54BE\u54BC\u54D8\u54E5\u54E6\u550F\u5514\u54FD\u54EE\u54ED\u54FA\u54E2\u5539\u5540\u5563\u554C\u552E\u555C\u5545\u5556\u5557\u5538\u5533\u555D\u5599\u5580\u54AF\u558A\u559F\u557B\u557E\u5598\u559E\u55AE\u557C\u5583\u55A9\u5587\u55A8\u55DA\u55C5\u55DF\u55C4\u55DC\u55E4\u55D4\u5614\u55F7\u5616\u55FE\u55FD\u561B\u55F9\u564E\u5650\u71DF\u5634\u5636\u5632\u5638\uFFFD\u566B\u5664\u562F\u566C\u566A\u5686\u5680\u568A\u56A0\u5694\u568F\u56A5\u56AE\u56B6\u56B4\u56C2\u56BC\u56C1\u56C3\u56C0\u56C8\u56CE\u56D1\u56D3\u56D7\u56EE\u56F9\u5700\u56FF\u5704\u5709\u5708\u570B\u570D\u5713\u5718\u5716\u55C7\u571C\u5726\u5737\u5738\u574E\u573B\u5740\u574F\u5769\u57C0\u5788\u5761\u577F\u5789\u5793\u57A0\u57B3\u57A4\u57AA\u57B0\u57C3\u57C6\u57D4\u57D2\u57D3\u580A\u57D6\u57E3\u580B\u5819\u581D\u5872\u5821\u5862\u584B\u5870\u6BC0\u5852\u583D\u5879\u5885\u58B9\u589F\u58AB\u58BA\u58DE\u58BB\u58B8\u58AE\u58C5\u58D3\u58D1\u58D7\u58D9\u58D8\u58E5\u58DC\u58E4\u58DF\u58EF\u58FA\u58F9\u58FB\u58FC\u58FD\u5902\u590A\u5910\u591B\u68A6\u5925\u592C\u592D\u5932\u5938\u593E\u7AD2\u5955\u5950\u594E\u595A\u5958\u5962\u5960\u5967\u596C\u5969\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[154].length; ++j)
                if (D[154][j].charCodeAt(0) !== 65533) {
                    e2[D[154][j]] = 39424 + j;
                    d[39424 + j] = D[154][j];
                }
            D[155] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5978\u5981\u599D\u4F5E\u4FAB\u59A3\u59B2\u59C6\u59E8\u59DC\u598D\u59D9\u59DA\u5A25\u5A1F\u5A11\u5A1C\u5A09\u5A1A\u5A40\u5A6C\u5A49\u5A35\u5A36\u5A62\u5A6A\u5A9A\u5ABC\u5ABE\u5ACB\u5AC2\u5ABD\u5AE3\u5AD7\u5AE6\u5AE9\u5AD6\u5AFA\u5AFB\u5B0C\u5B0B\u5B16\u5B32\u5AD0\u5B2A\u5B36\u5B3E\u5B43\u5B45\u5B40\u5B51\u5B55\u5B5A\u5B5B\u5B65\u5B69\u5B70\u5B73\u5B75\u5B78\u6588\u5B7A\u5B80\uFFFD\u5B83\u5BA6\u5BB8\u5BC3\u5BC7\u5BC9\u5BD4\u5BD0\u5BE4\u5BE6\u5BE2\u5BDE\u5BE5\u5BEB\u5BF0\u5BF6\u5BF3\u5C05\u5C07\u5C08\u5C0D\u5C13\u5C20\u5C22\u5C28\u5C38\u5C39\u5C41\u5C46\u5C4E\u5C53\u5C50\u5C4F\u5B71\u5C6C\u5C6E\u4E62\u5C76\u5C79\u5C8C\u5C91\u5C94\u599B\u5CAB\u5CBB\u5CB6\u5CBC\u5CB7\u5CC5\u5CBE\u5CC7\u5CD9\u5CE9\u5CFD\u5CFA\u5CED\u5D8C\u5CEA\u5D0B\u5D15\u5D17\u5D5C\u5D1F\u5D1B\u5D11\u5D14\u5D22\u5D1A\u5D19\u5D18\u5D4C\u5D52\u5D4E\u5D4B\u5D6C\u5D73\u5D76\u5D87\u5D84\u5D82\u5DA2\u5D9D\u5DAC\u5DAE\u5DBD\u5D90\u5DB7\u5DBC\u5DC9\u5DCD\u5DD3\u5DD2\u5DD6\u5DDB\u5DEB\u5DF2\u5DF5\u5E0B\u5E1A\u5E19\u5E11\u5E1B\u5E36\u5E37\u5E44\u5E43\u5E40\u5E4E\u5E57\u5E54\u5E5F\u5E62\u5E64\u5E47\u5E75\u5E76\u5E7A\u9EBC\u5E7F\u5EA0\u5EC1\u5EC2\u5EC8\u5ED0\u5ECF\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[155].length; ++j)
                if (D[155][j].charCodeAt(0) !== 65533) {
                    e2[D[155][j]] = 39680 + j;
                    d[39680 + j] = D[155][j];
                }
            D[156] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5ED6\u5EE3\u5EDD\u5EDA\u5EDB\u5EE2\u5EE1\u5EE8\u5EE9\u5EEC\u5EF1\u5EF3\u5EF0\u5EF4\u5EF8\u5EFE\u5F03\u5F09\u5F5D\u5F5C\u5F0B\u5F11\u5F16\u5F29\u5F2D\u5F38\u5F41\u5F48\u5F4C\u5F4E\u5F2F\u5F51\u5F56\u5F57\u5F59\u5F61\u5F6D\u5F73\u5F77\u5F83\u5F82\u5F7F\u5F8A\u5F88\u5F91\u5F87\u5F9E\u5F99\u5F98\u5FA0\u5FA8\u5FAD\u5FBC\u5FD6\u5FFB\u5FE4\u5FF8\u5FF1\u5FDD\u60B3\u5FFF\u6021\u6060\uFFFD\u6019\u6010\u6029\u600E\u6031\u601B\u6015\u602B\u6026\u600F\u603A\u605A\u6041\u606A\u6077\u605F\u604A\u6046\u604D\u6063\u6043\u6064\u6042\u606C\u606B\u6059\u6081\u608D\u60E7\u6083\u609A\u6084\u609B\u6096\u6097\u6092\u60A7\u608B\u60E1\u60B8\u60E0\u60D3\u60B4\u5FF0\u60BD\u60C6\u60B5\u60D8\u614D\u6115\u6106\u60F6\u60F7\u6100\u60F4\u60FA\u6103\u6121\u60FB\u60F1\u610D\u610E\u6147\u613E\u6128\u6127\u614A\u613F\u613C\u612C\u6134\u613D\u6142\u6144\u6173\u6177\u6158\u6159\u615A\u616B\u6174\u616F\u6165\u6171\u615F\u615D\u6153\u6175\u6199\u6196\u6187\u61AC\u6194\u619A\u618A\u6191\u61AB\u61AE\u61CC\u61CA\u61C9\u61F7\u61C8\u61C3\u61C6\u61BA\u61CB\u7F79\u61CD\u61E6\u61E3\u61F6\u61FA\u61F4\u61FF\u61FD\u61FC\u61FE\u6200\u6208\u6209\u620D\u620C\u6214\u621B\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[156].length; ++j)
                if (D[156][j].charCodeAt(0) !== 65533) {
                    e2[D[156][j]] = 39936 + j;
                    d[39936 + j] = D[156][j];
                }
            D[157] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u621E\u6221\u622A\u622E\u6230\u6232\u6233\u6241\u624E\u625E\u6263\u625B\u6260\u6268\u627C\u6282\u6289\u627E\u6292\u6293\u6296\u62D4\u6283\u6294\u62D7\u62D1\u62BB\u62CF\u62FF\u62C6\u64D4\u62C8\u62DC\u62CC\u62CA\u62C2\u62C7\u629B\u62C9\u630C\u62EE\u62F1\u6327\u6302\u6308\u62EF\u62F5\u6350\u633E\u634D\u641C\u634F\u6396\u638E\u6380\u63AB\u6376\u63A3\u638F\u6389\u639F\u63B5\u636B\uFFFD\u6369\u63BE\u63E9\u63C0\u63C6\u63E3\u63C9\u63D2\u63F6\u63C4\u6416\u6434\u6406\u6413\u6426\u6436\u651D\u6417\u6428\u640F\u6467\u646F\u6476\u644E\u652A\u6495\u6493\u64A5\u64A9\u6488\u64BC\u64DA\u64D2\u64C5\u64C7\u64BB\u64D8\u64C2\u64F1\u64E7\u8209\u64E0\u64E1\u62AC\u64E3\u64EF\u652C\u64F6\u64F4\u64F2\u64FA\u6500\u64FD\u6518\u651C\u6505\u6524\u6523\u652B\u6534\u6535\u6537\u6536\u6538\u754B\u6548\u6556\u6555\u654D\u6558\u655E\u655D\u6572\u6578\u6582\u6583\u8B8A\u659B\u659F\u65AB\u65B7\u65C3\u65C6\u65C1\u65C4\u65CC\u65D2\u65DB\u65D9\u65E0\u65E1\u65F1\u6772\u660A\u6603\u65FB\u6773\u6635\u6636\u6634\u661C\u664F\u6644\u6649\u6641\u665E\u665D\u6664\u6667\u6668\u665F\u6662\u6670\u6683\u6688\u668E\u6689\u6684\u6698\u669D\u66C1\u66B9\u66C9\u66BE\u66BC\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[157].length; ++j)
                if (D[157][j].charCodeAt(0) !== 65533) {
                    e2[D[157][j]] = 40192 + j;
                    d[40192 + j] = D[157][j];
                }
            D[158] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u66C4\u66B8\u66D6\u66DA\u66E0\u663F\u66E6\u66E9\u66F0\u66F5\u66F7\u670F\u6716\u671E\u6726\u6727\u9738\u672E\u673F\u6736\u6741\u6738\u6737\u6746\u675E\u6760\u6759\u6763\u6764\u6789\u6770\u67A9\u677C\u676A\u678C\u678B\u67A6\u67A1\u6785\u67B7\u67EF\u67B4\u67EC\u67B3\u67E9\u67B8\u67E4\u67DE\u67DD\u67E2\u67EE\u67B9\u67CE\u67C6\u67E7\u6A9C\u681E\u6846\u6829\u6840\u684D\u6832\u684E\uFFFD\u68B3\u682B\u6859\u6863\u6877\u687F\u689F\u688F\u68AD\u6894\u689D\u689B\u6883\u6AAE\u68B9\u6874\u68B5\u68A0\u68BA\u690F\u688D\u687E\u6901\u68CA\u6908\u68D8\u6922\u6926\u68E1\u690C\u68CD\u68D4\u68E7\u68D5\u6936\u6912\u6904\u68D7\u68E3\u6925\u68F9\u68E0\u68EF\u6928\u692A\u691A\u6923\u6921\u68C6\u6979\u6977\u695C\u6978\u696B\u6954\u697E\u696E\u6939\u6974\u693D\u6959\u6930\u6961\u695E\u695D\u6981\u696A\u69B2\u69AE\u69D0\u69BF\u69C1\u69D3\u69BE\u69CE\u5BE8\u69CA\u69DD\u69BB\u69C3\u69A7\u6A2E\u6991\u69A0\u699C\u6995\u69B4\u69DE\u69E8\u6A02\u6A1B\u69FF\u6B0A\u69F9\u69F2\u69E7\u6A05\u69B1\u6A1E\u69ED\u6A14\u69EB\u6A0A\u6A12\u6AC1\u6A23\u6A13\u6A44\u6A0C\u6A72\u6A36\u6A78\u6A47\u6A62\u6A59\u6A66\u6A48\u6A38\u6A22\u6A90\u6A8D\u6AA0\u6A84\u6AA2\u6AA3\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[158].length; ++j)
                if (D[158][j].charCodeAt(0) !== 65533) {
                    e2[D[158][j]] = 40448 + j;
                    d[40448 + j] = D[158][j];
                }
            D[159] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6A97\u8617\u6ABB\u6AC3\u6AC2\u6AB8\u6AB3\u6AAC\u6ADE\u6AD1\u6ADF\u6AAA\u6ADA\u6AEA\u6AFB\u6B05\u8616\u6AFA\u6B12\u6B16\u9B31\u6B1F\u6B38\u6B37\u76DC\u6B39\u98EE\u6B47\u6B43\u6B49\u6B50\u6B59\u6B54\u6B5B\u6B5F\u6B61\u6B78\u6B79\u6B7F\u6B80\u6B84\u6B83\u6B8D\u6B98\u6B95\u6B9E\u6BA4\u6BAA\u6BAB\u6BAF\u6BB2\u6BB1\u6BB3\u6BB7\u6BBC\u6BC6\u6BCB\u6BD3\u6BDF\u6BEC\u6BEB\u6BF3\u6BEF\uFFFD\u9EBE\u6C08\u6C13\u6C14\u6C1B\u6C24\u6C23\u6C5E\u6C55\u6C62\u6C6A\u6C82\u6C8D\u6C9A\u6C81\u6C9B\u6C7E\u6C68\u6C73\u6C92\u6C90\u6CC4\u6CF1\u6CD3\u6CBD\u6CD7\u6CC5\u6CDD\u6CAE\u6CB1\u6CBE\u6CBA\u6CDB\u6CEF\u6CD9\u6CEA\u6D1F\u884D\u6D36\u6D2B\u6D3D\u6D38\u6D19\u6D35\u6D33\u6D12\u6D0C\u6D63\u6D93\u6D64\u6D5A\u6D79\u6D59\u6D8E\u6D95\u6FE4\u6D85\u6DF9\u6E15\u6E0A\u6DB5\u6DC7\u6DE6\u6DB8\u6DC6\u6DEC\u6DDE\u6DCC\u6DE8\u6DD2\u6DC5\u6DFA\u6DD9\u6DE4\u6DD5\u6DEA\u6DEE\u6E2D\u6E6E\u6E2E\u6E19\u6E72\u6E5F\u6E3E\u6E23\u6E6B\u6E2B\u6E76\u6E4D\u6E1F\u6E43\u6E3A\u6E4E\u6E24\u6EFF\u6E1D\u6E38\u6E82\u6EAA\u6E98\u6EC9\u6EB7\u6ED3\u6EBD\u6EAF\u6EC4\u6EB2\u6ED4\u6ED5\u6E8F\u6EA5\u6EC2\u6E9F\u6F41\u6F11\u704C\u6EEC\u6EF8\u6EFE\u6F3F\u6EF2\u6F31\u6EEF\u6F32\u6ECC\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[159].length; ++j)
                if (D[159][j].charCodeAt(0) !== 65533) {
                    e2[D[159][j]] = 40704 + j;
                    d[40704 + j] = D[159][j];
                }
            D[224] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6F3E\u6F13\u6EF7\u6F86\u6F7A\u6F78\u6F81\u6F80\u6F6F\u6F5B\u6FF3\u6F6D\u6F82\u6F7C\u6F58\u6F8E\u6F91\u6FC2\u6F66\u6FB3\u6FA3\u6FA1\u6FA4\u6FB9\u6FC6\u6FAA\u6FDF\u6FD5\u6FEC\u6FD4\u6FD8\u6FF1\u6FEE\u6FDB\u7009\u700B\u6FFA\u7011\u7001\u700F\u6FFE\u701B\u701A\u6F74\u701D\u7018\u701F\u7030\u703E\u7032\u7051\u7063\u7099\u7092\u70AF\u70F1\u70AC\u70B8\u70B3\u70AE\u70DF\u70CB\u70DD\uFFFD\u70D9\u7109\u70FD\u711C\u7119\u7165\u7155\u7188\u7166\u7162\u714C\u7156\u716C\u718F\u71FB\u7184\u7195\u71A8\u71AC\u71D7\u71B9\u71BE\u71D2\u71C9\u71D4\u71CE\u71E0\u71EC\u71E7\u71F5\u71FC\u71F9\u71FF\u720D\u7210\u721B\u7228\u722D\u722C\u7230\u7232\u723B\u723C\u723F\u7240\u7246\u724B\u7258\u7274\u727E\u7282\u7281\u7287\u7292\u7296\u72A2\u72A7\u72B9\u72B2\u72C3\u72C6\u72C4\u72CE\u72D2\u72E2\u72E0\u72E1\u72F9\u72F7\u500F\u7317\u730A\u731C\u7316\u731D\u7334\u732F\u7329\u7325\u733E\u734E\u734F\u9ED8\u7357\u736A\u7368\u7370\u7378\u7375\u737B\u737A\u73C8\u73B3\u73CE\u73BB\u73C0\u73E5\u73EE\u73DE\u74A2\u7405\u746F\u7425\u73F8\u7432\u743A\u7455\u743F\u745F\u7459\u7441\u745C\u7469\u7470\u7463\u746A\u7476\u747E\u748B\u749E\u74A7\u74CA\u74CF\u74D4\u73F1\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[224].length; ++j)
                if (D[224][j].charCodeAt(0) !== 65533) {
                    e2[D[224][j]] = 57344 + j;
                    d[57344 + j] = D[224][j];
                }
            D[225] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u74E0\u74E3\u74E7\u74E9\u74EE\u74F2\u74F0\u74F1\u74F8\u74F7\u7504\u7503\u7505\u750C\u750E\u750D\u7515\u7513\u751E\u7526\u752C\u753C\u7544\u754D\u754A\u7549\u755B\u7546\u755A\u7569\u7564\u7567\u756B\u756D\u7578\u7576\u7586\u7587\u7574\u758A\u7589\u7582\u7594\u759A\u759D\u75A5\u75A3\u75C2\u75B3\u75C3\u75B5\u75BD\u75B8\u75BC\u75B1\u75CD\u75CA\u75D2\u75D9\u75E3\u75DE\u75FE\u75FF\uFFFD\u75FC\u7601\u75F0\u75FA\u75F2\u75F3\u760B\u760D\u7609\u761F\u7627\u7620\u7621\u7622\u7624\u7634\u7630\u763B\u7647\u7648\u7646\u765C\u7658\u7661\u7662\u7668\u7669\u766A\u7667\u766C\u7670\u7672\u7676\u7678\u767C\u7680\u7683\u7688\u768B\u768E\u7696\u7693\u7699\u769A\u76B0\u76B4\u76B8\u76B9\u76BA\u76C2\u76CD\u76D6\u76D2\u76DE\u76E1\u76E5\u76E7\u76EA\u862F\u76FB\u7708\u7707\u7704\u7729\u7724\u771E\u7725\u7726\u771B\u7737\u7738\u7747\u775A\u7768\u776B\u775B\u7765\u777F\u777E\u7779\u778E\u778B\u7791\u77A0\u779E\u77B0\u77B6\u77B9\u77BF\u77BC\u77BD\u77BB\u77C7\u77CD\u77D7\u77DA\u77DC\u77E3\u77EE\u77FC\u780C\u7812\u7926\u7820\u792A\u7845\u788E\u7874\u7886\u787C\u789A\u788C\u78A3\u78B5\u78AA\u78AF\u78D1\u78C6\u78CB\u78D4\u78BE\u78BC\u78C5\u78CA\u78EC\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[225].length; ++j)
                if (D[225][j].charCodeAt(0) !== 65533) {
                    e2[D[225][j]] = 57600 + j;
                    d[57600 + j] = D[225][j];
                }
            D[226] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u78E7\u78DA\u78FD\u78F4\u7907\u7912\u7911\u7919\u792C\u792B\u7940\u7960\u7957\u795F\u795A\u7955\u7953\u797A\u797F\u798A\u799D\u79A7\u9F4B\u79AA\u79AE\u79B3\u79B9\u79BA\u79C9\u79D5\u79E7\u79EC\u79E1\u79E3\u7A08\u7A0D\u7A18\u7A19\u7A20\u7A1F\u7980\u7A31\u7A3B\u7A3E\u7A37\u7A43\u7A57\u7A49\u7A61\u7A62\u7A69\u9F9D\u7A70\u7A79\u7A7D\u7A88\u7A97\u7A95\u7A98\u7A96\u7AA9\u7AC8\u7AB0\uFFFD\u7AB6\u7AC5\u7AC4\u7ABF\u9083\u7AC7\u7ACA\u7ACD\u7ACF\u7AD5\u7AD3\u7AD9\u7ADA\u7ADD\u7AE1\u7AE2\u7AE6\u7AED\u7AF0\u7B02\u7B0F\u7B0A\u7B06\u7B33\u7B18\u7B19\u7B1E\u7B35\u7B28\u7B36\u7B50\u7B7A\u7B04\u7B4D\u7B0B\u7B4C\u7B45\u7B75\u7B65\u7B74\u7B67\u7B70\u7B71\u7B6C\u7B6E\u7B9D\u7B98\u7B9F\u7B8D\u7B9C\u7B9A\u7B8B\u7B92\u7B8F\u7B5D\u7B99\u7BCB\u7BC1\u7BCC\u7BCF\u7BB4\u7BC6\u7BDD\u7BE9\u7C11\u7C14\u7BE6\u7BE5\u7C60\u7C00\u7C07\u7C13\u7BF3\u7BF7\u7C17\u7C0D\u7BF6\u7C23\u7C27\u7C2A\u7C1F\u7C37\u7C2B\u7C3D\u7C4C\u7C43\u7C54\u7C4F\u7C40\u7C50\u7C58\u7C5F\u7C64\u7C56\u7C65\u7C6C\u7C75\u7C83\u7C90\u7CA4\u7CAD\u7CA2\u7CAB\u7CA1\u7CA8\u7CB3\u7CB2\u7CB1\u7CAE\u7CB9\u7CBD\u7CC0\u7CC5\u7CC2\u7CD8\u7CD2\u7CDC\u7CE2\u9B3B\u7CEF\u7CF2\u7CF4\u7CF6\u7CFA\u7D06\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[226].length; ++j)
                if (D[226][j].charCodeAt(0) !== 65533) {
                    e2[D[226][j]] = 57856 + j;
                    d[57856 + j] = D[226][j];
                }
            D[227] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7D02\u7D1C\u7D15\u7D0A\u7D45\u7D4B\u7D2E\u7D32\u7D3F\u7D35\u7D46\u7D73\u7D56\u7D4E\u7D72\u7D68\u7D6E\u7D4F\u7D63\u7D93\u7D89\u7D5B\u7D8F\u7D7D\u7D9B\u7DBA\u7DAE\u7DA3\u7DB5\u7DC7\u7DBD\u7DAB\u7E3D\u7DA2\u7DAF\u7DDC\u7DB8\u7D9F\u7DB0\u7DD8\u7DDD\u7DE4\u7DDE\u7DFB\u7DF2\u7DE1\u7E05\u7E0A\u7E23\u7E21\u7E12\u7E31\u7E1F\u7E09\u7E0B\u7E22\u7E46\u7E66\u7E3B\u7E35\u7E39\u7E43\u7E37\uFFFD\u7E32\u7E3A\u7E67\u7E5D\u7E56\u7E5E\u7E59\u7E5A\u7E79\u7E6A\u7E69\u7E7C\u7E7B\u7E83\u7DD5\u7E7D\u8FAE\u7E7F\u7E88\u7E89\u7E8C\u7E92\u7E90\u7E93\u7E94\u7E96\u7E8E\u7E9B\u7E9C\u7F38\u7F3A\u7F45\u7F4C\u7F4D\u7F4E\u7F50\u7F51\u7F55\u7F54\u7F58\u7F5F\u7F60\u7F68\u7F69\u7F67\u7F78\u7F82\u7F86\u7F83\u7F88\u7F87\u7F8C\u7F94\u7F9E\u7F9D\u7F9A\u7FA3\u7FAF\u7FB2\u7FB9\u7FAE\u7FB6\u7FB8\u8B71\u7FC5\u7FC6\u7FCA\u7FD5\u7FD4\u7FE1\u7FE6\u7FE9\u7FF3\u7FF9\u98DC\u8006\u8004\u800B\u8012\u8018\u8019\u801C\u8021\u8028\u803F\u803B\u804A\u8046\u8052\u8058\u805A\u805F\u8062\u8068\u8073\u8072\u8070\u8076\u8079\u807D\u807F\u8084\u8086\u8085\u809B\u8093\u809A\u80AD\u5190\u80AC\u80DB\u80E5\u80D9\u80DD\u80C4\u80DA\u80D6\u8109\u80EF\u80F1\u811B\u8129\u8123\u812F\u814B\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[227].length; ++j)
                if (D[227][j].charCodeAt(0) !== 65533) {
                    e2[D[227][j]] = 58112 + j;
                    d[58112 + j] = D[227][j];
                }
            D[228] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u968B\u8146\u813E\u8153\u8151\u80FC\u8171\u816E\u8165\u8166\u8174\u8183\u8188\u818A\u8180\u8182\u81A0\u8195\u81A4\u81A3\u815F\u8193\u81A9\u81B0\u81B5\u81BE\u81B8\u81BD\u81C0\u81C2\u81BA\u81C9\u81CD\u81D1\u81D9\u81D8\u81C8\u81DA\u81DF\u81E0\u81E7\u81FA\u81FB\u81FE\u8201\u8202\u8205\u8207\u820A\u820D\u8210\u8216\u8229\u822B\u8238\u8233\u8240\u8259\u8258\u825D\u825A\u825F\u8264\uFFFD\u8262\u8268\u826A\u826B\u822E\u8271\u8277\u8278\u827E\u828D\u8292\u82AB\u829F\u82BB\u82AC\u82E1\u82E3\u82DF\u82D2\u82F4\u82F3\u82FA\u8393\u8303\u82FB\u82F9\u82DE\u8306\u82DC\u8309\u82D9\u8335\u8334\u8316\u8332\u8331\u8340\u8339\u8350\u8345\u832F\u832B\u8317\u8318\u8385\u839A\u83AA\u839F\u83A2\u8396\u8323\u838E\u8387\u838A\u837C\u83B5\u8373\u8375\u83A0\u8389\u83A8\u83F4\u8413\u83EB\u83CE\u83FD\u8403\u83D8\u840B\u83C1\u83F7\u8407\u83E0\u83F2\u840D\u8422\u8420\u83BD\u8438\u8506\u83FB\u846D\u842A\u843C\u855A\u8484\u8477\u846B\u84AD\u846E\u8482\u8469\u8446\u842C\u846F\u8479\u8435\u84CA\u8462\u84B9\u84BF\u849F\u84D9\u84CD\u84BB\u84DA\u84D0\u84C1\u84C6\u84D6\u84A1\u8521\u84FF\u84F4\u8517\u8518\u852C\u851F\u8515\u8514\u84FC\u8540\u8563\u8558\u8548\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[228].length; ++j)
                if (D[228][j].charCodeAt(0) !== 65533) {
                    e2[D[228][j]] = 58368 + j;
                    d[58368 + j] = D[228][j];
                }
            D[229] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8541\u8602\u854B\u8555\u8580\u85A4\u8588\u8591\u858A\u85A8\u856D\u8594\u859B\u85EA\u8587\u859C\u8577\u857E\u8590\u85C9\u85BA\u85CF\u85B9\u85D0\u85D5\u85DD\u85E5\u85DC\u85F9\u860A\u8613\u860B\u85FE\u85FA\u8606\u8622\u861A\u8630\u863F\u864D\u4E55\u8654\u865F\u8667\u8671\u8693\u86A3\u86A9\u86AA\u868B\u868C\u86B6\u86AF\u86C4\u86C6\u86B0\u86C9\u8823\u86AB\u86D4\u86DE\u86E9\u86EC\uFFFD\u86DF\u86DB\u86EF\u8712\u8706\u8708\u8700\u8703\u86FB\u8711\u8709\u870D\u86F9\u870A\u8734\u873F\u8737\u873B\u8725\u8729\u871A\u8760\u875F\u8778\u874C\u874E\u8774\u8757\u8768\u876E\u8759\u8753\u8763\u876A\u8805\u87A2\u879F\u8782\u87AF\u87CB\u87BD\u87C0\u87D0\u96D6\u87AB\u87C4\u87B3\u87C7\u87C6\u87BB\u87EF\u87F2\u87E0\u880F\u880D\u87FE\u87F6\u87F7\u880E\u87D2\u8811\u8816\u8815\u8822\u8821\u8831\u8836\u8839\u8827\u883B\u8844\u8842\u8852\u8859\u885E\u8862\u886B\u8881\u887E\u889E\u8875\u887D\u88B5\u8872\u8882\u8897\u8892\u88AE\u8899\u88A2\u888D\u88A4\u88B0\u88BF\u88B1\u88C3\u88C4\u88D4\u88D8\u88D9\u88DD\u88F9\u8902\u88FC\u88F4\u88E8\u88F2\u8904\u890C\u890A\u8913\u8943\u891E\u8925\u892A\u892B\u8941\u8944\u893B\u8936\u8938\u894C\u891D\u8960\u895E\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[229].length; ++j)
                if (D[229][j].charCodeAt(0) !== 65533) {
                    e2[D[229][j]] = 58624 + j;
                    d[58624 + j] = D[229][j];
                }
            D[230] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8966\u8964\u896D\u896A\u896F\u8974\u8977\u897E\u8983\u8988\u898A\u8993\u8998\u89A1\u89A9\u89A6\u89AC\u89AF\u89B2\u89BA\u89BD\u89BF\u89C0\u89DA\u89DC\u89DD\u89E7\u89F4\u89F8\u8A03\u8A16\u8A10\u8A0C\u8A1B\u8A1D\u8A25\u8A36\u8A41\u8A5B\u8A52\u8A46\u8A48\u8A7C\u8A6D\u8A6C\u8A62\u8A85\u8A82\u8A84\u8AA8\u8AA1\u8A91\u8AA5\u8AA6\u8A9A\u8AA3\u8AC4\u8ACD\u8AC2\u8ADA\u8AEB\u8AF3\u8AE7\uFFFD\u8AE4\u8AF1\u8B14\u8AE0\u8AE2\u8AF7\u8ADE\u8ADB\u8B0C\u8B07\u8B1A\u8AE1\u8B16\u8B10\u8B17\u8B20\u8B33\u97AB\u8B26\u8B2B\u8B3E\u8B28\u8B41\u8B4C\u8B4F\u8B4E\u8B49\u8B56\u8B5B\u8B5A\u8B6B\u8B5F\u8B6C\u8B6F\u8B74\u8B7D\u8B80\u8B8C\u8B8E\u8B92\u8B93\u8B96\u8B99\u8B9A\u8C3A\u8C41\u8C3F\u8C48\u8C4C\u8C4E\u8C50\u8C55\u8C62\u8C6C\u8C78\u8C7A\u8C82\u8C89\u8C85\u8C8A\u8C8D\u8C8E\u8C94\u8C7C\u8C98\u621D\u8CAD\u8CAA\u8CBD\u8CB2\u8CB3\u8CAE\u8CB6\u8CC8\u8CC1\u8CE4\u8CE3\u8CDA\u8CFD\u8CFA\u8CFB\u8D04\u8D05\u8D0A\u8D07\u8D0F\u8D0D\u8D10\u9F4E\u8D13\u8CCD\u8D14\u8D16\u8D67\u8D6D\u8D71\u8D73\u8D81\u8D99\u8DC2\u8DBE\u8DBA\u8DCF\u8DDA\u8DD6\u8DCC\u8DDB\u8DCB\u8DEA\u8DEB\u8DDF\u8DE3\u8DFC\u8E08\u8E09\u8DFF\u8E1D\u8E1E\u8E10\u8E1F\u8E42\u8E35\u8E30\u8E34\u8E4A\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[230].length; ++j)
                if (D[230][j].charCodeAt(0) !== 65533) {
                    e2[D[230][j]] = 58880 + j;
                    d[58880 + j] = D[230][j];
                }
            D[231] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8E47\u8E49\u8E4C\u8E50\u8E48\u8E59\u8E64\u8E60\u8E2A\u8E63\u8E55\u8E76\u8E72\u8E7C\u8E81\u8E87\u8E85\u8E84\u8E8B\u8E8A\u8E93\u8E91\u8E94\u8E99\u8EAA\u8EA1\u8EAC\u8EB0\u8EC6\u8EB1\u8EBE\u8EC5\u8EC8\u8ECB\u8EDB\u8EE3\u8EFC\u8EFB\u8EEB\u8EFE\u8F0A\u8F05\u8F15\u8F12\u8F19\u8F13\u8F1C\u8F1F\u8F1B\u8F0C\u8F26\u8F33\u8F3B\u8F39\u8F45\u8F42\u8F3E\u8F4C\u8F49\u8F46\u8F4E\u8F57\u8F5C\uFFFD\u8F62\u8F63\u8F64\u8F9C\u8F9F\u8FA3\u8FAD\u8FAF\u8FB7\u8FDA\u8FE5\u8FE2\u8FEA\u8FEF\u9087\u8FF4\u9005\u8FF9\u8FFA\u9011\u9015\u9021\u900D\u901E\u9016\u900B\u9027\u9036\u9035\u9039\u8FF8\u904F\u9050\u9051\u9052\u900E\u9049\u903E\u9056\u9058\u905E\u9068\u906F\u9076\u96A8\u9072\u9082\u907D\u9081\u9080\u908A\u9089\u908F\u90A8\u90AF\u90B1\u90B5\u90E2\u90E4\u6248\u90DB\u9102\u9112\u9119\u9132\u9130\u914A\u9156\u9158\u9163\u9165\u9169\u9173\u9172\u918B\u9189\u9182\u91A2\u91AB\u91AF\u91AA\u91B5\u91B4\u91BA\u91C0\u91C1\u91C9\u91CB\u91D0\u91D6\u91DF\u91E1\u91DB\u91FC\u91F5\u91F6\u921E\u91FF\u9214\u922C\u9215\u9211\u925E\u9257\u9245\u9249\u9264\u9248\u9295\u923F\u924B\u9250\u929C\u9296\u9293\u929B\u925A\u92CF\u92B9\u92B7\u92E9\u930F\u92FA\u9344\u932E\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[231].length; ++j)
                if (D[231][j].charCodeAt(0) !== 65533) {
                    e2[D[231][j]] = 59136 + j;
                    d[59136 + j] = D[231][j];
                }
            D[232] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9319\u9322\u931A\u9323\u933A\u9335\u933B\u935C\u9360\u937C\u936E\u9356\u93B0\u93AC\u93AD\u9394\u93B9\u93D6\u93D7\u93E8\u93E5\u93D8\u93C3\u93DD\u93D0\u93C8\u93E4\u941A\u9414\u9413\u9403\u9407\u9410\u9436\u942B\u9435\u9421\u943A\u9441\u9452\u9444\u945B\u9460\u9462\u945E\u946A\u9229\u9470\u9475\u9477\u947D\u945A\u947C\u947E\u9481\u947F\u9582\u9587\u958A\u9594\u9596\u9598\u9599\uFFFD\u95A0\u95A8\u95A7\u95AD\u95BC\u95BB\u95B9\u95BE\u95CA\u6FF6\u95C3\u95CD\u95CC\u95D5\u95D4\u95D6\u95DC\u95E1\u95E5\u95E2\u9621\u9628\u962E\u962F\u9642\u964C\u964F\u964B\u9677\u965C\u965E\u965D\u965F\u9666\u9672\u966C\u968D\u9698\u9695\u9697\u96AA\u96A7\u96B1\u96B2\u96B0\u96B4\u96B6\u96B8\u96B9\u96CE\u96CB\u96C9\u96CD\u894D\u96DC\u970D\u96D5\u96F9\u9704\u9706\u9708\u9713\u970E\u9711\u970F\u9716\u9719\u9724\u972A\u9730\u9739\u973D\u973E\u9744\u9746\u9748\u9742\u9749\u975C\u9760\u9764\u9766\u9768\u52D2\u976B\u9771\u9779\u9785\u977C\u9781\u977A\u9786\u978B\u978F\u9790\u979C\u97A8\u97A6\u97A3\u97B3\u97B4\u97C3\u97C6\u97C8\u97CB\u97DC\u97ED\u9F4F\u97F2\u7ADF\u97F6\u97F5\u980F\u980C\u9838\u9824\u9821\u9837\u983D\u9846\u984F\u984B\u986B\u986F\u9870\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[232].length; ++j)
                if (D[232][j].charCodeAt(0) !== 65533) {
                    e2[D[232][j]] = 59392 + j;
                    d[59392 + j] = D[232][j];
                }
            D[233] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9871\u9874\u9873\u98AA\u98AF\u98B1\u98B6\u98C4\u98C3\u98C6\u98E9\u98EB\u9903\u9909\u9912\u9914\u9918\u9921\u991D\u991E\u9924\u9920\u992C\u992E\u993D\u993E\u9942\u9949\u9945\u9950\u994B\u9951\u9952\u994C\u9955\u9997\u9998\u99A5\u99AD\u99AE\u99BC\u99DF\u99DB\u99DD\u99D8\u99D1\u99ED\u99EE\u99F1\u99F2\u99FB\u99F8\u9A01\u9A0F\u9A05\u99E2\u9A19\u9A2B\u9A37\u9A45\u9A42\u9A40\u9A43\uFFFD\u9A3E\u9A55\u9A4D\u9A5B\u9A57\u9A5F\u9A62\u9A65\u9A64\u9A69\u9A6B\u9A6A\u9AAD\u9AB0\u9ABC\u9AC0\u9ACF\u9AD1\u9AD3\u9AD4\u9ADE\u9ADF\u9AE2\u9AE3\u9AE6\u9AEF\u9AEB\u9AEE\u9AF4\u9AF1\u9AF7\u9AFB\u9B06\u9B18\u9B1A\u9B1F\u9B22\u9B23\u9B25\u9B27\u9B28\u9B29\u9B2A\u9B2E\u9B2F\u9B32\u9B44\u9B43\u9B4F\u9B4D\u9B4E\u9B51\u9B58\u9B74\u9B93\u9B83\u9B91\u9B96\u9B97\u9B9F\u9BA0\u9BA8\u9BB4\u9BC0\u9BCA\u9BB9\u9BC6\u9BCF\u9BD1\u9BD2\u9BE3\u9BE2\u9BE4\u9BD4\u9BE1\u9C3A\u9BF2\u9BF1\u9BF0\u9C15\u9C14\u9C09\u9C13\u9C0C\u9C06\u9C08\u9C12\u9C0A\u9C04\u9C2E\u9C1B\u9C25\u9C24\u9C21\u9C30\u9C47\u9C32\u9C46\u9C3E\u9C5A\u9C60\u9C67\u9C76\u9C78\u9CE7\u9CEC\u9CF0\u9D09\u9D08\u9CEB\u9D03\u9D06\u9D2A\u9D26\u9DAF\u9D23\u9D1F\u9D44\u9D15\u9D12\u9D41\u9D3F\u9D3E\u9D46\u9D48\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[233].length; ++j)
                if (D[233][j].charCodeAt(0) !== 65533) {
                    e2[D[233][j]] = 59648 + j;
                    d[59648 + j] = D[233][j];
                }
            D[234] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9D5D\u9D5E\u9D64\u9D51\u9D50\u9D59\u9D72\u9D89\u9D87\u9DAB\u9D6F\u9D7A\u9D9A\u9DA4\u9DA9\u9DB2\u9DC4\u9DC1\u9DBB\u9DB8\u9DBA\u9DC6\u9DCF\u9DC2\u9DD9\u9DD3\u9DF8\u9DE6\u9DED\u9DEF\u9DFD\u9E1A\u9E1B\u9E1E\u9E75\u9E79\u9E7D\u9E81\u9E88\u9E8B\u9E8C\u9E92\u9E95\u9E91\u9E9D\u9EA5\u9EA9\u9EB8\u9EAA\u9EAD\u9761\u9ECC\u9ECE\u9ECF\u9ED0\u9ED4\u9EDC\u9EDE\u9EDD\u9EE0\u9EE5\u9EE8\u9EEF\uFFFD\u9EF4\u9EF6\u9EF7\u9EF9\u9EFB\u9EFC\u9EFD\u9F07\u9F08\u76B7\u9F15\u9F21\u9F2C\u9F3E\u9F4A\u9F52\u9F54\u9F63\u9F5F\u9F60\u9F61\u9F66\u9F67\u9F6C\u9F6A\u9F77\u9F72\u9F76\u9F95\u9F9C\u9FA0\u582F\u69C7\u9059\u7464\u51DC\u7199\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[234].length; ++j)
                if (D[234][j].charCodeAt(0) !== 65533) {
                    e2[D[234][j]] = 59904 + j;
                    d[59904 + j] = D[234][j];
                }
            D[237] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7E8A\u891C\u9348\u9288\u84DC\u4FC9\u70BB\u6631\u68C8\u92F9\u66FB\u5F45\u4E28\u4EE1\u4EFC\u4F00\u4F03\u4F39\u4F56\u4F92\u4F8A\u4F9A\u4F94\u4FCD\u5040\u5022\u4FFF\u501E\u5046\u5070\u5042\u5094\u50F4\u50D8\u514A\u5164\u519D\u51BE\u51EC\u5215\u529C\u52A6\u52C0\u52DB\u5300\u5307\u5324\u5372\u5393\u53B2\u53DD\uFA0E\u549C\u548A\u54A9\u54FF\u5586\u5759\u5765\u57AC\u57C8\u57C7\uFA0F\uFFFD\uFA10\u589E\u58B2\u590B\u5953\u595B\u595D\u5963\u59A4\u59BA\u5B56\u5BC0\u752F\u5BD8\u5BEC\u5C1E\u5CA6\u5CBA\u5CF5\u5D27\u5D53\uFA11\u5D42\u5D6D\u5DB8\u5DB9\u5DD0\u5F21\u5F34\u5F67\u5FB7\u5FDE\u605D\u6085\u608A\u60DE\u60D5\u6120\u60F2\u6111\u6137\u6130\u6198\u6213\u62A6\u63F5\u6460\u649D\u64CE\u654E\u6600\u6615\u663B\u6609\u662E\u661E\u6624\u6665\u6657\u6659\uFA12\u6673\u6699\u66A0\u66B2\u66BF\u66FA\u670E\uF929\u6766\u67BB\u6852\u67C0\u6801\u6844\u68CF\uFA13\u6968\uFA14\u6998\u69E2\u6A30\u6A6B\u6A46\u6A73\u6A7E\u6AE2\u6AE4\u6BD6\u6C3F\u6C5C\u6C86\u6C6F\u6CDA\u6D04\u6D87\u6D6F\u6D96\u6DAC\u6DCF\u6DF8\u6DF2\u6DFC\u6E39\u6E5C\u6E27\u6E3C\u6EBF\u6F88\u6FB5\u6FF5\u7005\u7007\u7028\u7085\u70AB\u710F\u7104\u715C\u7146\u7147\uFA15\u71C1\u71FE\u72B1\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[237].length; ++j)
                if (D[237][j].charCodeAt(0) !== 65533) {
                    e2[D[237][j]] = 60672 + j;
                    d[60672 + j] = D[237][j];
                }
            D[238] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u72BE\u7324\uFA16\u7377\u73BD\u73C9\u73D6\u73E3\u73D2\u7407\u73F5\u7426\u742A\u7429\u742E\u7462\u7489\u749F\u7501\u756F\u7682\u769C\u769E\u769B\u76A6\uFA17\u7746\u52AF\u7821\u784E\u7864\u787A\u7930\uFA18\uFA19\uFA1A\u7994\uFA1B\u799B\u7AD1\u7AE7\uFA1C\u7AEB\u7B9E\uFA1D\u7D48\u7D5C\u7DB7\u7DA0\u7DD6\u7E52\u7F47\u7FA1\uFA1E\u8301\u8362\u837F\u83C7\u83F6\u8448\u84B4\u8553\u8559\uFFFD\u856B\uFA1F\u85B0\uFA20\uFA21\u8807\u88F5\u8A12\u8A37\u8A79\u8AA7\u8ABE\u8ADF\uFA22\u8AF6\u8B53\u8B7F\u8CF0\u8CF4\u8D12\u8D76\uFA23\u8ECF\uFA24\uFA25\u9067\u90DE\uFA26\u9115\u9127\u91DA\u91D7\u91DE\u91ED\u91EE\u91E4\u91E5\u9206\u9210\u920A\u923A\u9240\u923C\u924E\u9259\u9251\u9239\u9267\u92A7\u9277\u9278\u92E7\u92D7\u92D9\u92D0\uFA27\u92D5\u92E0\u92D3\u9325\u9321\u92FB\uFA28\u931E\u92FF\u931D\u9302\u9370\u9357\u93A4\u93C6\u93DE\u93F8\u9431\u9445\u9448\u9592\uF9DC\uFA29\u969D\u96AF\u9733\u973B\u9743\u974D\u974F\u9751\u9755\u9857\u9865\uFA2A\uFA2B\u9927\uFA2C\u999E\u9A4E\u9AD9\u9ADC\u9B75\u9B72\u9B8F\u9BB1\u9BBB\u9C00\u9D70\u9D6B\uFA2D\u9E19\u9ED1\uFFFD\uFFFD\u2170\u2171\u2172\u2173\u2174\u2175\u2176\u2177\u2178\u2179\uFFE2\uFFE4\uFF07\uFF02\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[238].length; ++j)
                if (D[238][j].charCodeAt(0) !== 65533) {
                    e2[D[238][j]] = 60928 + j;
                    d[60928 + j] = D[238][j];
                }
            D[250] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2170\u2171\u2172\u2173\u2174\u2175\u2176\u2177\u2178\u2179\u2160\u2161\u2162\u2163\u2164\u2165\u2166\u2167\u2168\u2169\uFFE2\uFFE4\uFF07\uFF02\u3231\u2116\u2121\u2235\u7E8A\u891C\u9348\u9288\u84DC\u4FC9\u70BB\u6631\u68C8\u92F9\u66FB\u5F45\u4E28\u4EE1\u4EFC\u4F00\u4F03\u4F39\u4F56\u4F92\u4F8A\u4F9A\u4F94\u4FCD\u5040\u5022\u4FFF\u501E\u5046\u5070\u5042\u5094\u50F4\u50D8\u514A\uFFFD\u5164\u519D\u51BE\u51EC\u5215\u529C\u52A6\u52C0\u52DB\u5300\u5307\u5324\u5372\u5393\u53B2\u53DD\uFA0E\u549C\u548A\u54A9\u54FF\u5586\u5759\u5765\u57AC\u57C8\u57C7\uFA0F\uFA10\u589E\u58B2\u590B\u5953\u595B\u595D\u5963\u59A4\u59BA\u5B56\u5BC0\u752F\u5BD8\u5BEC\u5C1E\u5CA6\u5CBA\u5CF5\u5D27\u5D53\uFA11\u5D42\u5D6D\u5DB8\u5DB9\u5DD0\u5F21\u5F34\u5F67\u5FB7\u5FDE\u605D\u6085\u608A\u60DE\u60D5\u6120\u60F2\u6111\u6137\u6130\u6198\u6213\u62A6\u63F5\u6460\u649D\u64CE\u654E\u6600\u6615\u663B\u6609\u662E\u661E\u6624\u6665\u6657\u6659\uFA12\u6673\u6699\u66A0\u66B2\u66BF\u66FA\u670E\uF929\u6766\u67BB\u6852\u67C0\u6801\u6844\u68CF\uFA13\u6968\uFA14\u6998\u69E2\u6A30\u6A6B\u6A46\u6A73\u6A7E\u6AE2\u6AE4\u6BD6\u6C3F\u6C5C\u6C86\u6C6F\u6CDA\u6D04\u6D87\u6D6F\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[250].length; ++j)
                if (D[250][j].charCodeAt(0) !== 65533) {
                    e2[D[250][j]] = 64e3 + j;
                    d[64e3 + j] = D[250][j];
                }
            D[251] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6D96\u6DAC\u6DCF\u6DF8\u6DF2\u6DFC\u6E39\u6E5C\u6E27\u6E3C\u6EBF\u6F88\u6FB5\u6FF5\u7005\u7007\u7028\u7085\u70AB\u710F\u7104\u715C\u7146\u7147\uFA15\u71C1\u71FE\u72B1\u72BE\u7324\uFA16\u7377\u73BD\u73C9\u73D6\u73E3\u73D2\u7407\u73F5\u7426\u742A\u7429\u742E\u7462\u7489\u749F\u7501\u756F\u7682\u769C\u769E\u769B\u76A6\uFA17\u7746\u52AF\u7821\u784E\u7864\u787A\u7930\uFA18\uFA19\uFFFD\uFA1A\u7994\uFA1B\u799B\u7AD1\u7AE7\uFA1C\u7AEB\u7B9E\uFA1D\u7D48\u7D5C\u7DB7\u7DA0\u7DD6\u7E52\u7F47\u7FA1\uFA1E\u8301\u8362\u837F\u83C7\u83F6\u8448\u84B4\u8553\u8559\u856B\uFA1F\u85B0\uFA20\uFA21\u8807\u88F5\u8A12\u8A37\u8A79\u8AA7\u8ABE\u8ADF\uFA22\u8AF6\u8B53\u8B7F\u8CF0\u8CF4\u8D12\u8D76\uFA23\u8ECF\uFA24\uFA25\u9067\u90DE\uFA26\u9115\u9127\u91DA\u91D7\u91DE\u91ED\u91EE\u91E4\u91E5\u9206\u9210\u920A\u923A\u9240\u923C\u924E\u9259\u9251\u9239\u9267\u92A7\u9277\u9278\u92E7\u92D7\u92D9\u92D0\uFA27\u92D5\u92E0\u92D3\u9325\u9321\u92FB\uFA28\u931E\u92FF\u931D\u9302\u9370\u9357\u93A4\u93C6\u93DE\u93F8\u9431\u9445\u9448\u9592\uF9DC\uFA29\u969D\u96AF\u9733\u973B\u9743\u974D\u974F\u9751\u9755\u9857\u9865\uFA2A\uFA2B\u9927\uFA2C\u999E\u9A4E\u9AD9\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[251].length; ++j)
                if (D[251][j].charCodeAt(0) !== 65533) {
                    e2[D[251][j]] = 64256 + j;
                    d[64256 + j] = D[251][j];
                }
            D[252] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9ADC\u9B75\u9B72\u9B8F\u9BB1\u9BBB\u9C00\u9D70\u9D6B\uFA2D\u9E19\u9ED1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[252].length; ++j)
                if (D[252][j].charCodeAt(0) !== 65533) {
                    e2[D[252][j]] = 64512 + j;
                    d[64512 + j] = D[252][j];
                }
            return { enc: e2, dec: d };
        })();
        cptable2[936] = (function () {
            var d = [],
                e2 = {},
                D = [],
                j;
            D[0] =
                '\0\x07\b	\n\v\f\r\x1B !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u20AC\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[0].length; ++j)
                if (D[0][j].charCodeAt(0) !== 65533) {
                    e2[D[0][j]] = 0 + j;
                    d[0 + j] = D[0][j];
                }
            D[129] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4E02\u4E04\u4E05\u4E06\u4E0F\u4E12\u4E17\u4E1F\u4E20\u4E21\u4E23\u4E26\u4E29\u4E2E\u4E2F\u4E31\u4E33\u4E35\u4E37\u4E3C\u4E40\u4E41\u4E42\u4E44\u4E46\u4E4A\u4E51\u4E55\u4E57\u4E5A\u4E5B\u4E62\u4E63\u4E64\u4E65\u4E67\u4E68\u4E6A\u4E6B\u4E6C\u4E6D\u4E6E\u4E6F\u4E72\u4E74\u4E75\u4E76\u4E77\u4E78\u4E79\u4E7A\u4E7B\u4E7C\u4E7D\u4E7F\u4E80\u4E81\u4E82\u4E83\u4E84\u4E85\u4E87\u4E8A\uFFFD\u4E90\u4E96\u4E97\u4E99\u4E9C\u4E9D\u4E9E\u4EA3\u4EAA\u4EAF\u4EB0\u4EB1\u4EB4\u4EB6\u4EB7\u4EB8\u4EB9\u4EBC\u4EBD\u4EBE\u4EC8\u4ECC\u4ECF\u4ED0\u4ED2\u4EDA\u4EDB\u4EDC\u4EE0\u4EE2\u4EE6\u4EE7\u4EE9\u4EED\u4EEE\u4EEF\u4EF1\u4EF4\u4EF8\u4EF9\u4EFA\u4EFC\u4EFE\u4F00\u4F02\u4F03\u4F04\u4F05\u4F06\u4F07\u4F08\u4F0B\u4F0C\u4F12\u4F13\u4F14\u4F15\u4F16\u4F1C\u4F1D\u4F21\u4F23\u4F28\u4F29\u4F2C\u4F2D\u4F2E\u4F31\u4F33\u4F35\u4F37\u4F39\u4F3B\u4F3E\u4F3F\u4F40\u4F41\u4F42\u4F44\u4F45\u4F47\u4F48\u4F49\u4F4A\u4F4B\u4F4C\u4F52\u4F54\u4F56\u4F61\u4F62\u4F66\u4F68\u4F6A\u4F6B\u4F6D\u4F6E\u4F71\u4F72\u4F75\u4F77\u4F78\u4F79\u4F7A\u4F7D\u4F80\u4F81\u4F82\u4F85\u4F86\u4F87\u4F8A\u4F8C\u4F8E\u4F90\u4F92\u4F93\u4F95\u4F96\u4F98\u4F99\u4F9A\u4F9C\u4F9E\u4F9F\u4FA1\u4FA2\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[129].length; ++j)
                if (D[129][j].charCodeAt(0) !== 65533) {
                    e2[D[129][j]] = 33024 + j;
                    d[33024 + j] = D[129][j];
                }
            D[130] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4FA4\u4FAB\u4FAD\u4FB0\u4FB1\u4FB2\u4FB3\u4FB4\u4FB6\u4FB7\u4FB8\u4FB9\u4FBA\u4FBB\u4FBC\u4FBD\u4FBE\u4FC0\u4FC1\u4FC2\u4FC6\u4FC7\u4FC8\u4FC9\u4FCB\u4FCC\u4FCD\u4FD2\u4FD3\u4FD4\u4FD5\u4FD6\u4FD9\u4FDB\u4FE0\u4FE2\u4FE4\u4FE5\u4FE7\u4FEB\u4FEC\u4FF0\u4FF2\u4FF4\u4FF5\u4FF6\u4FF7\u4FF9\u4FFB\u4FFC\u4FFD\u4FFF\u5000\u5001\u5002\u5003\u5004\u5005\u5006\u5007\u5008\u5009\u500A\uFFFD\u500B\u500E\u5010\u5011\u5013\u5015\u5016\u5017\u501B\u501D\u501E\u5020\u5022\u5023\u5024\u5027\u502B\u502F\u5030\u5031\u5032\u5033\u5034\u5035\u5036\u5037\u5038\u5039\u503B\u503D\u503F\u5040\u5041\u5042\u5044\u5045\u5046\u5049\u504A\u504B\u504D\u5050\u5051\u5052\u5053\u5054\u5056\u5057\u5058\u5059\u505B\u505D\u505E\u505F\u5060\u5061\u5062\u5063\u5064\u5066\u5067\u5068\u5069\u506A\u506B\u506D\u506E\u506F\u5070\u5071\u5072\u5073\u5074\u5075\u5078\u5079\u507A\u507C\u507D\u5081\u5082\u5083\u5084\u5086\u5087\u5089\u508A\u508B\u508C\u508E\u508F\u5090\u5091\u5092\u5093\u5094\u5095\u5096\u5097\u5098\u5099\u509A\u509B\u509C\u509D\u509E\u509F\u50A0\u50A1\u50A2\u50A4\u50A6\u50AA\u50AB\u50AD\u50AE\u50AF\u50B0\u50B1\u50B3\u50B4\u50B5\u50B6\u50B7\u50B8\u50B9\u50BC\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[130].length; ++j)
                if (D[130][j].charCodeAt(0) !== 65533) {
                    e2[D[130][j]] = 33280 + j;
                    d[33280 + j] = D[130][j];
                }
            D[131] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u50BD\u50BE\u50BF\u50C0\u50C1\u50C2\u50C3\u50C4\u50C5\u50C6\u50C7\u50C8\u50C9\u50CA\u50CB\u50CC\u50CD\u50CE\u50D0\u50D1\u50D2\u50D3\u50D4\u50D5\u50D7\u50D8\u50D9\u50DB\u50DC\u50DD\u50DE\u50DF\u50E0\u50E1\u50E2\u50E3\u50E4\u50E5\u50E8\u50E9\u50EA\u50EB\u50EF\u50F0\u50F1\u50F2\u50F4\u50F6\u50F7\u50F8\u50F9\u50FA\u50FC\u50FD\u50FE\u50FF\u5100\u5101\u5102\u5103\u5104\u5105\u5108\uFFFD\u5109\u510A\u510C\u510D\u510E\u510F\u5110\u5111\u5113\u5114\u5115\u5116\u5117\u5118\u5119\u511A\u511B\u511C\u511D\u511E\u511F\u5120\u5122\u5123\u5124\u5125\u5126\u5127\u5128\u5129\u512A\u512B\u512C\u512D\u512E\u512F\u5130\u5131\u5132\u5133\u5134\u5135\u5136\u5137\u5138\u5139\u513A\u513B\u513C\u513D\u513E\u5142\u5147\u514A\u514C\u514E\u514F\u5150\u5152\u5153\u5157\u5158\u5159\u515B\u515D\u515E\u515F\u5160\u5161\u5163\u5164\u5166\u5167\u5169\u516A\u516F\u5172\u517A\u517E\u517F\u5183\u5184\u5186\u5187\u518A\u518B\u518E\u518F\u5190\u5191\u5193\u5194\u5198\u519A\u519D\u519E\u519F\u51A1\u51A3\u51A6\u51A7\u51A8\u51A9\u51AA\u51AD\u51AE\u51B4\u51B8\u51B9\u51BA\u51BE\u51BF\u51C1\u51C2\u51C3\u51C5\u51C8\u51CA\u51CD\u51CE\u51D0\u51D2\u51D3\u51D4\u51D5\u51D6\u51D7\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[131].length; ++j)
                if (D[131][j].charCodeAt(0) !== 65533) {
                    e2[D[131][j]] = 33536 + j;
                    d[33536 + j] = D[131][j];
                }
            D[132] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u51D8\u51D9\u51DA\u51DC\u51DE\u51DF\u51E2\u51E3\u51E5\u51E6\u51E7\u51E8\u51E9\u51EA\u51EC\u51EE\u51F1\u51F2\u51F4\u51F7\u51FE\u5204\u5205\u5209\u520B\u520C\u520F\u5210\u5213\u5214\u5215\u521C\u521E\u521F\u5221\u5222\u5223\u5225\u5226\u5227\u522A\u522C\u522F\u5231\u5232\u5234\u5235\u523C\u523E\u5244\u5245\u5246\u5247\u5248\u5249\u524B\u524E\u524F\u5252\u5253\u5255\u5257\u5258\uFFFD\u5259\u525A\u525B\u525D\u525F\u5260\u5262\u5263\u5264\u5266\u5268\u526B\u526C\u526D\u526E\u5270\u5271\u5273\u5274\u5275\u5276\u5277\u5278\u5279\u527A\u527B\u527C\u527E\u5280\u5283\u5284\u5285\u5286\u5287\u5289\u528A\u528B\u528C\u528D\u528E\u528F\u5291\u5292\u5294\u5295\u5296\u5297\u5298\u5299\u529A\u529C\u52A4\u52A5\u52A6\u52A7\u52AE\u52AF\u52B0\u52B4\u52B5\u52B6\u52B7\u52B8\u52B9\u52BA\u52BB\u52BC\u52BD\u52C0\u52C1\u52C2\u52C4\u52C5\u52C6\u52C8\u52CA\u52CC\u52CD\u52CE\u52CF\u52D1\u52D3\u52D4\u52D5\u52D7\u52D9\u52DA\u52DB\u52DC\u52DD\u52DE\u52E0\u52E1\u52E2\u52E3\u52E5\u52E6\u52E7\u52E8\u52E9\u52EA\u52EB\u52EC\u52ED\u52EE\u52EF\u52F1\u52F2\u52F3\u52F4\u52F5\u52F6\u52F7\u52F8\u52FB\u52FC\u52FD\u5301\u5302\u5303\u5304\u5307\u5309\u530A\u530B\u530C\u530E\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[132].length; ++j)
                if (D[132][j].charCodeAt(0) !== 65533) {
                    e2[D[132][j]] = 33792 + j;
                    d[33792 + j] = D[132][j];
                }
            D[133] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5311\u5312\u5313\u5314\u5318\u531B\u531C\u531E\u531F\u5322\u5324\u5325\u5327\u5328\u5329\u532B\u532C\u532D\u532F\u5330\u5331\u5332\u5333\u5334\u5335\u5336\u5337\u5338\u533C\u533D\u5340\u5342\u5344\u5346\u534B\u534C\u534D\u5350\u5354\u5358\u5359\u535B\u535D\u5365\u5368\u536A\u536C\u536D\u5372\u5376\u5379\u537B\u537C\u537D\u537E\u5380\u5381\u5383\u5387\u5388\u538A\u538E\u538F\uFFFD\u5390\u5391\u5392\u5393\u5394\u5396\u5397\u5399\u539B\u539C\u539E\u53A0\u53A1\u53A4\u53A7\u53AA\u53AB\u53AC\u53AD\u53AF\u53B0\u53B1\u53B2\u53B3\u53B4\u53B5\u53B7\u53B8\u53B9\u53BA\u53BC\u53BD\u53BE\u53C0\u53C3\u53C4\u53C5\u53C6\u53C7\u53CE\u53CF\u53D0\u53D2\u53D3\u53D5\u53DA\u53DC\u53DD\u53DE\u53E1\u53E2\u53E7\u53F4\u53FA\u53FE\u53FF\u5400\u5402\u5405\u5407\u540B\u5414\u5418\u5419\u541A\u541C\u5422\u5424\u5425\u542A\u5430\u5433\u5436\u5437\u543A\u543D\u543F\u5441\u5442\u5444\u5445\u5447\u5449\u544C\u544D\u544E\u544F\u5451\u545A\u545D\u545E\u545F\u5460\u5461\u5463\u5465\u5467\u5469\u546A\u546B\u546C\u546D\u546E\u546F\u5470\u5474\u5479\u547A\u547E\u547F\u5481\u5483\u5485\u5487\u5488\u5489\u548A\u548D\u5491\u5493\u5497\u5498\u549C\u549E\u549F\u54A0\u54A1\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[133].length; ++j)
                if (D[133][j].charCodeAt(0) !== 65533) {
                    e2[D[133][j]] = 34048 + j;
                    d[34048 + j] = D[133][j];
                }
            D[134] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u54A2\u54A5\u54AE\u54B0\u54B2\u54B5\u54B6\u54B7\u54B9\u54BA\u54BC\u54BE\u54C3\u54C5\u54CA\u54CB\u54D6\u54D8\u54DB\u54E0\u54E1\u54E2\u54E3\u54E4\u54EB\u54EC\u54EF\u54F0\u54F1\u54F4\u54F5\u54F6\u54F7\u54F8\u54F9\u54FB\u54FE\u5500\u5502\u5503\u5504\u5505\u5508\u550A\u550B\u550C\u550D\u550E\u5512\u5513\u5515\u5516\u5517\u5518\u5519\u551A\u551C\u551D\u551E\u551F\u5521\u5525\u5526\uFFFD\u5528\u5529\u552B\u552D\u5532\u5534\u5535\u5536\u5538\u5539\u553A\u553B\u553D\u5540\u5542\u5545\u5547\u5548\u554B\u554C\u554D\u554E\u554F\u5551\u5552\u5553\u5554\u5557\u5558\u5559\u555A\u555B\u555D\u555E\u555F\u5560\u5562\u5563\u5568\u5569\u556B\u556F\u5570\u5571\u5572\u5573\u5574\u5579\u557A\u557D\u557F\u5585\u5586\u558C\u558D\u558E\u5590\u5592\u5593\u5595\u5596\u5597\u559A\u559B\u559E\u55A0\u55A1\u55A2\u55A3\u55A4\u55A5\u55A6\u55A8\u55A9\u55AA\u55AB\u55AC\u55AD\u55AE\u55AF\u55B0\u55B2\u55B4\u55B6\u55B8\u55BA\u55BC\u55BF\u55C0\u55C1\u55C2\u55C3\u55C6\u55C7\u55C8\u55CA\u55CB\u55CE\u55CF\u55D0\u55D5\u55D7\u55D8\u55D9\u55DA\u55DB\u55DE\u55E0\u55E2\u55E7\u55E9\u55ED\u55EE\u55F0\u55F1\u55F4\u55F6\u55F8\u55F9\u55FA\u55FB\u55FC\u55FF\u5602\u5603\u5604\u5605\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[134].length; ++j)
                if (D[134][j].charCodeAt(0) !== 65533) {
                    e2[D[134][j]] = 34304 + j;
                    d[34304 + j] = D[134][j];
                }
            D[135] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5606\u5607\u560A\u560B\u560D\u5610\u5611\u5612\u5613\u5614\u5615\u5616\u5617\u5619\u561A\u561C\u561D\u5620\u5621\u5622\u5625\u5626\u5628\u5629\u562A\u562B\u562E\u562F\u5630\u5633\u5635\u5637\u5638\u563A\u563C\u563D\u563E\u5640\u5641\u5642\u5643\u5644\u5645\u5646\u5647\u5648\u5649\u564A\u564B\u564F\u5650\u5651\u5652\u5653\u5655\u5656\u565A\u565B\u565D\u565E\u565F\u5660\u5661\uFFFD\u5663\u5665\u5666\u5667\u566D\u566E\u566F\u5670\u5672\u5673\u5674\u5675\u5677\u5678\u5679\u567A\u567D\u567E\u567F\u5680\u5681\u5682\u5683\u5684\u5687\u5688\u5689\u568A\u568B\u568C\u568D\u5690\u5691\u5692\u5694\u5695\u5696\u5697\u5698\u5699\u569A\u569B\u569C\u569D\u569E\u569F\u56A0\u56A1\u56A2\u56A4\u56A5\u56A6\u56A7\u56A8\u56A9\u56AA\u56AB\u56AC\u56AD\u56AE\u56B0\u56B1\u56B2\u56B3\u56B4\u56B5\u56B6\u56B8\u56B9\u56BA\u56BB\u56BD\u56BE\u56BF\u56C0\u56C1\u56C2\u56C3\u56C4\u56C5\u56C6\u56C7\u56C8\u56C9\u56CB\u56CC\u56CD\u56CE\u56CF\u56D0\u56D1\u56D2\u56D3\u56D5\u56D6\u56D8\u56D9\u56DC\u56E3\u56E5\u56E6\u56E7\u56E8\u56E9\u56EA\u56EC\u56EE\u56EF\u56F2\u56F3\u56F6\u56F7\u56F8\u56FB\u56FC\u5700\u5701\u5702\u5705\u5707\u570B\u570C\u570D\u570E\u570F\u5710\u5711\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[135].length; ++j)
                if (D[135][j].charCodeAt(0) !== 65533) {
                    e2[D[135][j]] = 34560 + j;
                    d[34560 + j] = D[135][j];
                }
            D[136] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5712\u5713\u5714\u5715\u5716\u5717\u5718\u5719\u571A\u571B\u571D\u571E\u5720\u5721\u5722\u5724\u5725\u5726\u5727\u572B\u5731\u5732\u5734\u5735\u5736\u5737\u5738\u573C\u573D\u573F\u5741\u5743\u5744\u5745\u5746\u5748\u5749\u574B\u5752\u5753\u5754\u5755\u5756\u5758\u5759\u5762\u5763\u5765\u5767\u576C\u576E\u5770\u5771\u5772\u5774\u5775\u5778\u5779\u577A\u577D\u577E\u577F\u5780\uFFFD\u5781\u5787\u5788\u5789\u578A\u578D\u578E\u578F\u5790\u5791\u5794\u5795\u5796\u5797\u5798\u5799\u579A\u579C\u579D\u579E\u579F\u57A5\u57A8\u57AA\u57AC\u57AF\u57B0\u57B1\u57B3\u57B5\u57B6\u57B7\u57B9\u57BA\u57BB\u57BC\u57BD\u57BE\u57BF\u57C0\u57C1\u57C4\u57C5\u57C6\u57C7\u57C8\u57C9\u57CA\u57CC\u57CD\u57D0\u57D1\u57D3\u57D6\u57D7\u57DB\u57DC\u57DE\u57E1\u57E2\u57E3\u57E5\u57E6\u57E7\u57E8\u57E9\u57EA\u57EB\u57EC\u57EE\u57F0\u57F1\u57F2\u57F3\u57F5\u57F6\u57F7\u57FB\u57FC\u57FE\u57FF\u5801\u5803\u5804\u5805\u5808\u5809\u580A\u580C\u580E\u580F\u5810\u5812\u5813\u5814\u5816\u5817\u5818\u581A\u581B\u581C\u581D\u581F\u5822\u5823\u5825\u5826\u5827\u5828\u5829\u582B\u582C\u582D\u582E\u582F\u5831\u5832\u5833\u5834\u5836\u5837\u5838\u5839\u583A\u583B\u583C\u583D\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[136].length; ++j)
                if (D[136][j].charCodeAt(0) !== 65533) {
                    e2[D[136][j]] = 34816 + j;
                    d[34816 + j] = D[136][j];
                }
            D[137] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u583E\u583F\u5840\u5841\u5842\u5843\u5845\u5846\u5847\u5848\u5849\u584A\u584B\u584E\u584F\u5850\u5852\u5853\u5855\u5856\u5857\u5859\u585A\u585B\u585C\u585D\u585F\u5860\u5861\u5862\u5863\u5864\u5866\u5867\u5868\u5869\u586A\u586D\u586E\u586F\u5870\u5871\u5872\u5873\u5874\u5875\u5876\u5877\u5878\u5879\u587A\u587B\u587C\u587D\u587F\u5882\u5884\u5886\u5887\u5888\u588A\u588B\u588C\uFFFD\u588D\u588E\u588F\u5890\u5891\u5894\u5895\u5896\u5897\u5898\u589B\u589C\u589D\u58A0\u58A1\u58A2\u58A3\u58A4\u58A5\u58A6\u58A7\u58AA\u58AB\u58AC\u58AD\u58AE\u58AF\u58B0\u58B1\u58B2\u58B3\u58B4\u58B5\u58B6\u58B7\u58B8\u58B9\u58BA\u58BB\u58BD\u58BE\u58BF\u58C0\u58C2\u58C3\u58C4\u58C6\u58C7\u58C8\u58C9\u58CA\u58CB\u58CC\u58CD\u58CE\u58CF\u58D0\u58D2\u58D3\u58D4\u58D6\u58D7\u58D8\u58D9\u58DA\u58DB\u58DC\u58DD\u58DE\u58DF\u58E0\u58E1\u58E2\u58E3\u58E5\u58E6\u58E7\u58E8\u58E9\u58EA\u58ED\u58EF\u58F1\u58F2\u58F4\u58F5\u58F7\u58F8\u58FA\u58FB\u58FC\u58FD\u58FE\u58FF\u5900\u5901\u5903\u5905\u5906\u5908\u5909\u590A\u590B\u590C\u590E\u5910\u5911\u5912\u5913\u5917\u5918\u591B\u591D\u591E\u5920\u5921\u5922\u5923\u5926\u5928\u592C\u5930\u5932\u5933\u5935\u5936\u593B\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[137].length; ++j)
                if (D[137][j].charCodeAt(0) !== 65533) {
                    e2[D[137][j]] = 35072 + j;
                    d[35072 + j] = D[137][j];
                }
            D[138] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u593D\u593E\u593F\u5940\u5943\u5945\u5946\u594A\u594C\u594D\u5950\u5952\u5953\u5959\u595B\u595C\u595D\u595E\u595F\u5961\u5963\u5964\u5966\u5967\u5968\u5969\u596A\u596B\u596C\u596D\u596E\u596F\u5970\u5971\u5972\u5975\u5977\u597A\u597B\u597C\u597E\u597F\u5980\u5985\u5989\u598B\u598C\u598E\u598F\u5990\u5991\u5994\u5995\u5998\u599A\u599B\u599C\u599D\u599F\u59A0\u59A1\u59A2\u59A6\uFFFD\u59A7\u59AC\u59AD\u59B0\u59B1\u59B3\u59B4\u59B5\u59B6\u59B7\u59B8\u59BA\u59BC\u59BD\u59BF\u59C0\u59C1\u59C2\u59C3\u59C4\u59C5\u59C7\u59C8\u59C9\u59CC\u59CD\u59CE\u59CF\u59D5\u59D6\u59D9\u59DB\u59DE\u59DF\u59E0\u59E1\u59E2\u59E4\u59E6\u59E7\u59E9\u59EA\u59EB\u59ED\u59EE\u59EF\u59F0\u59F1\u59F2\u59F3\u59F4\u59F5\u59F6\u59F7\u59F8\u59FA\u59FC\u59FD\u59FE\u5A00\u5A02\u5A0A\u5A0B\u5A0D\u5A0E\u5A0F\u5A10\u5A12\u5A14\u5A15\u5A16\u5A17\u5A19\u5A1A\u5A1B\u5A1D\u5A1E\u5A21\u5A22\u5A24\u5A26\u5A27\u5A28\u5A2A\u5A2B\u5A2C\u5A2D\u5A2E\u5A2F\u5A30\u5A33\u5A35\u5A37\u5A38\u5A39\u5A3A\u5A3B\u5A3D\u5A3E\u5A3F\u5A41\u5A42\u5A43\u5A44\u5A45\u5A47\u5A48\u5A4B\u5A4C\u5A4D\u5A4E\u5A4F\u5A50\u5A51\u5A52\u5A53\u5A54\u5A56\u5A57\u5A58\u5A59\u5A5B\u5A5C\u5A5D\u5A5E\u5A5F\u5A60\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[138].length; ++j)
                if (D[138][j].charCodeAt(0) !== 65533) {
                    e2[D[138][j]] = 35328 + j;
                    d[35328 + j] = D[138][j];
                }
            D[139] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5A61\u5A63\u5A64\u5A65\u5A66\u5A68\u5A69\u5A6B\u5A6C\u5A6D\u5A6E\u5A6F\u5A70\u5A71\u5A72\u5A73\u5A78\u5A79\u5A7B\u5A7C\u5A7D\u5A7E\u5A80\u5A81\u5A82\u5A83\u5A84\u5A85\u5A86\u5A87\u5A88\u5A89\u5A8A\u5A8B\u5A8C\u5A8D\u5A8E\u5A8F\u5A90\u5A91\u5A93\u5A94\u5A95\u5A96\u5A97\u5A98\u5A99\u5A9C\u5A9D\u5A9E\u5A9F\u5AA0\u5AA1\u5AA2\u5AA3\u5AA4\u5AA5\u5AA6\u5AA7\u5AA8\u5AA9\u5AAB\u5AAC\uFFFD\u5AAD\u5AAE\u5AAF\u5AB0\u5AB1\u5AB4\u5AB6\u5AB7\u5AB9\u5ABA\u5ABB\u5ABC\u5ABD\u5ABF\u5AC0\u5AC3\u5AC4\u5AC5\u5AC6\u5AC7\u5AC8\u5ACA\u5ACB\u5ACD\u5ACE\u5ACF\u5AD0\u5AD1\u5AD3\u5AD5\u5AD7\u5AD9\u5ADA\u5ADB\u5ADD\u5ADE\u5ADF\u5AE2\u5AE4\u5AE5\u5AE7\u5AE8\u5AEA\u5AEC\u5AED\u5AEE\u5AEF\u5AF0\u5AF2\u5AF3\u5AF4\u5AF5\u5AF6\u5AF7\u5AF8\u5AF9\u5AFA\u5AFB\u5AFC\u5AFD\u5AFE\u5AFF\u5B00\u5B01\u5B02\u5B03\u5B04\u5B05\u5B06\u5B07\u5B08\u5B0A\u5B0B\u5B0C\u5B0D\u5B0E\u5B0F\u5B10\u5B11\u5B12\u5B13\u5B14\u5B15\u5B18\u5B19\u5B1A\u5B1B\u5B1C\u5B1D\u5B1E\u5B1F\u5B20\u5B21\u5B22\u5B23\u5B24\u5B25\u5B26\u5B27\u5B28\u5B29\u5B2A\u5B2B\u5B2C\u5B2D\u5B2E\u5B2F\u5B30\u5B31\u5B33\u5B35\u5B36\u5B38\u5B39\u5B3A\u5B3B\u5B3C\u5B3D\u5B3E\u5B3F\u5B41\u5B42\u5B43\u5B44\u5B45\u5B46\u5B47\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[139].length; ++j)
                if (D[139][j].charCodeAt(0) !== 65533) {
                    e2[D[139][j]] = 35584 + j;
                    d[35584 + j] = D[139][j];
                }
            D[140] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5B48\u5B49\u5B4A\u5B4B\u5B4C\u5B4D\u5B4E\u5B4F\u5B52\u5B56\u5B5E\u5B60\u5B61\u5B67\u5B68\u5B6B\u5B6D\u5B6E\u5B6F\u5B72\u5B74\u5B76\u5B77\u5B78\u5B79\u5B7B\u5B7C\u5B7E\u5B7F\u5B82\u5B86\u5B8A\u5B8D\u5B8E\u5B90\u5B91\u5B92\u5B94\u5B96\u5B9F\u5BA7\u5BA8\u5BA9\u5BAC\u5BAD\u5BAE\u5BAF\u5BB1\u5BB2\u5BB7\u5BBA\u5BBB\u5BBC\u5BC0\u5BC1\u5BC3\u5BC8\u5BC9\u5BCA\u5BCB\u5BCD\u5BCE\u5BCF\uFFFD\u5BD1\u5BD4\u5BD5\u5BD6\u5BD7\u5BD8\u5BD9\u5BDA\u5BDB\u5BDC\u5BE0\u5BE2\u5BE3\u5BE6\u5BE7\u5BE9\u5BEA\u5BEB\u5BEC\u5BED\u5BEF\u5BF1\u5BF2\u5BF3\u5BF4\u5BF5\u5BF6\u5BF7\u5BFD\u5BFE\u5C00\u5C02\u5C03\u5C05\u5C07\u5C08\u5C0B\u5C0C\u5C0D\u5C0E\u5C10\u5C12\u5C13\u5C17\u5C19\u5C1B\u5C1E\u5C1F\u5C20\u5C21\u5C23\u5C26\u5C28\u5C29\u5C2A\u5C2B\u5C2D\u5C2E\u5C2F\u5C30\u5C32\u5C33\u5C35\u5C36\u5C37\u5C43\u5C44\u5C46\u5C47\u5C4C\u5C4D\u5C52\u5C53\u5C54\u5C56\u5C57\u5C58\u5C5A\u5C5B\u5C5C\u5C5D\u5C5F\u5C62\u5C64\u5C67\u5C68\u5C69\u5C6A\u5C6B\u5C6C\u5C6D\u5C70\u5C72\u5C73\u5C74\u5C75\u5C76\u5C77\u5C78\u5C7B\u5C7C\u5C7D\u5C7E\u5C80\u5C83\u5C84\u5C85\u5C86\u5C87\u5C89\u5C8A\u5C8B\u5C8E\u5C8F\u5C92\u5C93\u5C95\u5C9D\u5C9E\u5C9F\u5CA0\u5CA1\u5CA4\u5CA5\u5CA6\u5CA7\u5CA8\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[140].length; ++j)
                if (D[140][j].charCodeAt(0) !== 65533) {
                    e2[D[140][j]] = 35840 + j;
                    d[35840 + j] = D[140][j];
                }
            D[141] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5CAA\u5CAE\u5CAF\u5CB0\u5CB2\u5CB4\u5CB6\u5CB9\u5CBA\u5CBB\u5CBC\u5CBE\u5CC0\u5CC2\u5CC3\u5CC5\u5CC6\u5CC7\u5CC8\u5CC9\u5CCA\u5CCC\u5CCD\u5CCE\u5CCF\u5CD0\u5CD1\u5CD3\u5CD4\u5CD5\u5CD6\u5CD7\u5CD8\u5CDA\u5CDB\u5CDC\u5CDD\u5CDE\u5CDF\u5CE0\u5CE2\u5CE3\u5CE7\u5CE9\u5CEB\u5CEC\u5CEE\u5CEF\u5CF1\u5CF2\u5CF3\u5CF4\u5CF5\u5CF6\u5CF7\u5CF8\u5CF9\u5CFA\u5CFC\u5CFD\u5CFE\u5CFF\u5D00\uFFFD\u5D01\u5D04\u5D05\u5D08\u5D09\u5D0A\u5D0B\u5D0C\u5D0D\u5D0F\u5D10\u5D11\u5D12\u5D13\u5D15\u5D17\u5D18\u5D19\u5D1A\u5D1C\u5D1D\u5D1F\u5D20\u5D21\u5D22\u5D23\u5D25\u5D28\u5D2A\u5D2B\u5D2C\u5D2F\u5D30\u5D31\u5D32\u5D33\u5D35\u5D36\u5D37\u5D38\u5D39\u5D3A\u5D3B\u5D3C\u5D3F\u5D40\u5D41\u5D42\u5D43\u5D44\u5D45\u5D46\u5D48\u5D49\u5D4D\u5D4E\u5D4F\u5D50\u5D51\u5D52\u5D53\u5D54\u5D55\u5D56\u5D57\u5D59\u5D5A\u5D5C\u5D5E\u5D5F\u5D60\u5D61\u5D62\u5D63\u5D64\u5D65\u5D66\u5D67\u5D68\u5D6A\u5D6D\u5D6E\u5D70\u5D71\u5D72\u5D73\u5D75\u5D76\u5D77\u5D78\u5D79\u5D7A\u5D7B\u5D7C\u5D7D\u5D7E\u5D7F\u5D80\u5D81\u5D83\u5D84\u5D85\u5D86\u5D87\u5D88\u5D89\u5D8A\u5D8B\u5D8C\u5D8D\u5D8E\u5D8F\u5D90\u5D91\u5D92\u5D93\u5D94\u5D95\u5D96\u5D97\u5D98\u5D9A\u5D9B\u5D9C\u5D9E\u5D9F\u5DA0\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[141].length; ++j)
                if (D[141][j].charCodeAt(0) !== 65533) {
                    e2[D[141][j]] = 36096 + j;
                    d[36096 + j] = D[141][j];
                }
            D[142] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5DA1\u5DA2\u5DA3\u5DA4\u5DA5\u5DA6\u5DA7\u5DA8\u5DA9\u5DAA\u5DAB\u5DAC\u5DAD\u5DAE\u5DAF\u5DB0\u5DB1\u5DB2\u5DB3\u5DB4\u5DB5\u5DB6\u5DB8\u5DB9\u5DBA\u5DBB\u5DBC\u5DBD\u5DBE\u5DBF\u5DC0\u5DC1\u5DC2\u5DC3\u5DC4\u5DC6\u5DC7\u5DC8\u5DC9\u5DCA\u5DCB\u5DCC\u5DCE\u5DCF\u5DD0\u5DD1\u5DD2\u5DD3\u5DD4\u5DD5\u5DD6\u5DD7\u5DD8\u5DD9\u5DDA\u5DDC\u5DDF\u5DE0\u5DE3\u5DE4\u5DEA\u5DEC\u5DED\uFFFD\u5DF0\u5DF5\u5DF6\u5DF8\u5DF9\u5DFA\u5DFB\u5DFC\u5DFF\u5E00\u5E04\u5E07\u5E09\u5E0A\u5E0B\u5E0D\u5E0E\u5E12\u5E13\u5E17\u5E1E\u5E1F\u5E20\u5E21\u5E22\u5E23\u5E24\u5E25\u5E28\u5E29\u5E2A\u5E2B\u5E2C\u5E2F\u5E30\u5E32\u5E33\u5E34\u5E35\u5E36\u5E39\u5E3A\u5E3E\u5E3F\u5E40\u5E41\u5E43\u5E46\u5E47\u5E48\u5E49\u5E4A\u5E4B\u5E4D\u5E4E\u5E4F\u5E50\u5E51\u5E52\u5E53\u5E56\u5E57\u5E58\u5E59\u5E5A\u5E5C\u5E5D\u5E5F\u5E60\u5E63\u5E64\u5E65\u5E66\u5E67\u5E68\u5E69\u5E6A\u5E6B\u5E6C\u5E6D\u5E6E\u5E6F\u5E70\u5E71\u5E75\u5E77\u5E79\u5E7E\u5E81\u5E82\u5E83\u5E85\u5E88\u5E89\u5E8C\u5E8D\u5E8E\u5E92\u5E98\u5E9B\u5E9D\u5EA1\u5EA2\u5EA3\u5EA4\u5EA8\u5EA9\u5EAA\u5EAB\u5EAC\u5EAE\u5EAF\u5EB0\u5EB1\u5EB2\u5EB4\u5EBA\u5EBB\u5EBC\u5EBD\u5EBF\u5EC0\u5EC1\u5EC2\u5EC3\u5EC4\u5EC5\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[142].length; ++j)
                if (D[142][j].charCodeAt(0) !== 65533) {
                    e2[D[142][j]] = 36352 + j;
                    d[36352 + j] = D[142][j];
                }
            D[143] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5EC6\u5EC7\u5EC8\u5ECB\u5ECC\u5ECD\u5ECE\u5ECF\u5ED0\u5ED4\u5ED5\u5ED7\u5ED8\u5ED9\u5EDA\u5EDC\u5EDD\u5EDE\u5EDF\u5EE0\u5EE1\u5EE2\u5EE3\u5EE4\u5EE5\u5EE6\u5EE7\u5EE9\u5EEB\u5EEC\u5EED\u5EEE\u5EEF\u5EF0\u5EF1\u5EF2\u5EF3\u5EF5\u5EF8\u5EF9\u5EFB\u5EFC\u5EFD\u5F05\u5F06\u5F07\u5F09\u5F0C\u5F0D\u5F0E\u5F10\u5F12\u5F14\u5F16\u5F19\u5F1A\u5F1C\u5F1D\u5F1E\u5F21\u5F22\u5F23\u5F24\uFFFD\u5F28\u5F2B\u5F2C\u5F2E\u5F30\u5F32\u5F33\u5F34\u5F35\u5F36\u5F37\u5F38\u5F3B\u5F3D\u5F3E\u5F3F\u5F41\u5F42\u5F43\u5F44\u5F45\u5F46\u5F47\u5F48\u5F49\u5F4A\u5F4B\u5F4C\u5F4D\u5F4E\u5F4F\u5F51\u5F54\u5F59\u5F5A\u5F5B\u5F5C\u5F5E\u5F5F\u5F60\u5F63\u5F65\u5F67\u5F68\u5F6B\u5F6E\u5F6F\u5F72\u5F74\u5F75\u5F76\u5F78\u5F7A\u5F7D\u5F7E\u5F7F\u5F83\u5F86\u5F8D\u5F8E\u5F8F\u5F91\u5F93\u5F94\u5F96\u5F9A\u5F9B\u5F9D\u5F9E\u5F9F\u5FA0\u5FA2\u5FA3\u5FA4\u5FA5\u5FA6\u5FA7\u5FA9\u5FAB\u5FAC\u5FAF\u5FB0\u5FB1\u5FB2\u5FB3\u5FB4\u5FB6\u5FB8\u5FB9\u5FBA\u5FBB\u5FBE\u5FBF\u5FC0\u5FC1\u5FC2\u5FC7\u5FC8\u5FCA\u5FCB\u5FCE\u5FD3\u5FD4\u5FD5\u5FDA\u5FDB\u5FDC\u5FDE\u5FDF\u5FE2\u5FE3\u5FE5\u5FE6\u5FE8\u5FE9\u5FEC\u5FEF\u5FF0\u5FF2\u5FF3\u5FF4\u5FF6\u5FF7\u5FF9\u5FFA\u5FFC\u6007\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[143].length; ++j)
                if (D[143][j].charCodeAt(0) !== 65533) {
                    e2[D[143][j]] = 36608 + j;
                    d[36608 + j] = D[143][j];
                }
            D[144] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6008\u6009\u600B\u600C\u6010\u6011\u6013\u6017\u6018\u601A\u601E\u601F\u6022\u6023\u6024\u602C\u602D\u602E\u6030\u6031\u6032\u6033\u6034\u6036\u6037\u6038\u6039\u603A\u603D\u603E\u6040\u6044\u6045\u6046\u6047\u6048\u6049\u604A\u604C\u604E\u604F\u6051\u6053\u6054\u6056\u6057\u6058\u605B\u605C\u605E\u605F\u6060\u6061\u6065\u6066\u606E\u6071\u6072\u6074\u6075\u6077\u607E\u6080\uFFFD\u6081\u6082\u6085\u6086\u6087\u6088\u608A\u608B\u608E\u608F\u6090\u6091\u6093\u6095\u6097\u6098\u6099\u609C\u609E\u60A1\u60A2\u60A4\u60A5\u60A7\u60A9\u60AA\u60AE\u60B0\u60B3\u60B5\u60B6\u60B7\u60B9\u60BA\u60BD\u60BE\u60BF\u60C0\u60C1\u60C2\u60C3\u60C4\u60C7\u60C8\u60C9\u60CC\u60CD\u60CE\u60CF\u60D0\u60D2\u60D3\u60D4\u60D6\u60D7\u60D9\u60DB\u60DE\u60E1\u60E2\u60E3\u60E4\u60E5\u60EA\u60F1\u60F2\u60F5\u60F7\u60F8\u60FB\u60FC\u60FD\u60FE\u60FF\u6102\u6103\u6104\u6105\u6107\u610A\u610B\u610C\u6110\u6111\u6112\u6113\u6114\u6116\u6117\u6118\u6119\u611B\u611C\u611D\u611E\u6121\u6122\u6125\u6128\u6129\u612A\u612C\u612D\u612E\u612F\u6130\u6131\u6132\u6133\u6134\u6135\u6136\u6137\u6138\u6139\u613A\u613B\u613C\u613D\u613E\u6140\u6141\u6142\u6143\u6144\u6145\u6146\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[144].length; ++j)
                if (D[144][j].charCodeAt(0) !== 65533) {
                    e2[D[144][j]] = 36864 + j;
                    d[36864 + j] = D[144][j];
                }
            D[145] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6147\u6149\u614B\u614D\u614F\u6150\u6152\u6153\u6154\u6156\u6157\u6158\u6159\u615A\u615B\u615C\u615E\u615F\u6160\u6161\u6163\u6164\u6165\u6166\u6169\u616A\u616B\u616C\u616D\u616E\u616F\u6171\u6172\u6173\u6174\u6176\u6178\u6179\u617A\u617B\u617C\u617D\u617E\u617F\u6180\u6181\u6182\u6183\u6184\u6185\u6186\u6187\u6188\u6189\u618A\u618C\u618D\u618F\u6190\u6191\u6192\u6193\u6195\uFFFD\u6196\u6197\u6198\u6199\u619A\u619B\u619C\u619E\u619F\u61A0\u61A1\u61A2\u61A3\u61A4\u61A5\u61A6\u61AA\u61AB\u61AD\u61AE\u61AF\u61B0\u61B1\u61B2\u61B3\u61B4\u61B5\u61B6\u61B8\u61B9\u61BA\u61BB\u61BC\u61BD\u61BF\u61C0\u61C1\u61C3\u61C4\u61C5\u61C6\u61C7\u61C9\u61CC\u61CD\u61CE\u61CF\u61D0\u61D3\u61D5\u61D6\u61D7\u61D8\u61D9\u61DA\u61DB\u61DC\u61DD\u61DE\u61DF\u61E0\u61E1\u61E2\u61E3\u61E4\u61E5\u61E7\u61E8\u61E9\u61EA\u61EB\u61EC\u61ED\u61EE\u61EF\u61F0\u61F1\u61F2\u61F3\u61F4\u61F6\u61F7\u61F8\u61F9\u61FA\u61FB\u61FC\u61FD\u61FE\u6200\u6201\u6202\u6203\u6204\u6205\u6207\u6209\u6213\u6214\u6219\u621C\u621D\u621E\u6220\u6223\u6226\u6227\u6228\u6229\u622B\u622D\u622F\u6230\u6231\u6232\u6235\u6236\u6238\u6239\u623A\u623B\u623C\u6242\u6244\u6245\u6246\u624A\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[145].length; ++j)
                if (D[145][j].charCodeAt(0) !== 65533) {
                    e2[D[145][j]] = 37120 + j;
                    d[37120 + j] = D[145][j];
                }
            D[146] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u624F\u6250\u6255\u6256\u6257\u6259\u625A\u625C\u625D\u625E\u625F\u6260\u6261\u6262\u6264\u6265\u6268\u6271\u6272\u6274\u6275\u6277\u6278\u627A\u627B\u627D\u6281\u6282\u6283\u6285\u6286\u6287\u6288\u628B\u628C\u628D\u628E\u628F\u6290\u6294\u6299\u629C\u629D\u629E\u62A3\u62A6\u62A7\u62A9\u62AA\u62AD\u62AE\u62AF\u62B0\u62B2\u62B3\u62B4\u62B6\u62B7\u62B8\u62BA\u62BE\u62C0\u62C1\uFFFD\u62C3\u62CB\u62CF\u62D1\u62D5\u62DD\u62DE\u62E0\u62E1\u62E4\u62EA\u62EB\u62F0\u62F2\u62F5\u62F8\u62F9\u62FA\u62FB\u6300\u6303\u6304\u6305\u6306\u630A\u630B\u630C\u630D\u630F\u6310\u6312\u6313\u6314\u6315\u6317\u6318\u6319\u631C\u6326\u6327\u6329\u632C\u632D\u632E\u6330\u6331\u6333\u6334\u6335\u6336\u6337\u6338\u633B\u633C\u633E\u633F\u6340\u6341\u6344\u6347\u6348\u634A\u6351\u6352\u6353\u6354\u6356\u6357\u6358\u6359\u635A\u635B\u635C\u635D\u6360\u6364\u6365\u6366\u6368\u636A\u636B\u636C\u636F\u6370\u6372\u6373\u6374\u6375\u6378\u6379\u637C\u637D\u637E\u637F\u6381\u6383\u6384\u6385\u6386\u638B\u638D\u6391\u6393\u6394\u6395\u6397\u6399\u639A\u639B\u639C\u639D\u639E\u639F\u63A1\u63A4\u63A6\u63AB\u63AF\u63B1\u63B2\u63B5\u63B6\u63B9\u63BB\u63BD\u63BF\u63C0\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[146].length; ++j)
                if (D[146][j].charCodeAt(0) !== 65533) {
                    e2[D[146][j]] = 37376 + j;
                    d[37376 + j] = D[146][j];
                }
            D[147] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u63C1\u63C2\u63C3\u63C5\u63C7\u63C8\u63CA\u63CB\u63CC\u63D1\u63D3\u63D4\u63D5\u63D7\u63D8\u63D9\u63DA\u63DB\u63DC\u63DD\u63DF\u63E2\u63E4\u63E5\u63E6\u63E7\u63E8\u63EB\u63EC\u63EE\u63EF\u63F0\u63F1\u63F3\u63F5\u63F7\u63F9\u63FA\u63FB\u63FC\u63FE\u6403\u6404\u6406\u6407\u6408\u6409\u640A\u640D\u640E\u6411\u6412\u6415\u6416\u6417\u6418\u6419\u641A\u641D\u641F\u6422\u6423\u6424\uFFFD\u6425\u6427\u6428\u6429\u642B\u642E\u642F\u6430\u6431\u6432\u6433\u6435\u6436\u6437\u6438\u6439\u643B\u643C\u643E\u6440\u6442\u6443\u6449\u644B\u644C\u644D\u644E\u644F\u6450\u6451\u6453\u6455\u6456\u6457\u6459\u645A\u645B\u645C\u645D\u645F\u6460\u6461\u6462\u6463\u6464\u6465\u6466\u6468\u646A\u646B\u646C\u646E\u646F\u6470\u6471\u6472\u6473\u6474\u6475\u6476\u6477\u647B\u647C\u647D\u647E\u647F\u6480\u6481\u6483\u6486\u6488\u6489\u648A\u648B\u648C\u648D\u648E\u648F\u6490\u6493\u6494\u6497\u6498\u649A\u649B\u649C\u649D\u649F\u64A0\u64A1\u64A2\u64A3\u64A5\u64A6\u64A7\u64A8\u64AA\u64AB\u64AF\u64B1\u64B2\u64B3\u64B4\u64B6\u64B9\u64BB\u64BD\u64BE\u64BF\u64C1\u64C3\u64C4\u64C6\u64C7\u64C8\u64C9\u64CA\u64CB\u64CC\u64CF\u64D1\u64D3\u64D4\u64D5\u64D6\u64D9\u64DA\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[147].length; ++j)
                if (D[147][j].charCodeAt(0) !== 65533) {
                    e2[D[147][j]] = 37632 + j;
                    d[37632 + j] = D[147][j];
                }
            D[148] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u64DB\u64DC\u64DD\u64DF\u64E0\u64E1\u64E3\u64E5\u64E7\u64E8\u64E9\u64EA\u64EB\u64EC\u64ED\u64EE\u64EF\u64F0\u64F1\u64F2\u64F3\u64F4\u64F5\u64F6\u64F7\u64F8\u64F9\u64FA\u64FB\u64FC\u64FD\u64FE\u64FF\u6501\u6502\u6503\u6504\u6505\u6506\u6507\u6508\u650A\u650B\u650C\u650D\u650E\u650F\u6510\u6511\u6513\u6514\u6515\u6516\u6517\u6519\u651A\u651B\u651C\u651D\u651E\u651F\u6520\u6521\uFFFD\u6522\u6523\u6524\u6526\u6527\u6528\u6529\u652A\u652C\u652D\u6530\u6531\u6532\u6533\u6537\u653A\u653C\u653D\u6540\u6541\u6542\u6543\u6544\u6546\u6547\u654A\u654B\u654D\u654E\u6550\u6552\u6553\u6554\u6557\u6558\u655A\u655C\u655F\u6560\u6561\u6564\u6565\u6567\u6568\u6569\u656A\u656D\u656E\u656F\u6571\u6573\u6575\u6576\u6578\u6579\u657A\u657B\u657C\u657D\u657E\u657F\u6580\u6581\u6582\u6583\u6584\u6585\u6586\u6588\u6589\u658A\u658D\u658E\u658F\u6592\u6594\u6595\u6596\u6598\u659A\u659D\u659E\u65A0\u65A2\u65A3\u65A6\u65A8\u65AA\u65AC\u65AE\u65B1\u65B2\u65B3\u65B4\u65B5\u65B6\u65B7\u65B8\u65BA\u65BB\u65BE\u65BF\u65C0\u65C2\u65C7\u65C8\u65C9\u65CA\u65CD\u65D0\u65D1\u65D3\u65D4\u65D5\u65D8\u65D9\u65DA\u65DB\u65DC\u65DD\u65DE\u65DF\u65E1\u65E3\u65E4\u65EA\u65EB\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[148].length; ++j)
                if (D[148][j].charCodeAt(0) !== 65533) {
                    e2[D[148][j]] = 37888 + j;
                    d[37888 + j] = D[148][j];
                }
            D[149] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u65F2\u65F3\u65F4\u65F5\u65F8\u65F9\u65FB\u65FC\u65FD\u65FE\u65FF\u6601\u6604\u6605\u6607\u6608\u6609\u660B\u660D\u6610\u6611\u6612\u6616\u6617\u6618\u661A\u661B\u661C\u661E\u6621\u6622\u6623\u6624\u6626\u6629\u662A\u662B\u662C\u662E\u6630\u6632\u6633\u6637\u6638\u6639\u663A\u663B\u663D\u663F\u6640\u6642\u6644\u6645\u6646\u6647\u6648\u6649\u664A\u664D\u664E\u6650\u6651\u6658\uFFFD\u6659\u665B\u665C\u665D\u665E\u6660\u6662\u6663\u6665\u6667\u6669\u666A\u666B\u666C\u666D\u6671\u6672\u6673\u6675\u6678\u6679\u667B\u667C\u667D\u667F\u6680\u6681\u6683\u6685\u6686\u6688\u6689\u668A\u668B\u668D\u668E\u668F\u6690\u6692\u6693\u6694\u6695\u6698\u6699\u669A\u669B\u669C\u669E\u669F\u66A0\u66A1\u66A2\u66A3\u66A4\u66A5\u66A6\u66A9\u66AA\u66AB\u66AC\u66AD\u66AF\u66B0\u66B1\u66B2\u66B3\u66B5\u66B6\u66B7\u66B8\u66BA\u66BB\u66BC\u66BD\u66BF\u66C0\u66C1\u66C2\u66C3\u66C4\u66C5\u66C6\u66C7\u66C8\u66C9\u66CA\u66CB\u66CC\u66CD\u66CE\u66CF\u66D0\u66D1\u66D2\u66D3\u66D4\u66D5\u66D6\u66D7\u66D8\u66DA\u66DE\u66DF\u66E0\u66E1\u66E2\u66E3\u66E4\u66E5\u66E7\u66E8\u66EA\u66EB\u66EC\u66ED\u66EE\u66EF\u66F1\u66F5\u66F6\u66F8\u66FA\u66FB\u66FD\u6701\u6702\u6703\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[149].length; ++j)
                if (D[149][j].charCodeAt(0) !== 65533) {
                    e2[D[149][j]] = 38144 + j;
                    d[38144 + j] = D[149][j];
                }
            D[150] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6704\u6705\u6706\u6707\u670C\u670E\u670F\u6711\u6712\u6713\u6716\u6718\u6719\u671A\u671C\u671E\u6720\u6721\u6722\u6723\u6724\u6725\u6727\u6729\u672E\u6730\u6732\u6733\u6736\u6737\u6738\u6739\u673B\u673C\u673E\u673F\u6741\u6744\u6745\u6747\u674A\u674B\u674D\u6752\u6754\u6755\u6757\u6758\u6759\u675A\u675B\u675D\u6762\u6763\u6764\u6766\u6767\u676B\u676C\u676E\u6771\u6774\u6776\uFFFD\u6778\u6779\u677A\u677B\u677D\u6780\u6782\u6783\u6785\u6786\u6788\u678A\u678C\u678D\u678E\u678F\u6791\u6792\u6793\u6794\u6796\u6799\u679B\u679F\u67A0\u67A1\u67A4\u67A6\u67A9\u67AC\u67AE\u67B1\u67B2\u67B4\u67B9\u67BA\u67BB\u67BC\u67BD\u67BE\u67BF\u67C0\u67C2\u67C5\u67C6\u67C7\u67C8\u67C9\u67CA\u67CB\u67CC\u67CD\u67CE\u67D5\u67D6\u67D7\u67DB\u67DF\u67E1\u67E3\u67E4\u67E6\u67E7\u67E8\u67EA\u67EB\u67ED\u67EE\u67F2\u67F5\u67F6\u67F7\u67F8\u67F9\u67FA\u67FB\u67FC\u67FE\u6801\u6802\u6803\u6804\u6806\u680D\u6810\u6812\u6814\u6815\u6818\u6819\u681A\u681B\u681C\u681E\u681F\u6820\u6822\u6823\u6824\u6825\u6826\u6827\u6828\u682B\u682C\u682D\u682E\u682F\u6830\u6831\u6834\u6835\u6836\u683A\u683B\u683F\u6847\u684B\u684D\u684F\u6852\u6856\u6857\u6858\u6859\u685A\u685B\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[150].length; ++j)
                if (D[150][j].charCodeAt(0) !== 65533) {
                    e2[D[150][j]] = 38400 + j;
                    d[38400 + j] = D[150][j];
                }
            D[151] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u685C\u685D\u685E\u685F\u686A\u686C\u686D\u686E\u686F\u6870\u6871\u6872\u6873\u6875\u6878\u6879\u687A\u687B\u687C\u687D\u687E\u687F\u6880\u6882\u6884\u6887\u6888\u6889\u688A\u688B\u688C\u688D\u688E\u6890\u6891\u6892\u6894\u6895\u6896\u6898\u6899\u689A\u689B\u689C\u689D\u689E\u689F\u68A0\u68A1\u68A3\u68A4\u68A5\u68A9\u68AA\u68AB\u68AC\u68AE\u68B1\u68B2\u68B4\u68B6\u68B7\u68B8\uFFFD\u68B9\u68BA\u68BB\u68BC\u68BD\u68BE\u68BF\u68C1\u68C3\u68C4\u68C5\u68C6\u68C7\u68C8\u68CA\u68CC\u68CE\u68CF\u68D0\u68D1\u68D3\u68D4\u68D6\u68D7\u68D9\u68DB\u68DC\u68DD\u68DE\u68DF\u68E1\u68E2\u68E4\u68E5\u68E6\u68E7\u68E8\u68E9\u68EA\u68EB\u68EC\u68ED\u68EF\u68F2\u68F3\u68F4\u68F6\u68F7\u68F8\u68FB\u68FD\u68FE\u68FF\u6900\u6902\u6903\u6904\u6906\u6907\u6908\u6909\u690A\u690C\u690F\u6911\u6913\u6914\u6915\u6916\u6917\u6918\u6919\u691A\u691B\u691C\u691D\u691E\u6921\u6922\u6923\u6925\u6926\u6927\u6928\u6929\u692A\u692B\u692C\u692E\u692F\u6931\u6932\u6933\u6935\u6936\u6937\u6938\u693A\u693B\u693C\u693E\u6940\u6941\u6943\u6944\u6945\u6946\u6947\u6948\u6949\u694A\u694B\u694C\u694D\u694E\u694F\u6950\u6951\u6952\u6953\u6955\u6956\u6958\u6959\u695B\u695C\u695F\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[151].length; ++j)
                if (D[151][j].charCodeAt(0) !== 65533) {
                    e2[D[151][j]] = 38656 + j;
                    d[38656 + j] = D[151][j];
                }
            D[152] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6961\u6962\u6964\u6965\u6967\u6968\u6969\u696A\u696C\u696D\u696F\u6970\u6972\u6973\u6974\u6975\u6976\u697A\u697B\u697D\u697E\u697F\u6981\u6983\u6985\u698A\u698B\u698C\u698E\u698F\u6990\u6991\u6992\u6993\u6996\u6997\u6999\u699A\u699D\u699E\u699F\u69A0\u69A1\u69A2\u69A3\u69A4\u69A5\u69A6\u69A9\u69AA\u69AC\u69AE\u69AF\u69B0\u69B2\u69B3\u69B5\u69B6\u69B8\u69B9\u69BA\u69BC\u69BD\uFFFD\u69BE\u69BF\u69C0\u69C2\u69C3\u69C4\u69C5\u69C6\u69C7\u69C8\u69C9\u69CB\u69CD\u69CF\u69D1\u69D2\u69D3\u69D5\u69D6\u69D7\u69D8\u69D9\u69DA\u69DC\u69DD\u69DE\u69E1\u69E2\u69E3\u69E4\u69E5\u69E6\u69E7\u69E8\u69E9\u69EA\u69EB\u69EC\u69EE\u69EF\u69F0\u69F1\u69F3\u69F4\u69F5\u69F6\u69F7\u69F8\u69F9\u69FA\u69FB\u69FC\u69FE\u6A00\u6A01\u6A02\u6A03\u6A04\u6A05\u6A06\u6A07\u6A08\u6A09\u6A0B\u6A0C\u6A0D\u6A0E\u6A0F\u6A10\u6A11\u6A12\u6A13\u6A14\u6A15\u6A16\u6A19\u6A1A\u6A1B\u6A1C\u6A1D\u6A1E\u6A20\u6A22\u6A23\u6A24\u6A25\u6A26\u6A27\u6A29\u6A2B\u6A2C\u6A2D\u6A2E\u6A30\u6A32\u6A33\u6A34\u6A36\u6A37\u6A38\u6A39\u6A3A\u6A3B\u6A3C\u6A3F\u6A40\u6A41\u6A42\u6A43\u6A45\u6A46\u6A48\u6A49\u6A4A\u6A4B\u6A4C\u6A4D\u6A4E\u6A4F\u6A51\u6A52\u6A53\u6A54\u6A55\u6A56\u6A57\u6A5A\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[152].length; ++j)
                if (D[152][j].charCodeAt(0) !== 65533) {
                    e2[D[152][j]] = 38912 + j;
                    d[38912 + j] = D[152][j];
                }
            D[153] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6A5C\u6A5D\u6A5E\u6A5F\u6A60\u6A62\u6A63\u6A64\u6A66\u6A67\u6A68\u6A69\u6A6A\u6A6B\u6A6C\u6A6D\u6A6E\u6A6F\u6A70\u6A72\u6A73\u6A74\u6A75\u6A76\u6A77\u6A78\u6A7A\u6A7B\u6A7D\u6A7E\u6A7F\u6A81\u6A82\u6A83\u6A85\u6A86\u6A87\u6A88\u6A89\u6A8A\u6A8B\u6A8C\u6A8D\u6A8F\u6A92\u6A93\u6A94\u6A95\u6A96\u6A98\u6A99\u6A9A\u6A9B\u6A9C\u6A9D\u6A9E\u6A9F\u6AA1\u6AA2\u6AA3\u6AA4\u6AA5\u6AA6\uFFFD\u6AA7\u6AA8\u6AAA\u6AAD\u6AAE\u6AAF\u6AB0\u6AB1\u6AB2\u6AB3\u6AB4\u6AB5\u6AB6\u6AB7\u6AB8\u6AB9\u6ABA\u6ABB\u6ABC\u6ABD\u6ABE\u6ABF\u6AC0\u6AC1\u6AC2\u6AC3\u6AC4\u6AC5\u6AC6\u6AC7\u6AC8\u6AC9\u6ACA\u6ACB\u6ACC\u6ACD\u6ACE\u6ACF\u6AD0\u6AD1\u6AD2\u6AD3\u6AD4\u6AD5\u6AD6\u6AD7\u6AD8\u6AD9\u6ADA\u6ADB\u6ADC\u6ADD\u6ADE\u6ADF\u6AE0\u6AE1\u6AE2\u6AE3\u6AE4\u6AE5\u6AE6\u6AE7\u6AE8\u6AE9\u6AEA\u6AEB\u6AEC\u6AED\u6AEE\u6AEF\u6AF0\u6AF1\u6AF2\u6AF3\u6AF4\u6AF5\u6AF6\u6AF7\u6AF8\u6AF9\u6AFA\u6AFB\u6AFC\u6AFD\u6AFE\u6AFF\u6B00\u6B01\u6B02\u6B03\u6B04\u6B05\u6B06\u6B07\u6B08\u6B09\u6B0A\u6B0B\u6B0C\u6B0D\u6B0E\u6B0F\u6B10\u6B11\u6B12\u6B13\u6B14\u6B15\u6B16\u6B17\u6B18\u6B19\u6B1A\u6B1B\u6B1C\u6B1D\u6B1E\u6B1F\u6B25\u6B26\u6B28\u6B29\u6B2A\u6B2B\u6B2C\u6B2D\u6B2E\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[153].length; ++j)
                if (D[153][j].charCodeAt(0) !== 65533) {
                    e2[D[153][j]] = 39168 + j;
                    d[39168 + j] = D[153][j];
                }
            D[154] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6B2F\u6B30\u6B31\u6B33\u6B34\u6B35\u6B36\u6B38\u6B3B\u6B3C\u6B3D\u6B3F\u6B40\u6B41\u6B42\u6B44\u6B45\u6B48\u6B4A\u6B4B\u6B4D\u6B4E\u6B4F\u6B50\u6B51\u6B52\u6B53\u6B54\u6B55\u6B56\u6B57\u6B58\u6B5A\u6B5B\u6B5C\u6B5D\u6B5E\u6B5F\u6B60\u6B61\u6B68\u6B69\u6B6B\u6B6C\u6B6D\u6B6E\u6B6F\u6B70\u6B71\u6B72\u6B73\u6B74\u6B75\u6B76\u6B77\u6B78\u6B7A\u6B7D\u6B7E\u6B7F\u6B80\u6B85\u6B88\uFFFD\u6B8C\u6B8E\u6B8F\u6B90\u6B91\u6B94\u6B95\u6B97\u6B98\u6B99\u6B9C\u6B9D\u6B9E\u6B9F\u6BA0\u6BA2\u6BA3\u6BA4\u6BA5\u6BA6\u6BA7\u6BA8\u6BA9\u6BAB\u6BAC\u6BAD\u6BAE\u6BAF\u6BB0\u6BB1\u6BB2\u6BB6\u6BB8\u6BB9\u6BBA\u6BBB\u6BBC\u6BBD\u6BBE\u6BC0\u6BC3\u6BC4\u6BC6\u6BC7\u6BC8\u6BC9\u6BCA\u6BCC\u6BCE\u6BD0\u6BD1\u6BD8\u6BDA\u6BDC\u6BDD\u6BDE\u6BDF\u6BE0\u6BE2\u6BE3\u6BE4\u6BE5\u6BE6\u6BE7\u6BE8\u6BE9\u6BEC\u6BED\u6BEE\u6BF0\u6BF1\u6BF2\u6BF4\u6BF6\u6BF7\u6BF8\u6BFA\u6BFB\u6BFC\u6BFE\u6BFF\u6C00\u6C01\u6C02\u6C03\u6C04\u6C08\u6C09\u6C0A\u6C0B\u6C0C\u6C0E\u6C12\u6C17\u6C1C\u6C1D\u6C1E\u6C20\u6C23\u6C25\u6C2B\u6C2C\u6C2D\u6C31\u6C33\u6C36\u6C37\u6C39\u6C3A\u6C3B\u6C3C\u6C3E\u6C3F\u6C43\u6C44\u6C45\u6C48\u6C4B\u6C4C\u6C4D\u6C4E\u6C4F\u6C51\u6C52\u6C53\u6C56\u6C58\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[154].length; ++j)
                if (D[154][j].charCodeAt(0) !== 65533) {
                    e2[D[154][j]] = 39424 + j;
                    d[39424 + j] = D[154][j];
                }
            D[155] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6C59\u6C5A\u6C62\u6C63\u6C65\u6C66\u6C67\u6C6B\u6C6C\u6C6D\u6C6E\u6C6F\u6C71\u6C73\u6C75\u6C77\u6C78\u6C7A\u6C7B\u6C7C\u6C7F\u6C80\u6C84\u6C87\u6C8A\u6C8B\u6C8D\u6C8E\u6C91\u6C92\u6C95\u6C96\u6C97\u6C98\u6C9A\u6C9C\u6C9D\u6C9E\u6CA0\u6CA2\u6CA8\u6CAC\u6CAF\u6CB0\u6CB4\u6CB5\u6CB6\u6CB7\u6CBA\u6CC0\u6CC1\u6CC2\u6CC3\u6CC6\u6CC7\u6CC8\u6CCB\u6CCD\u6CCE\u6CCF\u6CD1\u6CD2\u6CD8\uFFFD\u6CD9\u6CDA\u6CDC\u6CDD\u6CDF\u6CE4\u6CE6\u6CE7\u6CE9\u6CEC\u6CED\u6CF2\u6CF4\u6CF9\u6CFF\u6D00\u6D02\u6D03\u6D05\u6D06\u6D08\u6D09\u6D0A\u6D0D\u6D0F\u6D10\u6D11\u6D13\u6D14\u6D15\u6D16\u6D18\u6D1C\u6D1D\u6D1F\u6D20\u6D21\u6D22\u6D23\u6D24\u6D26\u6D28\u6D29\u6D2C\u6D2D\u6D2F\u6D30\u6D34\u6D36\u6D37\u6D38\u6D3A\u6D3F\u6D40\u6D42\u6D44\u6D49\u6D4C\u6D50\u6D55\u6D56\u6D57\u6D58\u6D5B\u6D5D\u6D5F\u6D61\u6D62\u6D64\u6D65\u6D67\u6D68\u6D6B\u6D6C\u6D6D\u6D70\u6D71\u6D72\u6D73\u6D75\u6D76\u6D79\u6D7A\u6D7B\u6D7D\u6D7E\u6D7F\u6D80\u6D81\u6D83\u6D84\u6D86\u6D87\u6D8A\u6D8B\u6D8D\u6D8F\u6D90\u6D92\u6D96\u6D97\u6D98\u6D99\u6D9A\u6D9C\u6DA2\u6DA5\u6DAC\u6DAD\u6DB0\u6DB1\u6DB3\u6DB4\u6DB6\u6DB7\u6DB9\u6DBA\u6DBB\u6DBC\u6DBD\u6DBE\u6DC1\u6DC2\u6DC3\u6DC8\u6DC9\u6DCA\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[155].length; ++j)
                if (D[155][j].charCodeAt(0) !== 65533) {
                    e2[D[155][j]] = 39680 + j;
                    d[39680 + j] = D[155][j];
                }
            D[156] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6DCD\u6DCE\u6DCF\u6DD0\u6DD2\u6DD3\u6DD4\u6DD5\u6DD7\u6DDA\u6DDB\u6DDC\u6DDF\u6DE2\u6DE3\u6DE5\u6DE7\u6DE8\u6DE9\u6DEA\u6DED\u6DEF\u6DF0\u6DF2\u6DF4\u6DF5\u6DF6\u6DF8\u6DFA\u6DFD\u6DFE\u6DFF\u6E00\u6E01\u6E02\u6E03\u6E04\u6E06\u6E07\u6E08\u6E09\u6E0B\u6E0F\u6E12\u6E13\u6E15\u6E18\u6E19\u6E1B\u6E1C\u6E1E\u6E1F\u6E22\u6E26\u6E27\u6E28\u6E2A\u6E2C\u6E2E\u6E30\u6E31\u6E33\u6E35\uFFFD\u6E36\u6E37\u6E39\u6E3B\u6E3C\u6E3D\u6E3E\u6E3F\u6E40\u6E41\u6E42\u6E45\u6E46\u6E47\u6E48\u6E49\u6E4A\u6E4B\u6E4C\u6E4F\u6E50\u6E51\u6E52\u6E55\u6E57\u6E59\u6E5A\u6E5C\u6E5D\u6E5E\u6E60\u6E61\u6E62\u6E63\u6E64\u6E65\u6E66\u6E67\u6E68\u6E69\u6E6A\u6E6C\u6E6D\u6E6F\u6E70\u6E71\u6E72\u6E73\u6E74\u6E75\u6E76\u6E77\u6E78\u6E79\u6E7A\u6E7B\u6E7C\u6E7D\u6E80\u6E81\u6E82\u6E84\u6E87\u6E88\u6E8A\u6E8B\u6E8C\u6E8D\u6E8E\u6E91\u6E92\u6E93\u6E94\u6E95\u6E96\u6E97\u6E99\u6E9A\u6E9B\u6E9D\u6E9E\u6EA0\u6EA1\u6EA3\u6EA4\u6EA6\u6EA8\u6EA9\u6EAB\u6EAC\u6EAD\u6EAE\u6EB0\u6EB3\u6EB5\u6EB8\u6EB9\u6EBC\u6EBE\u6EBF\u6EC0\u6EC3\u6EC4\u6EC5\u6EC6\u6EC8\u6EC9\u6ECA\u6ECC\u6ECD\u6ECE\u6ED0\u6ED2\u6ED6\u6ED8\u6ED9\u6EDB\u6EDC\u6EDD\u6EE3\u6EE7\u6EEA\u6EEB\u6EEC\u6EED\u6EEE\u6EEF\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[156].length; ++j)
                if (D[156][j].charCodeAt(0) !== 65533) {
                    e2[D[156][j]] = 39936 + j;
                    d[39936 + j] = D[156][j];
                }
            D[157] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6EF0\u6EF1\u6EF2\u6EF3\u6EF5\u6EF6\u6EF7\u6EF8\u6EFA\u6EFB\u6EFC\u6EFD\u6EFE\u6EFF\u6F00\u6F01\u6F03\u6F04\u6F05\u6F07\u6F08\u6F0A\u6F0B\u6F0C\u6F0D\u6F0E\u6F10\u6F11\u6F12\u6F16\u6F17\u6F18\u6F19\u6F1A\u6F1B\u6F1C\u6F1D\u6F1E\u6F1F\u6F21\u6F22\u6F23\u6F25\u6F26\u6F27\u6F28\u6F2C\u6F2E\u6F30\u6F32\u6F34\u6F35\u6F37\u6F38\u6F39\u6F3A\u6F3B\u6F3C\u6F3D\u6F3F\u6F40\u6F41\u6F42\uFFFD\u6F43\u6F44\u6F45\u6F48\u6F49\u6F4A\u6F4C\u6F4E\u6F4F\u6F50\u6F51\u6F52\u6F53\u6F54\u6F55\u6F56\u6F57\u6F59\u6F5A\u6F5B\u6F5D\u6F5F\u6F60\u6F61\u6F63\u6F64\u6F65\u6F67\u6F68\u6F69\u6F6A\u6F6B\u6F6C\u6F6F\u6F70\u6F71\u6F73\u6F75\u6F76\u6F77\u6F79\u6F7B\u6F7D\u6F7E\u6F7F\u6F80\u6F81\u6F82\u6F83\u6F85\u6F86\u6F87\u6F8A\u6F8B\u6F8F\u6F90\u6F91\u6F92\u6F93\u6F94\u6F95\u6F96\u6F97\u6F98\u6F99\u6F9A\u6F9B\u6F9D\u6F9E\u6F9F\u6FA0\u6FA2\u6FA3\u6FA4\u6FA5\u6FA6\u6FA8\u6FA9\u6FAA\u6FAB\u6FAC\u6FAD\u6FAE\u6FAF\u6FB0\u6FB1\u6FB2\u6FB4\u6FB5\u6FB7\u6FB8\u6FBA\u6FBB\u6FBC\u6FBD\u6FBE\u6FBF\u6FC1\u6FC3\u6FC4\u6FC5\u6FC6\u6FC7\u6FC8\u6FCA\u6FCB\u6FCC\u6FCD\u6FCE\u6FCF\u6FD0\u6FD3\u6FD4\u6FD5\u6FD6\u6FD7\u6FD8\u6FD9\u6FDA\u6FDB\u6FDC\u6FDD\u6FDF\u6FE2\u6FE3\u6FE4\u6FE5\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[157].length; ++j)
                if (D[157][j].charCodeAt(0) !== 65533) {
                    e2[D[157][j]] = 40192 + j;
                    d[40192 + j] = D[157][j];
                }
            D[158] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6FE6\u6FE7\u6FE8\u6FE9\u6FEA\u6FEB\u6FEC\u6FED\u6FF0\u6FF1\u6FF2\u6FF3\u6FF4\u6FF5\u6FF6\u6FF7\u6FF8\u6FF9\u6FFA\u6FFB\u6FFC\u6FFD\u6FFE\u6FFF\u7000\u7001\u7002\u7003\u7004\u7005\u7006\u7007\u7008\u7009\u700A\u700B\u700C\u700D\u700E\u700F\u7010\u7012\u7013\u7014\u7015\u7016\u7017\u7018\u7019\u701C\u701D\u701E\u701F\u7020\u7021\u7022\u7024\u7025\u7026\u7027\u7028\u7029\u702A\uFFFD\u702B\u702C\u702D\u702E\u702F\u7030\u7031\u7032\u7033\u7034\u7036\u7037\u7038\u703A\u703B\u703C\u703D\u703E\u703F\u7040\u7041\u7042\u7043\u7044\u7045\u7046\u7047\u7048\u7049\u704A\u704B\u704D\u704E\u7050\u7051\u7052\u7053\u7054\u7055\u7056\u7057\u7058\u7059\u705A\u705B\u705C\u705D\u705F\u7060\u7061\u7062\u7063\u7064\u7065\u7066\u7067\u7068\u7069\u706A\u706E\u7071\u7072\u7073\u7074\u7077\u7079\u707A\u707B\u707D\u7081\u7082\u7083\u7084\u7086\u7087\u7088\u708B\u708C\u708D\u708F\u7090\u7091\u7093\u7097\u7098\u709A\u709B\u709E\u709F\u70A0\u70A1\u70A2\u70A3\u70A4\u70A5\u70A6\u70A7\u70A8\u70A9\u70AA\u70B0\u70B2\u70B4\u70B5\u70B6\u70BA\u70BE\u70BF\u70C4\u70C5\u70C6\u70C7\u70C9\u70CB\u70CC\u70CD\u70CE\u70CF\u70D0\u70D1\u70D2\u70D3\u70D4\u70D5\u70D6\u70D7\u70DA\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[158].length; ++j)
                if (D[158][j].charCodeAt(0) !== 65533) {
                    e2[D[158][j]] = 40448 + j;
                    d[40448 + j] = D[158][j];
                }
            D[159] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u70DC\u70DD\u70DE\u70E0\u70E1\u70E2\u70E3\u70E5\u70EA\u70EE\u70F0\u70F1\u70F2\u70F3\u70F4\u70F5\u70F6\u70F8\u70FA\u70FB\u70FC\u70FE\u70FF\u7100\u7101\u7102\u7103\u7104\u7105\u7106\u7107\u7108\u710B\u710C\u710D\u710E\u710F\u7111\u7112\u7114\u7117\u711B\u711C\u711D\u711E\u711F\u7120\u7121\u7122\u7123\u7124\u7125\u7127\u7128\u7129\u712A\u712B\u712C\u712D\u712E\u7132\u7133\u7134\uFFFD\u7135\u7137\u7138\u7139\u713A\u713B\u713C\u713D\u713E\u713F\u7140\u7141\u7142\u7143\u7144\u7146\u7147\u7148\u7149\u714B\u714D\u714F\u7150\u7151\u7152\u7153\u7154\u7155\u7156\u7157\u7158\u7159\u715A\u715B\u715D\u715F\u7160\u7161\u7162\u7163\u7165\u7169\u716A\u716B\u716C\u716D\u716F\u7170\u7171\u7174\u7175\u7176\u7177\u7179\u717B\u717C\u717E\u717F\u7180\u7181\u7182\u7183\u7185\u7186\u7187\u7188\u7189\u718B\u718C\u718D\u718E\u7190\u7191\u7192\u7193\u7195\u7196\u7197\u719A\u719B\u719C\u719D\u719E\u71A1\u71A2\u71A3\u71A4\u71A5\u71A6\u71A7\u71A9\u71AA\u71AB\u71AD\u71AE\u71AF\u71B0\u71B1\u71B2\u71B4\u71B6\u71B7\u71B8\u71BA\u71BB\u71BC\u71BD\u71BE\u71BF\u71C0\u71C1\u71C2\u71C4\u71C5\u71C6\u71C7\u71C8\u71C9\u71CA\u71CB\u71CC\u71CD\u71CF\u71D0\u71D1\u71D2\u71D3\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[159].length; ++j)
                if (D[159][j].charCodeAt(0) !== 65533) {
                    e2[D[159][j]] = 40704 + j;
                    d[40704 + j] = D[159][j];
                }
            D[160] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u71D6\u71D7\u71D8\u71D9\u71DA\u71DB\u71DC\u71DD\u71DE\u71DF\u71E1\u71E2\u71E3\u71E4\u71E6\u71E8\u71E9\u71EA\u71EB\u71EC\u71ED\u71EF\u71F0\u71F1\u71F2\u71F3\u71F4\u71F5\u71F6\u71F7\u71F8\u71FA\u71FB\u71FC\u71FD\u71FE\u71FF\u7200\u7201\u7202\u7203\u7204\u7205\u7207\u7208\u7209\u720A\u720B\u720C\u720D\u720E\u720F\u7210\u7211\u7212\u7213\u7214\u7215\u7216\u7217\u7218\u7219\u721A\uFFFD\u721B\u721C\u721E\u721F\u7220\u7221\u7222\u7223\u7224\u7225\u7226\u7227\u7229\u722B\u722D\u722E\u722F\u7232\u7233\u7234\u723A\u723C\u723E\u7240\u7241\u7242\u7243\u7244\u7245\u7246\u7249\u724A\u724B\u724E\u724F\u7250\u7251\u7253\u7254\u7255\u7257\u7258\u725A\u725C\u725E\u7260\u7263\u7264\u7265\u7268\u726A\u726B\u726C\u726D\u7270\u7271\u7273\u7274\u7276\u7277\u7278\u727B\u727C\u727D\u7282\u7283\u7285\u7286\u7287\u7288\u7289\u728C\u728E\u7290\u7291\u7293\u7294\u7295\u7296\u7297\u7298\u7299\u729A\u729B\u729C\u729D\u729E\u72A0\u72A1\u72A2\u72A3\u72A4\u72A5\u72A6\u72A7\u72A8\u72A9\u72AA\u72AB\u72AE\u72B1\u72B2\u72B3\u72B5\u72BA\u72BB\u72BC\u72BD\u72BE\u72BF\u72C0\u72C5\u72C6\u72C7\u72C9\u72CA\u72CB\u72CC\u72CF\u72D1\u72D3\u72D4\u72D5\u72D6\u72D8\u72DA\u72DB\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[160].length; ++j)
                if (D[160][j].charCodeAt(0) !== 65533) {
                    e2[D[160][j]] = 40960 + j;
                    d[40960 + j] = D[160][j];
                }
            D[161] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u3000\u3001\u3002\xB7\u02C9\u02C7\xA8\u3003\u3005\u2014\uFF5E\u2016\u2026\u2018\u2019\u201C\u201D\u3014\u3015\u3008\u3009\u300A\u300B\u300C\u300D\u300E\u300F\u3016\u3017\u3010\u3011\xB1\xD7\xF7\u2236\u2227\u2228\u2211\u220F\u222A\u2229\u2208\u2237\u221A\u22A5\u2225\u2220\u2312\u2299\u222B\u222E\u2261\u224C\u2248\u223D\u221D\u2260\u226E\u226F\u2264\u2265\u221E\u2235\u2234\u2642\u2640\xB0\u2032\u2033\u2103\uFF04\xA4\uFFE0\uFFE1\u2030\xA7\u2116\u2606\u2605\u25CB\u25CF\u25CE\u25C7\u25C6\u25A1\u25A0\u25B3\u25B2\u203B\u2192\u2190\u2191\u2193\u3013\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[161].length; ++j)
                if (D[161][j].charCodeAt(0) !== 65533) {
                    e2[D[161][j]] = 41216 + j;
                    d[41216 + j] = D[161][j];
                }
            D[162] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2170\u2171\u2172\u2173\u2174\u2175\u2176\u2177\u2178\u2179\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2488\u2489\u248A\u248B\u248C\u248D\u248E\u248F\u2490\u2491\u2492\u2493\u2494\u2495\u2496\u2497\u2498\u2499\u249A\u249B\u2474\u2475\u2476\u2477\u2478\u2479\u247A\u247B\u247C\u247D\u247E\u247F\u2480\u2481\u2482\u2483\u2484\u2485\u2486\u2487\u2460\u2461\u2462\u2463\u2464\u2465\u2466\u2467\u2468\u2469\uFFFD\uFFFD\u3220\u3221\u3222\u3223\u3224\u3225\u3226\u3227\u3228\u3229\uFFFD\uFFFD\u2160\u2161\u2162\u2163\u2164\u2165\u2166\u2167\u2168\u2169\u216A\u216B\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[162].length; ++j)
                if (D[162][j].charCodeAt(0) !== 65533) {
                    e2[D[162][j]] = 41472 + j;
                    d[41472 + j] = D[162][j];
                }
            D[163] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFF01\uFF02\uFF03\uFFE5\uFF05\uFF06\uFF07\uFF08\uFF09\uFF0A\uFF0B\uFF0C\uFF0D\uFF0E\uFF0F\uFF10\uFF11\uFF12\uFF13\uFF14\uFF15\uFF16\uFF17\uFF18\uFF19\uFF1A\uFF1B\uFF1C\uFF1D\uFF1E\uFF1F\uFF20\uFF21\uFF22\uFF23\uFF24\uFF25\uFF26\uFF27\uFF28\uFF29\uFF2A\uFF2B\uFF2C\uFF2D\uFF2E\uFF2F\uFF30\uFF31\uFF32\uFF33\uFF34\uFF35\uFF36\uFF37\uFF38\uFF39\uFF3A\uFF3B\uFF3C\uFF3D\uFF3E\uFF3F\uFF40\uFF41\uFF42\uFF43\uFF44\uFF45\uFF46\uFF47\uFF48\uFF49\uFF4A\uFF4B\uFF4C\uFF4D\uFF4E\uFF4F\uFF50\uFF51\uFF52\uFF53\uFF54\uFF55\uFF56\uFF57\uFF58\uFF59\uFF5A\uFF5B\uFF5C\uFF5D\uFFE3\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[163].length; ++j)
                if (D[163][j].charCodeAt(0) !== 65533) {
                    e2[D[163][j]] = 41728 + j;
                    d[41728 + j] = D[163][j];
                }
            D[164] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304A\u304B\u304C\u304D\u304E\u304F\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305A\u305B\u305C\u305D\u305E\u305F\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306A\u306B\u306C\u306D\u306E\u306F\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307A\u307B\u307C\u307D\u307E\u307F\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308A\u308B\u308C\u308D\u308E\u308F\u3090\u3091\u3092\u3093\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[164].length; ++j)
                if (D[164][j].charCodeAt(0) !== 65533) {
                    e2[D[164][j]] = 41984 + j;
                    d[41984 + j] = D[164][j];
                }
            D[165] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u30A1\u30A2\u30A3\u30A4\u30A5\u30A6\u30A7\u30A8\u30A9\u30AA\u30AB\u30AC\u30AD\u30AE\u30AF\u30B0\u30B1\u30B2\u30B3\u30B4\u30B5\u30B6\u30B7\u30B8\u30B9\u30BA\u30BB\u30BC\u30BD\u30BE\u30BF\u30C0\u30C1\u30C2\u30C3\u30C4\u30C5\u30C6\u30C7\u30C8\u30C9\u30CA\u30CB\u30CC\u30CD\u30CE\u30CF\u30D0\u30D1\u30D2\u30D3\u30D4\u30D5\u30D6\u30D7\u30D8\u30D9\u30DA\u30DB\u30DC\u30DD\u30DE\u30DF\u30E0\u30E1\u30E2\u30E3\u30E4\u30E5\u30E6\u30E7\u30E8\u30E9\u30EA\u30EB\u30EC\u30ED\u30EE\u30EF\u30F0\u30F1\u30F2\u30F3\u30F4\u30F5\u30F6\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[165].length; ++j)
                if (D[165][j].charCodeAt(0) !== 65533) {
                    e2[D[165][j]] = 42240 + j;
                    d[42240 + j] = D[165][j];
                }
            D[166] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C3\u03C4\u03C5\u03C6\u03C7\u03C8\u03C9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFE35\uFE36\uFE39\uFE3A\uFE3F\uFE40\uFE3D\uFE3E\uFE41\uFE42\uFE43\uFE44\uFFFD\uFFFD\uFE3B\uFE3C\uFE37\uFE38\uFE31\uFFFD\uFE33\uFE34\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[166].length; ++j)
                if (D[166][j].charCodeAt(0) !== 65533) {
                    e2[D[166][j]] = 42496 + j;
                    d[42496 + j] = D[166][j];
                }
            D[167] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0410\u0411\u0412\u0413\u0414\u0415\u0401\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0430\u0431\u0432\u0433\u0434\u0435\u0451\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[167].length; ++j)
                if (D[167][j].charCodeAt(0) !== 65533) {
                    e2[D[167][j]] = 42752 + j;
                    d[42752 + j] = D[167][j];
                }
            D[168] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u02CA\u02CB\u02D9\u2013\u2015\u2025\u2035\u2105\u2109\u2196\u2197\u2198\u2199\u2215\u221F\u2223\u2252\u2266\u2267\u22BF\u2550\u2551\u2552\u2553\u2554\u2555\u2556\u2557\u2558\u2559\u255A\u255B\u255C\u255D\u255E\u255F\u2560\u2561\u2562\u2563\u2564\u2565\u2566\u2567\u2568\u2569\u256A\u256B\u256C\u256D\u256E\u256F\u2570\u2571\u2572\u2573\u2581\u2582\u2583\u2584\u2585\u2586\u2587\uFFFD\u2588\u2589\u258A\u258B\u258C\u258D\u258E\u258F\u2593\u2594\u2595\u25BC\u25BD\u25E2\u25E3\u25E4\u25E5\u2609\u2295\u3012\u301D\u301E\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0101\xE1\u01CE\xE0\u0113\xE9\u011B\xE8\u012B\xED\u01D0\xEC\u014D\xF3\u01D2\xF2\u016B\xFA\u01D4\xF9\u01D6\u01D8\u01DA\u01DC\xFC\xEA\u0251\uFFFD\u0144\u0148\uFFFD\u0261\uFFFD\uFFFD\uFFFD\uFFFD\u3105\u3106\u3107\u3108\u3109\u310A\u310B\u310C\u310D\u310E\u310F\u3110\u3111\u3112\u3113\u3114\u3115\u3116\u3117\u3118\u3119\u311A\u311B\u311C\u311D\u311E\u311F\u3120\u3121\u3122\u3123\u3124\u3125\u3126\u3127\u3128\u3129\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[168].length; ++j)
                if (D[168][j].charCodeAt(0) !== 65533) {
                    e2[D[168][j]] = 43008 + j;
                    d[43008 + j] = D[168][j];
                }
            D[169] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u3021\u3022\u3023\u3024\u3025\u3026\u3027\u3028\u3029\u32A3\u338E\u338F\u339C\u339D\u339E\u33A1\u33C4\u33CE\u33D1\u33D2\u33D5\uFE30\uFFE2\uFFE4\uFFFD\u2121\u3231\uFFFD\u2010\uFFFD\uFFFD\uFFFD\u30FC\u309B\u309C\u30FD\u30FE\u3006\u309D\u309E\uFE49\uFE4A\uFE4B\uFE4C\uFE4D\uFE4E\uFE4F\uFE50\uFE51\uFE52\uFE54\uFE55\uFE56\uFE57\uFE59\uFE5A\uFE5B\uFE5C\uFE5D\uFE5E\uFE5F\uFE60\uFE61\uFFFD\uFE62\uFE63\uFE64\uFE65\uFE66\uFE68\uFE69\uFE6A\uFE6B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u3007\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2500\u2501\u2502\u2503\u2504\u2505\u2506\u2507\u2508\u2509\u250A\u250B\u250C\u250D\u250E\u250F\u2510\u2511\u2512\u2513\u2514\u2515\u2516\u2517\u2518\u2519\u251A\u251B\u251C\u251D\u251E\u251F\u2520\u2521\u2522\u2523\u2524\u2525\u2526\u2527\u2528\u2529\u252A\u252B\u252C\u252D\u252E\u252F\u2530\u2531\u2532\u2533\u2534\u2535\u2536\u2537\u2538\u2539\u253A\u253B\u253C\u253D\u253E\u253F\u2540\u2541\u2542\u2543\u2544\u2545\u2546\u2547\u2548\u2549\u254A\u254B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[169].length; ++j)
                if (D[169][j].charCodeAt(0) !== 65533) {
                    e2[D[169][j]] = 43264 + j;
                    d[43264 + j] = D[169][j];
                }
            D[170] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u72DC\u72DD\u72DF\u72E2\u72E3\u72E4\u72E5\u72E6\u72E7\u72EA\u72EB\u72F5\u72F6\u72F9\u72FD\u72FE\u72FF\u7300\u7302\u7304\u7305\u7306\u7307\u7308\u7309\u730B\u730C\u730D\u730F\u7310\u7311\u7312\u7314\u7318\u7319\u731A\u731F\u7320\u7323\u7324\u7326\u7327\u7328\u732D\u732F\u7330\u7332\u7333\u7335\u7336\u733A\u733B\u733C\u733D\u7340\u7341\u7342\u7343\u7344\u7345\u7346\u7347\u7348\uFFFD\u7349\u734A\u734B\u734C\u734E\u734F\u7351\u7353\u7354\u7355\u7356\u7358\u7359\u735A\u735B\u735C\u735D\u735E\u735F\u7361\u7362\u7363\u7364\u7365\u7366\u7367\u7368\u7369\u736A\u736B\u736E\u7370\u7371\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[170].length; ++j)
                if (D[170][j].charCodeAt(0) !== 65533) {
                    e2[D[170][j]] = 43520 + j;
                    d[43520 + j] = D[170][j];
                }
            D[171] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7372\u7373\u7374\u7375\u7376\u7377\u7378\u7379\u737A\u737B\u737C\u737D\u737F\u7380\u7381\u7382\u7383\u7385\u7386\u7388\u738A\u738C\u738D\u738F\u7390\u7392\u7393\u7394\u7395\u7397\u7398\u7399\u739A\u739C\u739D\u739E\u73A0\u73A1\u73A3\u73A4\u73A5\u73A6\u73A7\u73A8\u73AA\u73AC\u73AD\u73B1\u73B4\u73B5\u73B6\u73B8\u73B9\u73BC\u73BD\u73BE\u73BF\u73C1\u73C3\u73C4\u73C5\u73C6\u73C7\uFFFD\u73CB\u73CC\u73CE\u73D2\u73D3\u73D4\u73D5\u73D6\u73D7\u73D8\u73DA\u73DB\u73DC\u73DD\u73DF\u73E1\u73E2\u73E3\u73E4\u73E6\u73E8\u73EA\u73EB\u73EC\u73EE\u73EF\u73F0\u73F1\u73F3\u73F4\u73F5\u73F6\u73F7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[171].length; ++j)
                if (D[171][j].charCodeAt(0) !== 65533) {
                    e2[D[171][j]] = 43776 + j;
                    d[43776 + j] = D[171][j];
                }
            D[172] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u73F8\u73F9\u73FA\u73FB\u73FC\u73FD\u73FE\u73FF\u7400\u7401\u7402\u7404\u7407\u7408\u740B\u740C\u740D\u740E\u7411\u7412\u7413\u7414\u7415\u7416\u7417\u7418\u7419\u741C\u741D\u741E\u741F\u7420\u7421\u7423\u7424\u7427\u7429\u742B\u742D\u742F\u7431\u7432\u7437\u7438\u7439\u743A\u743B\u743D\u743E\u743F\u7440\u7442\u7443\u7444\u7445\u7446\u7447\u7448\u7449\u744A\u744B\u744C\u744D\uFFFD\u744E\u744F\u7450\u7451\u7452\u7453\u7454\u7456\u7458\u745D\u7460\u7461\u7462\u7463\u7464\u7465\u7466\u7467\u7468\u7469\u746A\u746B\u746C\u746E\u746F\u7471\u7472\u7473\u7474\u7475\u7478\u7479\u747A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[172].length; ++j)
                if (D[172][j].charCodeAt(0) !== 65533) {
                    e2[D[172][j]] = 44032 + j;
                    d[44032 + j] = D[172][j];
                }
            D[173] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u747B\u747C\u747D\u747F\u7482\u7484\u7485\u7486\u7488\u7489\u748A\u748C\u748D\u748F\u7491\u7492\u7493\u7494\u7495\u7496\u7497\u7498\u7499\u749A\u749B\u749D\u749F\u74A0\u74A1\u74A2\u74A3\u74A4\u74A5\u74A6\u74AA\u74AB\u74AC\u74AD\u74AE\u74AF\u74B0\u74B1\u74B2\u74B3\u74B4\u74B5\u74B6\u74B7\u74B8\u74B9\u74BB\u74BC\u74BD\u74BE\u74BF\u74C0\u74C1\u74C2\u74C3\u74C4\u74C5\u74C6\u74C7\uFFFD\u74C8\u74C9\u74CA\u74CB\u74CC\u74CD\u74CE\u74CF\u74D0\u74D1\u74D3\u74D4\u74D5\u74D6\u74D7\u74D8\u74D9\u74DA\u74DB\u74DD\u74DF\u74E1\u74E5\u74E7\u74E8\u74E9\u74EA\u74EB\u74EC\u74ED\u74F0\u74F1\u74F2\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[173].length; ++j)
                if (D[173][j].charCodeAt(0) !== 65533) {
                    e2[D[173][j]] = 44288 + j;
                    d[44288 + j] = D[173][j];
                }
            D[174] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u74F3\u74F5\u74F8\u74F9\u74FA\u74FB\u74FC\u74FD\u74FE\u7500\u7501\u7502\u7503\u7505\u7506\u7507\u7508\u7509\u750A\u750B\u750C\u750E\u7510\u7512\u7514\u7515\u7516\u7517\u751B\u751D\u751E\u7520\u7521\u7522\u7523\u7524\u7526\u7527\u752A\u752E\u7534\u7536\u7539\u753C\u753D\u753F\u7541\u7542\u7543\u7544\u7546\u7547\u7549\u754A\u754D\u7550\u7551\u7552\u7553\u7555\u7556\u7557\u7558\uFFFD\u755D\u755E\u755F\u7560\u7561\u7562\u7563\u7564\u7567\u7568\u7569\u756B\u756C\u756D\u756E\u756F\u7570\u7571\u7573\u7575\u7576\u7577\u757A\u757B\u757C\u757D\u757E\u7580\u7581\u7582\u7584\u7585\u7587\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[174].length; ++j)
                if (D[174][j].charCodeAt(0) !== 65533) {
                    e2[D[174][j]] = 44544 + j;
                    d[44544 + j] = D[174][j];
                }
            D[175] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7588\u7589\u758A\u758C\u758D\u758E\u7590\u7593\u7595\u7598\u759B\u759C\u759E\u75A2\u75A6\u75A7\u75A8\u75A9\u75AA\u75AD\u75B6\u75B7\u75BA\u75BB\u75BF\u75C0\u75C1\u75C6\u75CB\u75CC\u75CE\u75CF\u75D0\u75D1\u75D3\u75D7\u75D9\u75DA\u75DC\u75DD\u75DF\u75E0\u75E1\u75E5\u75E9\u75EC\u75ED\u75EE\u75EF\u75F2\u75F3\u75F5\u75F6\u75F7\u75F8\u75FA\u75FB\u75FD\u75FE\u7602\u7604\u7606\u7607\uFFFD\u7608\u7609\u760B\u760D\u760E\u760F\u7611\u7612\u7613\u7614\u7616\u761A\u761C\u761D\u761E\u7621\u7623\u7627\u7628\u762C\u762E\u762F\u7631\u7632\u7636\u7637\u7639\u763A\u763B\u763D\u7641\u7642\u7644\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[175].length; ++j)
                if (D[175][j].charCodeAt(0) !== 65533) {
                    e2[D[175][j]] = 44800 + j;
                    d[44800 + j] = D[175][j];
                }
            D[176] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7645\u7646\u7647\u7648\u7649\u764A\u764B\u764E\u764F\u7650\u7651\u7652\u7653\u7655\u7657\u7658\u7659\u765A\u765B\u765D\u765F\u7660\u7661\u7662\u7664\u7665\u7666\u7667\u7668\u7669\u766A\u766C\u766D\u766E\u7670\u7671\u7672\u7673\u7674\u7675\u7676\u7677\u7679\u767A\u767C\u767F\u7680\u7681\u7683\u7685\u7689\u768A\u768C\u768D\u768F\u7690\u7692\u7694\u7695\u7697\u7698\u769A\u769B\uFFFD\u769C\u769D\u769E\u769F\u76A0\u76A1\u76A2\u76A3\u76A5\u76A6\u76A7\u76A8\u76A9\u76AA\u76AB\u76AC\u76AD\u76AF\u76B0\u76B3\u76B5\u76B6\u76B7\u76B8\u76B9\u76BA\u76BB\u76BC\u76BD\u76BE\u76C0\u76C1\u76C3\u554A\u963F\u57C3\u6328\u54CE\u5509\u54C0\u7691\u764C\u853C\u77EE\u827E\u788D\u7231\u9698\u978D\u6C28\u5B89\u4FFA\u6309\u6697\u5CB8\u80FA\u6848\u80AE\u6602\u76CE\u51F9\u6556\u71AC\u7FF1\u8884\u50B2\u5965\u61CA\u6FB3\u82AD\u634C\u6252\u53ED\u5427\u7B06\u516B\u75A4\u5DF4\u62D4\u8DCB\u9776\u628A\u8019\u575D\u9738\u7F62\u7238\u767D\u67CF\u767E\u6446\u4F70\u8D25\u62DC\u7A17\u6591\u73ED\u642C\u6273\u822C\u9881\u677F\u7248\u626E\u62CC\u4F34\u74E3\u534A\u529E\u7ECA\u90A6\u5E2E\u6886\u699C\u8180\u7ED1\u68D2\u78C5\u868C\u9551\u508D\u8C24\u82DE\u80DE\u5305\u8912\u5265\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[176].length; ++j)
                if (D[176][j].charCodeAt(0) !== 65533) {
                    e2[D[176][j]] = 45056 + j;
                    d[45056 + j] = D[176][j];
                }
            D[177] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u76C4\u76C7\u76C9\u76CB\u76CC\u76D3\u76D5\u76D9\u76DA\u76DC\u76DD\u76DE\u76E0\u76E1\u76E2\u76E3\u76E4\u76E6\u76E7\u76E8\u76E9\u76EA\u76EB\u76EC\u76ED\u76F0\u76F3\u76F5\u76F6\u76F7\u76FA\u76FB\u76FD\u76FF\u7700\u7702\u7703\u7705\u7706\u770A\u770C\u770E\u770F\u7710\u7711\u7712\u7713\u7714\u7715\u7716\u7717\u7718\u771B\u771C\u771D\u771E\u7721\u7723\u7724\u7725\u7727\u772A\u772B\uFFFD\u772C\u772E\u7730\u7731\u7732\u7733\u7734\u7739\u773B\u773D\u773E\u773F\u7742\u7744\u7745\u7746\u7748\u7749\u774A\u774B\u774C\u774D\u774E\u774F\u7752\u7753\u7754\u7755\u7756\u7757\u7758\u7759\u775C\u8584\u96F9\u4FDD\u5821\u9971\u5B9D\u62B1\u62A5\u66B4\u8C79\u9C8D\u7206\u676F\u7891\u60B2\u5351\u5317\u8F88\u80CC\u8D1D\u94A1\u500D\u72C8\u5907\u60EB\u7119\u88AB\u5954\u82EF\u672C\u7B28\u5D29\u7EF7\u752D\u6CF5\u8E66\u8FF8\u903C\u9F3B\u6BD4\u9119\u7B14\u5F7C\u78A7\u84D6\u853D\u6BD5\u6BD9\u6BD6\u5E01\u5E87\u75F9\u95ED\u655D\u5F0A\u5FC5\u8F9F\u58C1\u81C2\u907F\u965B\u97AD\u8FB9\u7F16\u8D2C\u6241\u4FBF\u53D8\u535E\u8FA8\u8FA9\u8FAB\u904D\u6807\u5F6A\u8198\u8868\u9CD6\u618B\u522B\u762A\u5F6C\u658C\u6FD2\u6EE8\u5BBE\u6448\u5175\u51B0\u67C4\u4E19\u79C9\u997C\u70B3\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[177].length; ++j)
                if (D[177][j].charCodeAt(0) !== 65533) {
                    e2[D[177][j]] = 45312 + j;
                    d[45312 + j] = D[177][j];
                }
            D[178] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u775D\u775E\u775F\u7760\u7764\u7767\u7769\u776A\u776D\u776E\u776F\u7770\u7771\u7772\u7773\u7774\u7775\u7776\u7777\u7778\u777A\u777B\u777C\u7781\u7782\u7783\u7786\u7787\u7788\u7789\u778A\u778B\u778F\u7790\u7793\u7794\u7795\u7796\u7797\u7798\u7799\u779A\u779B\u779C\u779D\u779E\u77A1\u77A3\u77A4\u77A6\u77A8\u77AB\u77AD\u77AE\u77AF\u77B1\u77B2\u77B4\u77B6\u77B7\u77B8\u77B9\u77BA\uFFFD\u77BC\u77BE\u77C0\u77C1\u77C2\u77C3\u77C4\u77C5\u77C6\u77C7\u77C8\u77C9\u77CA\u77CB\u77CC\u77CE\u77CF\u77D0\u77D1\u77D2\u77D3\u77D4\u77D5\u77D6\u77D8\u77D9\u77DA\u77DD\u77DE\u77DF\u77E0\u77E1\u77E4\u75C5\u5E76\u73BB\u83E0\u64AD\u62E8\u94B5\u6CE2\u535A\u52C3\u640F\u94C2\u7B94\u4F2F\u5E1B\u8236\u8116\u818A\u6E24\u6CCA\u9A73\u6355\u535C\u54FA\u8865\u57E0\u4E0D\u5E03\u6B65\u7C3F\u90E8\u6016\u64E6\u731C\u88C1\u6750\u624D\u8D22\u776C\u8E29\u91C7\u5F69\u83DC\u8521\u9910\u53C2\u8695\u6B8B\u60ED\u60E8\u707F\u82CD\u8231\u4ED3\u6CA7\u85CF\u64CD\u7CD9\u69FD\u66F9\u8349\u5395\u7B56\u4FA7\u518C\u6D4B\u5C42\u8E6D\u63D2\u53C9\u832C\u8336\u67E5\u78B4\u643D\u5BDF\u5C94\u5DEE\u8BE7\u62C6\u67F4\u8C7A\u6400\u63BA\u8749\u998B\u8C17\u7F20\u94F2\u4EA7\u9610\u98A4\u660C\u7316\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[178].length; ++j)
                if (D[178][j].charCodeAt(0) !== 65533) {
                    e2[D[178][j]] = 45568 + j;
                    d[45568 + j] = D[178][j];
                }
            D[179] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u77E6\u77E8\u77EA\u77EF\u77F0\u77F1\u77F2\u77F4\u77F5\u77F7\u77F9\u77FA\u77FB\u77FC\u7803\u7804\u7805\u7806\u7807\u7808\u780A\u780B\u780E\u780F\u7810\u7813\u7815\u7819\u781B\u781E\u7820\u7821\u7822\u7824\u7828\u782A\u782B\u782E\u782F\u7831\u7832\u7833\u7835\u7836\u783D\u783F\u7841\u7842\u7843\u7844\u7846\u7848\u7849\u784A\u784B\u784D\u784F\u7851\u7853\u7854\u7858\u7859\u785A\uFFFD\u785B\u785C\u785E\u785F\u7860\u7861\u7862\u7863\u7864\u7865\u7866\u7867\u7868\u7869\u786F\u7870\u7871\u7872\u7873\u7874\u7875\u7876\u7878\u7879\u787A\u787B\u787D\u787E\u787F\u7880\u7881\u7882\u7883\u573A\u5C1D\u5E38\u957F\u507F\u80A0\u5382\u655E\u7545\u5531\u5021\u8D85\u6284\u949E\u671D\u5632\u6F6E\u5DE2\u5435\u7092\u8F66\u626F\u64A4\u63A3\u5F7B\u6F88\u90F4\u81E3\u8FB0\u5C18\u6668\u5FF1\u6C89\u9648\u8D81\u886C\u6491\u79F0\u57CE\u6A59\u6210\u5448\u4E58\u7A0B\u60E9\u6F84\u8BDA\u627F\u901E\u9A8B\u79E4\u5403\u75F4\u6301\u5319\u6C60\u8FDF\u5F1B\u9A70\u803B\u9F7F\u4F88\u5C3A\u8D64\u7FC5\u65A5\u70BD\u5145\u51B2\u866B\u5D07\u5BA0\u62BD\u916C\u7574\u8E0C\u7A20\u6101\u7B79\u4EC7\u7EF8\u7785\u4E11\u81ED\u521D\u51FA\u6A71\u53A8\u8E87\u9504\u96CF\u6EC1\u9664\u695A\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[179].length; ++j)
                if (D[179][j].charCodeAt(0) !== 65533) {
                    e2[D[179][j]] = 45824 + j;
                    d[45824 + j] = D[179][j];
                }
            D[180] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7884\u7885\u7886\u7888\u788A\u788B\u788F\u7890\u7892\u7894\u7895\u7896\u7899\u789D\u789E\u78A0\u78A2\u78A4\u78A6\u78A8\u78A9\u78AA\u78AB\u78AC\u78AD\u78AE\u78AF\u78B5\u78B6\u78B7\u78B8\u78BA\u78BB\u78BC\u78BD\u78BF\u78C0\u78C2\u78C3\u78C4\u78C6\u78C7\u78C8\u78CC\u78CD\u78CE\u78CF\u78D1\u78D2\u78D3\u78D6\u78D7\u78D8\u78DA\u78DB\u78DC\u78DD\u78DE\u78DF\u78E0\u78E1\u78E2\u78E3\uFFFD\u78E4\u78E5\u78E6\u78E7\u78E9\u78EA\u78EB\u78ED\u78EE\u78EF\u78F0\u78F1\u78F3\u78F5\u78F6\u78F8\u78F9\u78FB\u78FC\u78FD\u78FE\u78FF\u7900\u7902\u7903\u7904\u7906\u7907\u7908\u7909\u790A\u790B\u790C\u7840\u50A8\u77D7\u6410\u89E6\u5904\u63E3\u5DDD\u7A7F\u693D\u4F20\u8239\u5598\u4E32\u75AE\u7A97\u5E62\u5E8A\u95EF\u521B\u5439\u708A\u6376\u9524\u5782\u6625\u693F\u9187\u5507\u6DF3\u7EAF\u8822\u6233\u7EF0\u75B5\u8328\u78C1\u96CC\u8F9E\u6148\u74F7\u8BCD\u6B64\u523A\u8D50\u6B21\u806A\u8471\u56F1\u5306\u4ECE\u4E1B\u51D1\u7C97\u918B\u7C07\u4FC3\u8E7F\u7BE1\u7A9C\u6467\u5D14\u50AC\u8106\u7601\u7CB9\u6DEC\u7FE0\u6751\u5B58\u5BF8\u78CB\u64AE\u6413\u63AA\u632B\u9519\u642D\u8FBE\u7B54\u7629\u6253\u5927\u5446\u6B79\u50A3\u6234\u5E26\u6B86\u4EE3\u8D37\u888B\u5F85\u902E\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[180].length; ++j)
                if (D[180][j].charCodeAt(0) !== 65533) {
                    e2[D[180][j]] = 46080 + j;
                    d[46080 + j] = D[180][j];
                }
            D[181] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u790D\u790E\u790F\u7910\u7911\u7912\u7914\u7915\u7916\u7917\u7918\u7919\u791A\u791B\u791C\u791D\u791F\u7920\u7921\u7922\u7923\u7925\u7926\u7927\u7928\u7929\u792A\u792B\u792C\u792D\u792E\u792F\u7930\u7931\u7932\u7933\u7935\u7936\u7937\u7938\u7939\u793D\u793F\u7942\u7943\u7944\u7945\u7947\u794A\u794B\u794C\u794D\u794E\u794F\u7950\u7951\u7952\u7954\u7955\u7958\u7959\u7961\u7963\uFFFD\u7964\u7966\u7969\u796A\u796B\u796C\u796E\u7970\u7971\u7972\u7973\u7974\u7975\u7976\u7979\u797B\u797C\u797D\u797E\u797F\u7982\u7983\u7986\u7987\u7988\u7989\u798B\u798C\u798D\u798E\u7990\u7991\u7992\u6020\u803D\u62C5\u4E39\u5355\u90F8\u63B8\u80C6\u65E6\u6C2E\u4F46\u60EE\u6DE1\u8BDE\u5F39\u86CB\u5F53\u6321\u515A\u8361\u6863\u5200\u6363\u8E48\u5012\u5C9B\u7977\u5BFC\u5230\u7A3B\u60BC\u9053\u76D7\u5FB7\u5F97\u7684\u8E6C\u706F\u767B\u7B49\u77AA\u51F3\u9093\u5824\u4F4E\u6EF4\u8FEA\u654C\u7B1B\u72C4\u6DA4\u7FDF\u5AE1\u62B5\u5E95\u5730\u8482\u7B2C\u5E1D\u5F1F\u9012\u7F14\u98A0\u6382\u6EC7\u7898\u70B9\u5178\u975B\u57AB\u7535\u4F43\u7538\u5E97\u60E6\u5960\u6DC0\u6BBF\u7889\u53FC\u96D5\u51CB\u5201\u6389\u540A\u9493\u8C03\u8DCC\u7239\u789F\u8776\u8FED\u8C0D\u53E0\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[181].length; ++j)
                if (D[181][j].charCodeAt(0) !== 65533) {
                    e2[D[181][j]] = 46336 + j;
                    d[46336 + j] = D[181][j];
                }
            D[182] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7993\u7994\u7995\u7996\u7997\u7998\u7999\u799B\u799C\u799D\u799E\u799F\u79A0\u79A1\u79A2\u79A3\u79A4\u79A5\u79A6\u79A8\u79A9\u79AA\u79AB\u79AC\u79AD\u79AE\u79AF\u79B0\u79B1\u79B2\u79B4\u79B5\u79B6\u79B7\u79B8\u79BC\u79BF\u79C2\u79C4\u79C5\u79C7\u79C8\u79CA\u79CC\u79CE\u79CF\u79D0\u79D3\u79D4\u79D6\u79D7\u79D9\u79DA\u79DB\u79DC\u79DD\u79DE\u79E0\u79E1\u79E2\u79E5\u79E8\u79EA\uFFFD\u79EC\u79EE\u79F1\u79F2\u79F3\u79F4\u79F5\u79F6\u79F7\u79F9\u79FA\u79FC\u79FE\u79FF\u7A01\u7A04\u7A05\u7A07\u7A08\u7A09\u7A0A\u7A0C\u7A0F\u7A10\u7A11\u7A12\u7A13\u7A15\u7A16\u7A18\u7A19\u7A1B\u7A1C\u4E01\u76EF\u53EE\u9489\u9876\u9F0E\u952D\u5B9A\u8BA2\u4E22\u4E1C\u51AC\u8463\u61C2\u52A8\u680B\u4F97\u606B\u51BB\u6D1E\u515C\u6296\u6597\u9661\u8C46\u9017\u75D8\u90FD\u7763\u6BD2\u728A\u72EC\u8BFB\u5835\u7779\u8D4C\u675C\u9540\u809A\u5EA6\u6E21\u5992\u7AEF\u77ED\u953B\u6BB5\u65AD\u7F0E\u5806\u5151\u961F\u5BF9\u58A9\u5428\u8E72\u6566\u987F\u56E4\u949D\u76FE\u9041\u6387\u54C6\u591A\u593A\u579B\u8EB2\u6735\u8DFA\u8235\u5241\u60F0\u5815\u86FE\u5CE8\u9E45\u4FC4\u989D\u8BB9\u5A25\u6076\u5384\u627C\u904F\u9102\u997F\u6069\u800C\u513F\u8033\u5C14\u9975\u6D31\u4E8C\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[182].length; ++j)
                if (D[182][j].charCodeAt(0) !== 65533) {
                    e2[D[182][j]] = 46592 + j;
                    d[46592 + j] = D[182][j];
                }
            D[183] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7A1D\u7A1F\u7A21\u7A22\u7A24\u7A25\u7A26\u7A27\u7A28\u7A29\u7A2A\u7A2B\u7A2C\u7A2D\u7A2E\u7A2F\u7A30\u7A31\u7A32\u7A34\u7A35\u7A36\u7A38\u7A3A\u7A3E\u7A40\u7A41\u7A42\u7A43\u7A44\u7A45\u7A47\u7A48\u7A49\u7A4A\u7A4B\u7A4C\u7A4D\u7A4E\u7A4F\u7A50\u7A52\u7A53\u7A54\u7A55\u7A56\u7A58\u7A59\u7A5A\u7A5B\u7A5C\u7A5D\u7A5E\u7A5F\u7A60\u7A61\u7A62\u7A63\u7A64\u7A65\u7A66\u7A67\u7A68\uFFFD\u7A69\u7A6A\u7A6B\u7A6C\u7A6D\u7A6E\u7A6F\u7A71\u7A72\u7A73\u7A75\u7A7B\u7A7C\u7A7D\u7A7E\u7A82\u7A85\u7A87\u7A89\u7A8A\u7A8B\u7A8C\u7A8E\u7A8F\u7A90\u7A93\u7A94\u7A99\u7A9A\u7A9B\u7A9E\u7AA1\u7AA2\u8D30\u53D1\u7F5A\u7B4F\u4F10\u4E4F\u9600\u6CD5\u73D0\u85E9\u5E06\u756A\u7FFB\u6A0A\u77FE\u9492\u7E41\u51E1\u70E6\u53CD\u8FD4\u8303\u8D29\u72AF\u996D\u6CDB\u574A\u82B3\u65B9\u80AA\u623F\u9632\u59A8\u4EFF\u8BBF\u7EBA\u653E\u83F2\u975E\u5561\u98DE\u80A5\u532A\u8BFD\u5420\u80BA\u5E9F\u6CB8\u8D39\u82AC\u915A\u5429\u6C1B\u5206\u7EB7\u575F\u711A\u6C7E\u7C89\u594B\u4EFD\u5FFF\u6124\u7CAA\u4E30\u5C01\u67AB\u8702\u5CF0\u950B\u98CE\u75AF\u70FD\u9022\u51AF\u7F1D\u8BBD\u5949\u51E4\u4F5B\u5426\u592B\u6577\u80A4\u5B75\u6276\u62C2\u8F90\u5E45\u6C1F\u7B26\u4F0F\u4FD8\u670D\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[183].length; ++j)
                if (D[183][j].charCodeAt(0) !== 65533) {
                    e2[D[183][j]] = 46848 + j;
                    d[46848 + j] = D[183][j];
                }
            D[184] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7AA3\u7AA4\u7AA7\u7AA9\u7AAA\u7AAB\u7AAE\u7AAF\u7AB0\u7AB1\u7AB2\u7AB4\u7AB5\u7AB6\u7AB7\u7AB8\u7AB9\u7ABA\u7ABB\u7ABC\u7ABD\u7ABE\u7AC0\u7AC1\u7AC2\u7AC3\u7AC4\u7AC5\u7AC6\u7AC7\u7AC8\u7AC9\u7ACA\u7ACC\u7ACD\u7ACE\u7ACF\u7AD0\u7AD1\u7AD2\u7AD3\u7AD4\u7AD5\u7AD7\u7AD8\u7ADA\u7ADB\u7ADC\u7ADD\u7AE1\u7AE2\u7AE4\u7AE7\u7AE8\u7AE9\u7AEA\u7AEB\u7AEC\u7AEE\u7AF0\u7AF1\u7AF2\u7AF3\uFFFD\u7AF4\u7AF5\u7AF6\u7AF7\u7AF8\u7AFB\u7AFC\u7AFE\u7B00\u7B01\u7B02\u7B05\u7B07\u7B09\u7B0C\u7B0D\u7B0E\u7B10\u7B12\u7B13\u7B16\u7B17\u7B18\u7B1A\u7B1C\u7B1D\u7B1F\u7B21\u7B22\u7B23\u7B27\u7B29\u7B2D\u6D6E\u6DAA\u798F\u88B1\u5F17\u752B\u629A\u8F85\u4FEF\u91DC\u65A7\u812F\u8151\u5E9C\u8150\u8D74\u526F\u8986\u8D4B\u590D\u5085\u4ED8\u961C\u7236\u8179\u8D1F\u5BCC\u8BA3\u9644\u5987\u7F1A\u5490\u5676\u560E\u8BE5\u6539\u6982\u9499\u76D6\u6E89\u5E72\u7518\u6746\u67D1\u7AFF\u809D\u8D76\u611F\u79C6\u6562\u8D63\u5188\u521A\u94A2\u7F38\u809B\u7EB2\u5C97\u6E2F\u6760\u7BD9\u768B\u9AD8\u818F\u7F94\u7CD5\u641E\u9550\u7A3F\u544A\u54E5\u6B4C\u6401\u6208\u9E3D\u80F3\u7599\u5272\u9769\u845B\u683C\u86E4\u9601\u9694\u94EC\u4E2A\u5404\u7ED9\u6839\u8DDF\u8015\u66F4\u5E9A\u7FB9\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[184].length; ++j)
                if (D[184][j].charCodeAt(0) !== 65533) {
                    e2[D[184][j]] = 47104 + j;
                    d[47104 + j] = D[184][j];
                }
            D[185] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7B2F\u7B30\u7B32\u7B34\u7B35\u7B36\u7B37\u7B39\u7B3B\u7B3D\u7B3F\u7B40\u7B41\u7B42\u7B43\u7B44\u7B46\u7B48\u7B4A\u7B4D\u7B4E\u7B53\u7B55\u7B57\u7B59\u7B5C\u7B5E\u7B5F\u7B61\u7B63\u7B64\u7B65\u7B66\u7B67\u7B68\u7B69\u7B6A\u7B6B\u7B6C\u7B6D\u7B6F\u7B70\u7B73\u7B74\u7B76\u7B78\u7B7A\u7B7C\u7B7D\u7B7F\u7B81\u7B82\u7B83\u7B84\u7B86\u7B87\u7B88\u7B89\u7B8A\u7B8B\u7B8C\u7B8E\u7B8F\uFFFD\u7B91\u7B92\u7B93\u7B96\u7B98\u7B99\u7B9A\u7B9B\u7B9E\u7B9F\u7BA0\u7BA3\u7BA4\u7BA5\u7BAE\u7BAF\u7BB0\u7BB2\u7BB3\u7BB5\u7BB6\u7BB7\u7BB9\u7BBA\u7BBB\u7BBC\u7BBD\u7BBE\u7BBF\u7BC0\u7BC2\u7BC3\u7BC4\u57C2\u803F\u6897\u5DE5\u653B\u529F\u606D\u9F9A\u4F9B\u8EAC\u516C\u5BAB\u5F13\u5DE9\u6C5E\u62F1\u8D21\u5171\u94A9\u52FE\u6C9F\u82DF\u72D7\u57A2\u6784\u8D2D\u591F\u8F9C\u83C7\u5495\u7B8D\u4F30\u6CBD\u5B64\u59D1\u9F13\u53E4\u86CA\u9AA8\u8C37\u80A1\u6545\u987E\u56FA\u96C7\u522E\u74DC\u5250\u5BE1\u6302\u8902\u4E56\u62D0\u602A\u68FA\u5173\u5B98\u51A0\u89C2\u7BA1\u9986\u7F50\u60EF\u704C\u8D2F\u5149\u5E7F\u901B\u7470\u89C4\u572D\u7845\u5F52\u9F9F\u95FA\u8F68\u9B3C\u8BE1\u7678\u6842\u67DC\u8DEA\u8D35\u523D\u8F8A\u6EDA\u68CD\u9505\u90ED\u56FD\u679C\u88F9\u8FC7\u54C8\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[185].length; ++j)
                if (D[185][j].charCodeAt(0) !== 65533) {
                    e2[D[185][j]] = 47360 + j;
                    d[47360 + j] = D[185][j];
                }
            D[186] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7BC5\u7BC8\u7BC9\u7BCA\u7BCB\u7BCD\u7BCE\u7BCF\u7BD0\u7BD2\u7BD4\u7BD5\u7BD6\u7BD7\u7BD8\u7BDB\u7BDC\u7BDE\u7BDF\u7BE0\u7BE2\u7BE3\u7BE4\u7BE7\u7BE8\u7BE9\u7BEB\u7BEC\u7BED\u7BEF\u7BF0\u7BF2\u7BF3\u7BF4\u7BF5\u7BF6\u7BF8\u7BF9\u7BFA\u7BFB\u7BFD\u7BFF\u7C00\u7C01\u7C02\u7C03\u7C04\u7C05\u7C06\u7C08\u7C09\u7C0A\u7C0D\u7C0E\u7C10\u7C11\u7C12\u7C13\u7C14\u7C15\u7C17\u7C18\u7C19\uFFFD\u7C1A\u7C1B\u7C1C\u7C1D\u7C1E\u7C20\u7C21\u7C22\u7C23\u7C24\u7C25\u7C28\u7C29\u7C2B\u7C2C\u7C2D\u7C2E\u7C2F\u7C30\u7C31\u7C32\u7C33\u7C34\u7C35\u7C36\u7C37\u7C39\u7C3A\u7C3B\u7C3C\u7C3D\u7C3E\u7C42\u9AB8\u5B69\u6D77\u6C26\u4EA5\u5BB3\u9A87\u9163\u61A8\u90AF\u97E9\u542B\u6DB5\u5BD2\u51FD\u558A\u7F55\u7FF0\u64BC\u634D\u65F1\u61BE\u608D\u710A\u6C57\u6C49\u592F\u676D\u822A\u58D5\u568E\u8C6A\u6BEB\u90DD\u597D\u8017\u53F7\u6D69\u5475\u559D\u8377\u83CF\u6838\u79BE\u548C\u4F55\u5408\u76D2\u8C89\u9602\u6CB3\u6DB8\u8D6B\u8910\u9E64\u8D3A\u563F\u9ED1\u75D5\u5F88\u72E0\u6068\u54FC\u4EA8\u6A2A\u8861\u6052\u8F70\u54C4\u70D8\u8679\u9E3F\u6D2A\u5B8F\u5F18\u7EA2\u5589\u4FAF\u7334\u543C\u539A\u5019\u540E\u547C\u4E4E\u5FFD\u745A\u58F6\u846B\u80E1\u8774\u72D0\u7CCA\u6E56\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[186].length; ++j)
                if (D[186][j].charCodeAt(0) !== 65533) {
                    e2[D[186][j]] = 47616 + j;
                    d[47616 + j] = D[186][j];
                }
            D[187] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7C43\u7C44\u7C45\u7C46\u7C47\u7C48\u7C49\u7C4A\u7C4B\u7C4C\u7C4E\u7C4F\u7C50\u7C51\u7C52\u7C53\u7C54\u7C55\u7C56\u7C57\u7C58\u7C59\u7C5A\u7C5B\u7C5C\u7C5D\u7C5E\u7C5F\u7C60\u7C61\u7C62\u7C63\u7C64\u7C65\u7C66\u7C67\u7C68\u7C69\u7C6A\u7C6B\u7C6C\u7C6D\u7C6E\u7C6F\u7C70\u7C71\u7C72\u7C75\u7C76\u7C77\u7C78\u7C79\u7C7A\u7C7E\u7C7F\u7C80\u7C81\u7C82\u7C83\u7C84\u7C85\u7C86\u7C87\uFFFD\u7C88\u7C8A\u7C8B\u7C8C\u7C8D\u7C8E\u7C8F\u7C90\u7C93\u7C94\u7C96\u7C99\u7C9A\u7C9B\u7CA0\u7CA1\u7CA3\u7CA6\u7CA7\u7CA8\u7CA9\u7CAB\u7CAC\u7CAD\u7CAF\u7CB0\u7CB4\u7CB5\u7CB6\u7CB7\u7CB8\u7CBA\u7CBB\u5F27\u864E\u552C\u62A4\u4E92\u6CAA\u6237\u82B1\u54D7\u534E\u733E\u6ED1\u753B\u5212\u5316\u8BDD\u69D0\u5F8A\u6000\u6DEE\u574F\u6B22\u73AF\u6853\u8FD8\u7F13\u6362\u60A3\u5524\u75EA\u8C62\u7115\u6DA3\u5BA6\u5E7B\u8352\u614C\u9EC4\u78FA\u8757\u7C27\u7687\u51F0\u60F6\u714C\u6643\u5E4C\u604D\u8C0E\u7070\u6325\u8F89\u5FBD\u6062\u86D4\u56DE\u6BC1\u6094\u6167\u5349\u60E0\u6666\u8D3F\u79FD\u4F1A\u70E9\u6C47\u8BB3\u8BF2\u7ED8\u8364\u660F\u5A5A\u9B42\u6D51\u6DF7\u8C41\u6D3B\u4F19\u706B\u83B7\u6216\u60D1\u970D\u8D27\u7978\u51FB\u573E\u57FA\u673A\u7578\u7A3D\u79EF\u7B95\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[187].length; ++j)
                if (D[187][j].charCodeAt(0) !== 65533) {
                    e2[D[187][j]] = 47872 + j;
                    d[47872 + j] = D[187][j];
                }
            D[188] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7CBF\u7CC0\u7CC2\u7CC3\u7CC4\u7CC6\u7CC9\u7CCB\u7CCE\u7CCF\u7CD0\u7CD1\u7CD2\u7CD3\u7CD4\u7CD8\u7CDA\u7CDB\u7CDD\u7CDE\u7CE1\u7CE2\u7CE3\u7CE4\u7CE5\u7CE6\u7CE7\u7CE9\u7CEA\u7CEB\u7CEC\u7CED\u7CEE\u7CF0\u7CF1\u7CF2\u7CF3\u7CF4\u7CF5\u7CF6\u7CF7\u7CF9\u7CFA\u7CFC\u7CFD\u7CFE\u7CFF\u7D00\u7D01\u7D02\u7D03\u7D04\u7D05\u7D06\u7D07\u7D08\u7D09\u7D0B\u7D0C\u7D0D\u7D0E\u7D0F\u7D10\uFFFD\u7D11\u7D12\u7D13\u7D14\u7D15\u7D16\u7D17\u7D18\u7D19\u7D1A\u7D1B\u7D1C\u7D1D\u7D1E\u7D1F\u7D21\u7D23\u7D24\u7D25\u7D26\u7D28\u7D29\u7D2A\u7D2C\u7D2D\u7D2E\u7D30\u7D31\u7D32\u7D33\u7D34\u7D35\u7D36\u808C\u9965\u8FF9\u6FC0\u8BA5\u9E21\u59EC\u7EE9\u7F09\u5409\u6781\u68D8\u8F91\u7C4D\u96C6\u53CA\u6025\u75BE\u6C72\u5373\u5AC9\u7EA7\u6324\u51E0\u810A\u5DF1\u84DF\u6280\u5180\u5B63\u4F0E\u796D\u5242\u60B8\u6D4E\u5BC4\u5BC2\u8BA1\u8BB0\u65E2\u5FCC\u9645\u5993\u7EE7\u7EAA\u5609\u67B7\u5939\u4F73\u5BB6\u52A0\u835A\u988A\u8D3E\u7532\u94BE\u5047\u7A3C\u4EF7\u67B6\u9A7E\u5AC1\u6B7C\u76D1\u575A\u5C16\u7B3A\u95F4\u714E\u517C\u80A9\u8270\u5978\u7F04\u8327\u68C0\u67EC\u78B1\u7877\u62E3\u6361\u7B80\u4FED\u526A\u51CF\u8350\u69DB\u9274\u8DF5\u8D31\u89C1\u952E\u7BAD\u4EF6\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[188].length; ++j)
                if (D[188][j].charCodeAt(0) !== 65533) {
                    e2[D[188][j]] = 48128 + j;
                    d[48128 + j] = D[188][j];
                }
            D[189] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7D37\u7D38\u7D39\u7D3A\u7D3B\u7D3C\u7D3D\u7D3E\u7D3F\u7D40\u7D41\u7D42\u7D43\u7D44\u7D45\u7D46\u7D47\u7D48\u7D49\u7D4A\u7D4B\u7D4C\u7D4D\u7D4E\u7D4F\u7D50\u7D51\u7D52\u7D53\u7D54\u7D55\u7D56\u7D57\u7D58\u7D59\u7D5A\u7D5B\u7D5C\u7D5D\u7D5E\u7D5F\u7D60\u7D61\u7D62\u7D63\u7D64\u7D65\u7D66\u7D67\u7D68\u7D69\u7D6A\u7D6B\u7D6C\u7D6D\u7D6F\u7D70\u7D71\u7D72\u7D73\u7D74\u7D75\u7D76\uFFFD\u7D78\u7D79\u7D7A\u7D7B\u7D7C\u7D7D\u7D7E\u7D7F\u7D80\u7D81\u7D82\u7D83\u7D84\u7D85\u7D86\u7D87\u7D88\u7D89\u7D8A\u7D8B\u7D8C\u7D8D\u7D8E\u7D8F\u7D90\u7D91\u7D92\u7D93\u7D94\u7D95\u7D96\u7D97\u7D98\u5065\u8230\u5251\u996F\u6E10\u6E85\u6DA7\u5EFA\u50F5\u59DC\u5C06\u6D46\u6C5F\u7586\u848B\u6868\u5956\u8BB2\u5320\u9171\u964D\u8549\u6912\u7901\u7126\u80F6\u4EA4\u90CA\u6D47\u9A84\u5A07\u56BC\u6405\u94F0\u77EB\u4FA5\u811A\u72E1\u89D2\u997A\u7F34\u7EDE\u527F\u6559\u9175\u8F7F\u8F83\u53EB\u7A96\u63ED\u63A5\u7686\u79F8\u8857\u9636\u622A\u52AB\u8282\u6854\u6770\u6377\u776B\u7AED\u6D01\u7ED3\u89E3\u59D0\u6212\u85C9\u82A5\u754C\u501F\u4ECB\u75A5\u8BEB\u5C4A\u5DFE\u7B4B\u65A4\u91D1\u4ECA\u6D25\u895F\u7D27\u9526\u4EC5\u8C28\u8FDB\u9773\u664B\u7981\u8FD1\u70EC\u6D78\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[189].length; ++j)
                if (D[189][j].charCodeAt(0) !== 65533) {
                    e2[D[189][j]] = 48384 + j;
                    d[48384 + j] = D[189][j];
                }
            D[190] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7D99\u7D9A\u7D9B\u7D9C\u7D9D\u7D9E\u7D9F\u7DA0\u7DA1\u7DA2\u7DA3\u7DA4\u7DA5\u7DA7\u7DA8\u7DA9\u7DAA\u7DAB\u7DAC\u7DAD\u7DAF\u7DB0\u7DB1\u7DB2\u7DB3\u7DB4\u7DB5\u7DB6\u7DB7\u7DB8\u7DB9\u7DBA\u7DBB\u7DBC\u7DBD\u7DBE\u7DBF\u7DC0\u7DC1\u7DC2\u7DC3\u7DC4\u7DC5\u7DC6\u7DC7\u7DC8\u7DC9\u7DCA\u7DCB\u7DCC\u7DCD\u7DCE\u7DCF\u7DD0\u7DD1\u7DD2\u7DD3\u7DD4\u7DD5\u7DD6\u7DD7\u7DD8\u7DD9\uFFFD\u7DDA\u7DDB\u7DDC\u7DDD\u7DDE\u7DDF\u7DE0\u7DE1\u7DE2\u7DE3\u7DE4\u7DE5\u7DE6\u7DE7\u7DE8\u7DE9\u7DEA\u7DEB\u7DEC\u7DED\u7DEE\u7DEF\u7DF0\u7DF1\u7DF2\u7DF3\u7DF4\u7DF5\u7DF6\u7DF7\u7DF8\u7DF9\u7DFA\u5C3D\u52B2\u8346\u5162\u830E\u775B\u6676\u9CB8\u4EAC\u60CA\u7CBE\u7CB3\u7ECF\u4E95\u8B66\u666F\u9888\u9759\u5883\u656C\u955C\u5F84\u75C9\u9756\u7ADF\u7ADE\u51C0\u70AF\u7A98\u63EA\u7A76\u7EA0\u7396\u97ED\u4E45\u7078\u4E5D\u9152\u53A9\u6551\u65E7\u81FC\u8205\u548E\u5C31\u759A\u97A0\u62D8\u72D9\u75BD\u5C45\u9A79\u83CA\u5C40\u5480\u77E9\u4E3E\u6CAE\u805A\u62D2\u636E\u5DE8\u5177\u8DDD\u8E1E\u952F\u4FF1\u53E5\u60E7\u70AC\u5267\u6350\u9E43\u5A1F\u5026\u7737\u5377\u7EE2\u6485\u652B\u6289\u6398\u5014\u7235\u89C9\u51B3\u8BC0\u7EDD\u5747\u83CC\u94A7\u519B\u541B\u5CFB\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[190].length; ++j)
                if (D[190][j].charCodeAt(0) !== 65533) {
                    e2[D[190][j]] = 48640 + j;
                    d[48640 + j] = D[190][j];
                }
            D[191] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7DFB\u7DFC\u7DFD\u7DFE\u7DFF\u7E00\u7E01\u7E02\u7E03\u7E04\u7E05\u7E06\u7E07\u7E08\u7E09\u7E0A\u7E0B\u7E0C\u7E0D\u7E0E\u7E0F\u7E10\u7E11\u7E12\u7E13\u7E14\u7E15\u7E16\u7E17\u7E18\u7E19\u7E1A\u7E1B\u7E1C\u7E1D\u7E1E\u7E1F\u7E20\u7E21\u7E22\u7E23\u7E24\u7E25\u7E26\u7E27\u7E28\u7E29\u7E2A\u7E2B\u7E2C\u7E2D\u7E2E\u7E2F\u7E30\u7E31\u7E32\u7E33\u7E34\u7E35\u7E36\u7E37\u7E38\u7E39\uFFFD\u7E3A\u7E3C\u7E3D\u7E3E\u7E3F\u7E40\u7E42\u7E43\u7E44\u7E45\u7E46\u7E48\u7E49\u7E4A\u7E4B\u7E4C\u7E4D\u7E4E\u7E4F\u7E50\u7E51\u7E52\u7E53\u7E54\u7E55\u7E56\u7E57\u7E58\u7E59\u7E5A\u7E5B\u7E5C\u7E5D\u4FCA\u7AE3\u6D5A\u90E1\u9A8F\u5580\u5496\u5361\u54AF\u5F00\u63E9\u6977\u51EF\u6168\u520A\u582A\u52D8\u574E\u780D\u770B\u5EB7\u6177\u7CE0\u625B\u6297\u4EA2\u7095\u8003\u62F7\u70E4\u9760\u5777\u82DB\u67EF\u68F5\u78D5\u9897\u79D1\u58F3\u54B3\u53EF\u6E34\u514B\u523B\u5BA2\u8BFE\u80AF\u5543\u57A6\u6073\u5751\u542D\u7A7A\u6050\u5B54\u63A7\u62A0\u53E3\u6263\u5BC7\u67AF\u54ED\u7A9F\u82E6\u9177\u5E93\u88E4\u5938\u57AE\u630E\u8DE8\u80EF\u5757\u7B77\u4FA9\u5FEB\u5BBD\u6B3E\u5321\u7B50\u72C2\u6846\u77FF\u7736\u65F7\u51B5\u4E8F\u76D4\u5CBF\u7AA5\u8475\u594E\u9B41\u5080\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[191].length; ++j)
                if (D[191][j].charCodeAt(0) !== 65533) {
                    e2[D[191][j]] = 48896 + j;
                    d[48896 + j] = D[191][j];
                }
            D[192] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7E5E\u7E5F\u7E60\u7E61\u7E62\u7E63\u7E64\u7E65\u7E66\u7E67\u7E68\u7E69\u7E6A\u7E6B\u7E6C\u7E6D\u7E6E\u7E6F\u7E70\u7E71\u7E72\u7E73\u7E74\u7E75\u7E76\u7E77\u7E78\u7E79\u7E7A\u7E7B\u7E7C\u7E7D\u7E7E\u7E7F\u7E80\u7E81\u7E83\u7E84\u7E85\u7E86\u7E87\u7E88\u7E89\u7E8A\u7E8B\u7E8C\u7E8D\u7E8E\u7E8F\u7E90\u7E91\u7E92\u7E93\u7E94\u7E95\u7E96\u7E97\u7E98\u7E99\u7E9A\u7E9C\u7E9D\u7E9E\uFFFD\u7EAE\u7EB4\u7EBB\u7EBC\u7ED6\u7EE4\u7EEC\u7EF9\u7F0A\u7F10\u7F1E\u7F37\u7F39\u7F3B\u7F3C\u7F3D\u7F3E\u7F3F\u7F40\u7F41\u7F43\u7F46\u7F47\u7F48\u7F49\u7F4A\u7F4B\u7F4C\u7F4D\u7F4E\u7F4F\u7F52\u7F53\u9988\u6127\u6E83\u5764\u6606\u6346\u56F0\u62EC\u6269\u5ED3\u9614\u5783\u62C9\u5587\u8721\u814A\u8FA3\u5566\u83B1\u6765\u8D56\u84DD\u5A6A\u680F\u62E6\u7BEE\u9611\u5170\u6F9C\u8C30\u63FD\u89C8\u61D2\u7F06\u70C2\u6EE5\u7405\u6994\u72FC\u5ECA\u90CE\u6717\u6D6A\u635E\u52B3\u7262\u8001\u4F6C\u59E5\u916A\u70D9\u6D9D\u52D2\u4E50\u96F7\u956D\u857E\u78CA\u7D2F\u5121\u5792\u64C2\u808B\u7C7B\u6CEA\u68F1\u695E\u51B7\u5398\u68A8\u7281\u9ECE\u7BF1\u72F8\u79BB\u6F13\u7406\u674E\u91CC\u9CA4\u793C\u8389\u8354\u540F\u6817\u4E3D\u5389\u52B1\u783E\u5386\u5229\u5088\u4F8B\u4FD0\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[192].length; ++j)
                if (D[192][j].charCodeAt(0) !== 65533) {
                    e2[D[192][j]] = 49152 + j;
                    d[49152 + j] = D[192][j];
                }
            D[193] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7F56\u7F59\u7F5B\u7F5C\u7F5D\u7F5E\u7F60\u7F63\u7F64\u7F65\u7F66\u7F67\u7F6B\u7F6C\u7F6D\u7F6F\u7F70\u7F73\u7F75\u7F76\u7F77\u7F78\u7F7A\u7F7B\u7F7C\u7F7D\u7F7F\u7F80\u7F82\u7F83\u7F84\u7F85\u7F86\u7F87\u7F88\u7F89\u7F8B\u7F8D\u7F8F\u7F90\u7F91\u7F92\u7F93\u7F95\u7F96\u7F97\u7F98\u7F99\u7F9B\u7F9C\u7FA0\u7FA2\u7FA3\u7FA5\u7FA6\u7FA8\u7FA9\u7FAA\u7FAB\u7FAC\u7FAD\u7FAE\u7FB1\uFFFD\u7FB3\u7FB4\u7FB5\u7FB6\u7FB7\u7FBA\u7FBB\u7FBE\u7FC0\u7FC2\u7FC3\u7FC4\u7FC6\u7FC7\u7FC8\u7FC9\u7FCB\u7FCD\u7FCF\u7FD0\u7FD1\u7FD2\u7FD3\u7FD6\u7FD7\u7FD9\u7FDA\u7FDB\u7FDC\u7FDD\u7FDE\u7FE2\u7FE3\u75E2\u7ACB\u7C92\u6CA5\u96B6\u529B\u7483\u54E9\u4FE9\u8054\u83B2\u8FDE\u9570\u5EC9\u601C\u6D9F\u5E18\u655B\u8138\u94FE\u604B\u70BC\u7EC3\u7CAE\u51C9\u6881\u7CB1\u826F\u4E24\u8F86\u91CF\u667E\u4EAE\u8C05\u64A9\u804A\u50DA\u7597\u71CE\u5BE5\u8FBD\u6F66\u4E86\u6482\u9563\u5ED6\u6599\u5217\u88C2\u70C8\u52A3\u730E\u7433\u6797\u78F7\u9716\u4E34\u90BB\u9CDE\u6DCB\u51DB\u8D41\u541D\u62CE\u73B2\u83F1\u96F6\u9F84\u94C3\u4F36\u7F9A\u51CC\u7075\u9675\u5CAD\u9886\u53E6\u4EE4\u6E9C\u7409\u69B4\u786B\u998F\u7559\u5218\u7624\u6D41\u67F3\u516D\u9F99\u804B\u5499\u7B3C\u7ABF\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[193].length; ++j)
                if (D[193][j].charCodeAt(0) !== 65533) {
                    e2[D[193][j]] = 49408 + j;
                    d[49408 + j] = D[193][j];
                }
            D[194] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7FE4\u7FE7\u7FE8\u7FEA\u7FEB\u7FEC\u7FED\u7FEF\u7FF2\u7FF4\u7FF5\u7FF6\u7FF7\u7FF8\u7FF9\u7FFA\u7FFD\u7FFE\u7FFF\u8002\u8007\u8008\u8009\u800A\u800E\u800F\u8011\u8013\u801A\u801B\u801D\u801E\u801F\u8021\u8023\u8024\u802B\u802C\u802D\u802E\u802F\u8030\u8032\u8034\u8039\u803A\u803C\u803E\u8040\u8041\u8044\u8045\u8047\u8048\u8049\u804E\u804F\u8050\u8051\u8053\u8055\u8056\u8057\uFFFD\u8059\u805B\u805C\u805D\u805E\u805F\u8060\u8061\u8062\u8063\u8064\u8065\u8066\u8067\u8068\u806B\u806C\u806D\u806E\u806F\u8070\u8072\u8073\u8074\u8075\u8076\u8077\u8078\u8079\u807A\u807B\u807C\u807D\u9686\u5784\u62E2\u9647\u697C\u5A04\u6402\u7BD3\u6F0F\u964B\u82A6\u5362\u9885\u5E90\u7089\u63B3\u5364\u864F\u9C81\u9E93\u788C\u9732\u8DEF\u8D42\u9E7F\u6F5E\u7984\u5F55\u9646\u622E\u9A74\u5415\u94DD\u4FA3\u65C5\u5C65\u5C61\u7F15\u8651\u6C2F\u5F8B\u7387\u6EE4\u7EFF\u5CE6\u631B\u5B6A\u6EE6\u5375\u4E71\u63A0\u7565\u62A1\u8F6E\u4F26\u4ED1\u6CA6\u7EB6\u8BBA\u841D\u87BA\u7F57\u903B\u9523\u7BA9\u9AA1\u88F8\u843D\u6D1B\u9A86\u7EDC\u5988\u9EBB\u739B\u7801\u8682\u9A6C\u9A82\u561B\u5417\u57CB\u4E70\u9EA6\u5356\u8FC8\u8109\u7792\u9992\u86EE\u6EE1\u8513\u66FC\u6162\u6F2B\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[194].length; ++j)
                if (D[194][j].charCodeAt(0) !== 65533) {
                    e2[D[194][j]] = 49664 + j;
                    d[49664 + j] = D[194][j];
                }
            D[195] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u807E\u8081\u8082\u8085\u8088\u808A\u808D\u808E\u808F\u8090\u8091\u8092\u8094\u8095\u8097\u8099\u809E\u80A3\u80A6\u80A7\u80A8\u80AC\u80B0\u80B3\u80B5\u80B6\u80B8\u80B9\u80BB\u80C5\u80C7\u80C8\u80C9\u80CA\u80CB\u80CF\u80D0\u80D1\u80D2\u80D3\u80D4\u80D5\u80D8\u80DF\u80E0\u80E2\u80E3\u80E6\u80EE\u80F5\u80F7\u80F9\u80FB\u80FE\u80FF\u8100\u8101\u8103\u8104\u8105\u8107\u8108\u810B\uFFFD\u810C\u8115\u8117\u8119\u811B\u811C\u811D\u811F\u8120\u8121\u8122\u8123\u8124\u8125\u8126\u8127\u8128\u8129\u812A\u812B\u812D\u812E\u8130\u8133\u8134\u8135\u8137\u8139\u813A\u813B\u813C\u813D\u813F\u8C29\u8292\u832B\u76F2\u6C13\u5FD9\u83BD\u732B\u8305\u951A\u6BDB\u77DB\u94C6\u536F\u8302\u5192\u5E3D\u8C8C\u8D38\u4E48\u73AB\u679A\u6885\u9176\u9709\u7164\u6CA1\u7709\u5A92\u9541\u6BCF\u7F8E\u6627\u5BD0\u59B9\u5A9A\u95E8\u95F7\u4EEC\u840C\u8499\u6AAC\u76DF\u9530\u731B\u68A6\u5B5F\u772F\u919A\u9761\u7CDC\u8FF7\u8C1C\u5F25\u7C73\u79D8\u89C5\u6CCC\u871C\u5BC6\u5E42\u68C9\u7720\u7EF5\u5195\u514D\u52C9\u5A29\u7F05\u9762\u82D7\u63CF\u7784\u85D0\u79D2\u6E3A\u5E99\u5999\u8511\u706D\u6C11\u62BF\u76BF\u654F\u60AF\u95FD\u660E\u879F\u9E23\u94ED\u540D\u547D\u8C2C\u6478\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[195].length; ++j)
                if (D[195][j].charCodeAt(0) !== 65533) {
                    e2[D[195][j]] = 49920 + j;
                    d[49920 + j] = D[195][j];
                }
            D[196] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8140\u8141\u8142\u8143\u8144\u8145\u8147\u8149\u814D\u814E\u814F\u8152\u8156\u8157\u8158\u815B\u815C\u815D\u815E\u815F\u8161\u8162\u8163\u8164\u8166\u8168\u816A\u816B\u816C\u816F\u8172\u8173\u8175\u8176\u8177\u8178\u8181\u8183\u8184\u8185\u8186\u8187\u8189\u818B\u818C\u818D\u818E\u8190\u8192\u8193\u8194\u8195\u8196\u8197\u8199\u819A\u819E\u819F\u81A0\u81A1\u81A2\u81A4\u81A5\uFFFD\u81A7\u81A9\u81AB\u81AC\u81AD\u81AE\u81AF\u81B0\u81B1\u81B2\u81B4\u81B5\u81B6\u81B7\u81B8\u81B9\u81BC\u81BD\u81BE\u81BF\u81C4\u81C5\u81C7\u81C8\u81C9\u81CB\u81CD\u81CE\u81CF\u81D0\u81D1\u81D2\u81D3\u6479\u8611\u6A21\u819C\u78E8\u6469\u9B54\u62B9\u672B\u83AB\u58A8\u9ED8\u6CAB\u6F20\u5BDE\u964C\u8C0B\u725F\u67D0\u62C7\u7261\u4EA9\u59C6\u6BCD\u5893\u66AE\u5E55\u52DF\u6155\u6728\u76EE\u7766\u7267\u7A46\u62FF\u54EA\u5450\u94A0\u90A3\u5A1C\u7EB3\u6C16\u4E43\u5976\u8010\u5948\u5357\u7537\u96BE\u56CA\u6320\u8111\u607C\u95F9\u6DD6\u5462\u9981\u5185\u5AE9\u80FD\u59AE\u9713\u502A\u6CE5\u5C3C\u62DF\u4F60\u533F\u817B\u9006\u6EBA\u852B\u62C8\u5E74\u78BE\u64B5\u637B\u5FF5\u5A18\u917F\u9E1F\u5C3F\u634F\u8042\u5B7D\u556E\u954A\u954D\u6D85\u60A8\u67E0\u72DE\u51DD\u5B81\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[196].length; ++j)
                if (D[196][j].charCodeAt(0) !== 65533) {
                    e2[D[196][j]] = 50176 + j;
                    d[50176 + j] = D[196][j];
                }
            D[197] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u81D4\u81D5\u81D6\u81D7\u81D8\u81D9\u81DA\u81DB\u81DC\u81DD\u81DE\u81DF\u81E0\u81E1\u81E2\u81E4\u81E5\u81E6\u81E8\u81E9\u81EB\u81EE\u81EF\u81F0\u81F1\u81F2\u81F5\u81F6\u81F7\u81F8\u81F9\u81FA\u81FD\u81FF\u8203\u8207\u8208\u8209\u820A\u820B\u820E\u820F\u8211\u8213\u8215\u8216\u8217\u8218\u8219\u821A\u821D\u8220\u8224\u8225\u8226\u8227\u8229\u822E\u8232\u823A\u823C\u823D\u823F\uFFFD\u8240\u8241\u8242\u8243\u8245\u8246\u8248\u824A\u824C\u824D\u824E\u8250\u8251\u8252\u8253\u8254\u8255\u8256\u8257\u8259\u825B\u825C\u825D\u825E\u8260\u8261\u8262\u8263\u8264\u8265\u8266\u8267\u8269\u62E7\u6CDE\u725B\u626D\u94AE\u7EBD\u8113\u6D53\u519C\u5F04\u5974\u52AA\u6012\u5973\u6696\u8650\u759F\u632A\u61E6\u7CEF\u8BFA\u54E6\u6B27\u9E25\u6BB4\u85D5\u5455\u5076\u6CA4\u556A\u8DB4\u722C\u5E15\u6015\u7436\u62CD\u6392\u724C\u5F98\u6E43\u6D3E\u6500\u6F58\u76D8\u78D0\u76FC\u7554\u5224\u53DB\u4E53\u5E9E\u65C1\u802A\u80D6\u629B\u5486\u5228\u70AE\u888D\u8DD1\u6CE1\u5478\u80DA\u57F9\u88F4\u8D54\u966A\u914D\u4F69\u6C9B\u55B7\u76C6\u7830\u62A8\u70F9\u6F8E\u5F6D\u84EC\u68DA\u787C\u7BF7\u81A8\u670B\u9E4F\u6367\u78B0\u576F\u7812\u9739\u6279\u62AB\u5288\u7435\u6BD7\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[197].length; ++j)
                if (D[197][j].charCodeAt(0) !== 65533) {
                    e2[D[197][j]] = 50432 + j;
                    d[50432 + j] = D[197][j];
                }
            D[198] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u826A\u826B\u826C\u826D\u8271\u8275\u8276\u8277\u8278\u827B\u827C\u8280\u8281\u8283\u8285\u8286\u8287\u8289\u828C\u8290\u8293\u8294\u8295\u8296\u829A\u829B\u829E\u82A0\u82A2\u82A3\u82A7\u82B2\u82B5\u82B6\u82BA\u82BB\u82BC\u82BF\u82C0\u82C2\u82C3\u82C5\u82C6\u82C9\u82D0\u82D6\u82D9\u82DA\u82DD\u82E2\u82E7\u82E8\u82E9\u82EA\u82EC\u82ED\u82EE\u82F0\u82F2\u82F3\u82F5\u82F6\u82F8\uFFFD\u82FA\u82FC\u82FD\u82FE\u82FF\u8300\u830A\u830B\u830D\u8310\u8312\u8313\u8316\u8318\u8319\u831D\u831E\u831F\u8320\u8321\u8322\u8323\u8324\u8325\u8326\u8329\u832A\u832E\u8330\u8332\u8337\u833B\u833D\u5564\u813E\u75B2\u76AE\u5339\u75DE\u50FB\u5C41\u8B6C\u7BC7\u504F\u7247\u9A97\u98D8\u6F02\u74E2\u7968\u6487\u77A5\u62FC\u9891\u8D2B\u54C1\u8058\u4E52\u576A\u82F9\u840D\u5E73\u51ED\u74F6\u8BC4\u5C4F\u5761\u6CFC\u9887\u5A46\u7834\u9B44\u8FEB\u7C95\u5256\u6251\u94FA\u4EC6\u8386\u8461\u83E9\u84B2\u57D4\u6734\u5703\u666E\u6D66\u8C31\u66DD\u7011\u671F\u6B3A\u6816\u621A\u59BB\u4E03\u51C4\u6F06\u67D2\u6C8F\u5176\u68CB\u5947\u6B67\u7566\u5D0E\u8110\u9F50\u65D7\u7948\u7941\u9A91\u8D77\u5C82\u4E5E\u4F01\u542F\u5951\u780C\u5668\u6C14\u8FC4\u5F03\u6C7D\u6CE3\u8BAB\u6390\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[198].length; ++j)
                if (D[198][j].charCodeAt(0) !== 65533) {
                    e2[D[198][j]] = 50688 + j;
                    d[50688 + j] = D[198][j];
                }
            D[199] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u833E\u833F\u8341\u8342\u8344\u8345\u8348\u834A\u834B\u834C\u834D\u834E\u8353\u8355\u8356\u8357\u8358\u8359\u835D\u8362\u8370\u8371\u8372\u8373\u8374\u8375\u8376\u8379\u837A\u837E\u837F\u8380\u8381\u8382\u8383\u8384\u8387\u8388\u838A\u838B\u838C\u838D\u838F\u8390\u8391\u8394\u8395\u8396\u8397\u8399\u839A\u839D\u839F\u83A1\u83A2\u83A3\u83A4\u83A5\u83A6\u83A7\u83AC\u83AD\u83AE\uFFFD\u83AF\u83B5\u83BB\u83BE\u83BF\u83C2\u83C3\u83C4\u83C6\u83C8\u83C9\u83CB\u83CD\u83CE\u83D0\u83D1\u83D2\u83D3\u83D5\u83D7\u83D9\u83DA\u83DB\u83DE\u83E2\u83E3\u83E4\u83E6\u83E7\u83E8\u83EB\u83EC\u83ED\u6070\u6D3D\u7275\u6266\u948E\u94C5\u5343\u8FC1\u7B7E\u4EDF\u8C26\u4E7E\u9ED4\u94B1\u94B3\u524D\u6F5C\u9063\u6D45\u8C34\u5811\u5D4C\u6B20\u6B49\u67AA\u545B\u8154\u7F8C\u5899\u8537\u5F3A\u62A2\u6A47\u9539\u6572\u6084\u6865\u77A7\u4E54\u4FA8\u5DE7\u9798\u64AC\u7FD8\u5CED\u4FCF\u7A8D\u5207\u8304\u4E14\u602F\u7A83\u94A6\u4FB5\u4EB2\u79E6\u7434\u52E4\u82B9\u64D2\u79BD\u5BDD\u6C81\u9752\u8F7B\u6C22\u503E\u537F\u6E05\u64CE\u6674\u6C30\u60C5\u9877\u8BF7\u5E86\u743C\u7A77\u79CB\u4E18\u90B1\u7403\u6C42\u56DA\u914B\u6CC5\u8D8B\u533A\u86C6\u66F2\u8EAF\u5C48\u9A71\u6E20\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[199].length; ++j)
                if (D[199][j].charCodeAt(0) !== 65533) {
                    e2[D[199][j]] = 50944 + j;
                    d[50944 + j] = D[199][j];
                }
            D[200] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u83EE\u83EF\u83F3\u83F4\u83F5\u83F6\u83F7\u83FA\u83FB\u83FC\u83FE\u83FF\u8400\u8402\u8405\u8407\u8408\u8409\u840A\u8410\u8412\u8413\u8414\u8415\u8416\u8417\u8419\u841A\u841B\u841E\u841F\u8420\u8421\u8422\u8423\u8429\u842A\u842B\u842C\u842D\u842E\u842F\u8430\u8432\u8433\u8434\u8435\u8436\u8437\u8439\u843A\u843B\u843E\u843F\u8440\u8441\u8442\u8443\u8444\u8445\u8447\u8448\u8449\uFFFD\u844A\u844B\u844C\u844D\u844E\u844F\u8450\u8452\u8453\u8454\u8455\u8456\u8458\u845D\u845E\u845F\u8460\u8462\u8464\u8465\u8466\u8467\u8468\u846A\u846E\u846F\u8470\u8472\u8474\u8477\u8479\u847B\u847C\u53D6\u5A36\u9F8B\u8DA3\u53BB\u5708\u98A7\u6743\u919B\u6CC9\u5168\u75CA\u62F3\u72AC\u5238\u529D\u7F3A\u7094\u7638\u5374\u9E4A\u69B7\u786E\u96C0\u88D9\u7FA4\u7136\u71C3\u5189\u67D3\u74E4\u58E4\u6518\u56B7\u8BA9\u9976\u6270\u7ED5\u60F9\u70ED\u58EC\u4EC1\u4EBA\u5FCD\u97E7\u4EFB\u8BA4\u5203\u598A\u7EAB\u6254\u4ECD\u65E5\u620E\u8338\u84C9\u8363\u878D\u7194\u6EB6\u5BB9\u7ED2\u5197\u63C9\u67D4\u8089\u8339\u8815\u5112\u5B7A\u5982\u8FB1\u4E73\u6C5D\u5165\u8925\u8F6F\u962E\u854A\u745E\u9510\u95F0\u6DA6\u82E5\u5F31\u6492\u6D12\u8428\u816E\u9CC3\u585E\u8D5B\u4E09\u53C1\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[200].length; ++j)
                if (D[200][j].charCodeAt(0) !== 65533) {
                    e2[D[200][j]] = 51200 + j;
                    d[51200 + j] = D[200][j];
                }
            D[201] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u847D\u847E\u847F\u8480\u8481\u8483\u8484\u8485\u8486\u848A\u848D\u848F\u8490\u8491\u8492\u8493\u8494\u8495\u8496\u8498\u849A\u849B\u849D\u849E\u849F\u84A0\u84A2\u84A3\u84A4\u84A5\u84A6\u84A7\u84A8\u84A9\u84AA\u84AB\u84AC\u84AD\u84AE\u84B0\u84B1\u84B3\u84B5\u84B6\u84B7\u84BB\u84BC\u84BE\u84C0\u84C2\u84C3\u84C5\u84C6\u84C7\u84C8\u84CB\u84CC\u84CE\u84CF\u84D2\u84D4\u84D5\u84D7\uFFFD\u84D8\u84D9\u84DA\u84DB\u84DC\u84DE\u84E1\u84E2\u84E4\u84E7\u84E8\u84E9\u84EA\u84EB\u84ED\u84EE\u84EF\u84F1\u84F2\u84F3\u84F4\u84F5\u84F6\u84F7\u84F8\u84F9\u84FA\u84FB\u84FD\u84FE\u8500\u8501\u8502\u4F1E\u6563\u6851\u55D3\u4E27\u6414\u9A9A\u626B\u5AC2\u745F\u8272\u6DA9\u68EE\u50E7\u838E\u7802\u6740\u5239\u6C99\u7EB1\u50BB\u5565\u715E\u7B5B\u6652\u73CA\u82EB\u6749\u5C71\u5220\u717D\u886B\u95EA\u9655\u64C5\u8D61\u81B3\u5584\u6C55\u6247\u7F2E\u5892\u4F24\u5546\u8D4F\u664C\u4E0A\u5C1A\u88F3\u68A2\u634E\u7A0D\u70E7\u828D\u52FA\u97F6\u5C11\u54E8\u90B5\u7ECD\u5962\u8D4A\u86C7\u820C\u820D\u8D66\u6444\u5C04\u6151\u6D89\u793E\u8BBE\u7837\u7533\u547B\u4F38\u8EAB\u6DF1\u5A20\u7EC5\u795E\u6C88\u5BA1\u5A76\u751A\u80BE\u614E\u6E17\u58F0\u751F\u7525\u7272\u5347\u7EF3\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[201].length; ++j)
                if (D[201][j].charCodeAt(0) !== 65533) {
                    e2[D[201][j]] = 51456 + j;
                    d[51456 + j] = D[201][j];
                }
            D[202] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8503\u8504\u8505\u8506\u8507\u8508\u8509\u850A\u850B\u850D\u850E\u850F\u8510\u8512\u8514\u8515\u8516\u8518\u8519\u851B\u851C\u851D\u851E\u8520\u8522\u8523\u8524\u8525\u8526\u8527\u8528\u8529\u852A\u852D\u852E\u852F\u8530\u8531\u8532\u8533\u8534\u8535\u8536\u853E\u853F\u8540\u8541\u8542\u8544\u8545\u8546\u8547\u854B\u854C\u854D\u854E\u854F\u8550\u8551\u8552\u8553\u8554\u8555\uFFFD\u8557\u8558\u855A\u855B\u855C\u855D\u855F\u8560\u8561\u8562\u8563\u8565\u8566\u8567\u8569\u856A\u856B\u856C\u856D\u856E\u856F\u8570\u8571\u8573\u8575\u8576\u8577\u8578\u857C\u857D\u857F\u8580\u8581\u7701\u76DB\u5269\u80DC\u5723\u5E08\u5931\u72EE\u65BD\u6E7F\u8BD7\u5C38\u8671\u5341\u77F3\u62FE\u65F6\u4EC0\u98DF\u8680\u5B9E\u8BC6\u53F2\u77E2\u4F7F\u5C4E\u9A76\u59CB\u5F0F\u793A\u58EB\u4E16\u67FF\u4E8B\u62ED\u8A93\u901D\u52BF\u662F\u55DC\u566C\u9002\u4ED5\u4F8D\u91CA\u9970\u6C0F\u5E02\u6043\u5BA4\u89C6\u8BD5\u6536\u624B\u9996\u5B88\u5BFF\u6388\u552E\u53D7\u7626\u517D\u852C\u67A2\u68B3\u6B8A\u6292\u8F93\u53D4\u8212\u6DD1\u758F\u4E66\u8D4E\u5B70\u719F\u85AF\u6691\u66D9\u7F72\u8700\u9ECD\u9F20\u5C5E\u672F\u8FF0\u6811\u675F\u620D\u7AD6\u5885\u5EB6\u6570\u6F31\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[202].length; ++j)
                if (D[202][j].charCodeAt(0) !== 65533) {
                    e2[D[202][j]] = 51712 + j;
                    d[51712 + j] = D[202][j];
                }
            D[203] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8582\u8583\u8586\u8588\u8589\u858A\u858B\u858C\u858D\u858E\u8590\u8591\u8592\u8593\u8594\u8595\u8596\u8597\u8598\u8599\u859A\u859D\u859E\u859F\u85A0\u85A1\u85A2\u85A3\u85A5\u85A6\u85A7\u85A9\u85AB\u85AC\u85AD\u85B1\u85B2\u85B3\u85B4\u85B5\u85B6\u85B8\u85BA\u85BB\u85BC\u85BD\u85BE\u85BF\u85C0\u85C2\u85C3\u85C4\u85C5\u85C6\u85C7\u85C8\u85CA\u85CB\u85CC\u85CD\u85CE\u85D1\u85D2\uFFFD\u85D4\u85D6\u85D7\u85D8\u85D9\u85DA\u85DB\u85DD\u85DE\u85DF\u85E0\u85E1\u85E2\u85E3\u85E5\u85E6\u85E7\u85E8\u85EA\u85EB\u85EC\u85ED\u85EE\u85EF\u85F0\u85F1\u85F2\u85F3\u85F4\u85F5\u85F6\u85F7\u85F8\u6055\u5237\u800D\u6454\u8870\u7529\u5E05\u6813\u62F4\u971C\u53CC\u723D\u8C01\u6C34\u7761\u7A0E\u542E\u77AC\u987A\u821C\u8BF4\u7855\u6714\u70C1\u65AF\u6495\u5636\u601D\u79C1\u53F8\u4E1D\u6B7B\u8086\u5BFA\u55E3\u56DB\u4F3A\u4F3C\u9972\u5DF3\u677E\u8038\u6002\u9882\u9001\u5B8B\u8BBC\u8BF5\u641C\u8258\u64DE\u55FD\u82CF\u9165\u4FD7\u7D20\u901F\u7C9F\u50F3\u5851\u6EAF\u5BBF\u8BC9\u8083\u9178\u849C\u7B97\u867D\u968B\u968F\u7EE5\u9AD3\u788E\u5C81\u7A57\u9042\u96A7\u795F\u5B59\u635F\u7B0B\u84D1\u68AD\u5506\u7F29\u7410\u7D22\u9501\u6240\u584C\u4ED6\u5B83\u5979\u5854\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[203].length; ++j)
                if (D[203][j].charCodeAt(0) !== 65533) {
                    e2[D[203][j]] = 51968 + j;
                    d[51968 + j] = D[203][j];
                }
            D[204] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u85F9\u85FA\u85FC\u85FD\u85FE\u8600\u8601\u8602\u8603\u8604\u8606\u8607\u8608\u8609\u860A\u860B\u860C\u860D\u860E\u860F\u8610\u8612\u8613\u8614\u8615\u8617\u8618\u8619\u861A\u861B\u861C\u861D\u861E\u861F\u8620\u8621\u8622\u8623\u8624\u8625\u8626\u8628\u862A\u862B\u862C\u862D\u862E\u862F\u8630\u8631\u8632\u8633\u8634\u8635\u8636\u8637\u8639\u863A\u863B\u863D\u863E\u863F\u8640\uFFFD\u8641\u8642\u8643\u8644\u8645\u8646\u8647\u8648\u8649\u864A\u864B\u864C\u8652\u8653\u8655\u8656\u8657\u8658\u8659\u865B\u865C\u865D\u865F\u8660\u8661\u8663\u8664\u8665\u8666\u8667\u8668\u8669\u866A\u736D\u631E\u8E4B\u8E0F\u80CE\u82D4\u62AC\u53F0\u6CF0\u915E\u592A\u6001\u6C70\u574D\u644A\u8D2A\u762B\u6EE9\u575B\u6A80\u75F0\u6F6D\u8C2D\u8C08\u5766\u6BEF\u8892\u78B3\u63A2\u53F9\u70AD\u6C64\u5858\u642A\u5802\u68E0\u819B\u5510\u7CD6\u5018\u8EBA\u6DCC\u8D9F\u70EB\u638F\u6D9B\u6ED4\u7EE6\u8404\u6843\u9003\u6DD8\u9676\u8BA8\u5957\u7279\u85E4\u817E\u75BC\u8A8A\u68AF\u5254\u8E22\u9511\u63D0\u9898\u8E44\u557C\u4F53\u66FF\u568F\u60D5\u6D95\u5243\u5C49\u5929\u6DFB\u586B\u7530\u751C\u606C\u8214\u8146\u6311\u6761\u8FE2\u773A\u8DF3\u8D34\u94C1\u5E16\u5385\u542C\u70C3\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[204].length; ++j)
                if (D[204][j].charCodeAt(0) !== 65533) {
                    e2[D[204][j]] = 52224 + j;
                    d[52224 + j] = D[204][j];
                }
            D[205] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u866D\u866F\u8670\u8672\u8673\u8674\u8675\u8676\u8677\u8678\u8683\u8684\u8685\u8686\u8687\u8688\u8689\u868E\u868F\u8690\u8691\u8692\u8694\u8696\u8697\u8698\u8699\u869A\u869B\u869E\u869F\u86A0\u86A1\u86A2\u86A5\u86A6\u86AB\u86AD\u86AE\u86B2\u86B3\u86B7\u86B8\u86B9\u86BB\u86BC\u86BD\u86BE\u86BF\u86C1\u86C2\u86C3\u86C5\u86C8\u86CC\u86CD\u86D2\u86D3\u86D5\u86D6\u86D7\u86DA\u86DC\uFFFD\u86DD\u86E0\u86E1\u86E2\u86E3\u86E5\u86E6\u86E7\u86E8\u86EA\u86EB\u86EC\u86EF\u86F5\u86F6\u86F7\u86FA\u86FB\u86FC\u86FD\u86FF\u8701\u8704\u8705\u8706\u870B\u870C\u870E\u870F\u8710\u8711\u8714\u8716\u6C40\u5EF7\u505C\u4EAD\u5EAD\u633A\u8247\u901A\u6850\u916E\u77B3\u540C\u94DC\u5F64\u7AE5\u6876\u6345\u7B52\u7EDF\u75DB\u5077\u6295\u5934\u900F\u51F8\u79C3\u7A81\u56FE\u5F92\u9014\u6D82\u5C60\u571F\u5410\u5154\u6E4D\u56E2\u63A8\u9893\u817F\u8715\u892A\u9000\u541E\u5C6F\u81C0\u62D6\u6258\u8131\u9E35\u9640\u9A6E\u9A7C\u692D\u59A5\u62D3\u553E\u6316\u54C7\u86D9\u6D3C\u5A03\u74E6\u889C\u6B6A\u5916\u8C4C\u5F2F\u6E7E\u73A9\u987D\u4E38\u70F7\u5B8C\u7897\u633D\u665A\u7696\u60CB\u5B9B\u5A49\u4E07\u8155\u6C6A\u738B\u4EA1\u6789\u7F51\u5F80\u65FA\u671B\u5FD8\u5984\u5A01\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[205].length; ++j)
                if (D[205][j].charCodeAt(0) !== 65533) {
                    e2[D[205][j]] = 52480 + j;
                    d[52480 + j] = D[205][j];
                }
            D[206] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8719\u871B\u871D\u871F\u8720\u8724\u8726\u8727\u8728\u872A\u872B\u872C\u872D\u872F\u8730\u8732\u8733\u8735\u8736\u8738\u8739\u873A\u873C\u873D\u8740\u8741\u8742\u8743\u8744\u8745\u8746\u874A\u874B\u874D\u874F\u8750\u8751\u8752\u8754\u8755\u8756\u8758\u875A\u875B\u875C\u875D\u875E\u875F\u8761\u8762\u8766\u8767\u8768\u8769\u876A\u876B\u876C\u876D\u876F\u8771\u8772\u8773\u8775\uFFFD\u8777\u8778\u8779\u877A\u877F\u8780\u8781\u8784\u8786\u8787\u8789\u878A\u878C\u878E\u878F\u8790\u8791\u8792\u8794\u8795\u8796\u8798\u8799\u879A\u879B\u879C\u879D\u879E\u87A0\u87A1\u87A2\u87A3\u87A4\u5DCD\u5FAE\u5371\u97E6\u8FDD\u6845\u56F4\u552F\u60DF\u4E3A\u6F4D\u7EF4\u82C7\u840E\u59D4\u4F1F\u4F2A\u5C3E\u7EAC\u672A\u851A\u5473\u754F\u80C3\u5582\u9B4F\u4F4D\u6E2D\u8C13\u5C09\u6170\u536B\u761F\u6E29\u868A\u6587\u95FB\u7EB9\u543B\u7A33\u7D0A\u95EE\u55E1\u7FC1\u74EE\u631D\u8717\u6DA1\u7A9D\u6211\u65A1\u5367\u63E1\u6C83\u5DEB\u545C\u94A8\u4E4C\u6C61\u8BEC\u5C4B\u65E0\u829C\u68A7\u543E\u5434\u6BCB\u6B66\u4E94\u6342\u5348\u821E\u4F0D\u4FAE\u575E\u620A\u96FE\u6664\u7269\u52FF\u52A1\u609F\u8BEF\u6614\u7199\u6790\u897F\u7852\u77FD\u6670\u563B\u5438\u9521\u727A\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[206].length; ++j)
                if (D[206][j].charCodeAt(0) !== 65533) {
                    e2[D[206][j]] = 52736 + j;
                    d[52736 + j] = D[206][j];
                }
            D[207] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u87A5\u87A6\u87A7\u87A9\u87AA\u87AE\u87B0\u87B1\u87B2\u87B4\u87B6\u87B7\u87B8\u87B9\u87BB\u87BC\u87BE\u87BF\u87C1\u87C2\u87C3\u87C4\u87C5\u87C7\u87C8\u87C9\u87CC\u87CD\u87CE\u87CF\u87D0\u87D4\u87D5\u87D6\u87D7\u87D8\u87D9\u87DA\u87DC\u87DD\u87DE\u87DF\u87E1\u87E2\u87E3\u87E4\u87E6\u87E7\u87E8\u87E9\u87EB\u87EC\u87ED\u87EF\u87F0\u87F1\u87F2\u87F3\u87F4\u87F5\u87F6\u87F7\u87F8\uFFFD\u87FA\u87FB\u87FC\u87FD\u87FF\u8800\u8801\u8802\u8804\u8805\u8806\u8807\u8808\u8809\u880B\u880C\u880D\u880E\u880F\u8810\u8811\u8812\u8814\u8817\u8818\u8819\u881A\u881C\u881D\u881E\u881F\u8820\u8823\u7A00\u606F\u5E0C\u6089\u819D\u5915\u60DC\u7184\u70EF\u6EAA\u6C50\u7280\u6A84\u88AD\u5E2D\u4E60\u5AB3\u559C\u94E3\u6D17\u7CFB\u9699\u620F\u7EC6\u778E\u867E\u5323\u971E\u8F96\u6687\u5CE1\u4FA0\u72ED\u4E0B\u53A6\u590F\u5413\u6380\u9528\u5148\u4ED9\u9C9C\u7EA4\u54B8\u8D24\u8854\u8237\u95F2\u6D8E\u5F26\u5ACC\u663E\u9669\u73B0\u732E\u53BF\u817A\u9985\u7FA1\u5BAA\u9677\u9650\u7EBF\u76F8\u53A2\u9576\u9999\u7BB1\u8944\u6E58\u4E61\u7FD4\u7965\u8BE6\u60F3\u54CD\u4EAB\u9879\u5DF7\u6A61\u50CF\u5411\u8C61\u8427\u785D\u9704\u524A\u54EE\u56A3\u9500\u6D88\u5BB5\u6DC6\u6653\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[207].length; ++j)
                if (D[207][j].charCodeAt(0) !== 65533) {
                    e2[D[207][j]] = 52992 + j;
                    d[52992 + j] = D[207][j];
                }
            D[208] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8824\u8825\u8826\u8827\u8828\u8829\u882A\u882B\u882C\u882D\u882E\u882F\u8830\u8831\u8833\u8834\u8835\u8836\u8837\u8838\u883A\u883B\u883D\u883E\u883F\u8841\u8842\u8843\u8846\u8847\u8848\u8849\u884A\u884B\u884E\u884F\u8850\u8851\u8852\u8853\u8855\u8856\u8858\u885A\u885B\u885C\u885D\u885E\u885F\u8860\u8866\u8867\u886A\u886D\u886F\u8871\u8873\u8874\u8875\u8876\u8878\u8879\u887A\uFFFD\u887B\u887C\u8880\u8883\u8886\u8887\u8889\u888A\u888C\u888E\u888F\u8890\u8891\u8893\u8894\u8895\u8897\u8898\u8899\u889A\u889B\u889D\u889E\u889F\u88A0\u88A1\u88A3\u88A5\u88A6\u88A7\u88A8\u88A9\u88AA\u5C0F\u5B5D\u6821\u8096\u5578\u7B11\u6548\u6954\u4E9B\u6B47\u874E\u978B\u534F\u631F\u643A\u90AA\u659C\u80C1\u8C10\u5199\u68B0\u5378\u87F9\u61C8\u6CC4\u6CFB\u8C22\u5C51\u85AA\u82AF\u950C\u6B23\u8F9B\u65B0\u5FFB\u5FC3\u4FE1\u8845\u661F\u8165\u7329\u60FA\u5174\u5211\u578B\u5F62\u90A2\u884C\u9192\u5E78\u674F\u6027\u59D3\u5144\u51F6\u80F8\u5308\u6C79\u96C4\u718A\u4F11\u4FEE\u7F9E\u673D\u55C5\u9508\u79C0\u8896\u7EE3\u589F\u620C\u9700\u865A\u5618\u987B\u5F90\u8BB8\u84C4\u9157\u53D9\u65ED\u5E8F\u755C\u6064\u7D6E\u5A7F\u7EEA\u7EED\u8F69\u55A7\u5BA3\u60AC\u65CB\u7384\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[208].length; ++j)
                if (D[208][j].charCodeAt(0) !== 65533) {
                    e2[D[208][j]] = 53248 + j;
                    d[53248 + j] = D[208][j];
                }
            D[209] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u88AC\u88AE\u88AF\u88B0\u88B2\u88B3\u88B4\u88B5\u88B6\u88B8\u88B9\u88BA\u88BB\u88BD\u88BE\u88BF\u88C0\u88C3\u88C4\u88C7\u88C8\u88CA\u88CB\u88CC\u88CD\u88CF\u88D0\u88D1\u88D3\u88D6\u88D7\u88DA\u88DB\u88DC\u88DD\u88DE\u88E0\u88E1\u88E6\u88E7\u88E9\u88EA\u88EB\u88EC\u88ED\u88EE\u88EF\u88F2\u88F5\u88F6\u88F7\u88FA\u88FB\u88FD\u88FF\u8900\u8901\u8903\u8904\u8905\u8906\u8907\u8908\uFFFD\u8909\u890B\u890C\u890D\u890E\u890F\u8911\u8914\u8915\u8916\u8917\u8918\u891C\u891D\u891E\u891F\u8920\u8922\u8923\u8924\u8926\u8927\u8928\u8929\u892C\u892D\u892E\u892F\u8931\u8932\u8933\u8935\u8937\u9009\u7663\u7729\u7EDA\u9774\u859B\u5B66\u7A74\u96EA\u8840\u52CB\u718F\u5FAA\u65EC\u8BE2\u5BFB\u9A6F\u5DE1\u6B89\u6C5B\u8BAD\u8BAF\u900A\u8FC5\u538B\u62BC\u9E26\u9E2D\u5440\u4E2B\u82BD\u7259\u869C\u5D16\u8859\u6DAF\u96C5\u54D1\u4E9A\u8BB6\u7109\u54BD\u9609\u70DF\u6DF9\u76D0\u4E25\u7814\u8712\u5CA9\u5EF6\u8A00\u989C\u960E\u708E\u6CBF\u5944\u63A9\u773C\u884D\u6F14\u8273\u5830\u71D5\u538C\u781A\u96C1\u5501\u5F66\u7130\u5BB4\u8C1A\u9A8C\u6B83\u592E\u9E2F\u79E7\u6768\u626C\u4F6F\u75A1\u7F8A\u6D0B\u9633\u6C27\u4EF0\u75D2\u517B\u6837\u6F3E\u9080\u8170\u5996\u7476\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[209].length; ++j)
                if (D[209][j].charCodeAt(0) !== 65533) {
                    e2[D[209][j]] = 53504 + j;
                    d[53504 + j] = D[209][j];
                }
            D[210] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8938\u8939\u893A\u893B\u893C\u893D\u893E\u893F\u8940\u8942\u8943\u8945\u8946\u8947\u8948\u8949\u894A\u894B\u894C\u894D\u894E\u894F\u8950\u8951\u8952\u8953\u8954\u8955\u8956\u8957\u8958\u8959\u895A\u895B\u895C\u895D\u8960\u8961\u8962\u8963\u8964\u8965\u8967\u8968\u8969\u896A\u896B\u896C\u896D\u896E\u896F\u8970\u8971\u8972\u8973\u8974\u8975\u8976\u8977\u8978\u8979\u897A\u897C\uFFFD\u897D\u897E\u8980\u8982\u8984\u8985\u8987\u8988\u8989\u898A\u898B\u898C\u898D\u898E\u898F\u8990\u8991\u8992\u8993\u8994\u8995\u8996\u8997\u8998\u8999\u899A\u899B\u899C\u899D\u899E\u899F\u89A0\u89A1\u6447\u5C27\u9065\u7A91\u8C23\u59DA\u54AC\u8200\u836F\u8981\u8000\u6930\u564E\u8036\u7237\u91CE\u51B6\u4E5F\u9875\u6396\u4E1A\u53F6\u66F3\u814B\u591C\u6DB2\u4E00\u58F9\u533B\u63D6\u94F1\u4F9D\u4F0A\u8863\u9890\u5937\u9057\u79FB\u4EEA\u80F0\u7591\u6C82\u5B9C\u59E8\u5F5D\u6905\u8681\u501A\u5DF2\u4E59\u77E3\u4EE5\u827A\u6291\u6613\u9091\u5C79\u4EBF\u5F79\u81C6\u9038\u8084\u75AB\u4EA6\u88D4\u610F\u6BC5\u5FC6\u4E49\u76CA\u6EA2\u8BE3\u8BAE\u8C0A\u8BD1\u5F02\u7FFC\u7FCC\u7ECE\u8335\u836B\u56E0\u6BB7\u97F3\u9634\u59FB\u541F\u94F6\u6DEB\u5BC5\u996E\u5C39\u5F15\u9690\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[210].length; ++j)
                if (D[210][j].charCodeAt(0) !== 65533) {
                    e2[D[210][j]] = 53760 + j;
                    d[53760 + j] = D[210][j];
                }
            D[211] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u89A2\u89A3\u89A4\u89A5\u89A6\u89A7\u89A8\u89A9\u89AA\u89AB\u89AC\u89AD\u89AE\u89AF\u89B0\u89B1\u89B2\u89B3\u89B4\u89B5\u89B6\u89B7\u89B8\u89B9\u89BA\u89BB\u89BC\u89BD\u89BE\u89BF\u89C0\u89C3\u89CD\u89D3\u89D4\u89D5\u89D7\u89D8\u89D9\u89DB\u89DD\u89DF\u89E0\u89E1\u89E2\u89E4\u89E7\u89E8\u89E9\u89EA\u89EC\u89ED\u89EE\u89F0\u89F1\u89F2\u89F4\u89F5\u89F6\u89F7\u89F8\u89F9\u89FA\uFFFD\u89FB\u89FC\u89FD\u89FE\u89FF\u8A01\u8A02\u8A03\u8A04\u8A05\u8A06\u8A08\u8A09\u8A0A\u8A0B\u8A0C\u8A0D\u8A0E\u8A0F\u8A10\u8A11\u8A12\u8A13\u8A14\u8A15\u8A16\u8A17\u8A18\u8A19\u8A1A\u8A1B\u8A1C\u8A1D\u5370\u82F1\u6A31\u5A74\u9E70\u5E94\u7F28\u83B9\u8424\u8425\u8367\u8747\u8FCE\u8D62\u76C8\u5F71\u9896\u786C\u6620\u54DF\u62E5\u4F63\u81C3\u75C8\u5EB8\u96CD\u8E0A\u86F9\u548F\u6CF3\u6D8C\u6C38\u607F\u52C7\u7528\u5E7D\u4F18\u60A0\u5FE7\u5C24\u7531\u90AE\u94C0\u72B9\u6CB9\u6E38\u9149\u6709\u53CB\u53F3\u4F51\u91C9\u8BF1\u53C8\u5E7C\u8FC2\u6DE4\u4E8E\u76C2\u6986\u865E\u611A\u8206\u4F59\u4FDE\u903E\u9C7C\u6109\u6E1D\u6E14\u9685\u4E88\u5A31\u96E8\u4E0E\u5C7F\u79B9\u5B87\u8BED\u7FBD\u7389\u57DF\u828B\u90C1\u5401\u9047\u55BB\u5CEA\u5FA1\u6108\u6B32\u72F1\u80B2\u8A89\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[211].length; ++j)
                if (D[211][j].charCodeAt(0) !== 65533) {
                    e2[D[211][j]] = 54016 + j;
                    d[54016 + j] = D[211][j];
                }
            D[212] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8A1E\u8A1F\u8A20\u8A21\u8A22\u8A23\u8A24\u8A25\u8A26\u8A27\u8A28\u8A29\u8A2A\u8A2B\u8A2C\u8A2D\u8A2E\u8A2F\u8A30\u8A31\u8A32\u8A33\u8A34\u8A35\u8A36\u8A37\u8A38\u8A39\u8A3A\u8A3B\u8A3C\u8A3D\u8A3F\u8A40\u8A41\u8A42\u8A43\u8A44\u8A45\u8A46\u8A47\u8A49\u8A4A\u8A4B\u8A4C\u8A4D\u8A4E\u8A4F\u8A50\u8A51\u8A52\u8A53\u8A54\u8A55\u8A56\u8A57\u8A58\u8A59\u8A5A\u8A5B\u8A5C\u8A5D\u8A5E\uFFFD\u8A5F\u8A60\u8A61\u8A62\u8A63\u8A64\u8A65\u8A66\u8A67\u8A68\u8A69\u8A6A\u8A6B\u8A6C\u8A6D\u8A6E\u8A6F\u8A70\u8A71\u8A72\u8A73\u8A74\u8A75\u8A76\u8A77\u8A78\u8A7A\u8A7B\u8A7C\u8A7D\u8A7E\u8A7F\u8A80\u6D74\u5BD3\u88D5\u9884\u8C6B\u9A6D\u9E33\u6E0A\u51A4\u5143\u57A3\u8881\u539F\u63F4\u8F95\u56ED\u5458\u5706\u733F\u6E90\u7F18\u8FDC\u82D1\u613F\u6028\u9662\u66F0\u7EA6\u8D8A\u8DC3\u94A5\u5CB3\u7CA4\u6708\u60A6\u9605\u8018\u4E91\u90E7\u5300\u9668\u5141\u8FD0\u8574\u915D\u6655\u97F5\u5B55\u531D\u7838\u6742\u683D\u54C9\u707E\u5BB0\u8F7D\u518D\u5728\u54B1\u6512\u6682\u8D5E\u8D43\u810F\u846C\u906D\u7CDF\u51FF\u85FB\u67A3\u65E9\u6FA1\u86A4\u8E81\u566A\u9020\u7682\u7076\u71E5\u8D23\u62E9\u5219\u6CFD\u8D3C\u600E\u589E\u618E\u66FE\u8D60\u624E\u55B3\u6E23\u672D\u8F67\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[212].length; ++j)
                if (D[212][j].charCodeAt(0) !== 65533) {
                    e2[D[212][j]] = 54272 + j;
                    d[54272 + j] = D[212][j];
                }
            D[213] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8A81\u8A82\u8A83\u8A84\u8A85\u8A86\u8A87\u8A88\u8A8B\u8A8C\u8A8D\u8A8E\u8A8F\u8A90\u8A91\u8A92\u8A94\u8A95\u8A96\u8A97\u8A98\u8A99\u8A9A\u8A9B\u8A9C\u8A9D\u8A9E\u8A9F\u8AA0\u8AA1\u8AA2\u8AA3\u8AA4\u8AA5\u8AA6\u8AA7\u8AA8\u8AA9\u8AAA\u8AAB\u8AAC\u8AAD\u8AAE\u8AAF\u8AB0\u8AB1\u8AB2\u8AB3\u8AB4\u8AB5\u8AB6\u8AB7\u8AB8\u8AB9\u8ABA\u8ABB\u8ABC\u8ABD\u8ABE\u8ABF\u8AC0\u8AC1\u8AC2\uFFFD\u8AC3\u8AC4\u8AC5\u8AC6\u8AC7\u8AC8\u8AC9\u8ACA\u8ACB\u8ACC\u8ACD\u8ACE\u8ACF\u8AD0\u8AD1\u8AD2\u8AD3\u8AD4\u8AD5\u8AD6\u8AD7\u8AD8\u8AD9\u8ADA\u8ADB\u8ADC\u8ADD\u8ADE\u8ADF\u8AE0\u8AE1\u8AE2\u8AE3\u94E1\u95F8\u7728\u6805\u69A8\u548B\u4E4D\u70B8\u8BC8\u6458\u658B\u5B85\u7A84\u503A\u5BE8\u77BB\u6BE1\u8A79\u7C98\u6CBE\u76CF\u65A9\u8F97\u5D2D\u5C55\u8638\u6808\u5360\u6218\u7AD9\u6E5B\u7EFD\u6A1F\u7AE0\u5F70\u6F33\u5F20\u638C\u6DA8\u6756\u4E08\u5E10\u8D26\u4ED7\u80C0\u7634\u969C\u62DB\u662D\u627E\u6CBC\u8D75\u7167\u7F69\u5146\u8087\u53EC\u906E\u6298\u54F2\u86F0\u8F99\u8005\u9517\u8517\u8FD9\u6D59\u73CD\u659F\u771F\u7504\u7827\u81FB\u8D1E\u9488\u4FA6\u6795\u75B9\u8BCA\u9707\u632F\u9547\u9635\u84B8\u6323\u7741\u5F81\u72F0\u4E89\u6014\u6574\u62EF\u6B63\u653F\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[213].length; ++j)
                if (D[213][j].charCodeAt(0) !== 65533) {
                    e2[D[213][j]] = 54528 + j;
                    d[54528 + j] = D[213][j];
                }
            D[214] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8AE4\u8AE5\u8AE6\u8AE7\u8AE8\u8AE9\u8AEA\u8AEB\u8AEC\u8AED\u8AEE\u8AEF\u8AF0\u8AF1\u8AF2\u8AF3\u8AF4\u8AF5\u8AF6\u8AF7\u8AF8\u8AF9\u8AFA\u8AFB\u8AFC\u8AFD\u8AFE\u8AFF\u8B00\u8B01\u8B02\u8B03\u8B04\u8B05\u8B06\u8B08\u8B09\u8B0A\u8B0B\u8B0C\u8B0D\u8B0E\u8B0F\u8B10\u8B11\u8B12\u8B13\u8B14\u8B15\u8B16\u8B17\u8B18\u8B19\u8B1A\u8B1B\u8B1C\u8B1D\u8B1E\u8B1F\u8B20\u8B21\u8B22\u8B23\uFFFD\u8B24\u8B25\u8B27\u8B28\u8B29\u8B2A\u8B2B\u8B2C\u8B2D\u8B2E\u8B2F\u8B30\u8B31\u8B32\u8B33\u8B34\u8B35\u8B36\u8B37\u8B38\u8B39\u8B3A\u8B3B\u8B3C\u8B3D\u8B3E\u8B3F\u8B40\u8B41\u8B42\u8B43\u8B44\u8B45\u5E27\u75C7\u90D1\u8BC1\u829D\u679D\u652F\u5431\u8718\u77E5\u80A2\u8102\u6C41\u4E4B\u7EC7\u804C\u76F4\u690D\u6B96\u6267\u503C\u4F84\u5740\u6307\u6B62\u8DBE\u53EA\u65E8\u7EB8\u5FD7\u631A\u63B7\u81F3\u81F4\u7F6E\u5E1C\u5CD9\u5236\u667A\u79E9\u7A1A\u8D28\u7099\u75D4\u6EDE\u6CBB\u7A92\u4E2D\u76C5\u5FE0\u949F\u8877\u7EC8\u79CD\u80BF\u91CD\u4EF2\u4F17\u821F\u5468\u5DDE\u6D32\u8BCC\u7CA5\u8F74\u8098\u5E1A\u5492\u76B1\u5B99\u663C\u9AA4\u73E0\u682A\u86DB\u6731\u732A\u8BF8\u8BDB\u9010\u7AF9\u70DB\u716E\u62C4\u77A9\u5631\u4E3B\u8457\u67F1\u52A9\u86C0\u8D2E\u94F8\u7B51\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[214].length; ++j)
                if (D[214][j].charCodeAt(0) !== 65533) {
                    e2[D[214][j]] = 54784 + j;
                    d[54784 + j] = D[214][j];
                }
            D[215] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8B46\u8B47\u8B48\u8B49\u8B4A\u8B4B\u8B4C\u8B4D\u8B4E\u8B4F\u8B50\u8B51\u8B52\u8B53\u8B54\u8B55\u8B56\u8B57\u8B58\u8B59\u8B5A\u8B5B\u8B5C\u8B5D\u8B5E\u8B5F\u8B60\u8B61\u8B62\u8B63\u8B64\u8B65\u8B67\u8B68\u8B69\u8B6A\u8B6B\u8B6D\u8B6E\u8B6F\u8B70\u8B71\u8B72\u8B73\u8B74\u8B75\u8B76\u8B77\u8B78\u8B79\u8B7A\u8B7B\u8B7C\u8B7D\u8B7E\u8B7F\u8B80\u8B81\u8B82\u8B83\u8B84\u8B85\u8B86\uFFFD\u8B87\u8B88\u8B89\u8B8A\u8B8B\u8B8C\u8B8D\u8B8E\u8B8F\u8B90\u8B91\u8B92\u8B93\u8B94\u8B95\u8B96\u8B97\u8B98\u8B99\u8B9A\u8B9B\u8B9C\u8B9D\u8B9E\u8B9F\u8BAC\u8BB1\u8BBB\u8BC7\u8BD0\u8BEA\u8C09\u8C1E\u4F4F\u6CE8\u795D\u9A7B\u6293\u722A\u62FD\u4E13\u7816\u8F6C\u64B0\u8D5A\u7BC6\u6869\u5E84\u88C5\u5986\u649E\u58EE\u72B6\u690E\u9525\u8FFD\u8D58\u5760\u7F00\u8C06\u51C6\u6349\u62D9\u5353\u684C\u7422\u8301\u914C\u5544\u7740\u707C\u6D4A\u5179\u54A8\u8D44\u59FF\u6ECB\u6DC4\u5B5C\u7D2B\u4ED4\u7C7D\u6ED3\u5B50\u81EA\u6E0D\u5B57\u9B03\u68D5\u8E2A\u5B97\u7EFC\u603B\u7EB5\u90B9\u8D70\u594F\u63CD\u79DF\u8DB3\u5352\u65CF\u7956\u8BC5\u963B\u7EC4\u94BB\u7E82\u5634\u9189\u6700\u7F6A\u5C0A\u9075\u6628\u5DE6\u4F50\u67DE\u505A\u4F5C\u5750\u5EA7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[215].length; ++j)
                if (D[215][j].charCodeAt(0) !== 65533) {
                    e2[D[215][j]] = 55040 + j;
                    d[55040 + j] = D[215][j];
                }
            D[216] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8C38\u8C39\u8C3A\u8C3B\u8C3C\u8C3D\u8C3E\u8C3F\u8C40\u8C42\u8C43\u8C44\u8C45\u8C48\u8C4A\u8C4B\u8C4D\u8C4E\u8C4F\u8C50\u8C51\u8C52\u8C53\u8C54\u8C56\u8C57\u8C58\u8C59\u8C5B\u8C5C\u8C5D\u8C5E\u8C5F\u8C60\u8C63\u8C64\u8C65\u8C66\u8C67\u8C68\u8C69\u8C6C\u8C6D\u8C6E\u8C6F\u8C70\u8C71\u8C72\u8C74\u8C75\u8C76\u8C77\u8C7B\u8C7C\u8C7D\u8C7E\u8C7F\u8C80\u8C81\u8C83\u8C84\u8C86\u8C87\uFFFD\u8C88\u8C8B\u8C8D\u8C8E\u8C8F\u8C90\u8C91\u8C92\u8C93\u8C95\u8C96\u8C97\u8C99\u8C9A\u8C9B\u8C9C\u8C9D\u8C9E\u8C9F\u8CA0\u8CA1\u8CA2\u8CA3\u8CA4\u8CA5\u8CA6\u8CA7\u8CA8\u8CA9\u8CAA\u8CAB\u8CAC\u8CAD\u4E8D\u4E0C\u5140\u4E10\u5EFF\u5345\u4E15\u4E98\u4E1E\u9B32\u5B6C\u5669\u4E28\u79BA\u4E3F\u5315\u4E47\u592D\u723B\u536E\u6C10\u56DF\u80E4\u9997\u6BD3\u777E\u9F17\u4E36\u4E9F\u9F10\u4E5C\u4E69\u4E93\u8288\u5B5B\u556C\u560F\u4EC4\u538D\u539D\u53A3\u53A5\u53AE\u9765\u8D5D\u531A\u53F5\u5326\u532E\u533E\u8D5C\u5366\u5363\u5202\u5208\u520E\u522D\u5233\u523F\u5240\u524C\u525E\u5261\u525C\u84AF\u527D\u5282\u5281\u5290\u5293\u5182\u7F54\u4EBB\u4EC3\u4EC9\u4EC2\u4EE8\u4EE1\u4EEB\u4EDE\u4F1B\u4EF3\u4F22\u4F64\u4EF5\u4F25\u4F27\u4F09\u4F2B\u4F5E\u4F67\u6538\u4F5A\u4F5D\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[216].length; ++j)
                if (D[216][j].charCodeAt(0) !== 65533) {
                    e2[D[216][j]] = 55296 + j;
                    d[55296 + j] = D[216][j];
                }
            D[217] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8CAE\u8CAF\u8CB0\u8CB1\u8CB2\u8CB3\u8CB4\u8CB5\u8CB6\u8CB7\u8CB8\u8CB9\u8CBA\u8CBB\u8CBC\u8CBD\u8CBE\u8CBF\u8CC0\u8CC1\u8CC2\u8CC3\u8CC4\u8CC5\u8CC6\u8CC7\u8CC8\u8CC9\u8CCA\u8CCB\u8CCC\u8CCD\u8CCE\u8CCF\u8CD0\u8CD1\u8CD2\u8CD3\u8CD4\u8CD5\u8CD6\u8CD7\u8CD8\u8CD9\u8CDA\u8CDB\u8CDC\u8CDD\u8CDE\u8CDF\u8CE0\u8CE1\u8CE2\u8CE3\u8CE4\u8CE5\u8CE6\u8CE7\u8CE8\u8CE9\u8CEA\u8CEB\u8CEC\uFFFD\u8CED\u8CEE\u8CEF\u8CF0\u8CF1\u8CF2\u8CF3\u8CF4\u8CF5\u8CF6\u8CF7\u8CF8\u8CF9\u8CFA\u8CFB\u8CFC\u8CFD\u8CFE\u8CFF\u8D00\u8D01\u8D02\u8D03\u8D04\u8D05\u8D06\u8D07\u8D08\u8D09\u8D0A\u8D0B\u8D0C\u8D0D\u4F5F\u4F57\u4F32\u4F3D\u4F76\u4F74\u4F91\u4F89\u4F83\u4F8F\u4F7E\u4F7B\u4FAA\u4F7C\u4FAC\u4F94\u4FE6\u4FE8\u4FEA\u4FC5\u4FDA\u4FE3\u4FDC\u4FD1\u4FDF\u4FF8\u5029\u504C\u4FF3\u502C\u500F\u502E\u502D\u4FFE\u501C\u500C\u5025\u5028\u507E\u5043\u5055\u5048\u504E\u506C\u507B\u50A5\u50A7\u50A9\u50BA\u50D6\u5106\u50ED\u50EC\u50E6\u50EE\u5107\u510B\u4EDD\u6C3D\u4F58\u4F65\u4FCE\u9FA0\u6C46\u7C74\u516E\u5DFD\u9EC9\u9998\u5181\u5914\u52F9\u530D\u8A07\u5310\u51EB\u5919\u5155\u4EA0\u5156\u4EB3\u886E\u88A4\u4EB5\u8114\u88D2\u7980\u5B34\u8803\u7FB8\u51AB\u51B1\u51BD\u51BC\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[217].length; ++j)
                if (D[217][j].charCodeAt(0) !== 65533) {
                    e2[D[217][j]] = 55552 + j;
                    d[55552 + j] = D[217][j];
                }
            D[218] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8D0E\u8D0F\u8D10\u8D11\u8D12\u8D13\u8D14\u8D15\u8D16\u8D17\u8D18\u8D19\u8D1A\u8D1B\u8D1C\u8D20\u8D51\u8D52\u8D57\u8D5F\u8D65\u8D68\u8D69\u8D6A\u8D6C\u8D6E\u8D6F\u8D71\u8D72\u8D78\u8D79\u8D7A\u8D7B\u8D7C\u8D7D\u8D7E\u8D7F\u8D80\u8D82\u8D83\u8D86\u8D87\u8D88\u8D89\u8D8C\u8D8D\u8D8E\u8D8F\u8D90\u8D92\u8D93\u8D95\u8D96\u8D97\u8D98\u8D99\u8D9A\u8D9B\u8D9C\u8D9D\u8D9E\u8DA0\u8DA1\uFFFD\u8DA2\u8DA4\u8DA5\u8DA6\u8DA7\u8DA8\u8DA9\u8DAA\u8DAB\u8DAC\u8DAD\u8DAE\u8DAF\u8DB0\u8DB2\u8DB6\u8DB7\u8DB9\u8DBB\u8DBD\u8DC0\u8DC1\u8DC2\u8DC5\u8DC7\u8DC8\u8DC9\u8DCA\u8DCD\u8DD0\u8DD2\u8DD3\u8DD4\u51C7\u5196\u51A2\u51A5\u8BA0\u8BA6\u8BA7\u8BAA\u8BB4\u8BB5\u8BB7\u8BC2\u8BC3\u8BCB\u8BCF\u8BCE\u8BD2\u8BD3\u8BD4\u8BD6\u8BD8\u8BD9\u8BDC\u8BDF\u8BE0\u8BE4\u8BE8\u8BE9\u8BEE\u8BF0\u8BF3\u8BF6\u8BF9\u8BFC\u8BFF\u8C00\u8C02\u8C04\u8C07\u8C0C\u8C0F\u8C11\u8C12\u8C14\u8C15\u8C16\u8C19\u8C1B\u8C18\u8C1D\u8C1F\u8C20\u8C21\u8C25\u8C27\u8C2A\u8C2B\u8C2E\u8C2F\u8C32\u8C33\u8C35\u8C36\u5369\u537A\u961D\u9622\u9621\u9631\u962A\u963D\u963C\u9642\u9649\u9654\u965F\u9667\u966C\u9672\u9674\u9688\u968D\u9697\u96B0\u9097\u909B\u909D\u9099\u90AC\u90A1\u90B4\u90B3\u90B6\u90BA\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[218].length; ++j)
                if (D[218][j].charCodeAt(0) !== 65533) {
                    e2[D[218][j]] = 55808 + j;
                    d[55808 + j] = D[218][j];
                }
            D[219] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8DD5\u8DD8\u8DD9\u8DDC\u8DE0\u8DE1\u8DE2\u8DE5\u8DE6\u8DE7\u8DE9\u8DED\u8DEE\u8DF0\u8DF1\u8DF2\u8DF4\u8DF6\u8DFC\u8DFE\u8DFF\u8E00\u8E01\u8E02\u8E03\u8E04\u8E06\u8E07\u8E08\u8E0B\u8E0D\u8E0E\u8E10\u8E11\u8E12\u8E13\u8E15\u8E16\u8E17\u8E18\u8E19\u8E1A\u8E1B\u8E1C\u8E20\u8E21\u8E24\u8E25\u8E26\u8E27\u8E28\u8E2B\u8E2D\u8E30\u8E32\u8E33\u8E34\u8E36\u8E37\u8E38\u8E3B\u8E3C\u8E3E\uFFFD\u8E3F\u8E43\u8E45\u8E46\u8E4C\u8E4D\u8E4E\u8E4F\u8E50\u8E53\u8E54\u8E55\u8E56\u8E57\u8E58\u8E5A\u8E5B\u8E5C\u8E5D\u8E5E\u8E5F\u8E60\u8E61\u8E62\u8E63\u8E64\u8E65\u8E67\u8E68\u8E6A\u8E6B\u8E6E\u8E71\u90B8\u90B0\u90CF\u90C5\u90BE\u90D0\u90C4\u90C7\u90D3\u90E6\u90E2\u90DC\u90D7\u90DB\u90EB\u90EF\u90FE\u9104\u9122\u911E\u9123\u9131\u912F\u9139\u9143\u9146\u520D\u5942\u52A2\u52AC\u52AD\u52BE\u54FF\u52D0\u52D6\u52F0\u53DF\u71EE\u77CD\u5EF4\u51F5\u51FC\u9B2F\u53B6\u5F01\u755A\u5DEF\u574C\u57A9\u57A1\u587E\u58BC\u58C5\u58D1\u5729\u572C\u572A\u5733\u5739\u572E\u572F\u575C\u573B\u5742\u5769\u5785\u576B\u5786\u577C\u577B\u5768\u576D\u5776\u5773\u57AD\u57A4\u578C\u57B2\u57CF\u57A7\u57B4\u5793\u57A0\u57D5\u57D8\u57DA\u57D9\u57D2\u57B8\u57F4\u57EF\u57F8\u57E4\u57DD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[219].length; ++j)
                if (D[219][j].charCodeAt(0) !== 65533) {
                    e2[D[219][j]] = 56064 + j;
                    d[56064 + j] = D[219][j];
                }
            D[220] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8E73\u8E75\u8E77\u8E78\u8E79\u8E7A\u8E7B\u8E7D\u8E7E\u8E80\u8E82\u8E83\u8E84\u8E86\u8E88\u8E89\u8E8A\u8E8B\u8E8C\u8E8D\u8E8E\u8E91\u8E92\u8E93\u8E95\u8E96\u8E97\u8E98\u8E99\u8E9A\u8E9B\u8E9D\u8E9F\u8EA0\u8EA1\u8EA2\u8EA3\u8EA4\u8EA5\u8EA6\u8EA7\u8EA8\u8EA9\u8EAA\u8EAD\u8EAE\u8EB0\u8EB1\u8EB3\u8EB4\u8EB5\u8EB6\u8EB7\u8EB8\u8EB9\u8EBB\u8EBC\u8EBD\u8EBE\u8EBF\u8EC0\u8EC1\u8EC2\uFFFD\u8EC3\u8EC4\u8EC5\u8EC6\u8EC7\u8EC8\u8EC9\u8ECA\u8ECB\u8ECC\u8ECD\u8ECF\u8ED0\u8ED1\u8ED2\u8ED3\u8ED4\u8ED5\u8ED6\u8ED7\u8ED8\u8ED9\u8EDA\u8EDB\u8EDC\u8EDD\u8EDE\u8EDF\u8EE0\u8EE1\u8EE2\u8EE3\u8EE4\u580B\u580D\u57FD\u57ED\u5800\u581E\u5819\u5844\u5820\u5865\u586C\u5881\u5889\u589A\u5880\u99A8\u9F19\u61FF\u8279\u827D\u827F\u828F\u828A\u82A8\u8284\u828E\u8291\u8297\u8299\u82AB\u82B8\u82BE\u82B0\u82C8\u82CA\u82E3\u8298\u82B7\u82AE\u82CB\u82CC\u82C1\u82A9\u82B4\u82A1\u82AA\u829F\u82C4\u82CE\u82A4\u82E1\u8309\u82F7\u82E4\u830F\u8307\u82DC\u82F4\u82D2\u82D8\u830C\u82FB\u82D3\u8311\u831A\u8306\u8314\u8315\u82E0\u82D5\u831C\u8351\u835B\u835C\u8308\u8392\u833C\u8334\u8331\u839B\u835E\u832F\u834F\u8347\u8343\u835F\u8340\u8317\u8360\u832D\u833A\u8333\u8366\u8365\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[220].length; ++j)
                if (D[220][j].charCodeAt(0) !== 65533) {
                    e2[D[220][j]] = 56320 + j;
                    d[56320 + j] = D[220][j];
                }
            D[221] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8EE5\u8EE6\u8EE7\u8EE8\u8EE9\u8EEA\u8EEB\u8EEC\u8EED\u8EEE\u8EEF\u8EF0\u8EF1\u8EF2\u8EF3\u8EF4\u8EF5\u8EF6\u8EF7\u8EF8\u8EF9\u8EFA\u8EFB\u8EFC\u8EFD\u8EFE\u8EFF\u8F00\u8F01\u8F02\u8F03\u8F04\u8F05\u8F06\u8F07\u8F08\u8F09\u8F0A\u8F0B\u8F0C\u8F0D\u8F0E\u8F0F\u8F10\u8F11\u8F12\u8F13\u8F14\u8F15\u8F16\u8F17\u8F18\u8F19\u8F1A\u8F1B\u8F1C\u8F1D\u8F1E\u8F1F\u8F20\u8F21\u8F22\u8F23\uFFFD\u8F24\u8F25\u8F26\u8F27\u8F28\u8F29\u8F2A\u8F2B\u8F2C\u8F2D\u8F2E\u8F2F\u8F30\u8F31\u8F32\u8F33\u8F34\u8F35\u8F36\u8F37\u8F38\u8F39\u8F3A\u8F3B\u8F3C\u8F3D\u8F3E\u8F3F\u8F40\u8F41\u8F42\u8F43\u8F44\u8368\u831B\u8369\u836C\u836A\u836D\u836E\u83B0\u8378\u83B3\u83B4\u83A0\u83AA\u8393\u839C\u8385\u837C\u83B6\u83A9\u837D\u83B8\u837B\u8398\u839E\u83A8\u83BA\u83BC\u83C1\u8401\u83E5\u83D8\u5807\u8418\u840B\u83DD\u83FD\u83D6\u841C\u8438\u8411\u8406\u83D4\u83DF\u840F\u8403\u83F8\u83F9\u83EA\u83C5\u83C0\u8426\u83F0\u83E1\u845C\u8451\u845A\u8459\u8473\u8487\u8488\u847A\u8489\u8478\u843C\u8446\u8469\u8476\u848C\u848E\u8431\u846D\u84C1\u84CD\u84D0\u84E6\u84BD\u84D3\u84CA\u84BF\u84BA\u84E0\u84A1\u84B9\u84B4\u8497\u84E5\u84E3\u850C\u750D\u8538\u84F0\u8539\u851F\u853A\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[221].length; ++j)
                if (D[221][j].charCodeAt(0) !== 65533) {
                    e2[D[221][j]] = 56576 + j;
                    d[56576 + j] = D[221][j];
                }
            D[222] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8F45\u8F46\u8F47\u8F48\u8F49\u8F4A\u8F4B\u8F4C\u8F4D\u8F4E\u8F4F\u8F50\u8F51\u8F52\u8F53\u8F54\u8F55\u8F56\u8F57\u8F58\u8F59\u8F5A\u8F5B\u8F5C\u8F5D\u8F5E\u8F5F\u8F60\u8F61\u8F62\u8F63\u8F64\u8F65\u8F6A\u8F80\u8F8C\u8F92\u8F9D\u8FA0\u8FA1\u8FA2\u8FA4\u8FA5\u8FA6\u8FA7\u8FAA\u8FAC\u8FAD\u8FAE\u8FAF\u8FB2\u8FB3\u8FB4\u8FB5\u8FB7\u8FB8\u8FBA\u8FBB\u8FBC\u8FBF\u8FC0\u8FC3\u8FC6\uFFFD\u8FC9\u8FCA\u8FCB\u8FCC\u8FCD\u8FCF\u8FD2\u8FD6\u8FD7\u8FDA\u8FE0\u8FE1\u8FE3\u8FE7\u8FEC\u8FEF\u8FF1\u8FF2\u8FF4\u8FF5\u8FF6\u8FFA\u8FFB\u8FFC\u8FFE\u8FFF\u9007\u9008\u900C\u900E\u9013\u9015\u9018\u8556\u853B\u84FF\u84FC\u8559\u8548\u8568\u8564\u855E\u857A\u77A2\u8543\u8572\u857B\u85A4\u85A8\u8587\u858F\u8579\u85AE\u859C\u8585\u85B9\u85B7\u85B0\u85D3\u85C1\u85DC\u85FF\u8627\u8605\u8629\u8616\u863C\u5EFE\u5F08\u593C\u5941\u8037\u5955\u595A\u5958\u530F\u5C22\u5C25\u5C2C\u5C34\u624C\u626A\u629F\u62BB\u62CA\u62DA\u62D7\u62EE\u6322\u62F6\u6339\u634B\u6343\u63AD\u63F6\u6371\u637A\u638E\u63B4\u636D\u63AC\u638A\u6369\u63AE\u63BC\u63F2\u63F8\u63E0\u63FF\u63C4\u63DE\u63CE\u6452\u63C6\u63BE\u6445\u6441\u640B\u641B\u6420\u640C\u6426\u6421\u645E\u6484\u646D\u6496\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[222].length; ++j)
                if (D[222][j].charCodeAt(0) !== 65533) {
                    e2[D[222][j]] = 56832 + j;
                    d[56832 + j] = D[222][j];
                }
            D[223] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9019\u901C\u9023\u9024\u9025\u9027\u9028\u9029\u902A\u902B\u902C\u9030\u9031\u9032\u9033\u9034\u9037\u9039\u903A\u903D\u903F\u9040\u9043\u9045\u9046\u9048\u9049\u904A\u904B\u904C\u904E\u9054\u9055\u9056\u9059\u905A\u905C\u905D\u905E\u905F\u9060\u9061\u9064\u9066\u9067\u9069\u906A\u906B\u906C\u906F\u9070\u9071\u9072\u9073\u9076\u9077\u9078\u9079\u907A\u907B\u907C\u907E\u9081\uFFFD\u9084\u9085\u9086\u9087\u9089\u908A\u908C\u908D\u908E\u908F\u9090\u9092\u9094\u9096\u9098\u909A\u909C\u909E\u909F\u90A0\u90A4\u90A5\u90A7\u90A8\u90A9\u90AB\u90AD\u90B2\u90B7\u90BC\u90BD\u90BF\u90C0\u647A\u64B7\u64B8\u6499\u64BA\u64C0\u64D0\u64D7\u64E4\u64E2\u6509\u6525\u652E\u5F0B\u5FD2\u7519\u5F11\u535F\u53F1\u53FD\u53E9\u53E8\u53FB\u5412\u5416\u5406\u544B\u5452\u5453\u5454\u5456\u5443\u5421\u5457\u5459\u5423\u5432\u5482\u5494\u5477\u5471\u5464\u549A\u549B\u5484\u5476\u5466\u549D\u54D0\u54AD\u54C2\u54B4\u54D2\u54A7\u54A6\u54D3\u54D4\u5472\u54A3\u54D5\u54BB\u54BF\u54CC\u54D9\u54DA\u54DC\u54A9\u54AA\u54A4\u54DD\u54CF\u54DE\u551B\u54E7\u5520\u54FD\u5514\u54F3\u5522\u5523\u550F\u5511\u5527\u552A\u5567\u558F\u55B5\u5549\u556D\u5541\u5555\u553F\u5550\u553C\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[223].length; ++j)
                if (D[223][j].charCodeAt(0) !== 65533) {
                    e2[D[223][j]] = 57088 + j;
                    d[57088 + j] = D[223][j];
                }
            D[224] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u90C2\u90C3\u90C6\u90C8\u90C9\u90CB\u90CC\u90CD\u90D2\u90D4\u90D5\u90D6\u90D8\u90D9\u90DA\u90DE\u90DF\u90E0\u90E3\u90E4\u90E5\u90E9\u90EA\u90EC\u90EE\u90F0\u90F1\u90F2\u90F3\u90F5\u90F6\u90F7\u90F9\u90FA\u90FB\u90FC\u90FF\u9100\u9101\u9103\u9105\u9106\u9107\u9108\u9109\u910A\u910B\u910C\u910D\u910E\u910F\u9110\u9111\u9112\u9113\u9114\u9115\u9116\u9117\u9118\u911A\u911B\u911C\uFFFD\u911D\u911F\u9120\u9121\u9124\u9125\u9126\u9127\u9128\u9129\u912A\u912B\u912C\u912D\u912E\u9130\u9132\u9133\u9134\u9135\u9136\u9137\u9138\u913A\u913B\u913C\u913D\u913E\u913F\u9140\u9141\u9142\u9144\u5537\u5556\u5575\u5576\u5577\u5533\u5530\u555C\u558B\u55D2\u5583\u55B1\u55B9\u5588\u5581\u559F\u557E\u55D6\u5591\u557B\u55DF\u55BD\u55BE\u5594\u5599\u55EA\u55F7\u55C9\u561F\u55D1\u55EB\u55EC\u55D4\u55E6\u55DD\u55C4\u55EF\u55E5\u55F2\u55F3\u55CC\u55CD\u55E8\u55F5\u55E4\u8F94\u561E\u5608\u560C\u5601\u5624\u5623\u55FE\u5600\u5627\u562D\u5658\u5639\u5657\u562C\u564D\u5662\u5659\u565C\u564C\u5654\u5686\u5664\u5671\u566B\u567B\u567C\u5685\u5693\u56AF\u56D4\u56D7\u56DD\u56E1\u56F5\u56EB\u56F9\u56FF\u5704\u570A\u5709\u571C\u5E0F\u5E19\u5E14\u5E11\u5E31\u5E3B\u5E3C\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[224].length; ++j)
                if (D[224][j].charCodeAt(0) !== 65533) {
                    e2[D[224][j]] = 57344 + j;
                    d[57344 + j] = D[224][j];
                }
            D[225] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9145\u9147\u9148\u9151\u9153\u9154\u9155\u9156\u9158\u9159\u915B\u915C\u915F\u9160\u9166\u9167\u9168\u916B\u916D\u9173\u917A\u917B\u917C\u9180\u9181\u9182\u9183\u9184\u9186\u9188\u918A\u918E\u918F\u9193\u9194\u9195\u9196\u9197\u9198\u9199\u919C\u919D\u919E\u919F\u91A0\u91A1\u91A4\u91A5\u91A6\u91A7\u91A8\u91A9\u91AB\u91AC\u91B0\u91B1\u91B2\u91B3\u91B6\u91B7\u91B8\u91B9\u91BB\uFFFD\u91BC\u91BD\u91BE\u91BF\u91C0\u91C1\u91C2\u91C3\u91C4\u91C5\u91C6\u91C8\u91CB\u91D0\u91D2\u91D3\u91D4\u91D5\u91D6\u91D7\u91D8\u91D9\u91DA\u91DB\u91DD\u91DE\u91DF\u91E0\u91E1\u91E2\u91E3\u91E4\u91E5\u5E37\u5E44\u5E54\u5E5B\u5E5E\u5E61\u5C8C\u5C7A\u5C8D\u5C90\u5C96\u5C88\u5C98\u5C99\u5C91\u5C9A\u5C9C\u5CB5\u5CA2\u5CBD\u5CAC\u5CAB\u5CB1\u5CA3\u5CC1\u5CB7\u5CC4\u5CD2\u5CE4\u5CCB\u5CE5\u5D02\u5D03\u5D27\u5D26\u5D2E\u5D24\u5D1E\u5D06\u5D1B\u5D58\u5D3E\u5D34\u5D3D\u5D6C\u5D5B\u5D6F\u5D5D\u5D6B\u5D4B\u5D4A\u5D69\u5D74\u5D82\u5D99\u5D9D\u8C73\u5DB7\u5DC5\u5F73\u5F77\u5F82\u5F87\u5F89\u5F8C\u5F95\u5F99\u5F9C\u5FA8\u5FAD\u5FB5\u5FBC\u8862\u5F61\u72AD\u72B0\u72B4\u72B7\u72B8\u72C3\u72C1\u72CE\u72CD\u72D2\u72E8\u72EF\u72E9\u72F2\u72F4\u72F7\u7301\u72F3\u7303\u72FA\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[225].length; ++j)
                if (D[225][j].charCodeAt(0) !== 65533) {
                    e2[D[225][j]] = 57600 + j;
                    d[57600 + j] = D[225][j];
                }
            D[226] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u91E6\u91E7\u91E8\u91E9\u91EA\u91EB\u91EC\u91ED\u91EE\u91EF\u91F0\u91F1\u91F2\u91F3\u91F4\u91F5\u91F6\u91F7\u91F8\u91F9\u91FA\u91FB\u91FC\u91FD\u91FE\u91FF\u9200\u9201\u9202\u9203\u9204\u9205\u9206\u9207\u9208\u9209\u920A\u920B\u920C\u920D\u920E\u920F\u9210\u9211\u9212\u9213\u9214\u9215\u9216\u9217\u9218\u9219\u921A\u921B\u921C\u921D\u921E\u921F\u9220\u9221\u9222\u9223\u9224\uFFFD\u9225\u9226\u9227\u9228\u9229\u922A\u922B\u922C\u922D\u922E\u922F\u9230\u9231\u9232\u9233\u9234\u9235\u9236\u9237\u9238\u9239\u923A\u923B\u923C\u923D\u923E\u923F\u9240\u9241\u9242\u9243\u9244\u9245\u72FB\u7317\u7313\u7321\u730A\u731E\u731D\u7315\u7322\u7339\u7325\u732C\u7338\u7331\u7350\u734D\u7357\u7360\u736C\u736F\u737E\u821B\u5925\u98E7\u5924\u5902\u9963\u9967\u9968\u9969\u996A\u996B\u996C\u9974\u9977\u997D\u9980\u9984\u9987\u998A\u998D\u9990\u9991\u9993\u9994\u9995\u5E80\u5E91\u5E8B\u5E96\u5EA5\u5EA0\u5EB9\u5EB5\u5EBE\u5EB3\u8D53\u5ED2\u5ED1\u5EDB\u5EE8\u5EEA\u81BA\u5FC4\u5FC9\u5FD6\u5FCF\u6003\u5FEE\u6004\u5FE1\u5FE4\u5FFE\u6005\u6006\u5FEA\u5FED\u5FF8\u6019\u6035\u6026\u601B\u600F\u600D\u6029\u602B\u600A\u603F\u6021\u6078\u6079\u607B\u607A\u6042\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[226].length; ++j)
                if (D[226][j].charCodeAt(0) !== 65533) {
                    e2[D[226][j]] = 57856 + j;
                    d[57856 + j] = D[226][j];
                }
            D[227] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9246\u9247\u9248\u9249\u924A\u924B\u924C\u924D\u924E\u924F\u9250\u9251\u9252\u9253\u9254\u9255\u9256\u9257\u9258\u9259\u925A\u925B\u925C\u925D\u925E\u925F\u9260\u9261\u9262\u9263\u9264\u9265\u9266\u9267\u9268\u9269\u926A\u926B\u926C\u926D\u926E\u926F\u9270\u9271\u9272\u9273\u9275\u9276\u9277\u9278\u9279\u927A\u927B\u927C\u927D\u927E\u927F\u9280\u9281\u9282\u9283\u9284\u9285\uFFFD\u9286\u9287\u9288\u9289\u928A\u928B\u928C\u928D\u928F\u9290\u9291\u9292\u9293\u9294\u9295\u9296\u9297\u9298\u9299\u929A\u929B\u929C\u929D\u929E\u929F\u92A0\u92A1\u92A2\u92A3\u92A4\u92A5\u92A6\u92A7\u606A\u607D\u6096\u609A\u60AD\u609D\u6083\u6092\u608C\u609B\u60EC\u60BB\u60B1\u60DD\u60D8\u60C6\u60DA\u60B4\u6120\u6126\u6115\u6123\u60F4\u6100\u610E\u612B\u614A\u6175\u61AC\u6194\u61A7\u61B7\u61D4\u61F5\u5FDD\u96B3\u95E9\u95EB\u95F1\u95F3\u95F5\u95F6\u95FC\u95FE\u9603\u9604\u9606\u9608\u960A\u960B\u960C\u960D\u960F\u9612\u9615\u9616\u9617\u9619\u961A\u4E2C\u723F\u6215\u6C35\u6C54\u6C5C\u6C4A\u6CA3\u6C85\u6C90\u6C94\u6C8C\u6C68\u6C69\u6C74\u6C76\u6C86\u6CA9\u6CD0\u6CD4\u6CAD\u6CF7\u6CF8\u6CF1\u6CD7\u6CB2\u6CE0\u6CD6\u6CFA\u6CEB\u6CEE\u6CB1\u6CD3\u6CEF\u6CFE\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[227].length; ++j)
                if (D[227][j].charCodeAt(0) !== 65533) {
                    e2[D[227][j]] = 58112 + j;
                    d[58112 + j] = D[227][j];
                }
            D[228] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u92A8\u92A9\u92AA\u92AB\u92AC\u92AD\u92AF\u92B0\u92B1\u92B2\u92B3\u92B4\u92B5\u92B6\u92B7\u92B8\u92B9\u92BA\u92BB\u92BC\u92BD\u92BE\u92BF\u92C0\u92C1\u92C2\u92C3\u92C4\u92C5\u92C6\u92C7\u92C9\u92CA\u92CB\u92CC\u92CD\u92CE\u92CF\u92D0\u92D1\u92D2\u92D3\u92D4\u92D5\u92D6\u92D7\u92D8\u92D9\u92DA\u92DB\u92DC\u92DD\u92DE\u92DF\u92E0\u92E1\u92E2\u92E3\u92E4\u92E5\u92E6\u92E7\u92E8\uFFFD\u92E9\u92EA\u92EB\u92EC\u92ED\u92EE\u92EF\u92F0\u92F1\u92F2\u92F3\u92F4\u92F5\u92F6\u92F7\u92F8\u92F9\u92FA\u92FB\u92FC\u92FD\u92FE\u92FF\u9300\u9301\u9302\u9303\u9304\u9305\u9306\u9307\u9308\u9309\u6D39\u6D27\u6D0C\u6D43\u6D48\u6D07\u6D04\u6D19\u6D0E\u6D2B\u6D4D\u6D2E\u6D35\u6D1A\u6D4F\u6D52\u6D54\u6D33\u6D91\u6D6F\u6D9E\u6DA0\u6D5E\u6D93\u6D94\u6D5C\u6D60\u6D7C\u6D63\u6E1A\u6DC7\u6DC5\u6DDE\u6E0E\u6DBF\u6DE0\u6E11\u6DE6\u6DDD\u6DD9\u6E16\u6DAB\u6E0C\u6DAE\u6E2B\u6E6E\u6E4E\u6E6B\u6EB2\u6E5F\u6E86\u6E53\u6E54\u6E32\u6E25\u6E44\u6EDF\u6EB1\u6E98\u6EE0\u6F2D\u6EE2\u6EA5\u6EA7\u6EBD\u6EBB\u6EB7\u6ED7\u6EB4\u6ECF\u6E8F\u6EC2\u6E9F\u6F62\u6F46\u6F47\u6F24\u6F15\u6EF9\u6F2F\u6F36\u6F4B\u6F74\u6F2A\u6F09\u6F29\u6F89\u6F8D\u6F8C\u6F78\u6F72\u6F7C\u6F7A\u6FD1\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[228].length; ++j)
                if (D[228][j].charCodeAt(0) !== 65533) {
                    e2[D[228][j]] = 58368 + j;
                    d[58368 + j] = D[228][j];
                }
            D[229] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u930A\u930B\u930C\u930D\u930E\u930F\u9310\u9311\u9312\u9313\u9314\u9315\u9316\u9317\u9318\u9319\u931A\u931B\u931C\u931D\u931E\u931F\u9320\u9321\u9322\u9323\u9324\u9325\u9326\u9327\u9328\u9329\u932A\u932B\u932C\u932D\u932E\u932F\u9330\u9331\u9332\u9333\u9334\u9335\u9336\u9337\u9338\u9339\u933A\u933B\u933C\u933D\u933F\u9340\u9341\u9342\u9343\u9344\u9345\u9346\u9347\u9348\u9349\uFFFD\u934A\u934B\u934C\u934D\u934E\u934F\u9350\u9351\u9352\u9353\u9354\u9355\u9356\u9357\u9358\u9359\u935A\u935B\u935C\u935D\u935E\u935F\u9360\u9361\u9362\u9363\u9364\u9365\u9366\u9367\u9368\u9369\u936B\u6FC9\u6FA7\u6FB9\u6FB6\u6FC2\u6FE1\u6FEE\u6FDE\u6FE0\u6FEF\u701A\u7023\u701B\u7039\u7035\u704F\u705E\u5B80\u5B84\u5B95\u5B93\u5BA5\u5BB8\u752F\u9A9E\u6434\u5BE4\u5BEE\u8930\u5BF0\u8E47\u8B07\u8FB6\u8FD3\u8FD5\u8FE5\u8FEE\u8FE4\u8FE9\u8FE6\u8FF3\u8FE8\u9005\u9004\u900B\u9026\u9011\u900D\u9016\u9021\u9035\u9036\u902D\u902F\u9044\u9051\u9052\u9050\u9068\u9058\u9062\u905B\u66B9\u9074\u907D\u9082\u9088\u9083\u908B\u5F50\u5F57\u5F56\u5F58\u5C3B\u54AB\u5C50\u5C59\u5B71\u5C63\u5C66\u7FBC\u5F2A\u5F29\u5F2D\u8274\u5F3C\u9B3B\u5C6E\u5981\u5983\u598D\u59A9\u59AA\u59A3\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[229].length; ++j)
                if (D[229][j].charCodeAt(0) !== 65533) {
                    e2[D[229][j]] = 58624 + j;
                    d[58624 + j] = D[229][j];
                }
            D[230] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u936C\u936D\u936E\u936F\u9370\u9371\u9372\u9373\u9374\u9375\u9376\u9377\u9378\u9379\u937A\u937B\u937C\u937D\u937E\u937F\u9380\u9381\u9382\u9383\u9384\u9385\u9386\u9387\u9388\u9389\u938A\u938B\u938C\u938D\u938E\u9390\u9391\u9392\u9393\u9394\u9395\u9396\u9397\u9398\u9399\u939A\u939B\u939C\u939D\u939E\u939F\u93A0\u93A1\u93A2\u93A3\u93A4\u93A5\u93A6\u93A7\u93A8\u93A9\u93AA\u93AB\uFFFD\u93AC\u93AD\u93AE\u93AF\u93B0\u93B1\u93B2\u93B3\u93B4\u93B5\u93B6\u93B7\u93B8\u93B9\u93BA\u93BB\u93BC\u93BD\u93BE\u93BF\u93C0\u93C1\u93C2\u93C3\u93C4\u93C5\u93C6\u93C7\u93C8\u93C9\u93CB\u93CC\u93CD\u5997\u59CA\u59AB\u599E\u59A4\u59D2\u59B2\u59AF\u59D7\u59BE\u5A05\u5A06\u59DD\u5A08\u59E3\u59D8\u59F9\u5A0C\u5A09\u5A32\u5A34\u5A11\u5A23\u5A13\u5A40\u5A67\u5A4A\u5A55\u5A3C\u5A62\u5A75\u80EC\u5AAA\u5A9B\u5A77\u5A7A\u5ABE\u5AEB\u5AB2\u5AD2\u5AD4\u5AB8\u5AE0\u5AE3\u5AF1\u5AD6\u5AE6\u5AD8\u5ADC\u5B09\u5B17\u5B16\u5B32\u5B37\u5B40\u5C15\u5C1C\u5B5A\u5B65\u5B73\u5B51\u5B53\u5B62\u9A75\u9A77\u9A78\u9A7A\u9A7F\u9A7D\u9A80\u9A81\u9A85\u9A88\u9A8A\u9A90\u9A92\u9A93\u9A96\u9A98\u9A9B\u9A9C\u9A9D\u9A9F\u9AA0\u9AA2\u9AA3\u9AA5\u9AA7\u7E9F\u7EA1\u7EA3\u7EA5\u7EA8\u7EA9\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[230].length; ++j)
                if (D[230][j].charCodeAt(0) !== 65533) {
                    e2[D[230][j]] = 58880 + j;
                    d[58880 + j] = D[230][j];
                }
            D[231] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u93CE\u93CF\u93D0\u93D1\u93D2\u93D3\u93D4\u93D5\u93D7\u93D8\u93D9\u93DA\u93DB\u93DC\u93DD\u93DE\u93DF\u93E0\u93E1\u93E2\u93E3\u93E4\u93E5\u93E6\u93E7\u93E8\u93E9\u93EA\u93EB\u93EC\u93ED\u93EE\u93EF\u93F0\u93F1\u93F2\u93F3\u93F4\u93F5\u93F6\u93F7\u93F8\u93F9\u93FA\u93FB\u93FC\u93FD\u93FE\u93FF\u9400\u9401\u9402\u9403\u9404\u9405\u9406\u9407\u9408\u9409\u940A\u940B\u940C\u940D\uFFFD\u940E\u940F\u9410\u9411\u9412\u9413\u9414\u9415\u9416\u9417\u9418\u9419\u941A\u941B\u941C\u941D\u941E\u941F\u9420\u9421\u9422\u9423\u9424\u9425\u9426\u9427\u9428\u9429\u942A\u942B\u942C\u942D\u942E\u7EAD\u7EB0\u7EBE\u7EC0\u7EC1\u7EC2\u7EC9\u7ECB\u7ECC\u7ED0\u7ED4\u7ED7\u7EDB\u7EE0\u7EE1\u7EE8\u7EEB\u7EEE\u7EEF\u7EF1\u7EF2\u7F0D\u7EF6\u7EFA\u7EFB\u7EFE\u7F01\u7F02\u7F03\u7F07\u7F08\u7F0B\u7F0C\u7F0F\u7F11\u7F12\u7F17\u7F19\u7F1C\u7F1B\u7F1F\u7F21\u7F22\u7F23\u7F24\u7F25\u7F26\u7F27\u7F2A\u7F2B\u7F2C\u7F2D\u7F2F\u7F30\u7F31\u7F32\u7F33\u7F35\u5E7A\u757F\u5DDB\u753E\u9095\u738E\u7391\u73AE\u73A2\u739F\u73CF\u73C2\u73D1\u73B7\u73B3\u73C0\u73C9\u73C8\u73E5\u73D9\u987C\u740A\u73E9\u73E7\u73DE\u73BA\u73F2\u740F\u742A\u745B\u7426\u7425\u7428\u7430\u742E\u742C\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[231].length; ++j)
                if (D[231][j].charCodeAt(0) !== 65533) {
                    e2[D[231][j]] = 59136 + j;
                    d[59136 + j] = D[231][j];
                }
            D[232] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u942F\u9430\u9431\u9432\u9433\u9434\u9435\u9436\u9437\u9438\u9439\u943A\u943B\u943C\u943D\u943F\u9440\u9441\u9442\u9443\u9444\u9445\u9446\u9447\u9448\u9449\u944A\u944B\u944C\u944D\u944E\u944F\u9450\u9451\u9452\u9453\u9454\u9455\u9456\u9457\u9458\u9459\u945A\u945B\u945C\u945D\u945E\u945F\u9460\u9461\u9462\u9463\u9464\u9465\u9466\u9467\u9468\u9469\u946A\u946C\u946D\u946E\u946F\uFFFD\u9470\u9471\u9472\u9473\u9474\u9475\u9476\u9477\u9478\u9479\u947A\u947B\u947C\u947D\u947E\u947F\u9480\u9481\u9482\u9483\u9484\u9491\u9496\u9498\u94C7\u94CF\u94D3\u94D4\u94DA\u94E6\u94FB\u951C\u9520\u741B\u741A\u7441\u745C\u7457\u7455\u7459\u7477\u746D\u747E\u749C\u748E\u7480\u7481\u7487\u748B\u749E\u74A8\u74A9\u7490\u74A7\u74D2\u74BA\u97EA\u97EB\u97EC\u674C\u6753\u675E\u6748\u6769\u67A5\u6787\u676A\u6773\u6798\u67A7\u6775\u67A8\u679E\u67AD\u678B\u6777\u677C\u67F0\u6809\u67D8\u680A\u67E9\u67B0\u680C\u67D9\u67B5\u67DA\u67B3\u67DD\u6800\u67C3\u67B8\u67E2\u680E\u67C1\u67FD\u6832\u6833\u6860\u6861\u684E\u6862\u6844\u6864\u6883\u681D\u6855\u6866\u6841\u6867\u6840\u683E\u684A\u6849\u6829\u68B5\u688F\u6874\u6877\u6893\u686B\u68C2\u696E\u68FC\u691F\u6920\u68F9\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[232].length; ++j)
                if (D[232][j].charCodeAt(0) !== 65533) {
                    e2[D[232][j]] = 59392 + j;
                    d[59392 + j] = D[232][j];
                }
            D[233] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9527\u9533\u953D\u9543\u9548\u954B\u9555\u955A\u9560\u956E\u9574\u9575\u9577\u9578\u9579\u957A\u957B\u957C\u957D\u957E\u9580\u9581\u9582\u9583\u9584\u9585\u9586\u9587\u9588\u9589\u958A\u958B\u958C\u958D\u958E\u958F\u9590\u9591\u9592\u9593\u9594\u9595\u9596\u9597\u9598\u9599\u959A\u959B\u959C\u959D\u959E\u959F\u95A0\u95A1\u95A2\u95A3\u95A4\u95A5\u95A6\u95A7\u95A8\u95A9\u95AA\uFFFD\u95AB\u95AC\u95AD\u95AE\u95AF\u95B0\u95B1\u95B2\u95B3\u95B4\u95B5\u95B6\u95B7\u95B8\u95B9\u95BA\u95BB\u95BC\u95BD\u95BE\u95BF\u95C0\u95C1\u95C2\u95C3\u95C4\u95C5\u95C6\u95C7\u95C8\u95C9\u95CA\u95CB\u6924\u68F0\u690B\u6901\u6957\u68E3\u6910\u6971\u6939\u6960\u6942\u695D\u6984\u696B\u6980\u6998\u6978\u6934\u69CC\u6987\u6988\u69CE\u6989\u6966\u6963\u6979\u699B\u69A7\u69BB\u69AB\u69AD\u69D4\u69B1\u69C1\u69CA\u69DF\u6995\u69E0\u698D\u69FF\u6A2F\u69ED\u6A17\u6A18\u6A65\u69F2\u6A44\u6A3E\u6AA0\u6A50\u6A5B\u6A35\u6A8E\u6A79\u6A3D\u6A28\u6A58\u6A7C\u6A91\u6A90\u6AA9\u6A97\u6AAB\u7337\u7352\u6B81\u6B82\u6B87\u6B84\u6B92\u6B93\u6B8D\u6B9A\u6B9B\u6BA1\u6BAA\u8F6B\u8F6D\u8F71\u8F72\u8F73\u8F75\u8F76\u8F78\u8F77\u8F79\u8F7A\u8F7C\u8F7E\u8F81\u8F82\u8F84\u8F87\u8F8B\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[233].length; ++j)
                if (D[233][j].charCodeAt(0) !== 65533) {
                    e2[D[233][j]] = 59648 + j;
                    d[59648 + j] = D[233][j];
                }
            D[234] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u95CC\u95CD\u95CE\u95CF\u95D0\u95D1\u95D2\u95D3\u95D4\u95D5\u95D6\u95D7\u95D8\u95D9\u95DA\u95DB\u95DC\u95DD\u95DE\u95DF\u95E0\u95E1\u95E2\u95E3\u95E4\u95E5\u95E6\u95E7\u95EC\u95FF\u9607\u9613\u9618\u961B\u961E\u9620\u9623\u9624\u9625\u9626\u9627\u9628\u9629\u962B\u962C\u962D\u962F\u9630\u9637\u9638\u9639\u963A\u963E\u9641\u9643\u964A\u964E\u964F\u9651\u9652\u9653\u9656\u9657\uFFFD\u9658\u9659\u965A\u965C\u965D\u965E\u9660\u9663\u9665\u9666\u966B\u966D\u966E\u966F\u9670\u9671\u9673\u9678\u9679\u967A\u967B\u967C\u967D\u967E\u967F\u9680\u9681\u9682\u9683\u9684\u9687\u9689\u968A\u8F8D\u8F8E\u8F8F\u8F98\u8F9A\u8ECE\u620B\u6217\u621B\u621F\u6222\u6221\u6225\u6224\u622C\u81E7\u74EF\u74F4\u74FF\u750F\u7511\u7513\u6534\u65EE\u65EF\u65F0\u660A\u6619\u6772\u6603\u6615\u6600\u7085\u66F7\u661D\u6634\u6631\u6636\u6635\u8006\u665F\u6654\u6641\u664F\u6656\u6661\u6657\u6677\u6684\u668C\u66A7\u669D\u66BE\u66DB\u66DC\u66E6\u66E9\u8D32\u8D33\u8D36\u8D3B\u8D3D\u8D40\u8D45\u8D46\u8D48\u8D49\u8D47\u8D4D\u8D55\u8D59\u89C7\u89CA\u89CB\u89CC\u89CE\u89CF\u89D0\u89D1\u726E\u729F\u725D\u7266\u726F\u727E\u727F\u7284\u728B\u728D\u728F\u7292\u6308\u6332\u63B0\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[234].length; ++j)
                if (D[234][j].charCodeAt(0) !== 65533) {
                    e2[D[234][j]] = 59904 + j;
                    d[59904 + j] = D[234][j];
                }
            D[235] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u968C\u968E\u9691\u9692\u9693\u9695\u9696\u969A\u969B\u969D\u969E\u969F\u96A0\u96A1\u96A2\u96A3\u96A4\u96A5\u96A6\u96A8\u96A9\u96AA\u96AB\u96AC\u96AD\u96AE\u96AF\u96B1\u96B2\u96B4\u96B5\u96B7\u96B8\u96BA\u96BB\u96BF\u96C2\u96C3\u96C8\u96CA\u96CB\u96D0\u96D1\u96D3\u96D4\u96D6\u96D7\u96D8\u96D9\u96DA\u96DB\u96DC\u96DD\u96DE\u96DF\u96E1\u96E2\u96E3\u96E4\u96E5\u96E6\u96E7\u96EB\uFFFD\u96EC\u96ED\u96EE\u96F0\u96F1\u96F2\u96F4\u96F5\u96F8\u96FA\u96FB\u96FC\u96FD\u96FF\u9702\u9703\u9705\u970A\u970B\u970C\u9710\u9711\u9712\u9714\u9715\u9717\u9718\u9719\u971A\u971B\u971D\u971F\u9720\u643F\u64D8\u8004\u6BEA\u6BF3\u6BFD\u6BF5\u6BF9\u6C05\u6C07\u6C06\u6C0D\u6C15\u6C18\u6C19\u6C1A\u6C21\u6C29\u6C24\u6C2A\u6C32\u6535\u6555\u656B\u724D\u7252\u7256\u7230\u8662\u5216\u809F\u809C\u8093\u80BC\u670A\u80BD\u80B1\u80AB\u80AD\u80B4\u80B7\u80E7\u80E8\u80E9\u80EA\u80DB\u80C2\u80C4\u80D9\u80CD\u80D7\u6710\u80DD\u80EB\u80F1\u80F4\u80ED\u810D\u810E\u80F2\u80FC\u6715\u8112\u8C5A\u8136\u811E\u812C\u8118\u8132\u8148\u814C\u8153\u8174\u8159\u815A\u8171\u8160\u8169\u817C\u817D\u816D\u8167\u584D\u5AB5\u8188\u8182\u8191\u6ED5\u81A3\u81AA\u81CC\u6726\u81CA\u81BB\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[235].length; ++j)
                if (D[235][j].charCodeAt(0) !== 65533) {
                    e2[D[235][j]] = 60160 + j;
                    d[60160 + j] = D[235][j];
                }
            D[236] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9721\u9722\u9723\u9724\u9725\u9726\u9727\u9728\u9729\u972B\u972C\u972E\u972F\u9731\u9733\u9734\u9735\u9736\u9737\u973A\u973B\u973C\u973D\u973F\u9740\u9741\u9742\u9743\u9744\u9745\u9746\u9747\u9748\u9749\u974A\u974B\u974C\u974D\u974E\u974F\u9750\u9751\u9754\u9755\u9757\u9758\u975A\u975C\u975D\u975F\u9763\u9764\u9766\u9767\u9768\u976A\u976B\u976C\u976D\u976E\u976F\u9770\u9771\uFFFD\u9772\u9775\u9777\u9778\u9779\u977A\u977B\u977D\u977E\u977F\u9780\u9781\u9782\u9783\u9784\u9786\u9787\u9788\u9789\u978A\u978C\u978E\u978F\u9790\u9793\u9795\u9796\u9797\u9799\u979A\u979B\u979C\u979D\u81C1\u81A6\u6B24\u6B37\u6B39\u6B43\u6B46\u6B59\u98D1\u98D2\u98D3\u98D5\u98D9\u98DA\u6BB3\u5F40\u6BC2\u89F3\u6590\u9F51\u6593\u65BC\u65C6\u65C4\u65C3\u65CC\u65CE\u65D2\u65D6\u7080\u709C\u7096\u709D\u70BB\u70C0\u70B7\u70AB\u70B1\u70E8\u70CA\u7110\u7113\u7116\u712F\u7131\u7173\u715C\u7168\u7145\u7172\u714A\u7178\u717A\u7198\u71B3\u71B5\u71A8\u71A0\u71E0\u71D4\u71E7\u71F9\u721D\u7228\u706C\u7118\u7166\u71B9\u623E\u623D\u6243\u6248\u6249\u793B\u7940\u7946\u7949\u795B\u795C\u7953\u795A\u7962\u7957\u7960\u796F\u7967\u797A\u7985\u798A\u799A\u79A7\u79B3\u5FD1\u5FD0\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[236].length; ++j)
                if (D[236][j].charCodeAt(0) !== 65533) {
                    e2[D[236][j]] = 60416 + j;
                    d[60416 + j] = D[236][j];
                }
            D[237] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u979E\u979F\u97A1\u97A2\u97A4\u97A5\u97A6\u97A7\u97A8\u97A9\u97AA\u97AC\u97AE\u97B0\u97B1\u97B3\u97B5\u97B6\u97B7\u97B8\u97B9\u97BA\u97BB\u97BC\u97BD\u97BE\u97BF\u97C0\u97C1\u97C2\u97C3\u97C4\u97C5\u97C6\u97C7\u97C8\u97C9\u97CA\u97CB\u97CC\u97CD\u97CE\u97CF\u97D0\u97D1\u97D2\u97D3\u97D4\u97D5\u97D6\u97D7\u97D8\u97D9\u97DA\u97DB\u97DC\u97DD\u97DE\u97DF\u97E0\u97E1\u97E2\u97E3\uFFFD\u97E4\u97E5\u97E8\u97EE\u97EF\u97F0\u97F1\u97F2\u97F4\u97F7\u97F8\u97F9\u97FA\u97FB\u97FC\u97FD\u97FE\u97FF\u9800\u9801\u9802\u9803\u9804\u9805\u9806\u9807\u9808\u9809\u980A\u980B\u980C\u980D\u980E\u603C\u605D\u605A\u6067\u6041\u6059\u6063\u60AB\u6106\u610D\u615D\u61A9\u619D\u61CB\u61D1\u6206\u8080\u807F\u6C93\u6CF6\u6DFC\u77F6\u77F8\u7800\u7809\u7817\u7818\u7811\u65AB\u782D\u781C\u781D\u7839\u783A\u783B\u781F\u783C\u7825\u782C\u7823\u7829\u784E\u786D\u7856\u7857\u7826\u7850\u7847\u784C\u786A\u789B\u7893\u789A\u7887\u789C\u78A1\u78A3\u78B2\u78B9\u78A5\u78D4\u78D9\u78C9\u78EC\u78F2\u7905\u78F4\u7913\u7924\u791E\u7934\u9F9B\u9EF9\u9EFB\u9EFC\u76F1\u7704\u770D\u76F9\u7707\u7708\u771A\u7722\u7719\u772D\u7726\u7735\u7738\u7750\u7751\u7747\u7743\u775A\u7768\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[237].length; ++j)
                if (D[237][j].charCodeAt(0) !== 65533) {
                    e2[D[237][j]] = 60672 + j;
                    d[60672 + j] = D[237][j];
                }
            D[238] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u980F\u9810\u9811\u9812\u9813\u9814\u9815\u9816\u9817\u9818\u9819\u981A\u981B\u981C\u981D\u981E\u981F\u9820\u9821\u9822\u9823\u9824\u9825\u9826\u9827\u9828\u9829\u982A\u982B\u982C\u982D\u982E\u982F\u9830\u9831\u9832\u9833\u9834\u9835\u9836\u9837\u9838\u9839\u983A\u983B\u983C\u983D\u983E\u983F\u9840\u9841\u9842\u9843\u9844\u9845\u9846\u9847\u9848\u9849\u984A\u984B\u984C\u984D\uFFFD\u984E\u984F\u9850\u9851\u9852\u9853\u9854\u9855\u9856\u9857\u9858\u9859\u985A\u985B\u985C\u985D\u985E\u985F\u9860\u9861\u9862\u9863\u9864\u9865\u9866\u9867\u9868\u9869\u986A\u986B\u986C\u986D\u986E\u7762\u7765\u777F\u778D\u777D\u7780\u778C\u7791\u779F\u77A0\u77B0\u77B5\u77BD\u753A\u7540\u754E\u754B\u7548\u755B\u7572\u7579\u7583\u7F58\u7F61\u7F5F\u8A48\u7F68\u7F74\u7F71\u7F79\u7F81\u7F7E\u76CD\u76E5\u8832\u9485\u9486\u9487\u948B\u948A\u948C\u948D\u948F\u9490\u9494\u9497\u9495\u949A\u949B\u949C\u94A3\u94A4\u94AB\u94AA\u94AD\u94AC\u94AF\u94B0\u94B2\u94B4\u94B6\u94B7\u94B8\u94B9\u94BA\u94BC\u94BD\u94BF\u94C4\u94C8\u94C9\u94CA\u94CB\u94CC\u94CD\u94CE\u94D0\u94D1\u94D2\u94D5\u94D6\u94D7\u94D9\u94D8\u94DB\u94DE\u94DF\u94E0\u94E2\u94E4\u94E5\u94E7\u94E8\u94EA\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[238].length; ++j)
                if (D[238][j].charCodeAt(0) !== 65533) {
                    e2[D[238][j]] = 60928 + j;
                    d[60928 + j] = D[238][j];
                }
            D[239] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u986F\u9870\u9871\u9872\u9873\u9874\u988B\u988E\u9892\u9895\u9899\u98A3\u98A8\u98A9\u98AA\u98AB\u98AC\u98AD\u98AE\u98AF\u98B0\u98B1\u98B2\u98B3\u98B4\u98B5\u98B6\u98B7\u98B8\u98B9\u98BA\u98BB\u98BC\u98BD\u98BE\u98BF\u98C0\u98C1\u98C2\u98C3\u98C4\u98C5\u98C6\u98C7\u98C8\u98C9\u98CA\u98CB\u98CC\u98CD\u98CF\u98D0\u98D4\u98D6\u98D7\u98DB\u98DC\u98DD\u98E0\u98E1\u98E2\u98E3\u98E4\uFFFD\u98E5\u98E6\u98E9\u98EA\u98EB\u98EC\u98ED\u98EE\u98EF\u98F0\u98F1\u98F2\u98F3\u98F4\u98F5\u98F6\u98F7\u98F8\u98F9\u98FA\u98FB\u98FC\u98FD\u98FE\u98FF\u9900\u9901\u9902\u9903\u9904\u9905\u9906\u9907\u94E9\u94EB\u94EE\u94EF\u94F3\u94F4\u94F5\u94F7\u94F9\u94FC\u94FD\u94FF\u9503\u9502\u9506\u9507\u9509\u950A\u950D\u950E\u950F\u9512\u9513\u9514\u9515\u9516\u9518\u951B\u951D\u951E\u951F\u9522\u952A\u952B\u9529\u952C\u9531\u9532\u9534\u9536\u9537\u9538\u953C\u953E\u953F\u9542\u9535\u9544\u9545\u9546\u9549\u954C\u954E\u954F\u9552\u9553\u9554\u9556\u9557\u9558\u9559\u955B\u955E\u955F\u955D\u9561\u9562\u9564\u9565\u9566\u9567\u9568\u9569\u956A\u956B\u956C\u956F\u9571\u9572\u9573\u953A\u77E7\u77EC\u96C9\u79D5\u79ED\u79E3\u79EB\u7A06\u5D47\u7A03\u7A02\u7A1E\u7A14\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[239].length; ++j)
                if (D[239][j].charCodeAt(0) !== 65533) {
                    e2[D[239][j]] = 61184 + j;
                    d[61184 + j] = D[239][j];
                }
            D[240] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9908\u9909\u990A\u990B\u990C\u990E\u990F\u9911\u9912\u9913\u9914\u9915\u9916\u9917\u9918\u9919\u991A\u991B\u991C\u991D\u991E\u991F\u9920\u9921\u9922\u9923\u9924\u9925\u9926\u9927\u9928\u9929\u992A\u992B\u992C\u992D\u992F\u9930\u9931\u9932\u9933\u9934\u9935\u9936\u9937\u9938\u9939\u993A\u993B\u993C\u993D\u993E\u993F\u9940\u9941\u9942\u9943\u9944\u9945\u9946\u9947\u9948\u9949\uFFFD\u994A\u994B\u994C\u994D\u994E\u994F\u9950\u9951\u9952\u9953\u9956\u9957\u9958\u9959\u995A\u995B\u995C\u995D\u995E\u995F\u9960\u9961\u9962\u9964\u9966\u9973\u9978\u9979\u997B\u997E\u9982\u9983\u9989\u7A39\u7A37\u7A51\u9ECF\u99A5\u7A70\u7688\u768E\u7693\u7699\u76A4\u74DE\u74E0\u752C\u9E20\u9E22\u9E28\u9E29\u9E2A\u9E2B\u9E2C\u9E32\u9E31\u9E36\u9E38\u9E37\u9E39\u9E3A\u9E3E\u9E41\u9E42\u9E44\u9E46\u9E47\u9E48\u9E49\u9E4B\u9E4C\u9E4E\u9E51\u9E55\u9E57\u9E5A\u9E5B\u9E5C\u9E5E\u9E63\u9E66\u9E67\u9E68\u9E69\u9E6A\u9E6B\u9E6C\u9E71\u9E6D\u9E73\u7592\u7594\u7596\u75A0\u759D\u75AC\u75A3\u75B3\u75B4\u75B8\u75C4\u75B1\u75B0\u75C3\u75C2\u75D6\u75CD\u75E3\u75E8\u75E6\u75E4\u75EB\u75E7\u7603\u75F1\u75FC\u75FF\u7610\u7600\u7605\u760C\u7617\u760A\u7625\u7618\u7615\u7619\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[240].length; ++j)
                if (D[240][j].charCodeAt(0) !== 65533) {
                    e2[D[240][j]] = 61440 + j;
                    d[61440 + j] = D[240][j];
                }
            D[241] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u998C\u998E\u999A\u999B\u999C\u999D\u999E\u999F\u99A0\u99A1\u99A2\u99A3\u99A4\u99A6\u99A7\u99A9\u99AA\u99AB\u99AC\u99AD\u99AE\u99AF\u99B0\u99B1\u99B2\u99B3\u99B4\u99B5\u99B6\u99B7\u99B8\u99B9\u99BA\u99BB\u99BC\u99BD\u99BE\u99BF\u99C0\u99C1\u99C2\u99C3\u99C4\u99C5\u99C6\u99C7\u99C8\u99C9\u99CA\u99CB\u99CC\u99CD\u99CE\u99CF\u99D0\u99D1\u99D2\u99D3\u99D4\u99D5\u99D6\u99D7\u99D8\uFFFD\u99D9\u99DA\u99DB\u99DC\u99DD\u99DE\u99DF\u99E0\u99E1\u99E2\u99E3\u99E4\u99E5\u99E6\u99E7\u99E8\u99E9\u99EA\u99EB\u99EC\u99ED\u99EE\u99EF\u99F0\u99F1\u99F2\u99F3\u99F4\u99F5\u99F6\u99F7\u99F8\u99F9\u761B\u763C\u7622\u7620\u7640\u762D\u7630\u763F\u7635\u7643\u763E\u7633\u764D\u765E\u7654\u765C\u7656\u766B\u766F\u7FCA\u7AE6\u7A78\u7A79\u7A80\u7A86\u7A88\u7A95\u7AA6\u7AA0\u7AAC\u7AA8\u7AAD\u7AB3\u8864\u8869\u8872\u887D\u887F\u8882\u88A2\u88C6\u88B7\u88BC\u88C9\u88E2\u88CE\u88E3\u88E5\u88F1\u891A\u88FC\u88E8\u88FE\u88F0\u8921\u8919\u8913\u891B\u890A\u8934\u892B\u8936\u8941\u8966\u897B\u758B\u80E5\u76B2\u76B4\u77DC\u8012\u8014\u8016\u801C\u8020\u8022\u8025\u8026\u8027\u8029\u8028\u8031\u800B\u8035\u8043\u8046\u804D\u8052\u8069\u8071\u8983\u9878\u9880\u9883\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[241].length; ++j)
                if (D[241][j].charCodeAt(0) !== 65533) {
                    e2[D[241][j]] = 61696 + j;
                    d[61696 + j] = D[241][j];
                }
            D[242] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u99FA\u99FB\u99FC\u99FD\u99FE\u99FF\u9A00\u9A01\u9A02\u9A03\u9A04\u9A05\u9A06\u9A07\u9A08\u9A09\u9A0A\u9A0B\u9A0C\u9A0D\u9A0E\u9A0F\u9A10\u9A11\u9A12\u9A13\u9A14\u9A15\u9A16\u9A17\u9A18\u9A19\u9A1A\u9A1B\u9A1C\u9A1D\u9A1E\u9A1F\u9A20\u9A21\u9A22\u9A23\u9A24\u9A25\u9A26\u9A27\u9A28\u9A29\u9A2A\u9A2B\u9A2C\u9A2D\u9A2E\u9A2F\u9A30\u9A31\u9A32\u9A33\u9A34\u9A35\u9A36\u9A37\u9A38\uFFFD\u9A39\u9A3A\u9A3B\u9A3C\u9A3D\u9A3E\u9A3F\u9A40\u9A41\u9A42\u9A43\u9A44\u9A45\u9A46\u9A47\u9A48\u9A49\u9A4A\u9A4B\u9A4C\u9A4D\u9A4E\u9A4F\u9A50\u9A51\u9A52\u9A53\u9A54\u9A55\u9A56\u9A57\u9A58\u9A59\u9889\u988C\u988D\u988F\u9894\u989A\u989B\u989E\u989F\u98A1\u98A2\u98A5\u98A6\u864D\u8654\u866C\u866E\u867F\u867A\u867C\u867B\u86A8\u868D\u868B\u86AC\u869D\u86A7\u86A3\u86AA\u8693\u86A9\u86B6\u86C4\u86B5\u86CE\u86B0\u86BA\u86B1\u86AF\u86C9\u86CF\u86B4\u86E9\u86F1\u86F2\u86ED\u86F3\u86D0\u8713\u86DE\u86F4\u86DF\u86D8\u86D1\u8703\u8707\u86F8\u8708\u870A\u870D\u8709\u8723\u873B\u871E\u8725\u872E\u871A\u873E\u8748\u8734\u8731\u8729\u8737\u873F\u8782\u8722\u877D\u877E\u877B\u8760\u8770\u874C\u876E\u878B\u8753\u8763\u877C\u8764\u8759\u8765\u8793\u87AF\u87A8\u87D2\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[242].length; ++j)
                if (D[242][j].charCodeAt(0) !== 65533) {
                    e2[D[242][j]] = 61952 + j;
                    d[61952 + j] = D[242][j];
                }
            D[243] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9A5A\u9A5B\u9A5C\u9A5D\u9A5E\u9A5F\u9A60\u9A61\u9A62\u9A63\u9A64\u9A65\u9A66\u9A67\u9A68\u9A69\u9A6A\u9A6B\u9A72\u9A83\u9A89\u9A8D\u9A8E\u9A94\u9A95\u9A99\u9AA6\u9AA9\u9AAA\u9AAB\u9AAC\u9AAD\u9AAE\u9AAF\u9AB2\u9AB3\u9AB4\u9AB5\u9AB9\u9ABB\u9ABD\u9ABE\u9ABF\u9AC3\u9AC4\u9AC6\u9AC7\u9AC8\u9AC9\u9ACA\u9ACD\u9ACE\u9ACF\u9AD0\u9AD2\u9AD4\u9AD5\u9AD6\u9AD7\u9AD9\u9ADA\u9ADB\u9ADC\uFFFD\u9ADD\u9ADE\u9AE0\u9AE2\u9AE3\u9AE4\u9AE5\u9AE7\u9AE8\u9AE9\u9AEA\u9AEC\u9AEE\u9AF0\u9AF1\u9AF2\u9AF3\u9AF4\u9AF5\u9AF6\u9AF7\u9AF8\u9AFA\u9AFC\u9AFD\u9AFE\u9AFF\u9B00\u9B01\u9B02\u9B04\u9B05\u9B06\u87C6\u8788\u8785\u87AD\u8797\u8783\u87AB\u87E5\u87AC\u87B5\u87B3\u87CB\u87D3\u87BD\u87D1\u87C0\u87CA\u87DB\u87EA\u87E0\u87EE\u8816\u8813\u87FE\u880A\u881B\u8821\u8839\u883C\u7F36\u7F42\u7F44\u7F45\u8210\u7AFA\u7AFD\u7B08\u7B03\u7B04\u7B15\u7B0A\u7B2B\u7B0F\u7B47\u7B38\u7B2A\u7B19\u7B2E\u7B31\u7B20\u7B25\u7B24\u7B33\u7B3E\u7B1E\u7B58\u7B5A\u7B45\u7B75\u7B4C\u7B5D\u7B60\u7B6E\u7B7B\u7B62\u7B72\u7B71\u7B90\u7BA6\u7BA7\u7BB8\u7BAC\u7B9D\u7BA8\u7B85\u7BAA\u7B9C\u7BA2\u7BAB\u7BB4\u7BD1\u7BC1\u7BCC\u7BDD\u7BDA\u7BE5\u7BE6\u7BEA\u7C0C\u7BFE\u7BFC\u7C0F\u7C16\u7C0B\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[243].length; ++j)
                if (D[243][j].charCodeAt(0) !== 65533) {
                    e2[D[243][j]] = 62208 + j;
                    d[62208 + j] = D[243][j];
                }
            D[244] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9B07\u9B09\u9B0A\u9B0B\u9B0C\u9B0D\u9B0E\u9B10\u9B11\u9B12\u9B14\u9B15\u9B16\u9B17\u9B18\u9B19\u9B1A\u9B1B\u9B1C\u9B1D\u9B1E\u9B20\u9B21\u9B22\u9B24\u9B25\u9B26\u9B27\u9B28\u9B29\u9B2A\u9B2B\u9B2C\u9B2D\u9B2E\u9B30\u9B31\u9B33\u9B34\u9B35\u9B36\u9B37\u9B38\u9B39\u9B3A\u9B3D\u9B3E\u9B3F\u9B40\u9B46\u9B4A\u9B4B\u9B4C\u9B4E\u9B50\u9B52\u9B53\u9B55\u9B56\u9B57\u9B58\u9B59\u9B5A\uFFFD\u9B5B\u9B5C\u9B5D\u9B5E\u9B5F\u9B60\u9B61\u9B62\u9B63\u9B64\u9B65\u9B66\u9B67\u9B68\u9B69\u9B6A\u9B6B\u9B6C\u9B6D\u9B6E\u9B6F\u9B70\u9B71\u9B72\u9B73\u9B74\u9B75\u9B76\u9B77\u9B78\u9B79\u9B7A\u9B7B\u7C1F\u7C2A\u7C26\u7C38\u7C41\u7C40\u81FE\u8201\u8202\u8204\u81EC\u8844\u8221\u8222\u8223\u822D\u822F\u8228\u822B\u8238\u823B\u8233\u8234\u823E\u8244\u8249\u824B\u824F\u825A\u825F\u8268\u887E\u8885\u8888\u88D8\u88DF\u895E\u7F9D\u7F9F\u7FA7\u7FAF\u7FB0\u7FB2\u7C7C\u6549\u7C91\u7C9D\u7C9C\u7C9E\u7CA2\u7CB2\u7CBC\u7CBD\u7CC1\u7CC7\u7CCC\u7CCD\u7CC8\u7CC5\u7CD7\u7CE8\u826E\u66A8\u7FBF\u7FCE\u7FD5\u7FE5\u7FE1\u7FE6\u7FE9\u7FEE\u7FF3\u7CF8\u7D77\u7DA6\u7DAE\u7E47\u7E9B\u9EB8\u9EB4\u8D73\u8D84\u8D94\u8D91\u8DB1\u8D67\u8D6D\u8C47\u8C49\u914A\u9150\u914E\u914F\u9164\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[244].length; ++j)
                if (D[244][j].charCodeAt(0) !== 65533) {
                    e2[D[244][j]] = 62464 + j;
                    d[62464 + j] = D[244][j];
                }
            D[245] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9B7C\u9B7D\u9B7E\u9B7F\u9B80\u9B81\u9B82\u9B83\u9B84\u9B85\u9B86\u9B87\u9B88\u9B89\u9B8A\u9B8B\u9B8C\u9B8D\u9B8E\u9B8F\u9B90\u9B91\u9B92\u9B93\u9B94\u9B95\u9B96\u9B97\u9B98\u9B99\u9B9A\u9B9B\u9B9C\u9B9D\u9B9E\u9B9F\u9BA0\u9BA1\u9BA2\u9BA3\u9BA4\u9BA5\u9BA6\u9BA7\u9BA8\u9BA9\u9BAA\u9BAB\u9BAC\u9BAD\u9BAE\u9BAF\u9BB0\u9BB1\u9BB2\u9BB3\u9BB4\u9BB5\u9BB6\u9BB7\u9BB8\u9BB9\u9BBA\uFFFD\u9BBB\u9BBC\u9BBD\u9BBE\u9BBF\u9BC0\u9BC1\u9BC2\u9BC3\u9BC4\u9BC5\u9BC6\u9BC7\u9BC8\u9BC9\u9BCA\u9BCB\u9BCC\u9BCD\u9BCE\u9BCF\u9BD0\u9BD1\u9BD2\u9BD3\u9BD4\u9BD5\u9BD6\u9BD7\u9BD8\u9BD9\u9BDA\u9BDB\u9162\u9161\u9170\u9169\u916F\u917D\u917E\u9172\u9174\u9179\u918C\u9185\u9190\u918D\u9191\u91A2\u91A3\u91AA\u91AD\u91AE\u91AF\u91B5\u91B4\u91BA\u8C55\u9E7E\u8DB8\u8DEB\u8E05\u8E59\u8E69\u8DB5\u8DBF\u8DBC\u8DBA\u8DC4\u8DD6\u8DD7\u8DDA\u8DDE\u8DCE\u8DCF\u8DDB\u8DC6\u8DEC\u8DF7\u8DF8\u8DE3\u8DF9\u8DFB\u8DE4\u8E09\u8DFD\u8E14\u8E1D\u8E1F\u8E2C\u8E2E\u8E23\u8E2F\u8E3A\u8E40\u8E39\u8E35\u8E3D\u8E31\u8E49\u8E41\u8E42\u8E51\u8E52\u8E4A\u8E70\u8E76\u8E7C\u8E6F\u8E74\u8E85\u8E8F\u8E94\u8E90\u8E9C\u8E9E\u8C78\u8C82\u8C8A\u8C85\u8C98\u8C94\u659B\u89D6\u89DE\u89DA\u89DC\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[245].length; ++j)
                if (D[245][j].charCodeAt(0) !== 65533) {
                    e2[D[245][j]] = 62720 + j;
                    d[62720 + j] = D[245][j];
                }
            D[246] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9BDC\u9BDD\u9BDE\u9BDF\u9BE0\u9BE1\u9BE2\u9BE3\u9BE4\u9BE5\u9BE6\u9BE7\u9BE8\u9BE9\u9BEA\u9BEB\u9BEC\u9BED\u9BEE\u9BEF\u9BF0\u9BF1\u9BF2\u9BF3\u9BF4\u9BF5\u9BF6\u9BF7\u9BF8\u9BF9\u9BFA\u9BFB\u9BFC\u9BFD\u9BFE\u9BFF\u9C00\u9C01\u9C02\u9C03\u9C04\u9C05\u9C06\u9C07\u9C08\u9C09\u9C0A\u9C0B\u9C0C\u9C0D\u9C0E\u9C0F\u9C10\u9C11\u9C12\u9C13\u9C14\u9C15\u9C16\u9C17\u9C18\u9C19\u9C1A\uFFFD\u9C1B\u9C1C\u9C1D\u9C1E\u9C1F\u9C20\u9C21\u9C22\u9C23\u9C24\u9C25\u9C26\u9C27\u9C28\u9C29\u9C2A\u9C2B\u9C2C\u9C2D\u9C2E\u9C2F\u9C30\u9C31\u9C32\u9C33\u9C34\u9C35\u9C36\u9C37\u9C38\u9C39\u9C3A\u9C3B\u89E5\u89EB\u89EF\u8A3E\u8B26\u9753\u96E9\u96F3\u96EF\u9706\u9701\u9708\u970F\u970E\u972A\u972D\u9730\u973E\u9F80\u9F83\u9F85\u9F86\u9F87\u9F88\u9F89\u9F8A\u9F8C\u9EFE\u9F0B\u9F0D\u96B9\u96BC\u96BD\u96CE\u96D2\u77BF\u96E0\u928E\u92AE\u92C8\u933E\u936A\u93CA\u938F\u943E\u946B\u9C7F\u9C82\u9C85\u9C86\u9C87\u9C88\u7A23\u9C8B\u9C8E\u9C90\u9C91\u9C92\u9C94\u9C95\u9C9A\u9C9B\u9C9E\u9C9F\u9CA0\u9CA1\u9CA2\u9CA3\u9CA5\u9CA6\u9CA7\u9CA8\u9CA9\u9CAB\u9CAD\u9CAE\u9CB0\u9CB1\u9CB2\u9CB3\u9CB4\u9CB5\u9CB6\u9CB7\u9CBA\u9CBB\u9CBC\u9CBD\u9CC4\u9CC5\u9CC6\u9CC7\u9CCA\u9CCB\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[246].length; ++j)
                if (D[246][j].charCodeAt(0) !== 65533) {
                    e2[D[246][j]] = 62976 + j;
                    d[62976 + j] = D[246][j];
                }
            D[247] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9C3C\u9C3D\u9C3E\u9C3F\u9C40\u9C41\u9C42\u9C43\u9C44\u9C45\u9C46\u9C47\u9C48\u9C49\u9C4A\u9C4B\u9C4C\u9C4D\u9C4E\u9C4F\u9C50\u9C51\u9C52\u9C53\u9C54\u9C55\u9C56\u9C57\u9C58\u9C59\u9C5A\u9C5B\u9C5C\u9C5D\u9C5E\u9C5F\u9C60\u9C61\u9C62\u9C63\u9C64\u9C65\u9C66\u9C67\u9C68\u9C69\u9C6A\u9C6B\u9C6C\u9C6D\u9C6E\u9C6F\u9C70\u9C71\u9C72\u9C73\u9C74\u9C75\u9C76\u9C77\u9C78\u9C79\u9C7A\uFFFD\u9C7B\u9C7D\u9C7E\u9C80\u9C83\u9C84\u9C89\u9C8A\u9C8C\u9C8F\u9C93\u9C96\u9C97\u9C98\u9C99\u9C9D\u9CAA\u9CAC\u9CAF\u9CB9\u9CBE\u9CBF\u9CC0\u9CC1\u9CC2\u9CC8\u9CC9\u9CD1\u9CD2\u9CDA\u9CDB\u9CE0\u9CE1\u9CCC\u9CCD\u9CCE\u9CCF\u9CD0\u9CD3\u9CD4\u9CD5\u9CD7\u9CD8\u9CD9\u9CDC\u9CDD\u9CDF\u9CE2\u977C\u9785\u9791\u9792\u9794\u97AF\u97AB\u97A3\u97B2\u97B4\u9AB1\u9AB0\u9AB7\u9E58\u9AB6\u9ABA\u9ABC\u9AC1\u9AC0\u9AC5\u9AC2\u9ACB\u9ACC\u9AD1\u9B45\u9B43\u9B47\u9B49\u9B48\u9B4D\u9B51\u98E8\u990D\u992E\u9955\u9954\u9ADF\u9AE1\u9AE6\u9AEF\u9AEB\u9AFB\u9AED\u9AF9\u9B08\u9B0F\u9B13\u9B1F\u9B23\u9EBD\u9EBE\u7E3B\u9E82\u9E87\u9E88\u9E8B\u9E92\u93D6\u9E9D\u9E9F\u9EDB\u9EDC\u9EDD\u9EE0\u9EDF\u9EE2\u9EE9\u9EE7\u9EE5\u9EEA\u9EEF\u9F22\u9F2C\u9F2F\u9F39\u9F37\u9F3D\u9F3E\u9F44\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[247].length; ++j)
                if (D[247][j].charCodeAt(0) !== 65533) {
                    e2[D[247][j]] = 63232 + j;
                    d[63232 + j] = D[247][j];
                }
            D[248] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9CE3\u9CE4\u9CE5\u9CE6\u9CE7\u9CE8\u9CE9\u9CEA\u9CEB\u9CEC\u9CED\u9CEE\u9CEF\u9CF0\u9CF1\u9CF2\u9CF3\u9CF4\u9CF5\u9CF6\u9CF7\u9CF8\u9CF9\u9CFA\u9CFB\u9CFC\u9CFD\u9CFE\u9CFF\u9D00\u9D01\u9D02\u9D03\u9D04\u9D05\u9D06\u9D07\u9D08\u9D09\u9D0A\u9D0B\u9D0C\u9D0D\u9D0E\u9D0F\u9D10\u9D11\u9D12\u9D13\u9D14\u9D15\u9D16\u9D17\u9D18\u9D19\u9D1A\u9D1B\u9D1C\u9D1D\u9D1E\u9D1F\u9D20\u9D21\uFFFD\u9D22\u9D23\u9D24\u9D25\u9D26\u9D27\u9D28\u9D29\u9D2A\u9D2B\u9D2C\u9D2D\u9D2E\u9D2F\u9D30\u9D31\u9D32\u9D33\u9D34\u9D35\u9D36\u9D37\u9D38\u9D39\u9D3A\u9D3B\u9D3C\u9D3D\u9D3E\u9D3F\u9D40\u9D41\u9D42\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[248].length; ++j)
                if (D[248][j].charCodeAt(0) !== 65533) {
                    e2[D[248][j]] = 63488 + j;
                    d[63488 + j] = D[248][j];
                }
            D[249] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9D43\u9D44\u9D45\u9D46\u9D47\u9D48\u9D49\u9D4A\u9D4B\u9D4C\u9D4D\u9D4E\u9D4F\u9D50\u9D51\u9D52\u9D53\u9D54\u9D55\u9D56\u9D57\u9D58\u9D59\u9D5A\u9D5B\u9D5C\u9D5D\u9D5E\u9D5F\u9D60\u9D61\u9D62\u9D63\u9D64\u9D65\u9D66\u9D67\u9D68\u9D69\u9D6A\u9D6B\u9D6C\u9D6D\u9D6E\u9D6F\u9D70\u9D71\u9D72\u9D73\u9D74\u9D75\u9D76\u9D77\u9D78\u9D79\u9D7A\u9D7B\u9D7C\u9D7D\u9D7E\u9D7F\u9D80\u9D81\uFFFD\u9D82\u9D83\u9D84\u9D85\u9D86\u9D87\u9D88\u9D89\u9D8A\u9D8B\u9D8C\u9D8D\u9D8E\u9D8F\u9D90\u9D91\u9D92\u9D93\u9D94\u9D95\u9D96\u9D97\u9D98\u9D99\u9D9A\u9D9B\u9D9C\u9D9D\u9D9E\u9D9F\u9DA0\u9DA1\u9DA2\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[249].length; ++j)
                if (D[249][j].charCodeAt(0) !== 65533) {
                    e2[D[249][j]] = 63744 + j;
                    d[63744 + j] = D[249][j];
                }
            D[250] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9DA3\u9DA4\u9DA5\u9DA6\u9DA7\u9DA8\u9DA9\u9DAA\u9DAB\u9DAC\u9DAD\u9DAE\u9DAF\u9DB0\u9DB1\u9DB2\u9DB3\u9DB4\u9DB5\u9DB6\u9DB7\u9DB8\u9DB9\u9DBA\u9DBB\u9DBC\u9DBD\u9DBE\u9DBF\u9DC0\u9DC1\u9DC2\u9DC3\u9DC4\u9DC5\u9DC6\u9DC7\u9DC8\u9DC9\u9DCA\u9DCB\u9DCC\u9DCD\u9DCE\u9DCF\u9DD0\u9DD1\u9DD2\u9DD3\u9DD4\u9DD5\u9DD6\u9DD7\u9DD8\u9DD9\u9DDA\u9DDB\u9DDC\u9DDD\u9DDE\u9DDF\u9DE0\u9DE1\uFFFD\u9DE2\u9DE3\u9DE4\u9DE5\u9DE6\u9DE7\u9DE8\u9DE9\u9DEA\u9DEB\u9DEC\u9DED\u9DEE\u9DEF\u9DF0\u9DF1\u9DF2\u9DF3\u9DF4\u9DF5\u9DF6\u9DF7\u9DF8\u9DF9\u9DFA\u9DFB\u9DFC\u9DFD\u9DFE\u9DFF\u9E00\u9E01\u9E02\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[250].length; ++j)
                if (D[250][j].charCodeAt(0) !== 65533) {
                    e2[D[250][j]] = 64e3 + j;
                    d[64e3 + j] = D[250][j];
                }
            D[251] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9E03\u9E04\u9E05\u9E06\u9E07\u9E08\u9E09\u9E0A\u9E0B\u9E0C\u9E0D\u9E0E\u9E0F\u9E10\u9E11\u9E12\u9E13\u9E14\u9E15\u9E16\u9E17\u9E18\u9E19\u9E1A\u9E1B\u9E1C\u9E1D\u9E1E\u9E24\u9E27\u9E2E\u9E30\u9E34\u9E3B\u9E3C\u9E40\u9E4D\u9E50\u9E52\u9E53\u9E54\u9E56\u9E59\u9E5D\u9E5F\u9E60\u9E61\u9E62\u9E65\u9E6E\u9E6F\u9E72\u9E74\u9E75\u9E76\u9E77\u9E78\u9E79\u9E7A\u9E7B\u9E7C\u9E7D\u9E80\uFFFD\u9E81\u9E83\u9E84\u9E85\u9E86\u9E89\u9E8A\u9E8C\u9E8D\u9E8E\u9E8F\u9E90\u9E91\u9E94\u9E95\u9E96\u9E97\u9E98\u9E99\u9E9A\u9E9B\u9E9C\u9E9E\u9EA0\u9EA1\u9EA2\u9EA3\u9EA4\u9EA5\u9EA7\u9EA8\u9EA9\u9EAA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[251].length; ++j)
                if (D[251][j].charCodeAt(0) !== 65533) {
                    e2[D[251][j]] = 64256 + j;
                    d[64256 + j] = D[251][j];
                }
            D[252] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9EAB\u9EAC\u9EAD\u9EAE\u9EAF\u9EB0\u9EB1\u9EB2\u9EB3\u9EB5\u9EB6\u9EB7\u9EB9\u9EBA\u9EBC\u9EBF\u9EC0\u9EC1\u9EC2\u9EC3\u9EC5\u9EC6\u9EC7\u9EC8\u9ECA\u9ECB\u9ECC\u9ED0\u9ED2\u9ED3\u9ED5\u9ED6\u9ED7\u9ED9\u9EDA\u9EDE\u9EE1\u9EE3\u9EE4\u9EE6\u9EE8\u9EEB\u9EEC\u9EED\u9EEE\u9EF0\u9EF1\u9EF2\u9EF3\u9EF4\u9EF5\u9EF6\u9EF7\u9EF8\u9EFA\u9EFD\u9EFF\u9F00\u9F01\u9F02\u9F03\u9F04\u9F05\uFFFD\u9F06\u9F07\u9F08\u9F09\u9F0A\u9F0C\u9F0F\u9F11\u9F12\u9F14\u9F15\u9F16\u9F18\u9F1A\u9F1B\u9F1C\u9F1D\u9F1E\u9F1F\u9F21\u9F23\u9F24\u9F25\u9F26\u9F27\u9F28\u9F29\u9F2A\u9F2B\u9F2D\u9F2E\u9F30\u9F31\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[252].length; ++j)
                if (D[252][j].charCodeAt(0) !== 65533) {
                    e2[D[252][j]] = 64512 + j;
                    d[64512 + j] = D[252][j];
                }
            D[253] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9F32\u9F33\u9F34\u9F35\u9F36\u9F38\u9F3A\u9F3C\u9F3F\u9F40\u9F41\u9F42\u9F43\u9F45\u9F46\u9F47\u9F48\u9F49\u9F4A\u9F4B\u9F4C\u9F4D\u9F4E\u9F4F\u9F52\u9F53\u9F54\u9F55\u9F56\u9F57\u9F58\u9F59\u9F5A\u9F5B\u9F5C\u9F5D\u9F5E\u9F5F\u9F60\u9F61\u9F62\u9F63\u9F64\u9F65\u9F66\u9F67\u9F68\u9F69\u9F6A\u9F6B\u9F6C\u9F6D\u9F6E\u9F6F\u9F70\u9F71\u9F72\u9F73\u9F74\u9F75\u9F76\u9F77\u9F78\uFFFD\u9F79\u9F7A\u9F7B\u9F7C\u9F7D\u9F7E\u9F81\u9F82\u9F8D\u9F8E\u9F8F\u9F90\u9F91\u9F92\u9F93\u9F94\u9F95\u9F96\u9F97\u9F98\u9F9C\u9F9D\u9F9E\u9FA1\u9FA2\u9FA3\u9FA4\u9FA5\uF92C\uF979\uF995\uF9E7\uF9F1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[253].length; ++j)
                if (D[253][j].charCodeAt(0) !== 65533) {
                    e2[D[253][j]] = 64768 + j;
                    d[64768 + j] = D[253][j];
                }
            D[254] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFA0C\uFA0D\uFA0E\uFA0F\uFA11\uFA13\uFA14\uFA18\uFA1F\uFA20\uFA21\uFA23\uFA24\uFA27\uFA28\uFA29\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[254].length; ++j)
                if (D[254][j].charCodeAt(0) !== 65533) {
                    e2[D[254][j]] = 65024 + j;
                    d[65024 + j] = D[254][j];
                }
            return { enc: e2, dec: d };
        })();
        cptable2[949] = (function () {
            var d = [],
                e2 = {},
                D = [],
                j;
            D[0] =
                '\0\x07\b	\n\v\f\r\x1B !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[0].length; ++j)
                if (D[0][j].charCodeAt(0) !== 65533) {
                    e2[D[0][j]] = 0 + j;
                    d[0 + j] = D[0][j];
                }
            D[129] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAC02\uAC03\uAC05\uAC06\uAC0B\uAC0C\uAC0D\uAC0E\uAC0F\uAC18\uAC1E\uAC1F\uAC21\uAC22\uAC23\uAC25\uAC26\uAC27\uAC28\uAC29\uAC2A\uAC2B\uAC2E\uAC32\uAC33\uAC34\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAC35\uAC36\uAC37\uAC3A\uAC3B\uAC3D\uAC3E\uAC3F\uAC41\uAC42\uAC43\uAC44\uAC45\uAC46\uAC47\uAC48\uAC49\uAC4A\uAC4C\uAC4E\uAC4F\uAC50\uAC51\uAC52\uAC53\uAC55\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAC56\uAC57\uAC59\uAC5A\uAC5B\uAC5D\uAC5E\uAC5F\uAC60\uAC61\uAC62\uAC63\uAC64\uAC65\uAC66\uAC67\uAC68\uAC69\uAC6A\uAC6B\uAC6C\uAC6D\uAC6E\uAC6F\uAC72\uAC73\uAC75\uAC76\uAC79\uAC7B\uAC7C\uAC7D\uAC7E\uAC7F\uAC82\uAC87\uAC88\uAC8D\uAC8E\uAC8F\uAC91\uAC92\uAC93\uAC95\uAC96\uAC97\uAC98\uAC99\uAC9A\uAC9B\uAC9E\uACA2\uACA3\uACA4\uACA5\uACA6\uACA7\uACAB\uACAD\uACAE\uACB1\uACB2\uACB3\uACB4\uACB5\uACB6\uACB7\uACBA\uACBE\uACBF\uACC0\uACC2\uACC3\uACC5\uACC6\uACC7\uACC9\uACCA\uACCB\uACCD\uACCE\uACCF\uACD0\uACD1\uACD2\uACD3\uACD4\uACD6\uACD8\uACD9\uACDA\uACDB\uACDC\uACDD\uACDE\uACDF\uACE2\uACE3\uACE5\uACE6\uACE9\uACEB\uACED\uACEE\uACF2\uACF4\uACF7\uACF8\uACF9\uACFA\uACFB\uACFE\uACFF\uAD01\uAD02\uAD03\uAD05\uAD07\uAD08\uAD09\uAD0A\uAD0B\uAD0E\uAD10\uAD12\uAD13\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[129].length; ++j)
                if (D[129][j].charCodeAt(0) !== 65533) {
                    e2[D[129][j]] = 33024 + j;
                    d[33024 + j] = D[129][j];
                }
            D[130] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAD14\uAD15\uAD16\uAD17\uAD19\uAD1A\uAD1B\uAD1D\uAD1E\uAD1F\uAD21\uAD22\uAD23\uAD24\uAD25\uAD26\uAD27\uAD28\uAD2A\uAD2B\uAD2E\uAD2F\uAD30\uAD31\uAD32\uAD33\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAD36\uAD37\uAD39\uAD3A\uAD3B\uAD3D\uAD3E\uAD3F\uAD40\uAD41\uAD42\uAD43\uAD46\uAD48\uAD4A\uAD4B\uAD4C\uAD4D\uAD4E\uAD4F\uAD51\uAD52\uAD53\uAD55\uAD56\uAD57\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAD59\uAD5A\uAD5B\uAD5C\uAD5D\uAD5E\uAD5F\uAD60\uAD62\uAD64\uAD65\uAD66\uAD67\uAD68\uAD69\uAD6A\uAD6B\uAD6E\uAD6F\uAD71\uAD72\uAD77\uAD78\uAD79\uAD7A\uAD7E\uAD80\uAD83\uAD84\uAD85\uAD86\uAD87\uAD8A\uAD8B\uAD8D\uAD8E\uAD8F\uAD91\uAD92\uAD93\uAD94\uAD95\uAD96\uAD97\uAD98\uAD99\uAD9A\uAD9B\uAD9E\uAD9F\uADA0\uADA1\uADA2\uADA3\uADA5\uADA6\uADA7\uADA8\uADA9\uADAA\uADAB\uADAC\uADAD\uADAE\uADAF\uADB0\uADB1\uADB2\uADB3\uADB4\uADB5\uADB6\uADB8\uADB9\uADBA\uADBB\uADBC\uADBD\uADBE\uADBF\uADC2\uADC3\uADC5\uADC6\uADC7\uADC9\uADCA\uADCB\uADCC\uADCD\uADCE\uADCF\uADD2\uADD4\uADD5\uADD6\uADD7\uADD8\uADD9\uADDA\uADDB\uADDD\uADDE\uADDF\uADE1\uADE2\uADE3\uADE5\uADE6\uADE7\uADE8\uADE9\uADEA\uADEB\uADEC\uADED\uADEE\uADEF\uADF0\uADF1\uADF2\uADF3\uADF4\uADF5\uADF6\uADF7\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[130].length; ++j)
                if (D[130][j].charCodeAt(0) !== 65533) {
                    e2[D[130][j]] = 33280 + j;
                    d[33280 + j] = D[130][j];
                }
            D[131] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uADFA\uADFB\uADFD\uADFE\uAE02\uAE03\uAE04\uAE05\uAE06\uAE07\uAE0A\uAE0C\uAE0E\uAE0F\uAE10\uAE11\uAE12\uAE13\uAE15\uAE16\uAE17\uAE18\uAE19\uAE1A\uAE1B\uAE1C\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAE1D\uAE1E\uAE1F\uAE20\uAE21\uAE22\uAE23\uAE24\uAE25\uAE26\uAE27\uAE28\uAE29\uAE2A\uAE2B\uAE2C\uAE2D\uAE2E\uAE2F\uAE32\uAE33\uAE35\uAE36\uAE39\uAE3B\uAE3C\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAE3D\uAE3E\uAE3F\uAE42\uAE44\uAE47\uAE48\uAE49\uAE4B\uAE4F\uAE51\uAE52\uAE53\uAE55\uAE57\uAE58\uAE59\uAE5A\uAE5B\uAE5E\uAE62\uAE63\uAE64\uAE66\uAE67\uAE6A\uAE6B\uAE6D\uAE6E\uAE6F\uAE71\uAE72\uAE73\uAE74\uAE75\uAE76\uAE77\uAE7A\uAE7E\uAE7F\uAE80\uAE81\uAE82\uAE83\uAE86\uAE87\uAE88\uAE89\uAE8A\uAE8B\uAE8D\uAE8E\uAE8F\uAE90\uAE91\uAE92\uAE93\uAE94\uAE95\uAE96\uAE97\uAE98\uAE99\uAE9A\uAE9B\uAE9C\uAE9D\uAE9E\uAE9F\uAEA0\uAEA1\uAEA2\uAEA3\uAEA4\uAEA5\uAEA6\uAEA7\uAEA8\uAEA9\uAEAA\uAEAB\uAEAC\uAEAD\uAEAE\uAEAF\uAEB0\uAEB1\uAEB2\uAEB3\uAEB4\uAEB5\uAEB6\uAEB7\uAEB8\uAEB9\uAEBA\uAEBB\uAEBF\uAEC1\uAEC2\uAEC3\uAEC5\uAEC6\uAEC7\uAEC8\uAEC9\uAECA\uAECB\uAECE\uAED2\uAED3\uAED4\uAED5\uAED6\uAED7\uAEDA\uAEDB\uAEDD\uAEDE\uAEDF\uAEE0\uAEE1\uAEE2\uAEE3\uAEE4\uAEE5\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[131].length; ++j)
                if (D[131][j].charCodeAt(0) !== 65533) {
                    e2[D[131][j]] = 33536 + j;
                    d[33536 + j] = D[131][j];
                }
            D[132] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAEE6\uAEE7\uAEE9\uAEEA\uAEEC\uAEEE\uAEEF\uAEF0\uAEF1\uAEF2\uAEF3\uAEF5\uAEF6\uAEF7\uAEF9\uAEFA\uAEFB\uAEFD\uAEFE\uAEFF\uAF00\uAF01\uAF02\uAF03\uAF04\uAF05\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAF06\uAF09\uAF0A\uAF0B\uAF0C\uAF0E\uAF0F\uAF11\uAF12\uAF13\uAF14\uAF15\uAF16\uAF17\uAF18\uAF19\uAF1A\uAF1B\uAF1C\uAF1D\uAF1E\uAF1F\uAF20\uAF21\uAF22\uAF23\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAF24\uAF25\uAF26\uAF27\uAF28\uAF29\uAF2A\uAF2B\uAF2E\uAF2F\uAF31\uAF33\uAF35\uAF36\uAF37\uAF38\uAF39\uAF3A\uAF3B\uAF3E\uAF40\uAF44\uAF45\uAF46\uAF47\uAF4A\uAF4B\uAF4C\uAF4D\uAF4E\uAF4F\uAF51\uAF52\uAF53\uAF54\uAF55\uAF56\uAF57\uAF58\uAF59\uAF5A\uAF5B\uAF5E\uAF5F\uAF60\uAF61\uAF62\uAF63\uAF66\uAF67\uAF68\uAF69\uAF6A\uAF6B\uAF6C\uAF6D\uAF6E\uAF6F\uAF70\uAF71\uAF72\uAF73\uAF74\uAF75\uAF76\uAF77\uAF78\uAF7A\uAF7B\uAF7C\uAF7D\uAF7E\uAF7F\uAF81\uAF82\uAF83\uAF85\uAF86\uAF87\uAF89\uAF8A\uAF8B\uAF8C\uAF8D\uAF8E\uAF8F\uAF92\uAF93\uAF94\uAF96\uAF97\uAF98\uAF99\uAF9A\uAF9B\uAF9D\uAF9E\uAF9F\uAFA0\uAFA1\uAFA2\uAFA3\uAFA4\uAFA5\uAFA6\uAFA7\uAFA8\uAFA9\uAFAA\uAFAB\uAFAC\uAFAD\uAFAE\uAFAF\uAFB0\uAFB1\uAFB2\uAFB3\uAFB4\uAFB5\uAFB6\uAFB7\uAFBA\uAFBB\uAFBD\uAFBE\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[132].length; ++j)
                if (D[132][j].charCodeAt(0) !== 65533) {
                    e2[D[132][j]] = 33792 + j;
                    d[33792 + j] = D[132][j];
                }
            D[133] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAFBF\uAFC1\uAFC2\uAFC3\uAFC4\uAFC5\uAFC6\uAFCA\uAFCC\uAFCF\uAFD0\uAFD1\uAFD2\uAFD3\uAFD5\uAFD6\uAFD7\uAFD8\uAFD9\uAFDA\uAFDB\uAFDD\uAFDE\uAFDF\uAFE0\uAFE1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uAFE2\uAFE3\uAFE4\uAFE5\uAFE6\uAFE7\uAFEA\uAFEB\uAFEC\uAFED\uAFEE\uAFEF\uAFF2\uAFF3\uAFF5\uAFF6\uAFF7\uAFF9\uAFFA\uAFFB\uAFFC\uAFFD\uAFFE\uAFFF\uB002\uB003\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB005\uB006\uB007\uB008\uB009\uB00A\uB00B\uB00D\uB00E\uB00F\uB011\uB012\uB013\uB015\uB016\uB017\uB018\uB019\uB01A\uB01B\uB01E\uB01F\uB020\uB021\uB022\uB023\uB024\uB025\uB026\uB027\uB029\uB02A\uB02B\uB02C\uB02D\uB02E\uB02F\uB030\uB031\uB032\uB033\uB034\uB035\uB036\uB037\uB038\uB039\uB03A\uB03B\uB03C\uB03D\uB03E\uB03F\uB040\uB041\uB042\uB043\uB046\uB047\uB049\uB04B\uB04D\uB04F\uB050\uB051\uB052\uB056\uB058\uB05A\uB05B\uB05C\uB05E\uB05F\uB060\uB061\uB062\uB063\uB064\uB065\uB066\uB067\uB068\uB069\uB06A\uB06B\uB06C\uB06D\uB06E\uB06F\uB070\uB071\uB072\uB073\uB074\uB075\uB076\uB077\uB078\uB079\uB07A\uB07B\uB07E\uB07F\uB081\uB082\uB083\uB085\uB086\uB087\uB088\uB089\uB08A\uB08B\uB08E\uB090\uB092\uB093\uB094\uB095\uB096\uB097\uB09B\uB09D\uB09E\uB0A3\uB0A4\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[133].length; ++j)
                if (D[133][j].charCodeAt(0) !== 65533) {
                    e2[D[133][j]] = 34048 + j;
                    d[34048 + j] = D[133][j];
                }
            D[134] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB0A5\uB0A6\uB0A7\uB0AA\uB0B0\uB0B2\uB0B6\uB0B7\uB0B9\uB0BA\uB0BB\uB0BD\uB0BE\uB0BF\uB0C0\uB0C1\uB0C2\uB0C3\uB0C6\uB0CA\uB0CB\uB0CC\uB0CD\uB0CE\uB0CF\uB0D2\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB0D3\uB0D5\uB0D6\uB0D7\uB0D9\uB0DA\uB0DB\uB0DC\uB0DD\uB0DE\uB0DF\uB0E1\uB0E2\uB0E3\uB0E4\uB0E6\uB0E7\uB0E8\uB0E9\uB0EA\uB0EB\uB0EC\uB0ED\uB0EE\uB0EF\uB0F0\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB0F1\uB0F2\uB0F3\uB0F4\uB0F5\uB0F6\uB0F7\uB0F8\uB0F9\uB0FA\uB0FB\uB0FC\uB0FD\uB0FE\uB0FF\uB100\uB101\uB102\uB103\uB104\uB105\uB106\uB107\uB10A\uB10D\uB10E\uB10F\uB111\uB114\uB115\uB116\uB117\uB11A\uB11E\uB11F\uB120\uB121\uB122\uB126\uB127\uB129\uB12A\uB12B\uB12D\uB12E\uB12F\uB130\uB131\uB132\uB133\uB136\uB13A\uB13B\uB13C\uB13D\uB13E\uB13F\uB142\uB143\uB145\uB146\uB147\uB149\uB14A\uB14B\uB14C\uB14D\uB14E\uB14F\uB152\uB153\uB156\uB157\uB159\uB15A\uB15B\uB15D\uB15E\uB15F\uB161\uB162\uB163\uB164\uB165\uB166\uB167\uB168\uB169\uB16A\uB16B\uB16C\uB16D\uB16E\uB16F\uB170\uB171\uB172\uB173\uB174\uB175\uB176\uB177\uB17A\uB17B\uB17D\uB17E\uB17F\uB181\uB183\uB184\uB185\uB186\uB187\uB18A\uB18C\uB18E\uB18F\uB190\uB191\uB195\uB196\uB197\uB199\uB19A\uB19B\uB19D\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[134].length; ++j)
                if (D[134][j].charCodeAt(0) !== 65533) {
                    e2[D[134][j]] = 34304 + j;
                    d[34304 + j] = D[134][j];
                }
            D[135] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB19E\uB19F\uB1A0\uB1A1\uB1A2\uB1A3\uB1A4\uB1A5\uB1A6\uB1A7\uB1A9\uB1AA\uB1AB\uB1AC\uB1AD\uB1AE\uB1AF\uB1B0\uB1B1\uB1B2\uB1B3\uB1B4\uB1B5\uB1B6\uB1B7\uB1B8\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB1B9\uB1BA\uB1BB\uB1BC\uB1BD\uB1BE\uB1BF\uB1C0\uB1C1\uB1C2\uB1C3\uB1C4\uB1C5\uB1C6\uB1C7\uB1C8\uB1C9\uB1CA\uB1CB\uB1CD\uB1CE\uB1CF\uB1D1\uB1D2\uB1D3\uB1D5\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB1D6\uB1D7\uB1D8\uB1D9\uB1DA\uB1DB\uB1DE\uB1E0\uB1E1\uB1E2\uB1E3\uB1E4\uB1E5\uB1E6\uB1E7\uB1EA\uB1EB\uB1ED\uB1EE\uB1EF\uB1F1\uB1F2\uB1F3\uB1F4\uB1F5\uB1F6\uB1F7\uB1F8\uB1FA\uB1FC\uB1FE\uB1FF\uB200\uB201\uB202\uB203\uB206\uB207\uB209\uB20A\uB20D\uB20E\uB20F\uB210\uB211\uB212\uB213\uB216\uB218\uB21A\uB21B\uB21C\uB21D\uB21E\uB21F\uB221\uB222\uB223\uB224\uB225\uB226\uB227\uB228\uB229\uB22A\uB22B\uB22C\uB22D\uB22E\uB22F\uB230\uB231\uB232\uB233\uB235\uB236\uB237\uB238\uB239\uB23A\uB23B\uB23D\uB23E\uB23F\uB240\uB241\uB242\uB243\uB244\uB245\uB246\uB247\uB248\uB249\uB24A\uB24B\uB24C\uB24D\uB24E\uB24F\uB250\uB251\uB252\uB253\uB254\uB255\uB256\uB257\uB259\uB25A\uB25B\uB25D\uB25E\uB25F\uB261\uB262\uB263\uB264\uB265\uB266\uB267\uB26A\uB26B\uB26C\uB26D\uB26E\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[135].length; ++j)
                if (D[135][j].charCodeAt(0) !== 65533) {
                    e2[D[135][j]] = 34560 + j;
                    d[34560 + j] = D[135][j];
                }
            D[136] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB26F\uB270\uB271\uB272\uB273\uB276\uB277\uB278\uB279\uB27A\uB27B\uB27D\uB27E\uB27F\uB280\uB281\uB282\uB283\uB286\uB287\uB288\uB28A\uB28B\uB28C\uB28D\uB28E\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB28F\uB292\uB293\uB295\uB296\uB297\uB29B\uB29C\uB29D\uB29E\uB29F\uB2A2\uB2A4\uB2A7\uB2A8\uB2A9\uB2AB\uB2AD\uB2AE\uB2AF\uB2B1\uB2B2\uB2B3\uB2B5\uB2B6\uB2B7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB2B8\uB2B9\uB2BA\uB2BB\uB2BC\uB2BD\uB2BE\uB2BF\uB2C0\uB2C1\uB2C2\uB2C3\uB2C4\uB2C5\uB2C6\uB2C7\uB2CA\uB2CB\uB2CD\uB2CE\uB2CF\uB2D1\uB2D3\uB2D4\uB2D5\uB2D6\uB2D7\uB2DA\uB2DC\uB2DE\uB2DF\uB2E0\uB2E1\uB2E3\uB2E7\uB2E9\uB2EA\uB2F0\uB2F1\uB2F2\uB2F6\uB2FC\uB2FD\uB2FE\uB302\uB303\uB305\uB306\uB307\uB309\uB30A\uB30B\uB30C\uB30D\uB30E\uB30F\uB312\uB316\uB317\uB318\uB319\uB31A\uB31B\uB31D\uB31E\uB31F\uB320\uB321\uB322\uB323\uB324\uB325\uB326\uB327\uB328\uB329\uB32A\uB32B\uB32C\uB32D\uB32E\uB32F\uB330\uB331\uB332\uB333\uB334\uB335\uB336\uB337\uB338\uB339\uB33A\uB33B\uB33C\uB33D\uB33E\uB33F\uB340\uB341\uB342\uB343\uB344\uB345\uB346\uB347\uB348\uB349\uB34A\uB34B\uB34C\uB34D\uB34E\uB34F\uB350\uB351\uB352\uB353\uB357\uB359\uB35A\uB35D\uB360\uB361\uB362\uB363\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[136].length; ++j)
                if (D[136][j].charCodeAt(0) !== 65533) {
                    e2[D[136][j]] = 34816 + j;
                    d[34816 + j] = D[136][j];
                }
            D[137] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB366\uB368\uB36A\uB36C\uB36D\uB36F\uB372\uB373\uB375\uB376\uB377\uB379\uB37A\uB37B\uB37C\uB37D\uB37E\uB37F\uB382\uB386\uB387\uB388\uB389\uB38A\uB38B\uB38D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB38E\uB38F\uB391\uB392\uB393\uB395\uB396\uB397\uB398\uB399\uB39A\uB39B\uB39C\uB39D\uB39E\uB39F\uB3A2\uB3A3\uB3A4\uB3A5\uB3A6\uB3A7\uB3A9\uB3AA\uB3AB\uB3AD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB3AE\uB3AF\uB3B0\uB3B1\uB3B2\uB3B3\uB3B4\uB3B5\uB3B6\uB3B7\uB3B8\uB3B9\uB3BA\uB3BB\uB3BC\uB3BD\uB3BE\uB3BF\uB3C0\uB3C1\uB3C2\uB3C3\uB3C6\uB3C7\uB3C9\uB3CA\uB3CD\uB3CF\uB3D1\uB3D2\uB3D3\uB3D6\uB3D8\uB3DA\uB3DC\uB3DE\uB3DF\uB3E1\uB3E2\uB3E3\uB3E5\uB3E6\uB3E7\uB3E9\uB3EA\uB3EB\uB3EC\uB3ED\uB3EE\uB3EF\uB3F0\uB3F1\uB3F2\uB3F3\uB3F4\uB3F5\uB3F6\uB3F7\uB3F8\uB3F9\uB3FA\uB3FB\uB3FD\uB3FE\uB3FF\uB400\uB401\uB402\uB403\uB404\uB405\uB406\uB407\uB408\uB409\uB40A\uB40B\uB40C\uB40D\uB40E\uB40F\uB411\uB412\uB413\uB414\uB415\uB416\uB417\uB419\uB41A\uB41B\uB41D\uB41E\uB41F\uB421\uB422\uB423\uB424\uB425\uB426\uB427\uB42A\uB42C\uB42D\uB42E\uB42F\uB430\uB431\uB432\uB433\uB435\uB436\uB437\uB438\uB439\uB43A\uB43B\uB43C\uB43D\uB43E\uB43F\uB440\uB441\uB442\uB443\uB444\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[137].length; ++j)
                if (D[137][j].charCodeAt(0) !== 65533) {
                    e2[D[137][j]] = 35072 + j;
                    d[35072 + j] = D[137][j];
                }
            D[138] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB445\uB446\uB447\uB448\uB449\uB44A\uB44B\uB44C\uB44D\uB44E\uB44F\uB452\uB453\uB455\uB456\uB457\uB459\uB45A\uB45B\uB45C\uB45D\uB45E\uB45F\uB462\uB464\uB466\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB467\uB468\uB469\uB46A\uB46B\uB46D\uB46E\uB46F\uB470\uB471\uB472\uB473\uB474\uB475\uB476\uB477\uB478\uB479\uB47A\uB47B\uB47C\uB47D\uB47E\uB47F\uB481\uB482\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB483\uB484\uB485\uB486\uB487\uB489\uB48A\uB48B\uB48C\uB48D\uB48E\uB48F\uB490\uB491\uB492\uB493\uB494\uB495\uB496\uB497\uB498\uB499\uB49A\uB49B\uB49C\uB49E\uB49F\uB4A0\uB4A1\uB4A2\uB4A3\uB4A5\uB4A6\uB4A7\uB4A9\uB4AA\uB4AB\uB4AD\uB4AE\uB4AF\uB4B0\uB4B1\uB4B2\uB4B3\uB4B4\uB4B6\uB4B8\uB4BA\uB4BB\uB4BC\uB4BD\uB4BE\uB4BF\uB4C1\uB4C2\uB4C3\uB4C5\uB4C6\uB4C7\uB4C9\uB4CA\uB4CB\uB4CC\uB4CD\uB4CE\uB4CF\uB4D1\uB4D2\uB4D3\uB4D4\uB4D6\uB4D7\uB4D8\uB4D9\uB4DA\uB4DB\uB4DE\uB4DF\uB4E1\uB4E2\uB4E5\uB4E7\uB4E8\uB4E9\uB4EA\uB4EB\uB4EE\uB4F0\uB4F2\uB4F3\uB4F4\uB4F5\uB4F6\uB4F7\uB4F9\uB4FA\uB4FB\uB4FC\uB4FD\uB4FE\uB4FF\uB500\uB501\uB502\uB503\uB504\uB505\uB506\uB507\uB508\uB509\uB50A\uB50B\uB50C\uB50D\uB50E\uB50F\uB510\uB511\uB512\uB513\uB516\uB517\uB519\uB51A\uB51D\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[138].length; ++j)
                if (D[138][j].charCodeAt(0) !== 65533) {
                    e2[D[138][j]] = 35328 + j;
                    d[35328 + j] = D[138][j];
                }
            D[139] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB51E\uB51F\uB520\uB521\uB522\uB523\uB526\uB52B\uB52C\uB52D\uB52E\uB52F\uB532\uB533\uB535\uB536\uB537\uB539\uB53A\uB53B\uB53C\uB53D\uB53E\uB53F\uB542\uB546\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB547\uB548\uB549\uB54A\uB54E\uB54F\uB551\uB552\uB553\uB555\uB556\uB557\uB558\uB559\uB55A\uB55B\uB55E\uB562\uB563\uB564\uB565\uB566\uB567\uB568\uB569\uB56A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB56B\uB56C\uB56D\uB56E\uB56F\uB570\uB571\uB572\uB573\uB574\uB575\uB576\uB577\uB578\uB579\uB57A\uB57B\uB57C\uB57D\uB57E\uB57F\uB580\uB581\uB582\uB583\uB584\uB585\uB586\uB587\uB588\uB589\uB58A\uB58B\uB58C\uB58D\uB58E\uB58F\uB590\uB591\uB592\uB593\uB594\uB595\uB596\uB597\uB598\uB599\uB59A\uB59B\uB59C\uB59D\uB59E\uB59F\uB5A2\uB5A3\uB5A5\uB5A6\uB5A7\uB5A9\uB5AC\uB5AD\uB5AE\uB5AF\uB5B2\uB5B6\uB5B7\uB5B8\uB5B9\uB5BA\uB5BE\uB5BF\uB5C1\uB5C2\uB5C3\uB5C5\uB5C6\uB5C7\uB5C8\uB5C9\uB5CA\uB5CB\uB5CE\uB5D2\uB5D3\uB5D4\uB5D5\uB5D6\uB5D7\uB5D9\uB5DA\uB5DB\uB5DC\uB5DD\uB5DE\uB5DF\uB5E0\uB5E1\uB5E2\uB5E3\uB5E4\uB5E5\uB5E6\uB5E7\uB5E8\uB5E9\uB5EA\uB5EB\uB5ED\uB5EE\uB5EF\uB5F0\uB5F1\uB5F2\uB5F3\uB5F4\uB5F5\uB5F6\uB5F7\uB5F8\uB5F9\uB5FA\uB5FB\uB5FC\uB5FD\uB5FE\uB5FF\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[139].length; ++j)
                if (D[139][j].charCodeAt(0) !== 65533) {
                    e2[D[139][j]] = 35584 + j;
                    d[35584 + j] = D[139][j];
                }
            D[140] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB600\uB601\uB602\uB603\uB604\uB605\uB606\uB607\uB608\uB609\uB60A\uB60B\uB60C\uB60D\uB60E\uB60F\uB612\uB613\uB615\uB616\uB617\uB619\uB61A\uB61B\uB61C\uB61D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB61E\uB61F\uB620\uB621\uB622\uB623\uB624\uB626\uB627\uB628\uB629\uB62A\uB62B\uB62D\uB62E\uB62F\uB630\uB631\uB632\uB633\uB635\uB636\uB637\uB638\uB639\uB63A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB63B\uB63C\uB63D\uB63E\uB63F\uB640\uB641\uB642\uB643\uB644\uB645\uB646\uB647\uB649\uB64A\uB64B\uB64C\uB64D\uB64E\uB64F\uB650\uB651\uB652\uB653\uB654\uB655\uB656\uB657\uB658\uB659\uB65A\uB65B\uB65C\uB65D\uB65E\uB65F\uB660\uB661\uB662\uB663\uB665\uB666\uB667\uB669\uB66A\uB66B\uB66C\uB66D\uB66E\uB66F\uB670\uB671\uB672\uB673\uB674\uB675\uB676\uB677\uB678\uB679\uB67A\uB67B\uB67C\uB67D\uB67E\uB67F\uB680\uB681\uB682\uB683\uB684\uB685\uB686\uB687\uB688\uB689\uB68A\uB68B\uB68C\uB68D\uB68E\uB68F\uB690\uB691\uB692\uB693\uB694\uB695\uB696\uB697\uB698\uB699\uB69A\uB69B\uB69E\uB69F\uB6A1\uB6A2\uB6A3\uB6A5\uB6A6\uB6A7\uB6A8\uB6A9\uB6AA\uB6AD\uB6AE\uB6AF\uB6B0\uB6B2\uB6B3\uB6B4\uB6B5\uB6B6\uB6B7\uB6B8\uB6B9\uB6BA\uB6BB\uB6BC\uB6BD\uB6BE\uB6BF\uB6C0\uB6C1\uB6C2\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[140].length; ++j)
                if (D[140][j].charCodeAt(0) !== 65533) {
                    e2[D[140][j]] = 35840 + j;
                    d[35840 + j] = D[140][j];
                }
            D[141] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB6C3\uB6C4\uB6C5\uB6C6\uB6C7\uB6C8\uB6C9\uB6CA\uB6CB\uB6CC\uB6CD\uB6CE\uB6CF\uB6D0\uB6D1\uB6D2\uB6D3\uB6D5\uB6D6\uB6D7\uB6D8\uB6D9\uB6DA\uB6DB\uB6DC\uB6DD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB6DE\uB6DF\uB6E0\uB6E1\uB6E2\uB6E3\uB6E4\uB6E5\uB6E6\uB6E7\uB6E8\uB6E9\uB6EA\uB6EB\uB6EC\uB6ED\uB6EE\uB6EF\uB6F1\uB6F2\uB6F3\uB6F5\uB6F6\uB6F7\uB6F9\uB6FA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB6FB\uB6FC\uB6FD\uB6FE\uB6FF\uB702\uB703\uB704\uB706\uB707\uB708\uB709\uB70A\uB70B\uB70C\uB70D\uB70E\uB70F\uB710\uB711\uB712\uB713\uB714\uB715\uB716\uB717\uB718\uB719\uB71A\uB71B\uB71C\uB71D\uB71E\uB71F\uB720\uB721\uB722\uB723\uB724\uB725\uB726\uB727\uB72A\uB72B\uB72D\uB72E\uB731\uB732\uB733\uB734\uB735\uB736\uB737\uB73A\uB73C\uB73D\uB73E\uB73F\uB740\uB741\uB742\uB743\uB745\uB746\uB747\uB749\uB74A\uB74B\uB74D\uB74E\uB74F\uB750\uB751\uB752\uB753\uB756\uB757\uB758\uB759\uB75A\uB75B\uB75C\uB75D\uB75E\uB75F\uB761\uB762\uB763\uB765\uB766\uB767\uB769\uB76A\uB76B\uB76C\uB76D\uB76E\uB76F\uB772\uB774\uB776\uB777\uB778\uB779\uB77A\uB77B\uB77E\uB77F\uB781\uB782\uB783\uB785\uB786\uB787\uB788\uB789\uB78A\uB78B\uB78E\uB793\uB794\uB795\uB79A\uB79B\uB79D\uB79E\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[141].length; ++j)
                if (D[141][j].charCodeAt(0) !== 65533) {
                    e2[D[141][j]] = 36096 + j;
                    d[36096 + j] = D[141][j];
                }
            D[142] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB79F\uB7A1\uB7A2\uB7A3\uB7A4\uB7A5\uB7A6\uB7A7\uB7AA\uB7AE\uB7AF\uB7B0\uB7B1\uB7B2\uB7B3\uB7B6\uB7B7\uB7B9\uB7BA\uB7BB\uB7BC\uB7BD\uB7BE\uB7BF\uB7C0\uB7C1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB7C2\uB7C3\uB7C4\uB7C5\uB7C6\uB7C8\uB7CA\uB7CB\uB7CC\uB7CD\uB7CE\uB7CF\uB7D0\uB7D1\uB7D2\uB7D3\uB7D4\uB7D5\uB7D6\uB7D7\uB7D8\uB7D9\uB7DA\uB7DB\uB7DC\uB7DD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB7DE\uB7DF\uB7E0\uB7E1\uB7E2\uB7E3\uB7E4\uB7E5\uB7E6\uB7E7\uB7E8\uB7E9\uB7EA\uB7EB\uB7EE\uB7EF\uB7F1\uB7F2\uB7F3\uB7F5\uB7F6\uB7F7\uB7F8\uB7F9\uB7FA\uB7FB\uB7FE\uB802\uB803\uB804\uB805\uB806\uB80A\uB80B\uB80D\uB80E\uB80F\uB811\uB812\uB813\uB814\uB815\uB816\uB817\uB81A\uB81C\uB81E\uB81F\uB820\uB821\uB822\uB823\uB826\uB827\uB829\uB82A\uB82B\uB82D\uB82E\uB82F\uB830\uB831\uB832\uB833\uB836\uB83A\uB83B\uB83C\uB83D\uB83E\uB83F\uB841\uB842\uB843\uB845\uB846\uB847\uB848\uB849\uB84A\uB84B\uB84C\uB84D\uB84E\uB84F\uB850\uB852\uB854\uB855\uB856\uB857\uB858\uB859\uB85A\uB85B\uB85E\uB85F\uB861\uB862\uB863\uB865\uB866\uB867\uB868\uB869\uB86A\uB86B\uB86E\uB870\uB872\uB873\uB874\uB875\uB876\uB877\uB879\uB87A\uB87B\uB87D\uB87E\uB87F\uB880\uB881\uB882\uB883\uB884\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[142].length; ++j)
                if (D[142][j].charCodeAt(0) !== 65533) {
                    e2[D[142][j]] = 36352 + j;
                    d[36352 + j] = D[142][j];
                }
            D[143] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB885\uB886\uB887\uB888\uB889\uB88A\uB88B\uB88C\uB88E\uB88F\uB890\uB891\uB892\uB893\uB894\uB895\uB896\uB897\uB898\uB899\uB89A\uB89B\uB89C\uB89D\uB89E\uB89F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB8A0\uB8A1\uB8A2\uB8A3\uB8A4\uB8A5\uB8A6\uB8A7\uB8A9\uB8AA\uB8AB\uB8AC\uB8AD\uB8AE\uB8AF\uB8B1\uB8B2\uB8B3\uB8B5\uB8B6\uB8B7\uB8B9\uB8BA\uB8BB\uB8BC\uB8BD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB8BE\uB8BF\uB8C2\uB8C4\uB8C6\uB8C7\uB8C8\uB8C9\uB8CA\uB8CB\uB8CD\uB8CE\uB8CF\uB8D1\uB8D2\uB8D3\uB8D5\uB8D6\uB8D7\uB8D8\uB8D9\uB8DA\uB8DB\uB8DC\uB8DE\uB8E0\uB8E2\uB8E3\uB8E4\uB8E5\uB8E6\uB8E7\uB8EA\uB8EB\uB8ED\uB8EE\uB8EF\uB8F1\uB8F2\uB8F3\uB8F4\uB8F5\uB8F6\uB8F7\uB8FA\uB8FC\uB8FE\uB8FF\uB900\uB901\uB902\uB903\uB905\uB906\uB907\uB908\uB909\uB90A\uB90B\uB90C\uB90D\uB90E\uB90F\uB910\uB911\uB912\uB913\uB914\uB915\uB916\uB917\uB919\uB91A\uB91B\uB91C\uB91D\uB91E\uB91F\uB921\uB922\uB923\uB924\uB925\uB926\uB927\uB928\uB929\uB92A\uB92B\uB92C\uB92D\uB92E\uB92F\uB930\uB931\uB932\uB933\uB934\uB935\uB936\uB937\uB938\uB939\uB93A\uB93B\uB93E\uB93F\uB941\uB942\uB943\uB945\uB946\uB947\uB948\uB949\uB94A\uB94B\uB94D\uB94E\uB950\uB952\uB953\uB954\uB955\uB956\uB957\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[143].length; ++j)
                if (D[143][j].charCodeAt(0) !== 65533) {
                    e2[D[143][j]] = 36608 + j;
                    d[36608 + j] = D[143][j];
                }
            D[144] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB95A\uB95B\uB95D\uB95E\uB95F\uB961\uB962\uB963\uB964\uB965\uB966\uB967\uB96A\uB96C\uB96E\uB96F\uB970\uB971\uB972\uB973\uB976\uB977\uB979\uB97A\uB97B\uB97D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB97E\uB97F\uB980\uB981\uB982\uB983\uB986\uB988\uB98B\uB98C\uB98F\uB990\uB991\uB992\uB993\uB994\uB995\uB996\uB997\uB998\uB999\uB99A\uB99B\uB99C\uB99D\uB99E\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uB99F\uB9A0\uB9A1\uB9A2\uB9A3\uB9A4\uB9A5\uB9A6\uB9A7\uB9A8\uB9A9\uB9AA\uB9AB\uB9AE\uB9AF\uB9B1\uB9B2\uB9B3\uB9B5\uB9B6\uB9B7\uB9B8\uB9B9\uB9BA\uB9BB\uB9BE\uB9C0\uB9C2\uB9C3\uB9C4\uB9C5\uB9C6\uB9C7\uB9CA\uB9CB\uB9CD\uB9D3\uB9D4\uB9D5\uB9D6\uB9D7\uB9DA\uB9DC\uB9DF\uB9E0\uB9E2\uB9E6\uB9E7\uB9E9\uB9EA\uB9EB\uB9ED\uB9EE\uB9EF\uB9F0\uB9F1\uB9F2\uB9F3\uB9F6\uB9FB\uB9FC\uB9FD\uB9FE\uB9FF\uBA02\uBA03\uBA04\uBA05\uBA06\uBA07\uBA09\uBA0A\uBA0B\uBA0C\uBA0D\uBA0E\uBA0F\uBA10\uBA11\uBA12\uBA13\uBA14\uBA16\uBA17\uBA18\uBA19\uBA1A\uBA1B\uBA1C\uBA1D\uBA1E\uBA1F\uBA20\uBA21\uBA22\uBA23\uBA24\uBA25\uBA26\uBA27\uBA28\uBA29\uBA2A\uBA2B\uBA2C\uBA2D\uBA2E\uBA2F\uBA30\uBA31\uBA32\uBA33\uBA34\uBA35\uBA36\uBA37\uBA3A\uBA3B\uBA3D\uBA3E\uBA3F\uBA41\uBA43\uBA44\uBA45\uBA46\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[144].length; ++j)
                if (D[144][j].charCodeAt(0) !== 65533) {
                    e2[D[144][j]] = 36864 + j;
                    d[36864 + j] = D[144][j];
                }
            D[145] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBA47\uBA4A\uBA4C\uBA4F\uBA50\uBA51\uBA52\uBA56\uBA57\uBA59\uBA5A\uBA5B\uBA5D\uBA5E\uBA5F\uBA60\uBA61\uBA62\uBA63\uBA66\uBA6A\uBA6B\uBA6C\uBA6D\uBA6E\uBA6F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBA72\uBA73\uBA75\uBA76\uBA77\uBA79\uBA7A\uBA7B\uBA7C\uBA7D\uBA7E\uBA7F\uBA80\uBA81\uBA82\uBA86\uBA88\uBA89\uBA8A\uBA8B\uBA8D\uBA8E\uBA8F\uBA90\uBA91\uBA92\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBA93\uBA94\uBA95\uBA96\uBA97\uBA98\uBA99\uBA9A\uBA9B\uBA9C\uBA9D\uBA9E\uBA9F\uBAA0\uBAA1\uBAA2\uBAA3\uBAA4\uBAA5\uBAA6\uBAA7\uBAAA\uBAAD\uBAAE\uBAAF\uBAB1\uBAB3\uBAB4\uBAB5\uBAB6\uBAB7\uBABA\uBABC\uBABE\uBABF\uBAC0\uBAC1\uBAC2\uBAC3\uBAC5\uBAC6\uBAC7\uBAC9\uBACA\uBACB\uBACC\uBACD\uBACE\uBACF\uBAD0\uBAD1\uBAD2\uBAD3\uBAD4\uBAD5\uBAD6\uBAD7\uBADA\uBADB\uBADC\uBADD\uBADE\uBADF\uBAE0\uBAE1\uBAE2\uBAE3\uBAE4\uBAE5\uBAE6\uBAE7\uBAE8\uBAE9\uBAEA\uBAEB\uBAEC\uBAED\uBAEE\uBAEF\uBAF0\uBAF1\uBAF2\uBAF3\uBAF4\uBAF5\uBAF6\uBAF7\uBAF8\uBAF9\uBAFA\uBAFB\uBAFD\uBAFE\uBAFF\uBB01\uBB02\uBB03\uBB05\uBB06\uBB07\uBB08\uBB09\uBB0A\uBB0B\uBB0C\uBB0E\uBB10\uBB12\uBB13\uBB14\uBB15\uBB16\uBB17\uBB19\uBB1A\uBB1B\uBB1D\uBB1E\uBB1F\uBB21\uBB22\uBB23\uBB24\uBB25\uBB26\uBB27\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[145].length; ++j)
                if (D[145][j].charCodeAt(0) !== 65533) {
                    e2[D[145][j]] = 37120 + j;
                    d[37120 + j] = D[145][j];
                }
            D[146] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBB28\uBB2A\uBB2C\uBB2D\uBB2E\uBB2F\uBB30\uBB31\uBB32\uBB33\uBB37\uBB39\uBB3A\uBB3F\uBB40\uBB41\uBB42\uBB43\uBB46\uBB48\uBB4A\uBB4B\uBB4C\uBB4E\uBB51\uBB52\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBB53\uBB55\uBB56\uBB57\uBB59\uBB5A\uBB5B\uBB5C\uBB5D\uBB5E\uBB5F\uBB60\uBB62\uBB64\uBB65\uBB66\uBB67\uBB68\uBB69\uBB6A\uBB6B\uBB6D\uBB6E\uBB6F\uBB70\uBB71\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBB72\uBB73\uBB74\uBB75\uBB76\uBB77\uBB78\uBB79\uBB7A\uBB7B\uBB7C\uBB7D\uBB7E\uBB7F\uBB80\uBB81\uBB82\uBB83\uBB84\uBB85\uBB86\uBB87\uBB89\uBB8A\uBB8B\uBB8D\uBB8E\uBB8F\uBB91\uBB92\uBB93\uBB94\uBB95\uBB96\uBB97\uBB98\uBB99\uBB9A\uBB9B\uBB9C\uBB9D\uBB9E\uBB9F\uBBA0\uBBA1\uBBA2\uBBA3\uBBA5\uBBA6\uBBA7\uBBA9\uBBAA\uBBAB\uBBAD\uBBAE\uBBAF\uBBB0\uBBB1\uBBB2\uBBB3\uBBB5\uBBB6\uBBB8\uBBB9\uBBBA\uBBBB\uBBBC\uBBBD\uBBBE\uBBBF\uBBC1\uBBC2\uBBC3\uBBC5\uBBC6\uBBC7\uBBC9\uBBCA\uBBCB\uBBCC\uBBCD\uBBCE\uBBCF\uBBD1\uBBD2\uBBD4\uBBD5\uBBD6\uBBD7\uBBD8\uBBD9\uBBDA\uBBDB\uBBDC\uBBDD\uBBDE\uBBDF\uBBE0\uBBE1\uBBE2\uBBE3\uBBE4\uBBE5\uBBE6\uBBE7\uBBE8\uBBE9\uBBEA\uBBEB\uBBEC\uBBED\uBBEE\uBBEF\uBBF0\uBBF1\uBBF2\uBBF3\uBBF4\uBBF5\uBBF6\uBBF7\uBBFA\uBBFB\uBBFD\uBBFE\uBC01\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[146].length; ++j)
                if (D[146][j].charCodeAt(0) !== 65533) {
                    e2[D[146][j]] = 37376 + j;
                    d[37376 + j] = D[146][j];
                }
            D[147] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBC03\uBC04\uBC05\uBC06\uBC07\uBC0A\uBC0E\uBC10\uBC12\uBC13\uBC19\uBC1A\uBC20\uBC21\uBC22\uBC23\uBC26\uBC28\uBC2A\uBC2B\uBC2C\uBC2E\uBC2F\uBC32\uBC33\uBC35\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBC36\uBC37\uBC39\uBC3A\uBC3B\uBC3C\uBC3D\uBC3E\uBC3F\uBC42\uBC46\uBC47\uBC48\uBC4A\uBC4B\uBC4E\uBC4F\uBC51\uBC52\uBC53\uBC54\uBC55\uBC56\uBC57\uBC58\uBC59\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBC5A\uBC5B\uBC5C\uBC5E\uBC5F\uBC60\uBC61\uBC62\uBC63\uBC64\uBC65\uBC66\uBC67\uBC68\uBC69\uBC6A\uBC6B\uBC6C\uBC6D\uBC6E\uBC6F\uBC70\uBC71\uBC72\uBC73\uBC74\uBC75\uBC76\uBC77\uBC78\uBC79\uBC7A\uBC7B\uBC7C\uBC7D\uBC7E\uBC7F\uBC80\uBC81\uBC82\uBC83\uBC86\uBC87\uBC89\uBC8A\uBC8D\uBC8F\uBC90\uBC91\uBC92\uBC93\uBC96\uBC98\uBC9B\uBC9C\uBC9D\uBC9E\uBC9F\uBCA2\uBCA3\uBCA5\uBCA6\uBCA9\uBCAA\uBCAB\uBCAC\uBCAD\uBCAE\uBCAF\uBCB2\uBCB6\uBCB7\uBCB8\uBCB9\uBCBA\uBCBB\uBCBE\uBCBF\uBCC1\uBCC2\uBCC3\uBCC5\uBCC6\uBCC7\uBCC8\uBCC9\uBCCA\uBCCB\uBCCC\uBCCE\uBCD2\uBCD3\uBCD4\uBCD6\uBCD7\uBCD9\uBCDA\uBCDB\uBCDD\uBCDE\uBCDF\uBCE0\uBCE1\uBCE2\uBCE3\uBCE4\uBCE5\uBCE6\uBCE7\uBCE8\uBCE9\uBCEA\uBCEB\uBCEC\uBCED\uBCEE\uBCEF\uBCF0\uBCF1\uBCF2\uBCF3\uBCF7\uBCF9\uBCFA\uBCFB\uBCFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[147].length; ++j)
                if (D[147][j].charCodeAt(0) !== 65533) {
                    e2[D[147][j]] = 37632 + j;
                    d[37632 + j] = D[147][j];
                }
            D[148] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBCFE\uBCFF\uBD00\uBD01\uBD02\uBD03\uBD06\uBD08\uBD0A\uBD0B\uBD0C\uBD0D\uBD0E\uBD0F\uBD11\uBD12\uBD13\uBD15\uBD16\uBD17\uBD18\uBD19\uBD1A\uBD1B\uBD1C\uBD1D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBD1E\uBD1F\uBD20\uBD21\uBD22\uBD23\uBD25\uBD26\uBD27\uBD28\uBD29\uBD2A\uBD2B\uBD2D\uBD2E\uBD2F\uBD30\uBD31\uBD32\uBD33\uBD34\uBD35\uBD36\uBD37\uBD38\uBD39\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBD3A\uBD3B\uBD3C\uBD3D\uBD3E\uBD3F\uBD41\uBD42\uBD43\uBD44\uBD45\uBD46\uBD47\uBD4A\uBD4B\uBD4D\uBD4E\uBD4F\uBD51\uBD52\uBD53\uBD54\uBD55\uBD56\uBD57\uBD5A\uBD5B\uBD5C\uBD5D\uBD5E\uBD5F\uBD60\uBD61\uBD62\uBD63\uBD65\uBD66\uBD67\uBD69\uBD6A\uBD6B\uBD6C\uBD6D\uBD6E\uBD6F\uBD70\uBD71\uBD72\uBD73\uBD74\uBD75\uBD76\uBD77\uBD78\uBD79\uBD7A\uBD7B\uBD7C\uBD7D\uBD7E\uBD7F\uBD82\uBD83\uBD85\uBD86\uBD8B\uBD8C\uBD8D\uBD8E\uBD8F\uBD92\uBD94\uBD96\uBD97\uBD98\uBD9B\uBD9D\uBD9E\uBD9F\uBDA0\uBDA1\uBDA2\uBDA3\uBDA5\uBDA6\uBDA7\uBDA8\uBDA9\uBDAA\uBDAB\uBDAC\uBDAD\uBDAE\uBDAF\uBDB1\uBDB2\uBDB3\uBDB4\uBDB5\uBDB6\uBDB7\uBDB9\uBDBA\uBDBB\uBDBC\uBDBD\uBDBE\uBDBF\uBDC0\uBDC1\uBDC2\uBDC3\uBDC4\uBDC5\uBDC6\uBDC7\uBDC8\uBDC9\uBDCA\uBDCB\uBDCC\uBDCD\uBDCE\uBDCF\uBDD0\uBDD1\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[148].length; ++j)
                if (D[148][j].charCodeAt(0) !== 65533) {
                    e2[D[148][j]] = 37888 + j;
                    d[37888 + j] = D[148][j];
                }
            D[149] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBDD2\uBDD3\uBDD6\uBDD7\uBDD9\uBDDA\uBDDB\uBDDD\uBDDE\uBDDF\uBDE0\uBDE1\uBDE2\uBDE3\uBDE4\uBDE5\uBDE6\uBDE7\uBDE8\uBDEA\uBDEB\uBDEC\uBDED\uBDEE\uBDEF\uBDF1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBDF2\uBDF3\uBDF5\uBDF6\uBDF7\uBDF9\uBDFA\uBDFB\uBDFC\uBDFD\uBDFE\uBDFF\uBE01\uBE02\uBE04\uBE06\uBE07\uBE08\uBE09\uBE0A\uBE0B\uBE0E\uBE0F\uBE11\uBE12\uBE13\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBE15\uBE16\uBE17\uBE18\uBE19\uBE1A\uBE1B\uBE1E\uBE20\uBE21\uBE22\uBE23\uBE24\uBE25\uBE26\uBE27\uBE28\uBE29\uBE2A\uBE2B\uBE2C\uBE2D\uBE2E\uBE2F\uBE30\uBE31\uBE32\uBE33\uBE34\uBE35\uBE36\uBE37\uBE38\uBE39\uBE3A\uBE3B\uBE3C\uBE3D\uBE3E\uBE3F\uBE40\uBE41\uBE42\uBE43\uBE46\uBE47\uBE49\uBE4A\uBE4B\uBE4D\uBE4F\uBE50\uBE51\uBE52\uBE53\uBE56\uBE58\uBE5C\uBE5D\uBE5E\uBE5F\uBE62\uBE63\uBE65\uBE66\uBE67\uBE69\uBE6B\uBE6C\uBE6D\uBE6E\uBE6F\uBE72\uBE76\uBE77\uBE78\uBE79\uBE7A\uBE7E\uBE7F\uBE81\uBE82\uBE83\uBE85\uBE86\uBE87\uBE88\uBE89\uBE8A\uBE8B\uBE8E\uBE92\uBE93\uBE94\uBE95\uBE96\uBE97\uBE9A\uBE9B\uBE9C\uBE9D\uBE9E\uBE9F\uBEA0\uBEA1\uBEA2\uBEA3\uBEA4\uBEA5\uBEA6\uBEA7\uBEA9\uBEAA\uBEAB\uBEAC\uBEAD\uBEAE\uBEAF\uBEB0\uBEB1\uBEB2\uBEB3\uBEB4\uBEB5\uBEB6\uBEB7\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[149].length; ++j)
                if (D[149][j].charCodeAt(0) !== 65533) {
                    e2[D[149][j]] = 38144 + j;
                    d[38144 + j] = D[149][j];
                }
            D[150] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBEB8\uBEB9\uBEBA\uBEBB\uBEBC\uBEBD\uBEBE\uBEBF\uBEC0\uBEC1\uBEC2\uBEC3\uBEC4\uBEC5\uBEC6\uBEC7\uBEC8\uBEC9\uBECA\uBECB\uBECC\uBECD\uBECE\uBECF\uBED2\uBED3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBED5\uBED6\uBED9\uBEDA\uBEDB\uBEDC\uBEDD\uBEDE\uBEDF\uBEE1\uBEE2\uBEE6\uBEE7\uBEE8\uBEE9\uBEEA\uBEEB\uBEED\uBEEE\uBEEF\uBEF0\uBEF1\uBEF2\uBEF3\uBEF4\uBEF5\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBEF6\uBEF7\uBEF8\uBEF9\uBEFA\uBEFB\uBEFC\uBEFD\uBEFE\uBEFF\uBF00\uBF02\uBF03\uBF04\uBF05\uBF06\uBF07\uBF0A\uBF0B\uBF0C\uBF0D\uBF0E\uBF0F\uBF10\uBF11\uBF12\uBF13\uBF14\uBF15\uBF16\uBF17\uBF1A\uBF1E\uBF1F\uBF20\uBF21\uBF22\uBF23\uBF24\uBF25\uBF26\uBF27\uBF28\uBF29\uBF2A\uBF2B\uBF2C\uBF2D\uBF2E\uBF2F\uBF30\uBF31\uBF32\uBF33\uBF34\uBF35\uBF36\uBF37\uBF38\uBF39\uBF3A\uBF3B\uBF3C\uBF3D\uBF3E\uBF3F\uBF42\uBF43\uBF45\uBF46\uBF47\uBF49\uBF4A\uBF4B\uBF4C\uBF4D\uBF4E\uBF4F\uBF52\uBF53\uBF54\uBF56\uBF57\uBF58\uBF59\uBF5A\uBF5B\uBF5C\uBF5D\uBF5E\uBF5F\uBF60\uBF61\uBF62\uBF63\uBF64\uBF65\uBF66\uBF67\uBF68\uBF69\uBF6A\uBF6B\uBF6C\uBF6D\uBF6E\uBF6F\uBF70\uBF71\uBF72\uBF73\uBF74\uBF75\uBF76\uBF77\uBF78\uBF79\uBF7A\uBF7B\uBF7C\uBF7D\uBF7E\uBF7F\uBF80\uBF81\uBF82\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[150].length; ++j)
                if (D[150][j].charCodeAt(0) !== 65533) {
                    e2[D[150][j]] = 38400 + j;
                    d[38400 + j] = D[150][j];
                }
            D[151] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBF83\uBF84\uBF85\uBF86\uBF87\uBF88\uBF89\uBF8A\uBF8B\uBF8C\uBF8D\uBF8E\uBF8F\uBF90\uBF91\uBF92\uBF93\uBF95\uBF96\uBF97\uBF98\uBF99\uBF9A\uBF9B\uBF9C\uBF9D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBF9E\uBF9F\uBFA0\uBFA1\uBFA2\uBFA3\uBFA4\uBFA5\uBFA6\uBFA7\uBFA8\uBFA9\uBFAA\uBFAB\uBFAC\uBFAD\uBFAE\uBFAF\uBFB1\uBFB2\uBFB3\uBFB4\uBFB5\uBFB6\uBFB7\uBFB8\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uBFB9\uBFBA\uBFBB\uBFBC\uBFBD\uBFBE\uBFBF\uBFC0\uBFC1\uBFC2\uBFC3\uBFC4\uBFC6\uBFC7\uBFC8\uBFC9\uBFCA\uBFCB\uBFCE\uBFCF\uBFD1\uBFD2\uBFD3\uBFD5\uBFD6\uBFD7\uBFD8\uBFD9\uBFDA\uBFDB\uBFDD\uBFDE\uBFE0\uBFE2\uBFE3\uBFE4\uBFE5\uBFE6\uBFE7\uBFE8\uBFE9\uBFEA\uBFEB\uBFEC\uBFED\uBFEE\uBFEF\uBFF0\uBFF1\uBFF2\uBFF3\uBFF4\uBFF5\uBFF6\uBFF7\uBFF8\uBFF9\uBFFA\uBFFB\uBFFC\uBFFD\uBFFE\uBFFF\uC000\uC001\uC002\uC003\uC004\uC005\uC006\uC007\uC008\uC009\uC00A\uC00B\uC00C\uC00D\uC00E\uC00F\uC010\uC011\uC012\uC013\uC014\uC015\uC016\uC017\uC018\uC019\uC01A\uC01B\uC01C\uC01D\uC01E\uC01F\uC020\uC021\uC022\uC023\uC024\uC025\uC026\uC027\uC028\uC029\uC02A\uC02B\uC02C\uC02D\uC02E\uC02F\uC030\uC031\uC032\uC033\uC034\uC035\uC036\uC037\uC038\uC039\uC03A\uC03B\uC03D\uC03E\uC03F\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[151].length; ++j)
                if (D[151][j].charCodeAt(0) !== 65533) {
                    e2[D[151][j]] = 38656 + j;
                    d[38656 + j] = D[151][j];
                }
            D[152] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC040\uC041\uC042\uC043\uC044\uC045\uC046\uC047\uC048\uC049\uC04A\uC04B\uC04C\uC04D\uC04E\uC04F\uC050\uC052\uC053\uC054\uC055\uC056\uC057\uC059\uC05A\uC05B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC05D\uC05E\uC05F\uC061\uC062\uC063\uC064\uC065\uC066\uC067\uC06A\uC06B\uC06C\uC06D\uC06E\uC06F\uC070\uC071\uC072\uC073\uC074\uC075\uC076\uC077\uC078\uC079\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC07A\uC07B\uC07C\uC07D\uC07E\uC07F\uC080\uC081\uC082\uC083\uC084\uC085\uC086\uC087\uC088\uC089\uC08A\uC08B\uC08C\uC08D\uC08E\uC08F\uC092\uC093\uC095\uC096\uC097\uC099\uC09A\uC09B\uC09C\uC09D\uC09E\uC09F\uC0A2\uC0A4\uC0A6\uC0A7\uC0A8\uC0A9\uC0AA\uC0AB\uC0AE\uC0B1\uC0B2\uC0B7\uC0B8\uC0B9\uC0BA\uC0BB\uC0BE\uC0C2\uC0C3\uC0C4\uC0C6\uC0C7\uC0CA\uC0CB\uC0CD\uC0CE\uC0CF\uC0D1\uC0D2\uC0D3\uC0D4\uC0D5\uC0D6\uC0D7\uC0DA\uC0DE\uC0DF\uC0E0\uC0E1\uC0E2\uC0E3\uC0E6\uC0E7\uC0E9\uC0EA\uC0EB\uC0ED\uC0EE\uC0EF\uC0F0\uC0F1\uC0F2\uC0F3\uC0F6\uC0F8\uC0FA\uC0FB\uC0FC\uC0FD\uC0FE\uC0FF\uC101\uC102\uC103\uC105\uC106\uC107\uC109\uC10A\uC10B\uC10C\uC10D\uC10E\uC10F\uC111\uC112\uC113\uC114\uC116\uC117\uC118\uC119\uC11A\uC11B\uC121\uC122\uC125\uC128\uC129\uC12A\uC12B\uC12E\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[152].length; ++j)
                if (D[152][j].charCodeAt(0) !== 65533) {
                    e2[D[152][j]] = 38912 + j;
                    d[38912 + j] = D[152][j];
                }
            D[153] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC132\uC133\uC134\uC135\uC137\uC13A\uC13B\uC13D\uC13E\uC13F\uC141\uC142\uC143\uC144\uC145\uC146\uC147\uC14A\uC14E\uC14F\uC150\uC151\uC152\uC153\uC156\uC157\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC159\uC15A\uC15B\uC15D\uC15E\uC15F\uC160\uC161\uC162\uC163\uC166\uC16A\uC16B\uC16C\uC16D\uC16E\uC16F\uC171\uC172\uC173\uC175\uC176\uC177\uC179\uC17A\uC17B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC17C\uC17D\uC17E\uC17F\uC180\uC181\uC182\uC183\uC184\uC186\uC187\uC188\uC189\uC18A\uC18B\uC18F\uC191\uC192\uC193\uC195\uC197\uC198\uC199\uC19A\uC19B\uC19E\uC1A0\uC1A2\uC1A3\uC1A4\uC1A6\uC1A7\uC1AA\uC1AB\uC1AD\uC1AE\uC1AF\uC1B1\uC1B2\uC1B3\uC1B4\uC1B5\uC1B6\uC1B7\uC1B8\uC1B9\uC1BA\uC1BB\uC1BC\uC1BE\uC1BF\uC1C0\uC1C1\uC1C2\uC1C3\uC1C5\uC1C6\uC1C7\uC1C9\uC1CA\uC1CB\uC1CD\uC1CE\uC1CF\uC1D0\uC1D1\uC1D2\uC1D3\uC1D5\uC1D6\uC1D9\uC1DA\uC1DB\uC1DC\uC1DD\uC1DE\uC1DF\uC1E1\uC1E2\uC1E3\uC1E5\uC1E6\uC1E7\uC1E9\uC1EA\uC1EB\uC1EC\uC1ED\uC1EE\uC1EF\uC1F2\uC1F4\uC1F5\uC1F6\uC1F7\uC1F8\uC1F9\uC1FA\uC1FB\uC1FE\uC1FF\uC201\uC202\uC203\uC205\uC206\uC207\uC208\uC209\uC20A\uC20B\uC20E\uC210\uC212\uC213\uC214\uC215\uC216\uC217\uC21A\uC21B\uC21D\uC21E\uC221\uC222\uC223\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[153].length; ++j)
                if (D[153][j].charCodeAt(0) !== 65533) {
                    e2[D[153][j]] = 39168 + j;
                    d[39168 + j] = D[153][j];
                }
            D[154] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC224\uC225\uC226\uC227\uC22A\uC22C\uC22E\uC230\uC233\uC235\uC236\uC237\uC238\uC239\uC23A\uC23B\uC23C\uC23D\uC23E\uC23F\uC240\uC241\uC242\uC243\uC244\uC245\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC246\uC247\uC249\uC24A\uC24B\uC24C\uC24D\uC24E\uC24F\uC252\uC253\uC255\uC256\uC257\uC259\uC25A\uC25B\uC25C\uC25D\uC25E\uC25F\uC261\uC262\uC263\uC264\uC266\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC267\uC268\uC269\uC26A\uC26B\uC26E\uC26F\uC271\uC272\uC273\uC275\uC276\uC277\uC278\uC279\uC27A\uC27B\uC27E\uC280\uC282\uC283\uC284\uC285\uC286\uC287\uC28A\uC28B\uC28C\uC28D\uC28E\uC28F\uC291\uC292\uC293\uC294\uC295\uC296\uC297\uC299\uC29A\uC29C\uC29E\uC29F\uC2A0\uC2A1\uC2A2\uC2A3\uC2A6\uC2A7\uC2A9\uC2AA\uC2AB\uC2AE\uC2AF\uC2B0\uC2B1\uC2B2\uC2B3\uC2B6\uC2B8\uC2BA\uC2BB\uC2BC\uC2BD\uC2BE\uC2BF\uC2C0\uC2C1\uC2C2\uC2C3\uC2C4\uC2C5\uC2C6\uC2C7\uC2C8\uC2C9\uC2CA\uC2CB\uC2CC\uC2CD\uC2CE\uC2CF\uC2D0\uC2D1\uC2D2\uC2D3\uC2D4\uC2D5\uC2D6\uC2D7\uC2D8\uC2D9\uC2DA\uC2DB\uC2DE\uC2DF\uC2E1\uC2E2\uC2E5\uC2E6\uC2E7\uC2E8\uC2E9\uC2EA\uC2EE\uC2F0\uC2F2\uC2F3\uC2F4\uC2F5\uC2F7\uC2FA\uC2FD\uC2FE\uC2FF\uC301\uC302\uC303\uC304\uC305\uC306\uC307\uC30A\uC30B\uC30E\uC30F\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[154].length; ++j)
                if (D[154][j].charCodeAt(0) !== 65533) {
                    e2[D[154][j]] = 39424 + j;
                    d[39424 + j] = D[154][j];
                }
            D[155] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC310\uC311\uC312\uC316\uC317\uC319\uC31A\uC31B\uC31D\uC31E\uC31F\uC320\uC321\uC322\uC323\uC326\uC327\uC32A\uC32B\uC32C\uC32D\uC32E\uC32F\uC330\uC331\uC332\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC333\uC334\uC335\uC336\uC337\uC338\uC339\uC33A\uC33B\uC33C\uC33D\uC33E\uC33F\uC340\uC341\uC342\uC343\uC344\uC346\uC347\uC348\uC349\uC34A\uC34B\uC34C\uC34D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC34E\uC34F\uC350\uC351\uC352\uC353\uC354\uC355\uC356\uC357\uC358\uC359\uC35A\uC35B\uC35C\uC35D\uC35E\uC35F\uC360\uC361\uC362\uC363\uC364\uC365\uC366\uC367\uC36A\uC36B\uC36D\uC36E\uC36F\uC371\uC373\uC374\uC375\uC376\uC377\uC37A\uC37B\uC37E\uC37F\uC380\uC381\uC382\uC383\uC385\uC386\uC387\uC389\uC38A\uC38B\uC38D\uC38E\uC38F\uC390\uC391\uC392\uC393\uC394\uC395\uC396\uC397\uC398\uC399\uC39A\uC39B\uC39C\uC39D\uC39E\uC39F\uC3A0\uC3A1\uC3A2\uC3A3\uC3A4\uC3A5\uC3A6\uC3A7\uC3A8\uC3A9\uC3AA\uC3AB\uC3AC\uC3AD\uC3AE\uC3AF\uC3B0\uC3B1\uC3B2\uC3B3\uC3B4\uC3B5\uC3B6\uC3B7\uC3B8\uC3B9\uC3BA\uC3BB\uC3BC\uC3BD\uC3BE\uC3BF\uC3C1\uC3C2\uC3C3\uC3C4\uC3C5\uC3C6\uC3C7\uC3C8\uC3C9\uC3CA\uC3CB\uC3CC\uC3CD\uC3CE\uC3CF\uC3D0\uC3D1\uC3D2\uC3D3\uC3D4\uC3D5\uC3D6\uC3D7\uC3DA\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[155].length; ++j)
                if (D[155][j].charCodeAt(0) !== 65533) {
                    e2[D[155][j]] = 39680 + j;
                    d[39680 + j] = D[155][j];
                }
            D[156] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC3DB\uC3DD\uC3DE\uC3E1\uC3E3\uC3E4\uC3E5\uC3E6\uC3E7\uC3EA\uC3EB\uC3EC\uC3EE\uC3EF\uC3F0\uC3F1\uC3F2\uC3F3\uC3F6\uC3F7\uC3F9\uC3FA\uC3FB\uC3FC\uC3FD\uC3FE\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC3FF\uC400\uC401\uC402\uC403\uC404\uC405\uC406\uC407\uC409\uC40A\uC40B\uC40C\uC40D\uC40E\uC40F\uC411\uC412\uC413\uC414\uC415\uC416\uC417\uC418\uC419\uC41A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC41B\uC41C\uC41D\uC41E\uC41F\uC420\uC421\uC422\uC423\uC425\uC426\uC427\uC428\uC429\uC42A\uC42B\uC42D\uC42E\uC42F\uC431\uC432\uC433\uC435\uC436\uC437\uC438\uC439\uC43A\uC43B\uC43E\uC43F\uC440\uC441\uC442\uC443\uC444\uC445\uC446\uC447\uC449\uC44A\uC44B\uC44C\uC44D\uC44E\uC44F\uC450\uC451\uC452\uC453\uC454\uC455\uC456\uC457\uC458\uC459\uC45A\uC45B\uC45C\uC45D\uC45E\uC45F\uC460\uC461\uC462\uC463\uC466\uC467\uC469\uC46A\uC46B\uC46D\uC46E\uC46F\uC470\uC471\uC472\uC473\uC476\uC477\uC478\uC47A\uC47B\uC47C\uC47D\uC47E\uC47F\uC481\uC482\uC483\uC484\uC485\uC486\uC487\uC488\uC489\uC48A\uC48B\uC48C\uC48D\uC48E\uC48F\uC490\uC491\uC492\uC493\uC495\uC496\uC497\uC498\uC499\uC49A\uC49B\uC49D\uC49E\uC49F\uC4A0\uC4A1\uC4A2\uC4A3\uC4A4\uC4A5\uC4A6\uC4A7\uC4A8\uC4A9\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[156].length; ++j)
                if (D[156][j].charCodeAt(0) !== 65533) {
                    e2[D[156][j]] = 39936 + j;
                    d[39936 + j] = D[156][j];
                }
            D[157] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC4AA\uC4AB\uC4AC\uC4AD\uC4AE\uC4AF\uC4B0\uC4B1\uC4B2\uC4B3\uC4B4\uC4B5\uC4B6\uC4B7\uC4B9\uC4BA\uC4BB\uC4BD\uC4BE\uC4BF\uC4C0\uC4C1\uC4C2\uC4C3\uC4C4\uC4C5\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC4C6\uC4C7\uC4C8\uC4C9\uC4CA\uC4CB\uC4CC\uC4CD\uC4CE\uC4CF\uC4D0\uC4D1\uC4D2\uC4D3\uC4D4\uC4D5\uC4D6\uC4D7\uC4D8\uC4D9\uC4DA\uC4DB\uC4DC\uC4DD\uC4DE\uC4DF\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC4E0\uC4E1\uC4E2\uC4E3\uC4E4\uC4E5\uC4E6\uC4E7\uC4E8\uC4EA\uC4EB\uC4EC\uC4ED\uC4EE\uC4EF\uC4F2\uC4F3\uC4F5\uC4F6\uC4F7\uC4F9\uC4FB\uC4FC\uC4FD\uC4FE\uC502\uC503\uC504\uC505\uC506\uC507\uC508\uC509\uC50A\uC50B\uC50D\uC50E\uC50F\uC511\uC512\uC513\uC515\uC516\uC517\uC518\uC519\uC51A\uC51B\uC51D\uC51E\uC51F\uC520\uC521\uC522\uC523\uC524\uC525\uC526\uC527\uC52A\uC52B\uC52D\uC52E\uC52F\uC531\uC532\uC533\uC534\uC535\uC536\uC537\uC53A\uC53C\uC53E\uC53F\uC540\uC541\uC542\uC543\uC546\uC547\uC54B\uC54F\uC550\uC551\uC552\uC556\uC55A\uC55B\uC55C\uC55F\uC562\uC563\uC565\uC566\uC567\uC569\uC56A\uC56B\uC56C\uC56D\uC56E\uC56F\uC572\uC576\uC577\uC578\uC579\uC57A\uC57B\uC57E\uC57F\uC581\uC582\uC583\uC585\uC586\uC588\uC589\uC58A\uC58B\uC58E\uC590\uC592\uC593\uC594\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[157].length; ++j)
                if (D[157][j].charCodeAt(0) !== 65533) {
                    e2[D[157][j]] = 40192 + j;
                    d[40192 + j] = D[157][j];
                }
            D[158] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC596\uC599\uC59A\uC59B\uC59D\uC59E\uC59F\uC5A1\uC5A2\uC5A3\uC5A4\uC5A5\uC5A6\uC5A7\uC5A8\uC5AA\uC5AB\uC5AC\uC5AD\uC5AE\uC5AF\uC5B0\uC5B1\uC5B2\uC5B3\uC5B6\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC5B7\uC5BA\uC5BF\uC5C0\uC5C1\uC5C2\uC5C3\uC5CB\uC5CD\uC5CF\uC5D2\uC5D3\uC5D5\uC5D6\uC5D7\uC5D9\uC5DA\uC5DB\uC5DC\uC5DD\uC5DE\uC5DF\uC5E2\uC5E4\uC5E6\uC5E7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC5E8\uC5E9\uC5EA\uC5EB\uC5EF\uC5F1\uC5F2\uC5F3\uC5F5\uC5F8\uC5F9\uC5FA\uC5FB\uC602\uC603\uC604\uC609\uC60A\uC60B\uC60D\uC60E\uC60F\uC611\uC612\uC613\uC614\uC615\uC616\uC617\uC61A\uC61D\uC61E\uC61F\uC620\uC621\uC622\uC623\uC626\uC627\uC629\uC62A\uC62B\uC62F\uC631\uC632\uC636\uC638\uC63A\uC63C\uC63D\uC63E\uC63F\uC642\uC643\uC645\uC646\uC647\uC649\uC64A\uC64B\uC64C\uC64D\uC64E\uC64F\uC652\uC656\uC657\uC658\uC659\uC65A\uC65B\uC65E\uC65F\uC661\uC662\uC663\uC664\uC665\uC666\uC667\uC668\uC669\uC66A\uC66B\uC66D\uC66E\uC670\uC672\uC673\uC674\uC675\uC676\uC677\uC67A\uC67B\uC67D\uC67E\uC67F\uC681\uC682\uC683\uC684\uC685\uC686\uC687\uC68A\uC68C\uC68E\uC68F\uC690\uC691\uC692\uC693\uC696\uC697\uC699\uC69A\uC69B\uC69D\uC69E\uC69F\uC6A0\uC6A1\uC6A2\uC6A3\uC6A6\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[158].length; ++j)
                if (D[158][j].charCodeAt(0) !== 65533) {
                    e2[D[158][j]] = 40448 + j;
                    d[40448 + j] = D[158][j];
                }
            D[159] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC6A8\uC6AA\uC6AB\uC6AC\uC6AD\uC6AE\uC6AF\uC6B2\uC6B3\uC6B5\uC6B6\uC6B7\uC6BB\uC6BC\uC6BD\uC6BE\uC6BF\uC6C2\uC6C4\uC6C6\uC6C7\uC6C8\uC6C9\uC6CA\uC6CB\uC6CE\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC6CF\uC6D1\uC6D2\uC6D3\uC6D5\uC6D6\uC6D7\uC6D8\uC6D9\uC6DA\uC6DB\uC6DE\uC6DF\uC6E2\uC6E3\uC6E4\uC6E5\uC6E6\uC6E7\uC6EA\uC6EB\uC6ED\uC6EE\uC6EF\uC6F1\uC6F2\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC6F3\uC6F4\uC6F5\uC6F6\uC6F7\uC6FA\uC6FB\uC6FC\uC6FE\uC6FF\uC700\uC701\uC702\uC703\uC706\uC707\uC709\uC70A\uC70B\uC70D\uC70E\uC70F\uC710\uC711\uC712\uC713\uC716\uC718\uC71A\uC71B\uC71C\uC71D\uC71E\uC71F\uC722\uC723\uC725\uC726\uC727\uC729\uC72A\uC72B\uC72C\uC72D\uC72E\uC72F\uC732\uC734\uC736\uC738\uC739\uC73A\uC73B\uC73E\uC73F\uC741\uC742\uC743\uC745\uC746\uC747\uC748\uC749\uC74B\uC74E\uC750\uC759\uC75A\uC75B\uC75D\uC75E\uC75F\uC761\uC762\uC763\uC764\uC765\uC766\uC767\uC769\uC76A\uC76C\uC76D\uC76E\uC76F\uC770\uC771\uC772\uC773\uC776\uC777\uC779\uC77A\uC77B\uC77F\uC780\uC781\uC782\uC786\uC78B\uC78C\uC78D\uC78F\uC792\uC793\uC795\uC799\uC79B\uC79C\uC79D\uC79E\uC79F\uC7A2\uC7A7\uC7A8\uC7A9\uC7AA\uC7AB\uC7AE\uC7AF\uC7B1\uC7B2\uC7B3\uC7B5\uC7B6\uC7B7\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[159].length; ++j)
                if (D[159][j].charCodeAt(0) !== 65533) {
                    e2[D[159][j]] = 40704 + j;
                    d[40704 + j] = D[159][j];
                }
            D[160] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC7B8\uC7B9\uC7BA\uC7BB\uC7BE\uC7C2\uC7C3\uC7C4\uC7C5\uC7C6\uC7C7\uC7CA\uC7CB\uC7CD\uC7CF\uC7D1\uC7D2\uC7D3\uC7D4\uC7D5\uC7D6\uC7D7\uC7D9\uC7DA\uC7DB\uC7DC\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC7DE\uC7DF\uC7E0\uC7E1\uC7E2\uC7E3\uC7E5\uC7E6\uC7E7\uC7E9\uC7EA\uC7EB\uC7ED\uC7EE\uC7EF\uC7F0\uC7F1\uC7F2\uC7F3\uC7F4\uC7F5\uC7F6\uC7F7\uC7F8\uC7F9\uC7FA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC7FB\uC7FC\uC7FD\uC7FE\uC7FF\uC802\uC803\uC805\uC806\uC807\uC809\uC80B\uC80C\uC80D\uC80E\uC80F\uC812\uC814\uC817\uC818\uC819\uC81A\uC81B\uC81E\uC81F\uC821\uC822\uC823\uC825\uC826\uC827\uC828\uC829\uC82A\uC82B\uC82E\uC830\uC832\uC833\uC834\uC835\uC836\uC837\uC839\uC83A\uC83B\uC83D\uC83E\uC83F\uC841\uC842\uC843\uC844\uC845\uC846\uC847\uC84A\uC84B\uC84E\uC84F\uC850\uC851\uC852\uC853\uC855\uC856\uC857\uC858\uC859\uC85A\uC85B\uC85C\uC85D\uC85E\uC85F\uC860\uC861\uC862\uC863\uC864\uC865\uC866\uC867\uC868\uC869\uC86A\uC86B\uC86C\uC86D\uC86E\uC86F\uC872\uC873\uC875\uC876\uC877\uC879\uC87B\uC87C\uC87D\uC87E\uC87F\uC882\uC884\uC888\uC889\uC88A\uC88E\uC88F\uC890\uC891\uC892\uC893\uC895\uC896\uC897\uC898\uC899\uC89A\uC89B\uC89C\uC89E\uC8A0\uC8A2\uC8A3\uC8A4\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[160].length; ++j)
                if (D[160][j].charCodeAt(0) !== 65533) {
                    e2[D[160][j]] = 40960 + j;
                    d[40960 + j] = D[160][j];
                }
            D[161] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC8A5\uC8A6\uC8A7\uC8A9\uC8AA\uC8AB\uC8AC\uC8AD\uC8AE\uC8AF\uC8B0\uC8B1\uC8B2\uC8B3\uC8B4\uC8B5\uC8B6\uC8B7\uC8B8\uC8B9\uC8BA\uC8BB\uC8BE\uC8BF\uC8C0\uC8C1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC8C2\uC8C3\uC8C5\uC8C6\uC8C7\uC8C9\uC8CA\uC8CB\uC8CD\uC8CE\uC8CF\uC8D0\uC8D1\uC8D2\uC8D3\uC8D6\uC8D8\uC8DA\uC8DB\uC8DC\uC8DD\uC8DE\uC8DF\uC8E2\uC8E3\uC8E5\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC8E6\uC8E7\uC8E8\uC8E9\uC8EA\uC8EB\uC8EC\uC8ED\uC8EE\uC8EF\uC8F0\uC8F1\uC8F2\uC8F3\uC8F4\uC8F6\uC8F7\uC8F8\uC8F9\uC8FA\uC8FB\uC8FE\uC8FF\uC901\uC902\uC903\uC907\uC908\uC909\uC90A\uC90B\uC90E\u3000\u3001\u3002\xB7\u2025\u2026\xA8\u3003\xAD\u2015\u2225\uFF3C\u223C\u2018\u2019\u201C\u201D\u3014\u3015\u3008\u3009\u300A\u300B\u300C\u300D\u300E\u300F\u3010\u3011\xB1\xD7\xF7\u2260\u2264\u2265\u221E\u2234\xB0\u2032\u2033\u2103\u212B\uFFE0\uFFE1\uFFE5\u2642\u2640\u2220\u22A5\u2312\u2202\u2207\u2261\u2252\xA7\u203B\u2606\u2605\u25CB\u25CF\u25CE\u25C7\u25C6\u25A1\u25A0\u25B3\u25B2\u25BD\u25BC\u2192\u2190\u2191\u2193\u2194\u3013\u226A\u226B\u221A\u223D\u221D\u2235\u222B\u222C\u2208\u220B\u2286\u2287\u2282\u2283\u222A\u2229\u2227\u2228\uFFE2\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[161].length; ++j)
                if (D[161][j].charCodeAt(0) !== 65533) {
                    e2[D[161][j]] = 41216 + j;
                    d[41216 + j] = D[161][j];
                }
            D[162] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC910\uC912\uC913\uC914\uC915\uC916\uC917\uC919\uC91A\uC91B\uC91C\uC91D\uC91E\uC91F\uC920\uC921\uC922\uC923\uC924\uC925\uC926\uC927\uC928\uC929\uC92A\uC92B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC92D\uC92E\uC92F\uC930\uC931\uC932\uC933\uC935\uC936\uC937\uC938\uC939\uC93A\uC93B\uC93C\uC93D\uC93E\uC93F\uC940\uC941\uC942\uC943\uC944\uC945\uC946\uC947\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC948\uC949\uC94A\uC94B\uC94C\uC94D\uC94E\uC94F\uC952\uC953\uC955\uC956\uC957\uC959\uC95A\uC95B\uC95C\uC95D\uC95E\uC95F\uC962\uC964\uC965\uC966\uC967\uC968\uC969\uC96A\uC96B\uC96D\uC96E\uC96F\u21D2\u21D4\u2200\u2203\xB4\uFF5E\u02C7\u02D8\u02DD\u02DA\u02D9\xB8\u02DB\xA1\xBF\u02D0\u222E\u2211\u220F\xA4\u2109\u2030\u25C1\u25C0\u25B7\u25B6\u2664\u2660\u2661\u2665\u2667\u2663\u2299\u25C8\u25A3\u25D0\u25D1\u2592\u25A4\u25A5\u25A8\u25A7\u25A6\u25A9\u2668\u260F\u260E\u261C\u261E\xB6\u2020\u2021\u2195\u2197\u2199\u2196\u2198\u266D\u2669\u266A\u266C\u327F\u321C\u2116\u33C7\u2122\u33C2\u33D8\u2121\u20AC\xAE\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[162].length; ++j)
                if (D[162][j].charCodeAt(0) !== 65533) {
                    e2[D[162][j]] = 41472 + j;
                    d[41472 + j] = D[162][j];
                }
            D[163] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC971\uC972\uC973\uC975\uC976\uC977\uC978\uC979\uC97A\uC97B\uC97D\uC97E\uC97F\uC980\uC981\uC982\uC983\uC984\uC985\uC986\uC987\uC98A\uC98B\uC98D\uC98E\uC98F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC991\uC992\uC993\uC994\uC995\uC996\uC997\uC99A\uC99C\uC99E\uC99F\uC9A0\uC9A1\uC9A2\uC9A3\uC9A4\uC9A5\uC9A6\uC9A7\uC9A8\uC9A9\uC9AA\uC9AB\uC9AC\uC9AD\uC9AE\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC9AF\uC9B0\uC9B1\uC9B2\uC9B3\uC9B4\uC9B5\uC9B6\uC9B7\uC9B8\uC9B9\uC9BA\uC9BB\uC9BC\uC9BD\uC9BE\uC9BF\uC9C2\uC9C3\uC9C5\uC9C6\uC9C9\uC9CB\uC9CC\uC9CD\uC9CE\uC9CF\uC9D2\uC9D4\uC9D7\uC9D8\uC9DB\uFF01\uFF02\uFF03\uFF04\uFF05\uFF06\uFF07\uFF08\uFF09\uFF0A\uFF0B\uFF0C\uFF0D\uFF0E\uFF0F\uFF10\uFF11\uFF12\uFF13\uFF14\uFF15\uFF16\uFF17\uFF18\uFF19\uFF1A\uFF1B\uFF1C\uFF1D\uFF1E\uFF1F\uFF20\uFF21\uFF22\uFF23\uFF24\uFF25\uFF26\uFF27\uFF28\uFF29\uFF2A\uFF2B\uFF2C\uFF2D\uFF2E\uFF2F\uFF30\uFF31\uFF32\uFF33\uFF34\uFF35\uFF36\uFF37\uFF38\uFF39\uFF3A\uFF3B\uFFE6\uFF3D\uFF3E\uFF3F\uFF40\uFF41\uFF42\uFF43\uFF44\uFF45\uFF46\uFF47\uFF48\uFF49\uFF4A\uFF4B\uFF4C\uFF4D\uFF4E\uFF4F\uFF50\uFF51\uFF52\uFF53\uFF54\uFF55\uFF56\uFF57\uFF58\uFF59\uFF5A\uFF5B\uFF5C\uFF5D\uFFE3\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[163].length; ++j)
                if (D[163][j].charCodeAt(0) !== 65533) {
                    e2[D[163][j]] = 41728 + j;
                    d[41728 + j] = D[163][j];
                }
            D[164] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uC9DE\uC9DF\uC9E1\uC9E3\uC9E5\uC9E6\uC9E8\uC9E9\uC9EA\uC9EB\uC9EE\uC9F2\uC9F3\uC9F4\uC9F5\uC9F6\uC9F7\uC9FA\uC9FB\uC9FD\uC9FE\uC9FF\uCA01\uCA02\uCA03\uCA04\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCA05\uCA06\uCA07\uCA0A\uCA0E\uCA0F\uCA10\uCA11\uCA12\uCA13\uCA15\uCA16\uCA17\uCA19\uCA1A\uCA1B\uCA1C\uCA1D\uCA1E\uCA1F\uCA20\uCA21\uCA22\uCA23\uCA24\uCA25\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCA26\uCA27\uCA28\uCA2A\uCA2B\uCA2C\uCA2D\uCA2E\uCA2F\uCA30\uCA31\uCA32\uCA33\uCA34\uCA35\uCA36\uCA37\uCA38\uCA39\uCA3A\uCA3B\uCA3C\uCA3D\uCA3E\uCA3F\uCA40\uCA41\uCA42\uCA43\uCA44\uCA45\uCA46\u3131\u3132\u3133\u3134\u3135\u3136\u3137\u3138\u3139\u313A\u313B\u313C\u313D\u313E\u313F\u3140\u3141\u3142\u3143\u3144\u3145\u3146\u3147\u3148\u3149\u314A\u314B\u314C\u314D\u314E\u314F\u3150\u3151\u3152\u3153\u3154\u3155\u3156\u3157\u3158\u3159\u315A\u315B\u315C\u315D\u315E\u315F\u3160\u3161\u3162\u3163\u3164\u3165\u3166\u3167\u3168\u3169\u316A\u316B\u316C\u316D\u316E\u316F\u3170\u3171\u3172\u3173\u3174\u3175\u3176\u3177\u3178\u3179\u317A\u317B\u317C\u317D\u317E\u317F\u3180\u3181\u3182\u3183\u3184\u3185\u3186\u3187\u3188\u3189\u318A\u318B\u318C\u318D\u318E\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[164].length; ++j)
                if (D[164][j].charCodeAt(0) !== 65533) {
                    e2[D[164][j]] = 41984 + j;
                    d[41984 + j] = D[164][j];
                }
            D[165] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCA47\uCA48\uCA49\uCA4A\uCA4B\uCA4E\uCA4F\uCA51\uCA52\uCA53\uCA55\uCA56\uCA57\uCA58\uCA59\uCA5A\uCA5B\uCA5E\uCA62\uCA63\uCA64\uCA65\uCA66\uCA67\uCA69\uCA6A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCA6B\uCA6C\uCA6D\uCA6E\uCA6F\uCA70\uCA71\uCA72\uCA73\uCA74\uCA75\uCA76\uCA77\uCA78\uCA79\uCA7A\uCA7B\uCA7C\uCA7E\uCA7F\uCA80\uCA81\uCA82\uCA83\uCA85\uCA86\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCA87\uCA88\uCA89\uCA8A\uCA8B\uCA8C\uCA8D\uCA8E\uCA8F\uCA90\uCA91\uCA92\uCA93\uCA94\uCA95\uCA96\uCA97\uCA99\uCA9A\uCA9B\uCA9C\uCA9D\uCA9E\uCA9F\uCAA0\uCAA1\uCAA2\uCAA3\uCAA4\uCAA5\uCAA6\uCAA7\u2170\u2171\u2172\u2173\u2174\u2175\u2176\u2177\u2178\u2179\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2160\u2161\u2162\u2163\u2164\u2165\u2166\u2167\u2168\u2169\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C3\u03C4\u03C5\u03C6\u03C7\u03C8\u03C9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[165].length; ++j)
                if (D[165][j].charCodeAt(0) !== 65533) {
                    e2[D[165][j]] = 42240 + j;
                    d[42240 + j] = D[165][j];
                }
            D[166] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCAA8\uCAA9\uCAAA\uCAAB\uCAAC\uCAAD\uCAAE\uCAAF\uCAB0\uCAB1\uCAB2\uCAB3\uCAB4\uCAB5\uCAB6\uCAB7\uCAB8\uCAB9\uCABA\uCABB\uCABE\uCABF\uCAC1\uCAC2\uCAC3\uCAC5\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCAC6\uCAC7\uCAC8\uCAC9\uCACA\uCACB\uCACE\uCAD0\uCAD2\uCAD4\uCAD5\uCAD6\uCAD7\uCADA\uCADB\uCADC\uCADD\uCADE\uCADF\uCAE1\uCAE2\uCAE3\uCAE4\uCAE5\uCAE6\uCAE7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCAE8\uCAE9\uCAEA\uCAEB\uCAED\uCAEE\uCAEF\uCAF0\uCAF1\uCAF2\uCAF3\uCAF5\uCAF6\uCAF7\uCAF8\uCAF9\uCAFA\uCAFB\uCAFC\uCAFD\uCAFE\uCAFF\uCB00\uCB01\uCB02\uCB03\uCB04\uCB05\uCB06\uCB07\uCB09\uCB0A\u2500\u2502\u250C\u2510\u2518\u2514\u251C\u252C\u2524\u2534\u253C\u2501\u2503\u250F\u2513\u251B\u2517\u2523\u2533\u252B\u253B\u254B\u2520\u252F\u2528\u2537\u253F\u251D\u2530\u2525\u2538\u2542\u2512\u2511\u251A\u2519\u2516\u2515\u250E\u250D\u251E\u251F\u2521\u2522\u2526\u2527\u2529\u252A\u252D\u252E\u2531\u2532\u2535\u2536\u2539\u253A\u253D\u253E\u2540\u2541\u2543\u2544\u2545\u2546\u2547\u2548\u2549\u254A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[166].length; ++j)
                if (D[166][j].charCodeAt(0) !== 65533) {
                    e2[D[166][j]] = 42496 + j;
                    d[42496 + j] = D[166][j];
                }
            D[167] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCB0B\uCB0C\uCB0D\uCB0E\uCB0F\uCB11\uCB12\uCB13\uCB15\uCB16\uCB17\uCB19\uCB1A\uCB1B\uCB1C\uCB1D\uCB1E\uCB1F\uCB22\uCB23\uCB24\uCB25\uCB26\uCB27\uCB28\uCB29\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCB2A\uCB2B\uCB2C\uCB2D\uCB2E\uCB2F\uCB30\uCB31\uCB32\uCB33\uCB34\uCB35\uCB36\uCB37\uCB38\uCB39\uCB3A\uCB3B\uCB3C\uCB3D\uCB3E\uCB3F\uCB40\uCB42\uCB43\uCB44\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCB45\uCB46\uCB47\uCB4A\uCB4B\uCB4D\uCB4E\uCB4F\uCB51\uCB52\uCB53\uCB54\uCB55\uCB56\uCB57\uCB5A\uCB5B\uCB5C\uCB5E\uCB5F\uCB60\uCB61\uCB62\uCB63\uCB65\uCB66\uCB67\uCB68\uCB69\uCB6A\uCB6B\uCB6C\u3395\u3396\u3397\u2113\u3398\u33C4\u33A3\u33A4\u33A5\u33A6\u3399\u339A\u339B\u339C\u339D\u339E\u339F\u33A0\u33A1\u33A2\u33CA\u338D\u338E\u338F\u33CF\u3388\u3389\u33C8\u33A7\u33A8\u33B0\u33B1\u33B2\u33B3\u33B4\u33B5\u33B6\u33B7\u33B8\u33B9\u3380\u3381\u3382\u3383\u3384\u33BA\u33BB\u33BC\u33BD\u33BE\u33BF\u3390\u3391\u3392\u3393\u3394\u2126\u33C0\u33C1\u338A\u338B\u338C\u33D6\u33C5\u33AD\u33AE\u33AF\u33DB\u33A9\u33AA\u33AB\u33AC\u33DD\u33D0\u33D3\u33C3\u33C9\u33DC\u33C6\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[167].length; ++j)
                if (D[167][j].charCodeAt(0) !== 65533) {
                    e2[D[167][j]] = 42752 + j;
                    d[42752 + j] = D[167][j];
                }
            D[168] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCB6D\uCB6E\uCB6F\uCB70\uCB71\uCB72\uCB73\uCB74\uCB75\uCB76\uCB77\uCB7A\uCB7B\uCB7C\uCB7D\uCB7E\uCB7F\uCB80\uCB81\uCB82\uCB83\uCB84\uCB85\uCB86\uCB87\uCB88\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCB89\uCB8A\uCB8B\uCB8C\uCB8D\uCB8E\uCB8F\uCB90\uCB91\uCB92\uCB93\uCB94\uCB95\uCB96\uCB97\uCB98\uCB99\uCB9A\uCB9B\uCB9D\uCB9E\uCB9F\uCBA0\uCBA1\uCBA2\uCBA3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCBA4\uCBA5\uCBA6\uCBA7\uCBA8\uCBA9\uCBAA\uCBAB\uCBAC\uCBAD\uCBAE\uCBAF\uCBB0\uCBB1\uCBB2\uCBB3\uCBB4\uCBB5\uCBB6\uCBB7\uCBB9\uCBBA\uCBBB\uCBBC\uCBBD\uCBBE\uCBBF\uCBC0\uCBC1\uCBC2\uCBC3\uCBC4\xC6\xD0\xAA\u0126\uFFFD\u0132\uFFFD\u013F\u0141\xD8\u0152\xBA\xDE\u0166\u014A\uFFFD\u3260\u3261\u3262\u3263\u3264\u3265\u3266\u3267\u3268\u3269\u326A\u326B\u326C\u326D\u326E\u326F\u3270\u3271\u3272\u3273\u3274\u3275\u3276\u3277\u3278\u3279\u327A\u327B\u24D0\u24D1\u24D2\u24D3\u24D4\u24D5\u24D6\u24D7\u24D8\u24D9\u24DA\u24DB\u24DC\u24DD\u24DE\u24DF\u24E0\u24E1\u24E2\u24E3\u24E4\u24E5\u24E6\u24E7\u24E8\u24E9\u2460\u2461\u2462\u2463\u2464\u2465\u2466\u2467\u2468\u2469\u246A\u246B\u246C\u246D\u246E\xBD\u2153\u2154\xBC\xBE\u215B\u215C\u215D\u215E\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[168].length; ++j)
                if (D[168][j].charCodeAt(0) !== 65533) {
                    e2[D[168][j]] = 43008 + j;
                    d[43008 + j] = D[168][j];
                }
            D[169] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCBC5\uCBC6\uCBC7\uCBC8\uCBC9\uCBCA\uCBCB\uCBCC\uCBCD\uCBCE\uCBCF\uCBD0\uCBD1\uCBD2\uCBD3\uCBD5\uCBD6\uCBD7\uCBD8\uCBD9\uCBDA\uCBDB\uCBDC\uCBDD\uCBDE\uCBDF\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCBE0\uCBE1\uCBE2\uCBE3\uCBE5\uCBE6\uCBE8\uCBEA\uCBEB\uCBEC\uCBED\uCBEE\uCBEF\uCBF0\uCBF1\uCBF2\uCBF3\uCBF4\uCBF5\uCBF6\uCBF7\uCBF8\uCBF9\uCBFA\uCBFB\uCBFC\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCBFD\uCBFE\uCBFF\uCC00\uCC01\uCC02\uCC03\uCC04\uCC05\uCC06\uCC07\uCC08\uCC09\uCC0A\uCC0B\uCC0E\uCC0F\uCC11\uCC12\uCC13\uCC15\uCC16\uCC17\uCC18\uCC19\uCC1A\uCC1B\uCC1E\uCC1F\uCC20\uCC23\uCC24\xE6\u0111\xF0\u0127\u0131\u0133\u0138\u0140\u0142\xF8\u0153\xDF\xFE\u0167\u014B\u0149\u3200\u3201\u3202\u3203\u3204\u3205\u3206\u3207\u3208\u3209\u320A\u320B\u320C\u320D\u320E\u320F\u3210\u3211\u3212\u3213\u3214\u3215\u3216\u3217\u3218\u3219\u321A\u321B\u249C\u249D\u249E\u249F\u24A0\u24A1\u24A2\u24A3\u24A4\u24A5\u24A6\u24A7\u24A8\u24A9\u24AA\u24AB\u24AC\u24AD\u24AE\u24AF\u24B0\u24B1\u24B2\u24B3\u24B4\u24B5\u2474\u2475\u2476\u2477\u2478\u2479\u247A\u247B\u247C\u247D\u247E\u247F\u2480\u2481\u2482\xB9\xB2\xB3\u2074\u207F\u2081\u2082\u2083\u2084\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[169].length; ++j)
                if (D[169][j].charCodeAt(0) !== 65533) {
                    e2[D[169][j]] = 43264 + j;
                    d[43264 + j] = D[169][j];
                }
            D[170] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCC25\uCC26\uCC2A\uCC2B\uCC2D\uCC2F\uCC31\uCC32\uCC33\uCC34\uCC35\uCC36\uCC37\uCC3A\uCC3F\uCC40\uCC41\uCC42\uCC43\uCC46\uCC47\uCC49\uCC4A\uCC4B\uCC4D\uCC4E\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCC4F\uCC50\uCC51\uCC52\uCC53\uCC56\uCC5A\uCC5B\uCC5C\uCC5D\uCC5E\uCC5F\uCC61\uCC62\uCC63\uCC65\uCC67\uCC69\uCC6A\uCC6B\uCC6C\uCC6D\uCC6E\uCC6F\uCC71\uCC72\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCC73\uCC74\uCC76\uCC77\uCC78\uCC79\uCC7A\uCC7B\uCC7C\uCC7D\uCC7E\uCC7F\uCC80\uCC81\uCC82\uCC83\uCC84\uCC85\uCC86\uCC87\uCC88\uCC89\uCC8A\uCC8B\uCC8C\uCC8D\uCC8E\uCC8F\uCC90\uCC91\uCC92\uCC93\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304A\u304B\u304C\u304D\u304E\u304F\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305A\u305B\u305C\u305D\u305E\u305F\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306A\u306B\u306C\u306D\u306E\u306F\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307A\u307B\u307C\u307D\u307E\u307F\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308A\u308B\u308C\u308D\u308E\u308F\u3090\u3091\u3092\u3093\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[170].length; ++j)
                if (D[170][j].charCodeAt(0) !== 65533) {
                    e2[D[170][j]] = 43520 + j;
                    d[43520 + j] = D[170][j];
                }
            D[171] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCC94\uCC95\uCC96\uCC97\uCC9A\uCC9B\uCC9D\uCC9E\uCC9F\uCCA1\uCCA2\uCCA3\uCCA4\uCCA5\uCCA6\uCCA7\uCCAA\uCCAE\uCCAF\uCCB0\uCCB1\uCCB2\uCCB3\uCCB6\uCCB7\uCCB9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCCBA\uCCBB\uCCBD\uCCBE\uCCBF\uCCC0\uCCC1\uCCC2\uCCC3\uCCC6\uCCC8\uCCCA\uCCCB\uCCCC\uCCCD\uCCCE\uCCCF\uCCD1\uCCD2\uCCD3\uCCD5\uCCD6\uCCD7\uCCD8\uCCD9\uCCDA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCCDB\uCCDC\uCCDD\uCCDE\uCCDF\uCCE0\uCCE1\uCCE2\uCCE3\uCCE5\uCCE6\uCCE7\uCCE8\uCCE9\uCCEA\uCCEB\uCCED\uCCEE\uCCEF\uCCF1\uCCF2\uCCF3\uCCF4\uCCF5\uCCF6\uCCF7\uCCF8\uCCF9\uCCFA\uCCFB\uCCFC\uCCFD\u30A1\u30A2\u30A3\u30A4\u30A5\u30A6\u30A7\u30A8\u30A9\u30AA\u30AB\u30AC\u30AD\u30AE\u30AF\u30B0\u30B1\u30B2\u30B3\u30B4\u30B5\u30B6\u30B7\u30B8\u30B9\u30BA\u30BB\u30BC\u30BD\u30BE\u30BF\u30C0\u30C1\u30C2\u30C3\u30C4\u30C5\u30C6\u30C7\u30C8\u30C9\u30CA\u30CB\u30CC\u30CD\u30CE\u30CF\u30D0\u30D1\u30D2\u30D3\u30D4\u30D5\u30D6\u30D7\u30D8\u30D9\u30DA\u30DB\u30DC\u30DD\u30DE\u30DF\u30E0\u30E1\u30E2\u30E3\u30E4\u30E5\u30E6\u30E7\u30E8\u30E9\u30EA\u30EB\u30EC\u30ED\u30EE\u30EF\u30F0\u30F1\u30F2\u30F3\u30F4\u30F5\u30F6\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[171].length; ++j)
                if (D[171][j].charCodeAt(0) !== 65533) {
                    e2[D[171][j]] = 43776 + j;
                    d[43776 + j] = D[171][j];
                }
            D[172] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCCFE\uCCFF\uCD00\uCD02\uCD03\uCD04\uCD05\uCD06\uCD07\uCD0A\uCD0B\uCD0D\uCD0E\uCD0F\uCD11\uCD12\uCD13\uCD14\uCD15\uCD16\uCD17\uCD1A\uCD1C\uCD1E\uCD1F\uCD20\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCD21\uCD22\uCD23\uCD25\uCD26\uCD27\uCD29\uCD2A\uCD2B\uCD2D\uCD2E\uCD2F\uCD30\uCD31\uCD32\uCD33\uCD34\uCD35\uCD36\uCD37\uCD38\uCD3A\uCD3B\uCD3C\uCD3D\uCD3E\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCD3F\uCD40\uCD41\uCD42\uCD43\uCD44\uCD45\uCD46\uCD47\uCD48\uCD49\uCD4A\uCD4B\uCD4C\uCD4D\uCD4E\uCD4F\uCD50\uCD51\uCD52\uCD53\uCD54\uCD55\uCD56\uCD57\uCD58\uCD59\uCD5A\uCD5B\uCD5D\uCD5E\uCD5F\u0410\u0411\u0412\u0413\u0414\u0415\u0401\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0430\u0431\u0432\u0433\u0434\u0435\u0451\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[172].length; ++j)
                if (D[172][j].charCodeAt(0) !== 65533) {
                    e2[D[172][j]] = 44032 + j;
                    d[44032 + j] = D[172][j];
                }
            D[173] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCD61\uCD62\uCD63\uCD65\uCD66\uCD67\uCD68\uCD69\uCD6A\uCD6B\uCD6E\uCD70\uCD72\uCD73\uCD74\uCD75\uCD76\uCD77\uCD79\uCD7A\uCD7B\uCD7C\uCD7D\uCD7E\uCD7F\uCD80\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCD81\uCD82\uCD83\uCD84\uCD85\uCD86\uCD87\uCD89\uCD8A\uCD8B\uCD8C\uCD8D\uCD8E\uCD8F\uCD90\uCD91\uCD92\uCD93\uCD96\uCD97\uCD99\uCD9A\uCD9B\uCD9D\uCD9E\uCD9F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCDA0\uCDA1\uCDA2\uCDA3\uCDA6\uCDA8\uCDAA\uCDAB\uCDAC\uCDAD\uCDAE\uCDAF\uCDB1\uCDB2\uCDB3\uCDB4\uCDB5\uCDB6\uCDB7\uCDB8\uCDB9\uCDBA\uCDBB\uCDBC\uCDBD\uCDBE\uCDBF\uCDC0\uCDC1\uCDC2\uCDC3\uCDC5\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[173].length; ++j)
                if (D[173][j].charCodeAt(0) !== 65533) {
                    e2[D[173][j]] = 44288 + j;
                    d[44288 + j] = D[173][j];
                }
            D[174] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCDC6\uCDC7\uCDC8\uCDC9\uCDCA\uCDCB\uCDCD\uCDCE\uCDCF\uCDD1\uCDD2\uCDD3\uCDD4\uCDD5\uCDD6\uCDD7\uCDD8\uCDD9\uCDDA\uCDDB\uCDDC\uCDDD\uCDDE\uCDDF\uCDE0\uCDE1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCDE2\uCDE3\uCDE4\uCDE5\uCDE6\uCDE7\uCDE9\uCDEA\uCDEB\uCDED\uCDEE\uCDEF\uCDF1\uCDF2\uCDF3\uCDF4\uCDF5\uCDF6\uCDF7\uCDFA\uCDFC\uCDFE\uCDFF\uCE00\uCE01\uCE02\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCE03\uCE05\uCE06\uCE07\uCE09\uCE0A\uCE0B\uCE0D\uCE0E\uCE0F\uCE10\uCE11\uCE12\uCE13\uCE15\uCE16\uCE17\uCE18\uCE1A\uCE1B\uCE1C\uCE1D\uCE1E\uCE1F\uCE22\uCE23\uCE25\uCE26\uCE27\uCE29\uCE2A\uCE2B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[174].length; ++j)
                if (D[174][j].charCodeAt(0) !== 65533) {
                    e2[D[174][j]] = 44544 + j;
                    d[44544 + j] = D[174][j];
                }
            D[175] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCE2C\uCE2D\uCE2E\uCE2F\uCE32\uCE34\uCE36\uCE37\uCE38\uCE39\uCE3A\uCE3B\uCE3C\uCE3D\uCE3E\uCE3F\uCE40\uCE41\uCE42\uCE43\uCE44\uCE45\uCE46\uCE47\uCE48\uCE49\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCE4A\uCE4B\uCE4C\uCE4D\uCE4E\uCE4F\uCE50\uCE51\uCE52\uCE53\uCE54\uCE55\uCE56\uCE57\uCE5A\uCE5B\uCE5D\uCE5E\uCE62\uCE63\uCE64\uCE65\uCE66\uCE67\uCE6A\uCE6C\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCE6E\uCE6F\uCE70\uCE71\uCE72\uCE73\uCE76\uCE77\uCE79\uCE7A\uCE7B\uCE7D\uCE7E\uCE7F\uCE80\uCE81\uCE82\uCE83\uCE86\uCE88\uCE8A\uCE8B\uCE8C\uCE8D\uCE8E\uCE8F\uCE92\uCE93\uCE95\uCE96\uCE97\uCE99\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[175].length; ++j)
                if (D[175][j].charCodeAt(0) !== 65533) {
                    e2[D[175][j]] = 44800 + j;
                    d[44800 + j] = D[175][j];
                }
            D[176] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCE9A\uCE9B\uCE9C\uCE9D\uCE9E\uCE9F\uCEA2\uCEA6\uCEA7\uCEA8\uCEA9\uCEAA\uCEAB\uCEAE\uCEAF\uCEB0\uCEB1\uCEB2\uCEB3\uCEB4\uCEB5\uCEB6\uCEB7\uCEB8\uCEB9\uCEBA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCEBB\uCEBC\uCEBD\uCEBE\uCEBF\uCEC0\uCEC2\uCEC3\uCEC4\uCEC5\uCEC6\uCEC7\uCEC8\uCEC9\uCECA\uCECB\uCECC\uCECD\uCECE\uCECF\uCED0\uCED1\uCED2\uCED3\uCED4\uCED5\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCED6\uCED7\uCED8\uCED9\uCEDA\uCEDB\uCEDC\uCEDD\uCEDE\uCEDF\uCEE0\uCEE1\uCEE2\uCEE3\uCEE6\uCEE7\uCEE9\uCEEA\uCEED\uCEEE\uCEEF\uCEF0\uCEF1\uCEF2\uCEF3\uCEF6\uCEFA\uCEFB\uCEFC\uCEFD\uCEFE\uCEFF\uAC00\uAC01\uAC04\uAC07\uAC08\uAC09\uAC0A\uAC10\uAC11\uAC12\uAC13\uAC14\uAC15\uAC16\uAC17\uAC19\uAC1A\uAC1B\uAC1C\uAC1D\uAC20\uAC24\uAC2C\uAC2D\uAC2F\uAC30\uAC31\uAC38\uAC39\uAC3C\uAC40\uAC4B\uAC4D\uAC54\uAC58\uAC5C\uAC70\uAC71\uAC74\uAC77\uAC78\uAC7A\uAC80\uAC81\uAC83\uAC84\uAC85\uAC86\uAC89\uAC8A\uAC8B\uAC8C\uAC90\uAC94\uAC9C\uAC9D\uAC9F\uACA0\uACA1\uACA8\uACA9\uACAA\uACAC\uACAF\uACB0\uACB8\uACB9\uACBB\uACBC\uACBD\uACC1\uACC4\uACC8\uACCC\uACD5\uACD7\uACE0\uACE1\uACE4\uACE7\uACE8\uACEA\uACEC\uACEF\uACF0\uACF1\uACF3\uACF5\uACF6\uACFC\uACFD\uAD00\uAD04\uAD06\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[176].length; ++j)
                if (D[176][j].charCodeAt(0) !== 65533) {
                    e2[D[176][j]] = 45056 + j;
                    d[45056 + j] = D[176][j];
                }
            D[177] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCF02\uCF03\uCF05\uCF06\uCF07\uCF09\uCF0A\uCF0B\uCF0C\uCF0D\uCF0E\uCF0F\uCF12\uCF14\uCF16\uCF17\uCF18\uCF19\uCF1A\uCF1B\uCF1D\uCF1E\uCF1F\uCF21\uCF22\uCF23\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCF25\uCF26\uCF27\uCF28\uCF29\uCF2A\uCF2B\uCF2E\uCF32\uCF33\uCF34\uCF35\uCF36\uCF37\uCF39\uCF3A\uCF3B\uCF3C\uCF3D\uCF3E\uCF3F\uCF40\uCF41\uCF42\uCF43\uCF44\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCF45\uCF46\uCF47\uCF48\uCF49\uCF4A\uCF4B\uCF4C\uCF4D\uCF4E\uCF4F\uCF50\uCF51\uCF52\uCF53\uCF56\uCF57\uCF59\uCF5A\uCF5B\uCF5D\uCF5E\uCF5F\uCF60\uCF61\uCF62\uCF63\uCF66\uCF68\uCF6A\uCF6B\uCF6C\uAD0C\uAD0D\uAD0F\uAD11\uAD18\uAD1C\uAD20\uAD29\uAD2C\uAD2D\uAD34\uAD35\uAD38\uAD3C\uAD44\uAD45\uAD47\uAD49\uAD50\uAD54\uAD58\uAD61\uAD63\uAD6C\uAD6D\uAD70\uAD73\uAD74\uAD75\uAD76\uAD7B\uAD7C\uAD7D\uAD7F\uAD81\uAD82\uAD88\uAD89\uAD8C\uAD90\uAD9C\uAD9D\uADA4\uADB7\uADC0\uADC1\uADC4\uADC8\uADD0\uADD1\uADD3\uADDC\uADE0\uADE4\uADF8\uADF9\uADFC\uADFF\uAE00\uAE01\uAE08\uAE09\uAE0B\uAE0D\uAE14\uAE30\uAE31\uAE34\uAE37\uAE38\uAE3A\uAE40\uAE41\uAE43\uAE45\uAE46\uAE4A\uAE4C\uAE4D\uAE4E\uAE50\uAE54\uAE56\uAE5C\uAE5D\uAE5F\uAE60\uAE61\uAE65\uAE68\uAE69\uAE6C\uAE70\uAE78\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[177].length; ++j)
                if (D[177][j].charCodeAt(0) !== 65533) {
                    e2[D[177][j]] = 45312 + j;
                    d[45312 + j] = D[177][j];
                }
            D[178] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCF6D\uCF6E\uCF6F\uCF72\uCF73\uCF75\uCF76\uCF77\uCF79\uCF7A\uCF7B\uCF7C\uCF7D\uCF7E\uCF7F\uCF81\uCF82\uCF83\uCF84\uCF86\uCF87\uCF88\uCF89\uCF8A\uCF8B\uCF8D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCF8E\uCF8F\uCF90\uCF91\uCF92\uCF93\uCF94\uCF95\uCF96\uCF97\uCF98\uCF99\uCF9A\uCF9B\uCF9C\uCF9D\uCF9E\uCF9F\uCFA0\uCFA2\uCFA3\uCFA4\uCFA5\uCFA6\uCFA7\uCFA9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCFAA\uCFAB\uCFAC\uCFAD\uCFAE\uCFAF\uCFB1\uCFB2\uCFB3\uCFB4\uCFB5\uCFB6\uCFB7\uCFB8\uCFB9\uCFBA\uCFBB\uCFBC\uCFBD\uCFBE\uCFBF\uCFC0\uCFC1\uCFC2\uCFC3\uCFC5\uCFC6\uCFC7\uCFC8\uCFC9\uCFCA\uCFCB\uAE79\uAE7B\uAE7C\uAE7D\uAE84\uAE85\uAE8C\uAEBC\uAEBD\uAEBE\uAEC0\uAEC4\uAECC\uAECD\uAECF\uAED0\uAED1\uAED8\uAED9\uAEDC\uAEE8\uAEEB\uAEED\uAEF4\uAEF8\uAEFC\uAF07\uAF08\uAF0D\uAF10\uAF2C\uAF2D\uAF30\uAF32\uAF34\uAF3C\uAF3D\uAF3F\uAF41\uAF42\uAF43\uAF48\uAF49\uAF50\uAF5C\uAF5D\uAF64\uAF65\uAF79\uAF80\uAF84\uAF88\uAF90\uAF91\uAF95\uAF9C\uAFB8\uAFB9\uAFBC\uAFC0\uAFC7\uAFC8\uAFC9\uAFCB\uAFCD\uAFCE\uAFD4\uAFDC\uAFE8\uAFE9\uAFF0\uAFF1\uAFF4\uAFF8\uB000\uB001\uB004\uB00C\uB010\uB014\uB01C\uB01D\uB028\uB044\uB045\uB048\uB04A\uB04C\uB04E\uB053\uB054\uB055\uB057\uB059\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[178].length; ++j)
                if (D[178][j].charCodeAt(0) !== 65533) {
                    e2[D[178][j]] = 45568 + j;
                    d[45568 + j] = D[178][j];
                }
            D[179] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCFCC\uCFCD\uCFCE\uCFCF\uCFD0\uCFD1\uCFD2\uCFD3\uCFD4\uCFD5\uCFD6\uCFD7\uCFD8\uCFD9\uCFDA\uCFDB\uCFDC\uCFDD\uCFDE\uCFDF\uCFE2\uCFE3\uCFE5\uCFE6\uCFE7\uCFE9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uCFEA\uCFEB\uCFEC\uCFED\uCFEE\uCFEF\uCFF2\uCFF4\uCFF6\uCFF7\uCFF8\uCFF9\uCFFA\uCFFB\uCFFD\uCFFE\uCFFF\uD001\uD002\uD003\uD005\uD006\uD007\uD008\uD009\uD00A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD00B\uD00C\uD00D\uD00E\uD00F\uD010\uD012\uD013\uD014\uD015\uD016\uD017\uD019\uD01A\uD01B\uD01C\uD01D\uD01E\uD01F\uD020\uD021\uD022\uD023\uD024\uD025\uD026\uD027\uD028\uD029\uD02A\uD02B\uD02C\uB05D\uB07C\uB07D\uB080\uB084\uB08C\uB08D\uB08F\uB091\uB098\uB099\uB09A\uB09C\uB09F\uB0A0\uB0A1\uB0A2\uB0A8\uB0A9\uB0AB\uB0AC\uB0AD\uB0AE\uB0AF\uB0B1\uB0B3\uB0B4\uB0B5\uB0B8\uB0BC\uB0C4\uB0C5\uB0C7\uB0C8\uB0C9\uB0D0\uB0D1\uB0D4\uB0D8\uB0E0\uB0E5\uB108\uB109\uB10B\uB10C\uB110\uB112\uB113\uB118\uB119\uB11B\uB11C\uB11D\uB123\uB124\uB125\uB128\uB12C\uB134\uB135\uB137\uB138\uB139\uB140\uB141\uB144\uB148\uB150\uB151\uB154\uB155\uB158\uB15C\uB160\uB178\uB179\uB17C\uB180\uB182\uB188\uB189\uB18B\uB18D\uB192\uB193\uB194\uB198\uB19C\uB1A8\uB1CC\uB1D0\uB1D4\uB1DC\uB1DD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[179].length; ++j)
                if (D[179][j].charCodeAt(0) !== 65533) {
                    e2[D[179][j]] = 45824 + j;
                    d[45824 + j] = D[179][j];
                }
            D[180] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD02E\uD02F\uD030\uD031\uD032\uD033\uD036\uD037\uD039\uD03A\uD03B\uD03D\uD03E\uD03F\uD040\uD041\uD042\uD043\uD046\uD048\uD04A\uD04B\uD04C\uD04D\uD04E\uD04F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD051\uD052\uD053\uD055\uD056\uD057\uD059\uD05A\uD05B\uD05C\uD05D\uD05E\uD05F\uD061\uD062\uD063\uD064\uD065\uD066\uD067\uD068\uD069\uD06A\uD06B\uD06E\uD06F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD071\uD072\uD073\uD075\uD076\uD077\uD078\uD079\uD07A\uD07B\uD07E\uD07F\uD080\uD082\uD083\uD084\uD085\uD086\uD087\uD088\uD089\uD08A\uD08B\uD08C\uD08D\uD08E\uD08F\uD090\uD091\uD092\uD093\uD094\uB1DF\uB1E8\uB1E9\uB1EC\uB1F0\uB1F9\uB1FB\uB1FD\uB204\uB205\uB208\uB20B\uB20C\uB214\uB215\uB217\uB219\uB220\uB234\uB23C\uB258\uB25C\uB260\uB268\uB269\uB274\uB275\uB27C\uB284\uB285\uB289\uB290\uB291\uB294\uB298\uB299\uB29A\uB2A0\uB2A1\uB2A3\uB2A5\uB2A6\uB2AA\uB2AC\uB2B0\uB2B4\uB2C8\uB2C9\uB2CC\uB2D0\uB2D2\uB2D8\uB2D9\uB2DB\uB2DD\uB2E2\uB2E4\uB2E5\uB2E6\uB2E8\uB2EB\uB2EC\uB2ED\uB2EE\uB2EF\uB2F3\uB2F4\uB2F5\uB2F7\uB2F8\uB2F9\uB2FA\uB2FB\uB2FF\uB300\uB301\uB304\uB308\uB310\uB311\uB313\uB314\uB315\uB31C\uB354\uB355\uB356\uB358\uB35B\uB35C\uB35E\uB35F\uB364\uB365\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[180].length; ++j)
                if (D[180][j].charCodeAt(0) !== 65533) {
                    e2[D[180][j]] = 46080 + j;
                    d[46080 + j] = D[180][j];
                }
            D[181] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD095\uD096\uD097\uD098\uD099\uD09A\uD09B\uD09C\uD09D\uD09E\uD09F\uD0A0\uD0A1\uD0A2\uD0A3\uD0A6\uD0A7\uD0A9\uD0AA\uD0AB\uD0AD\uD0AE\uD0AF\uD0B0\uD0B1\uD0B2\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD0B3\uD0B6\uD0B8\uD0BA\uD0BB\uD0BC\uD0BD\uD0BE\uD0BF\uD0C2\uD0C3\uD0C5\uD0C6\uD0C7\uD0CA\uD0CB\uD0CC\uD0CD\uD0CE\uD0CF\uD0D2\uD0D6\uD0D7\uD0D8\uD0D9\uD0DA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD0DB\uD0DE\uD0DF\uD0E1\uD0E2\uD0E3\uD0E5\uD0E6\uD0E7\uD0E8\uD0E9\uD0EA\uD0EB\uD0EE\uD0F2\uD0F3\uD0F4\uD0F5\uD0F6\uD0F7\uD0F9\uD0FA\uD0FB\uD0FC\uD0FD\uD0FE\uD0FF\uD100\uD101\uD102\uD103\uD104\uB367\uB369\uB36B\uB36E\uB370\uB371\uB374\uB378\uB380\uB381\uB383\uB384\uB385\uB38C\uB390\uB394\uB3A0\uB3A1\uB3A8\uB3AC\uB3C4\uB3C5\uB3C8\uB3CB\uB3CC\uB3CE\uB3D0\uB3D4\uB3D5\uB3D7\uB3D9\uB3DB\uB3DD\uB3E0\uB3E4\uB3E8\uB3FC\uB410\uB418\uB41C\uB420\uB428\uB429\uB42B\uB434\uB450\uB451\uB454\uB458\uB460\uB461\uB463\uB465\uB46C\uB480\uB488\uB49D\uB4A4\uB4A8\uB4AC\uB4B5\uB4B7\uB4B9\uB4C0\uB4C4\uB4C8\uB4D0\uB4D5\uB4DC\uB4DD\uB4E0\uB4E3\uB4E4\uB4E6\uB4EC\uB4ED\uB4EF\uB4F1\uB4F8\uB514\uB515\uB518\uB51B\uB51C\uB524\uB525\uB527\uB528\uB529\uB52A\uB530\uB531\uB534\uB538\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[181].length; ++j)
                if (D[181][j].charCodeAt(0) !== 65533) {
                    e2[D[181][j]] = 46336 + j;
                    d[46336 + j] = D[181][j];
                }
            D[182] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD105\uD106\uD107\uD108\uD109\uD10A\uD10B\uD10C\uD10E\uD10F\uD110\uD111\uD112\uD113\uD114\uD115\uD116\uD117\uD118\uD119\uD11A\uD11B\uD11C\uD11D\uD11E\uD11F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD120\uD121\uD122\uD123\uD124\uD125\uD126\uD127\uD128\uD129\uD12A\uD12B\uD12C\uD12D\uD12E\uD12F\uD132\uD133\uD135\uD136\uD137\uD139\uD13B\uD13C\uD13D\uD13E\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD13F\uD142\uD146\uD147\uD148\uD149\uD14A\uD14B\uD14E\uD14F\uD151\uD152\uD153\uD155\uD156\uD157\uD158\uD159\uD15A\uD15B\uD15E\uD160\uD162\uD163\uD164\uD165\uD166\uD167\uD169\uD16A\uD16B\uD16D\uB540\uB541\uB543\uB544\uB545\uB54B\uB54C\uB54D\uB550\uB554\uB55C\uB55D\uB55F\uB560\uB561\uB5A0\uB5A1\uB5A4\uB5A8\uB5AA\uB5AB\uB5B0\uB5B1\uB5B3\uB5B4\uB5B5\uB5BB\uB5BC\uB5BD\uB5C0\uB5C4\uB5CC\uB5CD\uB5CF\uB5D0\uB5D1\uB5D8\uB5EC\uB610\uB611\uB614\uB618\uB625\uB62C\uB634\uB648\uB664\uB668\uB69C\uB69D\uB6A0\uB6A4\uB6AB\uB6AC\uB6B1\uB6D4\uB6F0\uB6F4\uB6F8\uB700\uB701\uB705\uB728\uB729\uB72C\uB72F\uB730\uB738\uB739\uB73B\uB744\uB748\uB74C\uB754\uB755\uB760\uB764\uB768\uB770\uB771\uB773\uB775\uB77C\uB77D\uB780\uB784\uB78C\uB78D\uB78F\uB790\uB791\uB792\uB796\uB797\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[182].length; ++j)
                if (D[182][j].charCodeAt(0) !== 65533) {
                    e2[D[182][j]] = 46592 + j;
                    d[46592 + j] = D[182][j];
                }
            D[183] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD16E\uD16F\uD170\uD171\uD172\uD173\uD174\uD175\uD176\uD177\uD178\uD179\uD17A\uD17B\uD17D\uD17E\uD17F\uD180\uD181\uD182\uD183\uD185\uD186\uD187\uD189\uD18A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD18B\uD18C\uD18D\uD18E\uD18F\uD190\uD191\uD192\uD193\uD194\uD195\uD196\uD197\uD198\uD199\uD19A\uD19B\uD19C\uD19D\uD19E\uD19F\uD1A2\uD1A3\uD1A5\uD1A6\uD1A7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD1A9\uD1AA\uD1AB\uD1AC\uD1AD\uD1AE\uD1AF\uD1B2\uD1B4\uD1B6\uD1B7\uD1B8\uD1B9\uD1BB\uD1BD\uD1BE\uD1BF\uD1C1\uD1C2\uD1C3\uD1C4\uD1C5\uD1C6\uD1C7\uD1C8\uD1C9\uD1CA\uD1CB\uD1CC\uD1CD\uD1CE\uD1CF\uB798\uB799\uB79C\uB7A0\uB7A8\uB7A9\uB7AB\uB7AC\uB7AD\uB7B4\uB7B5\uB7B8\uB7C7\uB7C9\uB7EC\uB7ED\uB7F0\uB7F4\uB7FC\uB7FD\uB7FF\uB800\uB801\uB807\uB808\uB809\uB80C\uB810\uB818\uB819\uB81B\uB81D\uB824\uB825\uB828\uB82C\uB834\uB835\uB837\uB838\uB839\uB840\uB844\uB851\uB853\uB85C\uB85D\uB860\uB864\uB86C\uB86D\uB86F\uB871\uB878\uB87C\uB88D\uB8A8\uB8B0\uB8B4\uB8B8\uB8C0\uB8C1\uB8C3\uB8C5\uB8CC\uB8D0\uB8D4\uB8DD\uB8DF\uB8E1\uB8E8\uB8E9\uB8EC\uB8F0\uB8F8\uB8F9\uB8FB\uB8FD\uB904\uB918\uB920\uB93C\uB93D\uB940\uB944\uB94C\uB94F\uB951\uB958\uB959\uB95C\uB960\uB968\uB969\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[183].length; ++j)
                if (D[183][j].charCodeAt(0) !== 65533) {
                    e2[D[183][j]] = 46848 + j;
                    d[46848 + j] = D[183][j];
                }
            D[184] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD1D0\uD1D1\uD1D2\uD1D3\uD1D4\uD1D5\uD1D6\uD1D7\uD1D9\uD1DA\uD1DB\uD1DC\uD1DD\uD1DE\uD1DF\uD1E0\uD1E1\uD1E2\uD1E3\uD1E4\uD1E5\uD1E6\uD1E7\uD1E8\uD1E9\uD1EA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD1EB\uD1EC\uD1ED\uD1EE\uD1EF\uD1F0\uD1F1\uD1F2\uD1F3\uD1F5\uD1F6\uD1F7\uD1F9\uD1FA\uD1FB\uD1FC\uD1FD\uD1FE\uD1FF\uD200\uD201\uD202\uD203\uD204\uD205\uD206\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD208\uD20A\uD20B\uD20C\uD20D\uD20E\uD20F\uD211\uD212\uD213\uD214\uD215\uD216\uD217\uD218\uD219\uD21A\uD21B\uD21C\uD21D\uD21E\uD21F\uD220\uD221\uD222\uD223\uD224\uD225\uD226\uD227\uD228\uD229\uB96B\uB96D\uB974\uB975\uB978\uB97C\uB984\uB985\uB987\uB989\uB98A\uB98D\uB98E\uB9AC\uB9AD\uB9B0\uB9B4\uB9BC\uB9BD\uB9BF\uB9C1\uB9C8\uB9C9\uB9CC\uB9CE\uB9CF\uB9D0\uB9D1\uB9D2\uB9D8\uB9D9\uB9DB\uB9DD\uB9DE\uB9E1\uB9E3\uB9E4\uB9E5\uB9E8\uB9EC\uB9F4\uB9F5\uB9F7\uB9F8\uB9F9\uB9FA\uBA00\uBA01\uBA08\uBA15\uBA38\uBA39\uBA3C\uBA40\uBA42\uBA48\uBA49\uBA4B\uBA4D\uBA4E\uBA53\uBA54\uBA55\uBA58\uBA5C\uBA64\uBA65\uBA67\uBA68\uBA69\uBA70\uBA71\uBA74\uBA78\uBA83\uBA84\uBA85\uBA87\uBA8C\uBAA8\uBAA9\uBAAB\uBAAC\uBAB0\uBAB2\uBAB8\uBAB9\uBABB\uBABD\uBAC4\uBAC8\uBAD8\uBAD9\uBAFC\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[184].length; ++j)
                if (D[184][j].charCodeAt(0) !== 65533) {
                    e2[D[184][j]] = 47104 + j;
                    d[47104 + j] = D[184][j];
                }
            D[185] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD22A\uD22B\uD22E\uD22F\uD231\uD232\uD233\uD235\uD236\uD237\uD238\uD239\uD23A\uD23B\uD23E\uD240\uD242\uD243\uD244\uD245\uD246\uD247\uD249\uD24A\uD24B\uD24C\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD24D\uD24E\uD24F\uD250\uD251\uD252\uD253\uD254\uD255\uD256\uD257\uD258\uD259\uD25A\uD25B\uD25D\uD25E\uD25F\uD260\uD261\uD262\uD263\uD265\uD266\uD267\uD268\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD269\uD26A\uD26B\uD26C\uD26D\uD26E\uD26F\uD270\uD271\uD272\uD273\uD274\uD275\uD276\uD277\uD278\uD279\uD27A\uD27B\uD27C\uD27D\uD27E\uD27F\uD282\uD283\uD285\uD286\uD287\uD289\uD28A\uD28B\uD28C\uBB00\uBB04\uBB0D\uBB0F\uBB11\uBB18\uBB1C\uBB20\uBB29\uBB2B\uBB34\uBB35\uBB36\uBB38\uBB3B\uBB3C\uBB3D\uBB3E\uBB44\uBB45\uBB47\uBB49\uBB4D\uBB4F\uBB50\uBB54\uBB58\uBB61\uBB63\uBB6C\uBB88\uBB8C\uBB90\uBBA4\uBBA8\uBBAC\uBBB4\uBBB7\uBBC0\uBBC4\uBBC8\uBBD0\uBBD3\uBBF8\uBBF9\uBBFC\uBBFF\uBC00\uBC02\uBC08\uBC09\uBC0B\uBC0C\uBC0D\uBC0F\uBC11\uBC14\uBC15\uBC16\uBC17\uBC18\uBC1B\uBC1C\uBC1D\uBC1E\uBC1F\uBC24\uBC25\uBC27\uBC29\uBC2D\uBC30\uBC31\uBC34\uBC38\uBC40\uBC41\uBC43\uBC44\uBC45\uBC49\uBC4C\uBC4D\uBC50\uBC5D\uBC84\uBC85\uBC88\uBC8B\uBC8C\uBC8E\uBC94\uBC95\uBC97\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[185].length; ++j)
                if (D[185][j].charCodeAt(0) !== 65533) {
                    e2[D[185][j]] = 47360 + j;
                    d[47360 + j] = D[185][j];
                }
            D[186] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD28D\uD28E\uD28F\uD292\uD293\uD294\uD296\uD297\uD298\uD299\uD29A\uD29B\uD29D\uD29E\uD29F\uD2A1\uD2A2\uD2A3\uD2A5\uD2A6\uD2A7\uD2A8\uD2A9\uD2AA\uD2AB\uD2AD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD2AE\uD2AF\uD2B0\uD2B2\uD2B3\uD2B4\uD2B5\uD2B6\uD2B7\uD2BA\uD2BB\uD2BD\uD2BE\uD2C1\uD2C3\uD2C4\uD2C5\uD2C6\uD2C7\uD2CA\uD2CC\uD2CD\uD2CE\uD2CF\uD2D0\uD2D1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD2D2\uD2D3\uD2D5\uD2D6\uD2D7\uD2D9\uD2DA\uD2DB\uD2DD\uD2DE\uD2DF\uD2E0\uD2E1\uD2E2\uD2E3\uD2E6\uD2E7\uD2E8\uD2E9\uD2EA\uD2EB\uD2EC\uD2ED\uD2EE\uD2EF\uD2F2\uD2F3\uD2F5\uD2F6\uD2F7\uD2F9\uD2FA\uBC99\uBC9A\uBCA0\uBCA1\uBCA4\uBCA7\uBCA8\uBCB0\uBCB1\uBCB3\uBCB4\uBCB5\uBCBC\uBCBD\uBCC0\uBCC4\uBCCD\uBCCF\uBCD0\uBCD1\uBCD5\uBCD8\uBCDC\uBCF4\uBCF5\uBCF6\uBCF8\uBCFC\uBD04\uBD05\uBD07\uBD09\uBD10\uBD14\uBD24\uBD2C\uBD40\uBD48\uBD49\uBD4C\uBD50\uBD58\uBD59\uBD64\uBD68\uBD80\uBD81\uBD84\uBD87\uBD88\uBD89\uBD8A\uBD90\uBD91\uBD93\uBD95\uBD99\uBD9A\uBD9C\uBDA4\uBDB0\uBDB8\uBDD4\uBDD5\uBDD8\uBDDC\uBDE9\uBDF0\uBDF4\uBDF8\uBE00\uBE03\uBE05\uBE0C\uBE0D\uBE10\uBE14\uBE1C\uBE1D\uBE1F\uBE44\uBE45\uBE48\uBE4C\uBE4E\uBE54\uBE55\uBE57\uBE59\uBE5A\uBE5B\uBE60\uBE61\uBE64\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[186].length; ++j)
                if (D[186][j].charCodeAt(0) !== 65533) {
                    e2[D[186][j]] = 47616 + j;
                    d[47616 + j] = D[186][j];
                }
            D[187] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD2FB\uD2FC\uD2FD\uD2FE\uD2FF\uD302\uD304\uD306\uD307\uD308\uD309\uD30A\uD30B\uD30F\uD311\uD312\uD313\uD315\uD317\uD318\uD319\uD31A\uD31B\uD31E\uD322\uD323\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD324\uD326\uD327\uD32A\uD32B\uD32D\uD32E\uD32F\uD331\uD332\uD333\uD334\uD335\uD336\uD337\uD33A\uD33E\uD33F\uD340\uD341\uD342\uD343\uD346\uD347\uD348\uD349\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD34A\uD34B\uD34C\uD34D\uD34E\uD34F\uD350\uD351\uD352\uD353\uD354\uD355\uD356\uD357\uD358\uD359\uD35A\uD35B\uD35C\uD35D\uD35E\uD35F\uD360\uD361\uD362\uD363\uD364\uD365\uD366\uD367\uD368\uD369\uBE68\uBE6A\uBE70\uBE71\uBE73\uBE74\uBE75\uBE7B\uBE7C\uBE7D\uBE80\uBE84\uBE8C\uBE8D\uBE8F\uBE90\uBE91\uBE98\uBE99\uBEA8\uBED0\uBED1\uBED4\uBED7\uBED8\uBEE0\uBEE3\uBEE4\uBEE5\uBEEC\uBF01\uBF08\uBF09\uBF18\uBF19\uBF1B\uBF1C\uBF1D\uBF40\uBF41\uBF44\uBF48\uBF50\uBF51\uBF55\uBF94\uBFB0\uBFC5\uBFCC\uBFCD\uBFD0\uBFD4\uBFDC\uBFDF\uBFE1\uC03C\uC051\uC058\uC05C\uC060\uC068\uC069\uC090\uC091\uC094\uC098\uC0A0\uC0A1\uC0A3\uC0A5\uC0AC\uC0AD\uC0AF\uC0B0\uC0B3\uC0B4\uC0B5\uC0B6\uC0BC\uC0BD\uC0BF\uC0C0\uC0C1\uC0C5\uC0C8\uC0C9\uC0CC\uC0D0\uC0D8\uC0D9\uC0DB\uC0DC\uC0DD\uC0E4\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[187].length; ++j)
                if (D[187][j].charCodeAt(0) !== 65533) {
                    e2[D[187][j]] = 47872 + j;
                    d[47872 + j] = D[187][j];
                }
            D[188] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD36A\uD36B\uD36C\uD36D\uD36E\uD36F\uD370\uD371\uD372\uD373\uD374\uD375\uD376\uD377\uD378\uD379\uD37A\uD37B\uD37E\uD37F\uD381\uD382\uD383\uD385\uD386\uD387\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD388\uD389\uD38A\uD38B\uD38E\uD392\uD393\uD394\uD395\uD396\uD397\uD39A\uD39B\uD39D\uD39E\uD39F\uD3A1\uD3A2\uD3A3\uD3A4\uD3A5\uD3A6\uD3A7\uD3AA\uD3AC\uD3AE\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD3AF\uD3B0\uD3B1\uD3B2\uD3B3\uD3B5\uD3B6\uD3B7\uD3B9\uD3BA\uD3BB\uD3BD\uD3BE\uD3BF\uD3C0\uD3C1\uD3C2\uD3C3\uD3C6\uD3C7\uD3CA\uD3CB\uD3CC\uD3CD\uD3CE\uD3CF\uD3D1\uD3D2\uD3D3\uD3D4\uD3D5\uD3D6\uC0E5\uC0E8\uC0EC\uC0F4\uC0F5\uC0F7\uC0F9\uC100\uC104\uC108\uC110\uC115\uC11C\uC11D\uC11E\uC11F\uC120\uC123\uC124\uC126\uC127\uC12C\uC12D\uC12F\uC130\uC131\uC136\uC138\uC139\uC13C\uC140\uC148\uC149\uC14B\uC14C\uC14D\uC154\uC155\uC158\uC15C\uC164\uC165\uC167\uC168\uC169\uC170\uC174\uC178\uC185\uC18C\uC18D\uC18E\uC190\uC194\uC196\uC19C\uC19D\uC19F\uC1A1\uC1A5\uC1A8\uC1A9\uC1AC\uC1B0\uC1BD\uC1C4\uC1C8\uC1CC\uC1D4\uC1D7\uC1D8\uC1E0\uC1E4\uC1E8\uC1F0\uC1F1\uC1F3\uC1FC\uC1FD\uC200\uC204\uC20C\uC20D\uC20F\uC211\uC218\uC219\uC21C\uC21F\uC220\uC228\uC229\uC22B\uC22D\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[188].length; ++j)
                if (D[188][j].charCodeAt(0) !== 65533) {
                    e2[D[188][j]] = 48128 + j;
                    d[48128 + j] = D[188][j];
                }
            D[189] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD3D7\uD3D9\uD3DA\uD3DB\uD3DC\uD3DD\uD3DE\uD3DF\uD3E0\uD3E2\uD3E4\uD3E5\uD3E6\uD3E7\uD3E8\uD3E9\uD3EA\uD3EB\uD3EE\uD3EF\uD3F1\uD3F2\uD3F3\uD3F5\uD3F6\uD3F7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD3F8\uD3F9\uD3FA\uD3FB\uD3FE\uD400\uD402\uD403\uD404\uD405\uD406\uD407\uD409\uD40A\uD40B\uD40C\uD40D\uD40E\uD40F\uD410\uD411\uD412\uD413\uD414\uD415\uD416\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD417\uD418\uD419\uD41A\uD41B\uD41C\uD41E\uD41F\uD420\uD421\uD422\uD423\uD424\uD425\uD426\uD427\uD428\uD429\uD42A\uD42B\uD42C\uD42D\uD42E\uD42F\uD430\uD431\uD432\uD433\uD434\uD435\uD436\uD437\uC22F\uC231\uC232\uC234\uC248\uC250\uC251\uC254\uC258\uC260\uC265\uC26C\uC26D\uC270\uC274\uC27C\uC27D\uC27F\uC281\uC288\uC289\uC290\uC298\uC29B\uC29D\uC2A4\uC2A5\uC2A8\uC2AC\uC2AD\uC2B4\uC2B5\uC2B7\uC2B9\uC2DC\uC2DD\uC2E0\uC2E3\uC2E4\uC2EB\uC2EC\uC2ED\uC2EF\uC2F1\uC2F6\uC2F8\uC2F9\uC2FB\uC2FC\uC300\uC308\uC309\uC30C\uC30D\uC313\uC314\uC315\uC318\uC31C\uC324\uC325\uC328\uC329\uC345\uC368\uC369\uC36C\uC370\uC372\uC378\uC379\uC37C\uC37D\uC384\uC388\uC38C\uC3C0\uC3D8\uC3D9\uC3DC\uC3DF\uC3E0\uC3E2\uC3E8\uC3E9\uC3ED\uC3F4\uC3F5\uC3F8\uC408\uC410\uC424\uC42C\uC430\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[189].length; ++j)
                if (D[189][j].charCodeAt(0) !== 65533) {
                    e2[D[189][j]] = 48384 + j;
                    d[48384 + j] = D[189][j];
                }
            D[190] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD438\uD439\uD43A\uD43B\uD43C\uD43D\uD43E\uD43F\uD441\uD442\uD443\uD445\uD446\uD447\uD448\uD449\uD44A\uD44B\uD44C\uD44D\uD44E\uD44F\uD450\uD451\uD452\uD453\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD454\uD455\uD456\uD457\uD458\uD459\uD45A\uD45B\uD45D\uD45E\uD45F\uD461\uD462\uD463\uD465\uD466\uD467\uD468\uD469\uD46A\uD46B\uD46C\uD46E\uD470\uD471\uD472\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD473\uD474\uD475\uD476\uD477\uD47A\uD47B\uD47D\uD47E\uD481\uD483\uD484\uD485\uD486\uD487\uD48A\uD48C\uD48E\uD48F\uD490\uD491\uD492\uD493\uD495\uD496\uD497\uD498\uD499\uD49A\uD49B\uD49C\uD49D\uC434\uC43C\uC43D\uC448\uC464\uC465\uC468\uC46C\uC474\uC475\uC479\uC480\uC494\uC49C\uC4B8\uC4BC\uC4E9\uC4F0\uC4F1\uC4F4\uC4F8\uC4FA\uC4FF\uC500\uC501\uC50C\uC510\uC514\uC51C\uC528\uC529\uC52C\uC530\uC538\uC539\uC53B\uC53D\uC544\uC545\uC548\uC549\uC54A\uC54C\uC54D\uC54E\uC553\uC554\uC555\uC557\uC558\uC559\uC55D\uC55E\uC560\uC561\uC564\uC568\uC570\uC571\uC573\uC574\uC575\uC57C\uC57D\uC580\uC584\uC587\uC58C\uC58D\uC58F\uC591\uC595\uC597\uC598\uC59C\uC5A0\uC5A9\uC5B4\uC5B5\uC5B8\uC5B9\uC5BB\uC5BC\uC5BD\uC5BE\uC5C4\uC5C5\uC5C6\uC5C7\uC5C8\uC5C9\uC5CA\uC5CC\uC5CE\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[190].length; ++j)
                if (D[190][j].charCodeAt(0) !== 65533) {
                    e2[D[190][j]] = 48640 + j;
                    d[48640 + j] = D[190][j];
                }
            D[191] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD49E\uD49F\uD4A0\uD4A1\uD4A2\uD4A3\uD4A4\uD4A5\uD4A6\uD4A7\uD4A8\uD4AA\uD4AB\uD4AC\uD4AD\uD4AE\uD4AF\uD4B0\uD4B1\uD4B2\uD4B3\uD4B4\uD4B5\uD4B6\uD4B7\uD4B8\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD4B9\uD4BA\uD4BB\uD4BC\uD4BD\uD4BE\uD4BF\uD4C0\uD4C1\uD4C2\uD4C3\uD4C4\uD4C5\uD4C6\uD4C7\uD4C8\uD4C9\uD4CA\uD4CB\uD4CD\uD4CE\uD4CF\uD4D1\uD4D2\uD4D3\uD4D5\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD4D6\uD4D7\uD4D8\uD4D9\uD4DA\uD4DB\uD4DD\uD4DE\uD4E0\uD4E1\uD4E2\uD4E3\uD4E4\uD4E5\uD4E6\uD4E7\uD4E9\uD4EA\uD4EB\uD4ED\uD4EE\uD4EF\uD4F1\uD4F2\uD4F3\uD4F4\uD4F5\uD4F6\uD4F7\uD4F9\uD4FA\uD4FC\uC5D0\uC5D1\uC5D4\uC5D8\uC5E0\uC5E1\uC5E3\uC5E5\uC5EC\uC5ED\uC5EE\uC5F0\uC5F4\uC5F6\uC5F7\uC5FC\uC5FD\uC5FE\uC5FF\uC600\uC601\uC605\uC606\uC607\uC608\uC60C\uC610\uC618\uC619\uC61B\uC61C\uC624\uC625\uC628\uC62C\uC62D\uC62E\uC630\uC633\uC634\uC635\uC637\uC639\uC63B\uC640\uC641\uC644\uC648\uC650\uC651\uC653\uC654\uC655\uC65C\uC65D\uC660\uC66C\uC66F\uC671\uC678\uC679\uC67C\uC680\uC688\uC689\uC68B\uC68D\uC694\uC695\uC698\uC69C\uC6A4\uC6A5\uC6A7\uC6A9\uC6B0\uC6B1\uC6B4\uC6B8\uC6B9\uC6BA\uC6C0\uC6C1\uC6C3\uC6C5\uC6CC\uC6CD\uC6D0\uC6D4\uC6DC\uC6DD\uC6E0\uC6E1\uC6E8\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[191].length; ++j)
                if (D[191][j].charCodeAt(0) !== 65533) {
                    e2[D[191][j]] = 48896 + j;
                    d[48896 + j] = D[191][j];
                }
            D[192] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD4FE\uD4FF\uD500\uD501\uD502\uD503\uD505\uD506\uD507\uD509\uD50A\uD50B\uD50D\uD50E\uD50F\uD510\uD511\uD512\uD513\uD516\uD518\uD519\uD51A\uD51B\uD51C\uD51D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD51E\uD51F\uD520\uD521\uD522\uD523\uD524\uD525\uD526\uD527\uD528\uD529\uD52A\uD52B\uD52C\uD52D\uD52E\uD52F\uD530\uD531\uD532\uD533\uD534\uD535\uD536\uD537\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD538\uD539\uD53A\uD53B\uD53E\uD53F\uD541\uD542\uD543\uD545\uD546\uD547\uD548\uD549\uD54A\uD54B\uD54E\uD550\uD552\uD553\uD554\uD555\uD556\uD557\uD55A\uD55B\uD55D\uD55E\uD55F\uD561\uD562\uD563\uC6E9\uC6EC\uC6F0\uC6F8\uC6F9\uC6FD\uC704\uC705\uC708\uC70C\uC714\uC715\uC717\uC719\uC720\uC721\uC724\uC728\uC730\uC731\uC733\uC735\uC737\uC73C\uC73D\uC740\uC744\uC74A\uC74C\uC74D\uC74F\uC751\uC752\uC753\uC754\uC755\uC756\uC757\uC758\uC75C\uC760\uC768\uC76B\uC774\uC775\uC778\uC77C\uC77D\uC77E\uC783\uC784\uC785\uC787\uC788\uC789\uC78A\uC78E\uC790\uC791\uC794\uC796\uC797\uC798\uC79A\uC7A0\uC7A1\uC7A3\uC7A4\uC7A5\uC7A6\uC7AC\uC7AD\uC7B0\uC7B4\uC7BC\uC7BD\uC7BF\uC7C0\uC7C1\uC7C8\uC7C9\uC7CC\uC7CE\uC7D0\uC7D8\uC7DD\uC7E4\uC7E8\uC7EC\uC800\uC801\uC804\uC808\uC80A\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[192].length; ++j)
                if (D[192][j].charCodeAt(0) !== 65533) {
                    e2[D[192][j]] = 49152 + j;
                    d[49152 + j] = D[192][j];
                }
            D[193] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD564\uD566\uD567\uD56A\uD56C\uD56E\uD56F\uD570\uD571\uD572\uD573\uD576\uD577\uD579\uD57A\uD57B\uD57D\uD57E\uD57F\uD580\uD581\uD582\uD583\uD586\uD58A\uD58B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD58C\uD58D\uD58E\uD58F\uD591\uD592\uD593\uD594\uD595\uD596\uD597\uD598\uD599\uD59A\uD59B\uD59C\uD59D\uD59E\uD59F\uD5A0\uD5A1\uD5A2\uD5A3\uD5A4\uD5A6\uD5A7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD5A8\uD5A9\uD5AA\uD5AB\uD5AC\uD5AD\uD5AE\uD5AF\uD5B0\uD5B1\uD5B2\uD5B3\uD5B4\uD5B5\uD5B6\uD5B7\uD5B8\uD5B9\uD5BA\uD5BB\uD5BC\uD5BD\uD5BE\uD5BF\uD5C0\uD5C1\uD5C2\uD5C3\uD5C4\uD5C5\uD5C6\uD5C7\uC810\uC811\uC813\uC815\uC816\uC81C\uC81D\uC820\uC824\uC82C\uC82D\uC82F\uC831\uC838\uC83C\uC840\uC848\uC849\uC84C\uC84D\uC854\uC870\uC871\uC874\uC878\uC87A\uC880\uC881\uC883\uC885\uC886\uC887\uC88B\uC88C\uC88D\uC894\uC89D\uC89F\uC8A1\uC8A8\uC8BC\uC8BD\uC8C4\uC8C8\uC8CC\uC8D4\uC8D5\uC8D7\uC8D9\uC8E0\uC8E1\uC8E4\uC8F5\uC8FC\uC8FD\uC900\uC904\uC905\uC906\uC90C\uC90D\uC90F\uC911\uC918\uC92C\uC934\uC950\uC951\uC954\uC958\uC960\uC961\uC963\uC96C\uC970\uC974\uC97C\uC988\uC989\uC98C\uC990\uC998\uC999\uC99B\uC99D\uC9C0\uC9C1\uC9C4\uC9C7\uC9C8\uC9CA\uC9D0\uC9D1\uC9D3\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[193].length; ++j)
                if (D[193][j].charCodeAt(0) !== 65533) {
                    e2[D[193][j]] = 49408 + j;
                    d[49408 + j] = D[193][j];
                }
            D[194] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD5CA\uD5CB\uD5CD\uD5CE\uD5CF\uD5D1\uD5D3\uD5D4\uD5D5\uD5D6\uD5D7\uD5DA\uD5DC\uD5DE\uD5DF\uD5E0\uD5E1\uD5E2\uD5E3\uD5E6\uD5E7\uD5E9\uD5EA\uD5EB\uD5ED\uD5EE\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD5EF\uD5F0\uD5F1\uD5F2\uD5F3\uD5F6\uD5F8\uD5FA\uD5FB\uD5FC\uD5FD\uD5FE\uD5FF\uD602\uD603\uD605\uD606\uD607\uD609\uD60A\uD60B\uD60C\uD60D\uD60E\uD60F\uD612\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD616\uD617\uD618\uD619\uD61A\uD61B\uD61D\uD61E\uD61F\uD621\uD622\uD623\uD625\uD626\uD627\uD628\uD629\uD62A\uD62B\uD62C\uD62E\uD62F\uD630\uD631\uD632\uD633\uD634\uD635\uD636\uD637\uD63A\uD63B\uC9D5\uC9D6\uC9D9\uC9DA\uC9DC\uC9DD\uC9E0\uC9E2\uC9E4\uC9E7\uC9EC\uC9ED\uC9EF\uC9F0\uC9F1\uC9F8\uC9F9\uC9FC\uCA00\uCA08\uCA09\uCA0B\uCA0C\uCA0D\uCA14\uCA18\uCA29\uCA4C\uCA4D\uCA50\uCA54\uCA5C\uCA5D\uCA5F\uCA60\uCA61\uCA68\uCA7D\uCA84\uCA98\uCABC\uCABD\uCAC0\uCAC4\uCACC\uCACD\uCACF\uCAD1\uCAD3\uCAD8\uCAD9\uCAE0\uCAEC\uCAF4\uCB08\uCB10\uCB14\uCB18\uCB20\uCB21\uCB41\uCB48\uCB49\uCB4C\uCB50\uCB58\uCB59\uCB5D\uCB64\uCB78\uCB79\uCB9C\uCBB8\uCBD4\uCBE4\uCBE7\uCBE9\uCC0C\uCC0D\uCC10\uCC14\uCC1C\uCC1D\uCC21\uCC22\uCC27\uCC28\uCC29\uCC2C\uCC2E\uCC30\uCC38\uCC39\uCC3B\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[194].length; ++j)
                if (D[194][j].charCodeAt(0) !== 65533) {
                    e2[D[194][j]] = 49664 + j;
                    d[49664 + j] = D[194][j];
                }
            D[195] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD63D\uD63E\uD63F\uD641\uD642\uD643\uD644\uD646\uD647\uD64A\uD64C\uD64E\uD64F\uD650\uD652\uD653\uD656\uD657\uD659\uD65A\uD65B\uD65D\uD65E\uD65F\uD660\uD661\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD662\uD663\uD664\uD665\uD666\uD668\uD66A\uD66B\uD66C\uD66D\uD66E\uD66F\uD672\uD673\uD675\uD676\uD677\uD678\uD679\uD67A\uD67B\uD67C\uD67D\uD67E\uD67F\uD680\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD681\uD682\uD684\uD686\uD687\uD688\uD689\uD68A\uD68B\uD68E\uD68F\uD691\uD692\uD693\uD695\uD696\uD697\uD698\uD699\uD69A\uD69B\uD69C\uD69E\uD6A0\uD6A2\uD6A3\uD6A4\uD6A5\uD6A6\uD6A7\uD6A9\uD6AA\uCC3C\uCC3D\uCC3E\uCC44\uCC45\uCC48\uCC4C\uCC54\uCC55\uCC57\uCC58\uCC59\uCC60\uCC64\uCC66\uCC68\uCC70\uCC75\uCC98\uCC99\uCC9C\uCCA0\uCCA8\uCCA9\uCCAB\uCCAC\uCCAD\uCCB4\uCCB5\uCCB8\uCCBC\uCCC4\uCCC5\uCCC7\uCCC9\uCCD0\uCCD4\uCCE4\uCCEC\uCCF0\uCD01\uCD08\uCD09\uCD0C\uCD10\uCD18\uCD19\uCD1B\uCD1D\uCD24\uCD28\uCD2C\uCD39\uCD5C\uCD60\uCD64\uCD6C\uCD6D\uCD6F\uCD71\uCD78\uCD88\uCD94\uCD95\uCD98\uCD9C\uCDA4\uCDA5\uCDA7\uCDA9\uCDB0\uCDC4\uCDCC\uCDD0\uCDE8\uCDEC\uCDF0\uCDF8\uCDF9\uCDFB\uCDFD\uCE04\uCE08\uCE0C\uCE14\uCE19\uCE20\uCE21\uCE24\uCE28\uCE30\uCE31\uCE33\uCE35\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[195].length; ++j)
                if (D[195][j].charCodeAt(0) !== 65533) {
                    e2[D[195][j]] = 49920 + j;
                    d[49920 + j] = D[195][j];
                }
            D[196] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD6AB\uD6AD\uD6AE\uD6AF\uD6B1\uD6B2\uD6B3\uD6B4\uD6B5\uD6B6\uD6B7\uD6B8\uD6BA\uD6BC\uD6BD\uD6BE\uD6BF\uD6C0\uD6C1\uD6C2\uD6C3\uD6C6\uD6C7\uD6C9\uD6CA\uD6CB\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD6CD\uD6CE\uD6CF\uD6D0\uD6D2\uD6D3\uD6D5\uD6D6\uD6D8\uD6DA\uD6DB\uD6DC\uD6DD\uD6DE\uD6DF\uD6E1\uD6E2\uD6E3\uD6E5\uD6E6\uD6E7\uD6E9\uD6EA\uD6EB\uD6EC\uD6ED\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD6EE\uD6EF\uD6F1\uD6F2\uD6F3\uD6F4\uD6F6\uD6F7\uD6F8\uD6F9\uD6FA\uD6FB\uD6FE\uD6FF\uD701\uD702\uD703\uD705\uD706\uD707\uD708\uD709\uD70A\uD70B\uD70C\uD70D\uD70E\uD70F\uD710\uD712\uD713\uD714\uCE58\uCE59\uCE5C\uCE5F\uCE60\uCE61\uCE68\uCE69\uCE6B\uCE6D\uCE74\uCE75\uCE78\uCE7C\uCE84\uCE85\uCE87\uCE89\uCE90\uCE91\uCE94\uCE98\uCEA0\uCEA1\uCEA3\uCEA4\uCEA5\uCEAC\uCEAD\uCEC1\uCEE4\uCEE5\uCEE8\uCEEB\uCEEC\uCEF4\uCEF5\uCEF7\uCEF8\uCEF9\uCF00\uCF01\uCF04\uCF08\uCF10\uCF11\uCF13\uCF15\uCF1C\uCF20\uCF24\uCF2C\uCF2D\uCF2F\uCF30\uCF31\uCF38\uCF54\uCF55\uCF58\uCF5C\uCF64\uCF65\uCF67\uCF69\uCF70\uCF71\uCF74\uCF78\uCF80\uCF85\uCF8C\uCFA1\uCFA8\uCFB0\uCFC4\uCFE0\uCFE1\uCFE4\uCFE8\uCFF0\uCFF1\uCFF3\uCFF5\uCFFC\uD000\uD004\uD011\uD018\uD02D\uD034\uD035\uD038\uD03C\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[196].length; ++j)
                if (D[196][j].charCodeAt(0) !== 65533) {
                    e2[D[196][j]] = 50176 + j;
                    d[50176 + j] = D[196][j];
                }
            D[197] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD715\uD716\uD717\uD71A\uD71B\uD71D\uD71E\uD71F\uD721\uD722\uD723\uD724\uD725\uD726\uD727\uD72A\uD72C\uD72E\uD72F\uD730\uD731\uD732\uD733\uD736\uD737\uD739\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD73A\uD73B\uD73D\uD73E\uD73F\uD740\uD741\uD742\uD743\uD745\uD746\uD748\uD74A\uD74B\uD74C\uD74D\uD74E\uD74F\uD752\uD753\uD755\uD75A\uD75B\uD75C\uD75D\uD75E\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD75F\uD762\uD764\uD766\uD767\uD768\uD76A\uD76B\uD76D\uD76E\uD76F\uD771\uD772\uD773\uD775\uD776\uD777\uD778\uD779\uD77A\uD77B\uD77E\uD77F\uD780\uD782\uD783\uD784\uD785\uD786\uD787\uD78A\uD78B\uD044\uD045\uD047\uD049\uD050\uD054\uD058\uD060\uD06C\uD06D\uD070\uD074\uD07C\uD07D\uD081\uD0A4\uD0A5\uD0A8\uD0AC\uD0B4\uD0B5\uD0B7\uD0B9\uD0C0\uD0C1\uD0C4\uD0C8\uD0C9\uD0D0\uD0D1\uD0D3\uD0D4\uD0D5\uD0DC\uD0DD\uD0E0\uD0E4\uD0EC\uD0ED\uD0EF\uD0F0\uD0F1\uD0F8\uD10D\uD130\uD131\uD134\uD138\uD13A\uD140\uD141\uD143\uD144\uD145\uD14C\uD14D\uD150\uD154\uD15C\uD15D\uD15F\uD161\uD168\uD16C\uD17C\uD184\uD188\uD1A0\uD1A1\uD1A4\uD1A8\uD1B0\uD1B1\uD1B3\uD1B5\uD1BA\uD1BC\uD1C0\uD1D8\uD1F4\uD1F8\uD207\uD209\uD210\uD22C\uD22D\uD230\uD234\uD23C\uD23D\uD23F\uD241\uD248\uD25C\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[197].length; ++j)
                if (D[197][j].charCodeAt(0) !== 65533) {
                    e2[D[197][j]] = 50432 + j;
                    d[50432 + j] = D[197][j];
                }
            D[198] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD78D\uD78E\uD78F\uD791\uD792\uD793\uD794\uD795\uD796\uD797\uD79A\uD79C\uD79E\uD79F\uD7A0\uD7A1\uD7A2\uD7A3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD264\uD280\uD281\uD284\uD288\uD290\uD291\uD295\uD29C\uD2A0\uD2A4\uD2AC\uD2B1\uD2B8\uD2B9\uD2BC\uD2BF\uD2C0\uD2C2\uD2C8\uD2C9\uD2CB\uD2D4\uD2D8\uD2DC\uD2E4\uD2E5\uD2F0\uD2F1\uD2F4\uD2F8\uD300\uD301\uD303\uD305\uD30C\uD30D\uD30E\uD310\uD314\uD316\uD31C\uD31D\uD31F\uD320\uD321\uD325\uD328\uD329\uD32C\uD330\uD338\uD339\uD33B\uD33C\uD33D\uD344\uD345\uD37C\uD37D\uD380\uD384\uD38C\uD38D\uD38F\uD390\uD391\uD398\uD399\uD39C\uD3A0\uD3A8\uD3A9\uD3AB\uD3AD\uD3B4\uD3B8\uD3BC\uD3C4\uD3C5\uD3C8\uD3C9\uD3D0\uD3D8\uD3E1\uD3E3\uD3EC\uD3ED\uD3F0\uD3F4\uD3FC\uD3FD\uD3FF\uD401\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[198].length; ++j)
                if (D[198][j].charCodeAt(0) !== 65533) {
                    e2[D[198][j]] = 50688 + j;
                    d[50688 + j] = D[198][j];
                }
            D[199] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD408\uD41D\uD440\uD444\uD45C\uD460\uD464\uD46D\uD46F\uD478\uD479\uD47C\uD47F\uD480\uD482\uD488\uD489\uD48B\uD48D\uD494\uD4A9\uD4CC\uD4D0\uD4D4\uD4DC\uD4DF\uD4E8\uD4EC\uD4F0\uD4F8\uD4FB\uD4FD\uD504\uD508\uD50C\uD514\uD515\uD517\uD53C\uD53D\uD540\uD544\uD54C\uD54D\uD54F\uD551\uD558\uD559\uD55C\uD560\uD565\uD568\uD569\uD56B\uD56D\uD574\uD575\uD578\uD57C\uD584\uD585\uD587\uD588\uD589\uD590\uD5A5\uD5C8\uD5C9\uD5CC\uD5D0\uD5D2\uD5D8\uD5D9\uD5DB\uD5DD\uD5E4\uD5E5\uD5E8\uD5EC\uD5F4\uD5F5\uD5F7\uD5F9\uD600\uD601\uD604\uD608\uD610\uD611\uD613\uD614\uD615\uD61C\uD620\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[199].length; ++j)
                if (D[199][j].charCodeAt(0) !== 65533) {
                    e2[D[199][j]] = 50944 + j;
                    d[50944 + j] = D[199][j];
                }
            D[200] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uD624\uD62D\uD638\uD639\uD63C\uD640\uD645\uD648\uD649\uD64B\uD64D\uD651\uD654\uD655\uD658\uD65C\uD667\uD669\uD670\uD671\uD674\uD683\uD685\uD68C\uD68D\uD690\uD694\uD69D\uD69F\uD6A1\uD6A8\uD6AC\uD6B0\uD6B9\uD6BB\uD6C4\uD6C5\uD6C8\uD6CC\uD6D1\uD6D4\uD6D7\uD6D9\uD6E0\uD6E4\uD6E8\uD6F0\uD6F5\uD6FC\uD6FD\uD700\uD704\uD711\uD718\uD719\uD71C\uD720\uD728\uD729\uD72B\uD72D\uD734\uD735\uD738\uD73C\uD744\uD747\uD749\uD750\uD751\uD754\uD756\uD757\uD758\uD759\uD760\uD761\uD763\uD765\uD769\uD76C\uD770\uD774\uD77C\uD77D\uD781\uD788\uD789\uD78C\uD790\uD798\uD799\uD79B\uD79D\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[200].length; ++j)
                if (D[200][j].charCodeAt(0) !== 65533) {
                    e2[D[200][j]] = 51200 + j;
                    d[51200 + j] = D[200][j];
                }
            D[202] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4F3D\u4F73\u5047\u50F9\u52A0\u53EF\u5475\u54E5\u5609\u5AC1\u5BB6\u6687\u67B6\u67B7\u67EF\u6B4C\u73C2\u75C2\u7A3C\u82DB\u8304\u8857\u8888\u8A36\u8CC8\u8DCF\u8EFB\u8FE6\u99D5\u523B\u5374\u5404\u606A\u6164\u6BBC\u73CF\u811A\u89BA\u89D2\u95A3\u4F83\u520A\u58BE\u5978\u59E6\u5E72\u5E79\u61C7\u63C0\u6746\u67EC\u687F\u6F97\u764E\u770B\u78F5\u7A08\u7AFF\u7C21\u809D\u826E\u8271\u8AEB\u9593\u4E6B\u559D\u66F7\u6E34\u78A3\u7AED\u845B\u8910\u874E\u97A8\u52D8\u574E\u582A\u5D4C\u611F\u61BE\u6221\u6562\u67D1\u6A44\u6E1B\u7518\u75B3\u76E3\u77B0\u7D3A\u90AF\u9451\u9452\u9F95\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[202].length; ++j)
                if (D[202][j].charCodeAt(0) !== 65533) {
                    e2[D[202][j]] = 51712 + j;
                    d[51712 + j] = D[202][j];
                }
            D[203] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5323\u5CAC\u7532\u80DB\u9240\u9598\u525B\u5808\u59DC\u5CA1\u5D17\u5EB7\u5F3A\u5F4A\u6177\u6C5F\u757A\u7586\u7CE0\u7D73\u7DB1\u7F8C\u8154\u8221\u8591\u8941\u8B1B\u92FC\u964D\u9C47\u4ECB\u4EF7\u500B\u51F1\u584F\u6137\u613E\u6168\u6539\u69EA\u6F11\u75A5\u7686\u76D6\u7B87\u82A5\u84CB\uF900\u93A7\u958B\u5580\u5BA2\u5751\uF901\u7CB3\u7FB9\u91B5\u5028\u53BB\u5C45\u5DE8\u62D2\u636E\u64DA\u64E7\u6E20\u70AC\u795B\u8DDD\u8E1E\uF902\u907D\u9245\u92F8\u4E7E\u4EF6\u5065\u5DFE\u5EFA\u6106\u6957\u8171\u8654\u8E47\u9375\u9A2B\u4E5E\u5091\u6770\u6840\u5109\u528D\u5292\u6AA2\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[203].length; ++j)
                if (D[203][j].charCodeAt(0) !== 65533) {
                    e2[D[203][j]] = 51968 + j;
                    d[51968 + j] = D[203][j];
                }
            D[204] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u77BC\u9210\u9ED4\u52AB\u602F\u8FF2\u5048\u61A9\u63ED\u64CA\u683C\u6A84\u6FC0\u8188\u89A1\u9694\u5805\u727D\u72AC\u7504\u7D79\u7E6D\u80A9\u898B\u8B74\u9063\u9D51\u6289\u6C7A\u6F54\u7D50\u7F3A\u8A23\u517C\u614A\u7B9D\u8B19\u9257\u938C\u4EAC\u4FD3\u501E\u50BE\u5106\u52C1\u52CD\u537F\u5770\u5883\u5E9A\u5F91\u6176\u61AC\u64CE\u656C\u666F\u66BB\u66F4\u6897\u6D87\u7085\u70F1\u749F\u74A5\u74CA\u75D9\u786C\u78EC\u7ADF\u7AF6\u7D45\u7D93\u8015\u803F\u811B\u8396\u8B66\u8F15\u9015\u93E1\u9803\u9838\u9A5A\u9BE8\u4FC2\u5553\u583A\u5951\u5B63\u5C46\u60B8\u6212\u6842\u68B0\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[204].length; ++j)
                if (D[204][j].charCodeAt(0) !== 65533) {
                    e2[D[204][j]] = 52224 + j;
                    d[52224 + j] = D[204][j];
                }
            D[205] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u68E8\u6EAA\u754C\u7678\u78CE\u7A3D\u7CFB\u7E6B\u7E7C\u8A08\u8AA1\u8C3F\u968E\u9DC4\u53E4\u53E9\u544A\u5471\u56FA\u59D1\u5B64\u5C3B\u5EAB\u62F7\u6537\u6545\u6572\u66A0\u67AF\u69C1\u6CBD\u75FC\u7690\u777E\u7A3F\u7F94\u8003\u80A1\u818F\u82E6\u82FD\u83F0\u85C1\u8831\u88B4\u8AA5\uF903\u8F9C\u932E\u96C7\u9867\u9AD8\u9F13\u54ED\u659B\u66F2\u688F\u7A40\u8C37\u9D60\u56F0\u5764\u5D11\u6606\u68B1\u68CD\u6EFE\u7428\u889E\u9BE4\u6C68\uF904\u9AA8\u4F9B\u516C\u5171\u529F\u5B54\u5DE5\u6050\u606D\u62F1\u63A7\u653B\u73D9\u7A7A\u86A3\u8CA2\u978F\u4E32\u5BE1\u6208\u679C\u74DC\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[205].length; ++j)
                if (D[205][j].charCodeAt(0) !== 65533) {
                    e2[D[205][j]] = 52480 + j;
                    d[52480 + j] = D[205][j];
                }
            D[206] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u79D1\u83D3\u8A87\u8AB2\u8DE8\u904E\u934B\u9846\u5ED3\u69E8\u85FF\u90ED\uF905\u51A0\u5B98\u5BEC\u6163\u68FA\u6B3E\u704C\u742F\u74D8\u7BA1\u7F50\u83C5\u89C0\u8CAB\u95DC\u9928\u522E\u605D\u62EC\u9002\u4F8A\u5149\u5321\u58D9\u5EE3\u66E0\u6D38\u709A\u72C2\u73D6\u7B50\u80F1\u945B\u5366\u639B\u7F6B\u4E56\u5080\u584A\u58DE\u602A\u6127\u62D0\u69D0\u9B41\u5B8F\u7D18\u80B1\u8F5F\u4EA4\u50D1\u54AC\u55AC\u5B0C\u5DA0\u5DE7\u652A\u654E\u6821\u6A4B\u72E1\u768E\u77EF\u7D5E\u7FF9\u81A0\u854E\u86DF\u8F03\u8F4E\u90CA\u9903\u9A55\u9BAB\u4E18\u4E45\u4E5D\u4EC7\u4FF1\u5177\u52FE\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[206].length; ++j)
                if (D[206][j].charCodeAt(0) !== 65533) {
                    e2[D[206][j]] = 52736 + j;
                    d[52736 + j] = D[206][j];
                }
            D[207] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5340\u53E3\u53E5\u548E\u5614\u5775\u57A2\u5BC7\u5D87\u5ED0\u61FC\u62D8\u6551\u67B8\u67E9\u69CB\u6B50\u6BC6\u6BEC\u6C42\u6E9D\u7078\u72D7\u7396\u7403\u77BF\u77E9\u7A76\u7D7F\u8009\u81FC\u8205\u820A\u82DF\u8862\u8B33\u8CFC\u8EC0\u9011\u90B1\u9264\u92B6\u99D2\u9A45\u9CE9\u9DD7\u9F9C\u570B\u5C40\u83CA\u97A0\u97AB\u9EB4\u541B\u7A98\u7FA4\u88D9\u8ECD\u90E1\u5800\u5C48\u6398\u7A9F\u5BAE\u5F13\u7A79\u7AAE\u828E\u8EAC\u5026\u5238\u52F8\u5377\u5708\u62F3\u6372\u6B0A\u6DC3\u7737\u53A5\u7357\u8568\u8E76\u95D5\u673A\u6AC3\u6F70\u8A6D\u8ECC\u994B\uF906\u6677\u6B78\u8CB4\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[207].length; ++j)
                if (D[207][j].charCodeAt(0) !== 65533) {
                    e2[D[207][j]] = 52992 + j;
                    d[52992 + j] = D[207][j];
                }
            D[208] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9B3C\uF907\u53EB\u572D\u594E\u63C6\u69FB\u73EA\u7845\u7ABA\u7AC5\u7CFE\u8475\u898F\u8D73\u9035\u95A8\u52FB\u5747\u7547\u7B60\u83CC\u921E\uF908\u6A58\u514B\u524B\u5287\u621F\u68D8\u6975\u9699\u50C5\u52A4\u52E4\u61C3\u65A4\u6839\u69FF\u747E\u7B4B\u82B9\u83EB\u89B2\u8B39\u8FD1\u9949\uF909\u4ECA\u5997\u64D2\u6611\u6A8E\u7434\u7981\u79BD\u82A9\u887E\u887F\u895F\uF90A\u9326\u4F0B\u53CA\u6025\u6271\u6C72\u7D1A\u7D66\u4E98\u5162\u77DC\u80AF\u4F01\u4F0E\u5176\u5180\u55DC\u5668\u573B\u57FA\u57FC\u5914\u5947\u5993\u5BC4\u5C90\u5D0E\u5DF1\u5E7E\u5FCC\u6280\u65D7\u65E3\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[208].length; ++j)
                if (D[208][j].charCodeAt(0) !== 65533) {
                    e2[D[208][j]] = 53248 + j;
                    d[53248 + j] = D[208][j];
                }
            D[209] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u671E\u671F\u675E\u68CB\u68C4\u6A5F\u6B3A\u6C23\u6C7D\u6C82\u6DC7\u7398\u7426\u742A\u7482\u74A3\u7578\u757F\u7881\u78EF\u7941\u7947\u7948\u797A\u7B95\u7D00\u7DBA\u7F88\u8006\u802D\u808C\u8A18\u8B4F\u8C48\u8D77\u9321\u9324\u98E2\u9951\u9A0E\u9A0F\u9A65\u9E92\u7DCA\u4F76\u5409\u62EE\u6854\u91D1\u55AB\u513A\uF90B\uF90C\u5A1C\u61E6\uF90D\u62CF\u62FF\uF90E\uF90F\uF910\uF911\uF912\uF913\u90A3\uF914\uF915\uF916\uF917\uF918\u8AFE\uF919\uF91A\uF91B\uF91C\u6696\uF91D\u7156\uF91E\uF91F\u96E3\uF920\u634F\u637A\u5357\uF921\u678F\u6960\u6E73\uF922\u7537\uF923\uF924\uF925\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[209].length; ++j)
                if (D[209][j].charCodeAt(0) !== 65533) {
                    e2[D[209][j]] = 53504 + j;
                    d[53504 + j] = D[209][j];
                }
            D[210] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7D0D\uF926\uF927\u8872\u56CA\u5A18\uF928\uF929\uF92A\uF92B\uF92C\u4E43\uF92D\u5167\u5948\u67F0\u8010\uF92E\u5973\u5E74\u649A\u79CA\u5FF5\u606C\u62C8\u637B\u5BE7\u5BD7\u52AA\uF92F\u5974\u5F29\u6012\uF930\uF931\uF932\u7459\uF933\uF934\uF935\uF936\uF937\uF938\u99D1\uF939\uF93A\uF93B\uF93C\uF93D\uF93E\uF93F\uF940\uF941\uF942\uF943\u6FC3\uF944\uF945\u81BF\u8FB2\u60F1\uF946\uF947\u8166\uF948\uF949\u5C3F\uF94A\uF94B\uF94C\uF94D\uF94E\uF94F\uF950\uF951\u5AE9\u8A25\u677B\u7D10\uF952\uF953\uF954\uF955\uF956\uF957\u80FD\uF958\uF959\u5C3C\u6CE5\u533F\u6EBA\u591A\u8336\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[210].length; ++j)
                if (D[210][j].charCodeAt(0) !== 65533) {
                    e2[D[210][j]] = 53760 + j;
                    d[53760 + j] = D[210][j];
                }
            D[211] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4E39\u4EB6\u4F46\u55AE\u5718\u58C7\u5F56\u65B7\u65E6\u6A80\u6BB5\u6E4D\u77ED\u7AEF\u7C1E\u7DDE\u86CB\u8892\u9132\u935B\u64BB\u6FBE\u737A\u75B8\u9054\u5556\u574D\u61BA\u64D4\u66C7\u6DE1\u6E5B\u6F6D\u6FB9\u75F0\u8043\u81BD\u8541\u8983\u8AC7\u8B5A\u931F\u6C93\u7553\u7B54\u8E0F\u905D\u5510\u5802\u5858\u5E62\u6207\u649E\u68E0\u7576\u7CD6\u87B3\u9EE8\u4EE3\u5788\u576E\u5927\u5C0D\u5CB1\u5E36\u5F85\u6234\u64E1\u73B3\u81FA\u888B\u8CB8\u968A\u9EDB\u5B85\u5FB7\u60B3\u5012\u5200\u5230\u5716\u5835\u5857\u5C0E\u5C60\u5CF6\u5D8B\u5EA6\u5F92\u60BC\u6311\u6389\u6417\u6843\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[211].length; ++j)
                if (D[211][j].charCodeAt(0) !== 65533) {
                    e2[D[211][j]] = 54016 + j;
                    d[54016 + j] = D[211][j];
                }
            D[212] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u68F9\u6AC2\u6DD8\u6E21\u6ED4\u6FE4\u71FE\u76DC\u7779\u79B1\u7A3B\u8404\u89A9\u8CED\u8DF3\u8E48\u9003\u9014\u9053\u90FD\u934D\u9676\u97DC\u6BD2\u7006\u7258\u72A2\u7368\u7763\u79BF\u7BE4\u7E9B\u8B80\u58A9\u60C7\u6566\u65FD\u66BE\u6C8C\u711E\u71C9\u8C5A\u9813\u4E6D\u7A81\u4EDD\u51AC\u51CD\u52D5\u540C\u61A7\u6771\u6850\u68DF\u6D1E\u6F7C\u75BC\u77B3\u7AE5\u80F4\u8463\u9285\u515C\u6597\u675C\u6793\u75D8\u7AC7\u8373\uF95A\u8C46\u9017\u982D\u5C6F\u81C0\u829A\u9041\u906F\u920D\u5F97\u5D9D\u6A59\u71C8\u767B\u7B49\u85E4\u8B04\u9127\u9A30\u5587\u61F6\uF95B\u7669\u7F85\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[212].length; ++j)
                if (D[212][j].charCodeAt(0) !== 65533) {
                    e2[D[212][j]] = 54272 + j;
                    d[54272 + j] = D[212][j];
                }
            D[213] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u863F\u87BA\u88F8\u908F\uF95C\u6D1B\u70D9\u73DE\u7D61\u843D\uF95D\u916A\u99F1\uF95E\u4E82\u5375\u6B04\u6B12\u703E\u721B\u862D\u9E1E\u524C\u8FA3\u5D50\u64E5\u652C\u6B16\u6FEB\u7C43\u7E9C\u85CD\u8964\u89BD\u62C9\u81D8\u881F\u5ECA\u6717\u6D6A\u72FC\u7405\u746F\u8782\u90DE\u4F86\u5D0D\u5FA0\u840A\u51B7\u63A0\u7565\u4EAE\u5006\u5169\u51C9\u6881\u6A11\u7CAE\u7CB1\u7CE7\u826F\u8AD2\u8F1B\u91CF\u4FB6\u5137\u52F5\u5442\u5EEC\u616E\u623E\u65C5\u6ADA\u6FFE\u792A\u85DC\u8823\u95AD\u9A62\u9A6A\u9E97\u9ECE\u529B\u66C6\u6B77\u701D\u792B\u8F62\u9742\u6190\u6200\u6523\u6F23\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[213].length; ++j)
                if (D[213][j].charCodeAt(0) !== 65533) {
                    e2[D[213][j]] = 54528 + j;
                    d[54528 + j] = D[213][j];
                }
            D[214] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7149\u7489\u7DF4\u806F\u84EE\u8F26\u9023\u934A\u51BD\u5217\u52A3\u6D0C\u70C8\u88C2\u5EC9\u6582\u6BAE\u6FC2\u7C3E\u7375\u4EE4\u4F36\u56F9\uF95F\u5CBA\u5DBA\u601C\u73B2\u7B2D\u7F9A\u7FCE\u8046\u901E\u9234\u96F6\u9748\u9818\u9F61\u4F8B\u6FA7\u79AE\u91B4\u96B7\u52DE\uF960\u6488\u64C4\u6AD3\u6F5E\u7018\u7210\u76E7\u8001\u8606\u865C\u8DEF\u8F05\u9732\u9B6F\u9DFA\u9E75\u788C\u797F\u7DA0\u83C9\u9304\u9E7F\u9E93\u8AD6\u58DF\u5F04\u6727\u7027\u74CF\u7C60\u807E\u5121\u7028\u7262\u78CA\u8CC2\u8CDA\u8CF4\u96F7\u4E86\u50DA\u5BEE\u5ED6\u6599\u71CE\u7642\u77AD\u804A\u84FC\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[214].length; ++j)
                if (D[214][j].charCodeAt(0) !== 65533) {
                    e2[D[214][j]] = 54784 + j;
                    d[54784 + j] = D[214][j];
                }
            D[215] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u907C\u9B27\u9F8D\u58D8\u5A41\u5C62\u6A13\u6DDA\u6F0F\u763B\u7D2F\u7E37\u851E\u8938\u93E4\u964B\u5289\u65D2\u67F3\u69B4\u6D41\u6E9C\u700F\u7409\u7460\u7559\u7624\u786B\u8B2C\u985E\u516D\u622E\u9678\u4F96\u502B\u5D19\u6DEA\u7DB8\u8F2A\u5F8B\u6144\u6817\uF961\u9686\u52D2\u808B\u51DC\u51CC\u695E\u7A1C\u7DBE\u83F1\u9675\u4FDA\u5229\u5398\u540F\u550E\u5C65\u60A7\u674E\u68A8\u6D6C\u7281\u72F8\u7406\u7483\uF962\u75E2\u7C6C\u7F79\u7FB8\u8389\u88CF\u88E1\u91CC\u91D0\u96E2\u9BC9\u541D\u6F7E\u71D0\u7498\u85FA\u8EAA\u96A3\u9C57\u9E9F\u6797\u6DCB\u7433\u81E8\u9716\u782C\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[215].length; ++j)
                if (D[215][j].charCodeAt(0) !== 65533) {
                    e2[D[215][j]] = 55040 + j;
                    d[55040 + j] = D[215][j];
                }
            D[216] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7ACB\u7B20\u7C92\u6469\u746A\u75F2\u78BC\u78E8\u99AC\u9B54\u9EBB\u5BDE\u5E55\u6F20\u819C\u83AB\u9088\u4E07\u534D\u5A29\u5DD2\u5F4E\u6162\u633D\u6669\u66FC\u6EFF\u6F2B\u7063\u779E\u842C\u8513\u883B\u8F13\u9945\u9C3B\u551C\u62B9\u672B\u6CAB\u8309\u896A\u977A\u4EA1\u5984\u5FD8\u5FD9\u671B\u7DB2\u7F54\u8292\u832B\u83BD\u8F1E\u9099\u57CB\u59B9\u5A92\u5BD0\u6627\u679A\u6885\u6BCF\u7164\u7F75\u8CB7\u8CE3\u9081\u9B45\u8108\u8C8A\u964C\u9A40\u9EA5\u5B5F\u6C13\u731B\u76F2\u76DF\u840C\u51AA\u8993\u514D\u5195\u52C9\u68C9\u6C94\u7704\u7720\u7DBF\u7DEC\u9762\u9EB5\u6EC5\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[216].length; ++j)
                if (D[216][j].charCodeAt(0) !== 65533) {
                    e2[D[216][j]] = 55296 + j;
                    d[55296 + j] = D[216][j];
                }
            D[217] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8511\u51A5\u540D\u547D\u660E\u669D\u6927\u6E9F\u76BF\u7791\u8317\u84C2\u879F\u9169\u9298\u9CF4\u8882\u4FAE\u5192\u52DF\u59C6\u5E3D\u6155\u6478\u6479\u66AE\u67D0\u6A21\u6BCD\u6BDB\u725F\u7261\u7441\u7738\u77DB\u8017\u82BC\u8305\u8B00\u8B28\u8C8C\u6728\u6C90\u7267\u76EE\u7766\u7A46\u9DA9\u6B7F\u6C92\u5922\u6726\u8499\u536F\u5893\u5999\u5EDF\u63CF\u6634\u6773\u6E3A\u732B\u7AD7\u82D7\u9328\u52D9\u5DEB\u61AE\u61CB\u620A\u62C7\u64AB\u65E0\u6959\u6B66\u6BCB\u7121\u73F7\u755D\u7E46\u821E\u8302\u856A\u8AA3\u8CBF\u9727\u9D61\u58A8\u9ED8\u5011\u520E\u543B\u554F\u6587\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[217].length; ++j)
                if (D[217][j].charCodeAt(0) !== 65533) {
                    e2[D[217][j]] = 55552 + j;
                    d[55552 + j] = D[217][j];
                }
            D[218] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6C76\u7D0A\u7D0B\u805E\u868A\u9580\u96EF\u52FF\u6C95\u7269\u5473\u5A9A\u5C3E\u5D4B\u5F4C\u5FAE\u672A\u68B6\u6963\u6E3C\u6E44\u7709\u7C73\u7F8E\u8587\u8B0E\u8FF7\u9761\u9EF4\u5CB7\u60B6\u610D\u61AB\u654F\u65FB\u65FC\u6C11\u6CEF\u739F\u73C9\u7DE1\u9594\u5BC6\u871C\u8B10\u525D\u535A\u62CD\u640F\u64B2\u6734\u6A38\u6CCA\u73C0\u749E\u7B94\u7C95\u7E1B\u818A\u8236\u8584\u8FEB\u96F9\u99C1\u4F34\u534A\u53CD\u53DB\u62CC\u642C\u6500\u6591\u69C3\u6CEE\u6F58\u73ED\u7554\u7622\u76E4\u76FC\u78D0\u78FB\u792C\u7D46\u822C\u87E0\u8FD4\u9812\u98EF\u52C3\u62D4\u64A5\u6E24\u6F51\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[218].length; ++j)
                if (D[218][j].charCodeAt(0) !== 65533) {
                    e2[D[218][j]] = 55808 + j;
                    d[55808 + j] = D[218][j];
                }
            D[219] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u767C\u8DCB\u91B1\u9262\u9AEE\u9B43\u5023\u508D\u574A\u59A8\u5C28\u5E47\u5F77\u623F\u653E\u65B9\u65C1\u6609\u678B\u699C\u6EC2\u78C5\u7D21\u80AA\u8180\u822B\u82B3\u84A1\u868C\u8A2A\u8B17\u90A6\u9632\u9F90\u500D\u4FF3\uF963\u57F9\u5F98\u62DC\u6392\u676F\u6E43\u7119\u76C3\u80CC\u80DA\u88F4\u88F5\u8919\u8CE0\u8F29\u914D\u966A\u4F2F\u4F70\u5E1B\u67CF\u6822\u767D\u767E\u9B44\u5E61\u6A0A\u7169\u71D4\u756A\uF964\u7E41\u8543\u85E9\u98DC\u4F10\u7B4F\u7F70\u95A5\u51E1\u5E06\u68B5\u6C3E\u6C4E\u6CDB\u72AF\u7BC4\u8303\u6CD5\u743A\u50FB\u5288\u58C1\u64D8\u6A97\u74A7\u7656\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[219].length; ++j)
                if (D[219][j].charCodeAt(0) !== 65533) {
                    e2[D[219][j]] = 56064 + j;
                    d[56064 + j] = D[219][j];
                }
            D[220] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u78A7\u8617\u95E2\u9739\uF965\u535E\u5F01\u8B8A\u8FA8\u8FAF\u908A\u5225\u77A5\u9C49\u9F08\u4E19\u5002\u5175\u5C5B\u5E77\u661E\u663A\u67C4\u68C5\u70B3\u7501\u75C5\u79C9\u7ADD\u8F27\u9920\u9A08\u4FDD\u5821\u5831\u5BF6\u666E\u6B65\u6D11\u6E7A\u6F7D\u73E4\u752B\u83E9\u88DC\u8913\u8B5C\u8F14\u4F0F\u50D5\u5310\u535C\u5B93\u5FA9\u670D\u798F\u8179\u832F\u8514\u8907\u8986\u8F39\u8F3B\u99A5\u9C12\u672C\u4E76\u4FF8\u5949\u5C01\u5CEF\u5CF0\u6367\u68D2\u70FD\u71A2\u742B\u7E2B\u84EC\u8702\u9022\u92D2\u9CF3\u4E0D\u4ED8\u4FEF\u5085\u5256\u526F\u5426\u5490\u57E0\u592B\u5A66\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[220].length; ++j)
                if (D[220][j].charCodeAt(0) !== 65533) {
                    e2[D[220][j]] = 56320 + j;
                    d[56320 + j] = D[220][j];
                }
            D[221] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5B5A\u5B75\u5BCC\u5E9C\uF966\u6276\u6577\u65A7\u6D6E\u6EA5\u7236\u7B26\u7C3F\u7F36\u8150\u8151\u819A\u8240\u8299\u83A9\u8A03\u8CA0\u8CE6\u8CFB\u8D74\u8DBA\u90E8\u91DC\u961C\u9644\u99D9\u9CE7\u5317\u5206\u5429\u5674\u58B3\u5954\u596E\u5FFF\u61A4\u626E\u6610\u6C7E\u711A\u76C6\u7C89\u7CDE\u7D1B\u82AC\u8CC1\u96F0\uF967\u4F5B\u5F17\u5F7F\u62C2\u5D29\u670B\u68DA\u787C\u7E43\u9D6C\u4E15\u5099\u5315\u532A\u5351\u5983\u5A62\u5E87\u60B2\u618A\u6249\u6279\u6590\u6787\u69A7\u6BD4\u6BD6\u6BD7\u6BD8\u6CB8\uF968\u7435\u75FA\u7812\u7891\u79D5\u79D8\u7C83\u7DCB\u7FE1\u80A5\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[221].length; ++j)
                if (D[221][j].charCodeAt(0) !== 65533) {
                    e2[D[221][j]] = 56576 + j;
                    d[56576 + j] = D[221][j];
                }
            D[222] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u813E\u81C2\u83F2\u871A\u88E8\u8AB9\u8B6C\u8CBB\u9119\u975E\u98DB\u9F3B\u56AC\u5B2A\u5F6C\u658C\u6AB3\u6BAF\u6D5C\u6FF1\u7015\u725D\u73AD\u8CA7\u8CD3\u983B\u6191\u6C37\u8058\u9A01\u4E4D\u4E8B\u4E9B\u4ED5\u4F3A\u4F3C\u4F7F\u4FDF\u50FF\u53F2\u53F8\u5506\u55E3\u56DB\u58EB\u5962\u5A11\u5BEB\u5BFA\u5C04\u5DF3\u5E2B\u5F99\u601D\u6368\u659C\u65AF\u67F6\u67FB\u68AD\u6B7B\u6C99\u6CD7\u6E23\u7009\u7345\u7802\u793E\u7940\u7960\u79C1\u7BE9\u7D17\u7D72\u8086\u820D\u838E\u84D1\u86C7\u88DF\u8A50\u8A5E\u8B1D\u8CDC\u8D66\u8FAD\u90AA\u98FC\u99DF\u9E9D\u524A\uF969\u6714\uF96A\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[222].length; ++j)
                if (D[222][j].charCodeAt(0) !== 65533) {
                    e2[D[222][j]] = 56832 + j;
                    d[56832 + j] = D[222][j];
                }
            D[223] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5098\u522A\u5C71\u6563\u6C55\u73CA\u7523\u759D\u7B97\u849C\u9178\u9730\u4E77\u6492\u6BBA\u715E\u85A9\u4E09\uF96B\u6749\u68EE\u6E17\u829F\u8518\u886B\u63F7\u6F81\u9212\u98AF\u4E0A\u50B7\u50CF\u511F\u5546\u55AA\u5617\u5B40\u5C19\u5CE0\u5E38\u5E8A\u5EA0\u5EC2\u60F3\u6851\u6A61\u6E58\u723D\u7240\u72C0\u76F8\u7965\u7BB1\u7FD4\u88F3\u89F4\u8A73\u8C61\u8CDE\u971C\u585E\u74BD\u8CFD\u55C7\uF96C\u7A61\u7D22\u8272\u7272\u751F\u7525\uF96D\u7B19\u5885\u58FB\u5DBC\u5E8F\u5EB6\u5F90\u6055\u6292\u637F\u654D\u6691\u66D9\u66F8\u6816\u68F2\u7280\u745E\u7B6E\u7D6E\u7DD6\u7F72\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[223].length; ++j)
                if (D[223][j].charCodeAt(0) !== 65533) {
                    e2[D[223][j]] = 57088 + j;
                    d[57088 + j] = D[223][j];
                }
            D[224] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u80E5\u8212\u85AF\u897F\u8A93\u901D\u92E4\u9ECD\u9F20\u5915\u596D\u5E2D\u60DC\u6614\u6673\u6790\u6C50\u6DC5\u6F5F\u77F3\u78A9\u84C6\u91CB\u932B\u4ED9\u50CA\u5148\u5584\u5B0B\u5BA3\u6247\u657E\u65CB\u6E32\u717D\u7401\u7444\u7487\u74BF\u766C\u79AA\u7DDA\u7E55\u7FA8\u817A\u81B3\u8239\u861A\u87EC\u8A75\u8DE3\u9078\u9291\u9425\u994D\u9BAE\u5368\u5C51\u6954\u6CC4\u6D29\u6E2B\u820C\u859B\u893B\u8A2D\u8AAA\u96EA\u9F67\u5261\u66B9\u6BB2\u7E96\u87FE\u8D0D\u9583\u965D\u651D\u6D89\u71EE\uF96E\u57CE\u59D3\u5BAC\u6027\u60FA\u6210\u661F\u665F\u7329\u73F9\u76DB\u7701\u7B6C\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[224].length; ++j)
                if (D[224][j].charCodeAt(0) !== 65533) {
                    e2[D[224][j]] = 57344 + j;
                    d[57344 + j] = D[224][j];
                }
            D[225] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8056\u8072\u8165\u8AA0\u9192\u4E16\u52E2\u6B72\u6D17\u7A05\u7B39\u7D30\uF96F\u8CB0\u53EC\u562F\u5851\u5BB5\u5C0F\u5C11\u5DE2\u6240\u6383\u6414\u662D\u68B3\u6CBC\u6D88\u6EAF\u701F\u70A4\u71D2\u7526\u758F\u758E\u7619\u7B11\u7BE0\u7C2B\u7D20\u7D39\u852C\u856D\u8607\u8A34\u900D\u9061\u90B5\u92B7\u97F6\u9A37\u4FD7\u5C6C\u675F\u6D91\u7C9F\u7E8C\u8B16\u8D16\u901F\u5B6B\u5DFD\u640D\u84C0\u905C\u98E1\u7387\u5B8B\u609A\u677E\u6DDE\u8A1F\u8AA6\u9001\u980C\u5237\uF970\u7051\u788E\u9396\u8870\u91D7\u4FEE\u53D7\u55FD\u56DA\u5782\u58FD\u5AC2\u5B88\u5CAB\u5CC0\u5E25\u6101\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[225].length; ++j)
                if (D[225][j].charCodeAt(0) !== 65533) {
                    e2[D[225][j]] = 57600 + j;
                    d[57600 + j] = D[225][j];
                }
            D[226] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u620D\u624B\u6388\u641C\u6536\u6578\u6A39\u6B8A\u6C34\u6D19\u6F31\u71E7\u72E9\u7378\u7407\u74B2\u7626\u7761\u79C0\u7A57\u7AEA\u7CB9\u7D8F\u7DAC\u7E61\u7F9E\u8129\u8331\u8490\u84DA\u85EA\u8896\u8AB0\u8B90\u8F38\u9042\u9083\u916C\u9296\u92B9\u968B\u96A7\u96A8\u96D6\u9700\u9808\u9996\u9AD3\u9B1A\u53D4\u587E\u5919\u5B70\u5BBF\u6DD1\u6F5A\u719F\u7421\u74B9\u8085\u83FD\u5DE1\u5F87\u5FAA\u6042\u65EC\u6812\u696F\u6A53\u6B89\u6D35\u6DF3\u73E3\u76FE\u77AC\u7B4D\u7D14\u8123\u821C\u8340\u84F4\u8563\u8A62\u8AC4\u9187\u931E\u9806\u99B4\u620C\u8853\u8FF0\u9265\u5D07\u5D27\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[226].length; ++j)
                if (D[226][j].charCodeAt(0) !== 65533) {
                    e2[D[226][j]] = 57856 + j;
                    d[57856 + j] = D[226][j];
                }
            D[227] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5D69\u745F\u819D\u8768\u6FD5\u62FE\u7FD2\u8936\u8972\u4E1E\u4E58\u50E7\u52DD\u5347\u627F\u6607\u7E69\u8805\u965E\u4F8D\u5319\u5636\u59CB\u5AA4\u5C38\u5C4E\u5C4D\u5E02\u5F11\u6043\u65BD\u662F\u6642\u67BE\u67F4\u731C\u77E2\u793A\u7FC5\u8494\u84CD\u8996\u8A66\u8A69\u8AE1\u8C55\u8C7A\u57F4\u5BD4\u5F0F\u606F\u62ED\u690D\u6B96\u6E5C\u7184\u7BD2\u8755\u8B58\u8EFE\u98DF\u98FE\u4F38\u4F81\u4FE1\u547B\u5A20\u5BB8\u613C\u65B0\u6668\u71FC\u7533\u795E\u7D33\u814E\u81E3\u8398\u85AA\u85CE\u8703\u8A0A\u8EAB\u8F9B\uF971\u8FC5\u5931\u5BA4\u5BE6\u6089\u5BE9\u5C0B\u5FC3\u6C81\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[227].length; ++j)
                if (D[227][j].charCodeAt(0) !== 65533) {
                    e2[D[227][j]] = 58112 + j;
                    d[58112 + j] = D[227][j];
                }
            D[228] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uF972\u6DF1\u700B\u751A\u82AF\u8AF6\u4EC0\u5341\uF973\u96D9\u6C0F\u4E9E\u4FC4\u5152\u555E\u5A25\u5CE8\u6211\u7259\u82BD\u83AA\u86FE\u8859\u8A1D\u963F\u96C5\u9913\u9D09\u9D5D\u580A\u5CB3\u5DBD\u5E44\u60E1\u6115\u63E1\u6A02\u6E25\u9102\u9354\u984E\u9C10\u9F77\u5B89\u5CB8\u6309\u664F\u6848\u773C\u96C1\u978D\u9854\u9B9F\u65A1\u8B01\u8ECB\u95BC\u5535\u5CA9\u5DD6\u5EB5\u6697\u764C\u83F4\u95C7\u58D3\u62BC\u72CE\u9D28\u4EF0\u592E\u600F\u663B\u6B83\u79E7\u9D26\u5393\u54C0\u57C3\u5D16\u611B\u66D6\u6DAF\u788D\u827E\u9698\u9744\u5384\u627C\u6396\u6DB2\u7E0A\u814B\u984D\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[228].length; ++j)
                if (D[228][j].charCodeAt(0) !== 65533) {
                    e2[D[228][j]] = 58368 + j;
                    d[58368 + j] = D[228][j];
                }
            D[229] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6AFB\u7F4C\u9DAF\u9E1A\u4E5F\u503B\u51B6\u591C\u60F9\u63F6\u6930\u723A\u8036\uF974\u91CE\u5F31\uF975\uF976\u7D04\u82E5\u846F\u84BB\u85E5\u8E8D\uF977\u4F6F\uF978\uF979\u58E4\u5B43\u6059\u63DA\u6518\u656D\u6698\uF97A\u694A\u6A23\u6D0B\u7001\u716C\u75D2\u760D\u79B3\u7A70\uF97B\u7F8A\uF97C\u8944\uF97D\u8B93\u91C0\u967D\uF97E\u990A\u5704\u5FA1\u65BC\u6F01\u7600\u79A6\u8A9E\u99AD\u9B5A\u9F6C\u5104\u61B6\u6291\u6A8D\u81C6\u5043\u5830\u5F66\u7109\u8A00\u8AFA\u5B7C\u8616\u4FFA\u513C\u56B4\u5944\u63A9\u6DF9\u5DAA\u696D\u5186\u4E88\u4F59\uF97F\uF980\uF981\u5982\uF982\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[229].length; ++j)
                if (D[229][j].charCodeAt(0) !== 65533) {
                    e2[D[229][j]] = 58624 + j;
                    d[58624 + j] = D[229][j];
                }
            D[230] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uF983\u6B5F\u6C5D\uF984\u74B5\u7916\uF985\u8207\u8245\u8339\u8F3F\u8F5D\uF986\u9918\uF987\uF988\uF989\u4EA6\uF98A\u57DF\u5F79\u6613\uF98B\uF98C\u75AB\u7E79\u8B6F\uF98D\u9006\u9A5B\u56A5\u5827\u59F8\u5A1F\u5BB4\uF98E\u5EF6\uF98F\uF990\u6350\u633B\uF991\u693D\u6C87\u6CBF\u6D8E\u6D93\u6DF5\u6F14\uF992\u70DF\u7136\u7159\uF993\u71C3\u71D5\uF994\u784F\u786F\uF995\u7B75\u7DE3\uF996\u7E2F\uF997\u884D\u8EDF\uF998\uF999\uF99A\u925B\uF99B\u9CF6\uF99C\uF99D\uF99E\u6085\u6D85\uF99F\u71B1\uF9A0\uF9A1\u95B1\u53AD\uF9A2\uF9A3\uF9A4\u67D3\uF9A5\u708E\u7130\u7430\u8276\u82D2\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[230].length; ++j)
                if (D[230][j].charCodeAt(0) !== 65533) {
                    e2[D[230][j]] = 58880 + j;
                    d[58880 + j] = D[230][j];
                }
            D[231] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uF9A6\u95BB\u9AE5\u9E7D\u66C4\uF9A7\u71C1\u8449\uF9A8\uF9A9\u584B\uF9AA\uF9AB\u5DB8\u5F71\uF9AC\u6620\u668E\u6979\u69AE\u6C38\u6CF3\u6E36\u6F41\u6FDA\u701B\u702F\u7150\u71DF\u7370\uF9AD\u745B\uF9AE\u74D4\u76C8\u7A4E\u7E93\uF9AF\uF9B0\u82F1\u8A60\u8FCE\uF9B1\u9348\uF9B2\u9719\uF9B3\uF9B4\u4E42\u502A\uF9B5\u5208\u53E1\u66F3\u6C6D\u6FCA\u730A\u777F\u7A62\u82AE\u85DD\u8602\uF9B6\u88D4\u8A63\u8B7D\u8C6B\uF9B7\u92B3\uF9B8\u9713\u9810\u4E94\u4F0D\u4FC9\u50B2\u5348\u543E\u5433\u55DA\u5862\u58BA\u5967\u5A1B\u5BE4\u609F\uF9B9\u61CA\u6556\u65FF\u6664\u68A7\u6C5A\u6FB3\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[231].length; ++j)
                if (D[231][j].charCodeAt(0) !== 65533) {
                    e2[D[231][j]] = 59136 + j;
                    d[59136 + j] = D[231][j];
                }
            D[232] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u70CF\u71AC\u7352\u7B7D\u8708\u8AA4\u9C32\u9F07\u5C4B\u6C83\u7344\u7389\u923A\u6EAB\u7465\u761F\u7A69\u7E15\u860A\u5140\u58C5\u64C1\u74EE\u7515\u7670\u7FC1\u9095\u96CD\u9954\u6E26\u74E6\u7AA9\u7AAA\u81E5\u86D9\u8778\u8A1B\u5A49\u5B8C\u5B9B\u68A1\u6900\u6D63\u73A9\u7413\u742C\u7897\u7DE9\u7FEB\u8118\u8155\u839E\u8C4C\u962E\u9811\u66F0\u5F80\u65FA\u6789\u6C6A\u738B\u502D\u5A03\u6B6A\u77EE\u5916\u5D6C\u5DCD\u7325\u754F\uF9BA\uF9BB\u50E5\u51F9\u582F\u592D\u5996\u59DA\u5BE5\uF9BC\uF9BD\u5DA2\u62D7\u6416\u6493\u64FE\uF9BE\u66DC\uF9BF\u6A48\uF9C0\u71FF\u7464\uF9C1\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[232].length; ++j)
                if (D[232][j].charCodeAt(0) !== 65533) {
                    e2[D[232][j]] = 59392 + j;
                    d[59392 + j] = D[232][j];
                }
            D[233] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7A88\u7AAF\u7E47\u7E5E\u8000\u8170\uF9C2\u87EF\u8981\u8B20\u9059\uF9C3\u9080\u9952\u617E\u6B32\u6D74\u7E1F\u8925\u8FB1\u4FD1\u50AD\u5197\u52C7\u57C7\u5889\u5BB9\u5EB8\u6142\u6995\u6D8C\u6E67\u6EB6\u7194\u7462\u7528\u752C\u8073\u8338\u84C9\u8E0A\u9394\u93DE\uF9C4\u4E8E\u4F51\u5076\u512A\u53C8\u53CB\u53F3\u5B87\u5BD3\u5C24\u611A\u6182\u65F4\u725B\u7397\u7440\u76C2\u7950\u7991\u79B9\u7D06\u7FBD\u828B\u85D5\u865E\u8FC2\u9047\u90F5\u91EA\u9685\u96E8\u96E9\u52D6\u5F67\u65ED\u6631\u682F\u715C\u7A36\u90C1\u980A\u4E91\uF9C5\u6A52\u6B9E\u6F90\u7189\u8018\u82B8\u8553\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[233].length; ++j)
                if (D[233][j].charCodeAt(0) !== 65533) {
                    e2[D[233][j]] = 59648 + j;
                    d[59648 + j] = D[233][j];
                }
            D[234] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u904B\u9695\u96F2\u97FB\u851A\u9B31\u4E90\u718A\u96C4\u5143\u539F\u54E1\u5713\u5712\u57A3\u5A9B\u5AC4\u5BC3\u6028\u613F\u63F4\u6C85\u6D39\u6E72\u6E90\u7230\u733F\u7457\u82D1\u8881\u8F45\u9060\uF9C6\u9662\u9858\u9D1B\u6708\u8D8A\u925E\u4F4D\u5049\u50DE\u5371\u570D\u59D4\u5A01\u5C09\u6170\u6690\u6E2D\u7232\u744B\u7DEF\u80C3\u840E\u8466\u853F\u875F\u885B\u8918\u8B02\u9055\u97CB\u9B4F\u4E73\u4F91\u5112\u516A\uF9C7\u552F\u55A9\u5B7A\u5BA5\u5E7C\u5E7D\u5EBE\u60A0\u60DF\u6108\u6109\u63C4\u6538\u6709\uF9C8\u67D4\u67DA\uF9C9\u6961\u6962\u6CB9\u6D27\uF9CA\u6E38\uF9CB\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[234].length; ++j)
                if (D[234][j].charCodeAt(0) !== 65533) {
                    e2[D[234][j]] = 59904 + j;
                    d[59904 + j] = D[234][j];
                }
            D[235] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6FE1\u7336\u7337\uF9CC\u745C\u7531\uF9CD\u7652\uF9CE\uF9CF\u7DAD\u81FE\u8438\u88D5\u8A98\u8ADB\u8AED\u8E30\u8E42\u904A\u903E\u907A\u9149\u91C9\u936E\uF9D0\uF9D1\u5809\uF9D2\u6BD3\u8089\u80B2\uF9D3\uF9D4\u5141\u596B\u5C39\uF9D5\uF9D6\u6F64\u73A7\u80E4\u8D07\uF9D7\u9217\u958F\uF9D8\uF9D9\uF9DA\uF9DB\u807F\u620E\u701C\u7D68\u878D\uF9DC\u57A0\u6069\u6147\u6BB7\u8ABE\u9280\u96B1\u4E59\u541F\u6DEB\u852D\u9670\u97F3\u98EE\u63D6\u6CE3\u9091\u51DD\u61C9\u81BA\u9DF9\u4F9D\u501A\u5100\u5B9C\u610F\u61FF\u64EC\u6905\u6BC5\u7591\u77E3\u7FA9\u8264\u858F\u87FB\u8863\u8ABC\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[235].length; ++j)
                if (D[235][j].charCodeAt(0) !== 65533) {
                    e2[D[235][j]] = 60160 + j;
                    d[60160 + j] = D[235][j];
                }
            D[236] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8B70\u91AB\u4E8C\u4EE5\u4F0A\uF9DD\uF9DE\u5937\u59E8\uF9DF\u5DF2\u5F1B\u5F5B\u6021\uF9E0\uF9E1\uF9E2\uF9E3\u723E\u73E5\uF9E4\u7570\u75CD\uF9E5\u79FB\uF9E6\u800C\u8033\u8084\u82E1\u8351\uF9E7\uF9E8\u8CBD\u8CB3\u9087\uF9E9\uF9EA\u98F4\u990C\uF9EB\uF9EC\u7037\u76CA\u7FCA\u7FCC\u7FFC\u8B1A\u4EBA\u4EC1\u5203\u5370\uF9ED\u54BD\u56E0\u59FB\u5BC5\u5F15\u5FCD\u6E6E\uF9EE\uF9EF\u7D6A\u8335\uF9F0\u8693\u8A8D\uF9F1\u976D\u9777\uF9F2\uF9F3\u4E00\u4F5A\u4F7E\u58F9\u65E5\u6EA2\u9038\u93B0\u99B9\u4EFB\u58EC\u598A\u59D9\u6041\uF9F4\uF9F5\u7A14\uF9F6\u834F\u8CC3\u5165\u5344\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[236].length; ++j)
                if (D[236][j].charCodeAt(0) !== 65533) {
                    e2[D[236][j]] = 60416 + j;
                    d[60416 + j] = D[236][j];
                }
            D[237] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uF9F7\uF9F8\uF9F9\u4ECD\u5269\u5B55\u82BF\u4ED4\u523A\u54A8\u59C9\u59FF\u5B50\u5B57\u5B5C\u6063\u6148\u6ECB\u7099\u716E\u7386\u74F7\u75B5\u78C1\u7D2B\u8005\u81EA\u8328\u8517\u85C9\u8AEE\u8CC7\u96CC\u4F5C\u52FA\u56BC\u65AB\u6628\u707C\u70B8\u7235\u7DBD\u828D\u914C\u96C0\u9D72\u5B71\u68E7\u6B98\u6F7A\u76DE\u5C91\u66AB\u6F5B\u7BB4\u7C2A\u8836\u96DC\u4E08\u4ED7\u5320\u5834\u58BB\u58EF\u596C\u5C07\u5E33\u5E84\u5F35\u638C\u66B2\u6756\u6A1F\u6AA3\u6B0C\u6F3F\u7246\uF9FA\u7350\u748B\u7AE0\u7CA7\u8178\u81DF\u81E7\u838A\u846C\u8523\u8594\u85CF\u88DD\u8D13\u91AC\u9577\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[237].length; ++j)
                if (D[237][j].charCodeAt(0) !== 65533) {
                    e2[D[237][j]] = 60672 + j;
                    d[60672 + j] = D[237][j];
                }
            D[238] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u969C\u518D\u54C9\u5728\u5BB0\u624D\u6750\u683D\u6893\u6E3D\u6ED3\u707D\u7E21\u88C1\u8CA1\u8F09\u9F4B\u9F4E\u722D\u7B8F\u8ACD\u931A\u4F47\u4F4E\u5132\u5480\u59D0\u5E95\u62B5\u6775\u696E\u6A17\u6CAE\u6E1A\u72D9\u732A\u75BD\u7BB8\u7D35\u82E7\u83F9\u8457\u85F7\u8A5B\u8CAF\u8E87\u9019\u90B8\u96CE\u9F5F\u52E3\u540A\u5AE1\u5BC2\u6458\u6575\u6EF4\u72C4\uF9FB\u7684\u7A4D\u7B1B\u7C4D\u7E3E\u7FDF\u837B\u8B2B\u8CCA\u8D64\u8DE1\u8E5F\u8FEA\u8FF9\u9069\u93D1\u4F43\u4F7A\u50B3\u5168\u5178\u524D\u526A\u5861\u587C\u5960\u5C08\u5C55\u5EDB\u609B\u6230\u6813\u6BBF\u6C08\u6FB1\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[238].length; ++j)
                if (D[238][j].charCodeAt(0) !== 65533) {
                    e2[D[238][j]] = 60928 + j;
                    d[60928 + j] = D[238][j];
                }
            D[239] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u714E\u7420\u7530\u7538\u7551\u7672\u7B4C\u7B8B\u7BAD\u7BC6\u7E8F\u8A6E\u8F3E\u8F49\u923F\u9293\u9322\u942B\u96FB\u985A\u986B\u991E\u5207\u622A\u6298\u6D59\u7664\u7ACA\u7BC0\u7D76\u5360\u5CBE\u5E97\u6F38\u70B9\u7C98\u9711\u9B8E\u9EDE\u63A5\u647A\u8776\u4E01\u4E95\u4EAD\u505C\u5075\u5448\u59C3\u5B9A\u5E40\u5EAD\u5EF7\u5F81\u60C5\u633A\u653F\u6574\u65CC\u6676\u6678\u67FE\u6968\u6A89\u6B63\u6C40\u6DC0\u6DE8\u6E1F\u6E5E\u701E\u70A1\u738E\u73FD\u753A\u775B\u7887\u798E\u7A0B\u7A7D\u7CBE\u7D8E\u8247\u8A02\u8AEA\u8C9E\u912D\u914A\u91D8\u9266\u92CC\u9320\u9706\u9756\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[239].length; ++j)
                if (D[239][j].charCodeAt(0) !== 65533) {
                    e2[D[239][j]] = 61184 + j;
                    d[61184 + j] = D[239][j];
                }
            D[240] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u975C\u9802\u9F0E\u5236\u5291\u557C\u5824\u5E1D\u5F1F\u608C\u63D0\u68AF\u6FDF\u796D\u7B2C\u81CD\u85BA\u88FD\u8AF8\u8E44\u918D\u9664\u969B\u973D\u984C\u9F4A\u4FCE\u5146\u51CB\u52A9\u5632\u5F14\u5F6B\u63AA\u64CD\u65E9\u6641\u66FA\u66F9\u671D\u689D\u68D7\u69FD\u6F15\u6F6E\u7167\u71E5\u722A\u74AA\u773A\u7956\u795A\u79DF\u7A20\u7A95\u7C97\u7CDF\u7D44\u7E70\u8087\u85FB\u86A4\u8A54\u8ABF\u8D99\u8E81\u9020\u906D\u91E3\u963B\u96D5\u9CE5\u65CF\u7C07\u8DB3\u93C3\u5B58\u5C0A\u5352\u62D9\u731D\u5027\u5B97\u5F9E\u60B0\u616B\u68D5\u6DD9\u742E\u7A2E\u7D42\u7D9C\u7E31\u816B\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[240].length; ++j)
                if (D[240][j].charCodeAt(0) !== 65533) {
                    e2[D[240][j]] = 61440 + j;
                    d[61440 + j] = D[240][j];
                }
            D[241] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8E2A\u8E35\u937E\u9418\u4F50\u5750\u5DE6\u5EA7\u632B\u7F6A\u4E3B\u4F4F\u4F8F\u505A\u59DD\u80C4\u546A\u5468\u55FE\u594F\u5B99\u5DDE\u5EDA\u665D\u6731\u67F1\u682A\u6CE8\u6D32\u6E4A\u6F8D\u70B7\u73E0\u7587\u7C4C\u7D02\u7D2C\u7DA2\u821F\u86DB\u8A3B\u8A85\u8D70\u8E8A\u8F33\u9031\u914E\u9152\u9444\u99D0\u7AF9\u7CA5\u4FCA\u5101\u51C6\u57C8\u5BEF\u5CFB\u6659\u6A3D\u6D5A\u6E96\u6FEC\u710C\u756F\u7AE3\u8822\u9021\u9075\u96CB\u99FF\u8301\u4E2D\u4EF2\u8846\u91CD\u537D\u6ADB\u696B\u6C41\u847A\u589E\u618E\u66FE\u62EF\u70DD\u7511\u75C7\u7E52\u84B8\u8B49\u8D08\u4E4B\u53EA\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[241].length; ++j)
                if (D[241][j].charCodeAt(0) !== 65533) {
                    e2[D[241][j]] = 61696 + j;
                    d[61696 + j] = D[241][j];
                }
            D[242] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u54AB\u5730\u5740\u5FD7\u6301\u6307\u646F\u652F\u65E8\u667A\u679D\u67B3\u6B62\u6C60\u6C9A\u6F2C\u77E5\u7825\u7949\u7957\u7D19\u80A2\u8102\u81F3\u829D\u82B7\u8718\u8A8C\uF9FC\u8D04\u8DBE\u9072\u76F4\u7A19\u7A37\u7E54\u8077\u5507\u55D4\u5875\u632F\u6422\u6649\u664B\u686D\u699B\u6B84\u6D25\u6EB1\u73CD\u7468\u74A1\u755B\u75B9\u76E1\u771E\u778B\u79E6\u7E09\u7E1D\u81FB\u852F\u8897\u8A3A\u8CD1\u8EEB\u8FB0\u9032\u93AD\u9663\u9673\u9707\u4F84\u53F1\u59EA\u5AC9\u5E19\u684E\u74C6\u75BE\u79E9\u7A92\u81A3\u86ED\u8CEA\u8DCC\u8FED\u659F\u6715\uF9FD\u57F7\u6F57\u7DDD\u8F2F\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[242].length; ++j)
                if (D[242][j].charCodeAt(0) !== 65533) {
                    e2[D[242][j]] = 61952 + j;
                    d[61952 + j] = D[242][j];
                }
            D[243] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u93F6\u96C6\u5FB5\u61F2\u6F84\u4E14\u4F98\u501F\u53C9\u55DF\u5D6F\u5DEE\u6B21\u6B64\u78CB\u7B9A\uF9FE\u8E49\u8ECA\u906E\u6349\u643E\u7740\u7A84\u932F\u947F\u9F6A\u64B0\u6FAF\u71E6\u74A8\u74DA\u7AC4\u7C12\u7E82\u7CB2\u7E98\u8B9A\u8D0A\u947D\u9910\u994C\u5239\u5BDF\u64E6\u672D\u7D2E\u50ED\u53C3\u5879\u6158\u6159\u61FA\u65AC\u7AD9\u8B92\u8B96\u5009\u5021\u5275\u5531\u5A3C\u5EE0\u5F70\u6134\u655E\u660C\u6636\u66A2\u69CD\u6EC4\u6F32\u7316\u7621\u7A93\u8139\u8259\u83D6\u84BC\u50B5\u57F0\u5BC0\u5BE8\u5F69\u63A1\u7826\u7DB5\u83DC\u8521\u91C7\u91F5\u518A\u67F5\u7B56\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[243].length; ++j)
                if (D[243][j].charCodeAt(0) !== 65533) {
                    e2[D[243][j]] = 62208 + j;
                    d[62208 + j] = D[243][j];
                }
            D[244] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8CAC\u51C4\u59BB\u60BD\u8655\u501C\uF9FF\u5254\u5C3A\u617D\u621A\u62D3\u64F2\u65A5\u6ECC\u7620\u810A\u8E60\u965F\u96BB\u4EDF\u5343\u5598\u5929\u5DDD\u64C5\u6CC9\u6DFA\u7394\u7A7F\u821B\u85A6\u8CE4\u8E10\u9077\u91E7\u95E1\u9621\u97C6\u51F8\u54F2\u5586\u5FB9\u64A4\u6F88\u7DB4\u8F1F\u8F4D\u9435\u50C9\u5C16\u6CBE\u6DFB\u751B\u77BB\u7C3D\u7C64\u8A79\u8AC2\u581E\u59BE\u5E16\u6377\u7252\u758A\u776B\u8ADC\u8CBC\u8F12\u5EF3\u6674\u6DF8\u807D\u83C1\u8ACB\u9751\u9BD6\uFA00\u5243\u66FF\u6D95\u6EEF\u7DE0\u8AE6\u902E\u905E\u9AD4\u521D\u527F\u54E8\u6194\u6284\u62DB\u68A2\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[244].length; ++j)
                if (D[244][j].charCodeAt(0) !== 65533) {
                    e2[D[244][j]] = 62464 + j;
                    d[62464 + j] = D[244][j];
                }
            D[245] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6912\u695A\u6A35\u7092\u7126\u785D\u7901\u790E\u79D2\u7A0D\u8096\u8278\u82D5\u8349\u8549\u8C82\u8D85\u9162\u918B\u91AE\u4FC3\u56D1\u71ED\u77D7\u8700\u89F8\u5BF8\u5FD6\u6751\u90A8\u53E2\u585A\u5BF5\u60A4\u6181\u6460\u7E3D\u8070\u8525\u9283\u64AE\u50AC\u5D14\u6700\u589C\u62BD\u63A8\u690E\u6978\u6A1E\u6E6B\u76BA\u79CB\u82BB\u8429\u8ACF\u8DA8\u8FFD\u9112\u914B\u919C\u9310\u9318\u939A\u96DB\u9A36\u9C0D\u4E11\u755C\u795D\u7AFA\u7B51\u7BC9\u7E2E\u84C4\u8E59\u8E74\u8EF8\u9010\u6625\u693F\u7443\u51FA\u672E\u9EDC\u5145\u5FE0\u6C96\u87F2\u885D\u8877\u60B4\u81B5\u8403\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[245].length; ++j)
                if (D[245][j].charCodeAt(0) !== 65533) {
                    e2[D[245][j]] = 62720 + j;
                    d[62720 + j] = D[245][j];
                }
            D[246] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8D05\u53D6\u5439\u5634\u5A36\u5C31\u708A\u7FE0\u805A\u8106\u81ED\u8DA3\u9189\u9A5F\u9DF2\u5074\u4EC4\u53A0\u60FB\u6E2C\u5C64\u4F88\u5024\u55E4\u5CD9\u5E5F\u6065\u6894\u6CBB\u6DC4\u71BE\u75D4\u75F4\u7661\u7A1A\u7A49\u7DC7\u7DFB\u7F6E\u81F4\u86A9\u8F1C\u96C9\u99B3\u9F52\u5247\u52C5\u98ED\u89AA\u4E03\u67D2\u6F06\u4FB5\u5BE2\u6795\u6C88\u6D78\u741B\u7827\u91DD\u937C\u87C4\u79E4\u7A31\u5FEB\u4ED6\u54A4\u553E\u58AE\u59A5\u60F0\u6253\u62D6\u6736\u6955\u8235\u9640\u99B1\u99DD\u502C\u5353\u5544\u577C\uFA01\u6258\uFA02\u64E2\u666B\u67DD\u6FC1\u6FEF\u7422\u7438\u8A17\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[246].length; ++j)
                if (D[246][j].charCodeAt(0) !== 65533) {
                    e2[D[246][j]] = 62976 + j;
                    d[62976 + j] = D[246][j];
                }
            D[247] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9438\u5451\u5606\u5766\u5F48\u619A\u6B4E\u7058\u70AD\u7DBB\u8A95\u596A\u812B\u63A2\u7708\u803D\u8CAA\u5854\u642D\u69BB\u5B95\u5E11\u6E6F\uFA03\u8569\u514C\u53F0\u592A\u6020\u614B\u6B86\u6C70\u6CF0\u7B1E\u80CE\u82D4\u8DC6\u90B0\u98B1\uFA04\u64C7\u6FA4\u6491\u6504\u514E\u5410\u571F\u8A0E\u615F\u6876\uFA05\u75DB\u7B52\u7D71\u901A\u5806\u69CC\u817F\u892A\u9000\u9839\u5078\u5957\u59AC\u6295\u900F\u9B2A\u615D\u7279\u95D6\u5761\u5A46\u5DF4\u628A\u64AD\u64FA\u6777\u6CE2\u6D3E\u722C\u7436\u7834\u7F77\u82AD\u8DDB\u9817\u5224\u5742\u677F\u7248\u74E3\u8CA9\u8FA6\u9211\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[247].length; ++j)
                if (D[247][j].charCodeAt(0) !== 65533) {
                    e2[D[247][j]] = 63232 + j;
                    d[63232 + j] = D[247][j];
                }
            D[248] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u962A\u516B\u53ED\u634C\u4F69\u5504\u6096\u6557\u6C9B\u6D7F\u724C\u72FD\u7A17\u8987\u8C9D\u5F6D\u6F8E\u70F9\u81A8\u610E\u4FBF\u504F\u6241\u7247\u7BC7\u7DE8\u7FE9\u904D\u97AD\u9A19\u8CB6\u576A\u5E73\u67B0\u840D\u8A55\u5420\u5B16\u5E63\u5EE2\u5F0A\u6583\u80BA\u853D\u9589\u965B\u4F48\u5305\u530D\u530F\u5486\u54FA\u5703\u5E03\u6016\u629B\u62B1\u6355\uFA06\u6CE1\u6D66\u75B1\u7832\u80DE\u812F\u82DE\u8461\u84B2\u888D\u8912\u900B\u92EA\u98FD\u9B91\u5E45\u66B4\u66DD\u7011\u7206\uFA07\u4FF5\u527D\u5F6A\u6153\u6753\u6A19\u6F02\u74E2\u7968\u8868\u8C79\u98C7\u98C4\u9A43\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[248].length; ++j)
                if (D[248][j].charCodeAt(0) !== 65533) {
                    e2[D[248][j]] = 63488 + j;
                    d[63488 + j] = D[248][j];
                }
            D[249] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u54C1\u7A1F\u6953\u8AF7\u8C4A\u98A8\u99AE\u5F7C\u62AB\u75B2\u76AE\u88AB\u907F\u9642\u5339\u5F3C\u5FC5\u6CCC\u73CC\u7562\u758B\u7B46\u82FE\u999D\u4E4F\u903C\u4E0B\u4F55\u53A6\u590F\u5EC8\u6630\u6CB3\u7455\u8377\u8766\u8CC0\u9050\u971E\u9C15\u58D1\u5B78\u8650\u8B14\u9DB4\u5BD2\u6068\u608D\u65F1\u6C57\u6F22\u6FA3\u701A\u7F55\u7FF0\u9591\u9592\u9650\u97D3\u5272\u8F44\u51FD\u542B\u54B8\u5563\u558A\u6ABB\u6DB5\u7DD8\u8266\u929C\u9677\u9E79\u5408\u54C8\u76D2\u86E4\u95A4\u95D4\u965C\u4EA2\u4F09\u59EE\u5AE6\u5DF7\u6052\u6297\u676D\u6841\u6C86\u6E2F\u7F38\u809B\u822A\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[249].length; ++j)
                if (D[249][j].charCodeAt(0) !== 65533) {
                    e2[D[249][j]] = 63744 + j;
                    d[63744 + j] = D[249][j];
                }
            D[250] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFA08\uFA09\u9805\u4EA5\u5055\u54B3\u5793\u595A\u5B69\u5BB3\u61C8\u6977\u6D77\u7023\u87F9\u89E3\u8A72\u8AE7\u9082\u99ED\u9AB8\u52BE\u6838\u5016\u5E78\u674F\u8347\u884C\u4EAB\u5411\u56AE\u73E6\u9115\u97FF\u9909\u9957\u9999\u5653\u589F\u865B\u8A31\u61B2\u6AF6\u737B\u8ED2\u6B47\u96AA\u9A57\u5955\u7200\u8D6B\u9769\u4FD4\u5CF4\u5F26\u61F8\u665B\u6CEB\u70AB\u7384\u73B9\u73FE\u7729\u774D\u7D43\u7D62\u7E23\u8237\u8852\uFA0A\u8CE2\u9249\u986F\u5B51\u7A74\u8840\u9801\u5ACC\u4FE0\u5354\u593E\u5CFD\u633E\u6D79\u72F9\u8105\u8107\u83A2\u92CF\u9830\u4EA8\u5144\u5211\u578B\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[250].length; ++j)
                if (D[250][j].charCodeAt(0) !== 65533) {
                    e2[D[250][j]] = 64e3 + j;
                    d[64e3 + j] = D[250][j];
                }
            D[251] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5F62\u6CC2\u6ECE\u7005\u7050\u70AF\u7192\u73E9\u7469\u834A\u87A2\u8861\u9008\u90A2\u93A3\u99A8\u516E\u5F57\u60E0\u6167\u66B3\u8559\u8E4A\u91AF\u978B\u4E4E\u4E92\u547C\u58D5\u58FA\u597D\u5CB5\u5F27\u6236\u6248\u660A\u6667\u6BEB\u6D69\u6DCF\u6E56\u6EF8\u6F94\u6FE0\u6FE9\u705D\u72D0\u7425\u745A\u74E0\u7693\u795C\u7CCA\u7E1E\u80E1\u82A6\u846B\u84BF\u864E\u865F\u8774\u8B77\u8C6A\u93AC\u9800\u9865\u60D1\u6216\u9177\u5A5A\u660F\u6DF7\u6E3E\u743F\u9B42\u5FFD\u60DA\u7B0F\u54C4\u5F18\u6C5E\u6CD3\u6D2A\u70D8\u7D05\u8679\u8A0C\u9D3B\u5316\u548C\u5B05\u6A3A\u706B\u7575\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[251].length; ++j)
                if (D[251][j].charCodeAt(0) !== 65533) {
                    e2[D[251][j]] = 64256 + j;
                    d[64256 + j] = D[251][j];
                }
            D[252] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u798D\u79BE\u82B1\u83EF\u8A71\u8B41\u8CA8\u9774\uFA0B\u64F4\u652B\u78BA\u78BB\u7A6B\u4E38\u559A\u5950\u5BA6\u5E7B\u60A3\u63DB\u6B61\u6665\u6853\u6E19\u7165\u74B0\u7D08\u9084\u9A69\u9C25\u6D3B\u6ED1\u733E\u8C41\u95CA\u51F0\u5E4C\u5FA8\u604D\u60F6\u6130\u614C\u6643\u6644\u69A5\u6CC1\u6E5F\u6EC9\u6F62\u714C\u749C\u7687\u7BC1\u7C27\u8352\u8757\u9051\u968D\u9EC3\u532F\u56DE\u5EFB\u5F8A\u6062\u6094\u61F7\u6666\u6703\u6A9C\u6DEE\u6FAE\u7070\u736A\u7E6A\u81BE\u8334\u86D4\u8AA8\u8CC4\u5283\u7372\u5B96\u6A6B\u9404\u54EE\u5686\u5B5D\u6548\u6585\u66C9\u689F\u6D8D\u6DC6\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[252].length; ++j)
                if (D[252][j].charCodeAt(0) !== 65533) {
                    e2[D[252][j]] = 64512 + j;
                    d[64512 + j] = D[252][j];
                }
            D[253] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u723B\u80B4\u9175\u9A4D\u4FAF\u5019\u539A\u540E\u543C\u5589\u55C5\u5E3F\u5F8C\u673D\u7166\u73DD\u9005\u52DB\u52F3\u5864\u58CE\u7104\u718F\u71FB\u85B0\u8A13\u6688\u85A8\u55A7\u6684\u714A\u8431\u5349\u5599\u6BC1\u5F59\u5FBD\u63EE\u6689\u7147\u8AF1\u8F1D\u9EBE\u4F11\u643A\u70CB\u7566\u8667\u6064\u8B4E\u9DF8\u5147\u51F6\u5308\u6D36\u80F8\u9ED1\u6615\u6B23\u7098\u75D5\u5403\u5C79\u7D07\u8A16\u6B20\u6B3D\u6B46\u5438\u6070\u6D3D\u7FD5\u8208\u50D6\u51DE\u559C\u566B\u56CD\u59EC\u5B09\u5E0C\u6199\u6198\u6231\u665E\u66E6\u7199\u71B9\u71BA\u72A7\u79A7\u7A00\u7FB2\u8A70\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[253].length; ++j)
                if (D[253][j].charCodeAt(0) !== 65533) {
                    e2[D[253][j]] = 64768 + j;
                    d[64768 + j] = D[253][j];
                }
            return { enc: e2, dec: d };
        })();
        cptable2[950] = (function () {
            var d = [],
                e2 = {},
                D = [],
                j;
            D[0] =
                '\0\x07\b	\n\v\f\r\x1B !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[0].length; ++j)
                if (D[0][j].charCodeAt(0) !== 65533) {
                    e2[D[0][j]] = 0 + j;
                    d[0 + j] = D[0][j];
                }
            D[161] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u3000\uFF0C\u3001\u3002\uFF0E\u2027\uFF1B\uFF1A\uFF1F\uFF01\uFE30\u2026\u2025\uFE50\uFE51\uFE52\xB7\uFE54\uFE55\uFE56\uFE57\uFF5C\u2013\uFE31\u2014\uFE33\u2574\uFE34\uFE4F\uFF08\uFF09\uFE35\uFE36\uFF5B\uFF5D\uFE37\uFE38\u3014\u3015\uFE39\uFE3A\u3010\u3011\uFE3B\uFE3C\u300A\u300B\uFE3D\uFE3E\u3008\u3009\uFE3F\uFE40\u300C\u300D\uFE41\uFE42\u300E\u300F\uFE43\uFE44\uFE59\uFE5A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFE5B\uFE5C\uFE5D\uFE5E\u2018\u2019\u201C\u201D\u301D\u301E\u2035\u2032\uFF03\uFF06\uFF0A\u203B\xA7\u3003\u25CB\u25CF\u25B3\u25B2\u25CE\u2606\u2605\u25C7\u25C6\u25A1\u25A0\u25BD\u25BC\u32A3\u2105\xAF\uFFE3\uFF3F\u02CD\uFE49\uFE4A\uFE4D\uFE4E\uFE4B\uFE4C\uFE5F\uFE60\uFE61\uFF0B\uFF0D\xD7\xF7\xB1\u221A\uFF1C\uFF1E\uFF1D\u2266\u2267\u2260\u221E\u2252\u2261\uFE62\uFE63\uFE64\uFE65\uFE66\uFF5E\u2229\u222A\u22A5\u2220\u221F\u22BF\u33D2\u33D1\u222B\u222E\u2235\u2234\u2640\u2642\u2295\u2299\u2191\u2193\u2190\u2192\u2196\u2197\u2199\u2198\u2225\u2223\uFF0F\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[161].length; ++j)
                if (D[161][j].charCodeAt(0) !== 65533) {
                    e2[D[161][j]] = 41216 + j;
                    d[41216 + j] = D[161][j];
                }
            D[162] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFF3C\u2215\uFE68\uFF04\uFFE5\u3012\uFFE0\uFFE1\uFF05\uFF20\u2103\u2109\uFE69\uFE6A\uFE6B\u33D5\u339C\u339D\u339E\u33CE\u33A1\u338E\u338F\u33C4\xB0\u5159\u515B\u515E\u515D\u5161\u5163\u55E7\u74E9\u7CCE\u2581\u2582\u2583\u2584\u2585\u2586\u2587\u2588\u258F\u258E\u258D\u258C\u258B\u258A\u2589\u253C\u2534\u252C\u2524\u251C\u2594\u2500\u2502\u2595\u250C\u2510\u2514\u2518\u256D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u256E\u2570\u256F\u2550\u255E\u256A\u2561\u25E2\u25E3\u25E5\u25E4\u2571\u2572\u2573\uFF10\uFF11\uFF12\uFF13\uFF14\uFF15\uFF16\uFF17\uFF18\uFF19\u2160\u2161\u2162\u2163\u2164\u2165\u2166\u2167\u2168\u2169\u3021\u3022\u3023\u3024\u3025\u3026\u3027\u3028\u3029\u5341\u5344\u5345\uFF21\uFF22\uFF23\uFF24\uFF25\uFF26\uFF27\uFF28\uFF29\uFF2A\uFF2B\uFF2C\uFF2D\uFF2E\uFF2F\uFF30\uFF31\uFF32\uFF33\uFF34\uFF35\uFF36\uFF37\uFF38\uFF39\uFF3A\uFF41\uFF42\uFF43\uFF44\uFF45\uFF46\uFF47\uFF48\uFF49\uFF4A\uFF4B\uFF4C\uFF4D\uFF4E\uFF4F\uFF50\uFF51\uFF52\uFF53\uFF54\uFF55\uFF56\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[162].length; ++j)
                if (D[162][j].charCodeAt(0) !== 65533) {
                    e2[D[162][j]] = 41472 + j;
                    d[41472 + j] = D[162][j];
                }
            D[163] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFF57\uFF58\uFF59\uFF5A\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C3\u03C4\u03C5\u03C6\u03C7\u03C8\u03C9\u3105\u3106\u3107\u3108\u3109\u310A\u310B\u310C\u310D\u310E\u310F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u3110\u3111\u3112\u3113\u3114\u3115\u3116\u3117\u3118\u3119\u311A\u311B\u311C\u311D\u311E\u311F\u3120\u3121\u3122\u3123\u3124\u3125\u3126\u3127\u3128\u3129\u02D9\u02C9\u02CA\u02C7\u02CB\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u20AC\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[163].length; ++j)
                if (D[163][j].charCodeAt(0) !== 65533) {
                    e2[D[163][j]] = 41728 + j;
                    d[41728 + j] = D[163][j];
                }
            D[164] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4E00\u4E59\u4E01\u4E03\u4E43\u4E5D\u4E86\u4E8C\u4EBA\u513F\u5165\u516B\u51E0\u5200\u5201\u529B\u5315\u5341\u535C\u53C8\u4E09\u4E0B\u4E08\u4E0A\u4E2B\u4E38\u51E1\u4E45\u4E48\u4E5F\u4E5E\u4E8E\u4EA1\u5140\u5203\u52FA\u5343\u53C9\u53E3\u571F\u58EB\u5915\u5927\u5973\u5B50\u5B51\u5B53\u5BF8\u5C0F\u5C22\u5C38\u5C71\u5DDD\u5DE5\u5DF1\u5DF2\u5DF3\u5DFE\u5E72\u5EFE\u5F0B\u5F13\u624D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4E11\u4E10\u4E0D\u4E2D\u4E30\u4E39\u4E4B\u5C39\u4E88\u4E91\u4E95\u4E92\u4E94\u4EA2\u4EC1\u4EC0\u4EC3\u4EC6\u4EC7\u4ECD\u4ECA\u4ECB\u4EC4\u5143\u5141\u5167\u516D\u516E\u516C\u5197\u51F6\u5206\u5207\u5208\u52FB\u52FE\u52FF\u5316\u5339\u5348\u5347\u5345\u535E\u5384\u53CB\u53CA\u53CD\u58EC\u5929\u592B\u592A\u592D\u5B54\u5C11\u5C24\u5C3A\u5C6F\u5DF4\u5E7B\u5EFF\u5F14\u5F15\u5FC3\u6208\u6236\u624B\u624E\u652F\u6587\u6597\u65A4\u65B9\u65E5\u66F0\u6708\u6728\u6B20\u6B62\u6B79\u6BCB\u6BD4\u6BDB\u6C0F\u6C34\u706B\u722A\u7236\u723B\u7247\u7259\u725B\u72AC\u738B\u4E19\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[164].length; ++j)
                if (D[164][j].charCodeAt(0) !== 65533) {
                    e2[D[164][j]] = 41984 + j;
                    d[41984 + j] = D[164][j];
                }
            D[165] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4E16\u4E15\u4E14\u4E18\u4E3B\u4E4D\u4E4F\u4E4E\u4EE5\u4ED8\u4ED4\u4ED5\u4ED6\u4ED7\u4EE3\u4EE4\u4ED9\u4EDE\u5145\u5144\u5189\u518A\u51AC\u51F9\u51FA\u51F8\u520A\u52A0\u529F\u5305\u5306\u5317\u531D\u4EDF\u534A\u5349\u5361\u5360\u536F\u536E\u53BB\u53EF\u53E4\u53F3\u53EC\u53EE\u53E9\u53E8\u53FC\u53F8\u53F5\u53EB\u53E6\u53EA\u53F2\u53F1\u53F0\u53E5\u53ED\u53FB\u56DB\u56DA\u5916\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u592E\u5931\u5974\u5976\u5B55\u5B83\u5C3C\u5DE8\u5DE7\u5DE6\u5E02\u5E03\u5E73\u5E7C\u5F01\u5F18\u5F17\u5FC5\u620A\u6253\u6254\u6252\u6251\u65A5\u65E6\u672E\u672C\u672A\u672B\u672D\u6B63\u6BCD\u6C11\u6C10\u6C38\u6C41\u6C40\u6C3E\u72AF\u7384\u7389\u74DC\u74E6\u7518\u751F\u7528\u7529\u7530\u7531\u7532\u7533\u758B\u767D\u76AE\u76BF\u76EE\u77DB\u77E2\u77F3\u793A\u79BE\u7A74\u7ACB\u4E1E\u4E1F\u4E52\u4E53\u4E69\u4E99\u4EA4\u4EA6\u4EA5\u4EFF\u4F09\u4F19\u4F0A\u4F15\u4F0D\u4F10\u4F11\u4F0F\u4EF2\u4EF6\u4EFB\u4EF0\u4EF3\u4EFD\u4F01\u4F0B\u5149\u5147\u5146\u5148\u5168\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[165].length; ++j)
                if (D[165][j].charCodeAt(0) !== 65533) {
                    e2[D[165][j]] = 42240 + j;
                    d[42240 + j] = D[165][j];
                }
            D[166] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5171\u518D\u51B0\u5217\u5211\u5212\u520E\u5216\u52A3\u5308\u5321\u5320\u5370\u5371\u5409\u540F\u540C\u540A\u5410\u5401\u540B\u5404\u5411\u540D\u5408\u5403\u540E\u5406\u5412\u56E0\u56DE\u56DD\u5733\u5730\u5728\u572D\u572C\u572F\u5729\u5919\u591A\u5937\u5938\u5984\u5978\u5983\u597D\u5979\u5982\u5981\u5B57\u5B58\u5B87\u5B88\u5B85\u5B89\u5BFA\u5C16\u5C79\u5DDE\u5E06\u5E76\u5E74\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5F0F\u5F1B\u5FD9\u5FD6\u620E\u620C\u620D\u6210\u6263\u625B\u6258\u6536\u65E9\u65E8\u65EC\u65ED\u66F2\u66F3\u6709\u673D\u6734\u6731\u6735\u6B21\u6B64\u6B7B\u6C16\u6C5D\u6C57\u6C59\u6C5F\u6C60\u6C50\u6C55\u6C61\u6C5B\u6C4D\u6C4E\u7070\u725F\u725D\u767E\u7AF9\u7C73\u7CF8\u7F36\u7F8A\u7FBD\u8001\u8003\u800C\u8012\u8033\u807F\u8089\u808B\u808C\u81E3\u81EA\u81F3\u81FC\u820C\u821B\u821F\u826E\u8272\u827E\u866B\u8840\u884C\u8863\u897F\u9621\u4E32\u4EA8\u4F4D\u4F4F\u4F47\u4F57\u4F5E\u4F34\u4F5B\u4F55\u4F30\u4F50\u4F51\u4F3D\u4F3A\u4F38\u4F43\u4F54\u4F3C\u4F46\u4F63\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[166].length; ++j)
                if (D[166][j].charCodeAt(0) !== 65533) {
                    e2[D[166][j]] = 42496 + j;
                    d[42496 + j] = D[166][j];
                }
            D[167] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4F5C\u4F60\u4F2F\u4F4E\u4F36\u4F59\u4F5D\u4F48\u4F5A\u514C\u514B\u514D\u5175\u51B6\u51B7\u5225\u5224\u5229\u522A\u5228\u52AB\u52A9\u52AA\u52AC\u5323\u5373\u5375\u541D\u542D\u541E\u543E\u5426\u544E\u5427\u5446\u5443\u5433\u5448\u5442\u541B\u5429\u544A\u5439\u543B\u5438\u542E\u5435\u5436\u5420\u543C\u5440\u5431\u542B\u541F\u542C\u56EA\u56F0\u56E4\u56EB\u574A\u5751\u5740\u574D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5747\u574E\u573E\u5750\u574F\u573B\u58EF\u593E\u599D\u5992\u59A8\u599E\u59A3\u5999\u5996\u598D\u59A4\u5993\u598A\u59A5\u5B5D\u5B5C\u5B5A\u5B5B\u5B8C\u5B8B\u5B8F\u5C2C\u5C40\u5C41\u5C3F\u5C3E\u5C90\u5C91\u5C94\u5C8C\u5DEB\u5E0C\u5E8F\u5E87\u5E8A\u5EF7\u5F04\u5F1F\u5F64\u5F62\u5F77\u5F79\u5FD8\u5FCC\u5FD7\u5FCD\u5FF1\u5FEB\u5FF8\u5FEA\u6212\u6211\u6284\u6297\u6296\u6280\u6276\u6289\u626D\u628A\u627C\u627E\u6279\u6273\u6292\u626F\u6298\u626E\u6295\u6293\u6291\u6286\u6539\u653B\u6538\u65F1\u66F4\u675F\u674E\u674F\u6750\u6751\u675C\u6756\u675E\u6749\u6746\u6760\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[167].length; ++j)
                if (D[167][j].charCodeAt(0) !== 65533) {
                    e2[D[167][j]] = 42752 + j;
                    d[42752 + j] = D[167][j];
                }
            D[168] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6753\u6757\u6B65\u6BCF\u6C42\u6C5E\u6C99\u6C81\u6C88\u6C89\u6C85\u6C9B\u6C6A\u6C7A\u6C90\u6C70\u6C8C\u6C68\u6C96\u6C92\u6C7D\u6C83\u6C72\u6C7E\u6C74\u6C86\u6C76\u6C8D\u6C94\u6C98\u6C82\u7076\u707C\u707D\u7078\u7262\u7261\u7260\u72C4\u72C2\u7396\u752C\u752B\u7537\u7538\u7682\u76EF\u77E3\u79C1\u79C0\u79BF\u7A76\u7CFB\u7F55\u8096\u8093\u809D\u8098\u809B\u809A\u80B2\u826F\u8292\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u828B\u828D\u898B\u89D2\u8A00\u8C37\u8C46\u8C55\u8C9D\u8D64\u8D70\u8DB3\u8EAB\u8ECA\u8F9B\u8FB0\u8FC2\u8FC6\u8FC5\u8FC4\u5DE1\u9091\u90A2\u90AA\u90A6\u90A3\u9149\u91C6\u91CC\u9632\u962E\u9631\u962A\u962C\u4E26\u4E56\u4E73\u4E8B\u4E9B\u4E9E\u4EAB\u4EAC\u4F6F\u4F9D\u4F8D\u4F73\u4F7F\u4F6C\u4F9B\u4F8B\u4F86\u4F83\u4F70\u4F75\u4F88\u4F69\u4F7B\u4F96\u4F7E\u4F8F\u4F91\u4F7A\u5154\u5152\u5155\u5169\u5177\u5176\u5178\u51BD\u51FD\u523B\u5238\u5237\u523A\u5230\u522E\u5236\u5241\u52BE\u52BB\u5352\u5354\u5353\u5351\u5366\u5377\u5378\u5379\u53D6\u53D4\u53D7\u5473\u5475\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[168].length; ++j)
                if (D[168][j].charCodeAt(0) !== 65533) {
                    e2[D[168][j]] = 43008 + j;
                    d[43008 + j] = D[168][j];
                }
            D[169] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5496\u5478\u5495\u5480\u547B\u5477\u5484\u5492\u5486\u547C\u5490\u5471\u5476\u548C\u549A\u5462\u5468\u548B\u547D\u548E\u56FA\u5783\u5777\u576A\u5769\u5761\u5766\u5764\u577C\u591C\u5949\u5947\u5948\u5944\u5954\u59BE\u59BB\u59D4\u59B9\u59AE\u59D1\u59C6\u59D0\u59CD\u59CB\u59D3\u59CA\u59AF\u59B3\u59D2\u59C5\u5B5F\u5B64\u5B63\u5B97\u5B9A\u5B98\u5B9C\u5B99\u5B9B\u5C1A\u5C48\u5C45\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5C46\u5CB7\u5CA1\u5CB8\u5CA9\u5CAB\u5CB1\u5CB3\u5E18\u5E1A\u5E16\u5E15\u5E1B\u5E11\u5E78\u5E9A\u5E97\u5E9C\u5E95\u5E96\u5EF6\u5F26\u5F27\u5F29\u5F80\u5F81\u5F7F\u5F7C\u5FDD\u5FE0\u5FFD\u5FF5\u5FFF\u600F\u6014\u602F\u6035\u6016\u602A\u6015\u6021\u6027\u6029\u602B\u601B\u6216\u6215\u623F\u623E\u6240\u627F\u62C9\u62CC\u62C4\u62BF\u62C2\u62B9\u62D2\u62DB\u62AB\u62D3\u62D4\u62CB\u62C8\u62A8\u62BD\u62BC\u62D0\u62D9\u62C7\u62CD\u62B5\u62DA\u62B1\u62D8\u62D6\u62D7\u62C6\u62AC\u62CE\u653E\u65A7\u65BC\u65FA\u6614\u6613\u660C\u6606\u6602\u660E\u6600\u660F\u6615\u660A\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[169].length; ++j)
                if (D[169][j].charCodeAt(0) !== 65533) {
                    e2[D[169][j]] = 43264 + j;
                    d[43264 + j] = D[169][j];
                }
            D[170] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6607\u670D\u670B\u676D\u678B\u6795\u6771\u679C\u6773\u6777\u6787\u679D\u6797\u676F\u6770\u677F\u6789\u677E\u6790\u6775\u679A\u6793\u677C\u676A\u6772\u6B23\u6B66\u6B67\u6B7F\u6C13\u6C1B\u6CE3\u6CE8\u6CF3\u6CB1\u6CCC\u6CE5\u6CB3\u6CBD\u6CBE\u6CBC\u6CE2\u6CAB\u6CD5\u6CD3\u6CB8\u6CC4\u6CB9\u6CC1\u6CAE\u6CD7\u6CC5\u6CF1\u6CBF\u6CBB\u6CE1\u6CDB\u6CCA\u6CAC\u6CEF\u6CDC\u6CD6\u6CE0\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7095\u708E\u7092\u708A\u7099\u722C\u722D\u7238\u7248\u7267\u7269\u72C0\u72CE\u72D9\u72D7\u72D0\u73A9\u73A8\u739F\u73AB\u73A5\u753D\u759D\u7599\u759A\u7684\u76C2\u76F2\u76F4\u77E5\u77FD\u793E\u7940\u7941\u79C9\u79C8\u7A7A\u7A79\u7AFA\u7CFE\u7F54\u7F8C\u7F8B\u8005\u80BA\u80A5\u80A2\u80B1\u80A1\u80AB\u80A9\u80B4\u80AA\u80AF\u81E5\u81FE\u820D\u82B3\u829D\u8299\u82AD\u82BD\u829F\u82B9\u82B1\u82AC\u82A5\u82AF\u82B8\u82A3\u82B0\u82BE\u82B7\u864E\u8671\u521D\u8868\u8ECB\u8FCE\u8FD4\u8FD1\u90B5\u90B8\u90B1\u90B6\u91C7\u91D1\u9577\u9580\u961C\u9640\u963F\u963B\u9644\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[170].length; ++j)
                if (D[170][j].charCodeAt(0) !== 65533) {
                    e2[D[170][j]] = 43520 + j;
                    d[43520 + j] = D[170][j];
                }
            D[171] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9642\u96B9\u96E8\u9752\u975E\u4E9F\u4EAD\u4EAE\u4FE1\u4FB5\u4FAF\u4FBF\u4FE0\u4FD1\u4FCF\u4FDD\u4FC3\u4FB6\u4FD8\u4FDF\u4FCA\u4FD7\u4FAE\u4FD0\u4FC4\u4FC2\u4FDA\u4FCE\u4FDE\u4FB7\u5157\u5192\u5191\u51A0\u524E\u5243\u524A\u524D\u524C\u524B\u5247\u52C7\u52C9\u52C3\u52C1\u530D\u5357\u537B\u539A\u53DB\u54AC\u54C0\u54A8\u54CE\u54C9\u54B8\u54A6\u54B3\u54C7\u54C2\u54BD\u54AA\u54C1\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u54C4\u54C8\u54AF\u54AB\u54B1\u54BB\u54A9\u54A7\u54BF\u56FF\u5782\u578B\u57A0\u57A3\u57A2\u57CE\u57AE\u5793\u5955\u5951\u594F\u594E\u5950\u59DC\u59D8\u59FF\u59E3\u59E8\u5A03\u59E5\u59EA\u59DA\u59E6\u5A01\u59FB\u5B69\u5BA3\u5BA6\u5BA4\u5BA2\u5BA5\u5C01\u5C4E\u5C4F\u5C4D\u5C4B\u5CD9\u5CD2\u5DF7\u5E1D\u5E25\u5E1F\u5E7D\u5EA0\u5EA6\u5EFA\u5F08\u5F2D\u5F65\u5F88\u5F85\u5F8A\u5F8B\u5F87\u5F8C\u5F89\u6012\u601D\u6020\u6025\u600E\u6028\u604D\u6070\u6068\u6062\u6046\u6043\u606C\u606B\u606A\u6064\u6241\u62DC\u6316\u6309\u62FC\u62ED\u6301\u62EE\u62FD\u6307\u62F1\u62F7\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[171].length; ++j)
                if (D[171][j].charCodeAt(0) !== 65533) {
                    e2[D[171][j]] = 43776 + j;
                    d[43776 + j] = D[171][j];
                }
            D[172] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u62EF\u62EC\u62FE\u62F4\u6311\u6302\u653F\u6545\u65AB\u65BD\u65E2\u6625\u662D\u6620\u6627\u662F\u661F\u6628\u6631\u6624\u66F7\u67FF\u67D3\u67F1\u67D4\u67D0\u67EC\u67B6\u67AF\u67F5\u67E9\u67EF\u67C4\u67D1\u67B4\u67DA\u67E5\u67B8\u67CF\u67DE\u67F3\u67B0\u67D9\u67E2\u67DD\u67D2\u6B6A\u6B83\u6B86\u6BB5\u6BD2\u6BD7\u6C1F\u6CC9\u6D0B\u6D32\u6D2A\u6D41\u6D25\u6D0C\u6D31\u6D1E\u6D17\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6D3B\u6D3D\u6D3E\u6D36\u6D1B\u6CF5\u6D39\u6D27\u6D38\u6D29\u6D2E\u6D35\u6D0E\u6D2B\u70AB\u70BA\u70B3\u70AC\u70AF\u70AD\u70B8\u70AE\u70A4\u7230\u7272\u726F\u7274\u72E9\u72E0\u72E1\u73B7\u73CA\u73BB\u73B2\u73CD\u73C0\u73B3\u751A\u752D\u754F\u754C\u754E\u754B\u75AB\u75A4\u75A5\u75A2\u75A3\u7678\u7686\u7687\u7688\u76C8\u76C6\u76C3\u76C5\u7701\u76F9\u76F8\u7709\u770B\u76FE\u76FC\u7707\u77DC\u7802\u7814\u780C\u780D\u7946\u7949\u7948\u7947\u79B9\u79BA\u79D1\u79D2\u79CB\u7A7F\u7A81\u7AFF\u7AFD\u7C7D\u7D02\u7D05\u7D00\u7D09\u7D07\u7D04\u7D06\u7F38\u7F8E\u7FBF\u8004\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[172].length; ++j)
                if (D[172][j].charCodeAt(0) !== 65533) {
                    e2[D[172][j]] = 44032 + j;
                    d[44032 + j] = D[172][j];
                }
            D[173] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8010\u800D\u8011\u8036\u80D6\u80E5\u80DA\u80C3\u80C4\u80CC\u80E1\u80DB\u80CE\u80DE\u80E4\u80DD\u81F4\u8222\u82E7\u8303\u8305\u82E3\u82DB\u82E6\u8304\u82E5\u8302\u8309\u82D2\u82D7\u82F1\u8301\u82DC\u82D4\u82D1\u82DE\u82D3\u82DF\u82EF\u8306\u8650\u8679\u867B\u867A\u884D\u886B\u8981\u89D4\u8A08\u8A02\u8A03\u8C9E\u8CA0\u8D74\u8D73\u8DB4\u8ECD\u8ECC\u8FF0\u8FE6\u8FE2\u8FEA\u8FE5\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8FED\u8FEB\u8FE4\u8FE8\u90CA\u90CE\u90C1\u90C3\u914B\u914A\u91CD\u9582\u9650\u964B\u964C\u964D\u9762\u9769\u97CB\u97ED\u97F3\u9801\u98A8\u98DB\u98DF\u9996\u9999\u4E58\u4EB3\u500C\u500D\u5023\u4FEF\u5026\u5025\u4FF8\u5029\u5016\u5006\u503C\u501F\u501A\u5012\u5011\u4FFA\u5000\u5014\u5028\u4FF1\u5021\u500B\u5019\u5018\u4FF3\u4FEE\u502D\u502A\u4FFE\u502B\u5009\u517C\u51A4\u51A5\u51A2\u51CD\u51CC\u51C6\u51CB\u5256\u525C\u5254\u525B\u525D\u532A\u537F\u539F\u539D\u53DF\u54E8\u5510\u5501\u5537\u54FC\u54E5\u54F2\u5506\u54FA\u5514\u54E9\u54ED\u54E1\u5509\u54EE\u54EA\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[173].length; ++j)
                if (D[173][j].charCodeAt(0) !== 65533) {
                    e2[D[173][j]] = 44288 + j;
                    d[44288 + j] = D[173][j];
                }
            D[174] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u54E6\u5527\u5507\u54FD\u550F\u5703\u5704\u57C2\u57D4\u57CB\u57C3\u5809\u590F\u5957\u5958\u595A\u5A11\u5A18\u5A1C\u5A1F\u5A1B\u5A13\u59EC\u5A20\u5A23\u5A29\u5A25\u5A0C\u5A09\u5B6B\u5C58\u5BB0\u5BB3\u5BB6\u5BB4\u5BAE\u5BB5\u5BB9\u5BB8\u5C04\u5C51\u5C55\u5C50\u5CED\u5CFD\u5CFB\u5CEA\u5CE8\u5CF0\u5CF6\u5D01\u5CF4\u5DEE\u5E2D\u5E2B\u5EAB\u5EAD\u5EA7\u5F31\u5F92\u5F91\u5F90\u6059\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6063\u6065\u6050\u6055\u606D\u6069\u606F\u6084\u609F\u609A\u608D\u6094\u608C\u6085\u6096\u6247\u62F3\u6308\u62FF\u634E\u633E\u632F\u6355\u6342\u6346\u634F\u6349\u633A\u6350\u633D\u632A\u632B\u6328\u634D\u634C\u6548\u6549\u6599\u65C1\u65C5\u6642\u6649\u664F\u6643\u6652\u664C\u6645\u6641\u66F8\u6714\u6715\u6717\u6821\u6838\u6848\u6846\u6853\u6839\u6842\u6854\u6829\u68B3\u6817\u684C\u6851\u683D\u67F4\u6850\u6840\u683C\u6843\u682A\u6845\u6813\u6818\u6841\u6B8A\u6B89\u6BB7\u6C23\u6C27\u6C28\u6C26\u6C24\u6CF0\u6D6A\u6D95\u6D88\u6D87\u6D66\u6D78\u6D77\u6D59\u6D93\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[174].length; ++j)
                if (D[174][j].charCodeAt(0) !== 65533) {
                    e2[D[174][j]] = 44544 + j;
                    d[44544 + j] = D[174][j];
                }
            D[175] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6D6C\u6D89\u6D6E\u6D5A\u6D74\u6D69\u6D8C\u6D8A\u6D79\u6D85\u6D65\u6D94\u70CA\u70D8\u70E4\u70D9\u70C8\u70CF\u7239\u7279\u72FC\u72F9\u72FD\u72F8\u72F7\u7386\u73ED\u7409\u73EE\u73E0\u73EA\u73DE\u7554\u755D\u755C\u755A\u7559\u75BE\u75C5\u75C7\u75B2\u75B3\u75BD\u75BC\u75B9\u75C2\u75B8\u768B\u76B0\u76CA\u76CD\u76CE\u7729\u771F\u7720\u7728\u77E9\u7830\u7827\u7838\u781D\u7834\u7837\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7825\u782D\u7820\u781F\u7832\u7955\u7950\u7960\u795F\u7956\u795E\u795D\u7957\u795A\u79E4\u79E3\u79E7\u79DF\u79E6\u79E9\u79D8\u7A84\u7A88\u7AD9\u7B06\u7B11\u7C89\u7D21\u7D17\u7D0B\u7D0A\u7D20\u7D22\u7D14\u7D10\u7D15\u7D1A\u7D1C\u7D0D\u7D19\u7D1B\u7F3A\u7F5F\u7F94\u7FC5\u7FC1\u8006\u8018\u8015\u8019\u8017\u803D\u803F\u80F1\u8102\u80F0\u8105\u80ED\u80F4\u8106\u80F8\u80F3\u8108\u80FD\u810A\u80FC\u80EF\u81ED\u81EC\u8200\u8210\u822A\u822B\u8228\u822C\u82BB\u832B\u8352\u8354\u834A\u8338\u8350\u8349\u8335\u8334\u834F\u8332\u8339\u8336\u8317\u8340\u8331\u8328\u8343\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[175].length; ++j)
                if (D[175][j].charCodeAt(0) !== 65533) {
                    e2[D[175][j]] = 44800 + j;
                    d[44800 + j] = D[175][j];
                }
            D[176] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8654\u868A\u86AA\u8693\u86A4\u86A9\u868C\u86A3\u869C\u8870\u8877\u8881\u8882\u887D\u8879\u8A18\u8A10\u8A0E\u8A0C\u8A15\u8A0A\u8A17\u8A13\u8A16\u8A0F\u8A11\u8C48\u8C7A\u8C79\u8CA1\u8CA2\u8D77\u8EAC\u8ED2\u8ED4\u8ECF\u8FB1\u9001\u9006\u8FF7\u9000\u8FFA\u8FF4\u9003\u8FFD\u9005\u8FF8\u9095\u90E1\u90DD\u90E2\u9152\u914D\u914C\u91D8\u91DD\u91D7\u91DC\u91D9\u9583\u9662\u9663\u9661\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u965B\u965D\u9664\u9658\u965E\u96BB\u98E2\u99AC\u9AA8\u9AD8\u9B25\u9B32\u9B3C\u4E7E\u507A\u507D\u505C\u5047\u5043\u504C\u505A\u5049\u5065\u5076\u504E\u5055\u5075\u5074\u5077\u504F\u500F\u506F\u506D\u515C\u5195\u51F0\u526A\u526F\u52D2\u52D9\u52D8\u52D5\u5310\u530F\u5319\u533F\u5340\u533E\u53C3\u66FC\u5546\u556A\u5566\u5544\u555E\u5561\u5543\u554A\u5531\u5556\u554F\u5555\u552F\u5564\u5538\u552E\u555C\u552C\u5563\u5533\u5541\u5557\u5708\u570B\u5709\u57DF\u5805\u580A\u5806\u57E0\u57E4\u57FA\u5802\u5835\u57F7\u57F9\u5920\u5962\u5A36\u5A41\u5A49\u5A66\u5A6A\u5A40\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[176].length; ++j)
                if (D[176][j].charCodeAt(0) !== 65533) {
                    e2[D[176][j]] = 45056 + j;
                    d[45056 + j] = D[176][j];
                }
            D[177] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5A3C\u5A62\u5A5A\u5A46\u5A4A\u5B70\u5BC7\u5BC5\u5BC4\u5BC2\u5BBF\u5BC6\u5C09\u5C08\u5C07\u5C60\u5C5C\u5C5D\u5D07\u5D06\u5D0E\u5D1B\u5D16\u5D22\u5D11\u5D29\u5D14\u5D19\u5D24\u5D27\u5D17\u5DE2\u5E38\u5E36\u5E33\u5E37\u5EB7\u5EB8\u5EB6\u5EB5\u5EBE\u5F35\u5F37\u5F57\u5F6C\u5F69\u5F6B\u5F97\u5F99\u5F9E\u5F98\u5FA1\u5FA0\u5F9C\u607F\u60A3\u6089\u60A0\u60A8\u60CB\u60B4\u60E6\u60BD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u60C5\u60BB\u60B5\u60DC\u60BC\u60D8\u60D5\u60C6\u60DF\u60B8\u60DA\u60C7\u621A\u621B\u6248\u63A0\u63A7\u6372\u6396\u63A2\u63A5\u6377\u6367\u6398\u63AA\u6371\u63A9\u6389\u6383\u639B\u636B\u63A8\u6384\u6388\u6399\u63A1\u63AC\u6392\u638F\u6380\u637B\u6369\u6368\u637A\u655D\u6556\u6551\u6559\u6557\u555F\u654F\u6558\u6555\u6554\u659C\u659B\u65AC\u65CF\u65CB\u65CC\u65CE\u665D\u665A\u6664\u6668\u6666\u665E\u66F9\u52D7\u671B\u6881\u68AF\u68A2\u6893\u68B5\u687F\u6876\u68B1\u68A7\u6897\u68B0\u6883\u68C4\u68AD\u6886\u6885\u6894\u689D\u68A8\u689F\u68A1\u6882\u6B32\u6BBA\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[177].length; ++j)
                if (D[177][j].charCodeAt(0) !== 65533) {
                    e2[D[177][j]] = 45312 + j;
                    d[45312 + j] = D[177][j];
                }
            D[178] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6BEB\u6BEC\u6C2B\u6D8E\u6DBC\u6DF3\u6DD9\u6DB2\u6DE1\u6DCC\u6DE4\u6DFB\u6DFA\u6E05\u6DC7\u6DCB\u6DAF\u6DD1\u6DAE\u6DDE\u6DF9\u6DB8\u6DF7\u6DF5\u6DC5\u6DD2\u6E1A\u6DB5\u6DDA\u6DEB\u6DD8\u6DEA\u6DF1\u6DEE\u6DE8\u6DC6\u6DC4\u6DAA\u6DEC\u6DBF\u6DE6\u70F9\u7109\u710A\u70FD\u70EF\u723D\u727D\u7281\u731C\u731B\u7316\u7313\u7319\u7387\u7405\u740A\u7403\u7406\u73FE\u740D\u74E0\u74F6\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u74F7\u751C\u7522\u7565\u7566\u7562\u7570\u758F\u75D4\u75D5\u75B5\u75CA\u75CD\u768E\u76D4\u76D2\u76DB\u7737\u773E\u773C\u7736\u7738\u773A\u786B\u7843\u784E\u7965\u7968\u796D\u79FB\u7A92\u7A95\u7B20\u7B28\u7B1B\u7B2C\u7B26\u7B19\u7B1E\u7B2E\u7C92\u7C97\u7C95\u7D46\u7D43\u7D71\u7D2E\u7D39\u7D3C\u7D40\u7D30\u7D33\u7D44\u7D2F\u7D42\u7D32\u7D31\u7F3D\u7F9E\u7F9A\u7FCC\u7FCE\u7FD2\u801C\u804A\u8046\u812F\u8116\u8123\u812B\u8129\u8130\u8124\u8202\u8235\u8237\u8236\u8239\u838E\u839E\u8398\u8378\u83A2\u8396\u83BD\u83AB\u8392\u838A\u8393\u8389\u83A0\u8377\u837B\u837C\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[178].length; ++j)
                if (D[178][j].charCodeAt(0) !== 65533) {
                    e2[D[178][j]] = 45568 + j;
                    d[45568 + j] = D[178][j];
                }
            D[179] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8386\u83A7\u8655\u5F6A\u86C7\u86C0\u86B6\u86C4\u86B5\u86C6\u86CB\u86B1\u86AF\u86C9\u8853\u889E\u8888\u88AB\u8892\u8896\u888D\u888B\u8993\u898F\u8A2A\u8A1D\u8A23\u8A25\u8A31\u8A2D\u8A1F\u8A1B\u8A22\u8C49\u8C5A\u8CA9\u8CAC\u8CAB\u8CA8\u8CAA\u8CA7\u8D67\u8D66\u8DBE\u8DBA\u8EDB\u8EDF\u9019\u900D\u901A\u9017\u9023\u901F\u901D\u9010\u9015\u901E\u9020\u900F\u9022\u9016\u901B\u9014\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u90E8\u90ED\u90FD\u9157\u91CE\u91F5\u91E6\u91E3\u91E7\u91ED\u91E9\u9589\u966A\u9675\u9673\u9678\u9670\u9674\u9676\u9677\u966C\u96C0\u96EA\u96E9\u7AE0\u7ADF\u9802\u9803\u9B5A\u9CE5\u9E75\u9E7F\u9EA5\u9EBB\u50A2\u508D\u5085\u5099\u5091\u5080\u5096\u5098\u509A\u6700\u51F1\u5272\u5274\u5275\u5269\u52DE\u52DD\u52DB\u535A\u53A5\u557B\u5580\u55A7\u557C\u558A\u559D\u5598\u5582\u559C\u55AA\u5594\u5587\u558B\u5583\u55B3\u55AE\u559F\u553E\u55B2\u559A\u55BB\u55AC\u55B1\u557E\u5589\u55AB\u5599\u570D\u582F\u582A\u5834\u5824\u5830\u5831\u5821\u581D\u5820\u58F9\u58FA\u5960\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[179].length; ++j)
                if (D[179][j].charCodeAt(0) !== 65533) {
                    e2[D[179][j]] = 45824 + j;
                    d[45824 + j] = D[179][j];
                }
            D[180] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5A77\u5A9A\u5A7F\u5A92\u5A9B\u5AA7\u5B73\u5B71\u5BD2\u5BCC\u5BD3\u5BD0\u5C0A\u5C0B\u5C31\u5D4C\u5D50\u5D34\u5D47\u5DFD\u5E45\u5E3D\u5E40\u5E43\u5E7E\u5ECA\u5EC1\u5EC2\u5EC4\u5F3C\u5F6D\u5FA9\u5FAA\u5FA8\u60D1\u60E1\u60B2\u60B6\u60E0\u611C\u6123\u60FA\u6115\u60F0\u60FB\u60F4\u6168\u60F1\u610E\u60F6\u6109\u6100\u6112\u621F\u6249\u63A3\u638C\u63CF\u63C0\u63E9\u63C9\u63C6\u63CD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u63D2\u63E3\u63D0\u63E1\u63D6\u63ED\u63EE\u6376\u63F4\u63EA\u63DB\u6452\u63DA\u63F9\u655E\u6566\u6562\u6563\u6591\u6590\u65AF\u666E\u6670\u6674\u6676\u666F\u6691\u667A\u667E\u6677\u66FE\u66FF\u671F\u671D\u68FA\u68D5\u68E0\u68D8\u68D7\u6905\u68DF\u68F5\u68EE\u68E7\u68F9\u68D2\u68F2\u68E3\u68CB\u68CD\u690D\u6912\u690E\u68C9\u68DA\u696E\u68FB\u6B3E\u6B3A\u6B3D\u6B98\u6B96\u6BBC\u6BEF\u6C2E\u6C2F\u6C2C\u6E2F\u6E38\u6E54\u6E21\u6E32\u6E67\u6E4A\u6E20\u6E25\u6E23\u6E1B\u6E5B\u6E58\u6E24\u6E56\u6E6E\u6E2D\u6E26\u6E6F\u6E34\u6E4D\u6E3A\u6E2C\u6E43\u6E1D\u6E3E\u6ECB\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[180].length; ++j)
                if (D[180][j].charCodeAt(0) !== 65533) {
                    e2[D[180][j]] = 46080 + j;
                    d[46080 + j] = D[180][j];
                }
            D[181] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6E89\u6E19\u6E4E\u6E63\u6E44\u6E72\u6E69\u6E5F\u7119\u711A\u7126\u7130\u7121\u7136\u716E\u711C\u724C\u7284\u7280\u7336\u7325\u7334\u7329\u743A\u742A\u7433\u7422\u7425\u7435\u7436\u7434\u742F\u741B\u7426\u7428\u7525\u7526\u756B\u756A\u75E2\u75DB\u75E3\u75D9\u75D8\u75DE\u75E0\u767B\u767C\u7696\u7693\u76B4\u76DC\u774F\u77ED\u785D\u786C\u786F\u7A0D\u7A08\u7A0B\u7A05\u7A00\u7A98\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7A97\u7A96\u7AE5\u7AE3\u7B49\u7B56\u7B46\u7B50\u7B52\u7B54\u7B4D\u7B4B\u7B4F\u7B51\u7C9F\u7CA5\u7D5E\u7D50\u7D68\u7D55\u7D2B\u7D6E\u7D72\u7D61\u7D66\u7D62\u7D70\u7D73\u5584\u7FD4\u7FD5\u800B\u8052\u8085\u8155\u8154\u814B\u8151\u814E\u8139\u8146\u813E\u814C\u8153\u8174\u8212\u821C\u83E9\u8403\u83F8\u840D\u83E0\u83C5\u840B\u83C1\u83EF\u83F1\u83F4\u8457\u840A\u83F0\u840C\u83CC\u83FD\u83F2\u83CA\u8438\u840E\u8404\u83DC\u8407\u83D4\u83DF\u865B\u86DF\u86D9\u86ED\u86D4\u86DB\u86E4\u86D0\u86DE\u8857\u88C1\u88C2\u88B1\u8983\u8996\u8A3B\u8A60\u8A55\u8A5E\u8A3C\u8A41\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[181].length; ++j)
                if (D[181][j].charCodeAt(0) !== 65533) {
                    e2[D[181][j]] = 46336 + j;
                    d[46336 + j] = D[181][j];
                }
            D[182] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8A54\u8A5B\u8A50\u8A46\u8A34\u8A3A\u8A36\u8A56\u8C61\u8C82\u8CAF\u8CBC\u8CB3\u8CBD\u8CC1\u8CBB\u8CC0\u8CB4\u8CB7\u8CB6\u8CBF\u8CB8\u8D8A\u8D85\u8D81\u8DCE\u8DDD\u8DCB\u8DDA\u8DD1\u8DCC\u8DDB\u8DC6\u8EFB\u8EF8\u8EFC\u8F9C\u902E\u9035\u9031\u9038\u9032\u9036\u9102\u90F5\u9109\u90FE\u9163\u9165\u91CF\u9214\u9215\u9223\u9209\u921E\u920D\u9210\u9207\u9211\u9594\u958F\u958B\u9591\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9593\u9592\u958E\u968A\u968E\u968B\u967D\u9685\u9686\u968D\u9672\u9684\u96C1\u96C5\u96C4\u96C6\u96C7\u96EF\u96F2\u97CC\u9805\u9806\u9808\u98E7\u98EA\u98EF\u98E9\u98F2\u98ED\u99AE\u99AD\u9EC3\u9ECD\u9ED1\u4E82\u50AD\u50B5\u50B2\u50B3\u50C5\u50BE\u50AC\u50B7\u50BB\u50AF\u50C7\u527F\u5277\u527D\u52DF\u52E6\u52E4\u52E2\u52E3\u532F\u55DF\u55E8\u55D3\u55E6\u55CE\u55DC\u55C7\u55D1\u55E3\u55E4\u55EF\u55DA\u55E1\u55C5\u55C6\u55E5\u55C9\u5712\u5713\u585E\u5851\u5858\u5857\u585A\u5854\u586B\u584C\u586D\u584A\u5862\u5852\u584B\u5967\u5AC1\u5AC9\u5ACC\u5ABE\u5ABD\u5ABC\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[182].length; ++j)
                if (D[182][j].charCodeAt(0) !== 65533) {
                    e2[D[182][j]] = 46592 + j;
                    d[46592 + j] = D[182][j];
                }
            D[183] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5AB3\u5AC2\u5AB2\u5D69\u5D6F\u5E4C\u5E79\u5EC9\u5EC8\u5F12\u5F59\u5FAC\u5FAE\u611A\u610F\u6148\u611F\u60F3\u611B\u60F9\u6101\u6108\u614E\u614C\u6144\u614D\u613E\u6134\u6127\u610D\u6106\u6137\u6221\u6222\u6413\u643E\u641E\u642A\u642D\u643D\u642C\u640F\u641C\u6414\u640D\u6436\u6416\u6417\u6406\u656C\u659F\u65B0\u6697\u6689\u6687\u6688\u6696\u6684\u6698\u668D\u6703\u6994\u696D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u695A\u6977\u6960\u6954\u6975\u6930\u6982\u694A\u6968\u696B\u695E\u6953\u6979\u6986\u695D\u6963\u695B\u6B47\u6B72\u6BC0\u6BBF\u6BD3\u6BFD\u6EA2\u6EAF\u6ED3\u6EB6\u6EC2\u6E90\u6E9D\u6EC7\u6EC5\u6EA5\u6E98\u6EBC\u6EBA\u6EAB\u6ED1\u6E96\u6E9C\u6EC4\u6ED4\u6EAA\u6EA7\u6EB4\u714E\u7159\u7169\u7164\u7149\u7167\u715C\u716C\u7166\u714C\u7165\u715E\u7146\u7168\u7156\u723A\u7252\u7337\u7345\u733F\u733E\u746F\u745A\u7455\u745F\u745E\u7441\u743F\u7459\u745B\u745C\u7576\u7578\u7600\u75F0\u7601\u75F2\u75F1\u75FA\u75FF\u75F4\u75F3\u76DE\u76DF\u775B\u776B\u7766\u775E\u7763\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[183].length; ++j)
                if (D[183][j].charCodeAt(0) !== 65533) {
                    e2[D[183][j]] = 46848 + j;
                    d[46848 + j] = D[183][j];
                }
            D[184] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7779\u776A\u776C\u775C\u7765\u7768\u7762\u77EE\u788E\u78B0\u7897\u7898\u788C\u7889\u787C\u7891\u7893\u787F\u797A\u797F\u7981\u842C\u79BD\u7A1C\u7A1A\u7A20\u7A14\u7A1F\u7A1E\u7A9F\u7AA0\u7B77\u7BC0\u7B60\u7B6E\u7B67\u7CB1\u7CB3\u7CB5\u7D93\u7D79\u7D91\u7D81\u7D8F\u7D5B\u7F6E\u7F69\u7F6A\u7F72\u7FA9\u7FA8\u7FA4\u8056\u8058\u8086\u8084\u8171\u8170\u8178\u8165\u816E\u8173\u816B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8179\u817A\u8166\u8205\u8247\u8482\u8477\u843D\u8431\u8475\u8466\u846B\u8449\u846C\u845B\u843C\u8435\u8461\u8463\u8469\u846D\u8446\u865E\u865C\u865F\u86F9\u8713\u8708\u8707\u8700\u86FE\u86FB\u8702\u8703\u8706\u870A\u8859\u88DF\u88D4\u88D9\u88DC\u88D8\u88DD\u88E1\u88CA\u88D5\u88D2\u899C\u89E3\u8A6B\u8A72\u8A73\u8A66\u8A69\u8A70\u8A87\u8A7C\u8A63\u8AA0\u8A71\u8A85\u8A6D\u8A62\u8A6E\u8A6C\u8A79\u8A7B\u8A3E\u8A68\u8C62\u8C8A\u8C89\u8CCA\u8CC7\u8CC8\u8CC4\u8CB2\u8CC3\u8CC2\u8CC5\u8DE1\u8DDF\u8DE8\u8DEF\u8DF3\u8DFA\u8DEA\u8DE4\u8DE6\u8EB2\u8F03\u8F09\u8EFE\u8F0A\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[184].length; ++j)
                if (D[184][j].charCodeAt(0) !== 65533) {
                    e2[D[184][j]] = 47104 + j;
                    d[47104 + j] = D[184][j];
                }
            D[185] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8F9F\u8FB2\u904B\u904A\u9053\u9042\u9054\u903C\u9055\u9050\u9047\u904F\u904E\u904D\u9051\u903E\u9041\u9112\u9117\u916C\u916A\u9169\u91C9\u9237\u9257\u9238\u923D\u9240\u923E\u925B\u924B\u9264\u9251\u9234\u9249\u924D\u9245\u9239\u923F\u925A\u9598\u9698\u9694\u9695\u96CD\u96CB\u96C9\u96CA\u96F7\u96FB\u96F9\u96F6\u9756\u9774\u9776\u9810\u9811\u9813\u980A\u9812\u980C\u98FC\u98F4\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u98FD\u98FE\u99B3\u99B1\u99B4\u9AE1\u9CE9\u9E82\u9F0E\u9F13\u9F20\u50E7\u50EE\u50E5\u50D6\u50ED\u50DA\u50D5\u50CF\u50D1\u50F1\u50CE\u50E9\u5162\u51F3\u5283\u5282\u5331\u53AD\u55FE\u5600\u561B\u5617\u55FD\u5614\u5606\u5609\u560D\u560E\u55F7\u5616\u561F\u5608\u5610\u55F6\u5718\u5716\u5875\u587E\u5883\u5893\u588A\u5879\u5885\u587D\u58FD\u5925\u5922\u5924\u596A\u5969\u5AE1\u5AE6\u5AE9\u5AD7\u5AD6\u5AD8\u5AE3\u5B75\u5BDE\u5BE7\u5BE1\u5BE5\u5BE6\u5BE8\u5BE2\u5BE4\u5BDF\u5C0D\u5C62\u5D84\u5D87\u5E5B\u5E63\u5E55\u5E57\u5E54\u5ED3\u5ED6\u5F0A\u5F46\u5F70\u5FB9\u6147\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[185].length; ++j)
                if (D[185][j].charCodeAt(0) !== 65533) {
                    e2[D[185][j]] = 47360 + j;
                    d[47360 + j] = D[185][j];
                }
            D[186] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u613F\u614B\u6177\u6162\u6163\u615F\u615A\u6158\u6175\u622A\u6487\u6458\u6454\u64A4\u6478\u645F\u647A\u6451\u6467\u6434\u646D\u647B\u6572\u65A1\u65D7\u65D6\u66A2\u66A8\u669D\u699C\u69A8\u6995\u69C1\u69AE\u69D3\u69CB\u699B\u69B7\u69BB\u69AB\u69B4\u69D0\u69CD\u69AD\u69CC\u69A6\u69C3\u69A3\u6B49\u6B4C\u6C33\u6F33\u6F14\u6EFE\u6F13\u6EF4\u6F29\u6F3E\u6F20\u6F2C\u6F0F\u6F02\u6F22\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6EFF\u6EEF\u6F06\u6F31\u6F38\u6F32\u6F23\u6F15\u6F2B\u6F2F\u6F88\u6F2A\u6EEC\u6F01\u6EF2\u6ECC\u6EF7\u7194\u7199\u717D\u718A\u7184\u7192\u723E\u7292\u7296\u7344\u7350\u7464\u7463\u746A\u7470\u746D\u7504\u7591\u7627\u760D\u760B\u7609\u7613\u76E1\u76E3\u7784\u777D\u777F\u7761\u78C1\u789F\u78A7\u78B3\u78A9\u78A3\u798E\u798F\u798D\u7A2E\u7A31\u7AAA\u7AA9\u7AED\u7AEF\u7BA1\u7B95\u7B8B\u7B75\u7B97\u7B9D\u7B94\u7B8F\u7BB8\u7B87\u7B84\u7CB9\u7CBD\u7CBE\u7DBB\u7DB0\u7D9C\u7DBD\u7DBE\u7DA0\u7DCA\u7DB4\u7DB2\u7DB1\u7DBA\u7DA2\u7DBF\u7DB5\u7DB8\u7DAD\u7DD2\u7DC7\u7DAC\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[186].length; ++j)
                if (D[186][j].charCodeAt(0) !== 65533) {
                    e2[D[186][j]] = 47616 + j;
                    d[47616 + j] = D[186][j];
                }
            D[187] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7F70\u7FE0\u7FE1\u7FDF\u805E\u805A\u8087\u8150\u8180\u818F\u8188\u818A\u817F\u8182\u81E7\u81FA\u8207\u8214\u821E\u824B\u84C9\u84BF\u84C6\u84C4\u8499\u849E\u84B2\u849C\u84CB\u84B8\u84C0\u84D3\u8490\u84BC\u84D1\u84CA\u873F\u871C\u873B\u8722\u8725\u8734\u8718\u8755\u8737\u8729\u88F3\u8902\u88F4\u88F9\u88F8\u88FD\u88E8\u891A\u88EF\u8AA6\u8A8C\u8A9E\u8AA3\u8A8D\u8AA1\u8A93\u8AA4\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8AAA\u8AA5\u8AA8\u8A98\u8A91\u8A9A\u8AA7\u8C6A\u8C8D\u8C8C\u8CD3\u8CD1\u8CD2\u8D6B\u8D99\u8D95\u8DFC\u8F14\u8F12\u8F15\u8F13\u8FA3\u9060\u9058\u905C\u9063\u9059\u905E\u9062\u905D\u905B\u9119\u9118\u911E\u9175\u9178\u9177\u9174\u9278\u9280\u9285\u9298\u9296\u927B\u9293\u929C\u92A8\u927C\u9291\u95A1\u95A8\u95A9\u95A3\u95A5\u95A4\u9699\u969C\u969B\u96CC\u96D2\u9700\u977C\u9785\u97F6\u9817\u9818\u98AF\u98B1\u9903\u9905\u990C\u9909\u99C1\u9AAF\u9AB0\u9AE6\u9B41\u9B42\u9CF4\u9CF6\u9CF3\u9EBC\u9F3B\u9F4A\u5104\u5100\u50FB\u50F5\u50F9\u5102\u5108\u5109\u5105\u51DC\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[187].length; ++j)
                if (D[187][j].charCodeAt(0) !== 65533) {
                    e2[D[187][j]] = 47872 + j;
                    d[47872 + j] = D[187][j];
                }
            D[188] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5287\u5288\u5289\u528D\u528A\u52F0\u53B2\u562E\u563B\u5639\u5632\u563F\u5634\u5629\u5653\u564E\u5657\u5674\u5636\u562F\u5630\u5880\u589F\u589E\u58B3\u589C\u58AE\u58A9\u58A6\u596D\u5B09\u5AFB\u5B0B\u5AF5\u5B0C\u5B08\u5BEE\u5BEC\u5BE9\u5BEB\u5C64\u5C65\u5D9D\u5D94\u5E62\u5E5F\u5E61\u5EE2\u5EDA\u5EDF\u5EDD\u5EE3\u5EE0\u5F48\u5F71\u5FB7\u5FB5\u6176\u6167\u616E\u615D\u6155\u6182\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u617C\u6170\u616B\u617E\u61A7\u6190\u61AB\u618E\u61AC\u619A\u61A4\u6194\u61AE\u622E\u6469\u646F\u6479\u649E\u64B2\u6488\u6490\u64B0\u64A5\u6493\u6495\u64A9\u6492\u64AE\u64AD\u64AB\u649A\u64AC\u6499\u64A2\u64B3\u6575\u6577\u6578\u66AE\u66AB\u66B4\u66B1\u6A23\u6A1F\u69E8\u6A01\u6A1E\u6A19\u69FD\u6A21\u6A13\u6A0A\u69F3\u6A02\u6A05\u69ED\u6A11\u6B50\u6B4E\u6BA4\u6BC5\u6BC6\u6F3F\u6F7C\u6F84\u6F51\u6F66\u6F54\u6F86\u6F6D\u6F5B\u6F78\u6F6E\u6F8E\u6F7A\u6F70\u6F64\u6F97\u6F58\u6ED5\u6F6F\u6F60\u6F5F\u719F\u71AC\u71B1\u71A8\u7256\u729B\u734E\u7357\u7469\u748B\u7483\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[188].length; ++j)
                if (D[188][j].charCodeAt(0) !== 65533) {
                    e2[D[188][j]] = 48128 + j;
                    d[48128 + j] = D[188][j];
                }
            D[189] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u747E\u7480\u757F\u7620\u7629\u761F\u7624\u7626\u7621\u7622\u769A\u76BA\u76E4\u778E\u7787\u778C\u7791\u778B\u78CB\u78C5\u78BA\u78CA\u78BE\u78D5\u78BC\u78D0\u7A3F\u7A3C\u7A40\u7A3D\u7A37\u7A3B\u7AAF\u7AAE\u7BAD\u7BB1\u7BC4\u7BB4\u7BC6\u7BC7\u7BC1\u7BA0\u7BCC\u7CCA\u7DE0\u7DF4\u7DEF\u7DFB\u7DD8\u7DEC\u7DDD\u7DE8\u7DE3\u7DDA\u7DDE\u7DE9\u7D9E\u7DD9\u7DF2\u7DF9\u7F75\u7F77\u7FAF\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7FE9\u8026\u819B\u819C\u819D\u81A0\u819A\u8198\u8517\u853D\u851A\u84EE\u852C\u852D\u8513\u8511\u8523\u8521\u8514\u84EC\u8525\u84FF\u8506\u8782\u8774\u8776\u8760\u8766\u8778\u8768\u8759\u8757\u874C\u8753\u885B\u885D\u8910\u8907\u8912\u8913\u8915\u890A\u8ABC\u8AD2\u8AC7\u8AC4\u8A95\u8ACB\u8AF8\u8AB2\u8AC9\u8AC2\u8ABF\u8AB0\u8AD6\u8ACD\u8AB6\u8AB9\u8ADB\u8C4C\u8C4E\u8C6C\u8CE0\u8CDE\u8CE6\u8CE4\u8CEC\u8CED\u8CE2\u8CE3\u8CDC\u8CEA\u8CE1\u8D6D\u8D9F\u8DA3\u8E2B\u8E10\u8E1D\u8E22\u8E0F\u8E29\u8E1F\u8E21\u8E1E\u8EBA\u8F1D\u8F1B\u8F1F\u8F29\u8F26\u8F2A\u8F1C\u8F1E\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[189].length; ++j)
                if (D[189][j].charCodeAt(0) !== 65533) {
                    e2[D[189][j]] = 48384 + j;
                    d[48384 + j] = D[189][j];
                }
            D[190] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8F25\u9069\u906E\u9068\u906D\u9077\u9130\u912D\u9127\u9131\u9187\u9189\u918B\u9183\u92C5\u92BB\u92B7\u92EA\u92AC\u92E4\u92C1\u92B3\u92BC\u92D2\u92C7\u92F0\u92B2\u95AD\u95B1\u9704\u9706\u9707\u9709\u9760\u978D\u978B\u978F\u9821\u982B\u981C\u98B3\u990A\u9913\u9912\u9918\u99DD\u99D0\u99DF\u99DB\u99D1\u99D5\u99D2\u99D9\u9AB7\u9AEE\u9AEF\u9B27\u9B45\u9B44\u9B77\u9B6F\u9D06\u9D09\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9D03\u9EA9\u9EBE\u9ECE\u58A8\u9F52\u5112\u5118\u5114\u5110\u5115\u5180\u51AA\u51DD\u5291\u5293\u52F3\u5659\u566B\u5679\u5669\u5664\u5678\u566A\u5668\u5665\u5671\u566F\u566C\u5662\u5676\u58C1\u58BE\u58C7\u58C5\u596E\u5B1D\u5B34\u5B78\u5BF0\u5C0E\u5F4A\u61B2\u6191\u61A9\u618A\u61CD\u61B6\u61BE\u61CA\u61C8\u6230\u64C5\u64C1\u64CB\u64BB\u64BC\u64DA\u64C4\u64C7\u64C2\u64CD\u64BF\u64D2\u64D4\u64BE\u6574\u66C6\u66C9\u66B9\u66C4\u66C7\u66B8\u6A3D\u6A38\u6A3A\u6A59\u6A6B\u6A58\u6A39\u6A44\u6A62\u6A61\u6A4B\u6A47\u6A35\u6A5F\u6A48\u6B59\u6B77\u6C05\u6FC2\u6FB1\u6FA1\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[190].length; ++j)
                if (D[190][j].charCodeAt(0) !== 65533) {
                    e2[D[190][j]] = 48640 + j;
                    d[48640 + j] = D[190][j];
                }
            D[191] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6FC3\u6FA4\u6FC1\u6FA7\u6FB3\u6FC0\u6FB9\u6FB6\u6FA6\u6FA0\u6FB4\u71BE\u71C9\u71D0\u71D2\u71C8\u71D5\u71B9\u71CE\u71D9\u71DC\u71C3\u71C4\u7368\u749C\u74A3\u7498\u749F\u749E\u74E2\u750C\u750D\u7634\u7638\u763A\u76E7\u76E5\u77A0\u779E\u779F\u77A5\u78E8\u78DA\u78EC\u78E7\u79A6\u7A4D\u7A4E\u7A46\u7A4C\u7A4B\u7ABA\u7BD9\u7C11\u7BC9\u7BE4\u7BDB\u7BE1\u7BE9\u7BE6\u7CD5\u7CD6\u7E0A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7E11\u7E08\u7E1B\u7E23\u7E1E\u7E1D\u7E09\u7E10\u7F79\u7FB2\u7FF0\u7FF1\u7FEE\u8028\u81B3\u81A9\u81A8\u81FB\u8208\u8258\u8259\u854A\u8559\u8548\u8568\u8569\u8543\u8549\u856D\u856A\u855E\u8783\u879F\u879E\u87A2\u878D\u8861\u892A\u8932\u8925\u892B\u8921\u89AA\u89A6\u8AE6\u8AFA\u8AEB\u8AF1\u8B00\u8ADC\u8AE7\u8AEE\u8AFE\u8B01\u8B02\u8AF7\u8AED\u8AF3\u8AF6\u8AFC\u8C6B\u8C6D\u8C93\u8CF4\u8E44\u8E31\u8E34\u8E42\u8E39\u8E35\u8F3B\u8F2F\u8F38\u8F33\u8FA8\u8FA6\u9075\u9074\u9078\u9072\u907C\u907A\u9134\u9192\u9320\u9336\u92F8\u9333\u932F\u9322\u92FC\u932B\u9304\u931A\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[191].length; ++j)
                if (D[191][j].charCodeAt(0) !== 65533) {
                    e2[D[191][j]] = 48896 + j;
                    d[48896 + j] = D[191][j];
                }
            D[192] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9310\u9326\u9321\u9315\u932E\u9319\u95BB\u96A7\u96A8\u96AA\u96D5\u970E\u9711\u9716\u970D\u9713\u970F\u975B\u975C\u9766\u9798\u9830\u9838\u983B\u9837\u982D\u9839\u9824\u9910\u9928\u991E\u991B\u9921\u991A\u99ED\u99E2\u99F1\u9AB8\u9ABC\u9AFB\u9AED\u9B28\u9B91\u9D15\u9D23\u9D26\u9D28\u9D12\u9D1B\u9ED8\u9ED4\u9F8D\u9F9C\u512A\u511F\u5121\u5132\u52F5\u568E\u5680\u5690\u5685\u5687\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u568F\u58D5\u58D3\u58D1\u58CE\u5B30\u5B2A\u5B24\u5B7A\u5C37\u5C68\u5DBC\u5DBA\u5DBD\u5DB8\u5E6B\u5F4C\u5FBD\u61C9\u61C2\u61C7\u61E6\u61CB\u6232\u6234\u64CE\u64CA\u64D8\u64E0\u64F0\u64E6\u64EC\u64F1\u64E2\u64ED\u6582\u6583\u66D9\u66D6\u6A80\u6A94\u6A84\u6AA2\u6A9C\u6ADB\u6AA3\u6A7E\u6A97\u6A90\u6AA0\u6B5C\u6BAE\u6BDA\u6C08\u6FD8\u6FF1\u6FDF\u6FE0\u6FDB\u6FE4\u6FEB\u6FEF\u6F80\u6FEC\u6FE1\u6FE9\u6FD5\u6FEE\u6FF0\u71E7\u71DF\u71EE\u71E6\u71E5\u71ED\u71EC\u71F4\u71E0\u7235\u7246\u7370\u7372\u74A9\u74B0\u74A6\u74A8\u7646\u7642\u764C\u76EA\u77B3\u77AA\u77B0\u77AC\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[192].length; ++j)
                if (D[192][j].charCodeAt(0) !== 65533) {
                    e2[D[192][j]] = 49152 + j;
                    d[49152 + j] = D[192][j];
                }
            D[193] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u77A7\u77AD\u77EF\u78F7\u78FA\u78F4\u78EF\u7901\u79A7\u79AA\u7A57\u7ABF\u7C07\u7C0D\u7BFE\u7BF7\u7C0C\u7BE0\u7CE0\u7CDC\u7CDE\u7CE2\u7CDF\u7CD9\u7CDD\u7E2E\u7E3E\u7E46\u7E37\u7E32\u7E43\u7E2B\u7E3D\u7E31\u7E45\u7E41\u7E34\u7E39\u7E48\u7E35\u7E3F\u7E2F\u7F44\u7FF3\u7FFC\u8071\u8072\u8070\u806F\u8073\u81C6\u81C3\u81BA\u81C2\u81C0\u81BF\u81BD\u81C9\u81BE\u81E8\u8209\u8271\u85AA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8584\u857E\u859C\u8591\u8594\u85AF\u859B\u8587\u85A8\u858A\u8667\u87C0\u87D1\u87B3\u87D2\u87C6\u87AB\u87BB\u87BA\u87C8\u87CB\u893B\u8936\u8944\u8938\u893D\u89AC\u8B0E\u8B17\u8B19\u8B1B\u8B0A\u8B20\u8B1D\u8B04\u8B10\u8C41\u8C3F\u8C73\u8CFA\u8CFD\u8CFC\u8CF8\u8CFB\u8DA8\u8E49\u8E4B\u8E48\u8E4A\u8F44\u8F3E\u8F42\u8F45\u8F3F\u907F\u907D\u9084\u9081\u9082\u9080\u9139\u91A3\u919E\u919C\u934D\u9382\u9328\u9375\u934A\u9365\u934B\u9318\u937E\u936C\u935B\u9370\u935A\u9354\u95CA\u95CB\u95CC\u95C8\u95C6\u96B1\u96B8\u96D6\u971C\u971E\u97A0\u97D3\u9846\u98B6\u9935\u9A01\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[193].length; ++j)
                if (D[193][j].charCodeAt(0) !== 65533) {
                    e2[D[193][j]] = 49408 + j;
                    d[49408 + j] = D[193][j];
                }
            D[194] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u99FF\u9BAE\u9BAB\u9BAA\u9BAD\u9D3B\u9D3F\u9E8B\u9ECF\u9EDE\u9EDC\u9EDD\u9EDB\u9F3E\u9F4B\u53E2\u5695\u56AE\u58D9\u58D8\u5B38\u5F5D\u61E3\u6233\u64F4\u64F2\u64FE\u6506\u64FA\u64FB\u64F7\u65B7\u66DC\u6726\u6AB3\u6AAC\u6AC3\u6ABB\u6AB8\u6AC2\u6AAE\u6AAF\u6B5F\u6B78\u6BAF\u7009\u700B\u6FFE\u7006\u6FFA\u7011\u700F\u71FB\u71FC\u71FE\u71F8\u7377\u7375\u74A7\u74BF\u7515\u7656\u7658\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7652\u77BD\u77BF\u77BB\u77BC\u790E\u79AE\u7A61\u7A62\u7A60\u7AC4\u7AC5\u7C2B\u7C27\u7C2A\u7C1E\u7C23\u7C21\u7CE7\u7E54\u7E55\u7E5E\u7E5A\u7E61\u7E52\u7E59\u7F48\u7FF9\u7FFB\u8077\u8076\u81CD\u81CF\u820A\u85CF\u85A9\u85CD\u85D0\u85C9\u85B0\u85BA\u85B9\u85A6\u87EF\u87EC\u87F2\u87E0\u8986\u89B2\u89F4\u8B28\u8B39\u8B2C\u8B2B\u8C50\u8D05\u8E59\u8E63\u8E66\u8E64\u8E5F\u8E55\u8EC0\u8F49\u8F4D\u9087\u9083\u9088\u91AB\u91AC\u91D0\u9394\u938A\u9396\u93A2\u93B3\u93AE\u93AC\u93B0\u9398\u939A\u9397\u95D4\u95D6\u95D0\u95D5\u96E2\u96DC\u96D9\u96DB\u96DE\u9724\u97A3\u97A6\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[194].length; ++j)
                if (D[194][j].charCodeAt(0) !== 65533) {
                    e2[D[194][j]] = 49664 + j;
                    d[49664 + j] = D[194][j];
                }
            D[195] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u97AD\u97F9\u984D\u984F\u984C\u984E\u9853\u98BA\u993E\u993F\u993D\u992E\u99A5\u9A0E\u9AC1\u9B03\u9B06\u9B4F\u9B4E\u9B4D\u9BCA\u9BC9\u9BFD\u9BC8\u9BC0\u9D51\u9D5D\u9D60\u9EE0\u9F15\u9F2C\u5133\u56A5\u58DE\u58DF\u58E2\u5BF5\u9F90\u5EEC\u61F2\u61F7\u61F6\u61F5\u6500\u650F\u66E0\u66DD\u6AE5\u6ADD\u6ADA\u6AD3\u701B\u701F\u7028\u701A\u701D\u7015\u7018\u7206\u720D\u7258\u72A2\u7378\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u737A\u74BD\u74CA\u74E3\u7587\u7586\u765F\u7661\u77C7\u7919\u79B1\u7A6B\u7A69\u7C3E\u7C3F\u7C38\u7C3D\u7C37\u7C40\u7E6B\u7E6D\u7E79\u7E69\u7E6A\u7F85\u7E73\u7FB6\u7FB9\u7FB8\u81D8\u85E9\u85DD\u85EA\u85D5\u85E4\u85E5\u85F7\u87FB\u8805\u880D\u87F9\u87FE\u8960\u895F\u8956\u895E\u8B41\u8B5C\u8B58\u8B49\u8B5A\u8B4E\u8B4F\u8B46\u8B59\u8D08\u8D0A\u8E7C\u8E72\u8E87\u8E76\u8E6C\u8E7A\u8E74\u8F54\u8F4E\u8FAD\u908A\u908B\u91B1\u91AE\u93E1\u93D1\u93DF\u93C3\u93C8\u93DC\u93DD\u93D6\u93E2\u93CD\u93D8\u93E4\u93D7\u93E8\u95DC\u96B4\u96E3\u972A\u9727\u9761\u97DC\u97FB\u985E\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[195].length; ++j)
                if (D[195][j].charCodeAt(0) !== 65533) {
                    e2[D[195][j]] = 49920 + j;
                    d[49920 + j] = D[195][j];
                }
            D[196] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9858\u985B\u98BC\u9945\u9949\u9A16\u9A19\u9B0D\u9BE8\u9BE7\u9BD6\u9BDB\u9D89\u9D61\u9D72\u9D6A\u9D6C\u9E92\u9E97\u9E93\u9EB4\u52F8\u56A8\u56B7\u56B6\u56B4\u56BC\u58E4\u5B40\u5B43\u5B7D\u5BF6\u5DC9\u61F8\u61FA\u6518\u6514\u6519\u66E6\u6727\u6AEC\u703E\u7030\u7032\u7210\u737B\u74CF\u7662\u7665\u7926\u792A\u792C\u792B\u7AC7\u7AF6\u7C4C\u7C43\u7C4D\u7CEF\u7CF0\u8FAE\u7E7D\u7E7C\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7E82\u7F4C\u8000\u81DA\u8266\u85FB\u85F9\u8611\u85FA\u8606\u860B\u8607\u860A\u8814\u8815\u8964\u89BA\u89F8\u8B70\u8B6C\u8B66\u8B6F\u8B5F\u8B6B\u8D0F\u8D0D\u8E89\u8E81\u8E85\u8E82\u91B4\u91CB\u9418\u9403\u93FD\u95E1\u9730\u98C4\u9952\u9951\u99A8\u9A2B\u9A30\u9A37\u9A35\u9C13\u9C0D\u9E79\u9EB5\u9EE8\u9F2F\u9F5F\u9F63\u9F61\u5137\u5138\u56C1\u56C0\u56C2\u5914\u5C6C\u5DCD\u61FC\u61FE\u651D\u651C\u6595\u66E9\u6AFB\u6B04\u6AFA\u6BB2\u704C\u721B\u72A7\u74D6\u74D4\u7669\u77D3\u7C50\u7E8F\u7E8C\u7FBC\u8617\u862D\u861A\u8823\u8822\u8821\u881F\u896A\u896C\u89BD\u8B74\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[196].length; ++j)
                if (D[196][j].charCodeAt(0) !== 65533) {
                    e2[D[196][j]] = 50176 + j;
                    d[50176 + j] = D[196][j];
                }
            D[197] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8B77\u8B7D\u8D13\u8E8A\u8E8D\u8E8B\u8F5F\u8FAF\u91BA\u942E\u9433\u9435\u943A\u9438\u9432\u942B\u95E2\u9738\u9739\u9732\u97FF\u9867\u9865\u9957\u9A45\u9A43\u9A40\u9A3E\u9ACF\u9B54\u9B51\u9C2D\u9C25\u9DAF\u9DB4\u9DC2\u9DB8\u9E9D\u9EEF\u9F19\u9F5C\u9F66\u9F67\u513C\u513B\u56C8\u56CA\u56C9\u5B7F\u5DD4\u5DD2\u5F4E\u61FF\u6524\u6B0A\u6B61\u7051\u7058\u7380\u74E4\u758A\u766E\u766C\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u79B3\u7C60\u7C5F\u807E\u807D\u81DF\u8972\u896F\u89FC\u8B80\u8D16\u8D17\u8E91\u8E93\u8F61\u9148\u9444\u9451\u9452\u973D\u973E\u97C3\u97C1\u986B\u9955\u9A55\u9A4D\u9AD2\u9B1A\u9C49\u9C31\u9C3E\u9C3B\u9DD3\u9DD7\u9F34\u9F6C\u9F6A\u9F94\u56CC\u5DD6\u6200\u6523\u652B\u652A\u66EC\u6B10\u74DA\u7ACA\u7C64\u7C63\u7C65\u7E93\u7E96\u7E94\u81E2\u8638\u863F\u8831\u8B8A\u9090\u908F\u9463\u9460\u9464\u9768\u986F\u995C\u9A5A\u9A5B\u9A57\u9AD3\u9AD4\u9AD1\u9C54\u9C57\u9C56\u9DE5\u9E9F\u9EF4\u56D1\u58E9\u652C\u705E\u7671\u7672\u77D7\u7F50\u7F88\u8836\u8839\u8862\u8B93\u8B92\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[197].length; ++j)
                if (D[197][j].charCodeAt(0) !== 65533) {
                    e2[D[197][j]] = 50432 + j;
                    d[50432 + j] = D[197][j];
                }
            D[198] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8B96\u8277\u8D1B\u91C0\u946A\u9742\u9748\u9744\u97C6\u9870\u9A5F\u9B22\u9B58\u9C5F\u9DF9\u9DFA\u9E7C\u9E7D\u9F07\u9F77\u9F72\u5EF3\u6B16\u7063\u7C6C\u7C6E\u883B\u89C0\u8EA1\u91C1\u9472\u9470\u9871\u995E\u9AD6\u9B23\u9ECC\u7064\u77DA\u8B9A\u9477\u97C9\u9A62\u9A65\u7E9C\u8B9C\u8EAA\u91C5\u947D\u947E\u947C\u9C77\u9C78\u9EF7\u8C54\u947F\u9E1A\u7228\u9A6A\u9B31\u9E1B\u9E1E\u7C72\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[198].length; ++j)
                if (D[198][j].charCodeAt(0) !== 65533) {
                    e2[D[198][j]] = 50688 + j;
                    d[50688 + j] = D[198][j];
                }
            D[201] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4E42\u4E5C\u51F5\u531A\u5382\u4E07\u4E0C\u4E47\u4E8D\u56D7\uFA0C\u5C6E\u5F73\u4E0F\u5187\u4E0E\u4E2E\u4E93\u4EC2\u4EC9\u4EC8\u5198\u52FC\u536C\u53B9\u5720\u5903\u592C\u5C10\u5DFF\u65E1\u6BB3\u6BCC\u6C14\u723F\u4E31\u4E3C\u4EE8\u4EDC\u4EE9\u4EE1\u4EDD\u4EDA\u520C\u531C\u534C\u5722\u5723\u5917\u592F\u5B81\u5B84\u5C12\u5C3B\u5C74\u5C73\u5E04\u5E80\u5E82\u5FC9\u6209\u6250\u6C15\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6C36\u6C43\u6C3F\u6C3B\u72AE\u72B0\u738A\u79B8\u808A\u961E\u4F0E\u4F18\u4F2C\u4EF5\u4F14\u4EF1\u4F00\u4EF7\u4F08\u4F1D\u4F02\u4F05\u4F22\u4F13\u4F04\u4EF4\u4F12\u51B1\u5213\u5209\u5210\u52A6\u5322\u531F\u534D\u538A\u5407\u56E1\u56DF\u572E\u572A\u5734\u593C\u5980\u597C\u5985\u597B\u597E\u5977\u597F\u5B56\u5C15\u5C25\u5C7C\u5C7A\u5C7B\u5C7E\u5DDF\u5E75\u5E84\u5F02\u5F1A\u5F74\u5FD5\u5FD4\u5FCF\u625C\u625E\u6264\u6261\u6266\u6262\u6259\u6260\u625A\u6265\u65EF\u65EE\u673E\u6739\u6738\u673B\u673A\u673F\u673C\u6733\u6C18\u6C46\u6C52\u6C5C\u6C4F\u6C4A\u6C54\u6C4B\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[201].length; ++j)
                if (D[201][j].charCodeAt(0) !== 65533) {
                    e2[D[201][j]] = 51456 + j;
                    d[51456 + j] = D[201][j];
                }
            D[202] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6C4C\u7071\u725E\u72B4\u72B5\u738E\u752A\u767F\u7A75\u7F51\u8278\u827C\u8280\u827D\u827F\u864D\u897E\u9099\u9097\u9098\u909B\u9094\u9622\u9624\u9620\u9623\u4F56\u4F3B\u4F62\u4F49\u4F53\u4F64\u4F3E\u4F67\u4F52\u4F5F\u4F41\u4F58\u4F2D\u4F33\u4F3F\u4F61\u518F\u51B9\u521C\u521E\u5221\u52AD\u52AE\u5309\u5363\u5372\u538E\u538F\u5430\u5437\u542A\u5454\u5445\u5419\u541C\u5425\u5418\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u543D\u544F\u5441\u5428\u5424\u5447\u56EE\u56E7\u56E5\u5741\u5745\u574C\u5749\u574B\u5752\u5906\u5940\u59A6\u5998\u59A0\u5997\u598E\u59A2\u5990\u598F\u59A7\u59A1\u5B8E\u5B92\u5C28\u5C2A\u5C8D\u5C8F\u5C88\u5C8B\u5C89\u5C92\u5C8A\u5C86\u5C93\u5C95\u5DE0\u5E0A\u5E0E\u5E8B\u5E89\u5E8C\u5E88\u5E8D\u5F05\u5F1D\u5F78\u5F76\u5FD2\u5FD1\u5FD0\u5FED\u5FE8\u5FEE\u5FF3\u5FE1\u5FE4\u5FE3\u5FFA\u5FEF\u5FF7\u5FFB\u6000\u5FF4\u623A\u6283\u628C\u628E\u628F\u6294\u6287\u6271\u627B\u627A\u6270\u6281\u6288\u6277\u627D\u6272\u6274\u6537\u65F0\u65F4\u65F3\u65F2\u65F5\u6745\u6747\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[202].length; ++j)
                if (D[202][j].charCodeAt(0) !== 65533) {
                    e2[D[202][j]] = 51712 + j;
                    d[51712 + j] = D[202][j];
                }
            D[203] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6759\u6755\u674C\u6748\u675D\u674D\u675A\u674B\u6BD0\u6C19\u6C1A\u6C78\u6C67\u6C6B\u6C84\u6C8B\u6C8F\u6C71\u6C6F\u6C69\u6C9A\u6C6D\u6C87\u6C95\u6C9C\u6C66\u6C73\u6C65\u6C7B\u6C8E\u7074\u707A\u7263\u72BF\u72BD\u72C3\u72C6\u72C1\u72BA\u72C5\u7395\u7397\u7393\u7394\u7392\u753A\u7539\u7594\u7595\u7681\u793D\u8034\u8095\u8099\u8090\u8092\u809C\u8290\u828F\u8285\u828E\u8291\u8293\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u828A\u8283\u8284\u8C78\u8FC9\u8FBF\u909F\u90A1\u90A5\u909E\u90A7\u90A0\u9630\u9628\u962F\u962D\u4E33\u4F98\u4F7C\u4F85\u4F7D\u4F80\u4F87\u4F76\u4F74\u4F89\u4F84\u4F77\u4F4C\u4F97\u4F6A\u4F9A\u4F79\u4F81\u4F78\u4F90\u4F9C\u4F94\u4F9E\u4F92\u4F82\u4F95\u4F6B\u4F6E\u519E\u51BC\u51BE\u5235\u5232\u5233\u5246\u5231\u52BC\u530A\u530B\u533C\u5392\u5394\u5487\u547F\u5481\u5491\u5482\u5488\u546B\u547A\u547E\u5465\u546C\u5474\u5466\u548D\u546F\u5461\u5460\u5498\u5463\u5467\u5464\u56F7\u56F9\u576F\u5772\u576D\u576B\u5771\u5770\u5776\u5780\u5775\u577B\u5773\u5774\u5762\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[203].length; ++j)
                if (D[203][j].charCodeAt(0) !== 65533) {
                    e2[D[203][j]] = 51968 + j;
                    d[51968 + j] = D[203][j];
                }
            D[204] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5768\u577D\u590C\u5945\u59B5\u59BA\u59CF\u59CE\u59B2\u59CC\u59C1\u59B6\u59BC\u59C3\u59D6\u59B1\u59BD\u59C0\u59C8\u59B4\u59C7\u5B62\u5B65\u5B93\u5B95\u5C44\u5C47\u5CAE\u5CA4\u5CA0\u5CB5\u5CAF\u5CA8\u5CAC\u5C9F\u5CA3\u5CAD\u5CA2\u5CAA\u5CA7\u5C9D\u5CA5\u5CB6\u5CB0\u5CA6\u5E17\u5E14\u5E19\u5F28\u5F22\u5F23\u5F24\u5F54\u5F82\u5F7E\u5F7D\u5FDE\u5FE5\u602D\u6026\u6019\u6032\u600B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6034\u600A\u6017\u6033\u601A\u601E\u602C\u6022\u600D\u6010\u602E\u6013\u6011\u600C\u6009\u601C\u6214\u623D\u62AD\u62B4\u62D1\u62BE\u62AA\u62B6\u62CA\u62AE\u62B3\u62AF\u62BB\u62A9\u62B0\u62B8\u653D\u65A8\u65BB\u6609\u65FC\u6604\u6612\u6608\u65FB\u6603\u660B\u660D\u6605\u65FD\u6611\u6610\u66F6\u670A\u6785\u676C\u678E\u6792\u6776\u677B\u6798\u6786\u6784\u6774\u678D\u678C\u677A\u679F\u6791\u6799\u6783\u677D\u6781\u6778\u6779\u6794\u6B25\u6B80\u6B7E\u6BDE\u6C1D\u6C93\u6CEC\u6CEB\u6CEE\u6CD9\u6CB6\u6CD4\u6CAD\u6CE7\u6CB7\u6CD0\u6CC2\u6CBA\u6CC3\u6CC6\u6CED\u6CF2\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[204].length; ++j)
                if (D[204][j].charCodeAt(0) !== 65533) {
                    e2[D[204][j]] = 52224 + j;
                    d[52224 + j] = D[204][j];
                }
            D[205] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6CD2\u6CDD\u6CB4\u6C8A\u6C9D\u6C80\u6CDE\u6CC0\u6D30\u6CCD\u6CC7\u6CB0\u6CF9\u6CCF\u6CE9\u6CD1\u7094\u7098\u7085\u7093\u7086\u7084\u7091\u7096\u7082\u709A\u7083\u726A\u72D6\u72CB\u72D8\u72C9\u72DC\u72D2\u72D4\u72DA\u72CC\u72D1\u73A4\u73A1\u73AD\u73A6\u73A2\u73A0\u73AC\u739D\u74DD\u74E8\u753F\u7540\u753E\u758C\u7598\u76AF\u76F3\u76F1\u76F0\u76F5\u77F8\u77FC\u77F9\u77FB\u77FA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u77F7\u7942\u793F\u79C5\u7A78\u7A7B\u7AFB\u7C75\u7CFD\u8035\u808F\u80AE\u80A3\u80B8\u80B5\u80AD\u8220\u82A0\u82C0\u82AB\u829A\u8298\u829B\u82B5\u82A7\u82AE\u82BC\u829E\u82BA\u82B4\u82A8\u82A1\u82A9\u82C2\u82A4\u82C3\u82B6\u82A2\u8670\u866F\u866D\u866E\u8C56\u8FD2\u8FCB\u8FD3\u8FCD\u8FD6\u8FD5\u8FD7\u90B2\u90B4\u90AF\u90B3\u90B0\u9639\u963D\u963C\u963A\u9643\u4FCD\u4FC5\u4FD3\u4FB2\u4FC9\u4FCB\u4FC1\u4FD4\u4FDC\u4FD9\u4FBB\u4FB3\u4FDB\u4FC7\u4FD6\u4FBA\u4FC0\u4FB9\u4FEC\u5244\u5249\u52C0\u52C2\u533D\u537C\u5397\u5396\u5399\u5398\u54BA\u54A1\u54AD\u54A5\u54CF\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[205].length; ++j)
                if (D[205][j].charCodeAt(0) !== 65533) {
                    e2[D[205][j]] = 52480 + j;
                    d[52480 + j] = D[205][j];
                }
            D[206] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u54C3\u830D\u54B7\u54AE\u54D6\u54B6\u54C5\u54C6\u54A0\u5470\u54BC\u54A2\u54BE\u5472\u54DE\u54B0\u57B5\u579E\u579F\u57A4\u578C\u5797\u579D\u579B\u5794\u5798\u578F\u5799\u57A5\u579A\u5795\u58F4\u590D\u5953\u59E1\u59DE\u59EE\u5A00\u59F1\u59DD\u59FA\u59FD\u59FC\u59F6\u59E4\u59F2\u59F7\u59DB\u59E9\u59F3\u59F5\u59E0\u59FE\u59F4\u59ED\u5BA8\u5C4C\u5CD0\u5CD8\u5CCC\u5CD7\u5CCB\u5CDB\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5CDE\u5CDA\u5CC9\u5CC7\u5CCA\u5CD6\u5CD3\u5CD4\u5CCF\u5CC8\u5CC6\u5CCE\u5CDF\u5CF8\u5DF9\u5E21\u5E22\u5E23\u5E20\u5E24\u5EB0\u5EA4\u5EA2\u5E9B\u5EA3\u5EA5\u5F07\u5F2E\u5F56\u5F86\u6037\u6039\u6054\u6072\u605E\u6045\u6053\u6047\u6049\u605B\u604C\u6040\u6042\u605F\u6024\u6044\u6058\u6066\u606E\u6242\u6243\u62CF\u630D\u630B\u62F5\u630E\u6303\u62EB\u62F9\u630F\u630C\u62F8\u62F6\u6300\u6313\u6314\u62FA\u6315\u62FB\u62F0\u6541\u6543\u65AA\u65BF\u6636\u6621\u6632\u6635\u661C\u6626\u6622\u6633\u662B\u663A\u661D\u6634\u6639\u662E\u670F\u6710\u67C1\u67F2\u67C8\u67BA\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[206].length; ++j)
                if (D[206][j].charCodeAt(0) !== 65533) {
                    e2[D[206][j]] = 52736 + j;
                    d[52736 + j] = D[206][j];
                }
            D[207] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u67DC\u67BB\u67F8\u67D8\u67C0\u67B7\u67C5\u67EB\u67E4\u67DF\u67B5\u67CD\u67B3\u67F7\u67F6\u67EE\u67E3\u67C2\u67B9\u67CE\u67E7\u67F0\u67B2\u67FC\u67C6\u67ED\u67CC\u67AE\u67E6\u67DB\u67FA\u67C9\u67CA\u67C3\u67EA\u67CB\u6B28\u6B82\u6B84\u6BB6\u6BD6\u6BD8\u6BE0\u6C20\u6C21\u6D28\u6D34\u6D2D\u6D1F\u6D3C\u6D3F\u6D12\u6D0A\u6CDA\u6D33\u6D04\u6D19\u6D3A\u6D1A\u6D11\u6D00\u6D1D\u6D42\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6D01\u6D18\u6D37\u6D03\u6D0F\u6D40\u6D07\u6D20\u6D2C\u6D08\u6D22\u6D09\u6D10\u70B7\u709F\u70BE\u70B1\u70B0\u70A1\u70B4\u70B5\u70A9\u7241\u7249\u724A\u726C\u7270\u7273\u726E\u72CA\u72E4\u72E8\u72EB\u72DF\u72EA\u72E6\u72E3\u7385\u73CC\u73C2\u73C8\u73C5\u73B9\u73B6\u73B5\u73B4\u73EB\u73BF\u73C7\u73BE\u73C3\u73C6\u73B8\u73CB\u74EC\u74EE\u752E\u7547\u7548\u75A7\u75AA\u7679\u76C4\u7708\u7703\u7704\u7705\u770A\u76F7\u76FB\u76FA\u77E7\u77E8\u7806\u7811\u7812\u7805\u7810\u780F\u780E\u7809\u7803\u7813\u794A\u794C\u794B\u7945\u7944\u79D5\u79CD\u79CF\u79D6\u79CE\u7A80\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[207].length; ++j)
                if (D[207][j].charCodeAt(0) !== 65533) {
                    e2[D[207][j]] = 52992 + j;
                    d[52992 + j] = D[207][j];
                }
            D[208] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7A7E\u7AD1\u7B00\u7B01\u7C7A\u7C78\u7C79\u7C7F\u7C80\u7C81\u7D03\u7D08\u7D01\u7F58\u7F91\u7F8D\u7FBE\u8007\u800E\u800F\u8014\u8037\u80D8\u80C7\u80E0\u80D1\u80C8\u80C2\u80D0\u80C5\u80E3\u80D9\u80DC\u80CA\u80D5\u80C9\u80CF\u80D7\u80E6\u80CD\u81FF\u8221\u8294\u82D9\u82FE\u82F9\u8307\u82E8\u8300\u82D5\u833A\u82EB\u82D6\u82F4\u82EC\u82E1\u82F2\u82F5\u830C\u82FB\u82F6\u82F0\u82EA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u82E4\u82E0\u82FA\u82F3\u82ED\u8677\u8674\u867C\u8673\u8841\u884E\u8867\u886A\u8869\u89D3\u8A04\u8A07\u8D72\u8FE3\u8FE1\u8FEE\u8FE0\u90F1\u90BD\u90BF\u90D5\u90C5\u90BE\u90C7\u90CB\u90C8\u91D4\u91D3\u9654\u964F\u9651\u9653\u964A\u964E\u501E\u5005\u5007\u5013\u5022\u5030\u501B\u4FF5\u4FF4\u5033\u5037\u502C\u4FF6\u4FF7\u5017\u501C\u5020\u5027\u5035\u502F\u5031\u500E\u515A\u5194\u5193\u51CA\u51C4\u51C5\u51C8\u51CE\u5261\u525A\u5252\u525E\u525F\u5255\u5262\u52CD\u530E\u539E\u5526\u54E2\u5517\u5512\u54E7\u54F3\u54E4\u551A\u54FF\u5504\u5508\u54EB\u5511\u5505\u54F1\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[208].length; ++j)
                if (D[208][j].charCodeAt(0) !== 65533) {
                    e2[D[208][j]] = 53248 + j;
                    d[53248 + j] = D[208][j];
                }
            D[209] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u550A\u54FB\u54F7\u54F8\u54E0\u550E\u5503\u550B\u5701\u5702\u57CC\u5832\u57D5\u57D2\u57BA\u57C6\u57BD\u57BC\u57B8\u57B6\u57BF\u57C7\u57D0\u57B9\u57C1\u590E\u594A\u5A19\u5A16\u5A2D\u5A2E\u5A15\u5A0F\u5A17\u5A0A\u5A1E\u5A33\u5B6C\u5BA7\u5BAD\u5BAC\u5C03\u5C56\u5C54\u5CEC\u5CFF\u5CEE\u5CF1\u5CF7\u5D00\u5CF9\u5E29\u5E28\u5EA8\u5EAE\u5EAA\u5EAC\u5F33\u5F30\u5F67\u605D\u605A\u6067\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6041\u60A2\u6088\u6080\u6092\u6081\u609D\u6083\u6095\u609B\u6097\u6087\u609C\u608E\u6219\u6246\u62F2\u6310\u6356\u632C\u6344\u6345\u6336\u6343\u63E4\u6339\u634B\u634A\u633C\u6329\u6341\u6334\u6358\u6354\u6359\u632D\u6347\u6333\u635A\u6351\u6338\u6357\u6340\u6348\u654A\u6546\u65C6\u65C3\u65C4\u65C2\u664A\u665F\u6647\u6651\u6712\u6713\u681F\u681A\u6849\u6832\u6833\u683B\u684B\u684F\u6816\u6831\u681C\u6835\u682B\u682D\u682F\u684E\u6844\u6834\u681D\u6812\u6814\u6826\u6828\u682E\u684D\u683A\u6825\u6820\u6B2C\u6B2F\u6B2D\u6B31\u6B34\u6B6D\u8082\u6B88\u6BE6\u6BE4\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[209].length; ++j)
                if (D[209][j].charCodeAt(0) !== 65533) {
                    e2[D[209][j]] = 53504 + j;
                    d[53504 + j] = D[209][j];
                }
            D[210] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6BE8\u6BE3\u6BE2\u6BE7\u6C25\u6D7A\u6D63\u6D64\u6D76\u6D0D\u6D61\u6D92\u6D58\u6D62\u6D6D\u6D6F\u6D91\u6D8D\u6DEF\u6D7F\u6D86\u6D5E\u6D67\u6D60\u6D97\u6D70\u6D7C\u6D5F\u6D82\u6D98\u6D2F\u6D68\u6D8B\u6D7E\u6D80\u6D84\u6D16\u6D83\u6D7B\u6D7D\u6D75\u6D90\u70DC\u70D3\u70D1\u70DD\u70CB\u7F39\u70E2\u70D7\u70D2\u70DE\u70E0\u70D4\u70CD\u70C5\u70C6\u70C7\u70DA\u70CE\u70E1\u7242\u7278\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7277\u7276\u7300\u72FA\u72F4\u72FE\u72F6\u72F3\u72FB\u7301\u73D3\u73D9\u73E5\u73D6\u73BC\u73E7\u73E3\u73E9\u73DC\u73D2\u73DB\u73D4\u73DD\u73DA\u73D7\u73D8\u73E8\u74DE\u74DF\u74F4\u74F5\u7521\u755B\u755F\u75B0\u75C1\u75BB\u75C4\u75C0\u75BF\u75B6\u75BA\u768A\u76C9\u771D\u771B\u7710\u7713\u7712\u7723\u7711\u7715\u7719\u771A\u7722\u7727\u7823\u782C\u7822\u7835\u782F\u7828\u782E\u782B\u7821\u7829\u7833\u782A\u7831\u7954\u795B\u794F\u795C\u7953\u7952\u7951\u79EB\u79EC\u79E0\u79EE\u79ED\u79EA\u79DC\u79DE\u79DD\u7A86\u7A89\u7A85\u7A8B\u7A8C\u7A8A\u7A87\u7AD8\u7B10\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[210].length; ++j)
                if (D[210][j].charCodeAt(0) !== 65533) {
                    e2[D[210][j]] = 53760 + j;
                    d[53760 + j] = D[210][j];
                }
            D[211] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7B04\u7B13\u7B05\u7B0F\u7B08\u7B0A\u7B0E\u7B09\u7B12\u7C84\u7C91\u7C8A\u7C8C\u7C88\u7C8D\u7C85\u7D1E\u7D1D\u7D11\u7D0E\u7D18\u7D16\u7D13\u7D1F\u7D12\u7D0F\u7D0C\u7F5C\u7F61\u7F5E\u7F60\u7F5D\u7F5B\u7F96\u7F92\u7FC3\u7FC2\u7FC0\u8016\u803E\u8039\u80FA\u80F2\u80F9\u80F5\u8101\u80FB\u8100\u8201\u822F\u8225\u8333\u832D\u8344\u8319\u8351\u8325\u8356\u833F\u8341\u8326\u831C\u8322\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8342\u834E\u831B\u832A\u8308\u833C\u834D\u8316\u8324\u8320\u8337\u832F\u8329\u8347\u8345\u834C\u8353\u831E\u832C\u834B\u8327\u8348\u8653\u8652\u86A2\u86A8\u8696\u868D\u8691\u869E\u8687\u8697\u8686\u868B\u869A\u8685\u86A5\u8699\u86A1\u86A7\u8695\u8698\u868E\u869D\u8690\u8694\u8843\u8844\u886D\u8875\u8876\u8872\u8880\u8871\u887F\u886F\u8883\u887E\u8874\u887C\u8A12\u8C47\u8C57\u8C7B\u8CA4\u8CA3\u8D76\u8D78\u8DB5\u8DB7\u8DB6\u8ED1\u8ED3\u8FFE\u8FF5\u9002\u8FFF\u8FFB\u9004\u8FFC\u8FF6\u90D6\u90E0\u90D9\u90DA\u90E3\u90DF\u90E5\u90D8\u90DB\u90D7\u90DC\u90E4\u9150\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[211].length; ++j)
                if (D[211][j].charCodeAt(0) !== 65533) {
                    e2[D[211][j]] = 54016 + j;
                    d[54016 + j] = D[211][j];
                }
            D[212] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u914E\u914F\u91D5\u91E2\u91DA\u965C\u965F\u96BC\u98E3\u9ADF\u9B2F\u4E7F\u5070\u506A\u5061\u505E\u5060\u5053\u504B\u505D\u5072\u5048\u504D\u5041\u505B\u504A\u5062\u5015\u5045\u505F\u5069\u506B\u5063\u5064\u5046\u5040\u506E\u5073\u5057\u5051\u51D0\u526B\u526D\u526C\u526E\u52D6\u52D3\u532D\u539C\u5575\u5576\u553C\u554D\u5550\u5534\u552A\u5551\u5562\u5536\u5535\u5530\u5552\u5545\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u550C\u5532\u5565\u554E\u5539\u5548\u552D\u553B\u5540\u554B\u570A\u5707\u57FB\u5814\u57E2\u57F6\u57DC\u57F4\u5800\u57ED\u57FD\u5808\u57F8\u580B\u57F3\u57CF\u5807\u57EE\u57E3\u57F2\u57E5\u57EC\u57E1\u580E\u57FC\u5810\u57E7\u5801\u580C\u57F1\u57E9\u57F0\u580D\u5804\u595C\u5A60\u5A58\u5A55\u5A67\u5A5E\u5A38\u5A35\u5A6D\u5A50\u5A5F\u5A65\u5A6C\u5A53\u5A64\u5A57\u5A43\u5A5D\u5A52\u5A44\u5A5B\u5A48\u5A8E\u5A3E\u5A4D\u5A39\u5A4C\u5A70\u5A69\u5A47\u5A51\u5A56\u5A42\u5A5C\u5B72\u5B6E\u5BC1\u5BC0\u5C59\u5D1E\u5D0B\u5D1D\u5D1A\u5D20\u5D0C\u5D28\u5D0D\u5D26\u5D25\u5D0F\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[212].length; ++j)
                if (D[212][j].charCodeAt(0) !== 65533) {
                    e2[D[212][j]] = 54272 + j;
                    d[54272 + j] = D[212][j];
                }
            D[213] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5D30\u5D12\u5D23\u5D1F\u5D2E\u5E3E\u5E34\u5EB1\u5EB4\u5EB9\u5EB2\u5EB3\u5F36\u5F38\u5F9B\u5F96\u5F9F\u608A\u6090\u6086\u60BE\u60B0\u60BA\u60D3\u60D4\u60CF\u60E4\u60D9\u60DD\u60C8\u60B1\u60DB\u60B7\u60CA\u60BF\u60C3\u60CD\u60C0\u6332\u6365\u638A\u6382\u637D\u63BD\u639E\u63AD\u639D\u6397\u63AB\u638E\u636F\u6387\u6390\u636E\u63AF\u6375\u639C\u636D\u63AE\u637C\u63A4\u633B\u639F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6378\u6385\u6381\u6391\u638D\u6370\u6553\u65CD\u6665\u6661\u665B\u6659\u665C\u6662\u6718\u6879\u6887\u6890\u689C\u686D\u686E\u68AE\u68AB\u6956\u686F\u68A3\u68AC\u68A9\u6875\u6874\u68B2\u688F\u6877\u6892\u687C\u686B\u6872\u68AA\u6880\u6871\u687E\u689B\u6896\u688B\u68A0\u6889\u68A4\u6878\u687B\u6891\u688C\u688A\u687D\u6B36\u6B33\u6B37\u6B38\u6B91\u6B8F\u6B8D\u6B8E\u6B8C\u6C2A\u6DC0\u6DAB\u6DB4\u6DB3\u6E74\u6DAC\u6DE9\u6DE2\u6DB7\u6DF6\u6DD4\u6E00\u6DC8\u6DE0\u6DDF\u6DD6\u6DBE\u6DE5\u6DDC\u6DDD\u6DDB\u6DF4\u6DCA\u6DBD\u6DED\u6DF0\u6DBA\u6DD5\u6DC2\u6DCF\u6DC9\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[213].length; ++j)
                if (D[213][j].charCodeAt(0) !== 65533) {
                    e2[D[213][j]] = 54528 + j;
                    d[54528 + j] = D[213][j];
                }
            D[214] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6DD0\u6DF2\u6DD3\u6DFD\u6DD7\u6DCD\u6DE3\u6DBB\u70FA\u710D\u70F7\u7117\u70F4\u710C\u70F0\u7104\u70F3\u7110\u70FC\u70FF\u7106\u7113\u7100\u70F8\u70F6\u710B\u7102\u710E\u727E\u727B\u727C\u727F\u731D\u7317\u7307\u7311\u7318\u730A\u7308\u72FF\u730F\u731E\u7388\u73F6\u73F8\u73F5\u7404\u7401\u73FD\u7407\u7400\u73FA\u73FC\u73FF\u740C\u740B\u73F4\u7408\u7564\u7563\u75CE\u75D2\u75CF\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u75CB\u75CC\u75D1\u75D0\u768F\u7689\u76D3\u7739\u772F\u772D\u7731\u7732\u7734\u7733\u773D\u7725\u773B\u7735\u7848\u7852\u7849\u784D\u784A\u784C\u7826\u7845\u7850\u7964\u7967\u7969\u796A\u7963\u796B\u7961\u79BB\u79FA\u79F8\u79F6\u79F7\u7A8F\u7A94\u7A90\u7B35\u7B47\u7B34\u7B25\u7B30\u7B22\u7B24\u7B33\u7B18\u7B2A\u7B1D\u7B31\u7B2B\u7B2D\u7B2F\u7B32\u7B38\u7B1A\u7B23\u7C94\u7C98\u7C96\u7CA3\u7D35\u7D3D\u7D38\u7D36\u7D3A\u7D45\u7D2C\u7D29\u7D41\u7D47\u7D3E\u7D3F\u7D4A\u7D3B\u7D28\u7F63\u7F95\u7F9C\u7F9D\u7F9B\u7FCA\u7FCB\u7FCD\u7FD0\u7FD1\u7FC7\u7FCF\u7FC9\u801F\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[214].length; ++j)
                if (D[214][j].charCodeAt(0) !== 65533) {
                    e2[D[214][j]] = 54784 + j;
                    d[54784 + j] = D[214][j];
                }
            D[215] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u801E\u801B\u8047\u8043\u8048\u8118\u8125\u8119\u811B\u812D\u811F\u812C\u811E\u8121\u8115\u8127\u811D\u8122\u8211\u8238\u8233\u823A\u8234\u8232\u8274\u8390\u83A3\u83A8\u838D\u837A\u8373\u83A4\u8374\u838F\u8381\u8395\u8399\u8375\u8394\u83A9\u837D\u8383\u838C\u839D\u839B\u83AA\u838B\u837E\u83A5\u83AF\u8388\u8397\u83B0\u837F\u83A6\u8387\u83AE\u8376\u839A\u8659\u8656\u86BF\u86B7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u86C2\u86C1\u86C5\u86BA\u86B0\u86C8\u86B9\u86B3\u86B8\u86CC\u86B4\u86BB\u86BC\u86C3\u86BD\u86BE\u8852\u8889\u8895\u88A8\u88A2\u88AA\u889A\u8891\u88A1\u889F\u8898\u88A7\u8899\u889B\u8897\u88A4\u88AC\u888C\u8893\u888E\u8982\u89D6\u89D9\u89D5\u8A30\u8A27\u8A2C\u8A1E\u8C39\u8C3B\u8C5C\u8C5D\u8C7D\u8CA5\u8D7D\u8D7B\u8D79\u8DBC\u8DC2\u8DB9\u8DBF\u8DC1\u8ED8\u8EDE\u8EDD\u8EDC\u8ED7\u8EE0\u8EE1\u9024\u900B\u9011\u901C\u900C\u9021\u90EF\u90EA\u90F0\u90F4\u90F2\u90F3\u90D4\u90EB\u90EC\u90E9\u9156\u9158\u915A\u9153\u9155\u91EC\u91F4\u91F1\u91F3\u91F8\u91E4\u91F9\u91EA\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[215].length; ++j)
                if (D[215][j].charCodeAt(0) !== 65533) {
                    e2[D[215][j]] = 55040 + j;
                    d[55040 + j] = D[215][j];
                }
            D[216] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u91EB\u91F7\u91E8\u91EE\u957A\u9586\u9588\u967C\u966D\u966B\u9671\u966F\u96BF\u976A\u9804\u98E5\u9997\u509B\u5095\u5094\u509E\u508B\u50A3\u5083\u508C\u508E\u509D\u5068\u509C\u5092\u5082\u5087\u515F\u51D4\u5312\u5311\u53A4\u53A7\u5591\u55A8\u55A5\u55AD\u5577\u5645\u55A2\u5593\u5588\u558F\u55B5\u5581\u55A3\u5592\u55A4\u557D\u558C\u55A6\u557F\u5595\u55A1\u558E\u570C\u5829\u5837\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5819\u581E\u5827\u5823\u5828\u57F5\u5848\u5825\u581C\u581B\u5833\u583F\u5836\u582E\u5839\u5838\u582D\u582C\u583B\u5961\u5AAF\u5A94\u5A9F\u5A7A\u5AA2\u5A9E\u5A78\u5AA6\u5A7C\u5AA5\u5AAC\u5A95\u5AAE\u5A37\u5A84\u5A8A\u5A97\u5A83\u5A8B\u5AA9\u5A7B\u5A7D\u5A8C\u5A9C\u5A8F\u5A93\u5A9D\u5BEA\u5BCD\u5BCB\u5BD4\u5BD1\u5BCA\u5BCE\u5C0C\u5C30\u5D37\u5D43\u5D6B\u5D41\u5D4B\u5D3F\u5D35\u5D51\u5D4E\u5D55\u5D33\u5D3A\u5D52\u5D3D\u5D31\u5D59\u5D42\u5D39\u5D49\u5D38\u5D3C\u5D32\u5D36\u5D40\u5D45\u5E44\u5E41\u5F58\u5FA6\u5FA5\u5FAB\u60C9\u60B9\u60CC\u60E2\u60CE\u60C4\u6114\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[216].length; ++j)
                if (D[216][j].charCodeAt(0) !== 65533) {
                    e2[D[216][j]] = 55296 + j;
                    d[55296 + j] = D[216][j];
                }
            D[217] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u60F2\u610A\u6116\u6105\u60F5\u6113\u60F8\u60FC\u60FE\u60C1\u6103\u6118\u611D\u6110\u60FF\u6104\u610B\u624A\u6394\u63B1\u63B0\u63CE\u63E5\u63E8\u63EF\u63C3\u649D\u63F3\u63CA\u63E0\u63F6\u63D5\u63F2\u63F5\u6461\u63DF\u63BE\u63DD\u63DC\u63C4\u63D8\u63D3\u63C2\u63C7\u63CC\u63CB\u63C8\u63F0\u63D7\u63D9\u6532\u6567\u656A\u6564\u655C\u6568\u6565\u658C\u659D\u659E\u65AE\u65D0\u65D2\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u667C\u666C\u667B\u6680\u6671\u6679\u666A\u6672\u6701\u690C\u68D3\u6904\u68DC\u692A\u68EC\u68EA\u68F1\u690F\u68D6\u68F7\u68EB\u68E4\u68F6\u6913\u6910\u68F3\u68E1\u6907\u68CC\u6908\u6970\u68B4\u6911\u68EF\u68C6\u6914\u68F8\u68D0\u68FD\u68FC\u68E8\u690B\u690A\u6917\u68CE\u68C8\u68DD\u68DE\u68E6\u68F4\u68D1\u6906\u68D4\u68E9\u6915\u6925\u68C7\u6B39\u6B3B\u6B3F\u6B3C\u6B94\u6B97\u6B99\u6B95\u6BBD\u6BF0\u6BF2\u6BF3\u6C30\u6DFC\u6E46\u6E47\u6E1F\u6E49\u6E88\u6E3C\u6E3D\u6E45\u6E62\u6E2B\u6E3F\u6E41\u6E5D\u6E73\u6E1C\u6E33\u6E4B\u6E40\u6E51\u6E3B\u6E03\u6E2E\u6E5E\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[217].length; ++j)
                if (D[217][j].charCodeAt(0) !== 65533) {
                    e2[D[217][j]] = 55552 + j;
                    d[55552 + j] = D[217][j];
                }
            D[218] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6E68\u6E5C\u6E61\u6E31\u6E28\u6E60\u6E71\u6E6B\u6E39\u6E22\u6E30\u6E53\u6E65\u6E27\u6E78\u6E64\u6E77\u6E55\u6E79\u6E52\u6E66\u6E35\u6E36\u6E5A\u7120\u711E\u712F\u70FB\u712E\u7131\u7123\u7125\u7122\u7132\u711F\u7128\u713A\u711B\u724B\u725A\u7288\u7289\u7286\u7285\u728B\u7312\u730B\u7330\u7322\u7331\u7333\u7327\u7332\u732D\u7326\u7323\u7335\u730C\u742E\u742C\u7430\u742B\u7416\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u741A\u7421\u742D\u7431\u7424\u7423\u741D\u7429\u7420\u7432\u74FB\u752F\u756F\u756C\u75E7\u75DA\u75E1\u75E6\u75DD\u75DF\u75E4\u75D7\u7695\u7692\u76DA\u7746\u7747\u7744\u774D\u7745\u774A\u774E\u774B\u774C\u77DE\u77EC\u7860\u7864\u7865\u785C\u786D\u7871\u786A\u786E\u7870\u7869\u7868\u785E\u7862\u7974\u7973\u7972\u7970\u7A02\u7A0A\u7A03\u7A0C\u7A04\u7A99\u7AE6\u7AE4\u7B4A\u7B3B\u7B44\u7B48\u7B4C\u7B4E\u7B40\u7B58\u7B45\u7CA2\u7C9E\u7CA8\u7CA1\u7D58\u7D6F\u7D63\u7D53\u7D56\u7D67\u7D6A\u7D4F\u7D6D\u7D5C\u7D6B\u7D52\u7D54\u7D69\u7D51\u7D5F\u7D4E\u7F3E\u7F3F\u7F65\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[218].length; ++j)
                if (D[218][j].charCodeAt(0) !== 65533) {
                    e2[D[218][j]] = 55808 + j;
                    d[55808 + j] = D[218][j];
                }
            D[219] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7F66\u7FA2\u7FA0\u7FA1\u7FD7\u8051\u804F\u8050\u80FE\u80D4\u8143\u814A\u8152\u814F\u8147\u813D\u814D\u813A\u81E6\u81EE\u81F7\u81F8\u81F9\u8204\u823C\u823D\u823F\u8275\u833B\u83CF\u83F9\u8423\u83C0\u83E8\u8412\u83E7\u83E4\u83FC\u83F6\u8410\u83C6\u83C8\u83EB\u83E3\u83BF\u8401\u83DD\u83E5\u83D8\u83FF\u83E1\u83CB\u83CE\u83D6\u83F5\u83C9\u8409\u840F\u83DE\u8411\u8406\u83C2\u83F3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u83D5\u83FA\u83C7\u83D1\u83EA\u8413\u83C3\u83EC\u83EE\u83C4\u83FB\u83D7\u83E2\u841B\u83DB\u83FE\u86D8\u86E2\u86E6\u86D3\u86E3\u86DA\u86EA\u86DD\u86EB\u86DC\u86EC\u86E9\u86D7\u86E8\u86D1\u8848\u8856\u8855\u88BA\u88D7\u88B9\u88B8\u88C0\u88BE\u88B6\u88BC\u88B7\u88BD\u88B2\u8901\u88C9\u8995\u8998\u8997\u89DD\u89DA\u89DB\u8A4E\u8A4D\u8A39\u8A59\u8A40\u8A57\u8A58\u8A44\u8A45\u8A52\u8A48\u8A51\u8A4A\u8A4C\u8A4F\u8C5F\u8C81\u8C80\u8CBA\u8CBE\u8CB0\u8CB9\u8CB5\u8D84\u8D80\u8D89\u8DD8\u8DD3\u8DCD\u8DC7\u8DD6\u8DDC\u8DCF\u8DD5\u8DD9\u8DC8\u8DD7\u8DC5\u8EEF\u8EF7\u8EFA\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[219].length; ++j)
                if (D[219][j].charCodeAt(0) !== 65533) {
                    e2[D[219][j]] = 56064 + j;
                    d[56064 + j] = D[219][j];
                }
            D[220] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8EF9\u8EE6\u8EEE\u8EE5\u8EF5\u8EE7\u8EE8\u8EF6\u8EEB\u8EF1\u8EEC\u8EF4\u8EE9\u902D\u9034\u902F\u9106\u912C\u9104\u90FF\u90FC\u9108\u90F9\u90FB\u9101\u9100\u9107\u9105\u9103\u9161\u9164\u915F\u9162\u9160\u9201\u920A\u9225\u9203\u921A\u9226\u920F\u920C\u9200\u9212\u91FF\u91FD\u9206\u9204\u9227\u9202\u921C\u9224\u9219\u9217\u9205\u9216\u957B\u958D\u958C\u9590\u9687\u967E\u9688\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9689\u9683\u9680\u96C2\u96C8\u96C3\u96F1\u96F0\u976C\u9770\u976E\u9807\u98A9\u98EB\u9CE6\u9EF9\u4E83\u4E84\u4EB6\u50BD\u50BF\u50C6\u50AE\u50C4\u50CA\u50B4\u50C8\u50C2\u50B0\u50C1\u50BA\u50B1\u50CB\u50C9\u50B6\u50B8\u51D7\u527A\u5278\u527B\u527C\u55C3\u55DB\u55CC\u55D0\u55CB\u55CA\u55DD\u55C0\u55D4\u55C4\u55E9\u55BF\u55D2\u558D\u55CF\u55D5\u55E2\u55D6\u55C8\u55F2\u55CD\u55D9\u55C2\u5714\u5853\u5868\u5864\u584F\u584D\u5849\u586F\u5855\u584E\u585D\u5859\u5865\u585B\u583D\u5863\u5871\u58FC\u5AC7\u5AC4\u5ACB\u5ABA\u5AB8\u5AB1\u5AB5\u5AB0\u5ABF\u5AC8\u5ABB\u5AC6\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[220].length; ++j)
                if (D[220][j].charCodeAt(0) !== 65533) {
                    e2[D[220][j]] = 56320 + j;
                    d[56320 + j] = D[220][j];
                }
            D[221] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5AB7\u5AC0\u5ACA\u5AB4\u5AB6\u5ACD\u5AB9\u5A90\u5BD6\u5BD8\u5BD9\u5C1F\u5C33\u5D71\u5D63\u5D4A\u5D65\u5D72\u5D6C\u5D5E\u5D68\u5D67\u5D62\u5DF0\u5E4F\u5E4E\u5E4A\u5E4D\u5E4B\u5EC5\u5ECC\u5EC6\u5ECB\u5EC7\u5F40\u5FAF\u5FAD\u60F7\u6149\u614A\u612B\u6145\u6136\u6132\u612E\u6146\u612F\u614F\u6129\u6140\u6220\u9168\u6223\u6225\u6224\u63C5\u63F1\u63EB\u6410\u6412\u6409\u6420\u6424\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6433\u6443\u641F\u6415\u6418\u6439\u6437\u6422\u6423\u640C\u6426\u6430\u6428\u6441\u6435\u642F\u640A\u641A\u6440\u6425\u6427\u640B\u63E7\u641B\u642E\u6421\u640E\u656F\u6592\u65D3\u6686\u668C\u6695\u6690\u668B\u668A\u6699\u6694\u6678\u6720\u6966\u695F\u6938\u694E\u6962\u6971\u693F\u6945\u696A\u6939\u6942\u6957\u6959\u697A\u6948\u6949\u6935\u696C\u6933\u693D\u6965\u68F0\u6978\u6934\u6969\u6940\u696F\u6944\u6976\u6958\u6941\u6974\u694C\u693B\u694B\u6937\u695C\u694F\u6951\u6932\u6952\u692F\u697B\u693C\u6B46\u6B45\u6B43\u6B42\u6B48\u6B41\u6B9B\uFA0D\u6BFB\u6BFC\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[221].length; ++j)
                if (D[221][j].charCodeAt(0) !== 65533) {
                    e2[D[221][j]] = 56576 + j;
                    d[56576 + j] = D[221][j];
                }
            D[222] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6BF9\u6BF7\u6BF8\u6E9B\u6ED6\u6EC8\u6E8F\u6EC0\u6E9F\u6E93\u6E94\u6EA0\u6EB1\u6EB9\u6EC6\u6ED2\u6EBD\u6EC1\u6E9E\u6EC9\u6EB7\u6EB0\u6ECD\u6EA6\u6ECF\u6EB2\u6EBE\u6EC3\u6EDC\u6ED8\u6E99\u6E92\u6E8E\u6E8D\u6EA4\u6EA1\u6EBF\u6EB3\u6ED0\u6ECA\u6E97\u6EAE\u6EA3\u7147\u7154\u7152\u7163\u7160\u7141\u715D\u7162\u7172\u7178\u716A\u7161\u7142\u7158\u7143\u714B\u7170\u715F\u7150\u7153\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7144\u714D\u715A\u724F\u728D\u728C\u7291\u7290\u728E\u733C\u7342\u733B\u733A\u7340\u734A\u7349\u7444\u744A\u744B\u7452\u7451\u7457\u7440\u744F\u7450\u744E\u7442\u7446\u744D\u7454\u74E1\u74FF\u74FE\u74FD\u751D\u7579\u7577\u6983\u75EF\u760F\u7603\u75F7\u75FE\u75FC\u75F9\u75F8\u7610\u75FB\u75F6\u75ED\u75F5\u75FD\u7699\u76B5\u76DD\u7755\u775F\u7760\u7752\u7756\u775A\u7769\u7767\u7754\u7759\u776D\u77E0\u7887\u789A\u7894\u788F\u7884\u7895\u7885\u7886\u78A1\u7883\u7879\u7899\u7880\u7896\u787B\u797C\u7982\u797D\u7979\u7A11\u7A18\u7A19\u7A12\u7A17\u7A15\u7A22\u7A13\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[222].length; ++j)
                if (D[222][j].charCodeAt(0) !== 65533) {
                    e2[D[222][j]] = 56832 + j;
                    d[56832 + j] = D[222][j];
                }
            D[223] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7A1B\u7A10\u7AA3\u7AA2\u7A9E\u7AEB\u7B66\u7B64\u7B6D\u7B74\u7B69\u7B72\u7B65\u7B73\u7B71\u7B70\u7B61\u7B78\u7B76\u7B63\u7CB2\u7CB4\u7CAF\u7D88\u7D86\u7D80\u7D8D\u7D7F\u7D85\u7D7A\u7D8E\u7D7B\u7D83\u7D7C\u7D8C\u7D94\u7D84\u7D7D\u7D92\u7F6D\u7F6B\u7F67\u7F68\u7F6C\u7FA6\u7FA5\u7FA7\u7FDB\u7FDC\u8021\u8164\u8160\u8177\u815C\u8169\u815B\u8162\u8172\u6721\u815E\u8176\u8167\u816F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8144\u8161\u821D\u8249\u8244\u8240\u8242\u8245\u84F1\u843F\u8456\u8476\u8479\u848F\u848D\u8465\u8451\u8440\u8486\u8467\u8430\u844D\u847D\u845A\u8459\u8474\u8473\u845D\u8507\u845E\u8437\u843A\u8434\u847A\u8443\u8478\u8432\u8445\u8429\u83D9\u844B\u842F\u8442\u842D\u845F\u8470\u8439\u844E\u844C\u8452\u846F\u84C5\u848E\u843B\u8447\u8436\u8433\u8468\u847E\u8444\u842B\u8460\u8454\u846E\u8450\u870B\u8704\u86F7\u870C\u86FA\u86D6\u86F5\u874D\u86F8\u870E\u8709\u8701\u86F6\u870D\u8705\u88D6\u88CB\u88CD\u88CE\u88DE\u88DB\u88DA\u88CC\u88D0\u8985\u899B\u89DF\u89E5\u89E4\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[223].length; ++j)
                if (D[223][j].charCodeAt(0) !== 65533) {
                    e2[D[223][j]] = 57088 + j;
                    d[57088 + j] = D[223][j];
                }
            D[224] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u89E1\u89E0\u89E2\u89DC\u89E6\u8A76\u8A86\u8A7F\u8A61\u8A3F\u8A77\u8A82\u8A84\u8A75\u8A83\u8A81\u8A74\u8A7A\u8C3C\u8C4B\u8C4A\u8C65\u8C64\u8C66\u8C86\u8C84\u8C85\u8CCC\u8D68\u8D69\u8D91\u8D8C\u8D8E\u8D8F\u8D8D\u8D93\u8D94\u8D90\u8D92\u8DF0\u8DE0\u8DEC\u8DF1\u8DEE\u8DD0\u8DE9\u8DE3\u8DE2\u8DE7\u8DF2\u8DEB\u8DF4\u8F06\u8EFF\u8F01\u8F00\u8F05\u8F07\u8F08\u8F02\u8F0B\u9052\u903F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9044\u9049\u903D\u9110\u910D\u910F\u9111\u9116\u9114\u910B\u910E\u916E\u916F\u9248\u9252\u9230\u923A\u9266\u9233\u9265\u925E\u9283\u922E\u924A\u9246\u926D\u926C\u924F\u9260\u9267\u926F\u9236\u9261\u9270\u9231\u9254\u9263\u9250\u9272\u924E\u9253\u924C\u9256\u9232\u959F\u959C\u959E\u959B\u9692\u9693\u9691\u9697\u96CE\u96FA\u96FD\u96F8\u96F5\u9773\u9777\u9778\u9772\u980F\u980D\u980E\u98AC\u98F6\u98F9\u99AF\u99B2\u99B0\u99B5\u9AAD\u9AAB\u9B5B\u9CEA\u9CED\u9CE7\u9E80\u9EFD\u50E6\u50D4\u50D7\u50E8\u50F3\u50DB\u50EA\u50DD\u50E4\u50D3\u50EC\u50F0\u50EF\u50E3\u50E0\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[224].length; ++j)
                if (D[224][j].charCodeAt(0) !== 65533) {
                    e2[D[224][j]] = 57344 + j;
                    d[57344 + j] = D[224][j];
                }
            D[225] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u51D8\u5280\u5281\u52E9\u52EB\u5330\u53AC\u5627\u5615\u560C\u5612\u55FC\u560F\u561C\u5601\u5613\u5602\u55FA\u561D\u5604\u55FF\u55F9\u5889\u587C\u5890\u5898\u5886\u5881\u587F\u5874\u588B\u587A\u5887\u5891\u588E\u5876\u5882\u5888\u587B\u5894\u588F\u58FE\u596B\u5ADC\u5AEE\u5AE5\u5AD5\u5AEA\u5ADA\u5AED\u5AEB\u5AF3\u5AE2\u5AE0\u5ADB\u5AEC\u5ADE\u5ADD\u5AD9\u5AE8\u5ADF\u5B77\u5BE0\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5BE3\u5C63\u5D82\u5D80\u5D7D\u5D86\u5D7A\u5D81\u5D77\u5D8A\u5D89\u5D88\u5D7E\u5D7C\u5D8D\u5D79\u5D7F\u5E58\u5E59\u5E53\u5ED8\u5ED1\u5ED7\u5ECE\u5EDC\u5ED5\u5ED9\u5ED2\u5ED4\u5F44\u5F43\u5F6F\u5FB6\u612C\u6128\u6141\u615E\u6171\u6173\u6152\u6153\u6172\u616C\u6180\u6174\u6154\u617A\u615B\u6165\u613B\u616A\u6161\u6156\u6229\u6227\u622B\u642B\u644D\u645B\u645D\u6474\u6476\u6472\u6473\u647D\u6475\u6466\u64A6\u644E\u6482\u645E\u645C\u644B\u6453\u6460\u6450\u647F\u643F\u646C\u646B\u6459\u6465\u6477\u6573\u65A0\u66A1\u66A0\u669F\u6705\u6704\u6722\u69B1\u69B6\u69C9\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[225].length; ++j)
                if (D[225][j].charCodeAt(0) !== 65533) {
                    e2[D[225][j]] = 57600 + j;
                    d[57600 + j] = D[225][j];
                }
            D[226] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u69A0\u69CE\u6996\u69B0\u69AC\u69BC\u6991\u6999\u698E\u69A7\u698D\u69A9\u69BE\u69AF\u69BF\u69C4\u69BD\u69A4\u69D4\u69B9\u69CA\u699A\u69CF\u69B3\u6993\u69AA\u69A1\u699E\u69D9\u6997\u6990\u69C2\u69B5\u69A5\u69C6\u6B4A\u6B4D\u6B4B\u6B9E\u6B9F\u6BA0\u6BC3\u6BC4\u6BFE\u6ECE\u6EF5\u6EF1\u6F03\u6F25\u6EF8\u6F37\u6EFB\u6F2E\u6F09\u6F4E\u6F19\u6F1A\u6F27\u6F18\u6F3B\u6F12\u6EED\u6F0A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6F36\u6F73\u6EF9\u6EEE\u6F2D\u6F40\u6F30\u6F3C\u6F35\u6EEB\u6F07\u6F0E\u6F43\u6F05\u6EFD\u6EF6\u6F39\u6F1C\u6EFC\u6F3A\u6F1F\u6F0D\u6F1E\u6F08\u6F21\u7187\u7190\u7189\u7180\u7185\u7182\u718F\u717B\u7186\u7181\u7197\u7244\u7253\u7297\u7295\u7293\u7343\u734D\u7351\u734C\u7462\u7473\u7471\u7475\u7472\u7467\u746E\u7500\u7502\u7503\u757D\u7590\u7616\u7608\u760C\u7615\u7611\u760A\u7614\u76B8\u7781\u777C\u7785\u7782\u776E\u7780\u776F\u777E\u7783\u78B2\u78AA\u78B4\u78AD\u78A8\u787E\u78AB\u789E\u78A5\u78A0\u78AC\u78A2\u78A4\u7998\u798A\u798B\u7996\u7995\u7994\u7993\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[226].length; ++j)
                if (D[226][j].charCodeAt(0) !== 65533) {
                    e2[D[226][j]] = 57856 + j;
                    d[57856 + j] = D[226][j];
                }
            D[227] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7997\u7988\u7992\u7990\u7A2B\u7A4A\u7A30\u7A2F\u7A28\u7A26\u7AA8\u7AAB\u7AAC\u7AEE\u7B88\u7B9C\u7B8A\u7B91\u7B90\u7B96\u7B8D\u7B8C\u7B9B\u7B8E\u7B85\u7B98\u5284\u7B99\u7BA4\u7B82\u7CBB\u7CBF\u7CBC\u7CBA\u7DA7\u7DB7\u7DC2\u7DA3\u7DAA\u7DC1\u7DC0\u7DC5\u7D9D\u7DCE\u7DC4\u7DC6\u7DCB\u7DCC\u7DAF\u7DB9\u7D96\u7DBC\u7D9F\u7DA6\u7DAE\u7DA9\u7DA1\u7DC9\u7F73\u7FE2\u7FE3\u7FE5\u7FDE\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8024\u805D\u805C\u8189\u8186\u8183\u8187\u818D\u818C\u818B\u8215\u8497\u84A4\u84A1\u849F\u84BA\u84CE\u84C2\u84AC\u84AE\u84AB\u84B9\u84B4\u84C1\u84CD\u84AA\u849A\u84B1\u84D0\u849D\u84A7\u84BB\u84A2\u8494\u84C7\u84CC\u849B\u84A9\u84AF\u84A8\u84D6\u8498\u84B6\u84CF\u84A0\u84D7\u84D4\u84D2\u84DB\u84B0\u8491\u8661\u8733\u8723\u8728\u876B\u8740\u872E\u871E\u8721\u8719\u871B\u8743\u872C\u8741\u873E\u8746\u8720\u8732\u872A\u872D\u873C\u8712\u873A\u8731\u8735\u8742\u8726\u8727\u8738\u8724\u871A\u8730\u8711\u88F7\u88E7\u88F1\u88F2\u88FA\u88FE\u88EE\u88FC\u88F6\u88FB\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[227].length; ++j)
                if (D[227][j].charCodeAt(0) !== 65533) {
                    e2[D[227][j]] = 58112 + j;
                    d[58112 + j] = D[227][j];
                }
            D[228] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u88F0\u88EC\u88EB\u899D\u89A1\u899F\u899E\u89E9\u89EB\u89E8\u8AAB\u8A99\u8A8B\u8A92\u8A8F\u8A96\u8C3D\u8C68\u8C69\u8CD5\u8CCF\u8CD7\u8D96\u8E09\u8E02\u8DFF\u8E0D\u8DFD\u8E0A\u8E03\u8E07\u8E06\u8E05\u8DFE\u8E00\u8E04\u8F10\u8F11\u8F0E\u8F0D\u9123\u911C\u9120\u9122\u911F\u911D\u911A\u9124\u9121\u911B\u917A\u9172\u9179\u9173\u92A5\u92A4\u9276\u929B\u927A\u92A0\u9294\u92AA\u928D\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u92A6\u929A\u92AB\u9279\u9297\u927F\u92A3\u92EE\u928E\u9282\u9295\u92A2\u927D\u9288\u92A1\u928A\u9286\u928C\u9299\u92A7\u927E\u9287\u92A9\u929D\u928B\u922D\u969E\u96A1\u96FF\u9758\u977D\u977A\u977E\u9783\u9780\u9782\u977B\u9784\u9781\u977F\u97CE\u97CD\u9816\u98AD\u98AE\u9902\u9900\u9907\u999D\u999C\u99C3\u99B9\u99BB\u99BA\u99C2\u99BD\u99C7\u9AB1\u9AE3\u9AE7\u9B3E\u9B3F\u9B60\u9B61\u9B5F\u9CF1\u9CF2\u9CF5\u9EA7\u50FF\u5103\u5130\u50F8\u5106\u5107\u50F6\u50FE\u510B\u510C\u50FD\u510A\u528B\u528C\u52F1\u52EF\u5648\u5642\u564C\u5635\u5641\u564A\u5649\u5646\u5658\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[228].length; ++j)
                if (D[228][j].charCodeAt(0) !== 65533) {
                    e2[D[228][j]] = 58368 + j;
                    d[58368 + j] = D[228][j];
                }
            D[229] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u565A\u5640\u5633\u563D\u562C\u563E\u5638\u562A\u563A\u571A\u58AB\u589D\u58B1\u58A0\u58A3\u58AF\u58AC\u58A5\u58A1\u58FF\u5AFF\u5AF4\u5AFD\u5AF7\u5AF6\u5B03\u5AF8\u5B02\u5AF9\u5B01\u5B07\u5B05\u5B0F\u5C67\u5D99\u5D97\u5D9F\u5D92\u5DA2\u5D93\u5D95\u5DA0\u5D9C\u5DA1\u5D9A\u5D9E\u5E69\u5E5D\u5E60\u5E5C\u7DF3\u5EDB\u5EDE\u5EE1\u5F49\u5FB2\u618B\u6183\u6179\u61B1\u61B0\u61A2\u6189\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u619B\u6193\u61AF\u61AD\u619F\u6192\u61AA\u61A1\u618D\u6166\u61B3\u622D\u646E\u6470\u6496\u64A0\u6485\u6497\u649C\u648F\u648B\u648A\u648C\u64A3\u649F\u6468\u64B1\u6498\u6576\u657A\u6579\u657B\u65B2\u65B3\u66B5\u66B0\u66A9\u66B2\u66B7\u66AA\u66AF\u6A00\u6A06\u6A17\u69E5\u69F8\u6A15\u69F1\u69E4\u6A20\u69FF\u69EC\u69E2\u6A1B\u6A1D\u69FE\u6A27\u69F2\u69EE\u6A14\u69F7\u69E7\u6A40\u6A08\u69E6\u69FB\u6A0D\u69FC\u69EB\u6A09\u6A04\u6A18\u6A25\u6A0F\u69F6\u6A26\u6A07\u69F4\u6A16\u6B51\u6BA5\u6BA3\u6BA2\u6BA6\u6C01\u6C00\u6BFF\u6C02\u6F41\u6F26\u6F7E\u6F87\u6FC6\u6F92\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[229].length; ++j)
                if (D[229][j].charCodeAt(0) !== 65533) {
                    e2[D[229][j]] = 58624 + j;
                    d[58624 + j] = D[229][j];
                }
            D[230] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6F8D\u6F89\u6F8C\u6F62\u6F4F\u6F85\u6F5A\u6F96\u6F76\u6F6C\u6F82\u6F55\u6F72\u6F52\u6F50\u6F57\u6F94\u6F93\u6F5D\u6F00\u6F61\u6F6B\u6F7D\u6F67\u6F90\u6F53\u6F8B\u6F69\u6F7F\u6F95\u6F63\u6F77\u6F6A\u6F7B\u71B2\u71AF\u719B\u71B0\u71A0\u719A\u71A9\u71B5\u719D\u71A5\u719E\u71A4\u71A1\u71AA\u719C\u71A7\u71B3\u7298\u729A\u7358\u7352\u735E\u735F\u7360\u735D\u735B\u7361\u735A\u7359\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7362\u7487\u7489\u748A\u7486\u7481\u747D\u7485\u7488\u747C\u7479\u7508\u7507\u757E\u7625\u761E\u7619\u761D\u761C\u7623\u761A\u7628\u761B\u769C\u769D\u769E\u769B\u778D\u778F\u7789\u7788\u78CD\u78BB\u78CF\u78CC\u78D1\u78CE\u78D4\u78C8\u78C3\u78C4\u78C9\u799A\u79A1\u79A0\u799C\u79A2\u799B\u6B76\u7A39\u7AB2\u7AB4\u7AB3\u7BB7\u7BCB\u7BBE\u7BAC\u7BCE\u7BAF\u7BB9\u7BCA\u7BB5\u7CC5\u7CC8\u7CCC\u7CCB\u7DF7\u7DDB\u7DEA\u7DE7\u7DD7\u7DE1\u7E03\u7DFA\u7DE6\u7DF6\u7DF1\u7DF0\u7DEE\u7DDF\u7F76\u7FAC\u7FB0\u7FAD\u7FED\u7FEB\u7FEA\u7FEC\u7FE6\u7FE8\u8064\u8067\u81A3\u819F\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[230].length; ++j)
                if (D[230][j].charCodeAt(0) !== 65533) {
                    e2[D[230][j]] = 58880 + j;
                    d[58880 + j] = D[230][j];
                }
            D[231] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u819E\u8195\u81A2\u8199\u8197\u8216\u824F\u8253\u8252\u8250\u824E\u8251\u8524\u853B\u850F\u8500\u8529\u850E\u8509\u850D\u851F\u850A\u8527\u851C\u84FB\u852B\u84FA\u8508\u850C\u84F4\u852A\u84F2\u8515\u84F7\u84EB\u84F3\u84FC\u8512\u84EA\u84E9\u8516\u84FE\u8528\u851D\u852E\u8502\u84FD\u851E\u84F6\u8531\u8526\u84E7\u84E8\u84F0\u84EF\u84F9\u8518\u8520\u8530\u850B\u8519\u852F\u8662\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8756\u8763\u8764\u8777\u87E1\u8773\u8758\u8754\u875B\u8752\u8761\u875A\u8751\u875E\u876D\u876A\u8750\u874E\u875F\u875D\u876F\u876C\u877A\u876E\u875C\u8765\u874F\u877B\u8775\u8762\u8767\u8769\u885A\u8905\u890C\u8914\u890B\u8917\u8918\u8919\u8906\u8916\u8911\u890E\u8909\u89A2\u89A4\u89A3\u89ED\u89F0\u89EC\u8ACF\u8AC6\u8AB8\u8AD3\u8AD1\u8AD4\u8AD5\u8ABB\u8AD7\u8ABE\u8AC0\u8AC5\u8AD8\u8AC3\u8ABA\u8ABD\u8AD9\u8C3E\u8C4D\u8C8F\u8CE5\u8CDF\u8CD9\u8CE8\u8CDA\u8CDD\u8CE7\u8DA0\u8D9C\u8DA1\u8D9B\u8E20\u8E23\u8E25\u8E24\u8E2E\u8E15\u8E1B\u8E16\u8E11\u8E19\u8E26\u8E27\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[231].length; ++j)
                if (D[231][j].charCodeAt(0) !== 65533) {
                    e2[D[231][j]] = 59136 + j;
                    d[59136 + j] = D[231][j];
                }
            D[232] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8E14\u8E12\u8E18\u8E13\u8E1C\u8E17\u8E1A\u8F2C\u8F24\u8F18\u8F1A\u8F20\u8F23\u8F16\u8F17\u9073\u9070\u906F\u9067\u906B\u912F\u912B\u9129\u912A\u9132\u9126\u912E\u9185\u9186\u918A\u9181\u9182\u9184\u9180\u92D0\u92C3\u92C4\u92C0\u92D9\u92B6\u92CF\u92F1\u92DF\u92D8\u92E9\u92D7\u92DD\u92CC\u92EF\u92C2\u92E8\u92CA\u92C8\u92CE\u92E6\u92CD\u92D5\u92C9\u92E0\u92DE\u92E7\u92D1\u92D3\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u92B5\u92E1\u92C6\u92B4\u957C\u95AC\u95AB\u95AE\u95B0\u96A4\u96A2\u96D3\u9705\u9708\u9702\u975A\u978A\u978E\u9788\u97D0\u97CF\u981E\u981D\u9826\u9829\u9828\u9820\u981B\u9827\u98B2\u9908\u98FA\u9911\u9914\u9916\u9917\u9915\u99DC\u99CD\u99CF\u99D3\u99D4\u99CE\u99C9\u99D6\u99D8\u99CB\u99D7\u99CC\u9AB3\u9AEC\u9AEB\u9AF3\u9AF2\u9AF1\u9B46\u9B43\u9B67\u9B74\u9B71\u9B66\u9B76\u9B75\u9B70\u9B68\u9B64\u9B6C\u9CFC\u9CFA\u9CFD\u9CFF\u9CF7\u9D07\u9D00\u9CF9\u9CFB\u9D08\u9D05\u9D04\u9E83\u9ED3\u9F0F\u9F10\u511C\u5113\u5117\u511A\u5111\u51DE\u5334\u53E1\u5670\u5660\u566E\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[232].length; ++j)
                if (D[232][j].charCodeAt(0) !== 65533) {
                    e2[D[232][j]] = 59392 + j;
                    d[59392 + j] = D[232][j];
                }
            D[233] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5673\u5666\u5663\u566D\u5672\u565E\u5677\u571C\u571B\u58C8\u58BD\u58C9\u58BF\u58BA\u58C2\u58BC\u58C6\u5B17\u5B19\u5B1B\u5B21\u5B14\u5B13\u5B10\u5B16\u5B28\u5B1A\u5B20\u5B1E\u5BEF\u5DAC\u5DB1\u5DA9\u5DA7\u5DB5\u5DB0\u5DAE\u5DAA\u5DA8\u5DB2\u5DAD\u5DAF\u5DB4\u5E67\u5E68\u5E66\u5E6F\u5EE9\u5EE7\u5EE6\u5EE8\u5EE5\u5F4B\u5FBC\u619D\u61A8\u6196\u61C5\u61B4\u61C6\u61C1\u61CC\u61BA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u61BF\u61B8\u618C\u64D7\u64D6\u64D0\u64CF\u64C9\u64BD\u6489\u64C3\u64DB\u64F3\u64D9\u6533\u657F\u657C\u65A2\u66C8\u66BE\u66C0\u66CA\u66CB\u66CF\u66BD\u66BB\u66BA\u66CC\u6723\u6A34\u6A66\u6A49\u6A67\u6A32\u6A68\u6A3E\u6A5D\u6A6D\u6A76\u6A5B\u6A51\u6A28\u6A5A\u6A3B\u6A3F\u6A41\u6A6A\u6A64\u6A50\u6A4F\u6A54\u6A6F\u6A69\u6A60\u6A3C\u6A5E\u6A56\u6A55\u6A4D\u6A4E\u6A46\u6B55\u6B54\u6B56\u6BA7\u6BAA\u6BAB\u6BC8\u6BC7\u6C04\u6C03\u6C06\u6FAD\u6FCB\u6FA3\u6FC7\u6FBC\u6FCE\u6FC8\u6F5E\u6FC4\u6FBD\u6F9E\u6FCA\u6FA8\u7004\u6FA5\u6FAE\u6FBA\u6FAC\u6FAA\u6FCF\u6FBF\u6FB8\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[233].length; ++j)
                if (D[233][j].charCodeAt(0) !== 65533) {
                    e2[D[233][j]] = 59648 + j;
                    d[59648 + j] = D[233][j];
                }
            D[234] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6FA2\u6FC9\u6FAB\u6FCD\u6FAF\u6FB2\u6FB0\u71C5\u71C2\u71BF\u71B8\u71D6\u71C0\u71C1\u71CB\u71D4\u71CA\u71C7\u71CF\u71BD\u71D8\u71BC\u71C6\u71DA\u71DB\u729D\u729E\u7369\u7366\u7367\u736C\u7365\u736B\u736A\u747F\u749A\u74A0\u7494\u7492\u7495\u74A1\u750B\u7580\u762F\u762D\u7631\u763D\u7633\u763C\u7635\u7632\u7630\u76BB\u76E6\u779A\u779D\u77A1\u779C\u779B\u77A2\u77A3\u7795\u7799\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7797\u78DD\u78E9\u78E5\u78EA\u78DE\u78E3\u78DB\u78E1\u78E2\u78ED\u78DF\u78E0\u79A4\u7A44\u7A48\u7A47\u7AB6\u7AB8\u7AB5\u7AB1\u7AB7\u7BDE\u7BE3\u7BE7\u7BDD\u7BD5\u7BE5\u7BDA\u7BE8\u7BF9\u7BD4\u7BEA\u7BE2\u7BDC\u7BEB\u7BD8\u7BDF\u7CD2\u7CD4\u7CD7\u7CD0\u7CD1\u7E12\u7E21\u7E17\u7E0C\u7E1F\u7E20\u7E13\u7E0E\u7E1C\u7E15\u7E1A\u7E22\u7E0B\u7E0F\u7E16\u7E0D\u7E14\u7E25\u7E24\u7F43\u7F7B\u7F7C\u7F7A\u7FB1\u7FEF\u802A\u8029\u806C\u81B1\u81A6\u81AE\u81B9\u81B5\u81AB\u81B0\u81AC\u81B4\u81B2\u81B7\u81A7\u81F2\u8255\u8256\u8257\u8556\u8545\u856B\u854D\u8553\u8561\u8558\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[234].length; ++j)
                if (D[234][j].charCodeAt(0) !== 65533) {
                    e2[D[234][j]] = 59904 + j;
                    d[59904 + j] = D[234][j];
                }
            D[235] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8540\u8546\u8564\u8541\u8562\u8544\u8551\u8547\u8563\u853E\u855B\u8571\u854E\u856E\u8575\u8555\u8567\u8560\u858C\u8566\u855D\u8554\u8565\u856C\u8663\u8665\u8664\u879B\u878F\u8797\u8793\u8792\u8788\u8781\u8796\u8798\u8779\u8787\u87A3\u8785\u8790\u8791\u879D\u8784\u8794\u879C\u879A\u8789\u891E\u8926\u8930\u892D\u892E\u8927\u8931\u8922\u8929\u8923\u892F\u892C\u891F\u89F1\u8AE0\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8AE2\u8AF2\u8AF4\u8AF5\u8ADD\u8B14\u8AE4\u8ADF\u8AF0\u8AC8\u8ADE\u8AE1\u8AE8\u8AFF\u8AEF\u8AFB\u8C91\u8C92\u8C90\u8CF5\u8CEE\u8CF1\u8CF0\u8CF3\u8D6C\u8D6E\u8DA5\u8DA7\u8E33\u8E3E\u8E38\u8E40\u8E45\u8E36\u8E3C\u8E3D\u8E41\u8E30\u8E3F\u8EBD\u8F36\u8F2E\u8F35\u8F32\u8F39\u8F37\u8F34\u9076\u9079\u907B\u9086\u90FA\u9133\u9135\u9136\u9193\u9190\u9191\u918D\u918F\u9327\u931E\u9308\u931F\u9306\u930F\u937A\u9338\u933C\u931B\u9323\u9312\u9301\u9346\u932D\u930E\u930D\u92CB\u931D\u92FA\u9325\u9313\u92F9\u92F7\u9334\u9302\u9324\u92FF\u9329\u9339\u9335\u932A\u9314\u930C\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[235].length; ++j)
                if (D[235][j].charCodeAt(0) !== 65533) {
                    e2[D[235][j]] = 60160 + j;
                    d[60160 + j] = D[235][j];
                }
            D[236] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u930B\u92FE\u9309\u9300\u92FB\u9316\u95BC\u95CD\u95BE\u95B9\u95BA\u95B6\u95BF\u95B5\u95BD\u96A9\u96D4\u970B\u9712\u9710\u9799\u9797\u9794\u97F0\u97F8\u9835\u982F\u9832\u9924\u991F\u9927\u9929\u999E\u99EE\u99EC\u99E5\u99E4\u99F0\u99E3\u99EA\u99E9\u99E7\u9AB9\u9ABF\u9AB4\u9ABB\u9AF6\u9AFA\u9AF9\u9AF7\u9B33\u9B80\u9B85\u9B87\u9B7C\u9B7E\u9B7B\u9B82\u9B93\u9B92\u9B90\u9B7A\u9B95\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9B7D\u9B88\u9D25\u9D17\u9D20\u9D1E\u9D14\u9D29\u9D1D\u9D18\u9D22\u9D10\u9D19\u9D1F\u9E88\u9E86\u9E87\u9EAE\u9EAD\u9ED5\u9ED6\u9EFA\u9F12\u9F3D\u5126\u5125\u5122\u5124\u5120\u5129\u52F4\u5693\u568C\u568D\u5686\u5684\u5683\u567E\u5682\u567F\u5681\u58D6\u58D4\u58CF\u58D2\u5B2D\u5B25\u5B32\u5B23\u5B2C\u5B27\u5B26\u5B2F\u5B2E\u5B7B\u5BF1\u5BF2\u5DB7\u5E6C\u5E6A\u5FBE\u5FBB\u61C3\u61B5\u61BC\u61E7\u61E0\u61E5\u61E4\u61E8\u61DE\u64EF\u64E9\u64E3\u64EB\u64E4\u64E8\u6581\u6580\u65B6\u65DA\u66D2\u6A8D\u6A96\u6A81\u6AA5\u6A89\u6A9F\u6A9B\u6AA1\u6A9E\u6A87\u6A93\u6A8E\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[236].length; ++j)
                if (D[236][j].charCodeAt(0) !== 65533) {
                    e2[D[236][j]] = 60416 + j;
                    d[60416 + j] = D[236][j];
                }
            D[237] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6A95\u6A83\u6AA8\u6AA4\u6A91\u6A7F\u6AA6\u6A9A\u6A85\u6A8C\u6A92\u6B5B\u6BAD\u6C09\u6FCC\u6FA9\u6FF4\u6FD4\u6FE3\u6FDC\u6FED\u6FE7\u6FE6\u6FDE\u6FF2\u6FDD\u6FE2\u6FE8\u71E1\u71F1\u71E8\u71F2\u71E4\u71F0\u71E2\u7373\u736E\u736F\u7497\u74B2\u74AB\u7490\u74AA\u74AD\u74B1\u74A5\u74AF\u7510\u7511\u7512\u750F\u7584\u7643\u7648\u7649\u7647\u76A4\u76E9\u77B5\u77AB\u77B2\u77B7\u77B6\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u77B4\u77B1\u77A8\u77F0\u78F3\u78FD\u7902\u78FB\u78FC\u78F2\u7905\u78F9\u78FE\u7904\u79AB\u79A8\u7A5C\u7A5B\u7A56\u7A58\u7A54\u7A5A\u7ABE\u7AC0\u7AC1\u7C05\u7C0F\u7BF2\u7C00\u7BFF\u7BFB\u7C0E\u7BF4\u7C0B\u7BF3\u7C02\u7C09\u7C03\u7C01\u7BF8\u7BFD\u7C06\u7BF0\u7BF1\u7C10\u7C0A\u7CE8\u7E2D\u7E3C\u7E42\u7E33\u9848\u7E38\u7E2A\u7E49\u7E40\u7E47\u7E29\u7E4C\u7E30\u7E3B\u7E36\u7E44\u7E3A\u7F45\u7F7F\u7F7E\u7F7D\u7FF4\u7FF2\u802C\u81BB\u81C4\u81CC\u81CA\u81C5\u81C7\u81BC\u81E9\u825B\u825A\u825C\u8583\u8580\u858F\u85A7\u8595\u85A0\u858B\u85A3\u857B\u85A4\u859A\u859E\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[237].length; ++j)
                if (D[237][j].charCodeAt(0) !== 65533) {
                    e2[D[237][j]] = 60672 + j;
                    d[60672 + j] = D[237][j];
                }
            D[238] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8577\u857C\u8589\u85A1\u857A\u8578\u8557\u858E\u8596\u8586\u858D\u8599\u859D\u8581\u85A2\u8582\u8588\u8585\u8579\u8576\u8598\u8590\u859F\u8668\u87BE\u87AA\u87AD\u87C5\u87B0\u87AC\u87B9\u87B5\u87BC\u87AE\u87C9\u87C3\u87C2\u87CC\u87B7\u87AF\u87C4\u87CA\u87B4\u87B6\u87BF\u87B8\u87BD\u87DE\u87B2\u8935\u8933\u893C\u893E\u8941\u8952\u8937\u8942\u89AD\u89AF\u89AE\u89F2\u89F3\u8B1E\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8B18\u8B16\u8B11\u8B05\u8B0B\u8B22\u8B0F\u8B12\u8B15\u8B07\u8B0D\u8B08\u8B06\u8B1C\u8B13\u8B1A\u8C4F\u8C70\u8C72\u8C71\u8C6F\u8C95\u8C94\u8CF9\u8D6F\u8E4E\u8E4D\u8E53\u8E50\u8E4C\u8E47\u8F43\u8F40\u9085\u907E\u9138\u919A\u91A2\u919B\u9199\u919F\u91A1\u919D\u91A0\u93A1\u9383\u93AF\u9364\u9356\u9347\u937C\u9358\u935C\u9376\u9349\u9350\u9351\u9360\u936D\u938F\u934C\u936A\u9379\u9357\u9355\u9352\u934F\u9371\u9377\u937B\u9361\u935E\u9363\u9367\u9380\u934E\u9359\u95C7\u95C0\u95C9\u95C3\u95C5\u95B7\u96AE\u96B0\u96AC\u9720\u971F\u9718\u971D\u9719\u979A\u97A1\u979C\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[238].length; ++j)
                if (D[238][j].charCodeAt(0) !== 65533) {
                    e2[D[238][j]] = 60928 + j;
                    d[60928 + j] = D[238][j];
                }
            D[239] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u979E\u979D\u97D5\u97D4\u97F1\u9841\u9844\u984A\u9849\u9845\u9843\u9925\u992B\u992C\u992A\u9933\u9932\u992F\u992D\u9931\u9930\u9998\u99A3\u99A1\u9A02\u99FA\u99F4\u99F7\u99F9\u99F8\u99F6\u99FB\u99FD\u99FE\u99FC\u9A03\u9ABE\u9AFE\u9AFD\u9B01\u9AFC\u9B48\u9B9A\u9BA8\u9B9E\u9B9B\u9BA6\u9BA1\u9BA5\u9BA4\u9B86\u9BA2\u9BA0\u9BAF\u9D33\u9D41\u9D67\u9D36\u9D2E\u9D2F\u9D31\u9D38\u9D30\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9D45\u9D42\u9D43\u9D3E\u9D37\u9D40\u9D3D\u7FF5\u9D2D\u9E8A\u9E89\u9E8D\u9EB0\u9EC8\u9EDA\u9EFB\u9EFF\u9F24\u9F23\u9F22\u9F54\u9FA0\u5131\u512D\u512E\u5698\u569C\u5697\u569A\u569D\u5699\u5970\u5B3C\u5C69\u5C6A\u5DC0\u5E6D\u5E6E\u61D8\u61DF\u61ED\u61EE\u61F1\u61EA\u61F0\u61EB\u61D6\u61E9\u64FF\u6504\u64FD\u64F8\u6501\u6503\u64FC\u6594\u65DB\u66DA\u66DB\u66D8\u6AC5\u6AB9\u6ABD\u6AE1\u6AC6\u6ABA\u6AB6\u6AB7\u6AC7\u6AB4\u6AAD\u6B5E\u6BC9\u6C0B\u7007\u700C\u700D\u7001\u7005\u7014\u700E\u6FFF\u7000\u6FFB\u7026\u6FFC\u6FF7\u700A\u7201\u71FF\u71F9\u7203\u71FD\u7376\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[239].length; ++j)
                if (D[239][j].charCodeAt(0) !== 65533) {
                    e2[D[239][j]] = 61184 + j;
                    d[61184 + j] = D[239][j];
                }
            D[240] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u74B8\u74C0\u74B5\u74C1\u74BE\u74B6\u74BB\u74C2\u7514\u7513\u765C\u7664\u7659\u7650\u7653\u7657\u765A\u76A6\u76BD\u76EC\u77C2\u77BA\u78FF\u790C\u7913\u7914\u7909\u7910\u7912\u7911\u79AD\u79AC\u7A5F\u7C1C\u7C29\u7C19\u7C20\u7C1F\u7C2D\u7C1D\u7C26\u7C28\u7C22\u7C25\u7C30\u7E5C\u7E50\u7E56\u7E63\u7E58\u7E62\u7E5F\u7E51\u7E60\u7E57\u7E53\u7FB5\u7FB3\u7FF7\u7FF8\u8075\u81D1\u81D2\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u81D0\u825F\u825E\u85B4\u85C6\u85C0\u85C3\u85C2\u85B3\u85B5\u85BD\u85C7\u85C4\u85BF\u85CB\u85CE\u85C8\u85C5\u85B1\u85B6\u85D2\u8624\u85B8\u85B7\u85BE\u8669\u87E7\u87E6\u87E2\u87DB\u87EB\u87EA\u87E5\u87DF\u87F3\u87E4\u87D4\u87DC\u87D3\u87ED\u87D8\u87E3\u87A4\u87D7\u87D9\u8801\u87F4\u87E8\u87DD\u8953\u894B\u894F\u894C\u8946\u8950\u8951\u8949\u8B2A\u8B27\u8B23\u8B33\u8B30\u8B35\u8B47\u8B2F\u8B3C\u8B3E\u8B31\u8B25\u8B37\u8B26\u8B36\u8B2E\u8B24\u8B3B\u8B3D\u8B3A\u8C42\u8C75\u8C99\u8C98\u8C97\u8CFE\u8D04\u8D02\u8D00\u8E5C\u8E62\u8E60\u8E57\u8E56\u8E5E\u8E65\u8E67\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[240].length; ++j)
                if (D[240][j].charCodeAt(0) !== 65533) {
                    e2[D[240][j]] = 61440 + j;
                    d[61440 + j] = D[240][j];
                }
            D[241] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8E5B\u8E5A\u8E61\u8E5D\u8E69\u8E54\u8F46\u8F47\u8F48\u8F4B\u9128\u913A\u913B\u913E\u91A8\u91A5\u91A7\u91AF\u91AA\u93B5\u938C\u9392\u93B7\u939B\u939D\u9389\u93A7\u938E\u93AA\u939E\u93A6\u9395\u9388\u9399\u939F\u938D\u93B1\u9391\u93B2\u93A4\u93A8\u93B4\u93A3\u93A5\u95D2\u95D3\u95D1\u96B3\u96D7\u96DA\u5DC2\u96DF\u96D8\u96DD\u9723\u9722\u9725\u97AC\u97AE\u97A8\u97AB\u97A4\u97AA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u97A2\u97A5\u97D7\u97D9\u97D6\u97D8\u97FA\u9850\u9851\u9852\u98B8\u9941\u993C\u993A\u9A0F\u9A0B\u9A09\u9A0D\u9A04\u9A11\u9A0A\u9A05\u9A07\u9A06\u9AC0\u9ADC\u9B08\u9B04\u9B05\u9B29\u9B35\u9B4A\u9B4C\u9B4B\u9BC7\u9BC6\u9BC3\u9BBF\u9BC1\u9BB5\u9BB8\u9BD3\u9BB6\u9BC4\u9BB9\u9BBD\u9D5C\u9D53\u9D4F\u9D4A\u9D5B\u9D4B\u9D59\u9D56\u9D4C\u9D57\u9D52\u9D54\u9D5F\u9D58\u9D5A\u9E8E\u9E8C\u9EDF\u9F01\u9F00\u9F16\u9F25\u9F2B\u9F2A\u9F29\u9F28\u9F4C\u9F55\u5134\u5135\u5296\u52F7\u53B4\u56AB\u56AD\u56A6\u56A7\u56AA\u56AC\u58DA\u58DD\u58DB\u5912\u5B3D\u5B3E\u5B3F\u5DC3\u5E70\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[241].length; ++j)
                if (D[241][j].charCodeAt(0) !== 65533) {
                    e2[D[241][j]] = 61696 + j;
                    d[61696 + j] = D[241][j];
                }
            D[242] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5FBF\u61FB\u6507\u6510\u650D\u6509\u650C\u650E\u6584\u65DE\u65DD\u66DE\u6AE7\u6AE0\u6ACC\u6AD1\u6AD9\u6ACB\u6ADF\u6ADC\u6AD0\u6AEB\u6ACF\u6ACD\u6ADE\u6B60\u6BB0\u6C0C\u7019\u7027\u7020\u7016\u702B\u7021\u7022\u7023\u7029\u7017\u7024\u701C\u702A\u720C\u720A\u7207\u7202\u7205\u72A5\u72A6\u72A4\u72A3\u72A1\u74CB\u74C5\u74B7\u74C3\u7516\u7660\u77C9\u77CA\u77C4\u77F1\u791D\u791B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7921\u791C\u7917\u791E\u79B0\u7A67\u7A68\u7C33\u7C3C\u7C39\u7C2C\u7C3B\u7CEC\u7CEA\u7E76\u7E75\u7E78\u7E70\u7E77\u7E6F\u7E7A\u7E72\u7E74\u7E68\u7F4B\u7F4A\u7F83\u7F86\u7FB7\u7FFD\u7FFE\u8078\u81D7\u81D5\u8264\u8261\u8263\u85EB\u85F1\u85ED\u85D9\u85E1\u85E8\u85DA\u85D7\u85EC\u85F2\u85F8\u85D8\u85DF\u85E3\u85DC\u85D1\u85F0\u85E6\u85EF\u85DE\u85E2\u8800\u87FA\u8803\u87F6\u87F7\u8809\u880C\u880B\u8806\u87FC\u8808\u87FF\u880A\u8802\u8962\u895A\u895B\u8957\u8961\u895C\u8958\u895D\u8959\u8988\u89B7\u89B6\u89F6\u8B50\u8B48\u8B4A\u8B40\u8B53\u8B56\u8B54\u8B4B\u8B55\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[242].length; ++j)
                if (D[242][j].charCodeAt(0) !== 65533) {
                    e2[D[242][j]] = 61952 + j;
                    d[61952 + j] = D[242][j];
                }
            D[243] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8B51\u8B42\u8B52\u8B57\u8C43\u8C77\u8C76\u8C9A\u8D06\u8D07\u8D09\u8DAC\u8DAA\u8DAD\u8DAB\u8E6D\u8E78\u8E73\u8E6A\u8E6F\u8E7B\u8EC2\u8F52\u8F51\u8F4F\u8F50\u8F53\u8FB4\u9140\u913F\u91B0\u91AD\u93DE\u93C7\u93CF\u93C2\u93DA\u93D0\u93F9\u93EC\u93CC\u93D9\u93A9\u93E6\u93CA\u93D4\u93EE\u93E3\u93D5\u93C4\u93CE\u93C0\u93D2\u93E7\u957D\u95DA\u95DB\u96E1\u9729\u972B\u972C\u9728\u9726\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u97B3\u97B7\u97B6\u97DD\u97DE\u97DF\u985C\u9859\u985D\u9857\u98BF\u98BD\u98BB\u98BE\u9948\u9947\u9943\u99A6\u99A7\u9A1A\u9A15\u9A25\u9A1D\u9A24\u9A1B\u9A22\u9A20\u9A27\u9A23\u9A1E\u9A1C\u9A14\u9AC2\u9B0B\u9B0A\u9B0E\u9B0C\u9B37\u9BEA\u9BEB\u9BE0\u9BDE\u9BE4\u9BE6\u9BE2\u9BF0\u9BD4\u9BD7\u9BEC\u9BDC\u9BD9\u9BE5\u9BD5\u9BE1\u9BDA\u9D77\u9D81\u9D8A\u9D84\u9D88\u9D71\u9D80\u9D78\u9D86\u9D8B\u9D8C\u9D7D\u9D6B\u9D74\u9D75\u9D70\u9D69\u9D85\u9D73\u9D7B\u9D82\u9D6F\u9D79\u9D7F\u9D87\u9D68\u9E94\u9E91\u9EC0\u9EFC\u9F2D\u9F40\u9F41\u9F4D\u9F56\u9F57\u9F58\u5337\u56B2\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[243].length; ++j)
                if (D[243][j].charCodeAt(0) !== 65533) {
                    e2[D[243][j]] = 62208 + j;
                    d[62208 + j] = D[243][j];
                }
            D[244] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u56B5\u56B3\u58E3\u5B45\u5DC6\u5DC7\u5EEE\u5EEF\u5FC0\u5FC1\u61F9\u6517\u6516\u6515\u6513\u65DF\u66E8\u66E3\u66E4\u6AF3\u6AF0\u6AEA\u6AE8\u6AF9\u6AF1\u6AEE\u6AEF\u703C\u7035\u702F\u7037\u7034\u7031\u7042\u7038\u703F\u703A\u7039\u7040\u703B\u7033\u7041\u7213\u7214\u72A8\u737D\u737C\u74BA\u76AB\u76AA\u76BE\u76ED\u77CC\u77CE\u77CF\u77CD\u77F2\u7925\u7923\u7927\u7928\u7924\u7929\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u79B2\u7A6E\u7A6C\u7A6D\u7AF7\u7C49\u7C48\u7C4A\u7C47\u7C45\u7CEE\u7E7B\u7E7E\u7E81\u7E80\u7FBA\u7FFF\u8079\u81DB\u81D9\u820B\u8268\u8269\u8622\u85FF\u8601\u85FE\u861B\u8600\u85F6\u8604\u8609\u8605\u860C\u85FD\u8819\u8810\u8811\u8817\u8813\u8816\u8963\u8966\u89B9\u89F7\u8B60\u8B6A\u8B5D\u8B68\u8B63\u8B65\u8B67\u8B6D\u8DAE\u8E86\u8E88\u8E84\u8F59\u8F56\u8F57\u8F55\u8F58\u8F5A\u908D\u9143\u9141\u91B7\u91B5\u91B2\u91B3\u940B\u9413\u93FB\u9420\u940F\u9414\u93FE\u9415\u9410\u9428\u9419\u940D\u93F5\u9400\u93F7\u9407\u940E\u9416\u9412\u93FA\u9409\u93F8\u940A\u93FF\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[244].length; ++j)
                if (D[244][j].charCodeAt(0) !== 65533) {
                    e2[D[244][j]] = 62464 + j;
                    d[62464 + j] = D[244][j];
                }
            D[245] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u93FC\u940C\u93F6\u9411\u9406\u95DE\u95E0\u95DF\u972E\u972F\u97B9\u97BB\u97FD\u97FE\u9860\u9862\u9863\u985F\u98C1\u98C2\u9950\u994E\u9959\u994C\u994B\u9953\u9A32\u9A34\u9A31\u9A2C\u9A2A\u9A36\u9A29\u9A2E\u9A38\u9A2D\u9AC7\u9ACA\u9AC6\u9B10\u9B12\u9B11\u9C0B\u9C08\u9BF7\u9C05\u9C12\u9BF8\u9C40\u9C07\u9C0E\u9C06\u9C17\u9C14\u9C09\u9D9F\u9D99\u9DA4\u9D9D\u9D92\u9D98\u9D90\u9D9B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9DA0\u9D94\u9D9C\u9DAA\u9D97\u9DA1\u9D9A\u9DA2\u9DA8\u9D9E\u9DA3\u9DBF\u9DA9\u9D96\u9DA6\u9DA7\u9E99\u9E9B\u9E9A\u9EE5\u9EE4\u9EE7\u9EE6\u9F30\u9F2E\u9F5B\u9F60\u9F5E\u9F5D\u9F59\u9F91\u513A\u5139\u5298\u5297\u56C3\u56BD\u56BE\u5B48\u5B47\u5DCB\u5DCF\u5EF1\u61FD\u651B\u6B02\u6AFC\u6B03\u6AF8\u6B00\u7043\u7044\u704A\u7048\u7049\u7045\u7046\u721D\u721A\u7219\u737E\u7517\u766A\u77D0\u792D\u7931\u792F\u7C54\u7C53\u7CF2\u7E8A\u7E87\u7E88\u7E8B\u7E86\u7E8D\u7F4D\u7FBB\u8030\u81DD\u8618\u862A\u8626\u861F\u8623\u861C\u8619\u8627\u862E\u8621\u8620\u8629\u861E\u8625\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[245].length; ++j)
                if (D[245][j].charCodeAt(0) !== 65533) {
                    e2[D[245][j]] = 62720 + j;
                    d[62720 + j] = D[245][j];
                }
            D[246] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8829\u881D\u881B\u8820\u8824\u881C\u882B\u884A\u896D\u8969\u896E\u896B\u89FA\u8B79\u8B78\u8B45\u8B7A\u8B7B\u8D10\u8D14\u8DAF\u8E8E\u8E8C\u8F5E\u8F5B\u8F5D\u9146\u9144\u9145\u91B9\u943F\u943B\u9436\u9429\u943D\u943C\u9430\u9439\u942A\u9437\u942C\u9440\u9431\u95E5\u95E4\u95E3\u9735\u973A\u97BF\u97E1\u9864\u98C9\u98C6\u98C0\u9958\u9956\u9A39\u9A3D\u9A46\u9A44\u9A42\u9A41\u9A3A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9A3F\u9ACD\u9B15\u9B17\u9B18\u9B16\u9B3A\u9B52\u9C2B\u9C1D\u9C1C\u9C2C\u9C23\u9C28\u9C29\u9C24\u9C21\u9DB7\u9DB6\u9DBC\u9DC1\u9DC7\u9DCA\u9DCF\u9DBE\u9DC5\u9DC3\u9DBB\u9DB5\u9DCE\u9DB9\u9DBA\u9DAC\u9DC8\u9DB1\u9DAD\u9DCC\u9DB3\u9DCD\u9DB2\u9E7A\u9E9C\u9EEB\u9EEE\u9EED\u9F1B\u9F18\u9F1A\u9F31\u9F4E\u9F65\u9F64\u9F92\u4EB9\u56C6\u56C5\u56CB\u5971\u5B4B\u5B4C\u5DD5\u5DD1\u5EF2\u6521\u6520\u6526\u6522\u6B0B\u6B08\u6B09\u6C0D\u7055\u7056\u7057\u7052\u721E\u721F\u72A9\u737F\u74D8\u74D5\u74D9\u74D7\u766D\u76AD\u7935\u79B4\u7A70\u7A71\u7C57\u7C5C\u7C59\u7C5B\u7C5A\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[246].length; ++j)
                if (D[246][j].charCodeAt(0) !== 65533) {
                    e2[D[246][j]] = 62976 + j;
                    d[62976 + j] = D[246][j];
                }
            D[247] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7CF4\u7CF1\u7E91\u7F4F\u7F87\u81DE\u826B\u8634\u8635\u8633\u862C\u8632\u8636\u882C\u8828\u8826\u882A\u8825\u8971\u89BF\u89BE\u89FB\u8B7E\u8B84\u8B82\u8B86\u8B85\u8B7F\u8D15\u8E95\u8E94\u8E9A\u8E92\u8E90\u8E96\u8E97\u8F60\u8F62\u9147\u944C\u9450\u944A\u944B\u944F\u9447\u9445\u9448\u9449\u9446\u973F\u97E3\u986A\u9869\u98CB\u9954\u995B\u9A4E\u9A53\u9A54\u9A4C\u9A4F\u9A48\u9A4A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9A49\u9A52\u9A50\u9AD0\u9B19\u9B2B\u9B3B\u9B56\u9B55\u9C46\u9C48\u9C3F\u9C44\u9C39\u9C33\u9C41\u9C3C\u9C37\u9C34\u9C32\u9C3D\u9C36\u9DDB\u9DD2\u9DDE\u9DDA\u9DCB\u9DD0\u9DDC\u9DD1\u9DDF\u9DE9\u9DD9\u9DD8\u9DD6\u9DF5\u9DD5\u9DDD\u9EB6\u9EF0\u9F35\u9F33\u9F32\u9F42\u9F6B\u9F95\u9FA2\u513D\u5299\u58E8\u58E7\u5972\u5B4D\u5DD8\u882F\u5F4F\u6201\u6203\u6204\u6529\u6525\u6596\u66EB\u6B11\u6B12\u6B0F\u6BCA\u705B\u705A\u7222\u7382\u7381\u7383\u7670\u77D4\u7C67\u7C66\u7E95\u826C\u863A\u8640\u8639\u863C\u8631\u863B\u863E\u8830\u8832\u882E\u8833\u8976\u8974\u8973\u89FE\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[247].length; ++j)
                if (D[247][j].charCodeAt(0) !== 65533) {
                    e2[D[247][j]] = 63232 + j;
                    d[63232 + j] = D[247][j];
                }
            D[248] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8B8C\u8B8E\u8B8B\u8B88\u8C45\u8D19\u8E98\u8F64\u8F63\u91BC\u9462\u9455\u945D\u9457\u945E\u97C4\u97C5\u9800\u9A56\u9A59\u9B1E\u9B1F\u9B20\u9C52\u9C58\u9C50\u9C4A\u9C4D\u9C4B\u9C55\u9C59\u9C4C\u9C4E\u9DFB\u9DF7\u9DEF\u9DE3\u9DEB\u9DF8\u9DE4\u9DF6\u9DE1\u9DEE\u9DE6\u9DF2\u9DF0\u9DE2\u9DEC\u9DF4\u9DF3\u9DE8\u9DED\u9EC2\u9ED0\u9EF2\u9EF3\u9F06\u9F1C\u9F38\u9F37\u9F36\u9F43\u9F4F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9F71\u9F70\u9F6E\u9F6F\u56D3\u56CD\u5B4E\u5C6D\u652D\u66ED\u66EE\u6B13\u705F\u7061\u705D\u7060\u7223\u74DB\u74E5\u77D5\u7938\u79B7\u79B6\u7C6A\u7E97\u7F89\u826D\u8643\u8838\u8837\u8835\u884B\u8B94\u8B95\u8E9E\u8E9F\u8EA0\u8E9D\u91BE\u91BD\u91C2\u946B\u9468\u9469\u96E5\u9746\u9743\u9747\u97C7\u97E5\u9A5E\u9AD5\u9B59\u9C63\u9C67\u9C66\u9C62\u9C5E\u9C60\u9E02\u9DFE\u9E07\u9E03\u9E06\u9E05\u9E00\u9E01\u9E09\u9DFF\u9DFD\u9E04\u9EA0\u9F1E\u9F46\u9F74\u9F75\u9F76\u56D4\u652E\u65B8\u6B18\u6B19\u6B17\u6B1A\u7062\u7226\u72AA\u77D8\u77D9\u7939\u7C69\u7C6B\u7CF6\u7E9A\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[248].length; ++j)
                if (D[248][j].charCodeAt(0) !== 65533) {
                    e2[D[248][j]] = 63488 + j;
                    d[63488 + j] = D[248][j];
                }
            D[249] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7E98\u7E9B\u7E99\u81E0\u81E1\u8646\u8647\u8648\u8979\u897A\u897C\u897B\u89FF\u8B98\u8B99\u8EA5\u8EA4\u8EA3\u946E\u946D\u946F\u9471\u9473\u9749\u9872\u995F\u9C68\u9C6E\u9C6D\u9E0B\u9E0D\u9E10\u9E0F\u9E12\u9E11\u9EA1\u9EF5\u9F09\u9F47\u9F78\u9F7B\u9F7A\u9F79\u571E\u7066\u7C6F\u883C\u8DB2\u8EA6\u91C3\u9474\u9478\u9476\u9475\u9A60\u9C74\u9C73\u9C71\u9C75\u9E14\u9E13\u9EF6\u9F0A\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9FA4\u7068\u7065\u7CF7\u866A\u883E\u883D\u883F\u8B9E\u8C9C\u8EA9\u8EC9\u974B\u9873\u9874\u98CC\u9961\u99AB\u9A64\u9A66\u9A67\u9B24\u9E15\u9E17\u9F48\u6207\u6B1E\u7227\u864C\u8EA8\u9482\u9480\u9481\u9A69\u9A68\u9B2E\u9E19\u7229\u864B\u8B9F\u9483\u9C79\u9EB7\u7675\u9A6B\u9C7A\u9E1D\u7069\u706A\u9EA4\u9F7E\u9F49\u9F98\u7881\u92B9\u88CF\u58BB\u6052\u7CA7\u5AFA\u2554\u2566\u2557\u2560\u256C\u2563\u255A\u2569\u255D\u2552\u2564\u2555\u255E\u256A\u2561\u2558\u2567\u255B\u2553\u2565\u2556\u255F\u256B\u2562\u2559\u2568\u255C\u2551\u2550\u256D\u256E\u2570\u256F\u2593\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[249].length; ++j)
                if (D[249][j].charCodeAt(0) !== 65533) {
                    e2[D[249][j]] = 63744 + j;
                    d[63744 + j] = D[249][j];
                }
            return { enc: e2, dec: d };
        })();
        cptable2[1250] = (function () {
            var d =
                    '\0\x07\b	\n\v\f\r\x1B !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u20AC\uFFFD\u201A\uFFFD\u201E\u2026\u2020\u2021\uFFFD\u2030\u0160\u2039\u015A\u0164\u017D\u0179\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\u0161\u203A\u015B\u0165\u017E\u017A\xA0\u02C7\u02D8\u0141\xA4\u0104\xA6\xA7\xA8\xA9\u015E\xAB\xAC\xAD\xAE\u017B\xB0\xB1\u02DB\u0142\xB4\xB5\xB6\xB7\xB8\u0105\u015F\xBB\u013D\u02DD\u013E\u017C\u0154\xC1\xC2\u0102\xC4\u0139\u0106\xC7\u010C\xC9\u0118\xCB\u011A\xCD\xCE\u010E\u0110\u0143\u0147\xD3\xD4\u0150\xD6\xD7\u0158\u016E\xDA\u0170\xDC\xDD\u0162\xDF\u0155\xE1\xE2\u0103\xE4\u013A\u0107\xE7\u010D\xE9\u0119\xEB\u011B\xED\xEE\u010F\u0111\u0144\u0148\xF3\xF4\u0151\xF6\xF7\u0159\u016F\xFA\u0171\xFC\xFD\u0163\u02D9',
                D = [],
                e2 = {};
            for (var i2 = 0; i2 != d.length; ++i2) {
                if (d.charCodeAt(i2) !== 65533) e2[d.charAt(i2)] = i2;
                D[i2] = d.charAt(i2);
            }
            return { enc: e2, dec: D };
        })();
        cptable2[1251] = (function () {
            var d =
                    '\0\x07\b	\n\v\f\r\x1B !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u0402\u0403\u201A\u0453\u201E\u2026\u2020\u2021\u20AC\u2030\u0409\u2039\u040A\u040C\u040B\u040F\u0452\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\u0459\u203A\u045A\u045C\u045B\u045F\xA0\u040E\u045E\u0408\xA4\u0490\xA6\xA7\u0401\xA9\u0404\xAB\xAC\xAD\xAE\u0407\xB0\xB1\u0406\u0456\u0491\xB5\xB6\xB7\u0451\u2116\u0454\xBB\u0458\u0405\u0455\u0457\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F',
                D = [],
                e2 = {};
            for (var i2 = 0; i2 != d.length; ++i2) {
                if (d.charCodeAt(i2) !== 65533) e2[d.charAt(i2)] = i2;
                D[i2] = d.charAt(i2);
            }
            return { enc: e2, dec: D };
        })();
        cptable2[1252] = (function () {
            var d =
                    '\0\x07\b	\n\v\f\r\x1B !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\u0160\u2039\u0152\uFFFD\u017D\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\u0161\u203A\u0153\uFFFD\u017E\u0178\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF',
                D = [],
                e2 = {};
            for (var i2 = 0; i2 != d.length; ++i2) {
                if (d.charCodeAt(i2) !== 65533) e2[d.charAt(i2)] = i2;
                D[i2] = d.charAt(i2);
            }
            return { enc: e2, dec: D };
        })();
        cptable2[1253] = (function () {
            var d =
                    '\0\x07\b	\n\v\f\r\x1B !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\uFFFD\u2030\uFFFD\u2039\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\uFFFD\u203A\uFFFD\uFFFD\uFFFD\uFFFD\xA0\u0385\u0386\xA3\xA4\xA5\xA6\xA7\xA8\xA9\uFFFD\xAB\xAC\xAD\xAE\u2015\xB0\xB1\xB2\xB3\u0384\xB5\xB6\xB7\u0388\u0389\u038A\xBB\u038C\xBD\u038E\u038F\u0390\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\uFFFD\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\u03AA\u03AB\u03AC\u03AD\u03AE\u03AF\u03B0\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C2\u03C3\u03C4\u03C5\u03C6\u03C7\u03C8\u03C9\u03CA\u03CB\u03CC\u03CD\u03CE\uFFFD',
                D = [],
                e2 = {};
            for (var i2 = 0; i2 != d.length; ++i2) {
                if (d.charCodeAt(i2) !== 65533) e2[d.charAt(i2)] = i2;
                D[i2] = d.charAt(i2);
            }
            return { enc: e2, dec: D };
        })();
        cptable2[1254] = (function () {
            var d =
                    '\0\x07\b	\n\v\f\r\x1B !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\u0160\u2039\u0152\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\u0161\u203A\u0153\uFFFD\uFFFD\u0178\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\u011E\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\u0130\u015E\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\u011F\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\u0131\u015F\xFF',
                D = [],
                e2 = {};
            for (var i2 = 0; i2 != d.length; ++i2) {
                if (d.charCodeAt(i2) !== 65533) e2[d.charAt(i2)] = i2;
                D[i2] = d.charAt(i2);
            }
            return { enc: e2, dec: D };
        })();
        cptable2[1255] = (function () {
            var d =
                    '\0\x07\b	\n\v\f\r\x1B !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\uFFFD\u2039\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\uFFFD\u203A\uFFFD\uFFFD\uFFFD\uFFFD\xA0\xA1\xA2\xA3\u20AA\xA5\xA6\xA7\xA8\xA9\xD7\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xF7\xBB\xBC\xBD\xBE\xBF\u05B0\u05B1\u05B2\u05B3\u05B4\u05B5\u05B6\u05B7\u05B8\u05B9\uFFFD\u05BB\u05BC\u05BD\u05BE\u05BF\u05C0\u05C1\u05C2\u05C3\u05F0\u05F1\u05F2\u05F3\u05F4\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u05D0\u05D1\u05D2\u05D3\u05D4\u05D5\u05D6\u05D7\u05D8\u05D9\u05DA\u05DB\u05DC\u05DD\u05DE\u05DF\u05E0\u05E1\u05E2\u05E3\u05E4\u05E5\u05E6\u05E7\u05E8\u05E9\u05EA\uFFFD\uFFFD\u200E\u200F\uFFFD',
                D = [],
                e2 = {};
            for (var i2 = 0; i2 != d.length; ++i2) {
                if (d.charCodeAt(i2) !== 65533) e2[d.charAt(i2)] = i2;
                D[i2] = d.charAt(i2);
            }
            return { enc: e2, dec: D };
        })();
        cptable2[1256] = (function () {
            var d =
                    '\0\x07\b	\n\v\f\r\x1B !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u20AC\u067E\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\u0679\u2039\u0152\u0686\u0698\u0688\u06AF\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u06A9\u2122\u0691\u203A\u0153\u200C\u200D\u06BA\xA0\u060C\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\u06BE\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\u061B\xBB\xBC\xBD\xBE\u061F\u06C1\u0621\u0622\u0623\u0624\u0625\u0626\u0627\u0628\u0629\u062A\u062B\u062C\u062D\u062E\u062F\u0630\u0631\u0632\u0633\u0634\u0635\u0636\xD7\u0637\u0638\u0639\u063A\u0640\u0641\u0642\u0643\xE0\u0644\xE2\u0645\u0646\u0647\u0648\xE7\xE8\xE9\xEA\xEB\u0649\u064A\xEE\xEF\u064B\u064C\u064D\u064E\xF4\u064F\u0650\xF7\u0651\xF9\u0652\xFB\xFC\u200E\u200F\u06D2',
                D = [],
                e2 = {};
            for (var i2 = 0; i2 != d.length; ++i2) {
                if (d.charCodeAt(i2) !== 65533) e2[d.charAt(i2)] = i2;
                D[i2] = d.charAt(i2);
            }
            return { enc: e2, dec: D };
        })();
        cptable2[1257] = (function () {
            var d =
                    '\0\x07\b	\n\v\f\r\x1B !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u20AC\uFFFD\u201A\uFFFD\u201E\u2026\u2020\u2021\uFFFD\u2030\uFFFD\u2039\uFFFD\xA8\u02C7\xB8\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\uFFFD\u2122\uFFFD\u203A\uFFFD\xAF\u02DB\uFFFD\xA0\uFFFD\xA2\xA3\xA4\uFFFD\xA6\xA7\xD8\xA9\u0156\xAB\xAC\xAD\xAE\xC6\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xF8\xB9\u0157\xBB\xBC\xBD\xBE\xE6\u0104\u012E\u0100\u0106\xC4\xC5\u0118\u0112\u010C\xC9\u0179\u0116\u0122\u0136\u012A\u013B\u0160\u0143\u0145\xD3\u014C\xD5\xD6\xD7\u0172\u0141\u015A\u016A\xDC\u017B\u017D\xDF\u0105\u012F\u0101\u0107\xE4\xE5\u0119\u0113\u010D\xE9\u017A\u0117\u0123\u0137\u012B\u013C\u0161\u0144\u0146\xF3\u014D\xF5\xF6\xF7\u0173\u0142\u015B\u016B\xFC\u017C\u017E\u02D9',
                D = [],
                e2 = {};
            for (var i2 = 0; i2 != d.length; ++i2) {
                if (d.charCodeAt(i2) !== 65533) e2[d.charAt(i2)] = i2;
                D[i2] = d.charAt(i2);
            }
            return { enc: e2, dec: D };
        })();
        cptable2[1258] = (function () {
            var d =
                    '\0\x07\b	\n\v\f\r\x1B !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u20AC\uFFFD\u201A\u0192\u201E\u2026\u2020\u2021\u02C6\u2030\uFFFD\u2039\u0152\uFFFD\uFFFD\uFFFD\uFFFD\u2018\u2019\u201C\u201D\u2022\u2013\u2014\u02DC\u2122\uFFFD\u203A\u0153\uFFFD\uFFFD\u0178\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\u0102\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\u0300\xCD\xCE\xCF\u0110\xD1\u0309\xD3\xD4\u01A0\xD6\xD7\xD8\xD9\xDA\xDB\xDC\u01AF\u0303\xDF\xE0\xE1\xE2\u0103\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\u0301\xED\xEE\xEF\u0111\xF1\u0323\xF3\xF4\u01A1\xF6\xF7\xF8\xF9\xFA\xFB\xFC\u01B0\u20AB\xFF',
                D = [],
                e2 = {};
            for (var i2 = 0; i2 != d.length; ++i2) {
                if (d.charCodeAt(i2) !== 65533) e2[d.charAt(i2)] = i2;
                D[i2] = d.charAt(i2);
            }
            return { enc: e2, dec: D };
        })();
        cptable2[1e4] = (function () {
            var d =
                    '\0\x07\b	\n\v\f\r\x1B !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\u2020\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\xC6\xD8\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u2126\xE6\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u2044\xA4\u2039\u203A\uFB01\uFB02\u2021\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uFFFD\xD2\xDA\xDB\xD9\u0131\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7',
                D = [],
                e2 = {};
            for (var i2 = 0; i2 != d.length; ++i2) {
                if (d.charCodeAt(i2) !== 65533) e2[d.charAt(i2)] = i2;
                D[i2] = d.charAt(i2);
            }
            return { enc: e2, dec: D };
        })();
        cptable2[10006] = (function () {
            var d =
                    '\0\x07\b	\n\v\f\r\x1B !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC4\xB9\xB2\xC9\xB3\xD6\xDC\u0385\xE0\xE2\xE4\u0384\xA8\xE7\xE9\xE8\xEA\xEB\xA3\u2122\xEE\xEF\u2022\xBD\u2030\xF4\xF6\xA6\xAD\xF9\xFB\xFC\u2020\u0393\u0394\u0398\u039B\u039E\u03A0\xDF\xAE\xA9\u03A3\u03AA\xA7\u2260\xB0\u0387\u0391\xB1\u2264\u2265\xA5\u0392\u0395\u0396\u0397\u0399\u039A\u039C\u03A6\u03AB\u03A8\u03A9\u03AC\u039D\xAC\u039F\u03A1\u2248\u03A4\xAB\xBB\u2026\xA0\u03A5\u03A7\u0386\u0388\u0153\u2013\u2015\u201C\u201D\u2018\u2019\xF7\u0389\u038A\u038C\u038E\u03AD\u03AE\u03AF\u03CC\u038F\u03CD\u03B1\u03B2\u03C8\u03B4\u03B5\u03C6\u03B3\u03B7\u03B9\u03BE\u03BA\u03BB\u03BC\u03BD\u03BF\u03C0\u03CE\u03C1\u03C3\u03C4\u03B8\u03C9\u03C2\u03C7\u03C5\u03B6\u03CA\u03CB\u0390\u03B0\uFFFD',
                D = [],
                e2 = {};
            for (var i2 = 0; i2 != d.length; ++i2) {
                if (d.charCodeAt(i2) !== 65533) e2[d.charAt(i2)] = i2;
                D[i2] = d.charAt(i2);
            }
            return { enc: e2, dec: D };
        })();
        cptable2[10007] = (function () {
            var d =
                    '\0\x07\b	\n\v\f\r\x1B !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\u0410\u0411\u0412\u0413\u0414\u0415\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\u2020\xB0\xA2\xA3\xA7\u2022\xB6\u0406\xAE\xA9\u2122\u0402\u0452\u2260\u0403\u0453\u221E\xB1\u2264\u2265\u0456\xB5\u2202\u0408\u0404\u0454\u0407\u0457\u0409\u0459\u040A\u045A\u0458\u0405\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\u040B\u045B\u040C\u045C\u0455\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u201E\u040E\u045E\u040F\u045F\u2116\u0401\u0451\u044F\u0430\u0431\u0432\u0433\u0434\u0435\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\xA4',
                D = [],
                e2 = {};
            for (var i2 = 0; i2 != d.length; ++i2) {
                if (d.charCodeAt(i2) !== 65533) e2[d.charAt(i2)] = i2;
                D[i2] = d.charAt(i2);
            }
            return { enc: e2, dec: D };
        })();
        cptable2[10008] = (function () {
            var d = [],
                e2 = {},
                D = [],
                j;
            D[0] =
                '\0\x07\b	\n\v\f\r\x1B !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\x80\uF8D8\uF8D9\uF8DA\uF8DB\uF8DC\uF8DD\uF8DE\uF8DF\uF8E0\uF8E1\uF8E2\uF8E3\uF8E4\uF8E5\uF8E6\uF8E7\uF8E8\uF8E9\uF8EA\uF8EB\uF8EC\uF8ED\uF8EE\uF8EF\uF8F0\uF8F1\uF8F2\uF8F3\uF8F4\uF8F5\uF8F6\uF8F7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uF8F8\uF8F9\uF8FA\uF8FB\uF8FC\uF8FD\uF8FE\uF8FF'.split(
                    '',
                );
            for (j = 0; j != D[0].length; ++j)
                if (D[0][j].charCodeAt(0) !== 65533) {
                    e2[D[0][j]] = 0 + j;
                    d[0 + j] = D[0][j];
                }
            D[161] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u3000\u3001\u3002\u30FB\u02C9\u02C7\xA8\u3003\u3005\u2015\uFF5E\uFFFD\u2026\u2018\u2019\u201C\u201D\u3014\u3015\u3008\u3009\u300A\u300B\u300C\u300D\u300E\u300F\u3016\u3017\u3010\u3011\xB1\xD7\xF7\u2236\u2227\u2228\u2211\u220F\u222A\u2229\u2208\u2237\u221A\u22A5\u2225\u2220\u2312\u2299\u222B\u222E\u2261\u224C\u2248\u223D\u221D\u2260\u226E\u226F\u2264\u2265\u221E\u2235\u2234\u2642\u2640\xB0\u2032\u2033\u2103\uFF04\xA4\uFFE0\uFFE1\u2030\xA7\u2116\u2606\u2605\u25CB\u25CF\u25CE\u25C7\u25C6\u25A1\u25A0\u25B3\u25B2\u203B\u2192\u2190\u2191\u2193\u3013\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[161].length; ++j)
                if (D[161][j].charCodeAt(0) !== 65533) {
                    e2[D[161][j]] = 41216 + j;
                    d[41216 + j] = D[161][j];
                }
            D[162] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2488\u2489\u248A\u248B\u248C\u248D\u248E\u248F\u2490\u2491\u2492\u2493\u2494\u2495\u2496\u2497\u2498\u2499\u249A\u249B\u2474\u2475\u2476\u2477\u2478\u2479\u247A\u247B\u247C\u247D\u247E\u247F\u2480\u2481\u2482\u2483\u2484\u2485\u2486\u2487\u2460\u2461\u2462\u2463\u2464\u2465\u2466\u2467\u2468\u2469\uFFFD\uFFFD\u3220\u3221\u3222\u3223\u3224\u3225\u3226\u3227\u3228\u3229\uFFFD\uFFFD\u2160\u2161\u2162\u2163\u2164\u2165\u2166\u2167\u2168\u2169\u216A\u216B\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[162].length; ++j)
                if (D[162][j].charCodeAt(0) !== 65533) {
                    e2[D[162][j]] = 41472 + j;
                    d[41472 + j] = D[162][j];
                }
            D[163] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFF01\uFF02\uFF03\uFFE5\uFF05\uFF06\uFF07\uFF08\uFF09\uFF0A\uFF0B\uFF0C\uFF0D\uFF0E\uFF0F\uFF10\uFF11\uFF12\uFF13\uFF14\uFF15\uFF16\uFF17\uFF18\uFF19\uFF1A\uFF1B\uFF1C\uFF1D\uFF1E\uFF1F\uFF20\uFF21\uFF22\uFF23\uFF24\uFF25\uFF26\uFF27\uFF28\uFF29\uFF2A\uFF2B\uFF2C\uFF2D\uFF2E\uFF2F\uFF30\uFF31\uFF32\uFF33\uFF34\uFF35\uFF36\uFF37\uFF38\uFF39\uFF3A\uFF3B\uFF3C\uFF3D\uFF3E\uFF3F\uFF40\uFF41\uFF42\uFF43\uFF44\uFF45\uFF46\uFF47\uFF48\uFF49\uFF4A\uFF4B\uFF4C\uFF4D\uFF4E\uFF4F\uFF50\uFF51\uFF52\uFF53\uFF54\uFF55\uFF56\uFF57\uFF58\uFF59\uFF5A\uFF5B\uFF5C\uFF5D\uFFE3\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[163].length; ++j)
                if (D[163][j].charCodeAt(0) !== 65533) {
                    e2[D[163][j]] = 41728 + j;
                    d[41728 + j] = D[163][j];
                }
            D[164] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u3041\u3042\u3043\u3044\u3045\u3046\u3047\u3048\u3049\u304A\u304B\u304C\u304D\u304E\u304F\u3050\u3051\u3052\u3053\u3054\u3055\u3056\u3057\u3058\u3059\u305A\u305B\u305C\u305D\u305E\u305F\u3060\u3061\u3062\u3063\u3064\u3065\u3066\u3067\u3068\u3069\u306A\u306B\u306C\u306D\u306E\u306F\u3070\u3071\u3072\u3073\u3074\u3075\u3076\u3077\u3078\u3079\u307A\u307B\u307C\u307D\u307E\u307F\u3080\u3081\u3082\u3083\u3084\u3085\u3086\u3087\u3088\u3089\u308A\u308B\u308C\u308D\u308E\u308F\u3090\u3091\u3092\u3093\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[164].length; ++j)
                if (D[164][j].charCodeAt(0) !== 65533) {
                    e2[D[164][j]] = 41984 + j;
                    d[41984 + j] = D[164][j];
                }
            D[165] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u30A1\u30A2\u30A3\u30A4\u30A5\u30A6\u30A7\u30A8\u30A9\u30AA\u30AB\u30AC\u30AD\u30AE\u30AF\u30B0\u30B1\u30B2\u30B3\u30B4\u30B5\u30B6\u30B7\u30B8\u30B9\u30BA\u30BB\u30BC\u30BD\u30BE\u30BF\u30C0\u30C1\u30C2\u30C3\u30C4\u30C5\u30C6\u30C7\u30C8\u30C9\u30CA\u30CB\u30CC\u30CD\u30CE\u30CF\u30D0\u30D1\u30D2\u30D3\u30D4\u30D5\u30D6\u30D7\u30D8\u30D9\u30DA\u30DB\u30DC\u30DD\u30DE\u30DF\u30E0\u30E1\u30E2\u30E3\u30E4\u30E5\u30E6\u30E7\u30E8\u30E9\u30EA\u30EB\u30EC\u30ED\u30EE\u30EF\u30F0\u30F1\u30F2\u30F3\u30F4\u30F5\u30F6\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[165].length; ++j)
                if (D[165][j].charCodeAt(0) !== 65533) {
                    e2[D[165][j]] = 42240 + j;
                    d[42240 + j] = D[165][j];
                }
            D[166] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0391\u0392\u0393\u0394\u0395\u0396\u0397\u0398\u0399\u039A\u039B\u039C\u039D\u039E\u039F\u03A0\u03A1\u03A3\u03A4\u03A5\u03A6\u03A7\u03A8\u03A9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u03B1\u03B2\u03B3\u03B4\u03B5\u03B6\u03B7\u03B8\u03B9\u03BA\u03BB\u03BC\u03BD\u03BE\u03BF\u03C0\u03C1\u03C3\u03C4\u03C5\u03C6\u03C7\u03C8\u03C9\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[166].length; ++j)
                if (D[166][j].charCodeAt(0) !== 65533) {
                    e2[D[166][j]] = 42496 + j;
                    d[42496 + j] = D[166][j];
                }
            D[167] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0410\u0411\u0412\u0413\u0414\u0415\u0401\u0416\u0417\u0418\u0419\u041A\u041B\u041C\u041D\u041E\u041F\u0420\u0421\u0422\u0423\u0424\u0425\u0426\u0427\u0428\u0429\u042A\u042B\u042C\u042D\u042E\u042F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0430\u0431\u0432\u0433\u0434\u0435\u0451\u0436\u0437\u0438\u0439\u043A\u043B\u043C\u043D\u043E\u043F\u0440\u0441\u0442\u0443\u0444\u0445\u0446\u0447\u0448\u0449\u044A\u044B\u044C\u044D\u044E\u044F\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[167].length; ++j)
                if (D[167][j].charCodeAt(0) !== 65533) {
                    e2[D[167][j]] = 42752 + j;
                    d[42752 + j] = D[167][j];
                }
            D[168] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u0101\xE1\u01CE\xE0\u0113\xE9\u011B\xE8\u012B\xED\u01D0\xEC\u014D\xF3\u01D2\xF2\u016B\xFA\u01D4\xF9\u01D6\u01D8\u01DA\u01DC\xFC\xEA\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u3105\u3106\u3107\u3108\u3109\u310A\u310B\u310C\u310D\u310E\u310F\u3110\u3111\u3112\u3113\u3114\u3115\u3116\u3117\u3118\u3119\u311A\u311B\u311C\u311D\u311E\u311F\u3120\u3121\u3122\u3123\u3124\u3125\u3126\u3127\u3128\u3129\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[168].length; ++j)
                if (D[168][j].charCodeAt(0) !== 65533) {
                    e2[D[168][j]] = 43008 + j;
                    d[43008 + j] = D[168][j];
                }
            D[169] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u2500\u2501\u2502\u2503\u2504\u2505\u2506\u2507\u2508\u2509\u250A\u250B\u250C\u250D\u250E\u250F\u2510\u2511\u2512\u2513\u2514\u2515\u2516\u2517\u2518\u2519\u251A\u251B\u251C\u251D\u251E\u251F\u2520\u2521\u2522\u2523\u2524\u2525\u2526\u2527\u2528\u2529\u252A\u252B\u252C\u252D\u252E\u252F\u2530\u2531\u2532\u2533\u2534\u2535\u2536\u2537\u2538\u2539\u253A\u253B\u253C\u253D\u253E\u253F\u2540\u2541\u2542\u2543\u2544\u2545\u2546\u2547\u2548\u2549\u254A\u254B\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[169].length; ++j)
                if (D[169][j].charCodeAt(0) !== 65533) {
                    e2[D[169][j]] = 43264 + j;
                    d[43264 + j] = D[169][j];
                }
            D[176] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u554A\u963F\u57C3\u6328\u54CE\u5509\u54C0\u7691\u764C\u853C\u77EE\u827E\u788D\u7231\u9698\u978D\u6C28\u5B89\u4FFA\u6309\u6697\u5CB8\u80FA\u6848\u80AE\u6602\u76CE\u51F9\u6556\u71AC\u7FF1\u8884\u50B2\u5965\u61CA\u6FB3\u82AD\u634C\u6252\u53ED\u5427\u7B06\u516B\u75A4\u5DF4\u62D4\u8DCB\u9776\u628A\u8019\u575D\u9738\u7F62\u7238\u767D\u67CF\u767E\u6446\u4F70\u8D25\u62DC\u7A17\u6591\u73ED\u642C\u6273\u822C\u9881\u677F\u7248\u626E\u62CC\u4F34\u74E3\u534A\u529E\u7ECA\u90A6\u5E2E\u6886\u699C\u8180\u7ED1\u68D2\u78C5\u868C\u9551\u508D\u8C24\u82DE\u80DE\u5305\u8912\u5265\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[176].length; ++j)
                if (D[176][j].charCodeAt(0) !== 65533) {
                    e2[D[176][j]] = 45056 + j;
                    d[45056 + j] = D[176][j];
                }
            D[177] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8584\u96F9\u4FDD\u5821\u9971\u5B9D\u62B1\u62A5\u66B4\u8C79\u9C8D\u7206\u676F\u7891\u60B2\u5351\u5317\u8F88\u80CC\u8D1D\u94A1\u500D\u72C8\u5907\u60EB\u7119\u88AB\u5954\u82EF\u672C\u7B28\u5D29\u7EF7\u752D\u6CF5\u8E66\u8FF8\u903C\u9F3B\u6BD4\u9119\u7B14\u5F7C\u78A7\u84D6\u853D\u6BD5\u6BD9\u6BD6\u5E01\u5E87\u75F9\u95ED\u655D\u5F0A\u5FC5\u8F9F\u58C1\u81C2\u907F\u965B\u97AD\u8FB9\u7F16\u8D2C\u6241\u4FBF\u53D8\u535E\u8FA8\u8FA9\u8FAB\u904D\u6807\u5F6A\u8198\u8868\u9CD6\u618B\u522B\u762A\u5F6C\u658C\u6FD2\u6EE8\u5BBE\u6448\u5175\u51B0\u67C4\u4E19\u79C9\u997C\u70B3\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[177].length; ++j)
                if (D[177][j].charCodeAt(0) !== 65533) {
                    e2[D[177][j]] = 45312 + j;
                    d[45312 + j] = D[177][j];
                }
            D[178] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u75C5\u5E76\u73BB\u83E0\u64AD\u62E8\u94B5\u6CE2\u535A\u52C3\u640F\u94C2\u7B94\u4F2F\u5E1B\u8236\u8116\u818A\u6E24\u6CCA\u9A73\u6355\u535C\u54FA\u8865\u57E0\u4E0D\u5E03\u6B65\u7C3F\u90E8\u6016\u64E6\u731C\u88C1\u6750\u624D\u8D22\u776C\u8E29\u91C7\u5F69\u83DC\u8521\u9910\u53C2\u8695\u6B8B\u60ED\u60E8\u707F\u82CD\u8231\u4ED3\u6CA7\u85CF\u64CD\u7CD9\u69FD\u66F9\u8349\u5395\u7B56\u4FA7\u518C\u6D4B\u5C42\u8E6D\u63D2\u53C9\u832C\u8336\u67E5\u78B4\u643D\u5BDF\u5C94\u5DEE\u8BE7\u62C6\u67F4\u8C7A\u6400\u63BA\u8749\u998B\u8C17\u7F20\u94F2\u4EA7\u9610\u98A4\u660C\u7316\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[178].length; ++j)
                if (D[178][j].charCodeAt(0) !== 65533) {
                    e2[D[178][j]] = 45568 + j;
                    d[45568 + j] = D[178][j];
                }
            D[179] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u573A\u5C1D\u5E38\u957F\u507F\u80A0\u5382\u655E\u7545\u5531\u5021\u8D85\u6284\u949E\u671D\u5632\u6F6E\u5DE2\u5435\u7092\u8F66\u626F\u64A4\u63A3\u5F7B\u6F88\u90F4\u81E3\u8FB0\u5C18\u6668\u5FF1\u6C89\u9648\u8D81\u886C\u6491\u79F0\u57CE\u6A59\u6210\u5448\u4E58\u7A0B\u60E9\u6F84\u8BDA\u627F\u901E\u9A8B\u79E4\u5403\u75F4\u6301\u5319\u6C60\u8FDF\u5F1B\u9A70\u803B\u9F7F\u4F88\u5C3A\u8D64\u7FC5\u65A5\u70BD\u5145\u51B2\u866B\u5D07\u5BA0\u62BD\u916C\u7574\u8E0C\u7A20\u6101\u7B79\u4EC7\u7EF8\u7785\u4E11\u81ED\u521D\u51FA\u6A71\u53A8\u8E87\u9504\u96CF\u6EC1\u9664\u695A\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[179].length; ++j)
                if (D[179][j].charCodeAt(0) !== 65533) {
                    e2[D[179][j]] = 45824 + j;
                    d[45824 + j] = D[179][j];
                }
            D[180] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7840\u50A8\u77D7\u6410\u89E6\u5904\u63E3\u5DDD\u7A7F\u693D\u4F20\u8239\u5598\u4E32\u75AE\u7A97\u5E62\u5E8A\u95EF\u521B\u5439\u708A\u6376\u9524\u5782\u6625\u693F\u9187\u5507\u6DF3\u7EAF\u8822\u6233\u7EF0\u75B5\u8328\u78C1\u96CC\u8F9E\u6148\u74F7\u8BCD\u6B64\u523A\u8D50\u6B21\u806A\u8471\u56F1\u5306\u4ECE\u4E1B\u51D1\u7C97\u918B\u7C07\u4FC3\u8E7F\u7BE1\u7A9C\u6467\u5D14\u50AC\u8106\u7601\u7CB9\u6DEC\u7FE0\u6751\u5B58\u5BF8\u78CB\u64AE\u6413\u63AA\u632B\u9519\u642D\u8FBE\u7B54\u7629\u6253\u5927\u5446\u6B79\u50A3\u6234\u5E26\u6B86\u4EE3\u8D37\u888B\u5F85\u902E\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[180].length; ++j)
                if (D[180][j].charCodeAt(0) !== 65533) {
                    e2[D[180][j]] = 46080 + j;
                    d[46080 + j] = D[180][j];
                }
            D[181] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6020\u803D\u62C5\u4E39\u5355\u90F8\u63B8\u80C6\u65E6\u6C2E\u4F46\u60EE\u6DE1\u8BDE\u5F39\u86CB\u5F53\u6321\u515A\u8361\u6863\u5200\u6363\u8E48\u5012\u5C9B\u7977\u5BFC\u5230\u7A3B\u60BC\u9053\u76D7\u5FB7\u5F97\u7684\u8E6C\u706F\u767B\u7B49\u77AA\u51F3\u9093\u5824\u4F4E\u6EF4\u8FEA\u654C\u7B1B\u72C4\u6DA4\u7FDF\u5AE1\u62B5\u5E95\u5730\u8482\u7B2C\u5E1D\u5F1F\u9012\u7F14\u98A0\u6382\u6EC7\u7898\u70B9\u5178\u975B\u57AB\u7535\u4F43\u7538\u5E97\u60E6\u5960\u6DC0\u6BBF\u7889\u53FC\u96D5\u51CB\u5201\u6389\u540A\u9493\u8C03\u8DCC\u7239\u789F\u8776\u8FED\u8C0D\u53E0\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[181].length; ++j)
                if (D[181][j].charCodeAt(0) !== 65533) {
                    e2[D[181][j]] = 46336 + j;
                    d[46336 + j] = D[181][j];
                }
            D[182] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4E01\u76EF\u53EE\u9489\u9876\u9F0E\u952D\u5B9A\u8BA2\u4E22\u4E1C\u51AC\u8463\u61C2\u52A8\u680B\u4F97\u606B\u51BB\u6D1E\u515C\u6296\u6597\u9661\u8C46\u9017\u75D8\u90FD\u7763\u6BD2\u728A\u72EC\u8BFB\u5835\u7779\u8D4C\u675C\u9540\u809A\u5EA6\u6E21\u5992\u7AEF\u77ED\u953B\u6BB5\u65AD\u7F0E\u5806\u5151\u961F\u5BF9\u58A9\u5428\u8E72\u6566\u987F\u56E4\u949D\u76FE\u9041\u6387\u54C6\u591A\u593A\u579B\u8EB2\u6735\u8DFA\u8235\u5241\u60F0\u5815\u86FE\u5CE8\u9E45\u4FC4\u989D\u8BB9\u5A25\u6076\u5384\u627C\u904F\u9102\u997F\u6069\u800C\u513F\u8033\u5C14\u9975\u6D31\u4E8C\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[182].length; ++j)
                if (D[182][j].charCodeAt(0) !== 65533) {
                    e2[D[182][j]] = 46592 + j;
                    d[46592 + j] = D[182][j];
                }
            D[183] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8D30\u53D1\u7F5A\u7B4F\u4F10\u4E4F\u9600\u6CD5\u73D0\u85E9\u5E06\u756A\u7FFB\u6A0A\u77FE\u9492\u7E41\u51E1\u70E6\u53CD\u8FD4\u8303\u8D29\u72AF\u996D\u6CDB\u574A\u82B3\u65B9\u80AA\u623F\u9632\u59A8\u4EFF\u8BBF\u7EBA\u653E\u83F2\u975E\u5561\u98DE\u80A5\u532A\u8BFD\u5420\u80BA\u5E9F\u6CB8\u8D39\u82AC\u915A\u5429\u6C1B\u5206\u7EB7\u575F\u711A\u6C7E\u7C89\u594B\u4EFD\u5FFF\u6124\u7CAA\u4E30\u5C01\u67AB\u8702\u5CF0\u950B\u98CE\u75AF\u70FD\u9022\u51AF\u7F1D\u8BBD\u5949\u51E4\u4F5B\u5426\u592B\u6577\u80A4\u5B75\u6276\u62C2\u8F90\u5E45\u6C1F\u7B26\u4F0F\u4FD8\u670D\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[183].length; ++j)
                if (D[183][j].charCodeAt(0) !== 65533) {
                    e2[D[183][j]] = 46848 + j;
                    d[46848 + j] = D[183][j];
                }
            D[184] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6D6E\u6DAA\u798F\u88B1\u5F17\u752B\u629A\u8F85\u4FEF\u91DC\u65A7\u812F\u8151\u5E9C\u8150\u8D74\u526F\u8986\u8D4B\u590D\u5085\u4ED8\u961C\u7236\u8179\u8D1F\u5BCC\u8BA3\u9644\u5987\u7F1A\u5490\u5676\u560E\u8BE5\u6539\u6982\u9499\u76D6\u6E89\u5E72\u7518\u6746\u67D1\u7AFF\u809D\u8D76\u611F\u79C6\u6562\u8D63\u5188\u521A\u94A2\u7F38\u809B\u7EB2\u5C97\u6E2F\u6760\u7BD9\u768B\u9AD8\u818F\u7F94\u7CD5\u641E\u9550\u7A3F\u544A\u54E5\u6B4C\u6401\u6208\u9E3D\u80F3\u7599\u5272\u9769\u845B\u683C\u86E4\u9601\u9694\u94EC\u4E2A\u5404\u7ED9\u6839\u8DDF\u8015\u66F4\u5E9A\u7FB9\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[184].length; ++j)
                if (D[184][j].charCodeAt(0) !== 65533) {
                    e2[D[184][j]] = 47104 + j;
                    d[47104 + j] = D[184][j];
                }
            D[185] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u57C2\u803F\u6897\u5DE5\u653B\u529F\u606D\u9F9A\u4F9B\u8EAC\u516C\u5BAB\u5F13\u5DE9\u6C5E\u62F1\u8D21\u5171\u94A9\u52FE\u6C9F\u82DF\u72D7\u57A2\u6784\u8D2D\u591F\u8F9C\u83C7\u5495\u7B8D\u4F30\u6CBD\u5B64\u59D1\u9F13\u53E4\u86CA\u9AA8\u8C37\u80A1\u6545\u987E\u56FA\u96C7\u522E\u74DC\u5250\u5BE1\u6302\u8902\u4E56\u62D0\u602A\u68FA\u5173\u5B98\u51A0\u89C2\u7BA1\u9986\u7F50\u60EF\u704C\u8D2F\u5149\u5E7F\u901B\u7470\u89C4\u572D\u7845\u5F52\u9F9F\u95FA\u8F68\u9B3C\u8BE1\u7678\u6842\u67DC\u8DEA\u8D35\u523D\u8F8A\u6EDA\u68CD\u9505\u90ED\u56FD\u679C\u88F9\u8FC7\u54C8\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[185].length; ++j)
                if (D[185][j].charCodeAt(0) !== 65533) {
                    e2[D[185][j]] = 47360 + j;
                    d[47360 + j] = D[185][j];
                }
            D[186] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9AB8\u5B69\u6D77\u6C26\u4EA5\u5BB3\u9A87\u9163\u61A8\u90AF\u97E9\u542B\u6DB5\u5BD2\u51FD\u558A\u7F55\u7FF0\u64BC\u634D\u65F1\u61BE\u608D\u710A\u6C57\u6C49\u592F\u676D\u822A\u58D5\u568E\u8C6A\u6BEB\u90DD\u597D\u8017\u53F7\u6D69\u5475\u559D\u8377\u83CF\u6838\u79BE\u548C\u4F55\u5408\u76D2\u8C89\u9602\u6CB3\u6DB8\u8D6B\u8910\u9E64\u8D3A\u563F\u9ED1\u75D5\u5F88\u72E0\u6068\u54FC\u4EA8\u6A2A\u8861\u6052\u8F70\u54C4\u70D8\u8679\u9E3F\u6D2A\u5B8F\u5F18\u7EA2\u5589\u4FAF\u7334\u543C\u539A\u5019\u540E\u547C\u4E4E\u5FFD\u745A\u58F6\u846B\u80E1\u8774\u72D0\u7CCA\u6E56\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[186].length; ++j)
                if (D[186][j].charCodeAt(0) !== 65533) {
                    e2[D[186][j]] = 47616 + j;
                    d[47616 + j] = D[186][j];
                }
            D[187] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5F27\u864E\u552C\u62A4\u4E92\u6CAA\u6237\u82B1\u54D7\u534E\u733E\u6ED1\u753B\u5212\u5316\u8BDD\u69D0\u5F8A\u6000\u6DEE\u574F\u6B22\u73AF\u6853\u8FD8\u7F13\u6362\u60A3\u5524\u75EA\u8C62\u7115\u6DA3\u5BA6\u5E7B\u8352\u614C\u9EC4\u78FA\u8757\u7C27\u7687\u51F0\u60F6\u714C\u6643\u5E4C\u604D\u8C0E\u7070\u6325\u8F89\u5FBD\u6062\u86D4\u56DE\u6BC1\u6094\u6167\u5349\u60E0\u6666\u8D3F\u79FD\u4F1A\u70E9\u6C47\u8BB3\u8BF2\u7ED8\u8364\u660F\u5A5A\u9B42\u6D51\u6DF7\u8C41\u6D3B\u4F19\u706B\u83B7\u6216\u60D1\u970D\u8D27\u7978\u51FB\u573E\u57FA\u673A\u7578\u7A3D\u79EF\u7B95\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[187].length; ++j)
                if (D[187][j].charCodeAt(0) !== 65533) {
                    e2[D[187][j]] = 47872 + j;
                    d[47872 + j] = D[187][j];
                }
            D[188] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u808C\u9965\u8FF9\u6FC0\u8BA5\u9E21\u59EC\u7EE9\u7F09\u5409\u6781\u68D8\u8F91\u7C4D\u96C6\u53CA\u6025\u75BE\u6C72\u5373\u5AC9\u7EA7\u6324\u51E0\u810A\u5DF1\u84DF\u6280\u5180\u5B63\u4F0E\u796D\u5242\u60B8\u6D4E\u5BC4\u5BC2\u8BA1\u8BB0\u65E2\u5FCC\u9645\u5993\u7EE7\u7EAA\u5609\u67B7\u5939\u4F73\u5BB6\u52A0\u835A\u988A\u8D3E\u7532\u94BE\u5047\u7A3C\u4EF7\u67B6\u9A7E\u5AC1\u6B7C\u76D1\u575A\u5C16\u7B3A\u95F4\u714E\u517C\u80A9\u8270\u5978\u7F04\u8327\u68C0\u67EC\u78B1\u7877\u62E3\u6361\u7B80\u4FED\u526A\u51CF\u8350\u69DB\u9274\u8DF5\u8D31\u89C1\u952E\u7BAD\u4EF6\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[188].length; ++j)
                if (D[188][j].charCodeAt(0) !== 65533) {
                    e2[D[188][j]] = 48128 + j;
                    d[48128 + j] = D[188][j];
                }
            D[189] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5065\u8230\u5251\u996F\u6E10\u6E85\u6DA7\u5EFA\u50F5\u59DC\u5C06\u6D46\u6C5F\u7586\u848B\u6868\u5956\u8BB2\u5320\u9171\u964D\u8549\u6912\u7901\u7126\u80F6\u4EA4\u90CA\u6D47\u9A84\u5A07\u56BC\u6405\u94F0\u77EB\u4FA5\u811A\u72E1\u89D2\u997A\u7F34\u7EDE\u527F\u6559\u9175\u8F7F\u8F83\u53EB\u7A96\u63ED\u63A5\u7686\u79F8\u8857\u9636\u622A\u52AB\u8282\u6854\u6770\u6377\u776B\u7AED\u6D01\u7ED3\u89E3\u59D0\u6212\u85C9\u82A5\u754C\u501F\u4ECB\u75A5\u8BEB\u5C4A\u5DFE\u7B4B\u65A4\u91D1\u4ECA\u6D25\u895F\u7D27\u9526\u4EC5\u8C28\u8FDB\u9773\u664B\u7981\u8FD1\u70EC\u6D78\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[189].length; ++j)
                if (D[189][j].charCodeAt(0) !== 65533) {
                    e2[D[189][j]] = 48384 + j;
                    d[48384 + j] = D[189][j];
                }
            D[190] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5C3D\u52B2\u8346\u5162\u830E\u775B\u6676\u9CB8\u4EAC\u60CA\u7CBE\u7CB3\u7ECF\u4E95\u8B66\u666F\u9888\u9759\u5883\u656C\u955C\u5F84\u75C9\u9756\u7ADF\u7ADE\u51C0\u70AF\u7A98\u63EA\u7A76\u7EA0\u7396\u97ED\u4E45\u7078\u4E5D\u9152\u53A9\u6551\u65E7\u81FC\u8205\u548E\u5C31\u759A\u97A0\u62D8\u72D9\u75BD\u5C45\u9A79\u83CA\u5C40\u5480\u77E9\u4E3E\u6CAE\u805A\u62D2\u636E\u5DE8\u5177\u8DDD\u8E1E\u952F\u4FF1\u53E5\u60E7\u70AC\u5267\u6350\u9E43\u5A1F\u5026\u7737\u5377\u7EE2\u6485\u652B\u6289\u6398\u5014\u7235\u89C9\u51B3\u8BC0\u7EDD\u5747\u83CC\u94A7\u519B\u541B\u5CFB\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[190].length; ++j)
                if (D[190][j].charCodeAt(0) !== 65533) {
                    e2[D[190][j]] = 48640 + j;
                    d[48640 + j] = D[190][j];
                }
            D[191] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4FCA\u7AE3\u6D5A\u90E1\u9A8F\u5580\u5496\u5361\u54AF\u5F00\u63E9\u6977\u51EF\u6168\u520A\u582A\u52D8\u574E\u780D\u770B\u5EB7\u6177\u7CE0\u625B\u6297\u4EA2\u7095\u8003\u62F7\u70E4\u9760\u5777\u82DB\u67EF\u68F5\u78D5\u9897\u79D1\u58F3\u54B3\u53EF\u6E34\u514B\u523B\u5BA2\u8BFE\u80AF\u5543\u57A6\u6073\u5751\u542D\u7A7A\u6050\u5B54\u63A7\u62A0\u53E3\u6263\u5BC7\u67AF\u54ED\u7A9F\u82E6\u9177\u5E93\u88E4\u5938\u57AE\u630E\u8DE8\u80EF\u5757\u7B77\u4FA9\u5FEB\u5BBD\u6B3E\u5321\u7B50\u72C2\u6846\u77FF\u7736\u65F7\u51B5\u4E8F\u76D4\u5CBF\u7AA5\u8475\u594E\u9B41\u5080\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[191].length; ++j)
                if (D[191][j].charCodeAt(0) !== 65533) {
                    e2[D[191][j]] = 48896 + j;
                    d[48896 + j] = D[191][j];
                }
            D[192] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9988\u6127\u6E83\u5764\u6606\u6346\u56F0\u62EC\u6269\u5ED3\u9614\u5783\u62C9\u5587\u8721\u814A\u8FA3\u5566\u83B1\u6765\u8D56\u84DD\u5A6A\u680F\u62E6\u7BEE\u9611\u5170\u6F9C\u8C30\u63FD\u89C8\u61D2\u7F06\u70C2\u6EE5\u7405\u6994\u72FC\u5ECA\u90CE\u6717\u6D6A\u635E\u52B3\u7262\u8001\u4F6C\u59E5\u916A\u70D9\u6D9D\u52D2\u4E50\u96F7\u956D\u857E\u78CA\u7D2F\u5121\u5792\u64C2\u808B\u7C7B\u6CEA\u68F1\u695E\u51B7\u5398\u68A8\u7281\u9ECE\u7BF1\u72F8\u79BB\u6F13\u7406\u674E\u91CC\u9CA4\u793C\u8389\u8354\u540F\u6817\u4E3D\u5389\u52B1\u783E\u5386\u5229\u5088\u4F8B\u4FD0\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[192].length; ++j)
                if (D[192][j].charCodeAt(0) !== 65533) {
                    e2[D[192][j]] = 49152 + j;
                    d[49152 + j] = D[192][j];
                }
            D[193] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u75E2\u7ACB\u7C92\u6CA5\u96B6\u529B\u7483\u54E9\u4FE9\u8054\u83B2\u8FDE\u9570\u5EC9\u601C\u6D9F\u5E18\u655B\u8138\u94FE\u604B\u70BC\u7EC3\u7CAE\u51C9\u6881\u7CB1\u826F\u4E24\u8F86\u91CF\u667E\u4EAE\u8C05\u64A9\u804A\u50DA\u7597\u71CE\u5BE5\u8FBD\u6F66\u4E86\u6482\u9563\u5ED6\u6599\u5217\u88C2\u70C8\u52A3\u730E\u7433\u6797\u78F7\u9716\u4E34\u90BB\u9CDE\u6DCB\u51DB\u8D41\u541D\u62CE\u73B2\u83F1\u96F6\u9F84\u94C3\u4F36\u7F9A\u51CC\u7075\u9675\u5CAD\u9886\u53E6\u4EE4\u6E9C\u7409\u69B4\u786B\u998F\u7559\u5218\u7624\u6D41\u67F3\u516D\u9F99\u804B\u5499\u7B3C\u7ABF\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[193].length; ++j)
                if (D[193][j].charCodeAt(0) !== 65533) {
                    e2[D[193][j]] = 49408 + j;
                    d[49408 + j] = D[193][j];
                }
            D[194] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9686\u5784\u62E2\u9647\u697C\u5A04\u6402\u7BD3\u6F0F\u964B\u82A6\u5362\u9885\u5E90\u7089\u63B3\u5364\u864F\u9C81\u9E93\u788C\u9732\u8DEF\u8D42\u9E7F\u6F5E\u7984\u5F55\u9646\u622E\u9A74\u5415\u94DD\u4FA3\u65C5\u5C65\u5C61\u7F15\u8651\u6C2F\u5F8B\u7387\u6EE4\u7EFF\u5CE6\u631B\u5B6A\u6EE6\u5375\u4E71\u63A0\u7565\u62A1\u8F6E\u4F26\u4ED1\u6CA6\u7EB6\u8BBA\u841D\u87BA\u7F57\u903B\u9523\u7BA9\u9AA1\u88F8\u843D\u6D1B\u9A86\u7EDC\u5988\u9EBB\u739B\u7801\u8682\u9A6C\u9A82\u561B\u5417\u57CB\u4E70\u9EA6\u5356\u8FC8\u8109\u7792\u9992\u86EE\u6EE1\u8513\u66FC\u6162\u6F2B\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[194].length; ++j)
                if (D[194][j].charCodeAt(0) !== 65533) {
                    e2[D[194][j]] = 49664 + j;
                    d[49664 + j] = D[194][j];
                }
            D[195] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8C29\u8292\u832B\u76F2\u6C13\u5FD9\u83BD\u732B\u8305\u951A\u6BDB\u77DB\u94C6\u536F\u8302\u5192\u5E3D\u8C8C\u8D38\u4E48\u73AB\u679A\u6885\u9176\u9709\u7164\u6CA1\u7709\u5A92\u9541\u6BCF\u7F8E\u6627\u5BD0\u59B9\u5A9A\u95E8\u95F7\u4EEC\u840C\u8499\u6AAC\u76DF\u9530\u731B\u68A6\u5B5F\u772F\u919A\u9761\u7CDC\u8FF7\u8C1C\u5F25\u7C73\u79D8\u89C5\u6CCC\u871C\u5BC6\u5E42\u68C9\u7720\u7EF5\u5195\u514D\u52C9\u5A29\u7F05\u9762\u82D7\u63CF\u7784\u85D0\u79D2\u6E3A\u5E99\u5999\u8511\u706D\u6C11\u62BF\u76BF\u654F\u60AF\u95FD\u660E\u879F\u9E23\u94ED\u540D\u547D\u8C2C\u6478\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[195].length; ++j)
                if (D[195][j].charCodeAt(0) !== 65533) {
                    e2[D[195][j]] = 49920 + j;
                    d[49920 + j] = D[195][j];
                }
            D[196] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6479\u8611\u6A21\u819C\u78E8\u6469\u9B54\u62B9\u672B\u83AB\u58A8\u9ED8\u6CAB\u6F20\u5BDE\u964C\u8C0B\u725F\u67D0\u62C7\u7261\u4EA9\u59C6\u6BCD\u5893\u66AE\u5E55\u52DF\u6155\u6728\u76EE\u7766\u7267\u7A46\u62FF\u54EA\u5450\u94A0\u90A3\u5A1C\u7EB3\u6C16\u4E43\u5976\u8010\u5948\u5357\u7537\u96BE\u56CA\u6320\u8111\u607C\u95F9\u6DD6\u5462\u9981\u5185\u5AE9\u80FD\u59AE\u9713\u502A\u6CE5\u5C3C\u62DF\u4F60\u533F\u817B\u9006\u6EBA\u852B\u62C8\u5E74\u78BE\u64B5\u637B\u5FF5\u5A18\u917F\u9E1F\u5C3F\u634F\u8042\u5B7D\u556E\u954A\u954D\u6D85\u60A8\u67E0\u72DE\u51DD\u5B81\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[196].length; ++j)
                if (D[196][j].charCodeAt(0) !== 65533) {
                    e2[D[196][j]] = 50176 + j;
                    d[50176 + j] = D[196][j];
                }
            D[197] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u62E7\u6CDE\u725B\u626D\u94AE\u7EBD\u8113\u6D53\u519C\u5F04\u5974\u52AA\u6012\u5973\u6696\u8650\u759F\u632A\u61E6\u7CEF\u8BFA\u54E6\u6B27\u9E25\u6BB4\u85D5\u5455\u5076\u6CA4\u556A\u8DB4\u722C\u5E15\u6015\u7436\u62CD\u6392\u724C\u5F98\u6E43\u6D3E\u6500\u6F58\u76D8\u78D0\u76FC\u7554\u5224\u53DB\u4E53\u5E9E\u65C1\u802A\u80D6\u629B\u5486\u5228\u70AE\u888D\u8DD1\u6CE1\u5478\u80DA\u57F9\u88F4\u8D54\u966A\u914D\u4F69\u6C9B\u55B7\u76C6\u7830\u62A8\u70F9\u6F8E\u5F6D\u84EC\u68DA\u787C\u7BF7\u81A8\u670B\u9E4F\u6367\u78B0\u576F\u7812\u9739\u6279\u62AB\u5288\u7435\u6BD7\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[197].length; ++j)
                if (D[197][j].charCodeAt(0) !== 65533) {
                    e2[D[197][j]] = 50432 + j;
                    d[50432 + j] = D[197][j];
                }
            D[198] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5564\u813E\u75B2\u76AE\u5339\u75DE\u50FB\u5C41\u8B6C\u7BC7\u504F\u7247\u9A97\u98D8\u6F02\u74E2\u7968\u6487\u77A5\u62FC\u9891\u8D2B\u54C1\u8058\u4E52\u576A\u82F9\u840D\u5E73\u51ED\u74F6\u8BC4\u5C4F\u5761\u6CFC\u9887\u5A46\u7834\u9B44\u8FEB\u7C95\u5256\u6251\u94FA\u4EC6\u8386\u8461\u83E9\u84B2\u57D4\u6734\u5703\u666E\u6D66\u8C31\u66DD\u7011\u671F\u6B3A\u6816\u621A\u59BB\u4E03\u51C4\u6F06\u67D2\u6C8F\u5176\u68CB\u5947\u6B67\u7566\u5D0E\u8110\u9F50\u65D7\u7948\u7941\u9A91\u8D77\u5C82\u4E5E\u4F01\u542F\u5951\u780C\u5668\u6C14\u8FC4\u5F03\u6C7D\u6CE3\u8BAB\u6390\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[198].length; ++j)
                if (D[198][j].charCodeAt(0) !== 65533) {
                    e2[D[198][j]] = 50688 + j;
                    d[50688 + j] = D[198][j];
                }
            D[199] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6070\u6D3D\u7275\u6266\u948E\u94C5\u5343\u8FC1\u7B7E\u4EDF\u8C26\u4E7E\u9ED4\u94B1\u94B3\u524D\u6F5C\u9063\u6D45\u8C34\u5811\u5D4C\u6B20\u6B49\u67AA\u545B\u8154\u7F8C\u5899\u8537\u5F3A\u62A2\u6A47\u9539\u6572\u6084\u6865\u77A7\u4E54\u4FA8\u5DE7\u9798\u64AC\u7FD8\u5CED\u4FCF\u7A8D\u5207\u8304\u4E14\u602F\u7A83\u94A6\u4FB5\u4EB2\u79E6\u7434\u52E4\u82B9\u64D2\u79BD\u5BDD\u6C81\u9752\u8F7B\u6C22\u503E\u537F\u6E05\u64CE\u6674\u6C30\u60C5\u9877\u8BF7\u5E86\u743C\u7A77\u79CB\u4E18\u90B1\u7403\u6C42\u56DA\u914B\u6CC5\u8D8B\u533A\u86C6\u66F2\u8EAF\u5C48\u9A71\u6E20\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[199].length; ++j)
                if (D[199][j].charCodeAt(0) !== 65533) {
                    e2[D[199][j]] = 50944 + j;
                    d[50944 + j] = D[199][j];
                }
            D[200] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u53D6\u5A36\u9F8B\u8DA3\u53BB\u5708\u98A7\u6743\u919B\u6CC9\u5168\u75CA\u62F3\u72AC\u5238\u529D\u7F3A\u7094\u7638\u5374\u9E4A\u69B7\u786E\u96C0\u88D9\u7FA4\u7136\u71C3\u5189\u67D3\u74E4\u58E4\u6518\u56B7\u8BA9\u9976\u6270\u7ED5\u60F9\u70ED\u58EC\u4EC1\u4EBA\u5FCD\u97E7\u4EFB\u8BA4\u5203\u598A\u7EAB\u6254\u4ECD\u65E5\u620E\u8338\u84C9\u8363\u878D\u7194\u6EB6\u5BB9\u7ED2\u5197\u63C9\u67D4\u8089\u8339\u8815\u5112\u5B7A\u5982\u8FB1\u4E73\u6C5D\u5165\u8925\u8F6F\u962E\u854A\u745E\u9510\u95F0\u6DA6\u82E5\u5F31\u6492\u6D12\u8428\u816E\u9CC3\u585E\u8D5B\u4E09\u53C1\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[200].length; ++j)
                if (D[200][j].charCodeAt(0) !== 65533) {
                    e2[D[200][j]] = 51200 + j;
                    d[51200 + j] = D[200][j];
                }
            D[201] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4F1E\u6563\u6851\u55D3\u4E27\u6414\u9A9A\u626B\u5AC2\u745F\u8272\u6DA9\u68EE\u50E7\u838E\u7802\u6740\u5239\u6C99\u7EB1\u50BB\u5565\u715E\u7B5B\u6652\u73CA\u82EB\u6749\u5C71\u5220\u717D\u886B\u95EA\u9655\u64C5\u8D61\u81B3\u5584\u6C55\u6247\u7F2E\u5892\u4F24\u5546\u8D4F\u664C\u4E0A\u5C1A\u88F3\u68A2\u634E\u7A0D\u70E7\u828D\u52FA\u97F6\u5C11\u54E8\u90B5\u7ECD\u5962\u8D4A\u86C7\u820C\u820D\u8D66\u6444\u5C04\u6151\u6D89\u793E\u8BBE\u7837\u7533\u547B\u4F38\u8EAB\u6DF1\u5A20\u7EC5\u795E\u6C88\u5BA1\u5A76\u751A\u80BE\u614E\u6E17\u58F0\u751F\u7525\u7272\u5347\u7EF3\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[201].length; ++j)
                if (D[201][j].charCodeAt(0) !== 65533) {
                    e2[D[201][j]] = 51456 + j;
                    d[51456 + j] = D[201][j];
                }
            D[202] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7701\u76DB\u5269\u80DC\u5723\u5E08\u5931\u72EE\u65BD\u6E7F\u8BD7\u5C38\u8671\u5341\u77F3\u62FE\u65F6\u4EC0\u98DF\u8680\u5B9E\u8BC6\u53F2\u77E2\u4F7F\u5C4E\u9A76\u59CB\u5F0F\u793A\u58EB\u4E16\u67FF\u4E8B\u62ED\u8A93\u901D\u52BF\u662F\u55DC\u566C\u9002\u4ED5\u4F8D\u91CA\u9970\u6C0F\u5E02\u6043\u5BA4\u89C6\u8BD5\u6536\u624B\u9996\u5B88\u5BFF\u6388\u552E\u53D7\u7626\u517D\u852C\u67A2\u68B3\u6B8A\u6292\u8F93\u53D4\u8212\u6DD1\u758F\u4E66\u8D4E\u5B70\u719F\u85AF\u6691\u66D9\u7F72\u8700\u9ECD\u9F20\u5C5E\u672F\u8FF0\u6811\u675F\u620D\u7AD6\u5885\u5EB6\u6570\u6F31\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[202].length; ++j)
                if (D[202][j].charCodeAt(0) !== 65533) {
                    e2[D[202][j]] = 51712 + j;
                    d[51712 + j] = D[202][j];
                }
            D[203] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6055\u5237\u800D\u6454\u8870\u7529\u5E05\u6813\u62F4\u971C\u53CC\u723D\u8C01\u6C34\u7761\u7A0E\u542E\u77AC\u987A\u821C\u8BF4\u7855\u6714\u70C1\u65AF\u6495\u5636\u601D\u79C1\u53F8\u4E1D\u6B7B\u8086\u5BFA\u55E3\u56DB\u4F3A\u4F3C\u9972\u5DF3\u677E\u8038\u6002\u9882\u9001\u5B8B\u8BBC\u8BF5\u641C\u8258\u64DE\u55FD\u82CF\u9165\u4FD7\u7D20\u901F\u7C9F\u50F3\u5851\u6EAF\u5BBF\u8BC9\u8083\u9178\u849C\u7B97\u867D\u968B\u968F\u7EE5\u9AD3\u788E\u5C81\u7A57\u9042\u96A7\u795F\u5B59\u635F\u7B0B\u84D1\u68AD\u5506\u7F29\u7410\u7D22\u9501\u6240\u584C\u4ED6\u5B83\u5979\u5854\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[203].length; ++j)
                if (D[203][j].charCodeAt(0) !== 65533) {
                    e2[D[203][j]] = 51968 + j;
                    d[51968 + j] = D[203][j];
                }
            D[204] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u736D\u631E\u8E4B\u8E0F\u80CE\u82D4\u62AC\u53F0\u6CF0\u915E\u592A\u6001\u6C70\u574D\u644A\u8D2A\u762B\u6EE9\u575B\u6A80\u75F0\u6F6D\u8C2D\u8C08\u5766\u6BEF\u8892\u78B3\u63A2\u53F9\u70AD\u6C64\u5858\u642A\u5802\u68E0\u819B\u5510\u7CD6\u5018\u8EBA\u6DCC\u8D9F\u70EB\u638F\u6D9B\u6ED4\u7EE6\u8404\u6843\u9003\u6DD8\u9676\u8BA8\u5957\u7279\u85E4\u817E\u75BC\u8A8A\u68AF\u5254\u8E22\u9511\u63D0\u9898\u8E44\u557C\u4F53\u66FF\u568F\u60D5\u6D95\u5243\u5C49\u5929\u6DFB\u586B\u7530\u751C\u606C\u8214\u8146\u6311\u6761\u8FE2\u773A\u8DF3\u8D34\u94C1\u5E16\u5385\u542C\u70C3\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[204].length; ++j)
                if (D[204][j].charCodeAt(0) !== 65533) {
                    e2[D[204][j]] = 52224 + j;
                    d[52224 + j] = D[204][j];
                }
            D[205] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6C40\u5EF7\u505C\u4EAD\u5EAD\u633A\u8247\u901A\u6850\u916E\u77B3\u540C\u94DC\u5F64\u7AE5\u6876\u6345\u7B52\u7EDF\u75DB\u5077\u6295\u5934\u900F\u51F8\u79C3\u7A81\u56FE\u5F92\u9014\u6D82\u5C60\u571F\u5410\u5154\u6E4D\u56E2\u63A8\u9893\u817F\u8715\u892A\u9000\u541E\u5C6F\u81C0\u62D6\u6258\u8131\u9E35\u9640\u9A6E\u9A7C\u692D\u59A5\u62D3\u553E\u6316\u54C7\u86D9\u6D3C\u5A03\u74E6\u889C\u6B6A\u5916\u8C4C\u5F2F\u6E7E\u73A9\u987D\u4E38\u70F7\u5B8C\u7897\u633D\u665A\u7696\u60CB\u5B9B\u5A49\u4E07\u8155\u6C6A\u738B\u4EA1\u6789\u7F51\u5F80\u65FA\u671B\u5FD8\u5984\u5A01\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[205].length; ++j)
                if (D[205][j].charCodeAt(0) !== 65533) {
                    e2[D[205][j]] = 52480 + j;
                    d[52480 + j] = D[205][j];
                }
            D[206] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5DCD\u5FAE\u5371\u97E6\u8FDD\u6845\u56F4\u552F\u60DF\u4E3A\u6F4D\u7EF4\u82C7\u840E\u59D4\u4F1F\u4F2A\u5C3E\u7EAC\u672A\u851A\u5473\u754F\u80C3\u5582\u9B4F\u4F4D\u6E2D\u8C13\u5C09\u6170\u536B\u761F\u6E29\u868A\u6587\u95FB\u7EB9\u543B\u7A33\u7D0A\u95EE\u55E1\u7FC1\u74EE\u631D\u8717\u6DA1\u7A9D\u6211\u65A1\u5367\u63E1\u6C83\u5DEB\u545C\u94A8\u4E4C\u6C61\u8BEC\u5C4B\u65E0\u829C\u68A7\u543E\u5434\u6BCB\u6B66\u4E94\u6342\u5348\u821E\u4F0D\u4FAE\u575E\u620A\u96FE\u6664\u7269\u52FF\u52A1\u609F\u8BEF\u6614\u7199\u6790\u897F\u7852\u77FD\u6670\u563B\u5438\u9521\u727A\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[206].length; ++j)
                if (D[206][j].charCodeAt(0) !== 65533) {
                    e2[D[206][j]] = 52736 + j;
                    d[52736 + j] = D[206][j];
                }
            D[207] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7A00\u606F\u5E0C\u6089\u819D\u5915\u60DC\u7184\u70EF\u6EAA\u6C50\u7280\u6A84\u88AD\u5E2D\u4E60\u5AB3\u559C\u94E3\u6D17\u7CFB\u9699\u620F\u7EC6\u778E\u867E\u5323\u971E\u8F96\u6687\u5CE1\u4FA0\u72ED\u4E0B\u53A6\u590F\u5413\u6380\u9528\u5148\u4ED9\u9C9C\u7EA4\u54B8\u8D24\u8854\u8237\u95F2\u6D8E\u5F26\u5ACC\u663E\u9669\u73B0\u732E\u53BF\u817A\u9985\u7FA1\u5BAA\u9677\u9650\u7EBF\u76F8\u53A2\u9576\u9999\u7BB1\u8944\u6E58\u4E61\u7FD4\u7965\u8BE6\u60F3\u54CD\u4EAB\u9879\u5DF7\u6A61\u50CF\u5411\u8C61\u8427\u785D\u9704\u524A\u54EE\u56A3\u9500\u6D88\u5BB5\u6DC6\u6653\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[207].length; ++j)
                if (D[207][j].charCodeAt(0) !== 65533) {
                    e2[D[207][j]] = 52992 + j;
                    d[52992 + j] = D[207][j];
                }
            D[208] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5C0F\u5B5D\u6821\u8096\u5578\u7B11\u6548\u6954\u4E9B\u6B47\u874E\u978B\u534F\u631F\u643A\u90AA\u659C\u80C1\u8C10\u5199\u68B0\u5378\u87F9\u61C8\u6CC4\u6CFB\u8C22\u5C51\u85AA\u82AF\u950C\u6B23\u8F9B\u65B0\u5FFB\u5FC3\u4FE1\u8845\u661F\u8165\u7329\u60FA\u5174\u5211\u578B\u5F62\u90A2\u884C\u9192\u5E78\u674F\u6027\u59D3\u5144\u51F6\u80F8\u5308\u6C79\u96C4\u718A\u4F11\u4FEE\u7F9E\u673D\u55C5\u9508\u79C0\u8896\u7EE3\u589F\u620C\u9700\u865A\u5618\u987B\u5F90\u8BB8\u84C4\u9157\u53D9\u65ED\u5E8F\u755C\u6064\u7D6E\u5A7F\u7EEA\u7EED\u8F69\u55A7\u5BA3\u60AC\u65CB\u7384\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[208].length; ++j)
                if (D[208][j].charCodeAt(0) !== 65533) {
                    e2[D[208][j]] = 53248 + j;
                    d[53248 + j] = D[208][j];
                }
            D[209] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9009\u7663\u7729\u7EDA\u9774\u859B\u5B66\u7A74\u96EA\u8840\u52CB\u718F\u5FAA\u65EC\u8BE2\u5BFB\u9A6F\u5DE1\u6B89\u6C5B\u8BAD\u8BAF\u900A\u8FC5\u538B\u62BC\u9E26\u9E2D\u5440\u4E2B\u82BD\u7259\u869C\u5D16\u8859\u6DAF\u96C5\u54D1\u4E9A\u8BB6\u7109\u54BD\u9609\u70DF\u6DF9\u76D0\u4E25\u7814\u8712\u5CA9\u5EF6\u8A00\u989C\u960E\u708E\u6CBF\u5944\u63A9\u773C\u884D\u6F14\u8273\u5830\u71D5\u538C\u781A\u96C1\u5501\u5F66\u7130\u5BB4\u8C1A\u9A8C\u6B83\u592E\u9E2F\u79E7\u6768\u626C\u4F6F\u75A1\u7F8A\u6D0B\u9633\u6C27\u4EF0\u75D2\u517B\u6837\u6F3E\u9080\u8170\u5996\u7476\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[209].length; ++j)
                if (D[209][j].charCodeAt(0) !== 65533) {
                    e2[D[209][j]] = 53504 + j;
                    d[53504 + j] = D[209][j];
                }
            D[210] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6447\u5C27\u9065\u7A91\u8C23\u59DA\u54AC\u8200\u836F\u8981\u8000\u6930\u564E\u8036\u7237\u91CE\u51B6\u4E5F\u9875\u6396\u4E1A\u53F6\u66F3\u814B\u591C\u6DB2\u4E00\u58F9\u533B\u63D6\u94F1\u4F9D\u4F0A\u8863\u9890\u5937\u9057\u79FB\u4EEA\u80F0\u7591\u6C82\u5B9C\u59E8\u5F5D\u6905\u8681\u501A\u5DF2\u4E59\u77E3\u4EE5\u827A\u6291\u6613\u9091\u5C79\u4EBF\u5F79\u81C6\u9038\u8084\u75AB\u4EA6\u88D4\u610F\u6BC5\u5FC6\u4E49\u76CA\u6EA2\u8BE3\u8BAE\u8C0A\u8BD1\u5F02\u7FFC\u7FCC\u7ECE\u8335\u836B\u56E0\u6BB7\u97F3\u9634\u59FB\u541F\u94F6\u6DEB\u5BC5\u996E\u5C39\u5F15\u9690\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[210].length; ++j)
                if (D[210][j].charCodeAt(0) !== 65533) {
                    e2[D[210][j]] = 53760 + j;
                    d[53760 + j] = D[210][j];
                }
            D[211] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5370\u82F1\u6A31\u5A74\u9E70\u5E94\u7F28\u83B9\u8424\u8425\u8367\u8747\u8FCE\u8D62\u76C8\u5F71\u9896\u786C\u6620\u54DF\u62E5\u4F63\u81C3\u75C8\u5EB8\u96CD\u8E0A\u86F9\u548F\u6CF3\u6D8C\u6C38\u607F\u52C7\u7528\u5E7D\u4F18\u60A0\u5FE7\u5C24\u7531\u90AE\u94C0\u72B9\u6CB9\u6E38\u9149\u6709\u53CB\u53F3\u4F51\u91C9\u8BF1\u53C8\u5E7C\u8FC2\u6DE4\u4E8E\u76C2\u6986\u865E\u611A\u8206\u4F59\u4FDE\u903E\u9C7C\u6109\u6E1D\u6E14\u9685\u4E88\u5A31\u96E8\u4E0E\u5C7F\u79B9\u5B87\u8BED\u7FBD\u7389\u57DF\u828B\u90C1\u5401\u9047\u55BB\u5CEA\u5FA1\u6108\u6B32\u72F1\u80B2\u8A89\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[211].length; ++j)
                if (D[211][j].charCodeAt(0) !== 65533) {
                    e2[D[211][j]] = 54016 + j;
                    d[54016 + j] = D[211][j];
                }
            D[212] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6D74\u5BD3\u88D5\u9884\u8C6B\u9A6D\u9E33\u6E0A\u51A4\u5143\u57A3\u8881\u539F\u63F4\u8F95\u56ED\u5458\u5706\u733F\u6E90\u7F18\u8FDC\u82D1\u613F\u6028\u9662\u66F0\u7EA6\u8D8A\u8DC3\u94A5\u5CB3\u7CA4\u6708\u60A6\u9605\u8018\u4E91\u90E7\u5300\u9668\u5141\u8FD0\u8574\u915D\u6655\u97F5\u5B55\u531D\u7838\u6742\u683D\u54C9\u707E\u5BB0\u8F7D\u518D\u5728\u54B1\u6512\u6682\u8D5E\u8D43\u810F\u846C\u906D\u7CDF\u51FF\u85FB\u67A3\u65E9\u6FA1\u86A4\u8E81\u566A\u9020\u7682\u7076\u71E5\u8D23\u62E9\u5219\u6CFD\u8D3C\u600E\u589E\u618E\u66FE\u8D60\u624E\u55B3\u6E23\u672D\u8F67\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[212].length; ++j)
                if (D[212][j].charCodeAt(0) !== 65533) {
                    e2[D[212][j]] = 54272 + j;
                    d[54272 + j] = D[212][j];
                }
            D[213] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u94E1\u95F8\u7728\u6805\u69A8\u548B\u4E4D\u70B8\u8BC8\u6458\u658B\u5B85\u7A84\u503A\u5BE8\u77BB\u6BE1\u8A79\u7C98\u6CBE\u76CF\u65A9\u8F97\u5D2D\u5C55\u8638\u6808\u5360\u6218\u7AD9\u6E5B\u7EFD\u6A1F\u7AE0\u5F70\u6F33\u5F20\u638C\u6DA8\u6756\u4E08\u5E10\u8D26\u4ED7\u80C0\u7634\u969C\u62DB\u662D\u627E\u6CBC\u8D75\u7167\u7F69\u5146\u8087\u53EC\u906E\u6298\u54F2\u86F0\u8F99\u8005\u9517\u8517\u8FD9\u6D59\u73CD\u659F\u771F\u7504\u7827\u81FB\u8D1E\u9488\u4FA6\u6795\u75B9\u8BCA\u9707\u632F\u9547\u9635\u84B8\u6323\u7741\u5F81\u72F0\u4E89\u6014\u6574\u62EF\u6B63\u653F\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[213].length; ++j)
                if (D[213][j].charCodeAt(0) !== 65533) {
                    e2[D[213][j]] = 54528 + j;
                    d[54528 + j] = D[213][j];
                }
            D[214] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5E27\u75C7\u90D1\u8BC1\u829D\u679D\u652F\u5431\u8718\u77E5\u80A2\u8102\u6C41\u4E4B\u7EC7\u804C\u76F4\u690D\u6B96\u6267\u503C\u4F84\u5740\u6307\u6B62\u8DBE\u53EA\u65E8\u7EB8\u5FD7\u631A\u63B7\u81F3\u81F4\u7F6E\u5E1C\u5CD9\u5236\u667A\u79E9\u7A1A\u8D28\u7099\u75D4\u6EDE\u6CBB\u7A92\u4E2D\u76C5\u5FE0\u949F\u8877\u7EC8\u79CD\u80BF\u91CD\u4EF2\u4F17\u821F\u5468\u5DDE\u6D32\u8BCC\u7CA5\u8F74\u8098\u5E1A\u5492\u76B1\u5B99\u663C\u9AA4\u73E0\u682A\u86DB\u6731\u732A\u8BF8\u8BDB\u9010\u7AF9\u70DB\u716E\u62C4\u77A9\u5631\u4E3B\u8457\u67F1\u52A9\u86C0\u8D2E\u94F8\u7B51\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[214].length; ++j)
                if (D[214][j].charCodeAt(0) !== 65533) {
                    e2[D[214][j]] = 54784 + j;
                    d[54784 + j] = D[214][j];
                }
            D[215] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4F4F\u6CE8\u795D\u9A7B\u6293\u722A\u62FD\u4E13\u7816\u8F6C\u64B0\u8D5A\u7BC6\u6869\u5E84\u88C5\u5986\u649E\u58EE\u72B6\u690E\u9525\u8FFD\u8D58\u5760\u7F00\u8C06\u51C6\u6349\u62D9\u5353\u684C\u7422\u8301\u914C\u5544\u7740\u707C\u6D4A\u5179\u54A8\u8D44\u59FF\u6ECB\u6DC4\u5B5C\u7D2B\u4ED4\u7C7D\u6ED3\u5B50\u81EA\u6E0D\u5B57\u9B03\u68D5\u8E2A\u5B97\u7EFC\u603B\u7EB5\u90B9\u8D70\u594F\u63CD\u79DF\u8DB3\u5352\u65CF\u7956\u8BC5\u963B\u7EC4\u94BB\u7E82\u5634\u9189\u6700\u7F6A\u5C0A\u9075\u6628\u5DE6\u4F50\u67DE\u505A\u4F5C\u5750\u5EA7\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[215].length; ++j)
                if (D[215][j].charCodeAt(0) !== 65533) {
                    e2[D[215][j]] = 55040 + j;
                    d[55040 + j] = D[215][j];
                }
            D[216] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4E8D\u4E0C\u5140\u4E10\u5EFF\u5345\u4E15\u4E98\u4E1E\u9B32\u5B6C\u5669\u4E28\u79BA\u4E3F\u5315\u4E47\u592D\u723B\u536E\u6C10\u56DF\u80E4\u9997\u6BD3\u777E\u9F17\u4E36\u4E9F\u9F10\u4E5C\u4E69\u4E93\u8288\u5B5B\u556C\u560F\u4EC4\u538D\u539D\u53A3\u53A5\u53AE\u9765\u8D5D\u531A\u53F5\u5326\u532E\u533E\u8D5C\u5366\u5363\u5202\u5208\u520E\u522D\u5233\u523F\u5240\u524C\u525E\u5261\u525C\u84AF\u527D\u5282\u5281\u5290\u5293\u5182\u7F54\u4EBB\u4EC3\u4EC9\u4EC2\u4EE8\u4EE1\u4EEB\u4EDE\u4F1B\u4EF3\u4F22\u4F64\u4EF5\u4F25\u4F27\u4F09\u4F2B\u4F5E\u4F67\u6538\u4F5A\u4F5D\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[216].length; ++j)
                if (D[216][j].charCodeAt(0) !== 65533) {
                    e2[D[216][j]] = 55296 + j;
                    d[55296 + j] = D[216][j];
                }
            D[217] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u4F5F\u4F57\u4F32\u4F3D\u4F76\u4F74\u4F91\u4F89\u4F83\u4F8F\u4F7E\u4F7B\u4FAA\u4F7C\u4FAC\u4F94\u4FE6\u4FE8\u4FEA\u4FC5\u4FDA\u4FE3\u4FDC\u4FD1\u4FDF\u4FF8\u5029\u504C\u4FF3\u502C\u500F\u502E\u502D\u4FFE\u501C\u500C\u5025\u5028\u507E\u5043\u5055\u5048\u504E\u506C\u507B\u50A5\u50A7\u50A9\u50BA\u50D6\u5106\u50ED\u50EC\u50E6\u50EE\u5107\u510B\u4EDD\u6C3D\u4F58\u4F65\u4FCE\u9FA0\u6C46\u7C74\u516E\u5DFD\u9EC9\u9998\u5181\u5914\u52F9\u530D\u8A07\u5310\u51EB\u5919\u5155\u4EA0\u5156\u4EB3\u886E\u88A4\u4EB5\u8114\u88D2\u7980\u5B34\u8803\u7FB8\u51AB\u51B1\u51BD\u51BC\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[217].length; ++j)
                if (D[217][j].charCodeAt(0) !== 65533) {
                    e2[D[217][j]] = 55552 + j;
                    d[55552 + j] = D[217][j];
                }
            D[218] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u51C7\u5196\u51A2\u51A5\u8BA0\u8BA6\u8BA7\u8BAA\u8BB4\u8BB5\u8BB7\u8BC2\u8BC3\u8BCB\u8BCF\u8BCE\u8BD2\u8BD3\u8BD4\u8BD6\u8BD8\u8BD9\u8BDC\u8BDF\u8BE0\u8BE4\u8BE8\u8BE9\u8BEE\u8BF0\u8BF3\u8BF6\u8BF9\u8BFC\u8BFF\u8C00\u8C02\u8C04\u8C07\u8C0C\u8C0F\u8C11\u8C12\u8C14\u8C15\u8C16\u8C19\u8C1B\u8C18\u8C1D\u8C1F\u8C20\u8C21\u8C25\u8C27\u8C2A\u8C2B\u8C2E\u8C2F\u8C32\u8C33\u8C35\u8C36\u5369\u537A\u961D\u9622\u9621\u9631\u962A\u963D\u963C\u9642\u9649\u9654\u965F\u9667\u966C\u9672\u9674\u9688\u968D\u9697\u96B0\u9097\u909B\u909D\u9099\u90AC\u90A1\u90B4\u90B3\u90B6\u90BA\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[218].length; ++j)
                if (D[218][j].charCodeAt(0) !== 65533) {
                    e2[D[218][j]] = 55808 + j;
                    d[55808 + j] = D[218][j];
                }
            D[219] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u90B8\u90B0\u90CF\u90C5\u90BE\u90D0\u90C4\u90C7\u90D3\u90E6\u90E2\u90DC\u90D7\u90DB\u90EB\u90EF\u90FE\u9104\u9122\u911E\u9123\u9131\u912F\u9139\u9143\u9146\u520D\u5942\u52A2\u52AC\u52AD\u52BE\u54FF\u52D0\u52D6\u52F0\u53DF\u71EE\u77CD\u5EF4\u51F5\u51FC\u9B2F\u53B6\u5F01\u755A\u5DEF\u574C\u57A9\u57A1\u587E\u58BC\u58C5\u58D1\u5729\u572C\u572A\u5733\u5739\u572E\u572F\u575C\u573B\u5742\u5769\u5785\u576B\u5786\u577C\u577B\u5768\u576D\u5776\u5773\u57AD\u57A4\u578C\u57B2\u57CF\u57A7\u57B4\u5793\u57A0\u57D5\u57D8\u57DA\u57D9\u57D2\u57B8\u57F4\u57EF\u57F8\u57E4\u57DD\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[219].length; ++j)
                if (D[219][j].charCodeAt(0) !== 65533) {
                    e2[D[219][j]] = 56064 + j;
                    d[56064 + j] = D[219][j];
                }
            D[220] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u580B\u580D\u57FD\u57ED\u5800\u581E\u5819\u5844\u5820\u5865\u586C\u5881\u5889\u589A\u5880\u99A8\u9F19\u61FF\u8279\u827D\u827F\u828F\u828A\u82A8\u8284\u828E\u8291\u8297\u8299\u82AB\u82B8\u82BE\u82B0\u82C8\u82CA\u82E3\u8298\u82B7\u82AE\u82CB\u82CC\u82C1\u82A9\u82B4\u82A1\u82AA\u829F\u82C4\u82CE\u82A4\u82E1\u8309\u82F7\u82E4\u830F\u8307\u82DC\u82F4\u82D2\u82D8\u830C\u82FB\u82D3\u8311\u831A\u8306\u8314\u8315\u82E0\u82D5\u831C\u8351\u835B\u835C\u8308\u8392\u833C\u8334\u8331\u839B\u835E\u832F\u834F\u8347\u8343\u835F\u8340\u8317\u8360\u832D\u833A\u8333\u8366\u8365\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[220].length; ++j)
                if (D[220][j].charCodeAt(0) !== 65533) {
                    e2[D[220][j]] = 56320 + j;
                    d[56320 + j] = D[220][j];
                }
            D[221] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8368\u831B\u8369\u836C\u836A\u836D\u836E\u83B0\u8378\u83B3\u83B4\u83A0\u83AA\u8393\u839C\u8385\u837C\u83B6\u83A9\u837D\u83B8\u837B\u8398\u839E\u83A8\u83BA\u83BC\u83C1\u8401\u83E5\u83D8\u5807\u8418\u840B\u83DD\u83FD\u83D6\u841C\u8438\u8411\u8406\u83D4\u83DF\u840F\u8403\u83F8\u83F9\u83EA\u83C5\u83C0\u8426\u83F0\u83E1\u845C\u8451\u845A\u8459\u8473\u8487\u8488\u847A\u8489\u8478\u843C\u8446\u8469\u8476\u848C\u848E\u8431\u846D\u84C1\u84CD\u84D0\u84E6\u84BD\u84D3\u84CA\u84BF\u84BA\u84E0\u84A1\u84B9\u84B4\u8497\u84E5\u84E3\u850C\u750D\u8538\u84F0\u8539\u851F\u853A\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[221].length; ++j)
                if (D[221][j].charCodeAt(0) !== 65533) {
                    e2[D[221][j]] = 56576 + j;
                    d[56576 + j] = D[221][j];
                }
            D[222] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8556\u853B\u84FF\u84FC\u8559\u8548\u8568\u8564\u855E\u857A\u77A2\u8543\u8572\u857B\u85A4\u85A8\u8587\u858F\u8579\u85AE\u859C\u8585\u85B9\u85B7\u85B0\u85D3\u85C1\u85DC\u85FF\u8627\u8605\u8629\u8616\u863C\u5EFE\u5F08\u593C\u5941\u8037\u5955\u595A\u5958\u530F\u5C22\u5C25\u5C2C\u5C34\u624C\u626A\u629F\u62BB\u62CA\u62DA\u62D7\u62EE\u6322\u62F6\u6339\u634B\u6343\u63AD\u63F6\u6371\u637A\u638E\u63B4\u636D\u63AC\u638A\u6369\u63AE\u63BC\u63F2\u63F8\u63E0\u63FF\u63C4\u63DE\u63CE\u6452\u63C6\u63BE\u6445\u6441\u640B\u641B\u6420\u640C\u6426\u6421\u645E\u6484\u646D\u6496\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[222].length; ++j)
                if (D[222][j].charCodeAt(0) !== 65533) {
                    e2[D[222][j]] = 56832 + j;
                    d[56832 + j] = D[222][j];
                }
            D[223] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u647A\u64B7\u64B8\u6499\u64BA\u64C0\u64D0\u64D7\u64E4\u64E2\u6509\u6525\u652E\u5F0B\u5FD2\u7519\u5F11\u535F\u53F1\u53FD\u53E9\u53E8\u53FB\u5412\u5416\u5406\u544B\u5452\u5453\u5454\u5456\u5443\u5421\u5457\u5459\u5423\u5432\u5482\u5494\u5477\u5471\u5464\u549A\u549B\u5484\u5476\u5466\u549D\u54D0\u54AD\u54C2\u54B4\u54D2\u54A7\u54A6\u54D3\u54D4\u5472\u54A3\u54D5\u54BB\u54BF\u54CC\u54D9\u54DA\u54DC\u54A9\u54AA\u54A4\u54DD\u54CF\u54DE\u551B\u54E7\u5520\u54FD\u5514\u54F3\u5522\u5523\u550F\u5511\u5527\u552A\u5567\u558F\u55B5\u5549\u556D\u5541\u5555\u553F\u5550\u553C\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[223].length; ++j)
                if (D[223][j].charCodeAt(0) !== 65533) {
                    e2[D[223][j]] = 57088 + j;
                    d[57088 + j] = D[223][j];
                }
            D[224] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5537\u5556\u5575\u5576\u5577\u5533\u5530\u555C\u558B\u55D2\u5583\u55B1\u55B9\u5588\u5581\u559F\u557E\u55D6\u5591\u557B\u55DF\u55BD\u55BE\u5594\u5599\u55EA\u55F7\u55C9\u561F\u55D1\u55EB\u55EC\u55D4\u55E6\u55DD\u55C4\u55EF\u55E5\u55F2\u55F3\u55CC\u55CD\u55E8\u55F5\u55E4\u8F94\u561E\u5608\u560C\u5601\u5624\u5623\u55FE\u5600\u5627\u562D\u5658\u5639\u5657\u562C\u564D\u5662\u5659\u565C\u564C\u5654\u5686\u5664\u5671\u566B\u567B\u567C\u5685\u5693\u56AF\u56D4\u56D7\u56DD\u56E1\u56F5\u56EB\u56F9\u56FF\u5704\u570A\u5709\u571C\u5E0F\u5E19\u5E14\u5E11\u5E31\u5E3B\u5E3C\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[224].length; ++j)
                if (D[224][j].charCodeAt(0) !== 65533) {
                    e2[D[224][j]] = 57344 + j;
                    d[57344 + j] = D[224][j];
                }
            D[225] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5E37\u5E44\u5E54\u5E5B\u5E5E\u5E61\u5C8C\u5C7A\u5C8D\u5C90\u5C96\u5C88\u5C98\u5C99\u5C91\u5C9A\u5C9C\u5CB5\u5CA2\u5CBD\u5CAC\u5CAB\u5CB1\u5CA3\u5CC1\u5CB7\u5CC4\u5CD2\u5CE4\u5CCB\u5CE5\u5D02\u5D03\u5D27\u5D26\u5D2E\u5D24\u5D1E\u5D06\u5D1B\u5D58\u5D3E\u5D34\u5D3D\u5D6C\u5D5B\u5D6F\u5D5D\u5D6B\u5D4B\u5D4A\u5D69\u5D74\u5D82\u5D99\u5D9D\u8C73\u5DB7\u5DC5\u5F73\u5F77\u5F82\u5F87\u5F89\u5F8C\u5F95\u5F99\u5F9C\u5FA8\u5FAD\u5FB5\u5FBC\u8862\u5F61\u72AD\u72B0\u72B4\u72B7\u72B8\u72C3\u72C1\u72CE\u72CD\u72D2\u72E8\u72EF\u72E9\u72F2\u72F4\u72F7\u7301\u72F3\u7303\u72FA\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[225].length; ++j)
                if (D[225][j].charCodeAt(0) !== 65533) {
                    e2[D[225][j]] = 57600 + j;
                    d[57600 + j] = D[225][j];
                }
            D[226] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u72FB\u7317\u7313\u7321\u730A\u731E\u731D\u7315\u7322\u7339\u7325\u732C\u7338\u7331\u7350\u734D\u7357\u7360\u736C\u736F\u737E\u821B\u5925\u98E7\u5924\u5902\u9963\u9967\u9968\u9969\u996A\u996B\u996C\u9974\u9977\u997D\u9980\u9984\u9987\u998A\u998D\u9990\u9991\u9993\u9994\u9995\u5E80\u5E91\u5E8B\u5E96\u5EA5\u5EA0\u5EB9\u5EB5\u5EBE\u5EB3\u8D53\u5ED2\u5ED1\u5EDB\u5EE8\u5EEA\u81BA\u5FC4\u5FC9\u5FD6\u5FCF\u6003\u5FEE\u6004\u5FE1\u5FE4\u5FFE\u6005\u6006\u5FEA\u5FED\u5FF8\u6019\u6035\u6026\u601B\u600F\u600D\u6029\u602B\u600A\u603F\u6021\u6078\u6079\u607B\u607A\u6042\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[226].length; ++j)
                if (D[226][j].charCodeAt(0) !== 65533) {
                    e2[D[226][j]] = 57856 + j;
                    d[57856 + j] = D[226][j];
                }
            D[227] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u606A\u607D\u6096\u609A\u60AD\u609D\u6083\u6092\u608C\u609B\u60EC\u60BB\u60B1\u60DD\u60D8\u60C6\u60DA\u60B4\u6120\u6126\u6115\u6123\u60F4\u6100\u610E\u612B\u614A\u6175\u61AC\u6194\u61A7\u61B7\u61D4\u61F5\u5FDD\u96B3\u95E9\u95EB\u95F1\u95F3\u95F5\u95F6\u95FC\u95FE\u9603\u9604\u9606\u9608\u960A\u960B\u960C\u960D\u960F\u9612\u9615\u9616\u9617\u9619\u961A\u4E2C\u723F\u6215\u6C35\u6C54\u6C5C\u6C4A\u6CA3\u6C85\u6C90\u6C94\u6C8C\u6C68\u6C69\u6C74\u6C76\u6C86\u6CA9\u6CD0\u6CD4\u6CAD\u6CF7\u6CF8\u6CF1\u6CD7\u6CB2\u6CE0\u6CD6\u6CFA\u6CEB\u6CEE\u6CB1\u6CD3\u6CEF\u6CFE\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[227].length; ++j)
                if (D[227][j].charCodeAt(0) !== 65533) {
                    e2[D[227][j]] = 58112 + j;
                    d[58112 + j] = D[227][j];
                }
            D[228] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6D39\u6D27\u6D0C\u6D43\u6D48\u6D07\u6D04\u6D19\u6D0E\u6D2B\u6D4D\u6D2E\u6D35\u6D1A\u6D4F\u6D52\u6D54\u6D33\u6D91\u6D6F\u6D9E\u6DA0\u6D5E\u6D93\u6D94\u6D5C\u6D60\u6D7C\u6D63\u6E1A\u6DC7\u6DC5\u6DDE\u6E0E\u6DBF\u6DE0\u6E11\u6DE6\u6DDD\u6DD9\u6E16\u6DAB\u6E0C\u6DAE\u6E2B\u6E6E\u6E4E\u6E6B\u6EB2\u6E5F\u6E86\u6E53\u6E54\u6E32\u6E25\u6E44\u6EDF\u6EB1\u6E98\u6EE0\u6F2D\u6EE2\u6EA5\u6EA7\u6EBD\u6EBB\u6EB7\u6ED7\u6EB4\u6ECF\u6E8F\u6EC2\u6E9F\u6F62\u6F46\u6F47\u6F24\u6F15\u6EF9\u6F2F\u6F36\u6F4B\u6F74\u6F2A\u6F09\u6F29\u6F89\u6F8D\u6F8C\u6F78\u6F72\u6F7C\u6F7A\u6FD1\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[228].length; ++j)
                if (D[228][j].charCodeAt(0) !== 65533) {
                    e2[D[228][j]] = 58368 + j;
                    d[58368 + j] = D[228][j];
                }
            D[229] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6FC9\u6FA7\u6FB9\u6FB6\u6FC2\u6FE1\u6FEE\u6FDE\u6FE0\u6FEF\u701A\u7023\u701B\u7039\u7035\u704F\u705E\u5B80\u5B84\u5B95\u5B93\u5BA5\u5BB8\u752F\u9A9E\u6434\u5BE4\u5BEE\u8930\u5BF0\u8E47\u8B07\u8FB6\u8FD3\u8FD5\u8FE5\u8FEE\u8FE4\u8FE9\u8FE6\u8FF3\u8FE8\u9005\u9004\u900B\u9026\u9011\u900D\u9016\u9021\u9035\u9036\u902D\u902F\u9044\u9051\u9052\u9050\u9068\u9058\u9062\u905B\u66B9\u9074\u907D\u9082\u9088\u9083\u908B\u5F50\u5F57\u5F56\u5F58\u5C3B\u54AB\u5C50\u5C59\u5B71\u5C63\u5C66\u7FBC\u5F2A\u5F29\u5F2D\u8274\u5F3C\u9B3B\u5C6E\u5981\u5983\u598D\u59A9\u59AA\u59A3\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[229].length; ++j)
                if (D[229][j].charCodeAt(0) !== 65533) {
                    e2[D[229][j]] = 58624 + j;
                    d[58624 + j] = D[229][j];
                }
            D[230] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u5997\u59CA\u59AB\u599E\u59A4\u59D2\u59B2\u59AF\u59D7\u59BE\u5A05\u5A06\u59DD\u5A08\u59E3\u59D8\u59F9\u5A0C\u5A09\u5A32\u5A34\u5A11\u5A23\u5A13\u5A40\u5A67\u5A4A\u5A55\u5A3C\u5A62\u5A75\u80EC\u5AAA\u5A9B\u5A77\u5A7A\u5ABE\u5AEB\u5AB2\u5AD2\u5AD4\u5AB8\u5AE0\u5AE3\u5AF1\u5AD6\u5AE6\u5AD8\u5ADC\u5B09\u5B17\u5B16\u5B32\u5B37\u5B40\u5C15\u5C1C\u5B5A\u5B65\u5B73\u5B51\u5B53\u5B62\u9A75\u9A77\u9A78\u9A7A\u9A7F\u9A7D\u9A80\u9A81\u9A85\u9A88\u9A8A\u9A90\u9A92\u9A93\u9A96\u9A98\u9A9B\u9A9C\u9A9D\u9A9F\u9AA0\u9AA2\u9AA3\u9AA5\u9AA7\u7E9F\u7EA1\u7EA3\u7EA5\u7EA8\u7EA9\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[230].length; ++j)
                if (D[230][j].charCodeAt(0) !== 65533) {
                    e2[D[230][j]] = 58880 + j;
                    d[58880 + j] = D[230][j];
                }
            D[231] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7EAD\u7EB0\u7EBE\u7EC0\u7EC1\u7EC2\u7EC9\u7ECB\u7ECC\u7ED0\u7ED4\u7ED7\u7EDB\u7EE0\u7EE1\u7EE8\u7EEB\u7EEE\u7EEF\u7EF1\u7EF2\u7F0D\u7EF6\u7EFA\u7EFB\u7EFE\u7F01\u7F02\u7F03\u7F07\u7F08\u7F0B\u7F0C\u7F0F\u7F11\u7F12\u7F17\u7F19\u7F1C\u7F1B\u7F1F\u7F21\u7F22\u7F23\u7F24\u7F25\u7F26\u7F27\u7F2A\u7F2B\u7F2C\u7F2D\u7F2F\u7F30\u7F31\u7F32\u7F33\u7F35\u5E7A\u757F\u5DDB\u753E\u9095\u738E\u7391\u73AE\u73A2\u739F\u73CF\u73C2\u73D1\u73B7\u73B3\u73C0\u73C9\u73C8\u73E5\u73D9\u987C\u740A\u73E9\u73E7\u73DE\u73BA\u73F2\u740F\u742A\u745B\u7426\u7425\u7428\u7430\u742E\u742C\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[231].length; ++j)
                if (D[231][j].charCodeAt(0) !== 65533) {
                    e2[D[231][j]] = 59136 + j;
                    d[59136 + j] = D[231][j];
                }
            D[232] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u741B\u741A\u7441\u745C\u7457\u7455\u7459\u7477\u746D\u747E\u749C\u748E\u7480\u7481\u7487\u748B\u749E\u74A8\u74A9\u7490\u74A7\u74D2\u74BA\u97EA\u97EB\u97EC\u674C\u6753\u675E\u6748\u6769\u67A5\u6787\u676A\u6773\u6798\u67A7\u6775\u67A8\u679E\u67AD\u678B\u6777\u677C\u67F0\u6809\u67D8\u680A\u67E9\u67B0\u680C\u67D9\u67B5\u67DA\u67B3\u67DD\u6800\u67C3\u67B8\u67E2\u680E\u67C1\u67FD\u6832\u6833\u6860\u6861\u684E\u6862\u6844\u6864\u6883\u681D\u6855\u6866\u6841\u6867\u6840\u683E\u684A\u6849\u6829\u68B5\u688F\u6874\u6877\u6893\u686B\u68C2\u696E\u68FC\u691F\u6920\u68F9\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[232].length; ++j)
                if (D[232][j].charCodeAt(0) !== 65533) {
                    e2[D[232][j]] = 59392 + j;
                    d[59392 + j] = D[232][j];
                }
            D[233] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u6924\u68F0\u690B\u6901\u6957\u68E3\u6910\u6971\u6939\u6960\u6942\u695D\u6984\u696B\u6980\u6998\u6978\u6934\u69CC\u6987\u6988\u69CE\u6989\u6966\u6963\u6979\u699B\u69A7\u69BB\u69AB\u69AD\u69D4\u69B1\u69C1\u69CA\u69DF\u6995\u69E0\u698D\u69FF\u6A2F\u69ED\u6A17\u6A18\u6A65\u69F2\u6A44\u6A3E\u6AA0\u6A50\u6A5B\u6A35\u6A8E\u6A79\u6A3D\u6A28\u6A58\u6A7C\u6A91\u6A90\u6AA9\u6A97\u6AAB\u7337\u7352\u6B81\u6B82\u6B87\u6B84\u6B92\u6B93\u6B8D\u6B9A\u6B9B\u6BA1\u6BAA\u8F6B\u8F6D\u8F71\u8F72\u8F73\u8F75\u8F76\u8F78\u8F77\u8F79\u8F7A\u8F7C\u8F7E\u8F81\u8F82\u8F84\u8F87\u8F8B\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[233].length; ++j)
                if (D[233][j].charCodeAt(0) !== 65533) {
                    e2[D[233][j]] = 59648 + j;
                    d[59648 + j] = D[233][j];
                }
            D[234] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u8F8D\u8F8E\u8F8F\u8F98\u8F9A\u8ECE\u620B\u6217\u621B\u621F\u6222\u6221\u6225\u6224\u622C\u81E7\u74EF\u74F4\u74FF\u750F\u7511\u7513\u6534\u65EE\u65EF\u65F0\u660A\u6619\u6772\u6603\u6615\u6600\u7085\u66F7\u661D\u6634\u6631\u6636\u6635\u8006\u665F\u6654\u6641\u664F\u6656\u6661\u6657\u6677\u6684\u668C\u66A7\u669D\u66BE\u66DB\u66DC\u66E6\u66E9\u8D32\u8D33\u8D36\u8D3B\u8D3D\u8D40\u8D45\u8D46\u8D48\u8D49\u8D47\u8D4D\u8D55\u8D59\u89C7\u89CA\u89CB\u89CC\u89CE\u89CF\u89D0\u89D1\u726E\u729F\u725D\u7266\u726F\u727E\u727F\u7284\u728B\u728D\u728F\u7292\u6308\u6332\u63B0\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[234].length; ++j)
                if (D[234][j].charCodeAt(0) !== 65533) {
                    e2[D[234][j]] = 59904 + j;
                    d[59904 + j] = D[234][j];
                }
            D[235] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u643F\u64D8\u8004\u6BEA\u6BF3\u6BFD\u6BF5\u6BF9\u6C05\u6C07\u6C06\u6C0D\u6C15\u6C18\u6C19\u6C1A\u6C21\u6C29\u6C24\u6C2A\u6C32\u6535\u6555\u656B\u724D\u7252\u7256\u7230\u8662\u5216\u809F\u809C\u8093\u80BC\u670A\u80BD\u80B1\u80AB\u80AD\u80B4\u80B7\u80E7\u80E8\u80E9\u80EA\u80DB\u80C2\u80C4\u80D9\u80CD\u80D7\u6710\u80DD\u80EB\u80F1\u80F4\u80ED\u810D\u810E\u80F2\u80FC\u6715\u8112\u8C5A\u8136\u811E\u812C\u8118\u8132\u8148\u814C\u8153\u8174\u8159\u815A\u8171\u8160\u8169\u817C\u817D\u816D\u8167\u584D\u5AB5\u8188\u8182\u8191\u6ED5\u81A3\u81AA\u81CC\u6726\u81CA\u81BB\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[235].length; ++j)
                if (D[235][j].charCodeAt(0) !== 65533) {
                    e2[D[235][j]] = 60160 + j;
                    d[60160 + j] = D[235][j];
                }
            D[236] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u81C1\u81A6\u6B24\u6B37\u6B39\u6B43\u6B46\u6B59\u98D1\u98D2\u98D3\u98D5\u98D9\u98DA\u6BB3\u5F40\u6BC2\u89F3\u6590\u9F51\u6593\u65BC\u65C6\u65C4\u65C3\u65CC\u65CE\u65D2\u65D6\u7080\u709C\u7096\u709D\u70BB\u70C0\u70B7\u70AB\u70B1\u70E8\u70CA\u7110\u7113\u7116\u712F\u7131\u7173\u715C\u7168\u7145\u7172\u714A\u7178\u717A\u7198\u71B3\u71B5\u71A8\u71A0\u71E0\u71D4\u71E7\u71F9\u721D\u7228\u706C\u7118\u7166\u71B9\u623E\u623D\u6243\u6248\u6249\u793B\u7940\u7946\u7949\u795B\u795C\u7953\u795A\u7962\u7957\u7960\u796F\u7967\u797A\u7985\u798A\u799A\u79A7\u79B3\u5FD1\u5FD0\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[236].length; ++j)
                if (D[236][j].charCodeAt(0) !== 65533) {
                    e2[D[236][j]] = 60416 + j;
                    d[60416 + j] = D[236][j];
                }
            D[237] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u603C\u605D\u605A\u6067\u6041\u6059\u6063\u60AB\u6106\u610D\u615D\u61A9\u619D\u61CB\u61D1\u6206\u8080\u807F\u6C93\u6CF6\u6DFC\u77F6\u77F8\u7800\u7809\u7817\u7818\u7811\u65AB\u782D\u781C\u781D\u7839\u783A\u783B\u781F\u783C\u7825\u782C\u7823\u7829\u784E\u786D\u7856\u7857\u7826\u7850\u7847\u784C\u786A\u789B\u7893\u789A\u7887\u789C\u78A1\u78A3\u78B2\u78B9\u78A5\u78D4\u78D9\u78C9\u78EC\u78F2\u7905\u78F4\u7913\u7924\u791E\u7934\u9F9B\u9EF9\u9EFB\u9EFC\u76F1\u7704\u770D\u76F9\u7707\u7708\u771A\u7722\u7719\u772D\u7726\u7735\u7738\u7750\u7751\u7747\u7743\u775A\u7768\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[237].length; ++j)
                if (D[237][j].charCodeAt(0) !== 65533) {
                    e2[D[237][j]] = 60672 + j;
                    d[60672 + j] = D[237][j];
                }
            D[238] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7762\u7765\u777F\u778D\u777D\u7780\u778C\u7791\u779F\u77A0\u77B0\u77B5\u77BD\u753A\u7540\u754E\u754B\u7548\u755B\u7572\u7579\u7583\u7F58\u7F61\u7F5F\u8A48\u7F68\u7F74\u7F71\u7F79\u7F81\u7F7E\u76CD\u76E5\u8832\u9485\u9486\u9487\u948B\u948A\u948C\u948D\u948F\u9490\u9494\u9497\u9495\u949A\u949B\u949C\u94A3\u94A4\u94AB\u94AA\u94AD\u94AC\u94AF\u94B0\u94B2\u94B4\u94B6\u94B7\u94B8\u94B9\u94BA\u94BC\u94BD\u94BF\u94C4\u94C8\u94C9\u94CA\u94CB\u94CC\u94CD\u94CE\u94D0\u94D1\u94D2\u94D5\u94D6\u94D7\u94D9\u94D8\u94DB\u94DE\u94DF\u94E0\u94E2\u94E4\u94E5\u94E7\u94E8\u94EA\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[238].length; ++j)
                if (D[238][j].charCodeAt(0) !== 65533) {
                    e2[D[238][j]] = 60928 + j;
                    d[60928 + j] = D[238][j];
                }
            D[239] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u94E9\u94EB\u94EE\u94EF\u94F3\u94F4\u94F5\u94F7\u94F9\u94FC\u94FD\u94FF\u9503\u9502\u9506\u9507\u9509\u950A\u950D\u950E\u950F\u9512\u9513\u9514\u9515\u9516\u9518\u951B\u951D\u951E\u951F\u9522\u952A\u952B\u9529\u952C\u9531\u9532\u9534\u9536\u9537\u9538\u953C\u953E\u953F\u9542\u9535\u9544\u9545\u9546\u9549\u954C\u954E\u954F\u9552\u9553\u9554\u9556\u9557\u9558\u9559\u955B\u955E\u955F\u955D\u9561\u9562\u9564\u9565\u9566\u9567\u9568\u9569\u956A\u956B\u956C\u956F\u9571\u9572\u9573\u953A\u77E7\u77EC\u96C9\u79D5\u79ED\u79E3\u79EB\u7A06\u5D47\u7A03\u7A02\u7A1E\u7A14\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[239].length; ++j)
                if (D[239][j].charCodeAt(0) !== 65533) {
                    e2[D[239][j]] = 61184 + j;
                    d[61184 + j] = D[239][j];
                }
            D[240] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7A39\u7A37\u7A51\u9ECF\u99A5\u7A70\u7688\u768E\u7693\u7699\u76A4\u74DE\u74E0\u752C\u9E20\u9E22\u9E28\u9E29\u9E2A\u9E2B\u9E2C\u9E32\u9E31\u9E36\u9E38\u9E37\u9E39\u9E3A\u9E3E\u9E41\u9E42\u9E44\u9E46\u9E47\u9E48\u9E49\u9E4B\u9E4C\u9E4E\u9E51\u9E55\u9E57\u9E5A\u9E5B\u9E5C\u9E5E\u9E63\u9E66\u9E67\u9E68\u9E69\u9E6A\u9E6B\u9E6C\u9E71\u9E6D\u9E73\u7592\u7594\u7596\u75A0\u759D\u75AC\u75A3\u75B3\u75B4\u75B8\u75C4\u75B1\u75B0\u75C3\u75C2\u75D6\u75CD\u75E3\u75E8\u75E6\u75E4\u75EB\u75E7\u7603\u75F1\u75FC\u75FF\u7610\u7600\u7605\u760C\u7617\u760A\u7625\u7618\u7615\u7619\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[240].length; ++j)
                if (D[240][j].charCodeAt(0) !== 65533) {
                    e2[D[240][j]] = 61440 + j;
                    d[61440 + j] = D[240][j];
                }
            D[241] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u761B\u763C\u7622\u7620\u7640\u762D\u7630\u763F\u7635\u7643\u763E\u7633\u764D\u765E\u7654\u765C\u7656\u766B\u766F\u7FCA\u7AE6\u7A78\u7A79\u7A80\u7A86\u7A88\u7A95\u7AA6\u7AA0\u7AAC\u7AA8\u7AAD\u7AB3\u8864\u8869\u8872\u887D\u887F\u8882\u88A2\u88C6\u88B7\u88BC\u88C9\u88E2\u88CE\u88E3\u88E5\u88F1\u891A\u88FC\u88E8\u88FE\u88F0\u8921\u8919\u8913\u891B\u890A\u8934\u892B\u8936\u8941\u8966\u897B\u758B\u80E5\u76B2\u76B4\u77DC\u8012\u8014\u8016\u801C\u8020\u8022\u8025\u8026\u8027\u8029\u8028\u8031\u800B\u8035\u8043\u8046\u804D\u8052\u8069\u8071\u8983\u9878\u9880\u9883\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[241].length; ++j)
                if (D[241][j].charCodeAt(0) !== 65533) {
                    e2[D[241][j]] = 61696 + j;
                    d[61696 + j] = D[241][j];
                }
            D[242] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9889\u988C\u988D\u988F\u9894\u989A\u989B\u989E\u989F\u98A1\u98A2\u98A5\u98A6\u864D\u8654\u866C\u866E\u867F\u867A\u867C\u867B\u86A8\u868D\u868B\u86AC\u869D\u86A7\u86A3\u86AA\u8693\u86A9\u86B6\u86C4\u86B5\u86CE\u86B0\u86BA\u86B1\u86AF\u86C9\u86CF\u86B4\u86E9\u86F1\u86F2\u86ED\u86F3\u86D0\u8713\u86DE\u86F4\u86DF\u86D8\u86D1\u8703\u8707\u86F8\u8708\u870A\u870D\u8709\u8723\u873B\u871E\u8725\u872E\u871A\u873E\u8748\u8734\u8731\u8729\u8737\u873F\u8782\u8722\u877D\u877E\u877B\u8760\u8770\u874C\u876E\u878B\u8753\u8763\u877C\u8764\u8759\u8765\u8793\u87AF\u87A8\u87D2\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[242].length; ++j)
                if (D[242][j].charCodeAt(0) !== 65533) {
                    e2[D[242][j]] = 61952 + j;
                    d[61952 + j] = D[242][j];
                }
            D[243] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u87C6\u8788\u8785\u87AD\u8797\u8783\u87AB\u87E5\u87AC\u87B5\u87B3\u87CB\u87D3\u87BD\u87D1\u87C0\u87CA\u87DB\u87EA\u87E0\u87EE\u8816\u8813\u87FE\u880A\u881B\u8821\u8839\u883C\u7F36\u7F42\u7F44\u7F45\u8210\u7AFA\u7AFD\u7B08\u7B03\u7B04\u7B15\u7B0A\u7B2B\u7B0F\u7B47\u7B38\u7B2A\u7B19\u7B2E\u7B31\u7B20\u7B25\u7B24\u7B33\u7B3E\u7B1E\u7B58\u7B5A\u7B45\u7B75\u7B4C\u7B5D\u7B60\u7B6E\u7B7B\u7B62\u7B72\u7B71\u7B90\u7BA6\u7BA7\u7BB8\u7BAC\u7B9D\u7BA8\u7B85\u7BAA\u7B9C\u7BA2\u7BAB\u7BB4\u7BD1\u7BC1\u7BCC\u7BDD\u7BDA\u7BE5\u7BE6\u7BEA\u7C0C\u7BFE\u7BFC\u7C0F\u7C16\u7C0B\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[243].length; ++j)
                if (D[243][j].charCodeAt(0) !== 65533) {
                    e2[D[243][j]] = 62208 + j;
                    d[62208 + j] = D[243][j];
                }
            D[244] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u7C1F\u7C2A\u7C26\u7C38\u7C41\u7C40\u81FE\u8201\u8202\u8204\u81EC\u8844\u8221\u8222\u8223\u822D\u822F\u8228\u822B\u8238\u823B\u8233\u8234\u823E\u8244\u8249\u824B\u824F\u825A\u825F\u8268\u887E\u8885\u8888\u88D8\u88DF\u895E\u7F9D\u7F9F\u7FA7\u7FAF\u7FB0\u7FB2\u7C7C\u6549\u7C91\u7C9D\u7C9C\u7C9E\u7CA2\u7CB2\u7CBC\u7CBD\u7CC1\u7CC7\u7CCC\u7CCD\u7CC8\u7CC5\u7CD7\u7CE8\u826E\u66A8\u7FBF\u7FCE\u7FD5\u7FE5\u7FE1\u7FE6\u7FE9\u7FEE\u7FF3\u7CF8\u7D77\u7DA6\u7DAE\u7E47\u7E9B\u9EB8\u9EB4\u8D73\u8D84\u8D94\u8D91\u8DB1\u8D67\u8D6D\u8C47\u8C49\u914A\u9150\u914E\u914F\u9164\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[244].length; ++j)
                if (D[244][j].charCodeAt(0) !== 65533) {
                    e2[D[244][j]] = 62464 + j;
                    d[62464 + j] = D[244][j];
                }
            D[245] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9162\u9161\u9170\u9169\u916F\u917D\u917E\u9172\u9174\u9179\u918C\u9185\u9190\u918D\u9191\u91A2\u91A3\u91AA\u91AD\u91AE\u91AF\u91B5\u91B4\u91BA\u8C55\u9E7E\u8DB8\u8DEB\u8E05\u8E59\u8E69\u8DB5\u8DBF\u8DBC\u8DBA\u8DC4\u8DD6\u8DD7\u8DDA\u8DDE\u8DCE\u8DCF\u8DDB\u8DC6\u8DEC\u8DF7\u8DF8\u8DE3\u8DF9\u8DFB\u8DE4\u8E09\u8DFD\u8E14\u8E1D\u8E1F\u8E2C\u8E2E\u8E23\u8E2F\u8E3A\u8E40\u8E39\u8E35\u8E3D\u8E31\u8E49\u8E41\u8E42\u8E51\u8E52\u8E4A\u8E70\u8E76\u8E7C\u8E6F\u8E74\u8E85\u8E8F\u8E94\u8E90\u8E9C\u8E9E\u8C78\u8C82\u8C8A\u8C85\u8C98\u8C94\u659B\u89D6\u89DE\u89DA\u89DC\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[245].length; ++j)
                if (D[245][j].charCodeAt(0) !== 65533) {
                    e2[D[245][j]] = 62720 + j;
                    d[62720 + j] = D[245][j];
                }
            D[246] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u89E5\u89EB\u89EF\u8A3E\u8B26\u9753\u96E9\u96F3\u96EF\u9706\u9701\u9708\u970F\u970E\u972A\u972D\u9730\u973E\u9F80\u9F83\u9F85\u9F86\u9F87\u9F88\u9F89\u9F8A\u9F8C\u9EFE\u9F0B\u9F0D\u96B9\u96BC\u96BD\u96CE\u96D2\u77BF\u96E0\u928E\u92AE\u92C8\u933E\u936A\u93CA\u938F\u943E\u946B\u9C7F\u9C82\u9C85\u9C86\u9C87\u9C88\u7A23\u9C8B\u9C8E\u9C90\u9C91\u9C92\u9C94\u9C95\u9C9A\u9C9B\u9C9E\u9C9F\u9CA0\u9CA1\u9CA2\u9CA3\u9CA5\u9CA6\u9CA7\u9CA8\u9CA9\u9CAB\u9CAD\u9CAE\u9CB0\u9CB1\u9CB2\u9CB3\u9CB4\u9CB5\u9CB6\u9CB7\u9CBA\u9CBB\u9CBC\u9CBD\u9CC4\u9CC5\u9CC6\u9CC7\u9CCA\u9CCB\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[246].length; ++j)
                if (D[246][j].charCodeAt(0) !== 65533) {
                    e2[D[246][j]] = 62976 + j;
                    d[62976 + j] = D[246][j];
                }
            D[247] =
                '\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\uFFFD\u9CCC\u9CCD\u9CCE\u9CCF\u9CD0\u9CD3\u9CD4\u9CD5\u9CD7\u9CD8\u9CD9\u9CDC\u9CDD\u9CDF\u9CE2\u977C\u9785\u9791\u9792\u9794\u97AF\u97AB\u97A3\u97B2\u97B4\u9AB1\u9AB0\u9AB7\u9E58\u9AB6\u9ABA\u9ABC\u9AC1\u9AC0\u9AC5\u9AC2\u9ACB\u9ACC\u9AD1\u9B45\u9B43\u9B47\u9B49\u9B48\u9B4D\u9B51\u98E8\u990D\u992E\u9955\u9954\u9ADF\u9AE1\u9AE6\u9AEF\u9AEB\u9AFB\u9AED\u9AF9\u9B08\u9B0F\u9B13\u9B1F\u9B23\u9EBD\u9EBE\u7E3B\u9E82\u9E87\u9E88\u9E8B\u9E92\u93D6\u9E9D\u9E9F\u9EDB\u9EDC\u9EDD\u9EE0\u9EDF\u9EE2\u9EE9\u9EE7\u9EE5\u9EEA\u9EEF\u9F22\u9F2C\u9F2F\u9F39\u9F37\u9F3D\u9F3E\u9F44\uFFFD'.split(
                    '',
                );
            for (j = 0; j != D[247].length; ++j)
                if (D[247][j].charCodeAt(0) !== 65533) {
                    e2[D[247][j]] = 63232 + j;
                    d[63232 + j] = D[247][j];
                }
            return { enc: e2, dec: d };
        })();
        cptable2[10029] = (function () {
            var d =
                    '\0\x07\b	\n\v\f\r\x1B !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC4\u0100\u0101\xC9\u0104\xD6\xDC\xE1\u0105\u010C\xE4\u010D\u0106\u0107\xE9\u0179\u017A\u010E\xED\u010F\u0112\u0113\u0116\xF3\u0117\xF4\xF6\xF5\xFA\u011A\u011B\xFC\u2020\xB0\u0118\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\u0119\xA8\u2260\u0123\u012E\u012F\u012A\u2264\u2265\u012B\u0136\u2202\u2211\u0142\u013B\u013C\u013D\u013E\u0139\u013A\u0145\u0146\u0143\xAC\u221A\u0144\u0147\u2206\xAB\xBB\u2026\xA0\u0148\u0150\xD5\u0151\u014C\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\u014D\u0154\u0155\u0158\u2039\u203A\u0159\u0156\u0157\u0160\u201A\u201E\u0161\u015A\u015B\xC1\u0164\u0165\xCD\u017D\u017E\u016A\xD3\xD4\u016B\u016E\xDA\u016F\u0170\u0171\u0172\u0173\xDD\xFD\u0137\u017B\u0141\u017C\u0122\u02C7',
                D = [],
                e2 = {};
            for (var i2 = 0; i2 != d.length; ++i2) {
                if (d.charCodeAt(i2) !== 65533) e2[d.charAt(i2)] = i2;
                D[i2] = d.charAt(i2);
            }
            return { enc: e2, dec: D };
        })();
        cptable2[10079] = (function () {
            var d =
                    '\0\x07\b	\n\v\f\r\x1B !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\xDD\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\xC6\xD8\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u2126\xE6\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u2044\xA4\xD0\xF0\xDE\xFE\xFD\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uFFFD\xD2\xDA\xDB\xD9\u0131\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7',
                D = [],
                e2 = {};
            for (var i2 = 0; i2 != d.length; ++i2) {
                if (d.charCodeAt(i2) !== 65533) e2[d.charAt(i2)] = i2;
                D[i2] = d.charAt(i2);
            }
            return { enc: e2, dec: D };
        })();
        cptable2[10081] = (function () {
            var d =
                    '\0\x07\b	\n\v\f\r\x1B !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\xC4\xC5\xC7\xC9\xD1\xD6\xDC\xE1\xE0\xE2\xE4\xE3\xE5\xE7\xE9\xE8\xEA\xEB\xED\xEC\xEE\xEF\xF1\xF3\xF2\xF4\xF6\xF5\xFA\xF9\xFB\xFC\u2020\xB0\xA2\xA3\xA7\u2022\xB6\xDF\xAE\xA9\u2122\xB4\xA8\u2260\xC6\xD8\u221E\xB1\u2264\u2265\xA5\xB5\u2202\u2211\u220F\u03C0\u222B\xAA\xBA\u2126\xE6\xF8\xBF\xA1\xAC\u221A\u0192\u2248\u2206\xAB\xBB\u2026\xA0\xC0\xC3\xD5\u0152\u0153\u2013\u2014\u201C\u201D\u2018\u2019\xF7\u25CA\xFF\u0178\u011E\u011F\u0130\u0131\u015E\u015F\u2021\xB7\u201A\u201E\u2030\xC2\xCA\xC1\xCB\xC8\xCD\xCE\xCF\xCC\xD3\xD4\uFFFD\xD2\xDA\xDB\xD9\uFFFD\u02C6\u02DC\xAF\u02D8\u02D9\u02DA\xB8\u02DD\u02DB\u02C7',
                D = [],
                e2 = {};
            for (var i2 = 0; i2 != d.length; ++i2) {
                if (d.charCodeAt(i2) !== 65533) e2[d.charAt(i2)] = i2;
                D[i2] = d.charAt(i2);
            }
            return { enc: e2, dec: D };
        })();
        cptable2[28591] = (function () {
            var d =
                    '\0\x07\b	\n\v\f\r\x1B !"#$%&\'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\x7F\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF',
                D = [],
                e2 = {};
            for (var i2 = 0; i2 != d.length; ++i2) {
                if (d.charCodeAt(i2) !== 65533) e2[d.charAt(i2)] = i2;
                D[i2] = d.charAt(i2);
            }
            return { enc: e2, dec: D };
        })();
        if (
            typeof module2 !== 'undefined' &&
            module2.exports &&
            typeof DO_NOT_EXPORT_CODEPAGE === 'undefined'
        )
            module2.exports = cptable2;
        (function (root3, factory) {
            'use strict';
            if (typeof cptable2 === 'undefined') {
                if (typeof require !== 'undefined') {
                    var cpt = cptable2;
                    if (
                        typeof module2 !== 'undefined' &&
                        module2.exports &&
                        typeof DO_NOT_EXPORT_CODEPAGE === 'undefined'
                    )
                        module2.exports = factory(cpt);
                    else root3.cptable = factory(cpt);
                } else throw new Error('cptable not found');
            } else cptable2 = factory(cptable2);
        })(exports2, function (cpt) {
            'use strict';
            var magic = {
                1200: 'utf16le',
                1201: 'utf16be',
                12000: 'utf32le',
                12001: 'utf32be',
                16969: 'utf64le',
                20127: 'ascii',
                65000: 'utf7',
                65001: 'utf8',
            };
            var sbcs_cache = [874, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1e4];
            var dbcs_cache = [932, 936, 949, 950];
            var magic_cache = [65001];
            var magic_decode = {};
            var magic_encode = {};
            var cpdcache = {};
            var cpecache = {};
            var sfcc = function sfcc2(x2) {
                return String.fromCharCode(x2);
            };
            var cca = function cca2(x2) {
                return x2.charCodeAt(0);
            };
            var has_buf = typeof Buffer !== 'undefined';
            var Buffer_from = function () {};
            if (has_buf) {
                var nbfs = !Buffer.from;
                if (!nbfs)
                    try {
                        Buffer.from('foo', 'utf8');
                    } catch (e2) {
                        nbfs = true;
                    }
                Buffer_from = nbfs
                    ? function (buf, enc) {
                          return enc ? new Buffer(buf, enc) : new Buffer(buf);
                      }
                    : Buffer.from.bind(Buffer);
                if (!Buffer.allocUnsafe)
                    Buffer.allocUnsafe = function (n) {
                        return new Buffer(n);
                    };
                var mdl = 1024,
                    mdb = Buffer.allocUnsafe(mdl);
                var make_EE = function make_EE2(E) {
                    var EE = Buffer.allocUnsafe(65536);
                    for (var i2 = 0; i2 < 65536; ++i2) EE[i2] = 0;
                    var keys = Object.keys(E),
                        len = keys.length;
                    for (var ee = 0, e2 = keys[ee]; ee < len; ++ee) {
                        if (!(e2 = keys[ee])) continue;
                        EE[e2.charCodeAt(0)] = E[e2];
                    }
                    return EE;
                };
                var sbcs_encode = function make_sbcs_encode(cp) {
                    var EE = make_EE(cpt[cp].enc);
                    return function sbcs_e(data2, ofmt) {
                        var len = data2.length;
                        var out,
                            i2 = 0,
                            j = 0,
                            D = 0,
                            w = 0;
                        if (typeof data2 === 'string') {
                            out = Buffer.allocUnsafe(len);
                            for (i2 = 0; i2 < len; ++i2) out[i2] = EE[data2.charCodeAt(i2)];
                        } else if (Buffer.isBuffer(data2)) {
                            out = Buffer.allocUnsafe(2 * len);
                            j = 0;
                            for (i2 = 0; i2 < len; ++i2) {
                                D = data2[i2];
                                if (D < 128) out[j++] = EE[D];
                                else if (D < 224) {
                                    out[j++] = EE[((D & 31) << 6) + (data2[i2 + 1] & 63)];
                                    ++i2;
                                } else if (D < 240) {
                                    out[j++] =
                                        EE[
                                            ((D & 15) << 12) +
                                                ((data2[i2 + 1] & 63) << 6) +
                                                (data2[i2 + 2] & 63)
                                        ];
                                    i2 += 2;
                                } else {
                                    w =
                                        ((D & 7) << 18) +
                                        ((data2[i2 + 1] & 63) << 12) +
                                        ((data2[i2 + 2] & 63) << 6) +
                                        (data2[i2 + 3] & 63);
                                    i2 += 3;
                                    if (w < 65536) out[j++] = EE[w];
                                    else {
                                        w -= 65536;
                                        out[j++] = EE[55296 + ((w >> 10) & 1023)];
                                        out[j++] = EE[56320 + (w & 1023)];
                                    }
                                }
                            }
                            out = out.slice(0, j);
                        } else {
                            out = Buffer.allocUnsafe(len);
                            for (i2 = 0; i2 < len; ++i2) out[i2] = EE[data2[i2].charCodeAt(0)];
                        }
                        if (!ofmt || ofmt === 'buf') return out;
                        if (ofmt !== 'arr') return out.toString('binary');
                        return [].slice.call(out);
                    };
                };
                var sbcs_decode = function make_sbcs_decode(cp) {
                    var D = cpt[cp].dec;
                    var DD = Buffer.allocUnsafe(131072),
                        d = 0,
                        c = '';
                    for (d = 0; d < D.length; ++d) {
                        if (!(c = D[d])) continue;
                        var w = c.charCodeAt(0);
                        DD[2 * d] = w & 255;
                        DD[2 * d + 1] = w >> 8;
                    }
                    return function sbcs_d(data2) {
                        var len = data2.length,
                            i2 = 0,
                            j = 0;
                        if (2 * len > mdl) {
                            mdl = 2 * len;
                            mdb = Buffer.allocUnsafe(mdl);
                        }
                        if (Buffer.isBuffer(data2)) {
                            for (i2 = 0; i2 < len; i2++) {
                                j = 2 * data2[i2];
                                mdb[2 * i2] = DD[j];
                                mdb[2 * i2 + 1] = DD[j + 1];
                            }
                        } else if (typeof data2 === 'string') {
                            for (i2 = 0; i2 < len; i2++) {
                                j = 2 * data2.charCodeAt(i2);
                                mdb[2 * i2] = DD[j];
                                mdb[2 * i2 + 1] = DD[j + 1];
                            }
                        } else {
                            for (i2 = 0; i2 < len; i2++) {
                                j = 2 * data2[i2];
                                mdb[2 * i2] = DD[j];
                                mdb[2 * i2 + 1] = DD[j + 1];
                            }
                        }
                        return mdb.slice(0, 2 * len).toString('ucs2');
                    };
                };
                var dbcs_encode = function make_dbcs_encode(cp) {
                    var E = cpt[cp].enc;
                    var EE = Buffer.allocUnsafe(131072);
                    for (var i2 = 0; i2 < 131072; ++i2) EE[i2] = 0;
                    var keys = Object.keys(E);
                    for (var ee = 0, e2 = keys[ee]; ee < keys.length; ++ee) {
                        if (!(e2 = keys[ee])) continue;
                        var f3 = e2.charCodeAt(0);
                        EE[2 * f3] = E[e2] & 255;
                        EE[2 * f3 + 1] = E[e2] >> 8;
                    }
                    return function dbcs_e(data2, ofmt) {
                        var len = data2.length,
                            out = Buffer.allocUnsafe(2 * len),
                            i3 = 0,
                            j = 0,
                            jj = 0,
                            k = 0,
                            D = 0;
                        if (typeof data2 === 'string') {
                            for (i3 = k = 0; i3 < len; ++i3) {
                                j = data2.charCodeAt(i3) * 2;
                                out[k++] = EE[j + 1] || EE[j];
                                if (EE[j + 1] > 0) out[k++] = EE[j];
                            }
                            out = out.slice(0, k);
                        } else if (Buffer.isBuffer(data2)) {
                            for (i3 = k = 0; i3 < len; ++i3) {
                                D = data2[i3];
                                if (D < 128) j = D;
                                else if (D < 224) {
                                    j = ((D & 31) << 6) + (data2[i3 + 1] & 63);
                                    ++i3;
                                } else if (D < 240) {
                                    j =
                                        ((D & 15) << 12) +
                                        ((data2[i3 + 1] & 63) << 6) +
                                        (data2[i3 + 2] & 63);
                                    i3 += 2;
                                } else {
                                    j =
                                        ((D & 7) << 18) +
                                        ((data2[i3 + 1] & 63) << 12) +
                                        ((data2[i3 + 2] & 63) << 6) +
                                        (data2[i3 + 3] & 63);
                                    i3 += 3;
                                }
                                if (j < 65536) {
                                    j *= 2;
                                    out[k++] = EE[j + 1] || EE[j];
                                    if (EE[j + 1] > 0) out[k++] = EE[j];
                                } else {
                                    jj = j - 65536;
                                    j = 2 * (55296 + ((jj >> 10) & 1023));
                                    out[k++] = EE[j + 1] || EE[j];
                                    if (EE[j + 1] > 0) out[k++] = EE[j];
                                    j = 2 * (56320 + (jj & 1023));
                                    out[k++] = EE[j + 1] || EE[j];
                                    if (EE[j + 1] > 0) out[k++] = EE[j];
                                }
                            }
                            out = out.slice(0, k);
                        } else {
                            for (i3 = k = 0; i3 < len; i3++) {
                                j = data2[i3].charCodeAt(0) * 2;
                                out[k++] = EE[j + 1] || EE[j];
                                if (EE[j + 1] > 0) out[k++] = EE[j];
                            }
                        }
                        if (!ofmt || ofmt === 'buf') return out;
                        if (ofmt !== 'arr') return out.toString('binary');
                        return [].slice.call(out);
                    };
                };
                var dbcs_decode = function make_dbcs_decode(cp) {
                    var D = cpt[cp].dec;
                    var DD = Buffer.allocUnsafe(131072),
                        d = 0,
                        c,
                        w = 0,
                        j = 0,
                        i2 = 0;
                    for (i2 = 0; i2 < 65536; ++i2) {
                        DD[2 * i2] = 255;
                        DD[2 * i2 + 1] = 253;
                    }
                    for (d = 0; d < D.length; ++d) {
                        if (!(c = D[d])) continue;
                        w = c.charCodeAt(0);
                        j = 2 * d;
                        DD[j] = w & 255;
                        DD[j + 1] = w >> 8;
                    }
                    return function dbcs_d(data2) {
                        var len = data2.length,
                            out = Buffer.allocUnsafe(2 * len),
                            i3 = 0,
                            j2 = 0,
                            k = 0;
                        if (Buffer.isBuffer(data2)) {
                            for (i3 = 0; i3 < len; i3++) {
                                j2 = 2 * data2[i3];
                                if (DD[j2] === 255 && DD[j2 + 1] === 253) {
                                    j2 = 2 * ((data2[i3] << 8) + data2[i3 + 1]);
                                    ++i3;
                                }
                                out[k++] = DD[j2];
                                out[k++] = DD[j2 + 1];
                            }
                        } else if (typeof data2 === 'string') {
                            for (i3 = 0; i3 < len; i3++) {
                                j2 = 2 * data2.charCodeAt(i3);
                                if (DD[j2] === 255 && DD[j2 + 1] === 253) {
                                    j2 =
                                        2 *
                                        ((data2.charCodeAt(i3) << 8) + data2.charCodeAt(i3 + 1));
                                    ++i3;
                                }
                                out[k++] = DD[j2];
                                out[k++] = DD[j2 + 1];
                            }
                        } else {
                            for (i3 = 0; i3 < len; i3++) {
                                j2 = 2 * data2[i3];
                                if (DD[j2] === 255 && DD[j2 + 1] === 253) {
                                    j2 = 2 * ((data2[i3] << 8) + data2[i3 + 1]);
                                    ++i3;
                                }
                                out[k++] = DD[j2];
                                out[k++] = DD[j2 + 1];
                            }
                        }
                        return out.slice(0, k).toString('ucs2');
                    };
                };
                magic_decode[65001] = function utf8_d(data2) {
                    if (typeof data2 === 'string') return utf8_d(data2.split('').map(cca));
                    var len = data2.length,
                        w = 0,
                        ww = 0;
                    if (4 * len > mdl) {
                        mdl = 4 * len;
                        mdb = Buffer.allocUnsafe(mdl);
                    }
                    var i2 = 0;
                    if (len >= 3 && data2[0] == 239) {
                        if (data2[1] == 187 && data2[2] == 191) i2 = 3;
                    }
                    for (var j = 1, k = 0, D = 0; i2 < len; i2 += j) {
                        j = 1;
                        D = data2[i2];
                        if (D < 128) w = D;
                        else if (D < 224) {
                            w = (D & 31) * 64 + (data2[i2 + 1] & 63);
                            j = 2;
                        } else if (D < 240) {
                            w = ((D & 15) << 12) + (data2[i2 + 1] & 63) * 64 + (data2[i2 + 2] & 63);
                            j = 3;
                        } else {
                            w =
                                (D & 7) * 262144 +
                                ((data2[i2 + 1] & 63) << 12) +
                                (data2[i2 + 2] & 63) * 64 +
                                (data2[i2 + 3] & 63);
                            j = 4;
                        }
                        if (w < 65536) {
                            mdb[k++] = w & 255;
                            mdb[k++] = w >> 8;
                        } else {
                            w -= 65536;
                            ww = 55296 + ((w >> 10) & 1023);
                            w = 56320 + (w & 1023);
                            mdb[k++] = ww & 255;
                            mdb[k++] = ww >>> 8;
                            mdb[k++] = w & 255;
                            mdb[k++] = (w >>> 8) & 255;
                        }
                    }
                    return mdb.slice(0, k).toString('ucs2');
                };
                magic_encode[65001] = function utf8_e(data2, ofmt) {
                    if (has_buf && Buffer.isBuffer(data2)) {
                        if (!ofmt || ofmt === 'buf') return data2;
                        if (ofmt !== 'arr') return data2.toString('binary');
                        return [].slice.call(data2);
                    }
                    var len = data2.length,
                        w = 0,
                        ww = 0,
                        j = 0;
                    var direct = typeof data2 === 'string';
                    if (4 * len > mdl) {
                        mdl = 4 * len;
                        mdb = Buffer.allocUnsafe(mdl);
                    }
                    for (var i2 = 0; i2 < len; ++i2) {
                        w = direct ? data2.charCodeAt(i2) : data2[i2].charCodeAt(0);
                        if (w <= 127) mdb[j++] = w;
                        else if (w <= 2047) {
                            mdb[j++] = 192 + (w >> 6);
                            mdb[j++] = 128 + (w & 63);
                        } else if (w >= 55296 && w <= 57343) {
                            w -= 55296;
                            ++i2;
                            ww =
                                (direct ? data2.charCodeAt(i2) : data2[i2].charCodeAt(0)) -
                                56320 +
                                (w << 10);
                            mdb[j++] = 240 + ((ww >>> 18) & 7);
                            mdb[j++] = 144 + ((ww >>> 12) & 63);
                            mdb[j++] = 128 + ((ww >>> 6) & 63);
                            mdb[j++] = 128 + (ww & 63);
                        } else {
                            mdb[j++] = 224 + (w >> 12);
                            mdb[j++] = 128 + ((w >> 6) & 63);
                            mdb[j++] = 128 + (w & 63);
                        }
                    }
                    if (!ofmt || ofmt === 'buf') return mdb.slice(0, j);
                    if (ofmt !== 'arr') return mdb.slice(0, j).toString('binary');
                    return [].slice.call(mdb, 0, j);
                };
            }
            var encache = function encache2() {
                if (has_buf) {
                    if (cpdcache[sbcs_cache[0]]) return;
                    var i2 = 0,
                        s2 = 0;
                    for (i2 = 0; i2 < sbcs_cache.length; ++i2) {
                        s2 = sbcs_cache[i2];
                        if (cpt[s2]) {
                            cpdcache[s2] = sbcs_decode(s2);
                            cpecache[s2] = sbcs_encode(s2);
                        }
                    }
                    for (i2 = 0; i2 < dbcs_cache.length; ++i2) {
                        s2 = dbcs_cache[i2];
                        if (cpt[s2]) {
                            cpdcache[s2] = dbcs_decode(s2);
                            cpecache[s2] = dbcs_encode(s2);
                        }
                    }
                    for (i2 = 0; i2 < magic_cache.length; ++i2) {
                        s2 = magic_cache[i2];
                        if (magic_decode[s2]) cpdcache[s2] = magic_decode[s2];
                        if (magic_encode[s2]) cpecache[s2] = magic_encode[s2];
                    }
                }
            };
            var null_enc = function (data2, ofmt) {
                return '';
            };
            var cp_decache = function cp_decache2(cp) {
                delete cpdcache[cp];
                delete cpecache[cp];
            };
            var decache = function decache2() {
                if (has_buf) {
                    if (!cpdcache[sbcs_cache[0]]) return;
                    sbcs_cache.forEach(cp_decache);
                    dbcs_cache.forEach(cp_decache);
                    magic_cache.forEach(cp_decache);
                }
                last_enc = null_enc;
                last_cp = 0;
            };
            var cache = {
                encache,
                decache,
                sbcs: sbcs_cache,
                dbcs: dbcs_cache,
            };
            encache();
            var BM = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
            var SetD = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'(),-./:?";
            var last_enc = null_enc,
                last_cp = 0;
            var encode = function encode2(cp, data2, ofmt) {
                if (cp === last_cp && last_enc) {
                    return last_enc(data2, ofmt);
                }
                if (cpecache[cp]) {
                    last_enc = cpecache[(last_cp = cp)];
                    return last_enc(data2, ofmt);
                }
                if (has_buf && Buffer.isBuffer(data2)) data2 = data2.toString('utf8');
                var len = data2.length;
                var out = has_buf ? Buffer.allocUnsafe(4 * len) : [],
                    w = 0,
                    i2 = 0,
                    j = 0,
                    ww = 0;
                var C = cpt[cp],
                    E,
                    M = '';
                var isstr = typeof data2 === 'string';
                if (C && (E = C.enc))
                    for (i2 = 0; i2 < len; ++i2, ++j) {
                        w = E[isstr ? data2.charAt(i2) : data2[i2]];
                        if (w > 255) {
                            out[j] = w >> 8;
                            out[++j] = w & 255;
                        } else out[j] = w & 255;
                    }
                else if ((M = magic[cp]))
                    switch (M) {
                        case 'utf8':
                            if (has_buf && isstr) {
                                out = Buffer_from(data2, M);
                                j = out.length;
                                break;
                            }
                            for (i2 = 0; i2 < len; ++i2, ++j) {
                                w = isstr ? data2.charCodeAt(i2) : data2[i2].charCodeAt(0);
                                if (w <= 127) out[j] = w;
                                else if (w <= 2047) {
                                    out[j] = 192 + (w >> 6);
                                    out[++j] = 128 + (w & 63);
                                } else if (w >= 55296 && w <= 57343) {
                                    w -= 55296;
                                    ww =
                                        (isstr
                                            ? data2.charCodeAt(++i2)
                                            : data2[++i2].charCodeAt(0)) -
                                        56320 +
                                        (w << 10);
                                    out[j] = 240 + ((ww >>> 18) & 7);
                                    out[++j] = 144 + ((ww >>> 12) & 63);
                                    out[++j] = 128 + ((ww >>> 6) & 63);
                                    out[++j] = 128 + (ww & 63);
                                } else {
                                    out[j] = 224 + (w >> 12);
                                    out[++j] = 128 + ((w >> 6) & 63);
                                    out[++j] = 128 + (w & 63);
                                }
                            }
                            break;
                        case 'ascii':
                            if (has_buf && typeof data2 === 'string') {
                                out = Buffer_from(data2, M);
                                j = out.length;
                                break;
                            }
                            for (i2 = 0; i2 < len; ++i2, ++j) {
                                w = isstr ? data2.charCodeAt(i2) : data2[i2].charCodeAt(0);
                                if (w <= 127) out[j] = w;
                                else throw new Error('bad ascii ' + w);
                            }
                            break;
                        case 'utf16le':
                            if (has_buf && typeof data2 === 'string') {
                                out = Buffer_from(data2, M);
                                j = out.length;
                                break;
                            }
                            for (i2 = 0; i2 < len; ++i2) {
                                w = isstr ? data2.charCodeAt(i2) : data2[i2].charCodeAt(0);
                                out[j++] = w & 255;
                                out[j++] = w >> 8;
                            }
                            break;
                        case 'utf16be':
                            for (i2 = 0; i2 < len; ++i2) {
                                w = isstr ? data2.charCodeAt(i2) : data2[i2].charCodeAt(0);
                                out[j++] = w >> 8;
                                out[j++] = w & 255;
                            }
                            break;
                        case 'utf32le':
                            for (i2 = 0; i2 < len; ++i2) {
                                w = isstr ? data2.charCodeAt(i2) : data2[i2].charCodeAt(0);
                                if (w >= 55296 && w <= 57343)
                                    w =
                                        65536 +
                                        ((w - 55296) << 10) +
                                        (data2[++i2].charCodeAt(0) - 56320);
                                out[j++] = w & 255;
                                w >>= 8;
                                out[j++] = w & 255;
                                w >>= 8;
                                out[j++] = w & 255;
                                w >>= 8;
                                out[j++] = w & 255;
                            }
                            break;
                        case 'utf32be':
                            for (i2 = 0; i2 < len; ++i2) {
                                w = isstr ? data2.charCodeAt(i2) : data2[i2].charCodeAt(0);
                                if (w >= 55296 && w <= 57343)
                                    w =
                                        65536 +
                                        ((w - 55296) << 10) +
                                        (data2[++i2].charCodeAt(0) - 56320);
                                out[j + 3] = w & 255;
                                w >>= 8;
                                out[j + 2] = w & 255;
                                w >>= 8;
                                out[j + 1] = w & 255;
                                w >>= 8;
                                out[j] = w & 255;
                                j += 4;
                            }
                            break;
                        case 'utf7':
                            for (i2 = 0; i2 < len; i2++) {
                                var c = isstr ? data2.charAt(i2) : data2[i2].charAt(0);
                                if (c === '+') {
                                    out[j++] = 43;
                                    out[j++] = 45;
                                    continue;
                                }
                                if (SetD.indexOf(c) > -1) {
                                    out[j++] = c.charCodeAt(0);
                                    continue;
                                }
                                var tt = encode2(1201, c);
                                out[j++] = 43;
                                out[j++] = BM.charCodeAt(tt[0] >> 2);
                                out[j++] = BM.charCodeAt(((tt[0] & 3) << 4) + ((tt[1] || 0) >> 4));
                                out[j++] = BM.charCodeAt(((tt[1] & 15) << 2) + ((tt[2] || 0) >> 6));
                                out[j++] = 45;
                            }
                            break;
                        default:
                            throw new Error('Unsupported magic: ' + cp + ' ' + magic[cp]);
                    }
                else throw new Error('Unrecognized CP: ' + cp);
                out = out.slice(0, j);
                if (!has_buf) return ofmt == 'str' ? out.map(sfcc).join('') : out;
                if (!ofmt || ofmt === 'buf') return out;
                if (ofmt !== 'arr') return out.toString('binary');
                return [].slice.call(out);
            };
            var decode = function decode2(cp, data2) {
                var F2;
                if ((F2 = cpdcache[cp])) return F2(data2);
                if (typeof data2 === 'string') return decode2(cp, data2.split('').map(cca));
                var len = data2.length,
                    out = new Array(len),
                    s2 = '',
                    w = 0,
                    i2 = 0,
                    j = 1,
                    k = 0,
                    ww = 0;
                var C = cpt[cp],
                    D,
                    M = '';
                if (C && (D = C.dec)) {
                    for (i2 = 0; i2 < len; i2 += j) {
                        j = 2;
                        s2 = D[(data2[i2] << 8) + data2[i2 + 1]];
                        if (!s2) {
                            j = 1;
                            s2 = D[data2[i2]];
                        }
                        if (!s2)
                            throw new Error(
                                'Unrecognized code: ' +
                                    data2[i2] +
                                    ' ' +
                                    data2[i2 + j - 1] +
                                    ' ' +
                                    i2 +
                                    ' ' +
                                    j +
                                    ' ' +
                                    D[data2[i2]],
                            );
                        out[k++] = s2;
                    }
                } else if ((M = magic[cp]))
                    switch (M) {
                        case 'utf8':
                            if (len >= 3 && data2[0] == 239) {
                                if (data2[1] == 187 && data2[2] == 191) i2 = 3;
                            }
                            for (; i2 < len; i2 += j) {
                                j = 1;
                                if (data2[i2] < 128) w = data2[i2];
                                else if (data2[i2] < 224) {
                                    w = (data2[i2] & 31) * 64 + (data2[i2 + 1] & 63);
                                    j = 2;
                                } else if (data2[i2] < 240) {
                                    w =
                                        ((data2[i2] & 15) << 12) +
                                        (data2[i2 + 1] & 63) * 64 +
                                        (data2[i2 + 2] & 63);
                                    j = 3;
                                } else {
                                    w =
                                        (data2[i2] & 7) * 262144 +
                                        ((data2[i2 + 1] & 63) << 12) +
                                        (data2[i2 + 2] & 63) * 64 +
                                        (data2[i2 + 3] & 63);
                                    j = 4;
                                }
                                if (w < 65536) {
                                    out[k++] = String.fromCharCode(w);
                                } else {
                                    w -= 65536;
                                    ww = 55296 + ((w >> 10) & 1023);
                                    w = 56320 + (w & 1023);
                                    out[k++] = String.fromCharCode(ww);
                                    out[k++] = String.fromCharCode(w);
                                }
                            }
                            break;
                        case 'ascii':
                            if (has_buf && Buffer.isBuffer(data2)) return data2.toString(M);
                            for (i2 = 0; i2 < len; i2++) out[i2] = String.fromCharCode(data2[i2]);
                            k = len;
                            break;
                        case 'utf16le':
                            if (len >= 2 && data2[0] == 255) {
                                if (data2[1] == 254) i2 = 2;
                            }
                            if (has_buf && Buffer.isBuffer(data2)) return data2.toString(M);
                            j = 2;
                            for (; i2 + 1 < len; i2 += j) {
                                out[k++] = String.fromCharCode((data2[i2 + 1] << 8) + data2[i2]);
                            }
                            break;
                        case 'utf16be':
                            if (len >= 2 && data2[0] == 254) {
                                if (data2[1] == 255) i2 = 2;
                            }
                            j = 2;
                            for (; i2 + 1 < len; i2 += j) {
                                out[k++] = String.fromCharCode((data2[i2] << 8) + data2[i2 + 1]);
                            }
                            break;
                        case 'utf32le':
                            if (len >= 4 && data2[0] == 255) {
                                if (data2[1] == 254 && data2[2] === 0 && data2[3] === 0) i2 = 4;
                            }
                            j = 4;
                            for (; i2 < len; i2 += j) {
                                w =
                                    (data2[i2 + 3] << 24) +
                                    (data2[i2 + 2] << 16) +
                                    (data2[i2 + 1] << 8) +
                                    data2[i2];
                                if (w > 65535) {
                                    w -= 65536;
                                    out[k++] = String.fromCharCode(55296 + ((w >> 10) & 1023));
                                    out[k++] = String.fromCharCode(56320 + (w & 1023));
                                } else out[k++] = String.fromCharCode(w);
                            }
                            break;
                        case 'utf32be':
                            if (len >= 4 && data2[3] == 255) {
                                if (data2[2] == 254 && data2[1] === 0 && data2[0] === 0) i2 = 4;
                            }
                            j = 4;
                            for (; i2 < len; i2 += j) {
                                w =
                                    (data2[i2] << 24) +
                                    (data2[i2 + 1] << 16) +
                                    (data2[i2 + 2] << 8) +
                                    data2[i2 + 3];
                                if (w > 65535) {
                                    w -= 65536;
                                    out[k++] = String.fromCharCode(55296 + ((w >> 10) & 1023));
                                    out[k++] = String.fromCharCode(56320 + (w & 1023));
                                } else out[k++] = String.fromCharCode(w);
                            }
                            break;
                        case 'utf7':
                            if (len >= 4 && data2[0] == 43 && data2[1] == 47 && data2[2] == 118) {
                                if (len >= 5 && data2[3] == 56 && data2[4] == 45) i2 = 5;
                                else if (
                                    data2[3] == 56 ||
                                    data2[3] == 57 ||
                                    data2[3] == 43 ||
                                    data2[3] == 47
                                )
                                    i2 = 4;
                            }
                            for (; i2 < len; i2 += j) {
                                if (data2[i2] !== 43) {
                                    j = 1;
                                    out[k++] = String.fromCharCode(data2[i2]);
                                    continue;
                                }
                                j = 1;
                                if (data2[i2 + 1] === 45) {
                                    j = 2;
                                    out[k++] = '+';
                                    continue;
                                }
                                while (String.fromCharCode(data2[i2 + j]).match(/[A-Za-z0-9+\/]/))
                                    j++;
                                var dash = 0;
                                if (data2[i2 + j] === 45) {
                                    ++j;
                                    dash = 1;
                                }
                                var tt = [];
                                var o64 = '';
                                var c1 = 0,
                                    c2 = 0,
                                    c3 = 0;
                                var e1 = 0,
                                    e2 = 0,
                                    e3 = 0,
                                    e4 = 0;
                                for (var l = 1; l < j - dash; ) {
                                    e1 = BM.indexOf(String.fromCharCode(data2[i2 + l++]));
                                    e2 = BM.indexOf(String.fromCharCode(data2[i2 + l++]));
                                    c1 = (e1 << 2) | (e2 >> 4);
                                    tt.push(c1);
                                    e3 = BM.indexOf(String.fromCharCode(data2[i2 + l++]));
                                    if (e3 === -1) break;
                                    c2 = ((e2 & 15) << 4) | (e3 >> 2);
                                    tt.push(c2);
                                    e4 = BM.indexOf(String.fromCharCode(data2[i2 + l++]));
                                    if (e4 === -1) break;
                                    c3 = ((e3 & 3) << 6) | e4;
                                    if (e4 < 64) tt.push(c3);
                                }
                                o64 = decode2(1201, tt);
                                for (l = 0; l < o64.length; ++l) out[k++] = o64.charAt(l);
                            }
                            break;
                        default:
                            throw new Error('Unsupported magic: ' + cp + ' ' + magic[cp]);
                    }
                else throw new Error('Unrecognized CP: ' + cp);
                return out.slice(0, k).join('');
            };
            var hascp = function hascp2(cp) {
                return !!(cpt[cp] || magic[cp]);
            };
            cpt.utils = { decode, encode, hascp, magic, cache };
            return cpt;
        });
    },
});

// node_modules/xlsx/xlsx.js
var require_xlsx = __commonJS({
    'node_modules/xlsx/xlsx.js'(exports2, module2) {
        var XLSX2 = {};
        function make_xlsx_lib(XLSX3) {
            XLSX3.version = '0.18.5';
            var current_codepage = 1200,
                current_ansi = 1252;
            var $cptable;
            if (typeof cptable !== 'undefined') $cptable = cptable;
            else if (typeof module2 !== 'undefined' && typeof require !== 'undefined') {
                $cptable = require_cpexcel();
            }
            var VALID_ANSI = [
                874, 932, 936, 949, 950, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1e4,
            ];
            var CS2CP = {
                0: 1252,
                /* ANSI */
                1: 65001,
                /* DEFAULT */
                2: 65001,
                /* SYMBOL */
                77: 1e4,
                /* MAC */
                128: 932,
                /* SHIFTJIS */
                129: 949,
                /* HANGUL */
                130: 1361,
                /* JOHAB */
                134: 936,
                /* GB2312 */
                136: 950,
                /* CHINESEBIG5 */
                161: 1253,
                /* GREEK */
                162: 1254,
                /* TURKISH */
                163: 1258,
                /* VIETNAMESE */
                177: 1255,
                /* HEBREW */
                178: 1256,
                /* ARABIC */
                186: 1257,
                /* BALTIC */
                204: 1251,
                /* RUSSIAN */
                222: 874,
                /* THAI */
                238: 1250,
                /* EASTEUROPE */
                255: 1252,
                /* OEM */
                69: 6969,
                /* MISC */
            };
            var set_ansi = function (cp) {
                if (VALID_ANSI.indexOf(cp) == -1) return;
                current_ansi = CS2CP[0] = cp;
            };
            function reset_ansi() {
                set_ansi(1252);
            }
            var set_cp = function (cp) {
                current_codepage = cp;
                set_ansi(cp);
            };
            function reset_cp() {
                set_cp(1200);
                reset_ansi();
            }
            function char_codes(data2) {
                var o = [];
                for (var i2 = 0, len = data2.length; i2 < len; ++i2) o[i2] = data2.charCodeAt(i2);
                return o;
            }
            function utf16leread(data2) {
                var o = [];
                for (var i2 = 0; i2 < data2.length >> 1; ++i2)
                    o[i2] = String.fromCharCode(
                        data2.charCodeAt(2 * i2) + (data2.charCodeAt(2 * i2 + 1) << 8),
                    );
                return o.join('');
            }
            function utf16beread(data2) {
                var o = [];
                for (var i2 = 0; i2 < data2.length >> 1; ++i2)
                    o[i2] = String.fromCharCode(
                        data2.charCodeAt(2 * i2 + 1) + (data2.charCodeAt(2 * i2) << 8),
                    );
                return o.join('');
            }
            var debom = function (data2) {
                var c1 = data2.charCodeAt(0),
                    c2 = data2.charCodeAt(1);
                if (c1 == 255 && c2 == 254) return utf16leread(data2.slice(2));
                if (c1 == 254 && c2 == 255) return utf16beread(data2.slice(2));
                if (c1 == 65279) return data2.slice(1);
                return data2;
            };
            var _getchar = function _gc1(x2) {
                return String.fromCharCode(x2);
            };
            var _getansi = function _ga1(x2) {
                return String.fromCharCode(x2);
            };
            if (typeof $cptable !== 'undefined') {
                set_cp = function (cp) {
                    current_codepage = cp;
                    set_ansi(cp);
                };
                debom = function (data2) {
                    if (data2.charCodeAt(0) === 255 && data2.charCodeAt(1) === 254) {
                        return $cptable.utils.decode(1200, char_codes(data2.slice(2)));
                    }
                    return data2;
                };
                _getchar = function _gc2(x2) {
                    if (current_codepage === 1200) return String.fromCharCode(x2);
                    return $cptable.utils.decode(current_codepage, [x2 & 255, x2 >> 8])[0];
                };
                _getansi = function _ga2(x2) {
                    return $cptable.utils.decode(current_ansi, [x2])[0];
                };
            }
            var DENSE = null;
            var DIF_XL = true;
            var Base64_map = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
            function Base64_encode(input) {
                var o = '';
                var c1 = 0,
                    c2 = 0,
                    c3 = 0,
                    e1 = 0,
                    e2 = 0,
                    e3 = 0,
                    e4 = 0;
                for (var i2 = 0; i2 < input.length; ) {
                    c1 = input.charCodeAt(i2++);
                    e1 = c1 >> 2;
                    c2 = input.charCodeAt(i2++);
                    e2 = ((c1 & 3) << 4) | (c2 >> 4);
                    c3 = input.charCodeAt(i2++);
                    e3 = ((c2 & 15) << 2) | (c3 >> 6);
                    e4 = c3 & 63;
                    if (isNaN(c2)) {
                        e3 = e4 = 64;
                    } else if (isNaN(c3)) {
                        e4 = 64;
                    }
                    o +=
                        Base64_map.charAt(e1) +
                        Base64_map.charAt(e2) +
                        Base64_map.charAt(e3) +
                        Base64_map.charAt(e4);
                }
                return o;
            }
            function Base64_decode(input) {
                var o = '';
                var c1 = 0,
                    c2 = 0,
                    c3 = 0,
                    e1 = 0,
                    e2 = 0,
                    e3 = 0,
                    e4 = 0;
                input = input.replace(/[^\w\+\/\=]/g, '');
                for (var i2 = 0; i2 < input.length; ) {
                    e1 = Base64_map.indexOf(input.charAt(i2++));
                    e2 = Base64_map.indexOf(input.charAt(i2++));
                    c1 = (e1 << 2) | (e2 >> 4);
                    o += String.fromCharCode(c1);
                    e3 = Base64_map.indexOf(input.charAt(i2++));
                    c2 = ((e2 & 15) << 4) | (e3 >> 2);
                    if (e3 !== 64) {
                        o += String.fromCharCode(c2);
                    }
                    e4 = Base64_map.indexOf(input.charAt(i2++));
                    c3 = ((e3 & 3) << 6) | e4;
                    if (e4 !== 64) {
                        o += String.fromCharCode(c3);
                    }
                }
                return o;
            }
            var has_buf = (function () {
                return (
                    typeof Buffer !== 'undefined' &&
                    typeof process !== 'undefined' &&
                    typeof process.versions !== 'undefined' &&
                    !!process.versions.node
                );
            })();
            var Buffer_from = (function () {
                if (typeof Buffer !== 'undefined') {
                    var nbfs = !Buffer.from;
                    if (!nbfs)
                        try {
                            Buffer.from('foo', 'utf8');
                        } catch (e2) {
                            nbfs = true;
                        }
                    return nbfs
                        ? function (buf, enc) {
                              return enc ? new Buffer(buf, enc) : new Buffer(buf);
                          }
                        : Buffer.from.bind(Buffer);
                }
                return function () {};
            })();
            function new_raw_buf(len) {
                if (has_buf) return Buffer.alloc ? Buffer.alloc(len) : new Buffer(len);
                return typeof Uint8Array != 'undefined' ? new Uint8Array(len) : new Array(len);
            }
            function new_unsafe_buf(len) {
                if (has_buf) return Buffer.allocUnsafe ? Buffer.allocUnsafe(len) : new Buffer(len);
                return typeof Uint8Array != 'undefined' ? new Uint8Array(len) : new Array(len);
            }
            var s2a = function s2a2(s2) {
                if (has_buf) return Buffer_from(s2, 'binary');
                return s2.split('').map(function (x2) {
                    return x2.charCodeAt(0) & 255;
                });
            };
            function s2ab(s2) {
                if (typeof ArrayBuffer === 'undefined') return s2a(s2);
                var buf = new ArrayBuffer(s2.length),
                    view = new Uint8Array(buf);
                for (var i2 = 0; i2 != s2.length; ++i2) view[i2] = s2.charCodeAt(i2) & 255;
                return buf;
            }
            function a2s(data2) {
                if (Array.isArray(data2))
                    return data2
                        .map(function (c) {
                            return String.fromCharCode(c);
                        })
                        .join('');
                var o = [];
                for (var i2 = 0; i2 < data2.length; ++i2) o[i2] = String.fromCharCode(data2[i2]);
                return o.join('');
            }
            function a2u(data2) {
                if (typeof Uint8Array === 'undefined') throw new Error('Unsupported');
                return new Uint8Array(data2);
            }
            function ab2a(data2) {
                if (typeof ArrayBuffer == 'undefined') throw new Error('Unsupported');
                if (data2 instanceof ArrayBuffer) return ab2a(new Uint8Array(data2));
                var o = new Array(data2.length);
                for (var i2 = 0; i2 < data2.length; ++i2) o[i2] = data2[i2];
                return o;
            }
            var bconcat = has_buf
                ? function (bufs) {
                      return Buffer.concat(
                          bufs.map(function (buf) {
                              return Buffer.isBuffer(buf) ? buf : Buffer_from(buf);
                          }),
                      );
                  }
                : function (bufs) {
                      if (typeof Uint8Array !== 'undefined') {
                          var i2 = 0,
                              maxlen = 0;
                          for (i2 = 0; i2 < bufs.length; ++i2) maxlen += bufs[i2].length;
                          var o = new Uint8Array(maxlen);
                          var len = 0;
                          for (i2 = 0, maxlen = 0; i2 < bufs.length; maxlen += len, ++i2) {
                              len = bufs[i2].length;
                              if (bufs[i2] instanceof Uint8Array) o.set(bufs[i2], maxlen);
                              else if (typeof bufs[i2] == 'string') {
                                  throw 'wtf';
                              } else o.set(new Uint8Array(bufs[i2]), maxlen);
                          }
                          return o;
                      }
                      return [].concat.apply(
                          [],
                          bufs.map(function (buf) {
                              return Array.isArray(buf) ? buf : [].slice.call(buf);
                          }),
                      );
                  };
            function utf8decode(content) {
                var out = [],
                    widx = 0,
                    L = content.length + 250;
                var o = new_raw_buf(content.length + 255);
                for (var ridx = 0; ridx < content.length; ++ridx) {
                    var c = content.charCodeAt(ridx);
                    if (c < 128) o[widx++] = c;
                    else if (c < 2048) {
                        o[widx++] = 192 | ((c >> 6) & 31);
                        o[widx++] = 128 | (c & 63);
                    } else if (c >= 55296 && c < 57344) {
                        c = (c & 1023) + 64;
                        var d = content.charCodeAt(++ridx) & 1023;
                        o[widx++] = 240 | ((c >> 8) & 7);
                        o[widx++] = 128 | ((c >> 2) & 63);
                        o[widx++] = 128 | ((d >> 6) & 15) | ((c & 3) << 4);
                        o[widx++] = 128 | (d & 63);
                    } else {
                        o[widx++] = 224 | ((c >> 12) & 15);
                        o[widx++] = 128 | ((c >> 6) & 63);
                        o[widx++] = 128 | (c & 63);
                    }
                    if (widx > L) {
                        out.push(o.slice(0, widx));
                        widx = 0;
                        o = new_raw_buf(65535);
                        L = 65530;
                    }
                }
                out.push(o.slice(0, widx));
                return bconcat(out);
            }
            var chr0 = /\u0000/g,
                chr1 = /[\u0001-\u0006]/g;
            function _strrev(x2) {
                var o = '',
                    i2 = x2.length - 1;
                while (i2 >= 0) o += x2.charAt(i2--);
                return o;
            }
            function pad0(v, d) {
                var t2 = '' + v;
                return t2.length >= d ? t2 : fill('0', d - t2.length) + t2;
            }
            function pad_(v, d) {
                var t2 = '' + v;
                return t2.length >= d ? t2 : fill(' ', d - t2.length) + t2;
            }
            function rpad_(v, d) {
                var t2 = '' + v;
                return t2.length >= d ? t2 : t2 + fill(' ', d - t2.length);
            }
            function pad0r1(v, d) {
                var t2 = '' + Math.round(v);
                return t2.length >= d ? t2 : fill('0', d - t2.length) + t2;
            }
            function pad0r2(v, d) {
                var t2 = '' + v;
                return t2.length >= d ? t2 : fill('0', d - t2.length) + t2;
            }
            var p2_32 = Math.pow(2, 32);
            function pad0r(v, d) {
                if (v > p2_32 || v < -p2_32) return pad0r1(v, d);
                var i2 = Math.round(v);
                return pad0r2(i2, d);
            }
            function SSF_isgeneral(s2, i2) {
                i2 = i2 || 0;
                return (
                    s2.length >= 7 + i2 &&
                    (s2.charCodeAt(i2) | 32) === 103 &&
                    (s2.charCodeAt(i2 + 1) | 32) === 101 &&
                    (s2.charCodeAt(i2 + 2) | 32) === 110 &&
                    (s2.charCodeAt(i2 + 3) | 32) === 101 &&
                    (s2.charCodeAt(i2 + 4) | 32) === 114 &&
                    (s2.charCodeAt(i2 + 5) | 32) === 97 &&
                    (s2.charCodeAt(i2 + 6) | 32) === 108
                );
            }
            var days = [
                ['Sun', 'Sunday'],
                ['Mon', 'Monday'],
                ['Tue', 'Tuesday'],
                ['Wed', 'Wednesday'],
                ['Thu', 'Thursday'],
                ['Fri', 'Friday'],
                ['Sat', 'Saturday'],
            ];
            var months = [
                ['J', 'Jan', 'January'],
                ['F', 'Feb', 'February'],
                ['M', 'Mar', 'March'],
                ['A', 'Apr', 'April'],
                ['M', 'May', 'May'],
                ['J', 'Jun', 'June'],
                ['J', 'Jul', 'July'],
                ['A', 'Aug', 'August'],
                ['S', 'Sep', 'September'],
                ['O', 'Oct', 'October'],
                ['N', 'Nov', 'November'],
                ['D', 'Dec', 'December'],
            ];
            function SSF_init_table(t2) {
                if (!t2) t2 = {};
                t2[0] = 'General';
                t2[1] = '0';
                t2[2] = '0.00';
                t2[3] = '#,##0';
                t2[4] = '#,##0.00';
                t2[9] = '0%';
                t2[10] = '0.00%';
                t2[11] = '0.00E+00';
                t2[12] = '# ?/?';
                t2[13] = '# ??/??';
                t2[14] = 'm/d/yy';
                t2[15] = 'd-mmm-yy';
                t2[16] = 'd-mmm';
                t2[17] = 'mmm-yy';
                t2[18] = 'h:mm AM/PM';
                t2[19] = 'h:mm:ss AM/PM';
                t2[20] = 'h:mm';
                t2[21] = 'h:mm:ss';
                t2[22] = 'm/d/yy h:mm';
                t2[37] = '#,##0 ;(#,##0)';
                t2[38] = '#,##0 ;[Red](#,##0)';
                t2[39] = '#,##0.00;(#,##0.00)';
                t2[40] = '#,##0.00;[Red](#,##0.00)';
                t2[45] = 'mm:ss';
                t2[46] = '[h]:mm:ss';
                t2[47] = 'mmss.0';
                t2[48] = '##0.0E+0';
                t2[49] = '@';
                t2[56] = '"\u4E0A\u5348/\u4E0B\u5348 "hh"\u6642"mm"\u5206"ss"\u79D2 "';
                return t2;
            }
            var table_fmt = {
                0: 'General',
                1: '0',
                2: '0.00',
                3: '#,##0',
                4: '#,##0.00',
                9: '0%',
                10: '0.00%',
                11: '0.00E+00',
                12: '# ?/?',
                13: '# ??/??',
                14: 'm/d/yy',
                15: 'd-mmm-yy',
                16: 'd-mmm',
                17: 'mmm-yy',
                18: 'h:mm AM/PM',
                19: 'h:mm:ss AM/PM',
                20: 'h:mm',
                21: 'h:mm:ss',
                22: 'm/d/yy h:mm',
                37: '#,##0 ;(#,##0)',
                38: '#,##0 ;[Red](#,##0)',
                39: '#,##0.00;(#,##0.00)',
                40: '#,##0.00;[Red](#,##0.00)',
                45: 'mm:ss',
                46: '[h]:mm:ss',
                47: 'mmss.0',
                48: '##0.0E+0',
                49: '@',
                56: '"\u4E0A\u5348/\u4E0B\u5348 "hh"\u6642"mm"\u5206"ss"\u79D2 "',
            };
            var SSF_default_map = {
                5: 37,
                6: 38,
                7: 39,
                8: 40,
                //  5 -> 37 ...  8 -> 40
                23: 0,
                24: 0,
                25: 0,
                26: 0,
                // 23 ->  0 ... 26 ->  0
                27: 14,
                28: 14,
                29: 14,
                30: 14,
                31: 14,
                // 27 -> 14 ... 31 -> 14
                50: 14,
                51: 14,
                52: 14,
                53: 14,
                54: 14,
                // 50 -> 14 ... 58 -> 14
                55: 14,
                56: 14,
                57: 14,
                58: 14,
                59: 1,
                60: 2,
                61: 3,
                62: 4,
                // 59 ->  1 ... 62 ->  4
                67: 9,
                68: 10,
                // 67 ->  9 ... 68 -> 10
                69: 12,
                70: 13,
                71: 14,
                // 69 -> 12 ... 71 -> 14
                72: 14,
                73: 15,
                74: 16,
                75: 17,
                // 72 -> 14 ... 75 -> 17
                76: 20,
                77: 21,
                78: 22,
                // 76 -> 20 ... 78 -> 22
                79: 45,
                80: 46,
                81: 47,
                // 79 -> 45 ... 81 -> 47
                82: 0,
                // 82 ->  0 ... 65536 -> 0 (omitted)
            };
            var SSF_default_str = {
                //  5 -- Currency,   0 decimal, black negative
                5: '"$"#,##0_);\\("$"#,##0\\)',
                63: '"$"#,##0_);\\("$"#,##0\\)',
                //  6 -- Currency,   0 decimal, red   negative
                6: '"$"#,##0_);[Red]\\("$"#,##0\\)',
                64: '"$"#,##0_);[Red]\\("$"#,##0\\)',
                //  7 -- Currency,   2 decimal, black negative
                7: '"$"#,##0.00_);\\("$"#,##0.00\\)',
                65: '"$"#,##0.00_);\\("$"#,##0.00\\)',
                //  8 -- Currency,   2 decimal, red   negative
                8: '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
                66: '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
                // 41 -- Accounting, 0 decimal, No Symbol
                41: '_(* #,##0_);_(* \\(#,##0\\);_(* "-"_);_(@_)',
                // 42 -- Accounting, 0 decimal, $  Symbol
                42: '_("$"* #,##0_);_("$"* \\(#,##0\\);_("$"* "-"_);_(@_)',
                // 43 -- Accounting, 2 decimal, No Symbol
                43: '_(* #,##0.00_);_(* \\(#,##0.00\\);_(* "-"??_);_(@_)',
                // 44 -- Accounting, 2 decimal, $  Symbol
                44: '_("$"* #,##0.00_);_("$"* \\(#,##0.00\\);_("$"* "-"??_);_(@_)',
            };
            function SSF_frac(x2, D, mixed) {
                var sgn = x2 < 0 ? -1 : 1;
                var B = x2 * sgn;
                var P_2 = 0,
                    P_1 = 1,
                    P = 0;
                var Q_2 = 1,
                    Q_1 = 0,
                    Q = 0;
                var A2 = Math.floor(B);
                while (Q_1 < D) {
                    A2 = Math.floor(B);
                    P = A2 * P_1 + P_2;
                    Q = A2 * Q_1 + Q_2;
                    if (B - A2 < 5e-8) break;
                    B = 1 / (B - A2);
                    P_2 = P_1;
                    P_1 = P;
                    Q_2 = Q_1;
                    Q_1 = Q;
                }
                if (Q > D) {
                    if (Q_1 > D) {
                        Q = Q_2;
                        P = P_2;
                    } else {
                        Q = Q_1;
                        P = P_1;
                    }
                }
                if (!mixed) return [0, sgn * P, Q];
                var q = Math.floor((sgn * P) / Q);
                return [q, sgn * P - q * Q, Q];
            }
            function SSF_parse_date_code(v, opts, b2) {
                if (v > 2958465 || v < 0) return null;
                var date = v | 0,
                    time = Math.floor(86400 * (v - date)),
                    dow = 0;
                var dout = [];
                var out = {
                    D: date,
                    T: time,
                    u: 86400 * (v - date) - time,
                    y: 0,
                    m: 0,
                    d: 0,
                    H: 0,
                    M: 0,
                    S: 0,
                    q: 0,
                };
                if (Math.abs(out.u) < 1e-6) out.u = 0;
                if (opts && opts.date1904) date += 1462;
                if (out.u > 0.9999) {
                    out.u = 0;
                    if (++time == 86400) {
                        out.T = time = 0;
                        ++date;
                        ++out.D;
                    }
                }
                if (date === 60) {
                    dout = b2 ? [1317, 10, 29] : [1900, 2, 29];
                    dow = 3;
                } else if (date === 0) {
                    dout = b2 ? [1317, 8, 29] : [1900, 1, 0];
                    dow = 6;
                } else {
                    if (date > 60) --date;
                    var d = new Date(1900, 0, 1);
                    d.setDate(d.getDate() + date - 1);
                    dout = [d.getFullYear(), d.getMonth() + 1, d.getDate()];
                    dow = d.getDay();
                    if (date < 60) dow = (dow + 6) % 7;
                    if (b2) dow = SSF_fix_hijri(d, dout);
                }
                out.y = dout[0];
                out.m = dout[1];
                out.d = dout[2];
                out.S = time % 60;
                time = Math.floor(time / 60);
                out.M = time % 60;
                time = Math.floor(time / 60);
                out.H = time;
                out.q = dow;
                return out;
            }
            var SSFbasedate = new Date(1899, 11, 31, 0, 0, 0);
            var SSFdnthresh = SSFbasedate.getTime();
            var SSFbase1904 = new Date(1900, 2, 1, 0, 0, 0);
            function datenum_local(v, date1904) {
                var epoch = v.getTime();
                if (date1904) epoch -= 1461 * 24 * 60 * 60 * 1e3;
                else if (v >= SSFbase1904) epoch += 24 * 60 * 60 * 1e3;
                return (
                    (epoch -
                        (SSFdnthresh +
                            (v.getTimezoneOffset() - SSFbasedate.getTimezoneOffset()) * 6e4)) /
                    (24 * 60 * 60 * 1e3)
                );
            }
            function SSF_strip_decimal(o) {
                return o.indexOf('.') == -1 ? o : o.replace(/(?:\.0*|(\.\d*[1-9])0+)$/, '$1');
            }
            function SSF_normalize_exp(o) {
                if (o.indexOf('E') == -1) return o;
                return o
                    .replace(/(?:\.0*|(\.\d*[1-9])0+)[Ee]/, '$1E')
                    .replace(/(E[+-])(\d)$/, '$10$2');
            }
            function SSF_small_exp(v) {
                var w = v < 0 ? 12 : 11;
                var o = SSF_strip_decimal(v.toFixed(12));
                if (o.length <= w) return o;
                o = v.toPrecision(10);
                if (o.length <= w) return o;
                return v.toExponential(5);
            }
            function SSF_large_exp(v) {
                var o = SSF_strip_decimal(v.toFixed(11));
                return o.length > (v < 0 ? 12 : 11) || o === '0' || o === '-0'
                    ? v.toPrecision(6)
                    : o;
            }
            function SSF_general_num(v) {
                var V = Math.floor(Math.log(Math.abs(v)) * Math.LOG10E),
                    o;
                if (V >= -4 && V <= -1) o = v.toPrecision(10 + V);
                else if (Math.abs(V) <= 9) o = SSF_small_exp(v);
                else if (V === 10) o = v.toFixed(10).substr(0, 12);
                else o = SSF_large_exp(v);
                return SSF_strip_decimal(SSF_normalize_exp(o.toUpperCase()));
            }
            function SSF_general(v, opts) {
                switch (typeof v) {
                    case 'string':
                        return v;
                    case 'boolean':
                        return v ? 'TRUE' : 'FALSE';
                    case 'number':
                        return (v | 0) === v ? v.toString(10) : SSF_general_num(v);
                    case 'undefined':
                        return '';
                    case 'object':
                        if (v == null) return '';
                        if (v instanceof Date)
                            return SSF_format(14, datenum_local(v, opts && opts.date1904), opts);
                }
                throw new Error('unsupported value in General format: ' + v);
            }
            function SSF_fix_hijri(date, o) {
                o[0] -= 581;
                var dow = date.getDay();
                if (date < 60) dow = (dow + 6) % 7;
                return dow;
            }
            function SSF_write_date(type, fmt, val2, ss0) {
                var o = '',
                    ss = 0,
                    tt = 0,
                    y = val2.y,
                    out,
                    outl = 0;
                switch (type) {
                    case 98:
                        y = val2.y + 543;
                    case 121:
                        switch (fmt.length) {
                            case 1:
                            case 2:
                                out = y % 100;
                                outl = 2;
                                break;
                            default:
                                out = y % 1e4;
                                outl = 4;
                                break;
                        }
                        break;
                    case 109:
                        switch (fmt.length) {
                            case 1:
                            case 2:
                                out = val2.m;
                                outl = fmt.length;
                                break;
                            case 3:
                                return months[val2.m - 1][1];
                            case 5:
                                return months[val2.m - 1][0];
                            default:
                                return months[val2.m - 1][2];
                        }
                        break;
                    case 100:
                        switch (fmt.length) {
                            case 1:
                            case 2:
                                out = val2.d;
                                outl = fmt.length;
                                break;
                            case 3:
                                return days[val2.q][0];
                            default:
                                return days[val2.q][1];
                        }
                        break;
                    case 104:
                        switch (fmt.length) {
                            case 1:
                            case 2:
                                out = 1 + ((val2.H + 11) % 12);
                                outl = fmt.length;
                                break;
                            default:
                                throw 'bad hour format: ' + fmt;
                        }
                        break;
                    case 72:
                        switch (fmt.length) {
                            case 1:
                            case 2:
                                out = val2.H;
                                outl = fmt.length;
                                break;
                            default:
                                throw 'bad hour format: ' + fmt;
                        }
                        break;
                    case 77:
                        switch (fmt.length) {
                            case 1:
                            case 2:
                                out = val2.M;
                                outl = fmt.length;
                                break;
                            default:
                                throw 'bad minute format: ' + fmt;
                        }
                        break;
                    case 115:
                        if (
                            fmt != 's' &&
                            fmt != 'ss' &&
                            fmt != '.0' &&
                            fmt != '.00' &&
                            fmt != '.000'
                        )
                            throw 'bad second format: ' + fmt;
                        if (val2.u === 0 && (fmt == 's' || fmt == 'ss'))
                            return pad0(val2.S, fmt.length);
                        if (ss0 >= 2) tt = ss0 === 3 ? 1e3 : 100;
                        else tt = ss0 === 1 ? 10 : 1;
                        ss = Math.round(tt * (val2.S + val2.u));
                        if (ss >= 60 * tt) ss = 0;
                        if (fmt === 's') return ss === 0 ? '0' : '' + ss / tt;
                        o = pad0(ss, 2 + ss0);
                        if (fmt === 'ss') return o.substr(0, 2);
                        return '.' + o.substr(2, fmt.length - 1);
                    case 90:
                        switch (fmt) {
                            case '[h]':
                            case '[hh]':
                                out = val2.D * 24 + val2.H;
                                break;
                            case '[m]':
                            case '[mm]':
                                out = (val2.D * 24 + val2.H) * 60 + val2.M;
                                break;
                            case '[s]':
                            case '[ss]':
                                out =
                                    ((val2.D * 24 + val2.H) * 60 + val2.M) * 60 +
                                    Math.round(val2.S + val2.u);
                                break;
                            default:
                                throw 'bad abstime format: ' + fmt;
                        }
                        outl = fmt.length === 3 ? 1 : 2;
                        break;
                    case 101:
                        out = y;
                        outl = 1;
                        break;
                }
                var outstr = outl > 0 ? pad0(out, outl) : '';
                return outstr;
            }
            function commaify(s2) {
                var w = 3;
                if (s2.length <= w) return s2;
                var j = s2.length % w,
                    o = s2.substr(0, j);
                for (; j != s2.length; j += w) o += (o.length > 0 ? ',' : '') + s2.substr(j, w);
                return o;
            }
            var pct1 = /%/g;
            function write_num_pct(type, fmt, val2) {
                var sfmt = fmt.replace(pct1, ''),
                    mul = fmt.length - sfmt.length;
                return write_num(type, sfmt, val2 * Math.pow(10, 2 * mul)) + fill('%', mul);
            }
            function write_num_cm(type, fmt, val2) {
                var idx = fmt.length - 1;
                while (fmt.charCodeAt(idx - 1) === 44) --idx;
                return write_num(
                    type,
                    fmt.substr(0, idx),
                    val2 / Math.pow(10, 3 * (fmt.length - idx)),
                );
            }
            function write_num_exp(fmt, val2) {
                var o;
                var idx = fmt.indexOf('E') - fmt.indexOf('.') - 1;
                if (fmt.match(/^#+0.0E\+0$/)) {
                    if (val2 == 0) return '0.0E+0';
                    else if (val2 < 0) return '-' + write_num_exp(fmt, -val2);
                    var period = fmt.indexOf('.');
                    if (period === -1) period = fmt.indexOf('E');
                    var ee = Math.floor(Math.log(val2) * Math.LOG10E) % period;
                    if (ee < 0) ee += period;
                    o = (val2 / Math.pow(10, ee)).toPrecision(idx + 1 + ((period + ee) % period));
                    if (o.indexOf('e') === -1) {
                        var fakee = Math.floor(Math.log(val2) * Math.LOG10E);
                        if (o.indexOf('.') === -1)
                            o = o.charAt(0) + '.' + o.substr(1) + 'E+' + (fakee - o.length + ee);
                        else o += 'E+' + (fakee - ee);
                        while (o.substr(0, 2) === '0.') {
                            o = o.charAt(0) + o.substr(2, period) + '.' + o.substr(2 + period);
                            o = o.replace(/^0+([1-9])/, '$1').replace(/^0+\./, '0.');
                        }
                        o = o.replace(/\+-/, '-');
                    }
                    o = o.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/, function ($$, $1, $22, $32) {
                        return (
                            $1 +
                            $22 +
                            $32.substr(0, (period + ee) % period) +
                            '.' +
                            $32.substr(ee) +
                            'E'
                        );
                    });
                } else o = val2.toExponential(idx);
                if (fmt.match(/E\+00$/) && o.match(/e[+-]\d$/))
                    o = o.substr(0, o.length - 1) + '0' + o.charAt(o.length - 1);
                if (fmt.match(/E\-/) && o.match(/e\+/)) o = o.replace(/e\+/, 'e');
                return o.replace('e', 'E');
            }
            var frac1 = /# (\?+)( ?)\/( ?)(\d+)/;
            function write_num_f1(r2, aval, sign) {
                var den = parseInt(r2[4], 10),
                    rr = Math.round(aval * den),
                    base = Math.floor(rr / den);
                var myn = rr - base * den,
                    myd = den;
                return (
                    sign +
                    (base === 0 ? '' : '' + base) +
                    ' ' +
                    (myn === 0
                        ? fill(' ', r2[1].length + 1 + r2[4].length)
                        : pad_(myn, r2[1].length) + r2[2] + '/' + r2[3] + pad0(myd, r2[4].length))
                );
            }
            function write_num_f2(r2, aval, sign) {
                return (
                    sign +
                    (aval === 0 ? '' : '' + aval) +
                    fill(' ', r2[1].length + 2 + r2[4].length)
                );
            }
            var dec1 = /^#*0*\.([0#]+)/;
            var closeparen = /\).*[0#]/;
            var phone = /\(###\) ###\\?-####/;
            function hashq(str) {
                var o = '',
                    cc;
                for (var i2 = 0; i2 != str.length; ++i2)
                    switch ((cc = str.charCodeAt(i2))) {
                        case 35:
                            break;
                        case 63:
                            o += ' ';
                            break;
                        case 48:
                            o += '0';
                            break;
                        default:
                            o += String.fromCharCode(cc);
                    }
                return o;
            }
            function rnd(val2, d) {
                var dd = Math.pow(10, d);
                return '' + Math.round(val2 * dd) / dd;
            }
            function dec(val2, d) {
                var _frac = val2 - Math.floor(val2),
                    dd = Math.pow(10, d);
                if (d < ('' + Math.round(_frac * dd)).length) return 0;
                return Math.round(_frac * dd);
            }
            function carry(val2, d) {
                if (d < ('' + Math.round((val2 - Math.floor(val2)) * Math.pow(10, d))).length) {
                    return 1;
                }
                return 0;
            }
            function flr(val2) {
                if (val2 < 2147483647 && val2 > -2147483648)
                    return '' + (val2 >= 0 ? val2 | 0 : (val2 - 1) | 0);
                return '' + Math.floor(val2);
            }
            function write_num_flt(type, fmt, val2) {
                if (type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {
                    var ffmt = fmt.replace(/\( */, '').replace(/ \)/, '').replace(/\)/, '');
                    if (val2 >= 0) return write_num_flt('n', ffmt, val2);
                    return '(' + write_num_flt('n', ffmt, -val2) + ')';
                }
                if (fmt.charCodeAt(fmt.length - 1) === 44) return write_num_cm(type, fmt, val2);
                if (fmt.indexOf('%') !== -1) return write_num_pct(type, fmt, val2);
                if (fmt.indexOf('E') !== -1) return write_num_exp(fmt, val2);
                if (fmt.charCodeAt(0) === 36)
                    return (
                        '$' + write_num_flt(type, fmt.substr(fmt.charAt(1) == ' ' ? 2 : 1), val2)
                    );
                var o;
                var r2,
                    ri,
                    ff,
                    aval = Math.abs(val2),
                    sign = val2 < 0 ? '-' : '';
                if (fmt.match(/^00+$/)) return sign + pad0r(aval, fmt.length);
                if (fmt.match(/^[#?]+$/)) {
                    o = pad0r(val2, 0);
                    if (o === '0') o = '';
                    return o.length > fmt.length
                        ? o
                        : hashq(fmt.substr(0, fmt.length - o.length)) + o;
                }
                if ((r2 = fmt.match(frac1))) return write_num_f1(r2, aval, sign);
                if (fmt.match(/^#+0+$/)) return sign + pad0r(aval, fmt.length - fmt.indexOf('0'));
                if ((r2 = fmt.match(dec1))) {
                    o = rnd(val2, r2[1].length)
                        .replace(/^([^\.]+)$/, '$1.' + hashq(r2[1]))
                        .replace(/\.$/, '.' + hashq(r2[1]))
                        .replace(/\.(\d*)$/, function ($$, $1) {
                            return '.' + $1 + fill('0', hashq(r2[1]).length - $1.length);
                        });
                    return fmt.indexOf('0.') !== -1 ? o : o.replace(/^0\./, '.');
                }
                fmt = fmt.replace(/^#+([0.])/, '$1');
                if ((r2 = fmt.match(/^(0*)\.(#*)$/))) {
                    return (
                        sign +
                        rnd(aval, r2[2].length)
                            .replace(/\.(\d*[1-9])0*$/, '.$1')
                            .replace(/^(-?\d*)$/, '$1.')
                            .replace(/^0\./, r2[1].length ? '0.' : '.')
                    );
                }
                if ((r2 = fmt.match(/^#{1,3},##0(\.?)$/))) return sign + commaify(pad0r(aval, 0));
                if ((r2 = fmt.match(/^#,##0\.([#0]*0)$/))) {
                    return val2 < 0
                        ? '-' + write_num_flt(type, fmt, -val2)
                        : commaify('' + (Math.floor(val2) + carry(val2, r2[1].length))) +
                              '.' +
                              pad0(dec(val2, r2[1].length), r2[1].length);
                }
                if ((r2 = fmt.match(/^#,#*,#0/)))
                    return write_num_flt(type, fmt.replace(/^#,#*,/, ''), val2);
                if ((r2 = fmt.match(/^([0#]+)(\\?-([0#]+))+$/))) {
                    o = _strrev(write_num_flt(type, fmt.replace(/[\\-]/g, ''), val2));
                    ri = 0;
                    return _strrev(
                        _strrev(fmt.replace(/\\/g, '')).replace(/[0#]/g, function (x3) {
                            return ri < o.length ? o.charAt(ri++) : x3 === '0' ? '0' : '';
                        }),
                    );
                }
                if (fmt.match(phone)) {
                    o = write_num_flt(type, '##########', val2);
                    return '(' + o.substr(0, 3) + ') ' + o.substr(3, 3) + '-' + o.substr(6);
                }
                var oa = '';
                if ((r2 = fmt.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/))) {
                    ri = Math.min(r2[4].length, 7);
                    ff = SSF_frac(aval, Math.pow(10, ri) - 1, false);
                    o = '' + sign;
                    oa = write_num('n', r2[1], ff[1]);
                    if (oa.charAt(oa.length - 1) == ' ') oa = oa.substr(0, oa.length - 1) + '0';
                    o += oa + r2[2] + '/' + r2[3];
                    oa = rpad_(ff[2], ri);
                    if (oa.length < r2[4].length)
                        oa = hashq(r2[4].substr(r2[4].length - oa.length)) + oa;
                    o += oa;
                    return o;
                }
                if ((r2 = fmt.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/))) {
                    ri = Math.min(Math.max(r2[1].length, r2[4].length), 7);
                    ff = SSF_frac(aval, Math.pow(10, ri) - 1, true);
                    return (
                        sign +
                        (ff[0] || (ff[1] ? '' : '0')) +
                        ' ' +
                        (ff[1]
                            ? pad_(ff[1], ri) + r2[2] + '/' + r2[3] + rpad_(ff[2], ri)
                            : fill(' ', 2 * ri + 1 + r2[2].length + r2[3].length))
                    );
                }
                if ((r2 = fmt.match(/^[#0?]+$/))) {
                    o = pad0r(val2, 0);
                    if (fmt.length <= o.length) return o;
                    return hashq(fmt.substr(0, fmt.length - o.length)) + o;
                }
                if ((r2 = fmt.match(/^([#0?]+)\.([#0]+)$/))) {
                    o = '' + val2.toFixed(Math.min(r2[2].length, 10)).replace(/([^0])0+$/, '$1');
                    ri = o.indexOf('.');
                    var lres = fmt.indexOf('.') - ri,
                        rres = fmt.length - o.length - lres;
                    return hashq(fmt.substr(0, lres) + o + fmt.substr(fmt.length - rres));
                }
                if ((r2 = fmt.match(/^00,000\.([#0]*0)$/))) {
                    ri = dec(val2, r2[1].length);
                    return val2 < 0
                        ? '-' + write_num_flt(type, fmt, -val2)
                        : commaify(flr(val2))
                              .replace(/^\d,\d{3}$/, '0$&')
                              .replace(/^\d*$/, function ($$) {
                                  return '00,' + ($$.length < 3 ? pad0(0, 3 - $$.length) : '') + $$;
                              }) +
                              '.' +
                              pad0(ri, r2[1].length);
                }
                switch (fmt) {
                    case '###,##0.00':
                        return write_num_flt(type, '#,##0.00', val2);
                    case '###,###':
                    case '##,###':
                    case '#,###':
                        var x2 = commaify(pad0r(aval, 0));
                        return x2 !== '0' ? sign + x2 : '';
                    case '###,###.00':
                        return write_num_flt(type, '###,##0.00', val2).replace(/^0\./, '.');
                    case '#,###.00':
                        return write_num_flt(type, '#,##0.00', val2).replace(/^0\./, '.');
                    default:
                }
                throw new Error('unsupported format |' + fmt + '|');
            }
            function write_num_cm2(type, fmt, val2) {
                var idx = fmt.length - 1;
                while (fmt.charCodeAt(idx - 1) === 44) --idx;
                return write_num(
                    type,
                    fmt.substr(0, idx),
                    val2 / Math.pow(10, 3 * (fmt.length - idx)),
                );
            }
            function write_num_pct2(type, fmt, val2) {
                var sfmt = fmt.replace(pct1, ''),
                    mul = fmt.length - sfmt.length;
                return write_num(type, sfmt, val2 * Math.pow(10, 2 * mul)) + fill('%', mul);
            }
            function write_num_exp2(fmt, val2) {
                var o;
                var idx = fmt.indexOf('E') - fmt.indexOf('.') - 1;
                if (fmt.match(/^#+0.0E\+0$/)) {
                    if (val2 == 0) return '0.0E+0';
                    else if (val2 < 0) return '-' + write_num_exp2(fmt, -val2);
                    var period = fmt.indexOf('.');
                    if (period === -1) period = fmt.indexOf('E');
                    var ee = Math.floor(Math.log(val2) * Math.LOG10E) % period;
                    if (ee < 0) ee += period;
                    o = (val2 / Math.pow(10, ee)).toPrecision(idx + 1 + ((period + ee) % period));
                    if (!o.match(/[Ee]/)) {
                        var fakee = Math.floor(Math.log(val2) * Math.LOG10E);
                        if (o.indexOf('.') === -1)
                            o = o.charAt(0) + '.' + o.substr(1) + 'E+' + (fakee - o.length + ee);
                        else o += 'E+' + (fakee - ee);
                        o = o.replace(/\+-/, '-');
                    }
                    o = o.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/, function ($$, $1, $22, $32) {
                        return (
                            $1 +
                            $22 +
                            $32.substr(0, (period + ee) % period) +
                            '.' +
                            $32.substr(ee) +
                            'E'
                        );
                    });
                } else o = val2.toExponential(idx);
                if (fmt.match(/E\+00$/) && o.match(/e[+-]\d$/))
                    o = o.substr(0, o.length - 1) + '0' + o.charAt(o.length - 1);
                if (fmt.match(/E\-/) && o.match(/e\+/)) o = o.replace(/e\+/, 'e');
                return o.replace('e', 'E');
            }
            function write_num_int(type, fmt, val2) {
                if (type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {
                    var ffmt = fmt.replace(/\( */, '').replace(/ \)/, '').replace(/\)/, '');
                    if (val2 >= 0) return write_num_int('n', ffmt, val2);
                    return '(' + write_num_int('n', ffmt, -val2) + ')';
                }
                if (fmt.charCodeAt(fmt.length - 1) === 44) return write_num_cm2(type, fmt, val2);
                if (fmt.indexOf('%') !== -1) return write_num_pct2(type, fmt, val2);
                if (fmt.indexOf('E') !== -1) return write_num_exp2(fmt, val2);
                if (fmt.charCodeAt(0) === 36)
                    return (
                        '$' + write_num_int(type, fmt.substr(fmt.charAt(1) == ' ' ? 2 : 1), val2)
                    );
                var o;
                var r2,
                    ri,
                    ff,
                    aval = Math.abs(val2),
                    sign = val2 < 0 ? '-' : '';
                if (fmt.match(/^00+$/)) return sign + pad0(aval, fmt.length);
                if (fmt.match(/^[#?]+$/)) {
                    o = '' + val2;
                    if (val2 === 0) o = '';
                    return o.length > fmt.length
                        ? o
                        : hashq(fmt.substr(0, fmt.length - o.length)) + o;
                }
                if ((r2 = fmt.match(frac1))) return write_num_f2(r2, aval, sign);
                if (fmt.match(/^#+0+$/)) return sign + pad0(aval, fmt.length - fmt.indexOf('0'));
                if ((r2 = fmt.match(dec1))) {
                    o = ('' + val2)
                        .replace(/^([^\.]+)$/, '$1.' + hashq(r2[1]))
                        .replace(/\.$/, '.' + hashq(r2[1]));
                    o = o.replace(/\.(\d*)$/, function ($$, $1) {
                        return '.' + $1 + fill('0', hashq(r2[1]).length - $1.length);
                    });
                    return fmt.indexOf('0.') !== -1 ? o : o.replace(/^0\./, '.');
                }
                fmt = fmt.replace(/^#+([0.])/, '$1');
                if ((r2 = fmt.match(/^(0*)\.(#*)$/))) {
                    return (
                        sign +
                        ('' + aval)
                            .replace(/\.(\d*[1-9])0*$/, '.$1')
                            .replace(/^(-?\d*)$/, '$1.')
                            .replace(/^0\./, r2[1].length ? '0.' : '.')
                    );
                }
                if ((r2 = fmt.match(/^#{1,3},##0(\.?)$/))) return sign + commaify('' + aval);
                if ((r2 = fmt.match(/^#,##0\.([#0]*0)$/))) {
                    return val2 < 0
                        ? '-' + write_num_int(type, fmt, -val2)
                        : commaify('' + val2) + '.' + fill('0', r2[1].length);
                }
                if ((r2 = fmt.match(/^#,#*,#0/)))
                    return write_num_int(type, fmt.replace(/^#,#*,/, ''), val2);
                if ((r2 = fmt.match(/^([0#]+)(\\?-([0#]+))+$/))) {
                    o = _strrev(write_num_int(type, fmt.replace(/[\\-]/g, ''), val2));
                    ri = 0;
                    return _strrev(
                        _strrev(fmt.replace(/\\/g, '')).replace(/[0#]/g, function (x3) {
                            return ri < o.length ? o.charAt(ri++) : x3 === '0' ? '0' : '';
                        }),
                    );
                }
                if (fmt.match(phone)) {
                    o = write_num_int(type, '##########', val2);
                    return '(' + o.substr(0, 3) + ') ' + o.substr(3, 3) + '-' + o.substr(6);
                }
                var oa = '';
                if ((r2 = fmt.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/))) {
                    ri = Math.min(r2[4].length, 7);
                    ff = SSF_frac(aval, Math.pow(10, ri) - 1, false);
                    o = '' + sign;
                    oa = write_num('n', r2[1], ff[1]);
                    if (oa.charAt(oa.length - 1) == ' ') oa = oa.substr(0, oa.length - 1) + '0';
                    o += oa + r2[2] + '/' + r2[3];
                    oa = rpad_(ff[2], ri);
                    if (oa.length < r2[4].length)
                        oa = hashq(r2[4].substr(r2[4].length - oa.length)) + oa;
                    o += oa;
                    return o;
                }
                if ((r2 = fmt.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/))) {
                    ri = Math.min(Math.max(r2[1].length, r2[4].length), 7);
                    ff = SSF_frac(aval, Math.pow(10, ri) - 1, true);
                    return (
                        sign +
                        (ff[0] || (ff[1] ? '' : '0')) +
                        ' ' +
                        (ff[1]
                            ? pad_(ff[1], ri) + r2[2] + '/' + r2[3] + rpad_(ff[2], ri)
                            : fill(' ', 2 * ri + 1 + r2[2].length + r2[3].length))
                    );
                }
                if ((r2 = fmt.match(/^[#0?]+$/))) {
                    o = '' + val2;
                    if (fmt.length <= o.length) return o;
                    return hashq(fmt.substr(0, fmt.length - o.length)) + o;
                }
                if ((r2 = fmt.match(/^([#0]+)\.([#0]+)$/))) {
                    o = '' + val2.toFixed(Math.min(r2[2].length, 10)).replace(/([^0])0+$/, '$1');
                    ri = o.indexOf('.');
                    var lres = fmt.indexOf('.') - ri,
                        rres = fmt.length - o.length - lres;
                    return hashq(fmt.substr(0, lres) + o + fmt.substr(fmt.length - rres));
                }
                if ((r2 = fmt.match(/^00,000\.([#0]*0)$/))) {
                    return val2 < 0
                        ? '-' + write_num_int(type, fmt, -val2)
                        : commaify('' + val2)
                              .replace(/^\d,\d{3}$/, '0$&')
                              .replace(/^\d*$/, function ($$) {
                                  return '00,' + ($$.length < 3 ? pad0(0, 3 - $$.length) : '') + $$;
                              }) +
                              '.' +
                              pad0(0, r2[1].length);
                }
                switch (fmt) {
                    case '###,###':
                    case '##,###':
                    case '#,###':
                        var x2 = commaify('' + aval);
                        return x2 !== '0' ? sign + x2 : '';
                    default:
                        if (fmt.match(/\.[0#?]*$/))
                            return (
                                write_num_int(type, fmt.slice(0, fmt.lastIndexOf('.')), val2) +
                                hashq(fmt.slice(fmt.lastIndexOf('.')))
                            );
                }
                throw new Error('unsupported format |' + fmt + '|');
            }
            function write_num(type, fmt, val2) {
                return (val2 | 0) === val2
                    ? write_num_int(type, fmt, val2)
                    : write_num_flt(type, fmt, val2);
            }
            function SSF_split_fmt(fmt) {
                var out = [];
                var in_str = false;
                for (var i2 = 0, j = 0; i2 < fmt.length; ++i2)
                    switch (
                        /*cc=*/
                        fmt.charCodeAt(i2)
                    ) {
                        case 34:
                            in_str = !in_str;
                            break;
                        case 95:
                        case 42:
                        case 92:
                            ++i2;
                            break;
                        case 59:
                            out[out.length] = fmt.substr(j, i2 - j);
                            j = i2 + 1;
                    }
                out[out.length] = fmt.substr(j);
                if (in_str === true) throw new Error('Format |' + fmt + '| unterminated string ');
                return out;
            }
            var SSF_abstime = /\[[HhMmSs\u0E0A\u0E19\u0E17]*\]/;
            function fmt_is_date(fmt) {
                var i2 = 0,
                    c = '',
                    o = '';
                while (i2 < fmt.length) {
                    switch ((c = fmt.charAt(i2))) {
                        case 'G':
                            if (SSF_isgeneral(fmt, i2)) i2 += 6;
                            i2++;
                            break;
                        case '"':
                            for (
                                ;
                                /*cc=*/
                                fmt.charCodeAt(++i2) !== 34 && i2 < fmt.length;

                            ) {}
                            ++i2;
                            break;
                        case '\\':
                            i2 += 2;
                            break;
                        case '_':
                            i2 += 2;
                            break;
                        case '@':
                            ++i2;
                            break;
                        case 'B':
                        case 'b':
                            if (fmt.charAt(i2 + 1) === '1' || fmt.charAt(i2 + 1) === '2')
                                return true;
                        case 'M':
                        case 'D':
                        case 'Y':
                        case 'H':
                        case 'S':
                        case 'E':
                        case 'm':
                        case 'd':
                        case 'y':
                        case 'h':
                        case 's':
                        case 'e':
                        case 'g':
                            return true;
                        case 'A':
                        case 'a':
                        case '\u4E0A':
                            if (fmt.substr(i2, 3).toUpperCase() === 'A/P') return true;
                            if (fmt.substr(i2, 5).toUpperCase() === 'AM/PM') return true;
                            if (fmt.substr(i2, 5).toUpperCase() === '\u4E0A\u5348/\u4E0B\u5348')
                                return true;
                            ++i2;
                            break;
                        case '[':
                            o = c;
                            while (fmt.charAt(i2++) !== ']' && i2 < fmt.length) o += fmt.charAt(i2);
                            if (o.match(SSF_abstime)) return true;
                            break;
                        case '.':
                        case '0':
                        case '#':
                            while (
                                i2 < fmt.length &&
                                ('0#?.,E+-%'.indexOf((c = fmt.charAt(++i2))) > -1 ||
                                    (c == '\\' &&
                                        fmt.charAt(i2 + 1) == '-' &&
                                        '0#'.indexOf(fmt.charAt(i2 + 2)) > -1))
                            ) {}
                            break;
                        case '?':
                            while (fmt.charAt(++i2) === c) {}
                            break;
                        case '*':
                            ++i2;
                            if (fmt.charAt(i2) == ' ' || fmt.charAt(i2) == '*') ++i2;
                            break;
                        case '(':
                        case ')':
                            ++i2;
                            break;
                        case '1':
                        case '2':
                        case '3':
                        case '4':
                        case '5':
                        case '6':
                        case '7':
                        case '8':
                        case '9':
                            while (
                                i2 < fmt.length &&
                                '0123456789'.indexOf(fmt.charAt(++i2)) > -1
                            ) {}
                            break;
                        case ' ':
                            ++i2;
                            break;
                        default:
                            ++i2;
                            break;
                    }
                }
                return false;
            }
            function eval_fmt(fmt, v, opts, flen) {
                var out = [],
                    o = '',
                    i2 = 0,
                    c = '',
                    lst = 't',
                    dt,
                    j,
                    cc;
                var hr = 'H';
                while (i2 < fmt.length) {
                    switch ((c = fmt.charAt(i2))) {
                        case 'G':
                            if (!SSF_isgeneral(fmt, i2))
                                throw new Error('unrecognized character ' + c + ' in ' + fmt);
                            out[out.length] = { t: 'G', v: 'General' };
                            i2 += 7;
                            break;
                        case '"':
                            for (o = ''; (cc = fmt.charCodeAt(++i2)) !== 34 && i2 < fmt.length; )
                                o += String.fromCharCode(cc);
                            out[out.length] = { t: 't', v: o };
                            ++i2;
                            break;
                        case '\\':
                            var w = fmt.charAt(++i2),
                                t2 = w === '(' || w === ')' ? w : 't';
                            out[out.length] = { t: t2, v: w };
                            ++i2;
                            break;
                        case '_':
                            out[out.length] = { t: 't', v: ' ' };
                            i2 += 2;
                            break;
                        case '@':
                            out[out.length] = { t: 'T', v };
                            ++i2;
                            break;
                        case 'B':
                        case 'b':
                            if (fmt.charAt(i2 + 1) === '1' || fmt.charAt(i2 + 1) === '2') {
                                if (dt == null) {
                                    dt = SSF_parse_date_code(v, opts, fmt.charAt(i2 + 1) === '2');
                                    if (dt == null) return '';
                                }
                                out[out.length] = { t: 'X', v: fmt.substr(i2, 2) };
                                lst = c;
                                i2 += 2;
                                break;
                            }
                        case 'M':
                        case 'D':
                        case 'Y':
                        case 'H':
                        case 'S':
                        case 'E':
                            c = c.toLowerCase();
                        case 'm':
                        case 'd':
                        case 'y':
                        case 'h':
                        case 's':
                        case 'e':
                        case 'g':
                            if (v < 0) return '';
                            if (dt == null) {
                                dt = SSF_parse_date_code(v, opts);
                                if (dt == null) return '';
                            }
                            o = c;
                            while (++i2 < fmt.length && fmt.charAt(i2).toLowerCase() === c) o += c;
                            if (c === 'm' && lst.toLowerCase() === 'h') c = 'M';
                            if (c === 'h') c = hr;
                            out[out.length] = { t: c, v: o };
                            lst = c;
                            break;
                        case 'A':
                        case 'a':
                        case '\u4E0A':
                            var q = { t: c, v: c };
                            if (dt == null) dt = SSF_parse_date_code(v, opts);
                            if (fmt.substr(i2, 3).toUpperCase() === 'A/P') {
                                if (dt != null) q.v = dt.H >= 12 ? 'P' : 'A';
                                q.t = 'T';
                                hr = 'h';
                                i2 += 3;
                            } else if (fmt.substr(i2, 5).toUpperCase() === 'AM/PM') {
                                if (dt != null) q.v = dt.H >= 12 ? 'PM' : 'AM';
                                q.t = 'T';
                                i2 += 5;
                                hr = 'h';
                            } else if (
                                fmt.substr(i2, 5).toUpperCase() === '\u4E0A\u5348/\u4E0B\u5348'
                            ) {
                                if (dt != null) q.v = dt.H >= 12 ? '\u4E0B\u5348' : '\u4E0A\u5348';
                                q.t = 'T';
                                i2 += 5;
                                hr = 'h';
                            } else {
                                q.t = 't';
                                ++i2;
                            }
                            if (dt == null && q.t === 'T') return '';
                            out[out.length] = q;
                            lst = c;
                            break;
                        case '[':
                            o = c;
                            while (fmt.charAt(i2++) !== ']' && i2 < fmt.length) o += fmt.charAt(i2);
                            if (o.slice(-1) !== ']') throw 'unterminated "[" block: |' + o + '|';
                            if (o.match(SSF_abstime)) {
                                if (dt == null) {
                                    dt = SSF_parse_date_code(v, opts);
                                    if (dt == null) return '';
                                }
                                out[out.length] = { t: 'Z', v: o.toLowerCase() };
                                lst = o.charAt(1);
                            } else if (o.indexOf('$') > -1) {
                                o = (o.match(/\$([^-\[\]]*)/) || [])[1] || '$';
                                if (!fmt_is_date(fmt)) out[out.length] = { t: 't', v: o };
                            }
                            break;
                        case '.':
                            if (dt != null) {
                                o = c;
                                while (++i2 < fmt.length && (c = fmt.charAt(i2)) === '0') o += c;
                                out[out.length] = { t: 's', v: o };
                                break;
                            }
                        case '0':
                        case '#':
                            o = c;
                            while (
                                ++i2 < fmt.length &&
                                '0#?.,E+-%'.indexOf((c = fmt.charAt(i2))) > -1
                            )
                                o += c;
                            out[out.length] = { t: 'n', v: o };
                            break;
                        case '?':
                            o = c;
                            while (fmt.charAt(++i2) === c) o += c;
                            out[out.length] = { t: c, v: o };
                            lst = c;
                            break;
                        case '*':
                            ++i2;
                            if (fmt.charAt(i2) == ' ' || fmt.charAt(i2) == '*') ++i2;
                            break;
                        case '(':
                        case ')':
                            out[out.length] = { t: flen === 1 ? 't' : c, v: c };
                            ++i2;
                            break;
                        case '1':
                        case '2':
                        case '3':
                        case '4':
                        case '5':
                        case '6':
                        case '7':
                        case '8':
                        case '9':
                            o = c;
                            while (i2 < fmt.length && '0123456789'.indexOf(fmt.charAt(++i2)) > -1)
                                o += fmt.charAt(i2);
                            out[out.length] = { t: 'D', v: o };
                            break;
                        case ' ':
                            out[out.length] = { t: c, v: c };
                            ++i2;
                            break;
                        case '$':
                            out[out.length] = { t: 't', v: '$' };
                            ++i2;
                            break;
                        default:
                            if (",$-+/():!^&'~{}<>=\u20ACacfijklopqrtuvwxzP".indexOf(c) === -1)
                                throw new Error('unrecognized character ' + c + ' in ' + fmt);
                            out[out.length] = { t: 't', v: c };
                            ++i2;
                            break;
                    }
                }
                var bt = 0,
                    ss0 = 0,
                    ssm;
                for (i2 = out.length - 1, lst = 't'; i2 >= 0; --i2) {
                    switch (out[i2].t) {
                        case 'h':
                        case 'H':
                            out[i2].t = hr;
                            lst = 'h';
                            if (bt < 1) bt = 1;
                            break;
                        case 's':
                            if ((ssm = out[i2].v.match(/\.0+$/)))
                                ss0 = Math.max(ss0, ssm[0].length - 1);
                            if (bt < 3) bt = 3;
                        case 'd':
                        case 'y':
                        case 'M':
                        case 'e':
                            lst = out[i2].t;
                            break;
                        case 'm':
                            if (lst === 's') {
                                out[i2].t = 'M';
                                if (bt < 2) bt = 2;
                            }
                            break;
                        case 'X':
                            break;
                        case 'Z':
                            if (bt < 1 && out[i2].v.match(/[Hh]/)) bt = 1;
                            if (bt < 2 && out[i2].v.match(/[Mm]/)) bt = 2;
                            if (bt < 3 && out[i2].v.match(/[Ss]/)) bt = 3;
                    }
                }
                switch (bt) {
                    case 0:
                        break;
                    case 1:
                        if (dt.u >= 0.5) {
                            dt.u = 0;
                            ++dt.S;
                        }
                        if (dt.S >= 60) {
                            dt.S = 0;
                            ++dt.M;
                        }
                        if (dt.M >= 60) {
                            dt.M = 0;
                            ++dt.H;
                        }
                        break;
                    case 2:
                        if (dt.u >= 0.5) {
                            dt.u = 0;
                            ++dt.S;
                        }
                        if (dt.S >= 60) {
                            dt.S = 0;
                            ++dt.M;
                        }
                        break;
                }
                var nstr = '',
                    jj;
                for (i2 = 0; i2 < out.length; ++i2) {
                    switch (out[i2].t) {
                        case 't':
                        case 'T':
                        case ' ':
                        case 'D':
                            break;
                        case 'X':
                            out[i2].v = '';
                            out[i2].t = ';';
                            break;
                        case 'd':
                        case 'm':
                        case 'y':
                        case 'h':
                        case 'H':
                        case 'M':
                        case 's':
                        case 'e':
                        case 'b':
                        case 'Z':
                            out[i2].v = SSF_write_date(out[i2].t.charCodeAt(0), out[i2].v, dt, ss0);
                            out[i2].t = 't';
                            break;
                        case 'n':
                        case '?':
                            jj = i2 + 1;
                            while (
                                out[jj] != null &&
                                ((c = out[jj].t) === '?' ||
                                    c === 'D' ||
                                    ((c === ' ' || c === 't') &&
                                        out[jj + 1] != null &&
                                        (out[jj + 1].t === '?' ||
                                            (out[jj + 1].t === 't' && out[jj + 1].v === '/'))) ||
                                    (out[i2].t === '(' && (c === ' ' || c === 'n' || c === ')')) ||
                                    (c === 't' &&
                                        (out[jj].v === '/' ||
                                            (out[jj].v === ' ' &&
                                                out[jj + 1] != null &&
                                                out[jj + 1].t == '?'))))
                            ) {
                                out[i2].v += out[jj].v;
                                out[jj] = { v: '', t: ';' };
                                ++jj;
                            }
                            nstr += out[i2].v;
                            i2 = jj - 1;
                            break;
                        case 'G':
                            out[i2].t = 't';
                            out[i2].v = SSF_general(v, opts);
                            break;
                    }
                }
                var vv = '',
                    myv,
                    ostr;
                if (nstr.length > 0) {
                    if (nstr.charCodeAt(0) == 40) {
                        myv = v < 0 && nstr.charCodeAt(0) === 45 ? -v : v;
                        ostr = write_num('n', nstr, myv);
                    } else {
                        myv = v < 0 && flen > 1 ? -v : v;
                        ostr = write_num('n', nstr, myv);
                        if (myv < 0 && out[0] && out[0].t == 't') {
                            ostr = ostr.substr(1);
                            out[0].v = '-' + out[0].v;
                        }
                    }
                    jj = ostr.length - 1;
                    var decpt = out.length;
                    for (i2 = 0; i2 < out.length; ++i2)
                        if (out[i2] != null && out[i2].t != 't' && out[i2].v.indexOf('.') > -1) {
                            decpt = i2;
                            break;
                        }
                    var lasti = out.length;
                    if (decpt === out.length && ostr.indexOf('E') === -1) {
                        for (i2 = out.length - 1; i2 >= 0; --i2) {
                            if (out[i2] == null || 'n?'.indexOf(out[i2].t) === -1) continue;
                            if (jj >= out[i2].v.length - 1) {
                                jj -= out[i2].v.length;
                                out[i2].v = ostr.substr(jj + 1, out[i2].v.length);
                            } else if (jj < 0) out[i2].v = '';
                            else {
                                out[i2].v = ostr.substr(0, jj + 1);
                                jj = -1;
                            }
                            out[i2].t = 't';
                            lasti = i2;
                        }
                        if (jj >= 0 && lasti < out.length)
                            out[lasti].v = ostr.substr(0, jj + 1) + out[lasti].v;
                    } else if (decpt !== out.length && ostr.indexOf('E') === -1) {
                        jj = ostr.indexOf('.') - 1;
                        for (i2 = decpt; i2 >= 0; --i2) {
                            if (out[i2] == null || 'n?'.indexOf(out[i2].t) === -1) continue;
                            j =
                                out[i2].v.indexOf('.') > -1 && i2 === decpt
                                    ? out[i2].v.indexOf('.') - 1
                                    : out[i2].v.length - 1;
                            vv = out[i2].v.substr(j + 1);
                            for (; j >= 0; --j) {
                                if (
                                    jj >= 0 &&
                                    (out[i2].v.charAt(j) === '0' || out[i2].v.charAt(j) === '#')
                                )
                                    vv = ostr.charAt(jj--) + vv;
                            }
                            out[i2].v = vv;
                            out[i2].t = 't';
                            lasti = i2;
                        }
                        if (jj >= 0 && lasti < out.length)
                            out[lasti].v = ostr.substr(0, jj + 1) + out[lasti].v;
                        jj = ostr.indexOf('.') + 1;
                        for (i2 = decpt; i2 < out.length; ++i2) {
                            if (
                                out[i2] == null ||
                                ('n?('.indexOf(out[i2].t) === -1 && i2 !== decpt)
                            )
                                continue;
                            j =
                                out[i2].v.indexOf('.') > -1 && i2 === decpt
                                    ? out[i2].v.indexOf('.') + 1
                                    : 0;
                            vv = out[i2].v.substr(0, j);
                            for (; j < out[i2].v.length; ++j) {
                                if (jj < ostr.length) vv += ostr.charAt(jj++);
                            }
                            out[i2].v = vv;
                            out[i2].t = 't';
                            lasti = i2;
                        }
                    }
                }
                for (i2 = 0; i2 < out.length; ++i2)
                    if (out[i2] != null && 'n?'.indexOf(out[i2].t) > -1) {
                        myv = flen > 1 && v < 0 && i2 > 0 && out[i2 - 1].v === '-' ? -v : v;
                        out[i2].v = write_num(out[i2].t, out[i2].v, myv);
                        out[i2].t = 't';
                    }
                var retval = '';
                for (i2 = 0; i2 !== out.length; ++i2) if (out[i2] != null) retval += out[i2].v;
                return retval;
            }
            var cfregex2 = /\[(=|>[=]?|<[>=]?)(-?\d+(?:\.\d*)?)\]/;
            function chkcond(v, rr) {
                if (rr == null) return false;
                var thresh = parseFloat(rr[2]);
                switch (rr[1]) {
                    case '=':
                        if (v == thresh) return true;
                        break;
                    case '>':
                        if (v > thresh) return true;
                        break;
                    case '<':
                        if (v < thresh) return true;
                        break;
                    case '<>':
                        if (v != thresh) return true;
                        break;
                    case '>=':
                        if (v >= thresh) return true;
                        break;
                    case '<=':
                        if (v <= thresh) return true;
                        break;
                }
                return false;
            }
            function choose_fmt(f3, v) {
                var fmt = SSF_split_fmt(f3);
                var l = fmt.length,
                    lat = fmt[l - 1].indexOf('@');
                if (l < 4 && lat > -1) --l;
                if (fmt.length > 4)
                    throw new Error('cannot find right format for |' + fmt.join('|') + '|');
                if (typeof v !== 'number')
                    return [4, fmt.length === 4 || lat > -1 ? fmt[fmt.length - 1] : '@'];
                switch (fmt.length) {
                    case 1:
                        fmt =
                            lat > -1
                                ? ['General', 'General', 'General', fmt[0]]
                                : [fmt[0], fmt[0], fmt[0], '@'];
                        break;
                    case 2:
                        fmt =
                            lat > -1
                                ? [fmt[0], fmt[0], fmt[0], fmt[1]]
                                : [fmt[0], fmt[1], fmt[0], '@'];
                        break;
                    case 3:
                        fmt =
                            lat > -1
                                ? [fmt[0], fmt[1], fmt[0], fmt[2]]
                                : [fmt[0], fmt[1], fmt[2], '@'];
                        break;
                    case 4:
                        break;
                }
                var ff = v > 0 ? fmt[0] : v < 0 ? fmt[1] : fmt[2];
                if (fmt[0].indexOf('[') === -1 && fmt[1].indexOf('[') === -1) return [l, ff];
                if (fmt[0].match(/\[[=<>]/) != null || fmt[1].match(/\[[=<>]/) != null) {
                    var m1 = fmt[0].match(cfregex2);
                    var m2 = fmt[1].match(cfregex2);
                    return chkcond(v, m1)
                        ? [l, fmt[0]]
                        : chkcond(v, m2)
                          ? [l, fmt[1]]
                          : [l, fmt[m1 != null && m2 != null ? 2 : 1]];
                }
                return [l, ff];
            }
            function SSF_format(fmt, v, o) {
                if (o == null) o = {};
                var sfmt = '';
                switch (typeof fmt) {
                    case 'string':
                        if (fmt == 'm/d/yy' && o.dateNF) sfmt = o.dateNF;
                        else sfmt = fmt;
                        break;
                    case 'number':
                        if (fmt == 14 && o.dateNF) sfmt = o.dateNF;
                        else sfmt = (o.table != null ? o.table : table_fmt)[fmt];
                        if (sfmt == null)
                            sfmt =
                                (o.table && o.table[SSF_default_map[fmt]]) ||
                                table_fmt[SSF_default_map[fmt]];
                        if (sfmt == null) sfmt = SSF_default_str[fmt] || 'General';
                        break;
                }
                if (SSF_isgeneral(sfmt, 0)) return SSF_general(v, o);
                if (v instanceof Date) v = datenum_local(v, o.date1904);
                var f3 = choose_fmt(sfmt, v);
                if (SSF_isgeneral(f3[1])) return SSF_general(v, o);
                if (v === true) v = 'TRUE';
                else if (v === false) v = 'FALSE';
                else if (v === '' || v == null) return '';
                return eval_fmt(f3[1], v, o, f3[0]);
            }
            function SSF_load(fmt, idx) {
                if (typeof idx != 'number') {
                    idx = +idx || -1;
                    for (var i2 = 0; i2 < 392; ++i2) {
                        if (table_fmt[i2] == void 0) {
                            if (idx < 0) idx = i2;
                            continue;
                        }
                        if (table_fmt[i2] == fmt) {
                            idx = i2;
                            break;
                        }
                    }
                    if (idx < 0) idx = 391;
                }
                table_fmt[idx] = fmt;
                return idx;
            }
            function SSF_load_table(tbl) {
                for (var i2 = 0; i2 != 392; ++i2) if (tbl[i2] !== void 0) SSF_load(tbl[i2], i2);
            }
            function make_ssf() {
                table_fmt = SSF_init_table();
            }
            var SSF = {
                format: SSF_format,
                load: SSF_load,
                _table: table_fmt,
                load_table: SSF_load_table,
                parse_date_code: SSF_parse_date_code,
                is_date: fmt_is_date,
                get_table: function get_table() {
                    return (SSF._table = table_fmt);
                },
            };
            var SSFImplicit = {
                5: '"$"#,##0_);\\("$"#,##0\\)',
                6: '"$"#,##0_);[Red]\\("$"#,##0\\)',
                7: '"$"#,##0.00_);\\("$"#,##0.00\\)',
                8: '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
                23: 'General',
                24: 'General',
                25: 'General',
                26: 'General',
                27: 'm/d/yy',
                28: 'm/d/yy',
                29: 'm/d/yy',
                30: 'm/d/yy',
                31: 'm/d/yy',
                32: 'h:mm:ss',
                33: 'h:mm:ss',
                34: 'h:mm:ss',
                35: 'h:mm:ss',
                36: 'm/d/yy',
                41: '_(* #,##0_);_(* (#,##0);_(* "-"_);_(@_)',
                42: '_("$"* #,##0_);_("$"* (#,##0);_("$"* "-"_);_(@_)',
                43: '_(* #,##0.00_);_(* (#,##0.00);_(* "-"??_);_(@_)',
                44: '_("$"* #,##0.00_);_("$"* (#,##0.00);_("$"* "-"??_);_(@_)',
                50: 'm/d/yy',
                51: 'm/d/yy',
                52: 'm/d/yy',
                53: 'm/d/yy',
                54: 'm/d/yy',
                55: 'm/d/yy',
                56: 'm/d/yy',
                57: 'm/d/yy',
                58: 'm/d/yy',
                59: '0',
                60: '0.00',
                61: '#,##0',
                62: '#,##0.00',
                63: '"$"#,##0_);\\("$"#,##0\\)',
                64: '"$"#,##0_);[Red]\\("$"#,##0\\)',
                65: '"$"#,##0.00_);\\("$"#,##0.00\\)',
                66: '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
                67: '0%',
                68: '0.00%',
                69: '# ?/?',
                70: '# ??/??',
                71: 'm/d/yy',
                72: 'm/d/yy',
                73: 'd-mmm-yy',
                74: 'd-mmm',
                75: 'mmm-yy',
                76: 'h:mm',
                77: 'h:mm:ss',
                78: 'm/d/yy h:mm',
                79: 'mm:ss',
                80: '[h]:mm:ss',
                81: 'mmss.0',
            };
            var dateNFregex = /[dD]+|[mM]+|[yYeE]+|[Hh]+|[Ss]+/g;
            function dateNF_regex(dateNF) {
                var fmt = typeof dateNF == 'number' ? table_fmt[dateNF] : dateNF;
                fmt = fmt.replace(dateNFregex, '(\\d+)');
                return new RegExp('^' + fmt + '$');
            }
            function dateNF_fix(str, dateNF, match) {
                var Y = -1,
                    m2 = -1,
                    d = -1,
                    H = -1,
                    M = -1,
                    S2 = -1;
                (dateNF.match(dateNFregex) || []).forEach(function (n, i2) {
                    var v = parseInt(match[i2 + 1], 10);
                    switch (n.toLowerCase().charAt(0)) {
                        case 'y':
                            Y = v;
                            break;
                        case 'd':
                            d = v;
                            break;
                        case 'h':
                            H = v;
                            break;
                        case 's':
                            S2 = v;
                            break;
                        case 'm':
                            if (H >= 0) M = v;
                            else m2 = v;
                            break;
                    }
                });
                if (S2 >= 0 && M == -1 && m2 >= 0) {
                    M = m2;
                    m2 = -1;
                }
                var datestr =
                    ('' + (Y >= 0 ? Y : /* @__PURE__ */ new Date().getFullYear())).slice(-4) +
                    '-' +
                    ('00' + (m2 >= 1 ? m2 : 1)).slice(-2) +
                    '-' +
                    ('00' + (d >= 1 ? d : 1)).slice(-2);
                if (datestr.length == 7) datestr = '0' + datestr;
                if (datestr.length == 8) datestr = '20' + datestr;
                var timestr =
                    ('00' + (H >= 0 ? H : 0)).slice(-2) +
                    ':' +
                    ('00' + (M >= 0 ? M : 0)).slice(-2) +
                    ':' +
                    ('00' + (S2 >= 0 ? S2 : 0)).slice(-2);
                if (H == -1 && M == -1 && S2 == -1) return datestr;
                if (Y == -1 && m2 == -1 && d == -1) return timestr;
                return datestr + 'T' + timestr;
            }
            var CRC32 = (function () {
                var CRC322 = {};
                CRC322.version = '1.2.0';
                function signed_crc_table() {
                    var c = 0,
                        table = new Array(256);
                    for (var n = 0; n != 256; ++n) {
                        c = n;
                        c = c & 1 ? -306674912 ^ (c >>> 1) : c >>> 1;
                        c = c & 1 ? -306674912 ^ (c >>> 1) : c >>> 1;
                        c = c & 1 ? -306674912 ^ (c >>> 1) : c >>> 1;
                        c = c & 1 ? -306674912 ^ (c >>> 1) : c >>> 1;
                        c = c & 1 ? -306674912 ^ (c >>> 1) : c >>> 1;
                        c = c & 1 ? -306674912 ^ (c >>> 1) : c >>> 1;
                        c = c & 1 ? -306674912 ^ (c >>> 1) : c >>> 1;
                        c = c & 1 ? -306674912 ^ (c >>> 1) : c >>> 1;
                        table[n] = c;
                    }
                    return typeof Int32Array !== 'undefined' ? new Int32Array(table) : table;
                }
                var T0 = signed_crc_table();
                function slice_by_16_tables(T) {
                    var c = 0,
                        v = 0,
                        n = 0,
                        table =
                            typeof Int32Array !== 'undefined'
                                ? new Int32Array(4096)
                                : new Array(4096);
                    for (n = 0; n != 256; ++n) table[n] = T[n];
                    for (n = 0; n != 256; ++n) {
                        v = T[n];
                        for (c = 256 + n; c < 4096; c += 256) v = table[c] = (v >>> 8) ^ T[v & 255];
                    }
                    var out = [];
                    for (n = 1; n != 16; ++n)
                        out[n - 1] =
                            typeof Int32Array !== 'undefined'
                                ? table.subarray(n * 256, n * 256 + 256)
                                : table.slice(n * 256, n * 256 + 256);
                    return out;
                }
                var TT = slice_by_16_tables(T0);
                var T1 = TT[0],
                    T2 = TT[1],
                    T3 = TT[2],
                    T4 = TT[3],
                    T5 = TT[4];
                var T6 = TT[5],
                    T7 = TT[6],
                    T8 = TT[7],
                    T9 = TT[8],
                    Ta = TT[9];
                var Tb = TT[10],
                    Tc = TT[11],
                    Td = TT[12],
                    Te = TT[13],
                    Tf = TT[14];
                function crc32_bstr(bstr, seed) {
                    var C = seed ^ -1;
                    for (var i2 = 0, L = bstr.length; i2 < L; )
                        C = (C >>> 8) ^ T0[(C ^ bstr.charCodeAt(i2++)) & 255];
                    return ~C;
                }
                function crc32_buf(B, seed) {
                    var C = seed ^ -1,
                        L = B.length - 15,
                        i2 = 0;
                    for (; i2 < L; )
                        C =
                            Tf[B[i2++] ^ (C & 255)] ^
                            Te[B[i2++] ^ ((C >> 8) & 255)] ^
                            Td[B[i2++] ^ ((C >> 16) & 255)] ^
                            Tc[B[i2++] ^ (C >>> 24)] ^
                            Tb[B[i2++]] ^
                            Ta[B[i2++]] ^
                            T9[B[i2++]] ^
                            T8[B[i2++]] ^
                            T7[B[i2++]] ^
                            T6[B[i2++]] ^
                            T5[B[i2++]] ^
                            T4[B[i2++]] ^
                            T3[B[i2++]] ^
                            T2[B[i2++]] ^
                            T1[B[i2++]] ^
                            T0[B[i2++]];
                    L += 15;
                    while (i2 < L) C = (C >>> 8) ^ T0[(C ^ B[i2++]) & 255];
                    return ~C;
                }
                function crc32_str(str, seed) {
                    var C = seed ^ -1;
                    for (var i2 = 0, L = str.length, c = 0, d = 0; i2 < L; ) {
                        c = str.charCodeAt(i2++);
                        if (c < 128) {
                            C = (C >>> 8) ^ T0[(C ^ c) & 255];
                        } else if (c < 2048) {
                            C = (C >>> 8) ^ T0[(C ^ (192 | ((c >> 6) & 31))) & 255];
                            C = (C >>> 8) ^ T0[(C ^ (128 | (c & 63))) & 255];
                        } else if (c >= 55296 && c < 57344) {
                            c = (c & 1023) + 64;
                            d = str.charCodeAt(i2++) & 1023;
                            C = (C >>> 8) ^ T0[(C ^ (240 | ((c >> 8) & 7))) & 255];
                            C = (C >>> 8) ^ T0[(C ^ (128 | ((c >> 2) & 63))) & 255];
                            C =
                                (C >>> 8) ^
                                T0[(C ^ (128 | ((d >> 6) & 15) | ((c & 3) << 4))) & 255];
                            C = (C >>> 8) ^ T0[(C ^ (128 | (d & 63))) & 255];
                        } else {
                            C = (C >>> 8) ^ T0[(C ^ (224 | ((c >> 12) & 15))) & 255];
                            C = (C >>> 8) ^ T0[(C ^ (128 | ((c >> 6) & 63))) & 255];
                            C = (C >>> 8) ^ T0[(C ^ (128 | (c & 63))) & 255];
                        }
                    }
                    return ~C;
                }
                CRC322.table = T0;
                CRC322.bstr = crc32_bstr;
                CRC322.buf = crc32_buf;
                CRC322.str = crc32_str;
                return CRC322;
            })();
            var CFB = (function _CFB() {
                var exports3 = {};
                exports3.version = '1.2.1';
                function namecmp(l, r2) {
                    var L = l.split('/'),
                        R = r2.split('/');
                    for (var i3 = 0, c = 0, Z2 = Math.min(L.length, R.length); i3 < Z2; ++i3) {
                        if ((c = L[i3].length - R[i3].length)) return c;
                        if (L[i3] != R[i3]) return L[i3] < R[i3] ? -1 : 1;
                    }
                    return L.length - R.length;
                }
                function dirname(p) {
                    if (p.charAt(p.length - 1) == '/')
                        return p.slice(0, -1).indexOf('/') === -1 ? p : dirname(p.slice(0, -1));
                    var c = p.lastIndexOf('/');
                    return c === -1 ? p : p.slice(0, c + 1);
                }
                function filename(p) {
                    if (p.charAt(p.length - 1) == '/') return filename(p.slice(0, -1));
                    var c = p.lastIndexOf('/');
                    return c === -1 ? p : p.slice(c + 1);
                }
                function write_dos_date(buf, date) {
                    if (typeof date === 'string') date = new Date(date);
                    var hms = date.getHours();
                    hms = (hms << 6) | date.getMinutes();
                    hms = (hms << 5) | (date.getSeconds() >>> 1);
                    buf.write_shift(2, hms);
                    var ymd = date.getFullYear() - 1980;
                    ymd = (ymd << 4) | (date.getMonth() + 1);
                    ymd = (ymd << 5) | date.getDate();
                    buf.write_shift(2, ymd);
                }
                function parse_dos_date(buf) {
                    var hms = buf.read_shift(2) & 65535;
                    var ymd = buf.read_shift(2) & 65535;
                    var val2 = /* @__PURE__ */ new Date();
                    var d = ymd & 31;
                    ymd >>>= 5;
                    var m2 = ymd & 15;
                    ymd >>>= 4;
                    val2.setMilliseconds(0);
                    val2.setFullYear(ymd + 1980);
                    val2.setMonth(m2 - 1);
                    val2.setDate(d);
                    var S2 = hms & 31;
                    hms >>>= 5;
                    var M = hms & 63;
                    hms >>>= 6;
                    val2.setHours(hms);
                    val2.setMinutes(M);
                    val2.setSeconds(S2 << 1);
                    return val2;
                }
                function parse_extra_field(blob) {
                    prep_blob(blob, 0);
                    var o = {};
                    var flags = 0;
                    while (blob.l <= blob.length - 4) {
                        var type = blob.read_shift(2);
                        var sz = blob.read_shift(2),
                            tgt = blob.l + sz;
                        var p = {};
                        switch (type) {
                            case 21589:
                                {
                                    flags = blob.read_shift(1);
                                    if (flags & 1) p.mtime = blob.read_shift(4);
                                    if (sz > 5) {
                                        if (flags & 2) p.atime = blob.read_shift(4);
                                        if (flags & 4) p.ctime = blob.read_shift(4);
                                    }
                                    if (p.mtime) p.mt = new Date(p.mtime * 1e3);
                                }
                                break;
                        }
                        blob.l = tgt;
                        o[type] = p;
                    }
                    return o;
                }
                var fs3;
                function get_fs() {
                    return fs3 || (fs3 = require('fs'));
                }
                function parse8(file, options2) {
                    if (file[0] == 80 && file[1] == 75) return parse_zip2(file, options2);
                    if ((file[0] | 32) == 109 && (file[1] | 32) == 105)
                        return parse_mad(file, options2);
                    if (file.length < 512)
                        throw new Error('CFB file size ' + file.length + ' < 512');
                    var mver = 3;
                    var ssz = 512;
                    var nmfs = 0;
                    var difat_sec_cnt = 0;
                    var dir_start = 0;
                    var minifat_start = 0;
                    var difat_start = 0;
                    var fat_addrs = [];
                    var blob = file.slice(0, 512);
                    prep_blob(blob, 0);
                    var mv = check_get_mver(blob);
                    mver = mv[0];
                    switch (mver) {
                        case 3:
                            ssz = 512;
                            break;
                        case 4:
                            ssz = 4096;
                            break;
                        case 0:
                            if (mv[1] == 0) return parse_zip2(file, options2);
                        default:
                            throw new Error('Major Version: Expected 3 or 4 saw ' + mver);
                    }
                    if (ssz !== 512) {
                        blob = file.slice(0, ssz);
                        prep_blob(
                            blob,
                            28,
                            /* blob.l */
                        );
                    }
                    var header = file.slice(0, ssz);
                    check_shifts(blob, mver);
                    var dir_cnt = blob.read_shift(4, 'i');
                    if (mver === 3 && dir_cnt !== 0)
                        throw new Error('# Directory Sectors: Expected 0 saw ' + dir_cnt);
                    blob.l += 4;
                    dir_start = blob.read_shift(4, 'i');
                    blob.l += 4;
                    blob.chk('00100000', 'Mini Stream Cutoff Size: ');
                    minifat_start = blob.read_shift(4, 'i');
                    nmfs = blob.read_shift(4, 'i');
                    difat_start = blob.read_shift(4, 'i');
                    difat_sec_cnt = blob.read_shift(4, 'i');
                    for (var q2 = -1, j = 0; j < 109; ++j) {
                        q2 = blob.read_shift(4, 'i');
                        if (q2 < 0) break;
                        fat_addrs[j] = q2;
                    }
                    var sectors = sectorify(file, ssz);
                    sleuth_fat(difat_start, difat_sec_cnt, sectors, ssz, fat_addrs);
                    var sector_list = make_sector_list(sectors, dir_start, fat_addrs, ssz);
                    sector_list[dir_start].name = '!Directory';
                    if (nmfs > 0 && minifat_start !== ENDOFCHAIN)
                        sector_list[minifat_start].name = '!MiniFAT';
                    sector_list[fat_addrs[0]].name = '!FAT';
                    sector_list.fat_addrs = fat_addrs;
                    sector_list.ssz = ssz;
                    var files = {},
                        Paths = [],
                        FileIndex = [],
                        FullPaths = [];
                    read_directory(
                        dir_start,
                        sector_list,
                        sectors,
                        Paths,
                        nmfs,
                        files,
                        FileIndex,
                        minifat_start,
                    );
                    build_full_paths(FileIndex, FullPaths, Paths);
                    Paths.shift();
                    var o = {
                        FileIndex,
                        FullPaths,
                    };
                    if (options2 && options2.raw) o.raw = { header, sectors };
                    return o;
                }
                function check_get_mver(blob) {
                    if (blob[blob.l] == 80 && blob[blob.l + 1] == 75) return [0, 0];
                    blob.chk(HEADER_SIGNATURE, 'Header Signature: ');
                    blob.l += 16;
                    var mver = blob.read_shift(2, 'u');
                    return [blob.read_shift(2, 'u'), mver];
                }
                function check_shifts(blob, mver) {
                    var shift = 9;
                    blob.l += 2;
                    switch ((shift = blob.read_shift(2))) {
                        case 9:
                            if (mver != 3) throw new Error('Sector Shift: Expected 9 saw ' + shift);
                            break;
                        case 12:
                            if (mver != 4)
                                throw new Error('Sector Shift: Expected 12 saw ' + shift);
                            break;
                        default:
                            throw new Error('Sector Shift: Expected 9 or 12 saw ' + shift);
                    }
                    blob.chk('0600', 'Mini Sector Shift: ');
                    blob.chk('000000000000', 'Reserved: ');
                }
                function sectorify(file, ssz) {
                    var nsectors = Math.ceil(file.length / ssz) - 1;
                    var sectors = [];
                    for (var i3 = 1; i3 < nsectors; ++i3)
                        sectors[i3 - 1] = file.slice(i3 * ssz, (i3 + 1) * ssz);
                    sectors[nsectors - 1] = file.slice(nsectors * ssz);
                    return sectors;
                }
                function build_full_paths(FI, FP, Paths) {
                    var i3 = 0,
                        L = 0,
                        R = 0,
                        C = 0,
                        j = 0,
                        pl = Paths.length;
                    var dad = [],
                        q2 = [];
                    for (; i3 < pl; ++i3) {
                        dad[i3] = q2[i3] = i3;
                        FP[i3] = Paths[i3];
                    }
                    for (; j < q2.length; ++j) {
                        i3 = q2[j];
                        L = FI[i3].L;
                        R = FI[i3].R;
                        C = FI[i3].C;
                        if (dad[i3] === i3) {
                            if (L !== -1 && dad[L] !== L) dad[i3] = dad[L];
                            if (R !== -1 && dad[R] !== R) dad[i3] = dad[R];
                        }
                        if (C !== -1) dad[C] = i3;
                        if (L !== -1 && i3 != dad[i3]) {
                            dad[L] = dad[i3];
                            if (q2.lastIndexOf(L) < j) q2.push(L);
                        }
                        if (R !== -1 && i3 != dad[i3]) {
                            dad[R] = dad[i3];
                            if (q2.lastIndexOf(R) < j) q2.push(R);
                        }
                    }
                    for (i3 = 1; i3 < pl; ++i3)
                        if (dad[i3] === i3) {
                            if (R !== -1 && dad[R] !== R) dad[i3] = dad[R];
                            else if (L !== -1 && dad[L] !== L) dad[i3] = dad[L];
                        }
                    for (i3 = 1; i3 < pl; ++i3) {
                        if (FI[i3].type === 0) continue;
                        j = i3;
                        if (j != dad[j])
                            do {
                                j = dad[j];
                                FP[i3] = FP[j] + '/' + FP[i3];
                            } while (j !== 0 && -1 !== dad[j] && j != dad[j]);
                        dad[i3] = -1;
                    }
                    FP[0] += '/';
                    for (i3 = 1; i3 < pl; ++i3) {
                        if (FI[i3].type !== 2) FP[i3] += '/';
                    }
                }
                function get_mfat_entry(entry, payload, mini) {
                    var start = entry.start,
                        size = entry.size;
                    var o = [];
                    var idx = start;
                    while (mini && size > 0 && idx >= 0) {
                        o.push(payload.slice(idx * MSSZ, idx * MSSZ + MSSZ));
                        size -= MSSZ;
                        idx = __readInt32LE(mini, idx * 4);
                    }
                    if (o.length === 0) return new_buf(0);
                    return bconcat(o).slice(0, entry.size);
                }
                function sleuth_fat(idx, cnt, sectors, ssz, fat_addrs) {
                    var q2 = ENDOFCHAIN;
                    if (idx === ENDOFCHAIN) {
                        if (cnt !== 0) throw new Error('DIFAT chain shorter than expected');
                    } else if (idx !== -1) {
                        var sector = sectors[idx],
                            m2 = (ssz >>> 2) - 1;
                        if (!sector) return;
                        for (var i3 = 0; i3 < m2; ++i3) {
                            if ((q2 = __readInt32LE(sector, i3 * 4)) === ENDOFCHAIN) break;
                            fat_addrs.push(q2);
                        }
                        sleuth_fat(
                            __readInt32LE(sector, ssz - 4),
                            cnt - 1,
                            sectors,
                            ssz,
                            fat_addrs,
                        );
                    }
                }
                function get_sector_list(sectors, start, fat_addrs, ssz, chkd) {
                    var buf = [],
                        buf_chain = [];
                    if (!chkd) chkd = [];
                    var modulus = ssz - 1,
                        j = 0,
                        jj = 0;
                    for (j = start; j >= 0; ) {
                        chkd[j] = true;
                        buf[buf.length] = j;
                        buf_chain.push(sectors[j]);
                        var addr = fat_addrs[Math.floor((j * 4) / ssz)];
                        jj = (j * 4) & modulus;
                        if (ssz < 4 + jj)
                            throw new Error('FAT boundary crossed: ' + j + ' 4 ' + ssz);
                        if (!sectors[addr]) break;
                        j = __readInt32LE(sectors[addr], jj);
                    }
                    return { nodes: buf, data: __toBuffer([buf_chain]) };
                }
                function make_sector_list(sectors, dir_start, fat_addrs, ssz) {
                    var sl = sectors.length,
                        sector_list = [];
                    var chkd = [],
                        buf = [],
                        buf_chain = [];
                    var modulus = ssz - 1,
                        i3 = 0,
                        j = 0,
                        k = 0,
                        jj = 0;
                    for (i3 = 0; i3 < sl; ++i3) {
                        buf = [];
                        k = i3 + dir_start;
                        if (k >= sl) k -= sl;
                        if (chkd[k]) continue;
                        buf_chain = [];
                        var seen = [];
                        for (j = k; j >= 0; ) {
                            seen[j] = true;
                            chkd[j] = true;
                            buf[buf.length] = j;
                            buf_chain.push(sectors[j]);
                            var addr = fat_addrs[Math.floor((j * 4) / ssz)];
                            jj = (j * 4) & modulus;
                            if (ssz < 4 + jj)
                                throw new Error('FAT boundary crossed: ' + j + ' 4 ' + ssz);
                            if (!sectors[addr]) break;
                            j = __readInt32LE(sectors[addr], jj);
                            if (seen[j]) break;
                        }
                        sector_list[k] = { nodes: buf, data: __toBuffer([buf_chain]) };
                    }
                    return sector_list;
                }
                function read_directory(
                    dir_start,
                    sector_list,
                    sectors,
                    Paths,
                    nmfs,
                    files,
                    FileIndex,
                    mini,
                ) {
                    var minifat_store = 0,
                        pl = Paths.length ? 2 : 0;
                    var sector = sector_list[dir_start].data;
                    var i3 = 0,
                        namelen = 0,
                        name;
                    for (; i3 < sector.length; i3 += 128) {
                        var blob = sector.slice(i3, i3 + 128);
                        prep_blob(blob, 64);
                        namelen = blob.read_shift(2);
                        name = __utf16le(blob, 0, namelen - pl);
                        Paths.push(name);
                        var o = {
                            name,
                            type: blob.read_shift(1),
                            color: blob.read_shift(1),
                            L: blob.read_shift(4, 'i'),
                            R: blob.read_shift(4, 'i'),
                            C: blob.read_shift(4, 'i'),
                            clsid: blob.read_shift(16),
                            state: blob.read_shift(4, 'i'),
                            start: 0,
                            size: 0,
                        };
                        var ctime =
                            blob.read_shift(2) +
                            blob.read_shift(2) +
                            blob.read_shift(2) +
                            blob.read_shift(2);
                        if (ctime !== 0) o.ct = read_date(blob, blob.l - 8);
                        var mtime =
                            blob.read_shift(2) +
                            blob.read_shift(2) +
                            blob.read_shift(2) +
                            blob.read_shift(2);
                        if (mtime !== 0) o.mt = read_date(blob, blob.l - 8);
                        o.start = blob.read_shift(4, 'i');
                        o.size = blob.read_shift(4, 'i');
                        if (o.size < 0 && o.start < 0) {
                            o.size = o.type = 0;
                            o.start = ENDOFCHAIN;
                            o.name = '';
                        }
                        if (o.type === 5) {
                            minifat_store = o.start;
                            if (nmfs > 0 && minifat_store !== ENDOFCHAIN)
                                sector_list[minifat_store].name = '!StreamData';
                        } else if (o.size >= 4096) {
                            o.storage = 'fat';
                            if (sector_list[o.start] === void 0)
                                sector_list[o.start] = get_sector_list(
                                    sectors,
                                    o.start,
                                    sector_list.fat_addrs,
                                    sector_list.ssz,
                                );
                            sector_list[o.start].name = o.name;
                            o.content = sector_list[o.start].data.slice(0, o.size);
                        } else {
                            o.storage = 'minifat';
                            if (o.size < 0) o.size = 0;
                            else if (
                                minifat_store !== ENDOFCHAIN &&
                                o.start !== ENDOFCHAIN &&
                                sector_list[minifat_store]
                            ) {
                                o.content = get_mfat_entry(
                                    o,
                                    sector_list[minifat_store].data,
                                    (sector_list[mini] || {}).data,
                                );
                            }
                        }
                        if (o.content) prep_blob(o.content, 0);
                        files[name] = o;
                        FileIndex.push(o);
                    }
                }
                function read_date(blob, offset) {
                    return new Date(
                        ((__readUInt32LE(blob, offset + 4) / 1e7) * Math.pow(2, 32) +
                            __readUInt32LE(blob, offset) / 1e7 -
                            11644473600) *
                            1e3,
                    );
                }
                function read_file(filename2, options2) {
                    get_fs();
                    return parse8(fs3.readFileSync(filename2), options2);
                }
                function read(blob, options2) {
                    var type = options2 && options2.type;
                    if (!type) {
                        if (has_buf && Buffer.isBuffer(blob)) type = 'buffer';
                    }
                    switch (type || 'base64') {
                        case 'file':
                            return read_file(blob, options2);
                        case 'base64':
                            return parse8(s2a(Base64_decode(blob)), options2);
                        case 'binary':
                            return parse8(s2a(blob), options2);
                    }
                    return parse8(blob, options2);
                }
                function init_cfb(cfb, opts) {
                    var o = opts || {},
                        root3 = o.root || 'Root Entry';
                    if (!cfb.FullPaths) cfb.FullPaths = [];
                    if (!cfb.FileIndex) cfb.FileIndex = [];
                    if (cfb.FullPaths.length !== cfb.FileIndex.length)
                        throw new Error('inconsistent CFB structure');
                    if (cfb.FullPaths.length === 0) {
                        cfb.FullPaths[0] = root3 + '/';
                        cfb.FileIndex[0] = { name: root3, type: 5 };
                    }
                    if (o.CLSID) cfb.FileIndex[0].clsid = o.CLSID;
                    seed_cfb(cfb);
                }
                function seed_cfb(cfb) {
                    var nm = 'Sh33tJ5';
                    if (CFB.find(cfb, '/' + nm)) return;
                    var p = new_buf(4);
                    p[0] = 55;
                    p[1] = p[3] = 50;
                    p[2] = 54;
                    cfb.FileIndex.push({
                        name: nm,
                        type: 2,
                        content: p,
                        size: 4,
                        L: 69,
                        R: 69,
                        C: 69,
                    });
                    cfb.FullPaths.push(cfb.FullPaths[0] + nm);
                    rebuild_cfb(cfb);
                }
                function rebuild_cfb(cfb, f3) {
                    init_cfb(cfb);
                    var gc = false,
                        s2 = false;
                    for (var i3 = cfb.FullPaths.length - 1; i3 >= 0; --i3) {
                        var _file = cfb.FileIndex[i3];
                        switch (_file.type) {
                            case 0:
                                if (s2) gc = true;
                                else {
                                    cfb.FileIndex.pop();
                                    cfb.FullPaths.pop();
                                }
                                break;
                            case 1:
                            case 2:
                            case 5:
                                s2 = true;
                                if (isNaN(_file.R * _file.L * _file.C)) gc = true;
                                if (_file.R > -1 && _file.L > -1 && _file.R == _file.L) gc = true;
                                break;
                            default:
                                gc = true;
                                break;
                        }
                    }
                    if (!gc && !f3) return;
                    var now = new Date(1987, 1, 19),
                        j = 0;
                    var fullPaths = Object.create ? /* @__PURE__ */ Object.create(null) : {};
                    var data2 = [];
                    for (i3 = 0; i3 < cfb.FullPaths.length; ++i3) {
                        fullPaths[cfb.FullPaths[i3]] = true;
                        if (cfb.FileIndex[i3].type === 0) continue;
                        data2.push([cfb.FullPaths[i3], cfb.FileIndex[i3]]);
                    }
                    for (i3 = 0; i3 < data2.length; ++i3) {
                        var dad = dirname(data2[i3][0]);
                        s2 = fullPaths[dad];
                        if (!s2) {
                            data2.push([
                                dad,
                                {
                                    name: filename(dad).replace('/', ''),
                                    type: 1,
                                    clsid: HEADER_CLSID,
                                    ct: now,
                                    mt: now,
                                    content: null,
                                },
                            ]);
                            fullPaths[dad] = true;
                        }
                    }
                    data2.sort(function (x2, y) {
                        return namecmp(x2[0], y[0]);
                    });
                    cfb.FullPaths = [];
                    cfb.FileIndex = [];
                    for (i3 = 0; i3 < data2.length; ++i3) {
                        cfb.FullPaths[i3] = data2[i3][0];
                        cfb.FileIndex[i3] = data2[i3][1];
                    }
                    for (i3 = 0; i3 < data2.length; ++i3) {
                        var elt = cfb.FileIndex[i3];
                        var nm = cfb.FullPaths[i3];
                        elt.name = filename(nm).replace('/', '');
                        elt.L = elt.R = elt.C = -(elt.color = 1);
                        elt.size = elt.content ? elt.content.length : 0;
                        elt.start = 0;
                        elt.clsid = elt.clsid || HEADER_CLSID;
                        if (i3 === 0) {
                            elt.C = data2.length > 1 ? 1 : -1;
                            elt.size = 0;
                            elt.type = 5;
                        } else if (nm.slice(-1) == '/') {
                            for (j = i3 + 1; j < data2.length; ++j)
                                if (dirname(cfb.FullPaths[j]) == nm) break;
                            elt.C = j >= data2.length ? -1 : j;
                            for (j = i3 + 1; j < data2.length; ++j)
                                if (dirname(cfb.FullPaths[j]) == dirname(nm)) break;
                            elt.R = j >= data2.length ? -1 : j;
                            elt.type = 1;
                        } else {
                            if (dirname(cfb.FullPaths[i3 + 1] || '') == dirname(nm)) elt.R = i3 + 1;
                            elt.type = 2;
                        }
                    }
                }
                function _write(cfb, options2) {
                    var _opts = options2 || {};
                    if (_opts.fileType == 'mad') return write_mad(cfb, _opts);
                    rebuild_cfb(cfb);
                    switch (_opts.fileType) {
                        case 'zip':
                            return write_zip2(cfb, _opts);
                    }
                    var L = (function (cfb2) {
                        var mini_size = 0,
                            fat_size = 0;
                        for (var i4 = 0; i4 < cfb2.FileIndex.length; ++i4) {
                            var file2 = cfb2.FileIndex[i4];
                            if (!file2.content) continue;
                            var flen2 = file2.content.length;
                            if (flen2 > 0) {
                                if (flen2 < 4096) mini_size += (flen2 + 63) >> 6;
                                else fat_size += (flen2 + 511) >> 9;
                            }
                        }
                        var dir_cnt = (cfb2.FullPaths.length + 3) >> 2;
                        var mini_cnt = (mini_size + 7) >> 3;
                        var mfat_cnt = (mini_size + 127) >> 7;
                        var fat_base = mini_cnt + fat_size + dir_cnt + mfat_cnt;
                        var fat_cnt = (fat_base + 127) >> 7;
                        var difat_cnt = fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt - 109) / 127);
                        while ((fat_base + fat_cnt + difat_cnt + 127) >> 7 > fat_cnt)
                            difat_cnt = ++fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt - 109) / 127);
                        var L2 = [1, difat_cnt, fat_cnt, mfat_cnt, dir_cnt, fat_size, mini_size, 0];
                        cfb2.FileIndex[0].size = mini_size << 6;
                        L2[7] =
                            (cfb2.FileIndex[0].start =
                                L2[0] + L2[1] + L2[2] + L2[3] + L2[4] + L2[5]) +
                            ((L2[6] + 7) >> 3);
                        return L2;
                    })(cfb);
                    var o = new_buf(L[7] << 9);
                    var i3 = 0,
                        T = 0;
                    {
                        for (i3 = 0; i3 < 8; ++i3) o.write_shift(1, HEADER_SIG[i3]);
                        for (i3 = 0; i3 < 8; ++i3) o.write_shift(2, 0);
                        o.write_shift(2, 62);
                        o.write_shift(2, 3);
                        o.write_shift(2, 65534);
                        o.write_shift(2, 9);
                        o.write_shift(2, 6);
                        for (i3 = 0; i3 < 3; ++i3) o.write_shift(2, 0);
                        o.write_shift(4, 0);
                        o.write_shift(4, L[2]);
                        o.write_shift(4, L[0] + L[1] + L[2] + L[3] - 1);
                        o.write_shift(4, 0);
                        o.write_shift(4, 1 << 12);
                        o.write_shift(4, L[3] ? L[0] + L[1] + L[2] - 1 : ENDOFCHAIN);
                        o.write_shift(4, L[3]);
                        o.write_shift(-4, L[1] ? L[0] - 1 : ENDOFCHAIN);
                        o.write_shift(4, L[1]);
                        for (i3 = 0; i3 < 109; ++i3) o.write_shift(-4, i3 < L[2] ? L[1] + i3 : -1);
                    }
                    if (L[1]) {
                        for (T = 0; T < L[1]; ++T) {
                            for (; i3 < 236 + T * 127; ++i3)
                                o.write_shift(-4, i3 < L[2] ? L[1] + i3 : -1);
                            o.write_shift(-4, T === L[1] - 1 ? ENDOFCHAIN : T + 1);
                        }
                    }
                    var chainit = function (w) {
                        for (T += w; i3 < T - 1; ++i3) o.write_shift(-4, i3 + 1);
                        if (w) {
                            ++i3;
                            o.write_shift(-4, ENDOFCHAIN);
                        }
                    };
                    T = i3 = 0;
                    for (T += L[1]; i3 < T; ++i3) o.write_shift(-4, consts.DIFSECT);
                    for (T += L[2]; i3 < T; ++i3) o.write_shift(-4, consts.FATSECT);
                    chainit(L[3]);
                    chainit(L[4]);
                    var j = 0,
                        flen = 0;
                    var file = cfb.FileIndex[0];
                    for (; j < cfb.FileIndex.length; ++j) {
                        file = cfb.FileIndex[j];
                        if (!file.content) continue;
                        flen = file.content.length;
                        if (flen < 4096) continue;
                        file.start = T;
                        chainit((flen + 511) >> 9);
                    }
                    chainit((L[6] + 7) >> 3);
                    while (o.l & 511) o.write_shift(-4, consts.ENDOFCHAIN);
                    T = i3 = 0;
                    for (j = 0; j < cfb.FileIndex.length; ++j) {
                        file = cfb.FileIndex[j];
                        if (!file.content) continue;
                        flen = file.content.length;
                        if (!flen || flen >= 4096) continue;
                        file.start = T;
                        chainit((flen + 63) >> 6);
                    }
                    while (o.l & 511) o.write_shift(-4, consts.ENDOFCHAIN);
                    for (i3 = 0; i3 < L[4] << 2; ++i3) {
                        var nm = cfb.FullPaths[i3];
                        if (!nm || nm.length === 0) {
                            for (j = 0; j < 17; ++j) o.write_shift(4, 0);
                            for (j = 0; j < 3; ++j) o.write_shift(4, -1);
                            for (j = 0; j < 12; ++j) o.write_shift(4, 0);
                            continue;
                        }
                        file = cfb.FileIndex[i3];
                        if (i3 === 0) file.start = file.size ? file.start - 1 : ENDOFCHAIN;
                        var _nm = (i3 === 0 && _opts.root) || file.name;
                        flen = 2 * (_nm.length + 1);
                        o.write_shift(64, _nm, 'utf16le');
                        o.write_shift(2, flen);
                        o.write_shift(1, file.type);
                        o.write_shift(1, file.color);
                        o.write_shift(-4, file.L);
                        o.write_shift(-4, file.R);
                        o.write_shift(-4, file.C);
                        if (!file.clsid) for (j = 0; j < 4; ++j) o.write_shift(4, 0);
                        else o.write_shift(16, file.clsid, 'hex');
                        o.write_shift(4, file.state || 0);
                        o.write_shift(4, 0);
                        o.write_shift(4, 0);
                        o.write_shift(4, 0);
                        o.write_shift(4, 0);
                        o.write_shift(4, file.start);
                        o.write_shift(4, file.size);
                        o.write_shift(4, 0);
                    }
                    for (i3 = 1; i3 < cfb.FileIndex.length; ++i3) {
                        file = cfb.FileIndex[i3];
                        if (file.size >= 4096) {
                            o.l = (file.start + 1) << 9;
                            if (has_buf && Buffer.isBuffer(file.content)) {
                                file.content.copy(o, o.l, 0, file.size);
                                o.l += (file.size + 511) & -512;
                            } else {
                                for (j = 0; j < file.size; ++j) o.write_shift(1, file.content[j]);
                                for (; j & 511; ++j) o.write_shift(1, 0);
                            }
                        }
                    }
                    for (i3 = 1; i3 < cfb.FileIndex.length; ++i3) {
                        file = cfb.FileIndex[i3];
                        if (file.size > 0 && file.size < 4096) {
                            if (has_buf && Buffer.isBuffer(file.content)) {
                                file.content.copy(o, o.l, 0, file.size);
                                o.l += (file.size + 63) & -64;
                            } else {
                                for (j = 0; j < file.size; ++j) o.write_shift(1, file.content[j]);
                                for (; j & 63; ++j) o.write_shift(1, 0);
                            }
                        }
                    }
                    if (has_buf) {
                        o.l = o.length;
                    } else {
                        while (o.l < o.length) o.write_shift(1, 0);
                    }
                    return o;
                }
                function find4(cfb, path4) {
                    var UCFullPaths = cfb.FullPaths.map(function (x2) {
                        return x2.toUpperCase();
                    });
                    var UCPaths = UCFullPaths.map(function (x2) {
                        var y = x2.split('/');
                        return y[y.length - (x2.slice(-1) == '/' ? 2 : 1)];
                    });
                    var k = false;
                    if (path4.charCodeAt(0) === 47) {
                        k = true;
                        path4 = UCFullPaths[0].slice(0, -1) + path4;
                    } else k = path4.indexOf('/') !== -1;
                    var UCPath = path4.toUpperCase();
                    var w = k === true ? UCFullPaths.indexOf(UCPath) : UCPaths.indexOf(UCPath);
                    if (w !== -1) return cfb.FileIndex[w];
                    var m2 = !UCPath.match(chr1);
                    UCPath = UCPath.replace(chr0, '');
                    if (m2) UCPath = UCPath.replace(chr1, '!');
                    for (w = 0; w < UCFullPaths.length; ++w) {
                        if (
                            (m2 ? UCFullPaths[w].replace(chr1, '!') : UCFullPaths[w]).replace(
                                chr0,
                                '',
                            ) == UCPath
                        )
                            return cfb.FileIndex[w];
                        if (
                            (m2 ? UCPaths[w].replace(chr1, '!') : UCPaths[w]).replace(chr0, '') ==
                            UCPath
                        )
                            return cfb.FileIndex[w];
                    }
                    return null;
                }
                var MSSZ = 64;
                var ENDOFCHAIN = -2;
                var HEADER_SIGNATURE = 'd0cf11e0a1b11ae1';
                var HEADER_SIG = [208, 207, 17, 224, 161, 177, 26, 225];
                var HEADER_CLSID = '00000000000000000000000000000000';
                var consts = {
                    /* 2.1 Compund File Sector Numbers and Types */
                    MAXREGSECT: -6,
                    DIFSECT: -4,
                    FATSECT: -3,
                    ENDOFCHAIN,
                    FREESECT: -1,
                    /* 2.2 Compound File Header */
                    HEADER_SIGNATURE,
                    HEADER_MINOR_VERSION: '3e00',
                    MAXREGSID: -6,
                    NOSTREAM: -1,
                    HEADER_CLSID,
                    /* 2.6.1 Compound File Directory Entry */
                    EntryTypes: ['unknown', 'storage', 'stream', 'lockbytes', 'property', 'root'],
                };
                function write_file(cfb, filename2, options2) {
                    get_fs();
                    var o = _write(cfb, options2);
                    fs3.writeFileSync(filename2, o);
                }
                function a2s2(o) {
                    var out = new Array(o.length);
                    for (var i3 = 0; i3 < o.length; ++i3) out[i3] = String.fromCharCode(o[i3]);
                    return out.join('');
                }
                function write(cfb, options2) {
                    var o = _write(cfb, options2);
                    switch ((options2 && options2.type) || 'buffer') {
                        case 'file':
                            get_fs();
                            fs3.writeFileSync(options2.filename, o);
                            return o;
                        case 'binary':
                            return typeof o == 'string' ? o : a2s2(o);
                        case 'base64':
                            return Base64_encode(typeof o == 'string' ? o : a2s2(o));
                        case 'buffer':
                            if (has_buf) return Buffer.isBuffer(o) ? o : Buffer_from(o);
                        case 'array':
                            return typeof o == 'string' ? s2a(o) : o;
                    }
                    return o;
                }
                var _zlib;
                function use_zlib(zlib2) {
                    try {
                        var InflateRaw = zlib2.InflateRaw;
                        var InflRaw = new InflateRaw();
                        InflRaw._processChunk(new Uint8Array([3, 0]), InflRaw._finishFlushFlag);
                        if (InflRaw.bytesRead) _zlib = zlib2;
                        else throw new Error('zlib does not expose bytesRead');
                    } catch (e2) {
                        console.error('cannot use native zlib: ' + (e2.message || e2));
                    }
                }
                function _inflateRawSync(payload, usz) {
                    if (!_zlib) return _inflate(payload, usz);
                    var InflateRaw = _zlib.InflateRaw;
                    var InflRaw = new InflateRaw();
                    var out = InflRaw._processChunk(
                        payload.slice(payload.l),
                        InflRaw._finishFlushFlag,
                    );
                    payload.l += InflRaw.bytesRead;
                    return out;
                }
                function _deflateRawSync(payload) {
                    return _zlib ? _zlib.deflateRawSync(payload) : _deflate(payload);
                }
                var CLEN_ORDER = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
                var LEN_LN = [
                    3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83,
                    99, 115, 131, 163, 195, 227, 258,
                ];
                var DST_LN = [
                    1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769,
                    1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577,
                ];
                function bit_swap_8(n) {
                    var t2 = (((n << 1) | (n << 11)) & 139536) | (((n << 5) | (n << 15)) & 558144);
                    return ((t2 >> 16) | (t2 >> 8) | t2) & 255;
                }
                var use_typed_arrays = typeof Uint8Array !== 'undefined';
                var bitswap8 = use_typed_arrays ? new Uint8Array(1 << 8) : [];
                for (var q = 0; q < 1 << 8; ++q) bitswap8[q] = bit_swap_8(q);
                function bit_swap_n(n, b) {
                    var rev = bitswap8[n & 255];
                    if (b <= 8) return rev >>> (8 - b);
                    rev = (rev << 8) | bitswap8[(n >> 8) & 255];
                    if (b <= 16) return rev >>> (16 - b);
                    rev = (rev << 8) | bitswap8[(n >> 16) & 255];
                    return rev >>> (24 - b);
                }
                function read_bits_2(buf, bl) {
                    var w = bl & 7,
                        h2 = bl >>> 3;
                    return ((buf[h2] | (w <= 6 ? 0 : buf[h2 + 1] << 8)) >>> w) & 3;
                }
                function read_bits_3(buf, bl) {
                    var w = bl & 7,
                        h2 = bl >>> 3;
                    return ((buf[h2] | (w <= 5 ? 0 : buf[h2 + 1] << 8)) >>> w) & 7;
                }
                function read_bits_4(buf, bl) {
                    var w = bl & 7,
                        h2 = bl >>> 3;
                    return ((buf[h2] | (w <= 4 ? 0 : buf[h2 + 1] << 8)) >>> w) & 15;
                }
                function read_bits_5(buf, bl) {
                    var w = bl & 7,
                        h2 = bl >>> 3;
                    return ((buf[h2] | (w <= 3 ? 0 : buf[h2 + 1] << 8)) >>> w) & 31;
                }
                function read_bits_7(buf, bl) {
                    var w = bl & 7,
                        h2 = bl >>> 3;
                    return ((buf[h2] | (w <= 1 ? 0 : buf[h2 + 1] << 8)) >>> w) & 127;
                }
                function read_bits_n(buf, bl, n) {
                    var w = bl & 7,
                        h2 = bl >>> 3,
                        f3 = (1 << n) - 1;
                    var v = buf[h2] >>> w;
                    if (n < 8 - w) return v & f3;
                    v |= buf[h2 + 1] << (8 - w);
                    if (n < 16 - w) return v & f3;
                    v |= buf[h2 + 2] << (16 - w);
                    if (n < 24 - w) return v & f3;
                    v |= buf[h2 + 3] << (24 - w);
                    return v & f3;
                }
                function write_bits_3(buf, bl, v) {
                    var w = bl & 7,
                        h2 = bl >>> 3;
                    if (w <= 5) buf[h2] |= (v & 7) << w;
                    else {
                        buf[h2] |= (v << w) & 255;
                        buf[h2 + 1] = (v & 7) >> (8 - w);
                    }
                    return bl + 3;
                }
                function write_bits_1(buf, bl, v) {
                    var w = bl & 7,
                        h2 = bl >>> 3;
                    v = (v & 1) << w;
                    buf[h2] |= v;
                    return bl + 1;
                }
                function write_bits_8(buf, bl, v) {
                    var w = bl & 7,
                        h2 = bl >>> 3;
                    v <<= w;
                    buf[h2] |= v & 255;
                    v >>>= 8;
                    buf[h2 + 1] = v;
                    return bl + 8;
                }
                function write_bits_16(buf, bl, v) {
                    var w = bl & 7,
                        h2 = bl >>> 3;
                    v <<= w;
                    buf[h2] |= v & 255;
                    v >>>= 8;
                    buf[h2 + 1] = v & 255;
                    buf[h2 + 2] = v >>> 8;
                    return bl + 16;
                }
                function realloc(b, sz) {
                    var L = b.length,
                        M = 2 * L > sz ? 2 * L : sz + 5,
                        i3 = 0;
                    if (L >= sz) return b;
                    if (has_buf) {
                        var o = new_unsafe_buf(M);
                        if (b.copy) b.copy(o);
                        else for (; i3 < b.length; ++i3) o[i3] = b[i3];
                        return o;
                    } else if (use_typed_arrays) {
                        var a = new Uint8Array(M);
                        if (a.set) a.set(b);
                        else for (; i3 < L; ++i3) a[i3] = b[i3];
                        return a;
                    }
                    b.length = M;
                    return b;
                }
                function zero_fill_array(n) {
                    var o = new Array(n);
                    for (var i3 = 0; i3 < n; ++i3) o[i3] = 0;
                    return o;
                }
                function build_tree(clens, cmap, MAX) {
                    var maxlen = 1,
                        w = 0,
                        i3 = 0,
                        j = 0,
                        ccode = 0,
                        L = clens.length;
                    var bl_count = use_typed_arrays ? new Uint16Array(32) : zero_fill_array(32);
                    for (i3 = 0; i3 < 32; ++i3) bl_count[i3] = 0;
                    for (i3 = L; i3 < MAX; ++i3) clens[i3] = 0;
                    L = clens.length;
                    var ctree = use_typed_arrays ? new Uint16Array(L) : zero_fill_array(L);
                    for (i3 = 0; i3 < L; ++i3) {
                        bl_count[(w = clens[i3])]++;
                        if (maxlen < w) maxlen = w;
                        ctree[i3] = 0;
                    }
                    bl_count[0] = 0;
                    for (i3 = 1; i3 <= maxlen; ++i3)
                        bl_count[i3 + 16] = ccode = (ccode + bl_count[i3 - 1]) << 1;
                    for (i3 = 0; i3 < L; ++i3) {
                        ccode = clens[i3];
                        if (ccode != 0) ctree[i3] = bl_count[ccode + 16]++;
                    }
                    var cleni = 0;
                    for (i3 = 0; i3 < L; ++i3) {
                        cleni = clens[i3];
                        if (cleni != 0) {
                            ccode = bit_swap_n(ctree[i3], maxlen) >> (maxlen - cleni);
                            for (j = (1 << (maxlen + 4 - cleni)) - 1; j >= 0; --j)
                                cmap[ccode | (j << cleni)] = (cleni & 15) | (i3 << 4);
                        }
                    }
                    return maxlen;
                }
                var fix_lmap = use_typed_arrays ? new Uint16Array(512) : zero_fill_array(512);
                var fix_dmap = use_typed_arrays ? new Uint16Array(32) : zero_fill_array(32);
                if (!use_typed_arrays) {
                    for (var i2 = 0; i2 < 512; ++i2) fix_lmap[i2] = 0;
                    for (i2 = 0; i2 < 32; ++i2) fix_dmap[i2] = 0;
                }
                (function () {
                    var dlens = [];
                    var i3 = 0;
                    for (; i3 < 32; i3++) dlens.push(5);
                    build_tree(dlens, fix_dmap, 32);
                    var clens = [];
                    i3 = 0;
                    for (; i3 <= 143; i3++) clens.push(8);
                    for (; i3 <= 255; i3++) clens.push(9);
                    for (; i3 <= 279; i3++) clens.push(7);
                    for (; i3 <= 287; i3++) clens.push(8);
                    build_tree(clens, fix_lmap, 288);
                })();
                var _deflateRaw = (function _deflateRawIIFE() {
                    var DST_LN_RE = use_typed_arrays ? new Uint8Array(32768) : [];
                    var j = 0,
                        k = 0;
                    for (; j < DST_LN.length - 1; ++j) {
                        for (; k < DST_LN[j + 1]; ++k) DST_LN_RE[k] = j;
                    }
                    for (; k < 32768; ++k) DST_LN_RE[k] = 29;
                    var LEN_LN_RE = use_typed_arrays ? new Uint8Array(259) : [];
                    for (j = 0, k = 0; j < LEN_LN.length - 1; ++j) {
                        for (; k < LEN_LN[j + 1]; ++k) LEN_LN_RE[k] = j;
                    }
                    function write_stored(data2, out) {
                        var boff = 0;
                        while (boff < data2.length) {
                            var L = Math.min(65535, data2.length - boff);
                            var h2 = boff + L == data2.length;
                            out.write_shift(1, +h2);
                            out.write_shift(2, L);
                            out.write_shift(2, ~L & 65535);
                            while (L-- > 0) out[out.l++] = data2[boff++];
                        }
                        return out.l;
                    }
                    function write_huff_fixed(data2, out) {
                        var bl = 0;
                        var boff = 0;
                        var addrs = use_typed_arrays ? new Uint16Array(32768) : [];
                        while (boff < data2.length) {
                            var L =
                                /* data.length - boff; */
                                Math.min(65535, data2.length - boff);
                            if (L < 10) {
                                bl = write_bits_3(out, bl, +!!(boff + L == data2.length));
                                if (bl & 7) bl += 8 - (bl & 7);
                                out.l = (bl / 8) | 0;
                                out.write_shift(2, L);
                                out.write_shift(2, ~L & 65535);
                                while (L-- > 0) out[out.l++] = data2[boff++];
                                bl = out.l * 8;
                                continue;
                            }
                            bl = write_bits_3(out, bl, +!!(boff + L == data2.length) + 2);
                            var hash = 0;
                            while (L-- > 0) {
                                var d = data2[boff];
                                hash = ((hash << 5) ^ d) & 32767;
                                var match = -1,
                                    mlen = 0;
                                if ((match = addrs[hash])) {
                                    match |= boff & ~32767;
                                    if (match > boff) match -= 32768;
                                    if (match < boff)
                                        while (
                                            data2[match + mlen] == data2[boff + mlen] &&
                                            mlen < 250
                                        )
                                            ++mlen;
                                }
                                if (mlen > 2) {
                                    d = LEN_LN_RE[mlen];
                                    if (d <= 22)
                                        bl = write_bits_8(out, bl, bitswap8[d + 1] >> 1) - 1;
                                    else {
                                        write_bits_8(out, bl, 3);
                                        bl += 5;
                                        write_bits_8(out, bl, bitswap8[d - 23] >> 5);
                                        bl += 3;
                                    }
                                    var len_eb = d < 8 ? 0 : (d - 4) >> 2;
                                    if (len_eb > 0) {
                                        write_bits_16(out, bl, mlen - LEN_LN[d]);
                                        bl += len_eb;
                                    }
                                    d = DST_LN_RE[boff - match];
                                    bl = write_bits_8(out, bl, bitswap8[d] >> 3);
                                    bl -= 3;
                                    var dst_eb = d < 4 ? 0 : (d - 2) >> 1;
                                    if (dst_eb > 0) {
                                        write_bits_16(out, bl, boff - match - DST_LN[d]);
                                        bl += dst_eb;
                                    }
                                    for (var q2 = 0; q2 < mlen; ++q2) {
                                        addrs[hash] = boff & 32767;
                                        hash = ((hash << 5) ^ data2[boff]) & 32767;
                                        ++boff;
                                    }
                                    L -= mlen - 1;
                                } else {
                                    if (d <= 143) d = d + 48;
                                    else bl = write_bits_1(out, bl, 1);
                                    bl = write_bits_8(out, bl, bitswap8[d]);
                                    addrs[hash] = boff & 32767;
                                    ++boff;
                                }
                            }
                            bl = write_bits_8(out, bl, 0) - 1;
                        }
                        out.l = ((bl + 7) / 8) | 0;
                        return out.l;
                    }
                    return function _deflateRaw2(data2, out) {
                        if (data2.length < 8) return write_stored(data2, out);
                        return write_huff_fixed(data2, out);
                    };
                })();
                function _deflate(data2) {
                    var buf = new_buf(50 + Math.floor(data2.length * 1.1));
                    var off = _deflateRaw(data2, buf);
                    return buf.slice(0, off);
                }
                var dyn_lmap = use_typed_arrays ? new Uint16Array(32768) : zero_fill_array(32768);
                var dyn_dmap = use_typed_arrays ? new Uint16Array(32768) : zero_fill_array(32768);
                var dyn_cmap = use_typed_arrays ? new Uint16Array(128) : zero_fill_array(128);
                var dyn_len_1 = 1,
                    dyn_len_2 = 1;
                function dyn(data2, boff) {
                    var _HLIT = read_bits_5(data2, boff) + 257;
                    boff += 5;
                    var _HDIST = read_bits_5(data2, boff) + 1;
                    boff += 5;
                    var _HCLEN = read_bits_4(data2, boff) + 4;
                    boff += 4;
                    var w = 0;
                    var clens = use_typed_arrays ? new Uint8Array(19) : zero_fill_array(19);
                    var ctree = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
                    var maxlen = 1;
                    var bl_count = use_typed_arrays ? new Uint8Array(8) : zero_fill_array(8);
                    var next_code = use_typed_arrays ? new Uint8Array(8) : zero_fill_array(8);
                    var L = clens.length;
                    for (var i3 = 0; i3 < _HCLEN; ++i3) {
                        clens[CLEN_ORDER[i3]] = w = read_bits_3(data2, boff);
                        if (maxlen < w) maxlen = w;
                        bl_count[w]++;
                        boff += 3;
                    }
                    var ccode = 0;
                    bl_count[0] = 0;
                    for (i3 = 1; i3 <= maxlen; ++i3)
                        next_code[i3] = ccode = (ccode + bl_count[i3 - 1]) << 1;
                    for (i3 = 0; i3 < L; ++i3)
                        if ((ccode = clens[i3]) != 0) ctree[i3] = next_code[ccode]++;
                    var cleni = 0;
                    for (i3 = 0; i3 < L; ++i3) {
                        cleni = clens[i3];
                        if (cleni != 0) {
                            ccode = bitswap8[ctree[i3]] >> (8 - cleni);
                            for (var j = (1 << (7 - cleni)) - 1; j >= 0; --j)
                                dyn_cmap[ccode | (j << cleni)] = (cleni & 7) | (i3 << 3);
                        }
                    }
                    var hcodes = [];
                    maxlen = 1;
                    for (; hcodes.length < _HLIT + _HDIST; ) {
                        ccode = dyn_cmap[read_bits_7(data2, boff)];
                        boff += ccode & 7;
                        switch ((ccode >>>= 3)) {
                            case 16:
                                w = 3 + read_bits_2(data2, boff);
                                boff += 2;
                                ccode = hcodes[hcodes.length - 1];
                                while (w-- > 0) hcodes.push(ccode);
                                break;
                            case 17:
                                w = 3 + read_bits_3(data2, boff);
                                boff += 3;
                                while (w-- > 0) hcodes.push(0);
                                break;
                            case 18:
                                w = 11 + read_bits_7(data2, boff);
                                boff += 7;
                                while (w-- > 0) hcodes.push(0);
                                break;
                            default:
                                hcodes.push(ccode);
                                if (maxlen < ccode) maxlen = ccode;
                                break;
                        }
                    }
                    var h1 = hcodes.slice(0, _HLIT),
                        h2 = hcodes.slice(_HLIT);
                    for (i3 = _HLIT; i3 < 286; ++i3) h1[i3] = 0;
                    for (i3 = _HDIST; i3 < 30; ++i3) h2[i3] = 0;
                    dyn_len_1 = build_tree(h1, dyn_lmap, 286);
                    dyn_len_2 = build_tree(h2, dyn_dmap, 30);
                    return boff;
                }
                function inflate(data2, usz) {
                    if (data2[0] == 3 && !(data2[1] & 3)) {
                        return [new_raw_buf(usz), 2];
                    }
                    var boff = 0;
                    var header = 0;
                    var outbuf = new_unsafe_buf(usz ? usz : 1 << 18);
                    var woff = 0;
                    var OL = outbuf.length >>> 0;
                    var max_len_1 = 0,
                        max_len_2 = 0;
                    while ((header & 1) == 0) {
                        header = read_bits_3(data2, boff);
                        boff += 3;
                        if (header >>> 1 == 0) {
                            if (boff & 7) boff += 8 - (boff & 7);
                            var sz = data2[boff >>> 3] | (data2[(boff >>> 3) + 1] << 8);
                            boff += 32;
                            if (sz > 0) {
                                if (!usz && OL < woff + sz) {
                                    outbuf = realloc(outbuf, woff + sz);
                                    OL = outbuf.length;
                                }
                                while (sz-- > 0) {
                                    outbuf[woff++] = data2[boff >>> 3];
                                    boff += 8;
                                }
                            }
                            continue;
                        } else if (header >> 1 == 1) {
                            max_len_1 = 9;
                            max_len_2 = 5;
                        } else {
                            boff = dyn(data2, boff);
                            max_len_1 = dyn_len_1;
                            max_len_2 = dyn_len_2;
                        }
                        for (;;) {
                            if (!usz && OL < woff + 32767) {
                                outbuf = realloc(outbuf, woff + 32767);
                                OL = outbuf.length;
                            }
                            var bits = read_bits_n(data2, boff, max_len_1);
                            var code = header >>> 1 == 1 ? fix_lmap[bits] : dyn_lmap[bits];
                            boff += code & 15;
                            code >>>= 4;
                            if (((code >>> 8) & 255) === 0) outbuf[woff++] = code;
                            else if (code == 256) break;
                            else {
                                code -= 257;
                                var len_eb = code < 8 ? 0 : (code - 4) >> 2;
                                if (len_eb > 5) len_eb = 0;
                                var tgt = woff + LEN_LN[code];
                                if (len_eb > 0) {
                                    tgt += read_bits_n(data2, boff, len_eb);
                                    boff += len_eb;
                                }
                                bits = read_bits_n(data2, boff, max_len_2);
                                code = header >>> 1 == 1 ? fix_dmap[bits] : dyn_dmap[bits];
                                boff += code & 15;
                                code >>>= 4;
                                var dst_eb = code < 4 ? 0 : (code - 2) >> 1;
                                var dst = DST_LN[code];
                                if (dst_eb > 0) {
                                    dst += read_bits_n(data2, boff, dst_eb);
                                    boff += dst_eb;
                                }
                                if (!usz && OL < tgt) {
                                    outbuf = realloc(outbuf, tgt + 100);
                                    OL = outbuf.length;
                                }
                                while (woff < tgt) {
                                    outbuf[woff] = outbuf[woff - dst];
                                    ++woff;
                                }
                            }
                        }
                    }
                    if (usz) return [outbuf, (boff + 7) >>> 3];
                    return [outbuf.slice(0, woff), (boff + 7) >>> 3];
                }
                function _inflate(payload, usz) {
                    var data2 = payload.slice(payload.l || 0);
                    var out = inflate(data2, usz);
                    payload.l += out[1];
                    return out[0];
                }
                function warn_or_throw(wrn, msg) {
                    if (wrn) {
                        if (typeof console !== 'undefined') console.error(msg);
                    } else throw new Error(msg);
                }
                function parse_zip2(file, options2) {
                    var blob = file;
                    prep_blob(blob, 0);
                    var FileIndex = [],
                        FullPaths = [];
                    var o = {
                        FileIndex,
                        FullPaths,
                    };
                    init_cfb(o, { root: options2.root });
                    var i3 = blob.length - 4;
                    while (
                        (blob[i3] != 80 ||
                            blob[i3 + 1] != 75 ||
                            blob[i3 + 2] != 5 ||
                            blob[i3 + 3] != 6) &&
                        i3 >= 0
                    )
                        --i3;
                    blob.l = i3 + 4;
                    blob.l += 4;
                    var fcnt = blob.read_shift(2);
                    blob.l += 6;
                    var start_cd = blob.read_shift(4);
                    blob.l = start_cd;
                    for (i3 = 0; i3 < fcnt; ++i3) {
                        blob.l += 20;
                        var csz = blob.read_shift(4);
                        var usz = blob.read_shift(4);
                        var namelen = blob.read_shift(2);
                        var efsz = blob.read_shift(2);
                        var fcsz = blob.read_shift(2);
                        blob.l += 8;
                        var offset = blob.read_shift(4);
                        var EF = parse_extra_field(
                            blob.slice(blob.l + namelen, blob.l + namelen + efsz),
                        );
                        blob.l += namelen + efsz + fcsz;
                        var L = blob.l;
                        blob.l = offset + 4;
                        parse_local_file(blob, csz, usz, o, EF);
                        blob.l = L;
                    }
                    return o;
                }
                function parse_local_file(blob, csz, usz, o, EF) {
                    blob.l += 2;
                    var flags = blob.read_shift(2);
                    var meth = blob.read_shift(2);
                    var date = parse_dos_date(blob);
                    if (flags & 8257) throw new Error('Unsupported ZIP encryption');
                    var crc32 = blob.read_shift(4);
                    var _csz = blob.read_shift(4);
                    var _usz = blob.read_shift(4);
                    var namelen = blob.read_shift(2);
                    var efsz = blob.read_shift(2);
                    var name = '';
                    for (var i3 = 0; i3 < namelen; ++i3)
                        name += String.fromCharCode(blob[blob.l++]);
                    if (efsz) {
                        var ef = parse_extra_field(blob.slice(blob.l, blob.l + efsz));
                        if ((ef[21589] || {}).mt) date = ef[21589].mt;
                        if (((EF || {})[21589] || {}).mt) date = EF[21589].mt;
                    }
                    blob.l += efsz;
                    var data2 = blob.slice(blob.l, blob.l + _csz);
                    switch (meth) {
                        case 8:
                            data2 = _inflateRawSync(blob, _usz);
                            break;
                        case 0:
                            break;
                        default:
                            throw new Error('Unsupported ZIP Compression method ' + meth);
                    }
                    var wrn = false;
                    if (flags & 8) {
                        crc32 = blob.read_shift(4);
                        if (crc32 == 134695760) {
                            crc32 = blob.read_shift(4);
                            wrn = true;
                        }
                        _csz = blob.read_shift(4);
                        _usz = blob.read_shift(4);
                    }
                    if (_csz != csz)
                        warn_or_throw(wrn, 'Bad compressed size: ' + csz + ' != ' + _csz);
                    if (_usz != usz)
                        warn_or_throw(wrn, 'Bad uncompressed size: ' + usz + ' != ' + _usz);
                    cfb_add(o, name, data2, { unsafe: true, mt: date });
                }
                function write_zip2(cfb, options2) {
                    var _opts = options2 || {};
                    var out = [],
                        cdirs = [];
                    var o = new_buf(1);
                    var method = _opts.compression ? 8 : 0,
                        flags = 0;
                    var desc = false;
                    if (desc) flags |= 8;
                    var i3 = 0,
                        j = 0;
                    var start_cd = 0,
                        fcnt = 0;
                    var root3 = cfb.FullPaths[0],
                        fp = root3,
                        fi = cfb.FileIndex[0];
                    var crcs = [];
                    var sz_cd = 0;
                    for (i3 = 1; i3 < cfb.FullPaths.length; ++i3) {
                        fp = cfb.FullPaths[i3].slice(root3.length);
                        fi = cfb.FileIndex[i3];
                        if (!fi.size || !fi.content || fp == 'Sh33tJ5') continue;
                        var start = start_cd;
                        var namebuf = new_buf(fp.length);
                        for (j = 0; j < fp.length; ++j)
                            namebuf.write_shift(1, fp.charCodeAt(j) & 127);
                        namebuf = namebuf.slice(0, namebuf.l);
                        crcs[fcnt] = CRC32.buf(fi.content, 0);
                        var outbuf = fi.content;
                        if (method == 8) outbuf = _deflateRawSync(outbuf);
                        o = new_buf(30);
                        o.write_shift(4, 67324752);
                        o.write_shift(2, 20);
                        o.write_shift(2, flags);
                        o.write_shift(2, method);
                        if (fi.mt) write_dos_date(o, fi.mt);
                        else o.write_shift(4, 0);
                        o.write_shift(-4, flags & 8 ? 0 : crcs[fcnt]);
                        o.write_shift(4, flags & 8 ? 0 : outbuf.length);
                        o.write_shift(4, flags & 8 ? 0 : fi.content.length);
                        o.write_shift(2, namebuf.length);
                        o.write_shift(2, 0);
                        start_cd += o.length;
                        out.push(o);
                        start_cd += namebuf.length;
                        out.push(namebuf);
                        start_cd += outbuf.length;
                        out.push(outbuf);
                        if (flags & 8) {
                            o = new_buf(12);
                            o.write_shift(-4, crcs[fcnt]);
                            o.write_shift(4, outbuf.length);
                            o.write_shift(4, fi.content.length);
                            start_cd += o.l;
                            out.push(o);
                        }
                        o = new_buf(46);
                        o.write_shift(4, 33639248);
                        o.write_shift(2, 0);
                        o.write_shift(2, 20);
                        o.write_shift(2, flags);
                        o.write_shift(2, method);
                        o.write_shift(4, 0);
                        o.write_shift(-4, crcs[fcnt]);
                        o.write_shift(4, outbuf.length);
                        o.write_shift(4, fi.content.length);
                        o.write_shift(2, namebuf.length);
                        o.write_shift(2, 0);
                        o.write_shift(2, 0);
                        o.write_shift(2, 0);
                        o.write_shift(2, 0);
                        o.write_shift(4, 0);
                        o.write_shift(4, start);
                        sz_cd += o.l;
                        cdirs.push(o);
                        sz_cd += namebuf.length;
                        cdirs.push(namebuf);
                        ++fcnt;
                    }
                    o = new_buf(22);
                    o.write_shift(4, 101010256);
                    o.write_shift(2, 0);
                    o.write_shift(2, 0);
                    o.write_shift(2, fcnt);
                    o.write_shift(2, fcnt);
                    o.write_shift(4, sz_cd);
                    o.write_shift(4, start_cd);
                    o.write_shift(2, 0);
                    return bconcat([bconcat(out), bconcat(cdirs), o]);
                }
                var ContentTypeMap = {
                    htm: 'text/html',
                    xml: 'text/xml',
                    gif: 'image/gif',
                    jpg: 'image/jpeg',
                    png: 'image/png',
                    mso: 'application/x-mso',
                    thmx: 'application/vnd.ms-officetheme',
                    sh33tj5: 'application/octet-stream',
                };
                function get_content_type(fi, fp) {
                    if (fi.ctype) return fi.ctype;
                    var ext = fi.name || '',
                        m2 = ext.match(/\.([^\.]+)$/);
                    if (m2 && ContentTypeMap[m2[1]]) return ContentTypeMap[m2[1]];
                    if (fp) {
                        m2 = (ext = fp).match(/[\.\\]([^\.\\])+$/);
                        if (m2 && ContentTypeMap[m2[1]]) return ContentTypeMap[m2[1]];
                    }
                    return 'application/octet-stream';
                }
                function write_base64_76(bstr) {
                    var data2 = Base64_encode(bstr);
                    var o = [];
                    for (var i3 = 0; i3 < data2.length; i3 += 76) o.push(data2.slice(i3, i3 + 76));
                    return o.join('\r\n') + '\r\n';
                }
                function write_quoted_printable(text3) {
                    var encoded = text3.replace(
                        /[\x00-\x08\x0B\x0C\x0E-\x1F\x7E-\xFF=]/g,
                        function (c) {
                            var w = c.charCodeAt(0).toString(16).toUpperCase();
                            return '=' + (w.length == 1 ? '0' + w : w);
                        },
                    );
                    encoded = encoded.replace(/ $/gm, '=20').replace(/\t$/gm, '=09');
                    if (encoded.charAt(0) == '\n') encoded = '=0D' + encoded.slice(1);
                    encoded = encoded
                        .replace(/\r(?!\n)/gm, '=0D')
                        .replace(/\n\n/gm, '\n=0A')
                        .replace(/([^\r\n])\n/gm, '$1=0A');
                    var o = [],
                        split = encoded.split('\r\n');
                    for (var si = 0; si < split.length; ++si) {
                        var str = split[si];
                        if (str.length == 0) {
                            o.push('');
                            continue;
                        }
                        for (var i3 = 0; i3 < str.length; ) {
                            var end2 = 76;
                            var tmp = str.slice(i3, i3 + end2);
                            if (tmp.charAt(end2 - 1) == '=') end2--;
                            else if (tmp.charAt(end2 - 2) == '=') end2 -= 2;
                            else if (tmp.charAt(end2 - 3) == '=') end2 -= 3;
                            tmp = str.slice(i3, i3 + end2);
                            i3 += end2;
                            if (i3 < str.length) tmp += '=';
                            o.push(tmp);
                        }
                    }
                    return o.join('\r\n');
                }
                function parse_quoted_printable(data2) {
                    var o = [];
                    for (var di = 0; di < data2.length; ++di) {
                        var line = data2[di];
                        while (di <= data2.length && line.charAt(line.length - 1) == '=')
                            line = line.slice(0, line.length - 1) + data2[++di];
                        o.push(line);
                    }
                    for (var oi = 0; oi < o.length; ++oi)
                        o[oi] = o[oi].replace(/[=][0-9A-Fa-f]{2}/g, function ($$) {
                            return String.fromCharCode(parseInt($$.slice(1), 16));
                        });
                    return s2a(o.join('\r\n'));
                }
                function parse_mime(cfb, data2, root3) {
                    var fname = '',
                        cte = '',
                        ctype = '',
                        fdata;
                    var di = 0;
                    for (; di < 10; ++di) {
                        var line = data2[di];
                        if (!line || line.match(/^\s*$/)) break;
                        var m2 = line.match(/^(.*?):\s*([^\s].*)$/);
                        if (m2)
                            switch (m2[1].toLowerCase()) {
                                case 'content-location':
                                    fname = m2[2].trim();
                                    break;
                                case 'content-type':
                                    ctype = m2[2].trim();
                                    break;
                                case 'content-transfer-encoding':
                                    cte = m2[2].trim();
                                    break;
                            }
                    }
                    ++di;
                    switch (cte.toLowerCase()) {
                        case 'base64':
                            fdata = s2a(Base64_decode(data2.slice(di).join('')));
                            break;
                        case 'quoted-printable':
                            fdata = parse_quoted_printable(data2.slice(di));
                            break;
                        default:
                            throw new Error('Unsupported Content-Transfer-Encoding ' + cte);
                    }
                    var file = cfb_add(cfb, fname.slice(root3.length), fdata, { unsafe: true });
                    if (ctype) file.ctype = ctype;
                }
                function parse_mad(file, options2) {
                    if (a2s2(file.slice(0, 13)).toLowerCase() != 'mime-version:')
                        throw new Error('Unsupported MAD header');
                    var root3 = (options2 && options2.root) || '';
                    var data2 = (
                        has_buf && Buffer.isBuffer(file) ? file.toString('binary') : a2s2(file)
                    ).split('\r\n');
                    var di = 0,
                        row = '';
                    for (di = 0; di < data2.length; ++di) {
                        row = data2[di];
                        if (!/^Content-Location:/i.test(row)) continue;
                        row = row.slice(row.indexOf('file'));
                        if (!root3) root3 = row.slice(0, row.lastIndexOf('/') + 1);
                        if (row.slice(0, root3.length) == root3) continue;
                        while (root3.length > 0) {
                            root3 = root3.slice(0, root3.length - 1);
                            root3 = root3.slice(0, root3.lastIndexOf('/') + 1);
                            if (row.slice(0, root3.length) == root3) break;
                        }
                    }
                    var mboundary = (data2[1] || '').match(/boundary="(.*?)"/);
                    if (!mboundary) throw new Error('MAD cannot find boundary');
                    var boundary = '--' + (mboundary[1] || '');
                    var FileIndex = [],
                        FullPaths = [];
                    var o = {
                        FileIndex,
                        FullPaths,
                    };
                    init_cfb(o);
                    var start_di,
                        fcnt = 0;
                    for (di = 0; di < data2.length; ++di) {
                        var line = data2[di];
                        if (line !== boundary && line !== boundary + '--') continue;
                        if (fcnt++) parse_mime(o, data2.slice(start_di, di), root3);
                        start_di = di;
                    }
                    return o;
                }
                function write_mad(cfb, options2) {
                    var opts = options2 || {};
                    var boundary = opts.boundary || 'SheetJS';
                    boundary = '------=' + boundary;
                    var out = [
                        'MIME-Version: 1.0',
                        'Content-Type: multipart/related; boundary="' + boundary.slice(2) + '"',
                        '',
                        '',
                        '',
                    ];
                    var root3 = cfb.FullPaths[0],
                        fp = root3,
                        fi = cfb.FileIndex[0];
                    for (var i3 = 1; i3 < cfb.FullPaths.length; ++i3) {
                        fp = cfb.FullPaths[i3].slice(root3.length);
                        fi = cfb.FileIndex[i3];
                        if (!fi.size || !fi.content || fp == 'Sh33tJ5') continue;
                        fp = fp
                            .replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7E-\xFF]/g, function (c) {
                                return '_x' + c.charCodeAt(0).toString(16) + '_';
                            })
                            .replace(/[\u0080-\uFFFF]/g, function (u) {
                                return '_u' + u.charCodeAt(0).toString(16) + '_';
                            });
                        var ca = fi.content;
                        var cstr =
                            has_buf && Buffer.isBuffer(ca) ? ca.toString('binary') : a2s2(ca);
                        var dispcnt = 0,
                            L = Math.min(1024, cstr.length),
                            cc = 0;
                        for (var csl = 0; csl <= L; ++csl)
                            if ((cc = cstr.charCodeAt(csl)) >= 32 && cc < 128) ++dispcnt;
                        var qp = dispcnt >= (L * 4) / 5;
                        out.push(boundary);
                        out.push('Content-Location: ' + (opts.root || 'file:///C:/SheetJS/') + fp);
                        out.push(
                            'Content-Transfer-Encoding: ' + (qp ? 'quoted-printable' : 'base64'),
                        );
                        out.push('Content-Type: ' + get_content_type(fi, fp));
                        out.push('');
                        out.push(qp ? write_quoted_printable(cstr) : write_base64_76(cstr));
                    }
                    out.push(boundary + '--\r\n');
                    return out.join('\r\n');
                }
                function cfb_new(opts) {
                    var o = {};
                    init_cfb(o, opts);
                    return o;
                }
                function cfb_add(cfb, name, content, opts) {
                    var unsafe = opts && opts.unsafe;
                    if (!unsafe) init_cfb(cfb);
                    var file = !unsafe && CFB.find(cfb, name);
                    if (!file) {
                        var fpath = cfb.FullPaths[0];
                        if (name.slice(0, fpath.length) == fpath) fpath = name;
                        else {
                            if (fpath.slice(-1) != '/') fpath += '/';
                            fpath = (fpath + name).replace('//', '/');
                        }
                        file = { name: filename(name), type: 2 };
                        cfb.FileIndex.push(file);
                        cfb.FullPaths.push(fpath);
                        if (!unsafe) CFB.utils.cfb_gc(cfb);
                    }
                    file.content = content;
                    file.size = content ? content.length : 0;
                    if (opts) {
                        if (opts.CLSID) file.clsid = opts.CLSID;
                        if (opts.mt) file.mt = opts.mt;
                        if (opts.ct) file.ct = opts.ct;
                    }
                    return file;
                }
                function cfb_del(cfb, name) {
                    init_cfb(cfb);
                    var file = CFB.find(cfb, name);
                    if (file) {
                        for (var j = 0; j < cfb.FileIndex.length; ++j)
                            if (cfb.FileIndex[j] == file) {
                                cfb.FileIndex.splice(j, 1);
                                cfb.FullPaths.splice(j, 1);
                                return true;
                            }
                    }
                    return false;
                }
                function cfb_mov(cfb, old_name, new_name) {
                    init_cfb(cfb);
                    var file = CFB.find(cfb, old_name);
                    if (file) {
                        for (var j = 0; j < cfb.FileIndex.length; ++j)
                            if (cfb.FileIndex[j] == file) {
                                cfb.FileIndex[j].name = filename(new_name);
                                cfb.FullPaths[j] = new_name;
                                return true;
                            }
                    }
                    return false;
                }
                function cfb_gc(cfb) {
                    rebuild_cfb(cfb, true);
                }
                exports3.find = find4;
                exports3.read = read;
                exports3.parse = parse8;
                exports3.write = write;
                exports3.writeFile = write_file;
                exports3.utils = {
                    cfb_new,
                    cfb_add,
                    cfb_del,
                    cfb_mov,
                    cfb_gc,
                    ReadShift,
                    CheckField,
                    prep_blob,
                    bconcat,
                    use_zlib,
                    _deflateRaw: _deflate,
                    _inflateRaw: _inflate,
                    consts,
                };
                return exports3;
            })();
            var _fs;
            if (typeof require !== 'undefined')
                try {
                    _fs = require('fs');
                } catch (e2) {}
            function blobify(data2) {
                if (typeof data2 === 'string') return s2ab(data2);
                if (Array.isArray(data2)) return a2u(data2);
                return data2;
            }
            function write_dl(fname, payload, enc) {
                if (typeof _fs !== 'undefined' && _fs.writeFileSync)
                    return enc
                        ? _fs.writeFileSync(fname, payload, enc)
                        : _fs.writeFileSync(fname, payload);
                if (typeof Deno !== 'undefined') {
                    if (enc && typeof payload == 'string')
                        switch (enc) {
                            case 'utf8':
                                payload = new TextEncoder(enc).encode(payload);
                                break;
                            case 'binary':
                                payload = s2ab(payload);
                                break;
                            default:
                                throw new Error('Unsupported encoding ' + enc);
                        }
                    return Deno.writeFileSync(fname, payload);
                }
                var data2 = enc == 'utf8' ? utf8write(payload) : payload;
                if (typeof IE_SaveFile !== 'undefined') return IE_SaveFile(data2, fname);
                if (typeof Blob !== 'undefined') {
                    var blob = new Blob([blobify(data2)], { type: 'application/octet-stream' });
                    if (typeof navigator !== 'undefined' && navigator.msSaveBlob)
                        return navigator.msSaveBlob(blob, fname);
                    if (typeof saveAs !== 'undefined') return saveAs(blob, fname);
                    if (
                        typeof URL !== 'undefined' &&
                        typeof document !== 'undefined' &&
                        document.createElement &&
                        URL.createObjectURL
                    ) {
                        var url = URL.createObjectURL(blob);
                        if (
                            typeof chrome === 'object' &&
                            typeof (chrome.downloads || {}).download == 'function'
                        ) {
                            if (URL.revokeObjectURL && typeof setTimeout !== 'undefined')
                                setTimeout(function () {
                                    URL.revokeObjectURL(url);
                                }, 6e4);
                            return chrome.downloads.download({
                                url,
                                filename: fname,
                                saveAs: true,
                            });
                        }
                        var a = document.createElement('a');
                        if (a.download != null) {
                            a.download = fname;
                            a.href = url;
                            document.body.appendChild(a);
                            a.click();
                            document.body.removeChild(a);
                            if (URL.revokeObjectURL && typeof setTimeout !== 'undefined')
                                setTimeout(function () {
                                    URL.revokeObjectURL(url);
                                }, 6e4);
                            return url;
                        }
                    }
                }
                if (
                    typeof $ !== 'undefined' &&
                    typeof File !== 'undefined' &&
                    typeof Folder !== 'undefined'
                )
                    try {
                        var out = File(fname);
                        out.open('w');
                        out.encoding = 'binary';
                        if (Array.isArray(payload)) payload = a2s(payload);
                        out.write(payload);
                        out.close();
                        return payload;
                    } catch (e2) {
                        if (!e2.message || !e2.message.match(/onstruct/)) throw e2;
                    }
                throw new Error('cannot save file ' + fname);
            }
            function read_binary(path4) {
                if (typeof _fs !== 'undefined') return _fs.readFileSync(path4);
                if (typeof Deno !== 'undefined') return Deno.readFileSync(path4);
                if (
                    typeof $ !== 'undefined' &&
                    typeof File !== 'undefined' &&
                    typeof Folder !== 'undefined'
                )
                    try {
                        var infile = File(path4);
                        infile.open('r');
                        infile.encoding = 'binary';
                        var data2 = infile.read();
                        infile.close();
                        return data2;
                    } catch (e2) {
                        if (!e2.message || !e2.message.match(/onstruct/)) throw e2;
                    }
                throw new Error('Cannot access file ' + path4);
            }
            function keys(o) {
                var ks = Object.keys(o),
                    o2 = [];
                for (var i2 = 0; i2 < ks.length; ++i2)
                    if (Object.prototype.hasOwnProperty.call(o, ks[i2])) o2.push(ks[i2]);
                return o2;
            }
            function evert_key(obj, key) {
                var o = [],
                    K = keys(obj);
                for (var i2 = 0; i2 !== K.length; ++i2)
                    if (o[obj[K[i2]][key]] == null) o[obj[K[i2]][key]] = K[i2];
                return o;
            }
            function evert(obj) {
                var o = [],
                    K = keys(obj);
                for (var i2 = 0; i2 !== K.length; ++i2) o[obj[K[i2]]] = K[i2];
                return o;
            }
            function evert_num(obj) {
                var o = [],
                    K = keys(obj);
                for (var i2 = 0; i2 !== K.length; ++i2) o[obj[K[i2]]] = parseInt(K[i2], 10);
                return o;
            }
            function evert_arr(obj) {
                var o = [],
                    K = keys(obj);
                for (var i2 = 0; i2 !== K.length; ++i2) {
                    if (o[obj[K[i2]]] == null) o[obj[K[i2]]] = [];
                    o[obj[K[i2]]].push(K[i2]);
                }
                return o;
            }
            var basedate = new Date(1899, 11, 30, 0, 0, 0);
            function datenum(v, date1904) {
                var epoch = v.getTime();
                if (date1904) epoch -= 1462 * 24 * 60 * 60 * 1e3;
                var dnthresh2 =
                    basedate.getTime() +
                    (v.getTimezoneOffset() - basedate.getTimezoneOffset()) * 6e4;
                return (epoch - dnthresh2) / (24 * 60 * 60 * 1e3);
            }
            var refdate = /* @__PURE__ */ new Date();
            var dnthresh =
                basedate.getTime() +
                (refdate.getTimezoneOffset() - basedate.getTimezoneOffset()) * 6e4;
            var refoffset = refdate.getTimezoneOffset();
            function numdate(v) {
                var out = /* @__PURE__ */ new Date();
                out.setTime(v * 24 * 60 * 60 * 1e3 + dnthresh);
                if (out.getTimezoneOffset() !== refoffset) {
                    out.setTime(out.getTime() + (out.getTimezoneOffset() - refoffset) * 6e4);
                }
                return out;
            }
            function parse_isodur(s2) {
                var sec = 0,
                    mt = 0,
                    time = false;
                var m2 = s2.match(
                    /P([0-9\.]+Y)?([0-9\.]+M)?([0-9\.]+D)?T([0-9\.]+H)?([0-9\.]+M)?([0-9\.]+S)?/,
                );
                if (!m2) throw new Error('|' + s2 + '| is not an ISO8601 Duration');
                for (var i2 = 1; i2 != m2.length; ++i2) {
                    if (!m2[i2]) continue;
                    mt = 1;
                    if (i2 > 3) time = true;
                    switch (m2[i2].slice(m2[i2].length - 1)) {
                        case 'Y':
                            throw new Error(
                                'Unsupported ISO Duration Field: ' +
                                    m2[i2].slice(m2[i2].length - 1),
                            );
                        case 'D':
                            mt *= 24;
                        case 'H':
                            mt *= 60;
                        case 'M':
                            if (!time) throw new Error('Unsupported ISO Duration Field: M');
                            else mt *= 60;
                        case 'S':
                            break;
                    }
                    sec += mt * parseInt(m2[i2], 10);
                }
                return sec;
            }
            var good_pd_date_1 = /* @__PURE__ */ new Date('2017-02-19T19:06:09.000Z');
            var good_pd_date = isNaN(good_pd_date_1.getFullYear())
                ? /* @__PURE__ */ new Date('2/19/17')
                : good_pd_date_1;
            var good_pd = good_pd_date.getFullYear() == 2017;
            function parseDate(str, fixdate) {
                var d = new Date(str);
                if (good_pd) {
                    if (fixdate > 0) d.setTime(d.getTime() + d.getTimezoneOffset() * 60 * 1e3);
                    else if (fixdate < 0) d.setTime(d.getTime() - d.getTimezoneOffset() * 60 * 1e3);
                    return d;
                }
                if (str instanceof Date) return str;
                if (good_pd_date.getFullYear() == 1917 && !isNaN(d.getFullYear())) {
                    var s2 = d.getFullYear();
                    if (str.indexOf('' + s2) > -1) return d;
                    d.setFullYear(d.getFullYear() + 100);
                    return d;
                }
                var n = str.match(/\d+/g) || ['2017', '2', '19', '0', '0', '0'];
                var out = new Date(+n[0], +n[1] - 1, +n[2], +n[3] || 0, +n[4] || 0, +n[5] || 0);
                if (str.indexOf('Z') > -1)
                    out = new Date(out.getTime() - out.getTimezoneOffset() * 60 * 1e3);
                return out;
            }
            function cc2str(arr, debomit) {
                if (has_buf && Buffer.isBuffer(arr)) {
                    if (debomit) {
                        if (arr[0] == 255 && arr[1] == 254)
                            return utf8write(arr.slice(2).toString('utf16le'));
                        if (arr[1] == 254 && arr[2] == 255)
                            return utf8write(utf16beread(arr.slice(2).toString('binary')));
                    }
                    return arr.toString('binary');
                }
                if (typeof TextDecoder !== 'undefined')
                    try {
                        if (debomit) {
                            if (arr[0] == 255 && arr[1] == 254)
                                return utf8write(new TextDecoder('utf-16le').decode(arr.slice(2)));
                            if (arr[0] == 254 && arr[1] == 255)
                                return utf8write(new TextDecoder('utf-16be').decode(arr.slice(2)));
                        }
                        var rev = {
                            '\u20AC': '\x80',
                            '\u201A': '\x82',
                            '\u0192': '\x83',
                            '\u201E': '\x84',
                            '\u2026': '\x85',
                            '\u2020': '\x86',
                            '\u2021': '\x87',
                            '\u02C6': '\x88',
                            '\u2030': '\x89',
                            '\u0160': '\x8A',
                            '\u2039': '\x8B',
                            '\u0152': '\x8C',
                            '\u017D': '\x8E',
                            '\u2018': '\x91',
                            '\u2019': '\x92',
                            '\u201C': '\x93',
                            '\u201D': '\x94',
                            '\u2022': '\x95',
                            '\u2013': '\x96',
                            '\u2014': '\x97',
                            '\u02DC': '\x98',
                            '\u2122': '\x99',
                            '\u0161': '\x9A',
                            '\u203A': '\x9B',
                            '\u0153': '\x9C',
                            '\u017E': '\x9E',
                            '\u0178': '\x9F',
                        };
                        if (Array.isArray(arr)) arr = new Uint8Array(arr);
                        return new TextDecoder('latin1')
                            .decode(arr)
                            .replace(/[€‚ƒ„…†‡ˆ‰Š‹ŒŽ‘’“”•–—˜™š›œžŸ]/g, function (c) {
                                return rev[c] || c;
                            });
                    } catch (e2) {}
                var o = [];
                for (var i2 = 0; i2 != arr.length; ++i2) o.push(String.fromCharCode(arr[i2]));
                return o.join('');
            }
            function dup(o) {
                if (typeof JSON != 'undefined' && !Array.isArray(o))
                    return JSON.parse(JSON.stringify(o));
                if (typeof o != 'object' || o == null) return o;
                if (o instanceof Date) return new Date(o.getTime());
                var out = {};
                for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) out[k] = dup(o[k]);
                return out;
            }
            function fill(c, l) {
                var o = '';
                while (o.length < l) o += c;
                return o;
            }
            function fuzzynum(s2) {
                var v = Number(s2);
                if (!isNaN(v)) return isFinite(v) ? v : NaN;
                if (!/\d/.test(s2)) return v;
                var wt = 1;
                var ss = s2
                    .replace(/([\d]),([\d])/g, '$1$2')
                    .replace(/[$]/g, '')
                    .replace(/[%]/g, function () {
                        wt *= 100;
                        return '';
                    });
                if (!isNaN((v = Number(ss)))) return v / wt;
                ss = ss.replace(/[(](.*)[)]/, function ($$, $1) {
                    wt = -wt;
                    return $1;
                });
                if (!isNaN((v = Number(ss)))) return v / wt;
                return v;
            }
            var lower_months = [
                'january',
                'february',
                'march',
                'april',
                'may',
                'june',
                'july',
                'august',
                'september',
                'october',
                'november',
                'december',
            ];
            function fuzzydate(s2) {
                var o = new Date(s2),
                    n = /* @__PURE__ */ new Date(NaN);
                var y = o.getYear(),
                    m2 = o.getMonth(),
                    d = o.getDate();
                if (isNaN(d)) return n;
                var lower2 = s2.toLowerCase();
                if (lower2.match(/jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec/)) {
                    lower2 = lower2
                        .replace(/[^a-z]/g, '')
                        .replace(/([^a-z]|^)[ap]m?([^a-z]|$)/, '');
                    if (lower2.length > 3 && lower_months.indexOf(lower2) == -1) return n;
                } else if (lower2.match(/[a-z]/)) return n;
                if (y < 0 || y > 8099) return n;
                if ((m2 > 0 || d > 1) && y != 101) return o;
                if (s2.match(/[^-0-9:,\/\\]/)) return n;
                return o;
            }
            var split_regex = (function () {
                var safe_split_regex = 'abacaba'.split(/(:?b)/i).length == 5;
                return function split_regex2(str, re, def) {
                    if (safe_split_regex || typeof re == 'string') return str.split(re);
                    var p = str.split(re),
                        o = [p[0]];
                    for (var i2 = 1; i2 < p.length; ++i2) {
                        o.push(def);
                        o.push(p[i2]);
                    }
                    return o;
                };
            })();
            function getdatastr(data2) {
                if (!data2) return null;
                if (data2.content && data2.type) return cc2str(data2.content, true);
                if (data2.data) return debom(data2.data);
                if (data2.asNodeBuffer && has_buf)
                    return debom(data2.asNodeBuffer().toString('binary'));
                if (data2.asBinary) return debom(data2.asBinary());
                if (data2._data && data2._data.getContent)
                    return debom(cc2str(Array.prototype.slice.call(data2._data.getContent(), 0)));
                return null;
            }
            function getdatabin(data2) {
                if (!data2) return null;
                if (data2.data) return char_codes(data2.data);
                if (data2.asNodeBuffer && has_buf) return data2.asNodeBuffer();
                if (data2._data && data2._data.getContent) {
                    var o = data2._data.getContent();
                    if (typeof o == 'string') return char_codes(o);
                    return Array.prototype.slice.call(o);
                }
                if (data2.content && data2.type) return data2.content;
                return null;
            }
            function getdata(data2) {
                return data2 && data2.name.slice(-4) === '.bin'
                    ? getdatabin(data2)
                    : getdatastr(data2);
            }
            function safegetzipfile(zip, file) {
                var k = zip.FullPaths || keys(zip.files);
                var f3 = file.toLowerCase().replace(/[\/]/g, '\\'),
                    g = f3.replace(/\\/g, '/');
                for (var i2 = 0; i2 < k.length; ++i2) {
                    var n = k[i2].replace(/^Root Entry[\/]/, '').toLowerCase();
                    if (f3 == n || g == n) return zip.files ? zip.files[k[i2]] : zip.FileIndex[i2];
                }
                return null;
            }
            function getzipfile(zip, file) {
                var o = safegetzipfile(zip, file);
                if (o == null) throw new Error('Cannot find file ' + file + ' in zip');
                return o;
            }
            function getzipdata(zip, file, safe) {
                if (!safe) return getdata(getzipfile(zip, file));
                if (!file) return null;
                try {
                    return getzipdata(zip, file);
                } catch (e2) {
                    return null;
                }
            }
            function getzipstr(zip, file, safe) {
                if (!safe) return getdatastr(getzipfile(zip, file));
                if (!file) return null;
                try {
                    return getzipstr(zip, file);
                } catch (e2) {
                    return null;
                }
            }
            function getzipbin(zip, file, safe) {
                if (!safe) return getdatabin(getzipfile(zip, file));
                if (!file) return null;
                try {
                    return getzipbin(zip, file);
                } catch (e2) {
                    return null;
                }
            }
            function zipentries(zip) {
                var k = zip.FullPaths || keys(zip.files),
                    o = [];
                for (var i2 = 0; i2 < k.length; ++i2)
                    if (k[i2].slice(-1) != '/') o.push(k[i2].replace(/^Root Entry[\/]/, ''));
                return o.sort();
            }
            function zip_add_file(zip, path4, content) {
                if (zip.FullPaths) {
                    if (typeof content == 'string') {
                        var res;
                        if (has_buf) res = Buffer_from(content);
                        else res = utf8decode(content);
                        return CFB.utils.cfb_add(zip, path4, res);
                    }
                    CFB.utils.cfb_add(zip, path4, content);
                } else zip.file(path4, content);
            }
            function zip_new() {
                return CFB.utils.cfb_new();
            }
            function zip_read(d, o) {
                switch (o.type) {
                    case 'base64':
                        return CFB.read(d, { type: 'base64' });
                    case 'binary':
                        return CFB.read(d, { type: 'binary' });
                    case 'buffer':
                    case 'array':
                        return CFB.read(d, { type: 'buffer' });
                }
                throw new Error('Unrecognized type ' + o.type);
            }
            function resolve_path(path4, base) {
                if (path4.charAt(0) == '/') return path4.slice(1);
                var result = base.split('/');
                if (base.slice(-1) != '/') result.pop();
                var target = path4.split('/');
                while (target.length !== 0) {
                    var step = target.shift();
                    if (step === '..') result.pop();
                    else if (step !== '.') result.push(step);
                }
                return result.join('/');
            }
            var XML_HEADER = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\r\n';
            var attregexg =
                /([^"\s?>\/]+)\s*=\s*((?:")([^"]*)(?:")|(?:')([^']*)(?:')|([^'">\s]+))/g;
            var tagregex1 =
                    /<[\/\?]?[a-zA-Z0-9:_-]+(?:\s+[^"\s?>\/]+\s*=\s*(?:"[^"]*"|'[^']*'|[^'">\s=]+))*\s*[\/\?]?>/gm,
                tagregex2 = /<[^>]*>/g;
            var tagregex = XML_HEADER.match(tagregex1) ? tagregex1 : tagregex2;
            var nsregex = /<\w*:/,
                nsregex2 = /<(\/?)\w+:/;
            function parsexmltag(tag, skip_root, skip_LC) {
                var z = {};
                var eq2 = 0,
                    c = 0;
                for (; eq2 !== tag.length; ++eq2)
                    if ((c = tag.charCodeAt(eq2)) === 32 || c === 10 || c === 13) break;
                if (!skip_root) z[0] = tag.slice(0, eq2);
                if (eq2 === tag.length) return z;
                var m2 = tag.match(attregexg),
                    j = 0,
                    v = '',
                    i2 = 0,
                    q = '',
                    cc = '',
                    quot = 1;
                if (m2)
                    for (i2 = 0; i2 != m2.length; ++i2) {
                        cc = m2[i2];
                        for (c = 0; c != cc.length; ++c) if (cc.charCodeAt(c) === 61) break;
                        q = cc.slice(0, c).trim();
                        while (cc.charCodeAt(c + 1) == 32) ++c;
                        quot = (eq2 = cc.charCodeAt(c + 1)) == 34 || eq2 == 39 ? 1 : 0;
                        v = cc.slice(c + 1 + quot, cc.length - quot);
                        for (j = 0; j != q.length; ++j) if (q.charCodeAt(j) === 58) break;
                        if (j === q.length) {
                            if (q.indexOf('_') > 0) q = q.slice(0, q.indexOf('_'));
                            z[q] = v;
                            if (!skip_LC) z[q.toLowerCase()] = v;
                        } else {
                            var k =
                                (j === 5 && q.slice(0, 5) === 'xmlns' ? 'xmlns' : '') +
                                q.slice(j + 1);
                            if (z[k] && q.slice(j - 3, j) == 'ext') continue;
                            z[k] = v;
                            if (!skip_LC) z[k.toLowerCase()] = v;
                        }
                    }
                return z;
            }
            function strip_ns(x2) {
                return x2.replace(nsregex2, '<$1');
            }
            var encodings = {
                '&quot;': '"',
                '&apos;': "'",
                '&gt;': '>',
                '&lt;': '<',
                '&amp;': '&',
            };
            var rencoding = evert(encodings);
            var unescapexml = /* @__PURE__ */ (function () {
                var encregex = /&(?:quot|apos|gt|lt|amp|#x?([\da-fA-F]+));/gi,
                    coderegex = /_x([\da-fA-F]{4})_/gi;
                return function unescapexml2(text3) {
                    var s2 = text3 + '',
                        i2 = s2.indexOf('<![CDATA[');
                    if (i2 == -1)
                        return s2
                            .replace(encregex, function ($$, $1) {
                                return (
                                    encodings[$$] ||
                                    String.fromCharCode(
                                        parseInt($1, $$.indexOf('x') > -1 ? 16 : 10),
                                    ) ||
                                    $$
                                );
                            })
                            .replace(coderegex, function (m2, c) {
                                return String.fromCharCode(parseInt(c, 16));
                            });
                    var j = s2.indexOf(']]>');
                    return (
                        unescapexml2(s2.slice(0, i2)) +
                        s2.slice(i2 + 9, j) +
                        unescapexml2(s2.slice(j + 3))
                    );
                };
            })();
            var decregex = /[&<>'"]/g,
                charegex = /[\u0000-\u0008\u000b-\u001f]/g;
            function escapexml(text3) {
                var s2 = text3 + '';
                return s2
                    .replace(decregex, function (y) {
                        return rencoding[y];
                    })
                    .replace(charegex, function (s3) {
                        return '_x' + ('000' + s3.charCodeAt(0).toString(16)).slice(-4) + '_';
                    });
            }
            function escapexmltag(text3) {
                return escapexml(text3).replace(/ /g, '_x0020_');
            }
            var htmlcharegex = /[\u0000-\u001f]/g;
            function escapehtml(text3) {
                var s2 = text3 + '';
                return s2
                    .replace(decregex, function (y) {
                        return rencoding[y];
                    })
                    .replace(/\n/g, '<br/>')
                    .replace(htmlcharegex, function (s3) {
                        return '&#x' + ('000' + s3.charCodeAt(0).toString(16)).slice(-4) + ';';
                    });
            }
            function escapexlml(text3) {
                var s2 = text3 + '';
                return s2
                    .replace(decregex, function (y) {
                        return rencoding[y];
                    })
                    .replace(htmlcharegex, function (s3) {
                        return '&#x' + s3.charCodeAt(0).toString(16).toUpperCase() + ';';
                    });
            }
            var xlml_fixstr = /* @__PURE__ */ (function () {
                var entregex = /&#(\d+);/g;
                function entrepl($$, $1) {
                    return String.fromCharCode(parseInt($1, 10));
                }
                return function xlml_fixstr2(str) {
                    return str.replace(entregex, entrepl);
                };
            })();
            function xlml_unfixstr(str) {
                return str.replace(/(\r\n|[\r\n])/g, '&#10;');
            }
            function parsexmlbool(value) {
                switch (value) {
                    case 1:
                    case true:
                    case '1':
                    case 'true':
                    case 'TRUE':
                        return true;
                    default:
                        return false;
                }
            }
            function utf8reada(orig) {
                var out = '',
                    i2 = 0,
                    c = 0,
                    d = 0,
                    e2 = 0,
                    f3 = 0,
                    w = 0;
                while (i2 < orig.length) {
                    c = orig.charCodeAt(i2++);
                    if (c < 128) {
                        out += String.fromCharCode(c);
                        continue;
                    }
                    d = orig.charCodeAt(i2++);
                    if (c > 191 && c < 224) {
                        f3 = (c & 31) << 6;
                        f3 |= d & 63;
                        out += String.fromCharCode(f3);
                        continue;
                    }
                    e2 = orig.charCodeAt(i2++);
                    if (c < 240) {
                        out += String.fromCharCode(((c & 15) << 12) | ((d & 63) << 6) | (e2 & 63));
                        continue;
                    }
                    f3 = orig.charCodeAt(i2++);
                    w = (((c & 7) << 18) | ((d & 63) << 12) | ((e2 & 63) << 6) | (f3 & 63)) - 65536;
                    out += String.fromCharCode(55296 + ((w >>> 10) & 1023));
                    out += String.fromCharCode(56320 + (w & 1023));
                }
                return out;
            }
            function utf8readb(data2) {
                var out = new_raw_buf(2 * data2.length),
                    w,
                    i2,
                    j = 1,
                    k = 0,
                    ww = 0,
                    c;
                for (i2 = 0; i2 < data2.length; i2 += j) {
                    j = 1;
                    if ((c = data2.charCodeAt(i2)) < 128) w = c;
                    else if (c < 224) {
                        w = (c & 31) * 64 + (data2.charCodeAt(i2 + 1) & 63);
                        j = 2;
                    } else if (c < 240) {
                        w =
                            (c & 15) * 4096 +
                            (data2.charCodeAt(i2 + 1) & 63) * 64 +
                            (data2.charCodeAt(i2 + 2) & 63);
                        j = 3;
                    } else {
                        j = 4;
                        w =
                            (c & 7) * 262144 +
                            (data2.charCodeAt(i2 + 1) & 63) * 4096 +
                            (data2.charCodeAt(i2 + 2) & 63) * 64 +
                            (data2.charCodeAt(i2 + 3) & 63);
                        w -= 65536;
                        ww = 55296 + ((w >>> 10) & 1023);
                        w = 56320 + (w & 1023);
                    }
                    if (ww !== 0) {
                        out[k++] = ww & 255;
                        out[k++] = ww >>> 8;
                        ww = 0;
                    }
                    out[k++] = w % 256;
                    out[k++] = w >>> 8;
                }
                return out.slice(0, k).toString('ucs2');
            }
            function utf8readc(data2) {
                return Buffer_from(data2, 'binary').toString('utf8');
            }
            var utf8corpus = 'foo bar baz\xE2\x98\x83\xF0\x9F\x8D\xA3';
            var utf8read =
                (has_buf &&
                    ((utf8readc(utf8corpus) == utf8reada(utf8corpus) && utf8readc) ||
                        (utf8readb(utf8corpus) == utf8reada(utf8corpus) && utf8readb))) ||
                utf8reada;
            var utf8write = has_buf
                ? function (data2) {
                      return Buffer_from(data2, 'utf8').toString('binary');
                  }
                : function (orig) {
                      var out = [],
                          i2 = 0,
                          c = 0,
                          d = 0;
                      while (i2 < orig.length) {
                          c = orig.charCodeAt(i2++);
                          switch (true) {
                              case c < 128:
                                  out.push(String.fromCharCode(c));
                                  break;
                              case c < 2048:
                                  out.push(String.fromCharCode(192 + (c >> 6)));
                                  out.push(String.fromCharCode(128 + (c & 63)));
                                  break;
                              case c >= 55296 && c < 57344:
                                  c -= 55296;
                                  d = orig.charCodeAt(i2++) - 56320 + (c << 10);
                                  out.push(String.fromCharCode(240 + ((d >> 18) & 7)));
                                  out.push(String.fromCharCode(144 + ((d >> 12) & 63)));
                                  out.push(String.fromCharCode(128 + ((d >> 6) & 63)));
                                  out.push(String.fromCharCode(128 + (d & 63)));
                                  break;
                              default:
                                  out.push(String.fromCharCode(224 + (c >> 12)));
                                  out.push(String.fromCharCode(128 + ((c >> 6) & 63)));
                                  out.push(String.fromCharCode(128 + (c & 63)));
                          }
                      }
                      return out.join('');
                  };
            var matchtag = /* @__PURE__ */ (function () {
                var mtcache = {};
                return function matchtag2(f3, g) {
                    var t2 = f3 + '|' + (g || '');
                    if (mtcache[t2]) return mtcache[t2];
                    return (mtcache[t2] = new RegExp(
                        '<(?:\\w+:)?' +
                            f3 +
                            '(?: xml:space="preserve")?(?:[^>]*)>([\\s\\S]*?)</(?:\\w+:)?' +
                            f3 +
                            '>',
                        g || '',
                    ));
                };
            })();
            var htmldecode = (function () {
                var entities = [
                    ['nbsp', ' '],
                    ['middot', '\xB7'],
                    ['quot', '"'],
                    ['apos', "'"],
                    ['gt', '>'],
                    ['lt', '<'],
                    ['amp', '&'],
                ].map(function (x2) {
                    return [new RegExp('&' + x2[0] + ';', 'ig'), x2[1]];
                });
                return function htmldecode2(str) {
                    var o = str
                        .replace(/^[\t\n\r ]+/, '')
                        .replace(/[\t\n\r ]+$/, '')
                        .replace(/>\s+/g, '>')
                        .replace(/\s+</g, '<')
                        .replace(/[\t\n\r ]+/g, ' ')
                        .replace(/<\s*[bB][rR]\s*\/?>/g, '\n')
                        .replace(/<[^>]*>/g, '');
                    for (var i2 = 0; i2 < entities.length; ++i2)
                        o = o.replace(entities[i2][0], entities[i2][1]);
                    return o;
                };
            })();
            var vtregex = /* @__PURE__ */ (function () {
                var vt_cache = {};
                return function vt_regex(bt) {
                    if (vt_cache[bt] !== void 0) return vt_cache[bt];
                    return (vt_cache[bt] = new RegExp(
                        '<(?:vt:)?' + bt + '>([\\s\\S]*?)</(?:vt:)?' + bt + '>',
                        'g',
                    ));
                };
            })();
            var vtvregex = /<\/?(?:vt:)?variant>/g,
                vtmregex = /<(?:vt:)([^>]*)>([\s\S]*)</;
            function parseVector(data2, opts) {
                var h2 = parsexmltag(data2);
                var matches = data2.match(vtregex(h2.baseType)) || [];
                var res = [];
                if (matches.length != h2.size) {
                    if (opts.WTF)
                        throw new Error(
                            'unexpected vector length ' + matches.length + ' != ' + h2.size,
                        );
                    return res;
                }
                matches.forEach(function (x2) {
                    var v = x2.replace(vtvregex, '').match(vtmregex);
                    if (v) res.push({ v: utf8read(v[2]), t: v[1] });
                });
                return res;
            }
            var wtregex = /(^\s|\s$|\n)/;
            function writetag(f3, g) {
                return (
                    '<' +
                    f3 +
                    (g.match(wtregex) ? ' xml:space="preserve"' : '') +
                    '>' +
                    g +
                    '</' +
                    f3 +
                    '>'
                );
            }
            function wxt_helper(h2) {
                return keys(h2)
                    .map(function (k) {
                        return ' ' + k + '="' + h2[k] + '"';
                    })
                    .join('');
            }
            function writextag(f3, g, h2) {
                return (
                    '<' +
                    f3 +
                    (h2 != null ? wxt_helper(h2) : '') +
                    (g != null
                        ? (g.match(wtregex) ? ' xml:space="preserve"' : '') + '>' + g + '</' + f3
                        : '/') +
                    '>'
                );
            }
            function write_w3cdtf(d, t2) {
                try {
                    return d.toISOString().replace(/\.\d*/, '');
                } catch (e2) {
                    if (t2) throw e2;
                }
                return '';
            }
            function write_vt(s2, xlsx) {
                switch (typeof s2) {
                    case 'string':
                        var o = writextag('vt:lpwstr', escapexml(s2));
                        if (xlsx) o = o.replace(/&quot;/g, '_x0022_');
                        return o;
                    case 'number':
                        return writextag((s2 | 0) == s2 ? 'vt:i4' : 'vt:r8', escapexml(String(s2)));
                    case 'boolean':
                        return writextag('vt:bool', s2 ? 'true' : 'false');
                }
                if (s2 instanceof Date) return writextag('vt:filetime', write_w3cdtf(s2));
                throw new Error('Unable to serialize ' + s2);
            }
            function xlml_normalize(d) {
                if (has_buf && Buffer.isBuffer(d)) return d.toString('utf8');
                if (typeof d === 'string') return d;
                if (typeof Uint8Array !== 'undefined' && d instanceof Uint8Array)
                    return utf8read(a2s(ab2a(d)));
                throw new Error('Bad input format: expected Buffer or string');
            }
            var xlmlregex = /<(\/?)([^\s?><!\/:]*:|)([^\s?<>:\/]+)(?:[\s?:\/][^>]*)?>/gm;
            var XMLNS = {
                CORE_PROPS:
                    'http://schemas.openxmlformats.org/package/2006/metadata/core-properties',
                CUST_PROPS:
                    'http://schemas.openxmlformats.org/officeDocument/2006/custom-properties',
                EXT_PROPS:
                    'http://schemas.openxmlformats.org/officeDocument/2006/extended-properties',
                CT: 'http://schemas.openxmlformats.org/package/2006/content-types',
                RELS: 'http://schemas.openxmlformats.org/package/2006/relationships',
                TCMNT: 'http://schemas.microsoft.com/office/spreadsheetml/2018/threadedcomments',
                dc: 'http://purl.org/dc/elements/1.1/',
                dcterms: 'http://purl.org/dc/terms/',
                dcmitype: 'http://purl.org/dc/dcmitype/',
                mx: 'http://schemas.microsoft.com/office/mac/excel/2008/main',
                r: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships',
                sjs: 'http://schemas.openxmlformats.org/package/2006/sheetjs/core-properties',
                vt: 'http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes',
                xsi: 'http://www.w3.org/2001/XMLSchema-instance',
                xsd: 'http://www.w3.org/2001/XMLSchema',
            };
            var XMLNS_main = [
                'http://schemas.openxmlformats.org/spreadsheetml/2006/main',
                'http://purl.oclc.org/ooxml/spreadsheetml/main',
                'http://schemas.microsoft.com/office/excel/2006/main',
                'http://schemas.microsoft.com/office/excel/2006/2',
            ];
            var XLMLNS = {
                o: 'urn:schemas-microsoft-com:office:office',
                x: 'urn:schemas-microsoft-com:office:excel',
                ss: 'urn:schemas-microsoft-com:office:spreadsheet',
                dt: 'uuid:C2F41010-65B3-11d1-A29F-00AA00C14882',
                mv: 'http://macVmlSchemaUri',
                v: 'urn:schemas-microsoft-com:vml',
                html: 'http://www.w3.org/TR/REC-html40',
            };
            function read_double_le(b, idx) {
                var s2 = 1 - 2 * (b[idx + 7] >>> 7);
                var e2 = ((b[idx + 7] & 127) << 4) + ((b[idx + 6] >>> 4) & 15);
                var m2 = b[idx + 6] & 15;
                for (var i2 = 5; i2 >= 0; --i2) m2 = m2 * 256 + b[idx + i2];
                if (e2 == 2047) return m2 == 0 ? s2 * Infinity : NaN;
                if (e2 == 0) e2 = -1022;
                else {
                    e2 -= 1023;
                    m2 += Math.pow(2, 52);
                }
                return s2 * Math.pow(2, e2 - 52) * m2;
            }
            function write_double_le(b, v, idx) {
                var bs = (v < 0 || 1 / v == -Infinity ? 1 : 0) << 7,
                    e2 = 0,
                    m2 = 0;
                var av = bs ? -v : v;
                if (!isFinite(av)) {
                    e2 = 2047;
                    m2 = isNaN(v) ? 26985 : 0;
                } else if (av == 0) e2 = m2 = 0;
                else {
                    e2 = Math.floor(Math.log(av) / Math.LN2);
                    m2 = av * Math.pow(2, 52 - e2);
                    if (e2 <= -1023 && (!isFinite(m2) || m2 < Math.pow(2, 52))) {
                        e2 = -1022;
                    } else {
                        m2 -= Math.pow(2, 52);
                        e2 += 1023;
                    }
                }
                for (var i2 = 0; i2 <= 5; ++i2, m2 /= 256) b[idx + i2] = m2 & 255;
                b[idx + 6] = ((e2 & 15) << 4) | (m2 & 15);
                b[idx + 7] = (e2 >> 4) | bs;
            }
            var ___toBuffer = function (bufs) {
                var x2 = [],
                    w = 10240;
                for (var i2 = 0; i2 < bufs[0].length; ++i2)
                    if (bufs[0][i2])
                        for (var j = 0, L = bufs[0][i2].length; j < L; j += w)
                            x2.push.apply(x2, bufs[0][i2].slice(j, j + w));
                return x2;
            };
            var __toBuffer = has_buf
                ? function (bufs) {
                      return bufs[0].length > 0 && Buffer.isBuffer(bufs[0][0])
                          ? Buffer.concat(
                                bufs[0].map(function (x2) {
                                    return Buffer.isBuffer(x2) ? x2 : Buffer_from(x2);
                                }),
                            )
                          : ___toBuffer(bufs);
                  }
                : ___toBuffer;
            var ___utf16le = function (b, s2, e2) {
                var ss = [];
                for (var i2 = s2; i2 < e2; i2 += 2)
                    ss.push(String.fromCharCode(__readUInt16LE(b, i2)));
                return ss.join('').replace(chr0, '');
            };
            var __utf16le = has_buf
                ? function (b, s2, e2) {
                      if (!Buffer.isBuffer(b)) return ___utf16le(b, s2, e2);
                      return b.toString('utf16le', s2, e2).replace(chr0, '');
                  }
                : ___utf16le;
            var ___hexlify = function (b, s2, l) {
                var ss = [];
                for (var i2 = s2; i2 < s2 + l; ++i2) ss.push(('0' + b[i2].toString(16)).slice(-2));
                return ss.join('');
            };
            var __hexlify = has_buf
                ? function (b, s2, l) {
                      return Buffer.isBuffer(b)
                          ? b.toString('hex', s2, s2 + l)
                          : ___hexlify(b, s2, l);
                  }
                : ___hexlify;
            var ___utf8 = function (b, s2, e2) {
                var ss = [];
                for (var i2 = s2; i2 < e2; i2++) ss.push(String.fromCharCode(__readUInt8(b, i2)));
                return ss.join('');
            };
            var __utf8 = has_buf
                ? function utf8_b(b, s2, e2) {
                      return Buffer.isBuffer(b) ? b.toString('utf8', s2, e2) : ___utf8(b, s2, e2);
                  }
                : ___utf8;
            var ___lpstr = function (b, i2) {
                var len = __readUInt32LE(b, i2);
                return len > 0 ? __utf8(b, i2 + 4, i2 + 4 + len - 1) : '';
            };
            var __lpstr = ___lpstr;
            var ___cpstr = function (b, i2) {
                var len = __readUInt32LE(b, i2);
                return len > 0 ? __utf8(b, i2 + 4, i2 + 4 + len - 1) : '';
            };
            var __cpstr = ___cpstr;
            var ___lpwstr = function (b, i2) {
                var len = 2 * __readUInt32LE(b, i2);
                return len > 0 ? __utf8(b, i2 + 4, i2 + 4 + len - 1) : '';
            };
            var __lpwstr = ___lpwstr;
            var ___lpp4 = function lpp4_(b, i2) {
                var len = __readUInt32LE(b, i2);
                return len > 0 ? __utf16le(b, i2 + 4, i2 + 4 + len) : '';
            };
            var __lpp4 = ___lpp4;
            var ___8lpp4 = function (b, i2) {
                var len = __readUInt32LE(b, i2);
                return len > 0 ? __utf8(b, i2 + 4, i2 + 4 + len) : '';
            };
            var __8lpp4 = ___8lpp4;
            var ___double = function (b, idx) {
                return read_double_le(b, idx);
            };
            var __double = ___double;
            var is_buf = function is_buf_a(a) {
                return (
                    Array.isArray(a) ||
                    (typeof Uint8Array !== 'undefined' && a instanceof Uint8Array)
                );
            };
            if (has_buf) {
                __lpstr = function lpstr_b(b, i2) {
                    if (!Buffer.isBuffer(b)) return ___lpstr(b, i2);
                    var len = b.readUInt32LE(i2);
                    return len > 0 ? b.toString('utf8', i2 + 4, i2 + 4 + len - 1) : '';
                };
                __cpstr = function cpstr_b(b, i2) {
                    if (!Buffer.isBuffer(b)) return ___cpstr(b, i2);
                    var len = b.readUInt32LE(i2);
                    return len > 0 ? b.toString('utf8', i2 + 4, i2 + 4 + len - 1) : '';
                };
                __lpwstr = function lpwstr_b(b, i2) {
                    if (!Buffer.isBuffer(b)) return ___lpwstr(b, i2);
                    var len = 2 * b.readUInt32LE(i2);
                    return b.toString('utf16le', i2 + 4, i2 + 4 + len - 1);
                };
                __lpp4 = function lpp4_b(b, i2) {
                    if (!Buffer.isBuffer(b)) return ___lpp4(b, i2);
                    var len = b.readUInt32LE(i2);
                    return b.toString('utf16le', i2 + 4, i2 + 4 + len);
                };
                __8lpp4 = function lpp4_8b(b, i2) {
                    if (!Buffer.isBuffer(b)) return ___8lpp4(b, i2);
                    var len = b.readUInt32LE(i2);
                    return b.toString('utf8', i2 + 4, i2 + 4 + len);
                };
                __double = function double_(b, i2) {
                    if (Buffer.isBuffer(b)) return b.readDoubleLE(i2);
                    return ___double(b, i2);
                };
                is_buf = function is_buf_b(a) {
                    return (
                        Buffer.isBuffer(a) ||
                        Array.isArray(a) ||
                        (typeof Uint8Array !== 'undefined' && a instanceof Uint8Array)
                    );
                };
            }
            function cpdoit() {
                __utf16le = function (b, s2, e2) {
                    return $cptable.utils.decode(1200, b.slice(s2, e2)).replace(chr0, '');
                };
                __utf8 = function (b, s2, e2) {
                    return $cptable.utils.decode(65001, b.slice(s2, e2));
                };
                __lpstr = function (b, i2) {
                    var len = __readUInt32LE(b, i2);
                    return len > 0
                        ? $cptable.utils.decode(current_ansi, b.slice(i2 + 4, i2 + 4 + len - 1))
                        : '';
                };
                __cpstr = function (b, i2) {
                    var len = __readUInt32LE(b, i2);
                    return len > 0
                        ? $cptable.utils.decode(current_codepage, b.slice(i2 + 4, i2 + 4 + len - 1))
                        : '';
                };
                __lpwstr = function (b, i2) {
                    var len = 2 * __readUInt32LE(b, i2);
                    return len > 0
                        ? $cptable.utils.decode(1200, b.slice(i2 + 4, i2 + 4 + len - 1))
                        : '';
                };
                __lpp4 = function (b, i2) {
                    var len = __readUInt32LE(b, i2);
                    return len > 0
                        ? $cptable.utils.decode(1200, b.slice(i2 + 4, i2 + 4 + len))
                        : '';
                };
                __8lpp4 = function (b, i2) {
                    var len = __readUInt32LE(b, i2);
                    return len > 0
                        ? $cptable.utils.decode(65001, b.slice(i2 + 4, i2 + 4 + len))
                        : '';
                };
            }
            if (typeof $cptable !== 'undefined') cpdoit();
            var __readUInt8 = function (b, idx) {
                return b[idx];
            };
            var __readUInt16LE = function (b, idx) {
                return b[idx + 1] * (1 << 8) + b[idx];
            };
            var __readInt16LE = function (b, idx) {
                var u = b[idx + 1] * (1 << 8) + b[idx];
                return u < 32768 ? u : (65535 - u + 1) * -1;
            };
            var __readUInt32LE = function (b, idx) {
                return b[idx + 3] * (1 << 24) + (b[idx + 2] << 16) + (b[idx + 1] << 8) + b[idx];
            };
            var __readInt32LE = function (b, idx) {
                return (b[idx + 3] << 24) | (b[idx + 2] << 16) | (b[idx + 1] << 8) | b[idx];
            };
            var __readInt32BE = function (b, idx) {
                return (b[idx] << 24) | (b[idx + 1] << 16) | (b[idx + 2] << 8) | b[idx + 3];
            };
            function ReadShift(size, t2) {
                var o = '',
                    oI,
                    oR,
                    oo = [],
                    w,
                    vv,
                    i2,
                    loc;
                switch (t2) {
                    case 'dbcs':
                        loc = this.l;
                        if (has_buf && Buffer.isBuffer(this))
                            o = this.slice(this.l, this.l + 2 * size).toString('utf16le');
                        else
                            for (i2 = 0; i2 < size; ++i2) {
                                o += String.fromCharCode(__readUInt16LE(this, loc));
                                loc += 2;
                            }
                        size *= 2;
                        break;
                    case 'utf8':
                        o = __utf8(this, this.l, this.l + size);
                        break;
                    case 'utf16le':
                        size *= 2;
                        o = __utf16le(this, this.l, this.l + size);
                        break;
                    case 'wstr':
                        if (typeof $cptable !== 'undefined')
                            o = $cptable.utils.decode(
                                current_codepage,
                                this.slice(this.l, this.l + 2 * size),
                            );
                        else return ReadShift.call(this, size, 'dbcs');
                        size = 2 * size;
                        break;
                    case 'lpstr-ansi':
                        o = __lpstr(this, this.l);
                        size = 4 + __readUInt32LE(this, this.l);
                        break;
                    case 'lpstr-cp':
                        o = __cpstr(this, this.l);
                        size = 4 + __readUInt32LE(this, this.l);
                        break;
                    case 'lpwstr':
                        o = __lpwstr(this, this.l);
                        size = 4 + 2 * __readUInt32LE(this, this.l);
                        break;
                    case 'lpp4':
                        size = 4 + __readUInt32LE(this, this.l);
                        o = __lpp4(this, this.l);
                        if (size & 2) size += 2;
                        break;
                    case '8lpp4':
                        size = 4 + __readUInt32LE(this, this.l);
                        o = __8lpp4(this, this.l);
                        if (size & 3) size += 4 - (size & 3);
                        break;
                    case 'cstr':
                        size = 0;
                        o = '';
                        while ((w = __readUInt8(this, this.l + size++)) !== 0) oo.push(_getchar(w));
                        o = oo.join('');
                        break;
                    case '_wstr':
                        size = 0;
                        o = '';
                        while ((w = __readUInt16LE(this, this.l + size)) !== 0) {
                            oo.push(_getchar(w));
                            size += 2;
                        }
                        size += 2;
                        o = oo.join('');
                        break;
                    case 'dbcs-cont':
                        o = '';
                        loc = this.l;
                        for (i2 = 0; i2 < size; ++i2) {
                            if (this.lens && this.lens.indexOf(loc) !== -1) {
                                w = __readUInt8(this, loc);
                                this.l = loc + 1;
                                vv = ReadShift.call(this, size - i2, w ? 'dbcs-cont' : 'sbcs-cont');
                                return oo.join('') + vv;
                            }
                            oo.push(_getchar(__readUInt16LE(this, loc)));
                            loc += 2;
                        }
                        o = oo.join('');
                        size *= 2;
                        break;
                    case 'cpstr':
                        if (typeof $cptable !== 'undefined') {
                            o = $cptable.utils.decode(
                                current_codepage,
                                this.slice(this.l, this.l + size),
                            );
                            break;
                        }
                    case 'sbcs-cont':
                        o = '';
                        loc = this.l;
                        for (i2 = 0; i2 != size; ++i2) {
                            if (this.lens && this.lens.indexOf(loc) !== -1) {
                                w = __readUInt8(this, loc);
                                this.l = loc + 1;
                                vv = ReadShift.call(this, size - i2, w ? 'dbcs-cont' : 'sbcs-cont');
                                return oo.join('') + vv;
                            }
                            oo.push(_getchar(__readUInt8(this, loc)));
                            loc += 1;
                        }
                        o = oo.join('');
                        break;
                    default:
                        switch (size) {
                            case 1:
                                oI = __readUInt8(this, this.l);
                                this.l++;
                                return oI;
                            case 2:
                                oI = (t2 === 'i' ? __readInt16LE : __readUInt16LE)(this, this.l);
                                this.l += 2;
                                return oI;
                            case 4:
                            case -4:
                                if (t2 === 'i' || (this[this.l + 3] & 128) === 0) {
                                    oI = (size > 0 ? __readInt32LE : __readInt32BE)(this, this.l);
                                    this.l += 4;
                                    return oI;
                                } else {
                                    oR = __readUInt32LE(this, this.l);
                                    this.l += 4;
                                }
                                return oR;
                            case 8:
                            case -8:
                                if (t2 === 'f') {
                                    if (size == 8) oR = __double(this, this.l);
                                    else
                                        oR = __double(
                                            [
                                                this[this.l + 7],
                                                this[this.l + 6],
                                                this[this.l + 5],
                                                this[this.l + 4],
                                                this[this.l + 3],
                                                this[this.l + 2],
                                                this[this.l + 1],
                                                this[this.l + 0],
                                            ],
                                            0,
                                        );
                                    this.l += 8;
                                    return oR;
                                } else size = 8;
                            case 16:
                                o = __hexlify(this, this.l, size);
                                break;
                        }
                }
                this.l += size;
                return o;
            }
            var __writeUInt32LE = function (b, val2, idx) {
                b[idx] = val2 & 255;
                b[idx + 1] = (val2 >>> 8) & 255;
                b[idx + 2] = (val2 >>> 16) & 255;
                b[idx + 3] = (val2 >>> 24) & 255;
            };
            var __writeInt32LE = function (b, val2, idx) {
                b[idx] = val2 & 255;
                b[idx + 1] = (val2 >> 8) & 255;
                b[idx + 2] = (val2 >> 16) & 255;
                b[idx + 3] = (val2 >> 24) & 255;
            };
            var __writeUInt16LE = function (b, val2, idx) {
                b[idx] = val2 & 255;
                b[idx + 1] = (val2 >>> 8) & 255;
            };
            function WriteShift(t2, val2, f3) {
                var size = 0,
                    i2 = 0;
                if (f3 === 'dbcs') {
                    for (i2 = 0; i2 != val2.length; ++i2)
                        __writeUInt16LE(this, val2.charCodeAt(i2), this.l + 2 * i2);
                    size = 2 * val2.length;
                } else if (f3 === 'sbcs') {
                    if (typeof $cptable !== 'undefined' && current_ansi == 874) {
                        for (i2 = 0; i2 != val2.length; ++i2) {
                            var cppayload = $cptable.utils.encode(current_ansi, val2.charAt(i2));
                            this[this.l + i2] = cppayload[0];
                        }
                    } else {
                        val2 = val2.replace(/[^\x00-\x7F]/g, '_');
                        for (i2 = 0; i2 != val2.length; ++i2)
                            this[this.l + i2] = val2.charCodeAt(i2) & 255;
                    }
                    size = val2.length;
                } else if (f3 === 'hex') {
                    for (; i2 < t2; ++i2) {
                        this[this.l++] = parseInt(val2.slice(2 * i2, 2 * i2 + 2), 16) || 0;
                    }
                    return this;
                } else if (f3 === 'utf16le') {
                    var end2 = Math.min(this.l + t2, this.length);
                    for (i2 = 0; i2 < Math.min(val2.length, t2); ++i2) {
                        var cc = val2.charCodeAt(i2);
                        this[this.l++] = cc & 255;
                        this[this.l++] = cc >> 8;
                    }
                    while (this.l < end2) this[this.l++] = 0;
                    return this;
                } else
                    switch (t2) {
                        case 1:
                            size = 1;
                            this[this.l] = val2 & 255;
                            break;
                        case 2:
                            size = 2;
                            this[this.l] = val2 & 255;
                            val2 >>>= 8;
                            this[this.l + 1] = val2 & 255;
                            break;
                        case 3:
                            size = 3;
                            this[this.l] = val2 & 255;
                            val2 >>>= 8;
                            this[this.l + 1] = val2 & 255;
                            val2 >>>= 8;
                            this[this.l + 2] = val2 & 255;
                            break;
                        case 4:
                            size = 4;
                            __writeUInt32LE(this, val2, this.l);
                            break;
                        case 8:
                            size = 8;
                            if (f3 === 'f') {
                                write_double_le(this, val2, this.l);
                                break;
                            }
                        case 16:
                            break;
                        case -4:
                            size = 4;
                            __writeInt32LE(this, val2, this.l);
                            break;
                    }
                this.l += size;
                return this;
            }
            function CheckField(hexstr, fld) {
                var m2 = __hexlify(this, this.l, hexstr.length >> 1);
                if (m2 !== hexstr) throw new Error(fld + 'Expected ' + hexstr + ' saw ' + m2);
                this.l += hexstr.length >> 1;
            }
            function prep_blob(blob, pos) {
                blob.l = pos;
                blob.read_shift = ReadShift;
                blob.chk = CheckField;
                blob.write_shift = WriteShift;
            }
            function parsenoop(blob, length) {
                blob.l += length;
            }
            function new_buf(sz) {
                var o = new_raw_buf(sz);
                prep_blob(o, 0);
                return o;
            }
            function recordhopper(data2, cb, opts) {
                if (!data2) return;
                var tmpbyte, cntbyte, length;
                prep_blob(data2, data2.l || 0);
                var L = data2.length,
                    RT = 0,
                    tgt = 0;
                while (data2.l < L) {
                    RT = data2.read_shift(1);
                    if (RT & 128) RT = (RT & 127) + ((data2.read_shift(1) & 127) << 7);
                    var R = XLSBRecordEnum[RT] || XLSBRecordEnum[65535];
                    tmpbyte = data2.read_shift(1);
                    length = tmpbyte & 127;
                    for (cntbyte = 1; cntbyte < 4 && tmpbyte & 128; ++cntbyte)
                        length += ((tmpbyte = data2.read_shift(1)) & 127) << (7 * cntbyte);
                    tgt = data2.l + length;
                    var d = R.f && R.f(data2, length, opts);
                    data2.l = tgt;
                    if (cb(d, R, RT)) return;
                }
            }
            function buf_array() {
                var bufs = [],
                    blksz = has_buf ? 256 : 2048;
                var newblk = function ba_newblk(sz) {
                    var o = new_buf(sz);
                    prep_blob(o, 0);
                    return o;
                };
                var curbuf = newblk(blksz);
                var endbuf = function ba_endbuf() {
                    if (!curbuf) return;
                    if (curbuf.length > curbuf.l) {
                        curbuf = curbuf.slice(0, curbuf.l);
                        curbuf.l = curbuf.length;
                    }
                    if (curbuf.length > 0) bufs.push(curbuf);
                    curbuf = null;
                };
                var next2 = function ba_next(sz) {
                    if (curbuf && sz < curbuf.length - curbuf.l) return curbuf;
                    endbuf();
                    return (curbuf = newblk(Math.max(sz + 1, blksz)));
                };
                var end2 = function ba_end() {
                    endbuf();
                    return bconcat(bufs);
                };
                var push = function ba_push(buf) {
                    endbuf();
                    curbuf = buf;
                    if (curbuf.l == null) curbuf.l = curbuf.length;
                    next2(blksz);
                };
                return { next: next2, push, end: end2, _bufs: bufs };
            }
            function write_record(ba, type, payload, length) {
                var t2 = +type,
                    l;
                if (isNaN(t2)) return;
                if (!length) length = XLSBRecordEnum[t2].p || (payload || []).length || 0;
                l = 1 + (t2 >= 128 ? 1 : 0) + 1;
                if (length >= 128) ++l;
                if (length >= 16384) ++l;
                if (length >= 2097152) ++l;
                var o = ba.next(l);
                if (t2 <= 127) o.write_shift(1, t2);
                else {
                    o.write_shift(1, (t2 & 127) + 128);
                    o.write_shift(1, t2 >> 7);
                }
                for (var i2 = 0; i2 != 4; ++i2) {
                    if (length >= 128) {
                        o.write_shift(1, (length & 127) + 128);
                        length >>= 7;
                    } else {
                        o.write_shift(1, length);
                        break;
                    }
                }
                if (length > 0 && is_buf(payload)) ba.push(payload);
            }
            function shift_cell_xls(cell, tgt, opts) {
                var out = dup(cell);
                if (tgt.s) {
                    if (out.cRel) out.c += tgt.s.c;
                    if (out.rRel) out.r += tgt.s.r;
                } else {
                    if (out.cRel) out.c += tgt.c;
                    if (out.rRel) out.r += tgt.r;
                }
                if (!opts || opts.biff < 12) {
                    while (out.c >= 256) out.c -= 256;
                    while (out.r >= 65536) out.r -= 65536;
                }
                return out;
            }
            function shift_range_xls(cell, range, opts) {
                var out = dup(cell);
                out.s = shift_cell_xls(out.s, range.s, opts);
                out.e = shift_cell_xls(out.e, range.s, opts);
                return out;
            }
            function encode_cell_xls(c, biff) {
                if (c.cRel && c.c < 0) {
                    c = dup(c);
                    while (c.c < 0) c.c += biff > 8 ? 16384 : 256;
                }
                if (c.rRel && c.r < 0) {
                    c = dup(c);
                    while (c.r < 0) c.r += biff > 8 ? 1048576 : biff > 5 ? 65536 : 16384;
                }
                var s2 = encode_cell(c);
                if (!c.cRel && c.cRel != null) s2 = fix_col(s2);
                if (!c.rRel && c.rRel != null) s2 = fix_row(s2);
                return s2;
            }
            function encode_range_xls(r2, opts) {
                if (r2.s.r == 0 && !r2.s.rRel) {
                    if (
                        r2.e.r == (opts.biff >= 12 ? 1048575 : opts.biff >= 8 ? 65536 : 16384) &&
                        !r2.e.rRel
                    ) {
                        return (
                            (r2.s.cRel ? '' : '$') +
                            encode_col(r2.s.c) +
                            ':' +
                            (r2.e.cRel ? '' : '$') +
                            encode_col(r2.e.c)
                        );
                    }
                }
                if (r2.s.c == 0 && !r2.s.cRel) {
                    if (r2.e.c == (opts.biff >= 12 ? 16383 : 255) && !r2.e.cRel) {
                        return (
                            (r2.s.rRel ? '' : '$') +
                            encode_row(r2.s.r) +
                            ':' +
                            (r2.e.rRel ? '' : '$') +
                            encode_row(r2.e.r)
                        );
                    }
                }
                return encode_cell_xls(r2.s, opts.biff) + ':' + encode_cell_xls(r2.e, opts.biff);
            }
            function decode_row(rowstr) {
                return parseInt(unfix_row(rowstr), 10) - 1;
            }
            function encode_row(row) {
                return '' + (row + 1);
            }
            function fix_row(cstr) {
                return cstr.replace(/([A-Z]|^)(\d+)$/, '$1$$$2');
            }
            function unfix_row(cstr) {
                return cstr.replace(/\$(\d+)$/, '$1');
            }
            function decode_col(colstr) {
                var c = unfix_col(colstr),
                    d = 0,
                    i2 = 0;
                for (; i2 !== c.length; ++i2) d = 26 * d + c.charCodeAt(i2) - 64;
                return d - 1;
            }
            function encode_col(col) {
                if (col < 0) throw new Error('invalid column ' + col);
                var s2 = '';
                for (++col; col; col = Math.floor((col - 1) / 26))
                    s2 = String.fromCharCode(((col - 1) % 26) + 65) + s2;
                return s2;
            }
            function fix_col(cstr) {
                return cstr.replace(/^([A-Z])/, '$$$1');
            }
            function unfix_col(cstr) {
                return cstr.replace(/^\$([A-Z])/, '$1');
            }
            function split_cell(cstr) {
                return cstr.replace(/(\$?[A-Z]*)(\$?\d*)/, '$1,$2').split(',');
            }
            function decode_cell(cstr) {
                var R = 0,
                    C = 0;
                for (var i2 = 0; i2 < cstr.length; ++i2) {
                    var cc = cstr.charCodeAt(i2);
                    if (cc >= 48 && cc <= 57) R = 10 * R + (cc - 48);
                    else if (cc >= 65 && cc <= 90) C = 26 * C + (cc - 64);
                }
                return { c: C - 1, r: R - 1 };
            }
            function encode_cell(cell) {
                var col = cell.c + 1;
                var s2 = '';
                for (; col; col = ((col - 1) / 26) | 0)
                    s2 = String.fromCharCode(((col - 1) % 26) + 65) + s2;
                return s2 + (cell.r + 1);
            }
            function decode_range(range) {
                var idx = range.indexOf(':');
                if (idx == -1) return { s: decode_cell(range), e: decode_cell(range) };
                return {
                    s: decode_cell(range.slice(0, idx)),
                    e: decode_cell(range.slice(idx + 1)),
                };
            }
            function encode_range(cs, ce) {
                if (typeof ce === 'undefined' || typeof ce === 'number') {
                    return encode_range(cs.s, cs.e);
                }
                if (typeof cs !== 'string') cs = encode_cell(cs);
                if (typeof ce !== 'string') ce = encode_cell(ce);
                return cs == ce ? cs : cs + ':' + ce;
            }
            function safe_decode_range(range) {
                var o = { s: { c: 0, r: 0 }, e: { c: 0, r: 0 } };
                var idx = 0,
                    i2 = 0,
                    cc = 0;
                var len = range.length;
                for (idx = 0; i2 < len; ++i2) {
                    if ((cc = range.charCodeAt(i2) - 64) < 1 || cc > 26) break;
                    idx = 26 * idx + cc;
                }
                o.s.c = --idx;
                for (idx = 0; i2 < len; ++i2) {
                    if ((cc = range.charCodeAt(i2) - 48) < 0 || cc > 9) break;
                    idx = 10 * idx + cc;
                }
                o.s.r = --idx;
                if (i2 === len || cc != 10) {
                    o.e.c = o.s.c;
                    o.e.r = o.s.r;
                    return o;
                }
                ++i2;
                for (idx = 0; i2 != len; ++i2) {
                    if ((cc = range.charCodeAt(i2) - 64) < 1 || cc > 26) break;
                    idx = 26 * idx + cc;
                }
                o.e.c = --idx;
                for (idx = 0; i2 != len; ++i2) {
                    if ((cc = range.charCodeAt(i2) - 48) < 0 || cc > 9) break;
                    idx = 10 * idx + cc;
                }
                o.e.r = --idx;
                return o;
            }
            function safe_format_cell(cell, v) {
                var q = cell.t == 'd' && v instanceof Date;
                if (cell.z != null)
                    try {
                        return (cell.w = SSF_format(cell.z, q ? datenum(v) : v));
                    } catch (e2) {}
                try {
                    return (cell.w = SSF_format(
                        (cell.XF || {}).numFmtId || (q ? 14 : 0),
                        q ? datenum(v) : v,
                    ));
                } catch (e2) {
                    return '' + v;
                }
            }
            function format_cell(cell, v, o) {
                if (cell == null || cell.t == null || cell.t == 'z') return '';
                if (cell.w !== void 0) return cell.w;
                if (cell.t == 'd' && !cell.z && o && o.dateNF) cell.z = o.dateNF;
                if (cell.t == 'e') return BErr[cell.v] || cell.v;
                if (v == void 0) return safe_format_cell(cell, cell.v);
                return safe_format_cell(cell, v);
            }
            function sheet_to_workbook(sheet, opts) {
                var n = opts && opts.sheet ? opts.sheet : 'Sheet1';
                var sheets = {};
                sheets[n] = sheet;
                return { SheetNames: [n], Sheets: sheets };
            }
            function sheet_add_aoa(_ws, data2, opts) {
                var o = opts || {};
                var dense = _ws ? Array.isArray(_ws) : o.dense;
                if (DENSE != null && dense == null) dense = DENSE;
                var ws = _ws || (dense ? [] : {});
                var _R = 0,
                    _C = 0;
                if (ws && o.origin != null) {
                    if (typeof o.origin == 'number') _R = o.origin;
                    else {
                        var _origin =
                            typeof o.origin == 'string' ? decode_cell(o.origin) : o.origin;
                        _R = _origin.r;
                        _C = _origin.c;
                    }
                    if (!ws['!ref']) ws['!ref'] = 'A1:A1';
                }
                var range = { s: { c: 1e7, r: 1e7 }, e: { c: 0, r: 0 } };
                if (ws['!ref']) {
                    var _range = safe_decode_range(ws['!ref']);
                    range.s.c = _range.s.c;
                    range.s.r = _range.s.r;
                    range.e.c = Math.max(range.e.c, _range.e.c);
                    range.e.r = Math.max(range.e.r, _range.e.r);
                    if (_R == -1) range.e.r = _R = _range.e.r + 1;
                }
                for (var R = 0; R != data2.length; ++R) {
                    if (!data2[R]) continue;
                    if (!Array.isArray(data2[R]))
                        throw new Error('aoa_to_sheet expects an array of arrays');
                    for (var C = 0; C != data2[R].length; ++C) {
                        if (typeof data2[R][C] === 'undefined') continue;
                        var cell = { v: data2[R][C] };
                        var __R = _R + R,
                            __C = _C + C;
                        if (range.s.r > __R) range.s.r = __R;
                        if (range.s.c > __C) range.s.c = __C;
                        if (range.e.r < __R) range.e.r = __R;
                        if (range.e.c < __C) range.e.c = __C;
                        if (
                            data2[R][C] &&
                            typeof data2[R][C] === 'object' &&
                            !Array.isArray(data2[R][C]) &&
                            !(data2[R][C] instanceof Date)
                        )
                            cell = data2[R][C];
                        else {
                            if (Array.isArray(cell.v)) {
                                cell.f = data2[R][C][1];
                                cell.v = cell.v[0];
                            }
                            if (cell.v === null) {
                                if (cell.f) cell.t = 'n';
                                else if (o.nullError) {
                                    cell.t = 'e';
                                    cell.v = 0;
                                } else if (!o.sheetStubs) continue;
                                else cell.t = 'z';
                            } else if (typeof cell.v === 'number') cell.t = 'n';
                            else if (typeof cell.v === 'boolean') cell.t = 'b';
                            else if (cell.v instanceof Date) {
                                cell.z = o.dateNF || table_fmt[14];
                                if (o.cellDates) {
                                    cell.t = 'd';
                                    cell.w = SSF_format(cell.z, datenum(cell.v));
                                } else {
                                    cell.t = 'n';
                                    cell.v = datenum(cell.v);
                                    cell.w = SSF_format(cell.z, cell.v);
                                }
                            } else cell.t = 's';
                        }
                        if (dense) {
                            if (!ws[__R]) ws[__R] = [];
                            if (ws[__R][__C] && ws[__R][__C].z) cell.z = ws[__R][__C].z;
                            ws[__R][__C] = cell;
                        } else {
                            var cell_ref = encode_cell({ c: __C, r: __R });
                            if (ws[cell_ref] && ws[cell_ref].z) cell.z = ws[cell_ref].z;
                            ws[cell_ref] = cell;
                        }
                    }
                }
                if (range.s.c < 1e7) ws['!ref'] = encode_range(range);
                return ws;
            }
            function aoa_to_sheet(data2, opts) {
                return sheet_add_aoa(null, data2, opts);
            }
            function parse_Int32LE(data2) {
                return data2.read_shift(4, 'i');
            }
            function write_UInt32LE(x2, o) {
                if (!o) o = new_buf(4);
                o.write_shift(4, x2);
                return o;
            }
            function parse_XLWideString(data2) {
                var cchCharacters = data2.read_shift(4);
                return cchCharacters === 0 ? '' : data2.read_shift(cchCharacters, 'dbcs');
            }
            function write_XLWideString(data2, o) {
                var _null = false;
                if (o == null) {
                    _null = true;
                    o = new_buf(4 + 2 * data2.length);
                }
                o.write_shift(4, data2.length);
                if (data2.length > 0) o.write_shift(0, data2, 'dbcs');
                return _null ? o.slice(0, o.l) : o;
            }
            function parse_StrRun(data2) {
                return { ich: data2.read_shift(2), ifnt: data2.read_shift(2) };
            }
            function write_StrRun(run, o) {
                if (!o) o = new_buf(4);
                o.write_shift(2, run.ich || 0);
                o.write_shift(2, run.ifnt || 0);
                return o;
            }
            function parse_RichStr(data2, length) {
                var start = data2.l;
                var flags = data2.read_shift(1);
                var str = parse_XLWideString(data2);
                var rgsStrRun = [];
                var z = { t: str, h: str };
                if ((flags & 1) !== 0) {
                    var dwSizeStrRun = data2.read_shift(4);
                    for (var i2 = 0; i2 != dwSizeStrRun; ++i2) rgsStrRun.push(parse_StrRun(data2));
                    z.r = rgsStrRun;
                } else z.r = [{ ich: 0, ifnt: 0 }];
                data2.l = start + length;
                return z;
            }
            function write_RichStr(str, o) {
                var _null = false;
                if (o == null) {
                    _null = true;
                    o = new_buf(15 + 4 * str.t.length);
                }
                o.write_shift(1, 0);
                write_XLWideString(str.t, o);
                return _null ? o.slice(0, o.l) : o;
            }
            var parse_BrtCommentText = parse_RichStr;
            function write_BrtCommentText(str, o) {
                var _null = false;
                if (o == null) {
                    _null = true;
                    o = new_buf(23 + 4 * str.t.length);
                }
                o.write_shift(1, 1);
                write_XLWideString(str.t, o);
                o.write_shift(4, 1);
                write_StrRun({ ich: 0, ifnt: 0 }, o);
                return _null ? o.slice(0, o.l) : o;
            }
            function parse_XLSBCell(data2) {
                var col = data2.read_shift(4);
                var iStyleRef = data2.read_shift(2);
                iStyleRef += data2.read_shift(1) << 16;
                data2.l++;
                return { c: col, iStyleRef };
            }
            function write_XLSBCell(cell, o) {
                if (o == null) o = new_buf(8);
                o.write_shift(-4, cell.c);
                o.write_shift(3, cell.iStyleRef || cell.s);
                o.write_shift(1, 0);
                return o;
            }
            function parse_XLSBShortCell(data2) {
                var iStyleRef = data2.read_shift(2);
                iStyleRef += data2.read_shift(1) << 16;
                data2.l++;
                return { c: -1, iStyleRef };
            }
            function write_XLSBShortCell(cell, o) {
                if (o == null) o = new_buf(4);
                o.write_shift(3, cell.iStyleRef || cell.s);
                o.write_shift(1, 0);
                return o;
            }
            var parse_XLSBCodeName = parse_XLWideString;
            var write_XLSBCodeName = write_XLWideString;
            function parse_XLNullableWideString(data2) {
                var cchCharacters = data2.read_shift(4);
                return cchCharacters === 0 || cchCharacters === 4294967295
                    ? ''
                    : data2.read_shift(cchCharacters, 'dbcs');
            }
            function write_XLNullableWideString(data2, o) {
                var _null = false;
                if (o == null) {
                    _null = true;
                    o = new_buf(127);
                }
                o.write_shift(4, data2.length > 0 ? data2.length : 4294967295);
                if (data2.length > 0) o.write_shift(0, data2, 'dbcs');
                return _null ? o.slice(0, o.l) : o;
            }
            var parse_XLNameWideString = parse_XLWideString;
            var parse_RelID = parse_XLNullableWideString;
            var write_RelID = write_XLNullableWideString;
            function parse_RkNumber(data2) {
                var b = data2.slice(data2.l, data2.l + 4);
                var fX100 = b[0] & 1,
                    fInt = b[0] & 2;
                data2.l += 4;
                var RK =
                    fInt === 0
                        ? __double([0, 0, 0, 0, b[0] & 252, b[1], b[2], b[3]], 0)
                        : __readInt32LE(b, 0) >> 2;
                return fX100 ? RK / 100 : RK;
            }
            function write_RkNumber(data2, o) {
                if (o == null) o = new_buf(4);
                var fX100 = 0,
                    fInt = 0,
                    d100 = data2 * 100;
                if (data2 == (data2 | 0) && data2 >= -(1 << 29) && data2 < 1 << 29) {
                    fInt = 1;
                } else if (d100 == (d100 | 0) && d100 >= -(1 << 29) && d100 < 1 << 29) {
                    fInt = 1;
                    fX100 = 1;
                }
                if (fInt) o.write_shift(-4, ((fX100 ? d100 : data2) << 2) + (fX100 + 2));
                else throw new Error('unsupported RkNumber ' + data2);
            }
            function parse_RfX(data2) {
                var cell = { s: {}, e: {} };
                cell.s.r = data2.read_shift(4);
                cell.e.r = data2.read_shift(4);
                cell.s.c = data2.read_shift(4);
                cell.e.c = data2.read_shift(4);
                return cell;
            }
            function write_RfX(r2, o) {
                if (!o) o = new_buf(16);
                o.write_shift(4, r2.s.r);
                o.write_shift(4, r2.e.r);
                o.write_shift(4, r2.s.c);
                o.write_shift(4, r2.e.c);
                return o;
            }
            var parse_UncheckedRfX = parse_RfX;
            var write_UncheckedRfX = write_RfX;
            function parse_Xnum(data2) {
                if (data2.length - data2.l < 8) throw 'XLS Xnum Buffer underflow';
                return data2.read_shift(8, 'f');
            }
            function write_Xnum(data2, o) {
                return (o || new_buf(8)).write_shift(8, data2, 'f');
            }
            function parse_BrtColor(data2) {
                var out = {};
                var d = data2.read_shift(1);
                var xColorType = d >>> 1;
                var index2 = data2.read_shift(1);
                var nTS = data2.read_shift(2, 'i');
                var bR = data2.read_shift(1);
                var bG = data2.read_shift(1);
                var bB = data2.read_shift(1);
                data2.l++;
                switch (xColorType) {
                    case 0:
                        out.auto = 1;
                        break;
                    case 1:
                        out.index = index2;
                        var icv = XLSIcv[index2];
                        if (icv) out.rgb = rgb2Hex(icv);
                        break;
                    case 2:
                        out.rgb = rgb2Hex([bR, bG, bB]);
                        break;
                    case 3:
                        out.theme = index2;
                        break;
                }
                if (nTS != 0) out.tint = nTS > 0 ? nTS / 32767 : nTS / 32768;
                return out;
            }
            function write_BrtColor(color, o) {
                if (!o) o = new_buf(8);
                if (!color || color.auto) {
                    o.write_shift(4, 0);
                    o.write_shift(4, 0);
                    return o;
                }
                if (color.index != null) {
                    o.write_shift(1, 2);
                    o.write_shift(1, color.index);
                } else if (color.theme != null) {
                    o.write_shift(1, 6);
                    o.write_shift(1, color.theme);
                } else {
                    o.write_shift(1, 5);
                    o.write_shift(1, 0);
                }
                var nTS = color.tint || 0;
                if (nTS > 0) nTS *= 32767;
                else if (nTS < 0) nTS *= 32768;
                o.write_shift(2, nTS);
                if (!color.rgb || color.theme != null) {
                    o.write_shift(2, 0);
                    o.write_shift(1, 0);
                    o.write_shift(1, 0);
                } else {
                    var rgb = color.rgb || 'FFFFFF';
                    if (typeof rgb == 'number') rgb = ('000000' + rgb.toString(16)).slice(-6);
                    o.write_shift(1, parseInt(rgb.slice(0, 2), 16));
                    o.write_shift(1, parseInt(rgb.slice(2, 4), 16));
                    o.write_shift(1, parseInt(rgb.slice(4, 6), 16));
                    o.write_shift(1, 255);
                }
                return o;
            }
            function parse_FontFlags(data2) {
                var d = data2.read_shift(1);
                data2.l++;
                var out = {
                    fBold: d & 1,
                    fItalic: d & 2,
                    fUnderline: d & 4,
                    fStrikeout: d & 8,
                    fOutline: d & 16,
                    fShadow: d & 32,
                    fCondense: d & 64,
                    fExtend: d & 128,
                };
                return out;
            }
            function write_FontFlags(font, o) {
                if (!o) o = new_buf(2);
                var grbit =
                    (font.italic ? 2 : 0) |
                    (font.strike ? 8 : 0) |
                    (font.outline ? 16 : 0) |
                    (font.shadow ? 32 : 0) |
                    (font.condense ? 64 : 0) |
                    (font.extend ? 128 : 0);
                o.write_shift(1, grbit);
                o.write_shift(1, 0);
                return o;
            }
            function parse_ClipboardFormatOrString(o, w) {
                var ClipFmt = { 2: 'BITMAP', 3: 'METAFILEPICT', 8: 'DIB', 14: 'ENHMETAFILE' };
                var m2 = o.read_shift(4);
                switch (m2) {
                    case 0:
                        return '';
                    case 4294967295:
                    case 4294967294:
                        return ClipFmt[o.read_shift(4)] || '';
                }
                if (m2 > 400) throw new Error('Unsupported Clipboard: ' + m2.toString(16));
                o.l -= 4;
                return o.read_shift(0, w == 1 ? 'lpstr' : 'lpwstr');
            }
            function parse_ClipboardFormatOrAnsiString(o) {
                return parse_ClipboardFormatOrString(o, 1);
            }
            function parse_ClipboardFormatOrUnicodeString(o) {
                return parse_ClipboardFormatOrString(o, 2);
            }
            var VT_I2 = 2;
            var VT_I4 = 3;
            var VT_BOOL = 11;
            var VT_VARIANT = 12;
            var VT_UI4 = 19;
            var VT_LPSTR = 30;
            var VT_FILETIME = 64;
            var VT_BLOB = 65;
            var VT_CF = 71;
            var VT_VECTOR = 4096;
            var VT_VECTOR_VARIANT = 4108;
            var VT_VECTOR_LPSTR = 4126;
            var VT_STRING = 80;
            var VT_USTR = 81;
            var VT_CUSTOM = [VT_STRING, VT_USTR];
            var DocSummaryPIDDSI = {
                1: { n: 'CodePage', t: VT_I2 },
                2: { n: 'Category', t: VT_STRING },
                3: { n: 'PresentationFormat', t: VT_STRING },
                4: { n: 'ByteCount', t: VT_I4 },
                5: { n: 'LineCount', t: VT_I4 },
                6: { n: 'ParagraphCount', t: VT_I4 },
                7: { n: 'SlideCount', t: VT_I4 },
                8: { n: 'NoteCount', t: VT_I4 },
                9: { n: 'HiddenCount', t: VT_I4 },
                10: { n: 'MultimediaClipCount', t: VT_I4 },
                11: { n: 'ScaleCrop', t: VT_BOOL },
                12: {
                    n: 'HeadingPairs',
                    t: VT_VECTOR_VARIANT,
                    /* VT_VECTOR | VT_VARIANT */
                },
                13: {
                    n: 'TitlesOfParts',
                    t: VT_VECTOR_LPSTR,
                    /* VT_VECTOR | VT_LPSTR */
                },
                14: { n: 'Manager', t: VT_STRING },
                15: { n: 'Company', t: VT_STRING },
                16: { n: 'LinksUpToDate', t: VT_BOOL },
                17: { n: 'CharacterCount', t: VT_I4 },
                19: { n: 'SharedDoc', t: VT_BOOL },
                22: { n: 'HyperlinksChanged', t: VT_BOOL },
                23: { n: 'AppVersion', t: VT_I4, p: 'version' },
                24: { n: 'DigSig', t: VT_BLOB },
                26: { n: 'ContentType', t: VT_STRING },
                27: { n: 'ContentStatus', t: VT_STRING },
                28: { n: 'Language', t: VT_STRING },
                29: { n: 'Version', t: VT_STRING },
                255: {},
                /* [MS-OLEPS] 2.18 */
                2147483648: { n: 'Locale', t: VT_UI4 },
                2147483651: { n: 'Behavior', t: VT_UI4 },
                1919054434: {},
            };
            var SummaryPIDSI = {
                1: { n: 'CodePage', t: VT_I2 },
                2: { n: 'Title', t: VT_STRING },
                3: { n: 'Subject', t: VT_STRING },
                4: { n: 'Author', t: VT_STRING },
                5: { n: 'Keywords', t: VT_STRING },
                6: { n: 'Comments', t: VT_STRING },
                7: { n: 'Template', t: VT_STRING },
                8: { n: 'LastAuthor', t: VT_STRING },
                9: { n: 'RevNumber', t: VT_STRING },
                10: { n: 'EditTime', t: VT_FILETIME },
                11: { n: 'LastPrinted', t: VT_FILETIME },
                12: { n: 'CreatedDate', t: VT_FILETIME },
                13: { n: 'ModifiedDate', t: VT_FILETIME },
                14: { n: 'PageCount', t: VT_I4 },
                15: { n: 'WordCount', t: VT_I4 },
                16: { n: 'CharCount', t: VT_I4 },
                17: { n: 'Thumbnail', t: VT_CF },
                18: { n: 'Application', t: VT_STRING },
                19: { n: 'DocSecurity', t: VT_I4 },
                255: {},
                /* [MS-OLEPS] 2.18 */
                2147483648: { n: 'Locale', t: VT_UI4 },
                2147483651: { n: 'Behavior', t: VT_UI4 },
                1919054434: {},
            };
            var CountryEnum = {
                1: 'US',
                // United States
                2: 'CA',
                // Canada
                3: '',
                // Latin America (except Brazil)
                7: 'RU',
                // Russia
                20: 'EG',
                // Egypt
                30: 'GR',
                // Greece
                31: 'NL',
                // Netherlands
                32: 'BE',
                // Belgium
                33: 'FR',
                // France
                34: 'ES',
                // Spain
                36: 'HU',
                // Hungary
                39: 'IT',
                // Italy
                41: 'CH',
                // Switzerland
                43: 'AT',
                // Austria
                44: 'GB',
                // United Kingdom
                45: 'DK',
                // Denmark
                46: 'SE',
                // Sweden
                47: 'NO',
                // Norway
                48: 'PL',
                // Poland
                49: 'DE',
                // Germany
                52: 'MX',
                // Mexico
                55: 'BR',
                // Brazil
                61: 'AU',
                // Australia
                64: 'NZ',
                // New Zealand
                66: 'TH',
                // Thailand
                81: 'JP',
                // Japan
                82: 'KR',
                // Korea
                84: 'VN',
                // Viet Nam
                86: 'CN',
                // China
                90: 'TR',
                // Turkey
                105: 'JS',
                // Ramastan
                213: 'DZ',
                // Algeria
                216: 'MA',
                // Morocco
                218: 'LY',
                // Libya
                351: 'PT',
                // Portugal
                354: 'IS',
                // Iceland
                358: 'FI',
                // Finland
                420: 'CZ',
                // Czech Republic
                886: 'TW',
                // Taiwan
                961: 'LB',
                // Lebanon
                962: 'JO',
                // Jordan
                963: 'SY',
                // Syria
                964: 'IQ',
                // Iraq
                965: 'KW',
                // Kuwait
                966: 'SA',
                // Saudi Arabia
                971: 'AE',
                // United Arab Emirates
                972: 'IL',
                // Israel
                974: 'QA',
                // Qatar
                981: 'IR',
                // Iran
                65535: 'US',
                // United States
            };
            var XLSFillPattern = [
                null,
                'solid',
                'mediumGray',
                'darkGray',
                'lightGray',
                'darkHorizontal',
                'darkVertical',
                'darkDown',
                'darkUp',
                'darkGrid',
                'darkTrellis',
                'lightHorizontal',
                'lightVertical',
                'lightDown',
                'lightUp',
                'lightGrid',
                'lightTrellis',
                'gray125',
                'gray0625',
            ];
            function rgbify(arr) {
                return arr.map(function (x2) {
                    return [(x2 >> 16) & 255, (x2 >> 8) & 255, x2 & 255];
                });
            }
            var _XLSIcv = rgbify([
                /* Color Constants */
                0, 16777215, 16711680, 65280, 255, 16776960, 16711935, 65535,
                /* Overridable Defaults */
                0, 16777215, 16711680, 65280, 255, 16776960, 16711935, 65535, 8388608, 32768, 128,
                8421376, 8388736, 32896, 12632256, 8421504, 10066431, 10040166, 16777164, 13434879,
                6684774, 16744576, 26316, 13421823, 128, 16711935, 16776960, 65535, 8388736,
                8388608, 32896, 255, 52479, 13434879, 13434828, 16777113, 10079487, 16751052,
                13408767, 16764057, 3368703, 3394764, 10079232, 16763904, 16750848, 16737792,
                6710937, 9868950, 13158, 3381606, 13056, 3355392, 10040064, 10040166, 3355545,
                3355443 /* Other entries to appease BIFF8/12 */,
                16777215 /* 0x40 icvForeground ?? */, 0 /* 0x41 icvBackground ?? */,
                0 /* 0x42 icvFrame ?? */, 0 /* 0x43 icv3D ?? */, 0 /* 0x44 icv3DText ?? */,
                0 /* 0x45 icv3DHilite ?? */, 0 /* 0x46 icv3DShadow ?? */, 0 /* 0x47 icvHilite ?? */,
                0 /* 0x48 icvCtlText ?? */, 0 /* 0x49 icvCtlScrl ?? */, 0 /* 0x4A icvCtlInv ?? */,
                0 /* 0x4B icvCtlBody ?? */, 0 /* 0x4C icvCtlFrame ?? */, 0 /* 0x4D icvCtlFore ?? */,
                0 /* 0x4E icvCtlBack ?? */, 0 /* 0x4F icvCtlNeutral */, 0 /* 0x50 icvInfoBk ?? */,
                0,
                /* 0x51 icvInfoText ?? */
            ]);
            var XLSIcv = dup(_XLSIcv);
            var BErr = {
                0: '#NULL!',
                7: '#DIV/0!',
                15: '#VALUE!',
                23: '#REF!',
                29: '#NAME?',
                36: '#NUM!',
                42: '#N/A',
                43: '#GETTING_DATA',
                255: '#WTF?',
            };
            var RBErr = {
                '#NULL!': 0,
                '#DIV/0!': 7,
                '#VALUE!': 15,
                '#REF!': 23,
                '#NAME?': 29,
                '#NUM!': 36,
                '#N/A': 42,
                '#GETTING_DATA': 43,
                '#WTF?': 255,
            };
            var ct2type = {
                /* Workbook */
                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml':
                    'workbooks',
                'application/vnd.ms-excel.sheet.macroEnabled.main+xml': 'workbooks',
                'application/vnd.ms-excel.sheet.binary.macroEnabled.main': 'workbooks',
                'application/vnd.ms-excel.addin.macroEnabled.main+xml': 'workbooks',
                'application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml':
                    'workbooks',
                /* Worksheet */
                'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml':
                    'sheets',
                'application/vnd.ms-excel.worksheet': 'sheets',
                'application/vnd.ms-excel.binIndexWs': 'TODO',
                /* Binary Index */
                /* Chartsheet */
                'application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml':
                    'charts',
                'application/vnd.ms-excel.chartsheet': 'charts',
                /* Macrosheet */
                'application/vnd.ms-excel.macrosheet+xml': 'macros',
                'application/vnd.ms-excel.macrosheet': 'macros',
                'application/vnd.ms-excel.intlmacrosheet': 'TODO',
                'application/vnd.ms-excel.binIndexMs': 'TODO',
                /* Binary Index */
                /* Dialogsheet */
                'application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml':
                    'dialogs',
                'application/vnd.ms-excel.dialogsheet': 'dialogs',
                /* Shared Strings */
                'application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml':
                    'strs',
                'application/vnd.ms-excel.sharedStrings': 'strs',
                /* Styles */
                'application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml': 'styles',
                'application/vnd.ms-excel.styles': 'styles',
                /* File Properties */
                'application/vnd.openxmlformats-package.core-properties+xml': 'coreprops',
                'application/vnd.openxmlformats-officedocument.custom-properties+xml': 'custprops',
                'application/vnd.openxmlformats-officedocument.extended-properties+xml': 'extprops',
                /* Custom Data Properties */
                'application/vnd.openxmlformats-officedocument.customXmlProperties+xml': 'TODO',
                'application/vnd.openxmlformats-officedocument.spreadsheetml.customProperty':
                    'TODO',
                /* Comments */
                'application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml':
                    'comments',
                'application/vnd.ms-excel.comments': 'comments',
                'application/vnd.ms-excel.threadedcomments+xml': 'threadedcomments',
                'application/vnd.ms-excel.person+xml': 'people',
                /* Metadata (Stock/Geography and Dynamic Array) */
                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml':
                    'metadata',
                'application/vnd.ms-excel.sheetMetadata': 'metadata',
                /* PivotTable */
                'application/vnd.ms-excel.pivotTable': 'TODO',
                'application/vnd.openxmlformats-officedocument.spreadsheetml.pivotTable+xml':
                    'TODO',
                /* Chart Objects */
                'application/vnd.openxmlformats-officedocument.drawingml.chart+xml': 'TODO',
                /* Chart Colors */
                'application/vnd.ms-office.chartcolorstyle+xml': 'TODO',
                /* Chart Style */
                'application/vnd.ms-office.chartstyle+xml': 'TODO',
                /* Chart Advanced */
                'application/vnd.ms-office.chartex+xml': 'TODO',
                /* Calculation Chain */
                'application/vnd.ms-excel.calcChain': 'calcchains',
                'application/vnd.openxmlformats-officedocument.spreadsheetml.calcChain+xml':
                    'calcchains',
                /* Printer Settings */
                'application/vnd.openxmlformats-officedocument.spreadsheetml.printerSettings':
                    'TODO',
                /* ActiveX */
                'application/vnd.ms-office.activeX': 'TODO',
                'application/vnd.ms-office.activeX+xml': 'TODO',
                /* Custom Toolbars */
                'application/vnd.ms-excel.attachedToolbars': 'TODO',
                /* External Data Connections */
                'application/vnd.ms-excel.connections': 'TODO',
                'application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml':
                    'TODO',
                /* External Links */
                'application/vnd.ms-excel.externalLink': 'links',
                'application/vnd.openxmlformats-officedocument.spreadsheetml.externalLink+xml':
                    'links',
                /* PivotCache */
                'application/vnd.ms-excel.pivotCacheDefinition': 'TODO',
                'application/vnd.ms-excel.pivotCacheRecords': 'TODO',
                'application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheDefinition+xml':
                    'TODO',
                'application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheRecords+xml':
                    'TODO',
                /* Query Table */
                'application/vnd.ms-excel.queryTable': 'TODO',
                'application/vnd.openxmlformats-officedocument.spreadsheetml.queryTable+xml':
                    'TODO',
                /* Shared Workbook */
                'application/vnd.ms-excel.userNames': 'TODO',
                'application/vnd.ms-excel.revisionHeaders': 'TODO',
                'application/vnd.ms-excel.revisionLog': 'TODO',
                'application/vnd.openxmlformats-officedocument.spreadsheetml.revisionHeaders+xml':
                    'TODO',
                'application/vnd.openxmlformats-officedocument.spreadsheetml.revisionLog+xml':
                    'TODO',
                'application/vnd.openxmlformats-officedocument.spreadsheetml.userNames+xml': 'TODO',
                /* Single Cell Table */
                'application/vnd.ms-excel.tableSingleCells': 'TODO',
                'application/vnd.openxmlformats-officedocument.spreadsheetml.tableSingleCells+xml':
                    'TODO',
                /* Slicer */
                'application/vnd.ms-excel.slicer': 'TODO',
                'application/vnd.ms-excel.slicerCache': 'TODO',
                'application/vnd.ms-excel.slicer+xml': 'TODO',
                'application/vnd.ms-excel.slicerCache+xml': 'TODO',
                /* Sort Map */
                'application/vnd.ms-excel.wsSortMap': 'TODO',
                /* Table */
                'application/vnd.ms-excel.table': 'TODO',
                'application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml': 'TODO',
                /* Themes */
                'application/vnd.openxmlformats-officedocument.theme+xml': 'themes',
                /* Theme Override */
                'application/vnd.openxmlformats-officedocument.themeOverride+xml': 'TODO',
                /* Timeline */
                'application/vnd.ms-excel.Timeline+xml': 'TODO',
                /* verify */
                'application/vnd.ms-excel.TimelineCache+xml': 'TODO',
                /* verify */
                /* VBA */
                'application/vnd.ms-office.vbaProject': 'vba',
                'application/vnd.ms-office.vbaProjectSignature': 'TODO',
                /* Volatile Dependencies */
                'application/vnd.ms-office.volatileDependencies': 'TODO',
                'application/vnd.openxmlformats-officedocument.spreadsheetml.volatileDependencies+xml':
                    'TODO',
                /* Control Properties */
                'application/vnd.ms-excel.controlproperties+xml': 'TODO',
                /* Data Model */
                'application/vnd.openxmlformats-officedocument.model+data': 'TODO',
                /* Survey */
                'application/vnd.ms-excel.Survey+xml': 'TODO',
                /* Drawing */
                'application/vnd.openxmlformats-officedocument.drawing+xml': 'drawings',
                'application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml': 'TODO',
                'application/vnd.openxmlformats-officedocument.drawingml.diagramColors+xml': 'TODO',
                'application/vnd.openxmlformats-officedocument.drawingml.diagramData+xml': 'TODO',
                'application/vnd.openxmlformats-officedocument.drawingml.diagramLayout+xml': 'TODO',
                'application/vnd.openxmlformats-officedocument.drawingml.diagramStyle+xml': 'TODO',
                /* VML */
                'application/vnd.openxmlformats-officedocument.vmlDrawing': 'TODO',
                'application/vnd.openxmlformats-package.relationships+xml': 'rels',
                'application/vnd.openxmlformats-officedocument.oleObject': 'TODO',
                /* Image */
                'image/png': 'TODO',
                sheet: 'js',
            };
            var CT_LIST = {
                workbooks: {
                    xlsx: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml',
                    xlsm: 'application/vnd.ms-excel.sheet.macroEnabled.main+xml',
                    xlsb: 'application/vnd.ms-excel.sheet.binary.macroEnabled.main',
                    xlam: 'application/vnd.ms-excel.addin.macroEnabled.main+xml',
                    xltx: 'application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml',
                },
                strs: {
                    /* Shared Strings */
                    xlsx: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml',
                    xlsb: 'application/vnd.ms-excel.sharedStrings',
                },
                comments: {
                    /* Comments */
                    xlsx: 'application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml',
                    xlsb: 'application/vnd.ms-excel.comments',
                },
                sheets: {
                    /* Worksheet */
                    xlsx: 'application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml',
                    xlsb: 'application/vnd.ms-excel.worksheet',
                },
                charts: {
                    /* Chartsheet */
                    xlsx: 'application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml',
                    xlsb: 'application/vnd.ms-excel.chartsheet',
                },
                dialogs: {
                    /* Dialogsheet */
                    xlsx: 'application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml',
                    xlsb: 'application/vnd.ms-excel.dialogsheet',
                },
                macros: {
                    /* Macrosheet (Excel 4.0 Macros) */
                    xlsx: 'application/vnd.ms-excel.macrosheet+xml',
                    xlsb: 'application/vnd.ms-excel.macrosheet',
                },
                metadata: {
                    /* Metadata (Stock/Geography and Dynamic Array) */
                    xlsx: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml',
                    xlsb: 'application/vnd.ms-excel.sheetMetadata',
                },
                styles: {
                    /* Styles */
                    xlsx: 'application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml',
                    xlsb: 'application/vnd.ms-excel.styles',
                },
            };
            function new_ct() {
                return {
                    workbooks: [],
                    sheets: [],
                    charts: [],
                    dialogs: [],
                    macros: [],
                    rels: [],
                    strs: [],
                    comments: [],
                    threadedcomments: [],
                    links: [],
                    coreprops: [],
                    extprops: [],
                    custprops: [],
                    themes: [],
                    styles: [],
                    calcchains: [],
                    vba: [],
                    drawings: [],
                    metadata: [],
                    people: [],
                    TODO: [],
                    xmlns: '',
                };
            }
            function parse_ct(data2) {
                var ct = new_ct();
                if (!data2 || !data2.match) return ct;
                var ctext = {};
                (data2.match(tagregex) || []).forEach(function (x2) {
                    var y = parsexmltag(x2);
                    switch (y[0].replace(nsregex, '<')) {
                        case '<?xml':
                            break;
                        case '<Types':
                            ct.xmlns = y['xmlns' + (y[0].match(/<(\w+):/) || ['', ''])[1]];
                            break;
                        case '<Default':
                            ctext[y.Extension] = y.ContentType;
                            break;
                        case '<Override':
                            if (ct[ct2type[y.ContentType]] !== void 0)
                                ct[ct2type[y.ContentType]].push(y.PartName);
                            break;
                    }
                });
                if (ct.xmlns !== XMLNS.CT) throw new Error('Unknown Namespace: ' + ct.xmlns);
                ct.calcchain = ct.calcchains.length > 0 ? ct.calcchains[0] : '';
                ct.sst = ct.strs.length > 0 ? ct.strs[0] : '';
                ct.style = ct.styles.length > 0 ? ct.styles[0] : '';
                ct.defaults = ctext;
                delete ct.calcchains;
                return ct;
            }
            function write_ct(ct, opts) {
                var type2ct = evert_arr(ct2type);
                var o = [],
                    v;
                o[o.length] = XML_HEADER;
                o[o.length] = writextag('Types', null, {
                    xmlns: XMLNS.CT,
                    'xmlns:xsd': XMLNS.xsd,
                    'xmlns:xsi': XMLNS.xsi,
                });
                o = o.concat(
                    [
                        ['xml', 'application/xml'],
                        ['bin', 'application/vnd.ms-excel.sheet.binary.macroEnabled.main'],
                        ['vml', 'application/vnd.openxmlformats-officedocument.vmlDrawing'],
                        ['data', 'application/vnd.openxmlformats-officedocument.model+data'],
                        /* from test files */
                        ['bmp', 'image/bmp'],
                        ['png', 'image/png'],
                        ['gif', 'image/gif'],
                        ['emf', 'image/x-emf'],
                        ['wmf', 'image/x-wmf'],
                        ['jpg', 'image/jpeg'],
                        ['jpeg', 'image/jpeg'],
                        ['tif', 'image/tiff'],
                        ['tiff', 'image/tiff'],
                        ['pdf', 'application/pdf'],
                        ['rels', 'application/vnd.openxmlformats-package.relationships+xml'],
                    ].map(function (x2) {
                        return writextag('Default', null, { Extension: x2[0], ContentType: x2[1] });
                    }),
                );
                var f1 = function (w) {
                    if (ct[w] && ct[w].length > 0) {
                        v = ct[w][0];
                        o[o.length] = writextag('Override', null, {
                            PartName: (v[0] == '/' ? '' : '/') + v,
                            ContentType: CT_LIST[w][opts.bookType] || CT_LIST[w]['xlsx'],
                        });
                    }
                };
                var f22 = function (w) {
                    (ct[w] || []).forEach(function (v2) {
                        o[o.length] = writextag('Override', null, {
                            PartName: (v2[0] == '/' ? '' : '/') + v2,
                            ContentType: CT_LIST[w][opts.bookType] || CT_LIST[w]['xlsx'],
                        });
                    });
                };
                var f3 = function (t2) {
                    (ct[t2] || []).forEach(function (v2) {
                        o[o.length] = writextag('Override', null, {
                            PartName: (v2[0] == '/' ? '' : '/') + v2,
                            ContentType: type2ct[t2][0],
                        });
                    });
                };
                f1('workbooks');
                f22('sheets');
                f22('charts');
                f3('themes');
                ['strs', 'styles'].forEach(f1);
                ['coreprops', 'extprops', 'custprops'].forEach(f3);
                f3('vba');
                f3('comments');
                f3('threadedcomments');
                f3('drawings');
                f22('metadata');
                f3('people');
                if (o.length > 2) {
                    o[o.length] = '</Types>';
                    o[1] = o[1].replace('/>', '>');
                }
                return o.join('');
            }
            var RELS = {
                WB: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument',
                SHEET: 'http://sheetjs.openxmlformats.org/officeDocument/2006/relationships/officeDocument',
                HLINK: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink',
                VML: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/vmlDrawing',
                XPATH: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/externalLinkPath',
                XMISS: 'http://schemas.microsoft.com/office/2006/relationships/xlExternalLinkPath/xlPathMissing',
                XLINK: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/externalLink',
                CXML: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXml',
                CXMLP: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXmlProps',
                CMNT: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/comments',
                CORE_PROPS:
                    'http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties',
                EXT_PROPS:
                    'http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties',
                CUST_PROPS:
                    'http://schemas.openxmlformats.org/officeDocument/2006/relationships/custom-properties',
                SST: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings',
                STY: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles',
                THEME: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme',
                CHART: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart',
                CHARTEX: 'http://schemas.microsoft.com/office/2014/relationships/chartEx',
                CS: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/chartsheet',
                WS: [
                    'http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet',
                    'http://purl.oclc.org/ooxml/officeDocument/relationships/worksheet',
                ],
                DS: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/dialogsheet',
                MS: 'http://schemas.microsoft.com/office/2006/relationships/xlMacrosheet',
                IMG: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/image',
                DRAW: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing',
                XLMETA: 'http://schemas.openxmlformats.org/officeDocument/2006/relationships/sheetMetadata',
                TCMNT: 'http://schemas.microsoft.com/office/2017/10/relationships/threadedComment',
                PEOPLE: 'http://schemas.microsoft.com/office/2017/10/relationships/person',
                VBA: 'http://schemas.microsoft.com/office/2006/relationships/vbaProject',
            };
            function get_rels_path(file) {
                var n = file.lastIndexOf('/');
                return file.slice(0, n + 1) + '_rels/' + file.slice(n + 1) + '.rels';
            }
            function parse_rels(data2, currentFilePath) {
                var rels = { '!id': {} };
                if (!data2) return rels;
                if (currentFilePath.charAt(0) !== '/') {
                    currentFilePath = '/' + currentFilePath;
                }
                var hash = {};
                (data2.match(tagregex) || []).forEach(function (x2) {
                    var y = parsexmltag(x2);
                    if (y[0] === '<Relationship') {
                        var rel = {};
                        rel.Type = y.Type;
                        rel.Target = y.Target;
                        rel.Id = y.Id;
                        if (y.TargetMode) rel.TargetMode = y.TargetMode;
                        var canonictarget =
                            y.TargetMode === 'External'
                                ? y.Target
                                : resolve_path(y.Target, currentFilePath);
                        rels[canonictarget] = rel;
                        hash[y.Id] = rel;
                    }
                });
                rels['!id'] = hash;
                return rels;
            }
            function write_rels(rels) {
                var o = [
                    XML_HEADER,
                    writextag('Relationships', null, {
                        //'xmlns:ns0': XMLNS.RELS,
                        xmlns: XMLNS.RELS,
                    }),
                ];
                keys(rels['!id']).forEach(function (rid) {
                    o[o.length] = writextag('Relationship', null, rels['!id'][rid]);
                });
                if (o.length > 2) {
                    o[o.length] = '</Relationships>';
                    o[1] = o[1].replace('/>', '>');
                }
                return o.join('');
            }
            function add_rels(rels, rId, f3, type, relobj, targetmode) {
                if (!relobj) relobj = {};
                if (!rels['!id']) rels['!id'] = {};
                if (!rels['!idx']) rels['!idx'] = 1;
                if (rId < 0) for (rId = rels['!idx']; rels['!id']['rId' + rId]; ++rId) {}
                rels['!idx'] = rId + 1;
                relobj.Id = 'rId' + rId;
                relobj.Type = type;
                relobj.Target = f3;
                if (targetmode) relobj.TargetMode = targetmode;
                else if ([RELS.HLINK, RELS.XPATH, RELS.XMISS].indexOf(relobj.Type) > -1)
                    relobj.TargetMode = 'External';
                if (rels['!id'][relobj.Id]) throw new Error('Cannot rewrite rId ' + rId);
                rels['!id'][relobj.Id] = relobj;
                rels[('/' + relobj.Target).replace('//', '/')] = relobj;
                return rId;
            }
            var CT_ODS = 'application/vnd.oasis.opendocument.spreadsheet';
            function parse_manifest(d, opts) {
                var str = xlml_normalize(d);
                var Rn;
                var FEtag;
                while ((Rn = xlmlregex.exec(str)))
                    switch (Rn[3]) {
                        case 'manifest':
                            break;
                        case 'file-entry':
                            FEtag = parsexmltag(Rn[0], false);
                            if (FEtag.path == '/' && FEtag.type !== CT_ODS)
                                throw new Error('This OpenDocument is not a spreadsheet');
                            break;
                        case 'encryption-data':
                        case 'algorithm':
                        case 'start-key-generation':
                        case 'key-derivation':
                            throw new Error('Unsupported ODS Encryption');
                        default:
                            if (opts && opts.WTF) throw Rn;
                    }
            }
            function write_manifest(manifest) {
                var o = [XML_HEADER];
                o.push(
                    '<manifest:manifest xmlns:manifest="urn:oasis:names:tc:opendocument:xmlns:manifest:1.0" manifest:version="1.2">\n',
                );
                o.push(
                    '  <manifest:file-entry manifest:full-path="/" manifest:version="1.2" manifest:media-type="application/vnd.oasis.opendocument.spreadsheet"/>\n',
                );
                for (var i2 = 0; i2 < manifest.length; ++i2)
                    o.push(
                        '  <manifest:file-entry manifest:full-path="' +
                            manifest[i2][0] +
                            '" manifest:media-type="' +
                            manifest[i2][1] +
                            '"/>\n',
                    );
                o.push('</manifest:manifest>');
                return o.join('');
            }
            function write_rdf_type(file, res, tag) {
                return [
                    '  <rdf:Description rdf:about="' + file + '">\n',
                    '    <rdf:type rdf:resource="http://docs.oasis-open.org/ns/office/1.2/meta/' +
                        (tag || 'odf') +
                        '#' +
                        res +
                        '"/>\n',
                    '  </rdf:Description>\n',
                ].join('');
            }
            function write_rdf_has(base, file) {
                return [
                    '  <rdf:Description rdf:about="' + base + '">\n',
                    '    <ns0:hasPart xmlns:ns0="http://docs.oasis-open.org/ns/office/1.2/meta/pkg#" rdf:resource="' +
                        file +
                        '"/>\n',
                    '  </rdf:Description>\n',
                ].join('');
            }
            function write_rdf(rdf) {
                var o = [XML_HEADER];
                o.push('<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">\n');
                for (var i2 = 0; i2 != rdf.length; ++i2) {
                    o.push(write_rdf_type(rdf[i2][0], rdf[i2][1]));
                    o.push(write_rdf_has('', rdf[i2][0]));
                }
                o.push(write_rdf_type('', 'Document', 'pkg'));
                o.push('</rdf:RDF>');
                return o.join('');
            }
            function write_meta_ods() {
                return (
                    '<office:document-meta xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0" xmlns:meta="urn:oasis:names:tc:opendocument:xmlns:meta:1.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xlink="http://www.w3.org/1999/xlink" office:version="1.2"><office:meta><meta:generator>SheetJS ' +
                    XLSX3.version +
                    '</meta:generator></office:meta></office:document-meta>'
                );
            }
            var CORE_PROPS = [
                ['cp:category', 'Category'],
                ['cp:contentStatus', 'ContentStatus'],
                ['cp:keywords', 'Keywords'],
                ['cp:lastModifiedBy', 'LastAuthor'],
                ['cp:lastPrinted', 'LastPrinted'],
                ['cp:revision', 'RevNumber'],
                ['cp:version', 'Version'],
                ['dc:creator', 'Author'],
                ['dc:description', 'Comments'],
                ['dc:identifier', 'Identifier'],
                ['dc:language', 'Language'],
                ['dc:subject', 'Subject'],
                ['dc:title', 'Title'],
                ['dcterms:created', 'CreatedDate', 'date'],
                ['dcterms:modified', 'ModifiedDate', 'date'],
            ];
            var CORE_PROPS_REGEX = (function () {
                var r2 = new Array(CORE_PROPS.length);
                for (var i2 = 0; i2 < CORE_PROPS.length; ++i2) {
                    var f3 = CORE_PROPS[i2];
                    var g =
                        '(?:' +
                        f3[0].slice(0, f3[0].indexOf(':')) +
                        ':)' +
                        f3[0].slice(f3[0].indexOf(':') + 1);
                    r2[i2] = new RegExp('<' + g + '[^>]*>([\\s\\S]*?)</' + g + '>');
                }
                return r2;
            })();
            function parse_core_props(data2) {
                var p = {};
                data2 = utf8read(data2);
                for (var i2 = 0; i2 < CORE_PROPS.length; ++i2) {
                    var f3 = CORE_PROPS[i2],
                        cur = data2.match(CORE_PROPS_REGEX[i2]);
                    if (cur != null && cur.length > 0) p[f3[1]] = unescapexml(cur[1]);
                    if (f3[2] === 'date' && p[f3[1]]) p[f3[1]] = parseDate(p[f3[1]]);
                }
                return p;
            }
            function cp_doit(f3, g, h2, o, p) {
                if (p[f3] != null || g == null || g === '') return;
                p[f3] = g;
                g = escapexml(g);
                o[o.length] = h2 ? writextag(f3, g, h2) : writetag(f3, g);
            }
            function write_core_props(cp, _opts) {
                var opts = _opts || {};
                var o = [
                        XML_HEADER,
                        writextag('cp:coreProperties', null, {
                            //'xmlns': XMLNS.CORE_PROPS,
                            'xmlns:cp': XMLNS.CORE_PROPS,
                            'xmlns:dc': XMLNS.dc,
                            'xmlns:dcterms': XMLNS.dcterms,
                            'xmlns:dcmitype': XMLNS.dcmitype,
                            'xmlns:xsi': XMLNS.xsi,
                        }),
                    ],
                    p = {};
                if (!cp && !opts.Props) return o.join('');
                if (cp) {
                    if (cp.CreatedDate != null)
                        cp_doit(
                            'dcterms:created',
                            typeof cp.CreatedDate === 'string'
                                ? cp.CreatedDate
                                : write_w3cdtf(cp.CreatedDate, opts.WTF),
                            { 'xsi:type': 'dcterms:W3CDTF' },
                            o,
                            p,
                        );
                    if (cp.ModifiedDate != null)
                        cp_doit(
                            'dcterms:modified',
                            typeof cp.ModifiedDate === 'string'
                                ? cp.ModifiedDate
                                : write_w3cdtf(cp.ModifiedDate, opts.WTF),
                            { 'xsi:type': 'dcterms:W3CDTF' },
                            o,
                            p,
                        );
                }
                for (var i2 = 0; i2 != CORE_PROPS.length; ++i2) {
                    var f3 = CORE_PROPS[i2];
                    var v =
                        opts.Props && opts.Props[f3[1]] != null
                            ? opts.Props[f3[1]]
                            : cp
                              ? cp[f3[1]]
                              : null;
                    if (v === true) v = '1';
                    else if (v === false) v = '0';
                    else if (typeof v == 'number') v = String(v);
                    if (v != null) cp_doit(f3[0], v, null, o, p);
                }
                if (o.length > 2) {
                    o[o.length] = '</cp:coreProperties>';
                    o[1] = o[1].replace('/>', '>');
                }
                return o.join('');
            }
            var EXT_PROPS = [
                ['Application', 'Application', 'string'],
                ['AppVersion', 'AppVersion', 'string'],
                ['Company', 'Company', 'string'],
                ['DocSecurity', 'DocSecurity', 'string'],
                ['Manager', 'Manager', 'string'],
                ['HyperlinksChanged', 'HyperlinksChanged', 'bool'],
                ['SharedDoc', 'SharedDoc', 'bool'],
                ['LinksUpToDate', 'LinksUpToDate', 'bool'],
                ['ScaleCrop', 'ScaleCrop', 'bool'],
                ['HeadingPairs', 'HeadingPairs', 'raw'],
                ['TitlesOfParts', 'TitlesOfParts', 'raw'],
            ];
            var PseudoPropsPairs = [
                'Worksheets',
                'SheetNames',
                'NamedRanges',
                'DefinedNames',
                'Chartsheets',
                'ChartNames',
            ];
            function load_props_pairs(HP, TOP, props, opts) {
                var v = [];
                if (typeof HP == 'string') v = parseVector(HP, opts);
                else
                    for (var j = 0; j < HP.length; ++j)
                        v = v.concat(
                            HP[j].map(function (hp) {
                                return { v: hp };
                            }),
                        );
                var parts =
                    typeof TOP == 'string'
                        ? parseVector(TOP, opts).map(function (x2) {
                              return x2.v;
                          })
                        : TOP;
                var idx = 0,
                    len = 0;
                if (parts.length > 0)
                    for (var i2 = 0; i2 !== v.length; i2 += 2) {
                        len = +v[i2 + 1].v;
                        switch (v[i2].v) {
                            case 'Worksheets':
                            case '\u5DE5\u4F5C\u8868':
                            case '\u041B\u0438\u0441\u0442\u044B':
                            case '\u0623\u0648\u0631\u0627\u0642 \u0627\u0644\u0639\u0645\u0644':
                            case '\u30EF\u30FC\u30AF\u30B7\u30FC\u30C8':
                            case '\u05D2\u05DC\u05D9\u05D5\u05E0\u05D5\u05EA \u05E2\u05D1\u05D5\u05D3\u05D4':
                            case 'Arbeitsbl\xE4tter':
                            case '\xC7al\u0131\u015Fma Sayfalar\u0131':
                            case 'Feuilles de calcul':
                            case 'Fogli di lavoro':
                            case 'Folhas de c\xE1lculo':
                            case 'Planilhas':
                            case 'Regneark':
                            case 'Hojas de c\xE1lculo':
                            case 'Werkbladen':
                                props.Worksheets = len;
                                props.SheetNames = parts.slice(idx, idx + len);
                                break;
                            case 'Named Ranges':
                            case 'Rangos con nombre':
                            case '\u540D\u524D\u4ED8\u304D\u4E00\u89A7':
                            case 'Benannte Bereiche':
                            case 'Navngivne omr\xE5der':
                                props.NamedRanges = len;
                                props.DefinedNames = parts.slice(idx, idx + len);
                                break;
                            case 'Charts':
                            case 'Diagramme':
                                props.Chartsheets = len;
                                props.ChartNames = parts.slice(idx, idx + len);
                                break;
                        }
                        idx += len;
                    }
            }
            function parse_ext_props(data2, p, opts) {
                var q = {};
                if (!p) p = {};
                data2 = utf8read(data2);
                EXT_PROPS.forEach(function (f3) {
                    var xml2 = (data2.match(matchtag(f3[0])) || [])[1];
                    switch (f3[2]) {
                        case 'string':
                            if (xml2) p[f3[1]] = unescapexml(xml2);
                            break;
                        case 'bool':
                            p[f3[1]] = xml2 === 'true';
                            break;
                        case 'raw':
                            var cur = data2.match(
                                new RegExp('<' + f3[0] + '[^>]*>([\\s\\S]*?)</' + f3[0] + '>'),
                            );
                            if (cur && cur.length > 0) q[f3[1]] = cur[1];
                            break;
                    }
                });
                if (q.HeadingPairs && q.TitlesOfParts)
                    load_props_pairs(q.HeadingPairs, q.TitlesOfParts, p, opts);
                return p;
            }
            function write_ext_props(cp) {
                var o = [],
                    W = writextag;
                if (!cp) cp = {};
                cp.Application = 'SheetJS';
                o[o.length] = XML_HEADER;
                o[o.length] = writextag('Properties', null, {
                    xmlns: XMLNS.EXT_PROPS,
                    'xmlns:vt': XMLNS.vt,
                });
                EXT_PROPS.forEach(function (f3) {
                    if (cp[f3[1]] === void 0) return;
                    var v;
                    switch (f3[2]) {
                        case 'string':
                            v = escapexml(String(cp[f3[1]]));
                            break;
                        case 'bool':
                            v = cp[f3[1]] ? 'true' : 'false';
                            break;
                    }
                    if (v !== void 0) o[o.length] = W(f3[0], v);
                });
                o[o.length] = W(
                    'HeadingPairs',
                    W(
                        'vt:vector',
                        W('vt:variant', '<vt:lpstr>Worksheets</vt:lpstr>') +
                            W('vt:variant', W('vt:i4', String(cp.Worksheets))),
                        { size: 2, baseType: 'variant' },
                    ),
                );
                o[o.length] = W(
                    'TitlesOfParts',
                    W(
                        'vt:vector',
                        cp.SheetNames.map(function (s2) {
                            return '<vt:lpstr>' + escapexml(s2) + '</vt:lpstr>';
                        }).join(''),
                        { size: cp.Worksheets, baseType: 'lpstr' },
                    ),
                );
                if (o.length > 2) {
                    o[o.length] = '</Properties>';
                    o[1] = o[1].replace('/>', '>');
                }
                return o.join('');
            }
            var custregex = /<[^>]+>[^<]*/g;
            function parse_cust_props(data2, opts) {
                var p = {},
                    name = '';
                var m2 = data2.match(custregex);
                if (m2)
                    for (var i2 = 0; i2 != m2.length; ++i2) {
                        var x2 = m2[i2],
                            y = parsexmltag(x2);
                        switch (y[0]) {
                            case '<?xml':
                                break;
                            case '<Properties':
                                break;
                            case '<property':
                                name = unescapexml(y.name);
                                break;
                            case '</property>':
                                name = null;
                                break;
                            default:
                                if (x2.indexOf('<vt:') === 0) {
                                    var toks = x2.split('>');
                                    var type = toks[0].slice(4),
                                        text3 = toks[1];
                                    switch (type) {
                                        case 'lpstr':
                                        case 'bstr':
                                        case 'lpwstr':
                                            p[name] = unescapexml(text3);
                                            break;
                                        case 'bool':
                                            p[name] = parsexmlbool(text3);
                                            break;
                                        case 'i1':
                                        case 'i2':
                                        case 'i4':
                                        case 'i8':
                                        case 'int':
                                        case 'uint':
                                            p[name] = parseInt(text3, 10);
                                            break;
                                        case 'r4':
                                        case 'r8':
                                        case 'decimal':
                                            p[name] = parseFloat(text3);
                                            break;
                                        case 'filetime':
                                        case 'date':
                                            p[name] = parseDate(text3);
                                            break;
                                        case 'cy':
                                        case 'error':
                                            p[name] = unescapexml(text3);
                                            break;
                                        default:
                                            if (type.slice(-1) == '/') break;
                                            if (opts.WTF && typeof console !== 'undefined')
                                                console.warn('Unexpected', x2, type, toks);
                                    }
                                } else if (x2.slice(0, 2) === '</') {
                                } else if (opts.WTF) throw new Error(x2);
                        }
                    }
                return p;
            }
            function write_cust_props(cp) {
                var o = [
                    XML_HEADER,
                    writextag('Properties', null, {
                        xmlns: XMLNS.CUST_PROPS,
                        'xmlns:vt': XMLNS.vt,
                    }),
                ];
                if (!cp) return o.join('');
                var pid = 1;
                keys(cp).forEach(function custprop(k) {
                    ++pid;
                    o[o.length] = writextag('property', write_vt(cp[k], true), {
                        fmtid: '{D5CDD505-2E9C-101B-9397-08002B2CF9AE}',
                        pid: pid,
                        name: escapexml(k),
                    });
                });
                if (o.length > 2) {
                    o[o.length] = '</Properties>';
                    o[1] = o[1].replace('/>', '>');
                }
                return o.join('');
            }
            var XLMLDocPropsMap = {
                Title: 'Title',
                Subject: 'Subject',
                Author: 'Author',
                Keywords: 'Keywords',
                Comments: 'Description',
                LastAuthor: 'LastAuthor',
                RevNumber: 'Revision',
                Application: 'AppName',
                /* TotalTime: 'TotalTime', */
                LastPrinted: 'LastPrinted',
                CreatedDate: 'Created',
                ModifiedDate: 'LastSaved',
                /* Pages */
                /* Words */
                /* Characters */
                Category: 'Category',
                /* PresentationFormat */
                Manager: 'Manager',
                Company: 'Company',
                /* Guid */
                /* HyperlinkBase */
                /* Bytes */
                /* Lines */
                /* Paragraphs */
                /* CharactersWithSpaces */
                AppVersion: 'Version',
                ContentStatus: 'ContentStatus',
                /* NOTE: missing from schema */
                Identifier: 'Identifier',
                /* NOTE: missing from schema */
                Language: 'Language',
                /* NOTE: missing from schema */
            };
            var evert_XLMLDPM;
            function xlml_set_prop(Props, tag, val2) {
                if (!evert_XLMLDPM) evert_XLMLDPM = evert(XLMLDocPropsMap);
                tag = evert_XLMLDPM[tag] || tag;
                Props[tag] = val2;
            }
            function xlml_write_docprops(Props, opts) {
                var o = [];
                keys(XLMLDocPropsMap)
                    .map(function (m2) {
                        for (var i2 = 0; i2 < CORE_PROPS.length; ++i2)
                            if (CORE_PROPS[i2][1] == m2) return CORE_PROPS[i2];
                        for (i2 = 0; i2 < EXT_PROPS.length; ++i2)
                            if (EXT_PROPS[i2][1] == m2) return EXT_PROPS[i2];
                        throw m2;
                    })
                    .forEach(function (p) {
                        if (Props[p[1]] == null) return;
                        var m2 =
                            opts && opts.Props && opts.Props[p[1]] != null
                                ? opts.Props[p[1]]
                                : Props[p[1]];
                        switch (p[2]) {
                            case 'date':
                                m2 = new Date(m2).toISOString().replace(/\.\d*Z/, 'Z');
                                break;
                        }
                        if (typeof m2 == 'number') m2 = String(m2);
                        else if (m2 === true || m2 === false) {
                            m2 = m2 ? '1' : '0';
                        } else if (m2 instanceof Date)
                            m2 = new Date(m2).toISOString().replace(/\.\d*Z/, '');
                        o.push(writetag(XLMLDocPropsMap[p[1]] || p[1], m2));
                    });
                return writextag('DocumentProperties', o.join(''), { xmlns: XLMLNS.o });
            }
            function xlml_write_custprops(Props, Custprops) {
                var BLACKLIST = ['Worksheets', 'SheetNames'];
                var T = 'CustomDocumentProperties';
                var o = [];
                if (Props)
                    keys(Props).forEach(function (k) {
                        if (!Object.prototype.hasOwnProperty.call(Props, k)) return;
                        for (var i2 = 0; i2 < CORE_PROPS.length; ++i2)
                            if (k == CORE_PROPS[i2][1]) return;
                        for (i2 = 0; i2 < EXT_PROPS.length; ++i2) if (k == EXT_PROPS[i2][1]) return;
                        for (i2 = 0; i2 < BLACKLIST.length; ++i2) if (k == BLACKLIST[i2]) return;
                        var m2 = Props[k];
                        var t2 = 'string';
                        if (typeof m2 == 'number') {
                            t2 = 'float';
                            m2 = String(m2);
                        } else if (m2 === true || m2 === false) {
                            t2 = 'boolean';
                            m2 = m2 ? '1' : '0';
                        } else m2 = String(m2);
                        o.push(writextag(escapexmltag(k), m2, { 'dt:dt': t2 }));
                    });
                if (Custprops)
                    keys(Custprops).forEach(function (k) {
                        if (!Object.prototype.hasOwnProperty.call(Custprops, k)) return;
                        if (Props && Object.prototype.hasOwnProperty.call(Props, k)) return;
                        var m2 = Custprops[k];
                        var t2 = 'string';
                        if (typeof m2 == 'number') {
                            t2 = 'float';
                            m2 = String(m2);
                        } else if (m2 === true || m2 === false) {
                            t2 = 'boolean';
                            m2 = m2 ? '1' : '0';
                        } else if (m2 instanceof Date) {
                            t2 = 'dateTime.tz';
                            m2 = m2.toISOString();
                        } else m2 = String(m2);
                        o.push(writextag(escapexmltag(k), m2, { 'dt:dt': t2 }));
                    });
                return '<' + T + ' xmlns="' + XLMLNS.o + '">' + o.join('') + '</' + T + '>';
            }
            function parse_FILETIME(blob) {
                var dwLowDateTime = blob.read_shift(4),
                    dwHighDateTime = blob.read_shift(4);
                return new Date(
                    ((dwHighDateTime / 1e7) * Math.pow(2, 32) + dwLowDateTime / 1e7 - 11644473600) *
                        1e3,
                )
                    .toISOString()
                    .replace(/\.000/, '');
            }
            function write_FILETIME(time) {
                var date = typeof time == 'string' ? new Date(Date.parse(time)) : time;
                var t2 = date.getTime() / 1e3 + 11644473600;
                var l = t2 % Math.pow(2, 32),
                    h2 = (t2 - l) / Math.pow(2, 32);
                l *= 1e7;
                h2 *= 1e7;
                var w = (l / Math.pow(2, 32)) | 0;
                if (w > 0) {
                    l = l % Math.pow(2, 32);
                    h2 += w;
                }
                var o = new_buf(8);
                o.write_shift(4, l);
                o.write_shift(4, h2);
                return o;
            }
            function parse_lpstr(blob, type, pad) {
                var start = blob.l;
                var str = blob.read_shift(0, 'lpstr-cp');
                if (pad) while ((blob.l - start) & 3) ++blob.l;
                return str;
            }
            function parse_lpwstr(blob, type, pad) {
                var str = blob.read_shift(0, 'lpwstr');
                if (pad) blob.l += (4 - ((str.length + 1) & 3)) & 3;
                return str;
            }
            function parse_VtStringBase(blob, stringType, pad) {
                if (stringType === 31) return parse_lpwstr(blob);
                return parse_lpstr(blob, stringType, pad);
            }
            function parse_VtString(blob, t2, pad) {
                return parse_VtStringBase(blob, t2, pad === false ? 0 : 4);
            }
            function parse_VtUnalignedString(blob, t2) {
                if (!t2) throw new Error('VtUnalignedString must have positive length');
                return parse_VtStringBase(blob, t2, 0);
            }
            function parse_VtVecLpwstrValue(blob) {
                var length = blob.read_shift(4);
                var ret = [];
                for (var i2 = 0; i2 != length; ++i2) {
                    var start = blob.l;
                    ret[i2] = blob.read_shift(0, 'lpwstr').replace(chr0, '');
                    if ((blob.l - start) & 2) blob.l += 2;
                }
                return ret;
            }
            function parse_VtVecUnalignedLpstrValue(blob) {
                var length = blob.read_shift(4);
                var ret = [];
                for (var i2 = 0; i2 != length; ++i2)
                    ret[i2] = blob.read_shift(0, 'lpstr-cp').replace(chr0, '');
                return ret;
            }
            function parse_VtHeadingPair(blob) {
                var start = blob.l;
                var headingString = parse_TypedPropertyValue(blob, VT_USTR);
                if (blob[blob.l] == 0 && blob[blob.l + 1] == 0 && (blob.l - start) & 2) blob.l += 2;
                var headerParts = parse_TypedPropertyValue(blob, VT_I4);
                return [headingString, headerParts];
            }
            function parse_VtVecHeadingPairValue(blob) {
                var cElements = blob.read_shift(4);
                var out = [];
                for (var i2 = 0; i2 < cElements / 2; ++i2) out.push(parse_VtHeadingPair(blob));
                return out;
            }
            function parse_dictionary(blob, CodePage) {
                var cnt = blob.read_shift(4);
                var dict = {};
                for (var j = 0; j != cnt; ++j) {
                    var pid = blob.read_shift(4);
                    var len = blob.read_shift(4);
                    dict[pid] = blob
                        .read_shift(len, CodePage === 1200 ? 'utf16le' : 'utf8')
                        .replace(chr0, '')
                        .replace(chr1, '!');
                    if (CodePage === 1200 && len % 2) blob.l += 2;
                }
                if (blob.l & 3) blob.l = (blob.l >> (2 + 1)) << 2;
                return dict;
            }
            function parse_BLOB(blob) {
                var size = blob.read_shift(4);
                var bytes = blob.slice(blob.l, blob.l + size);
                blob.l += size;
                if ((size & 3) > 0) blob.l += (4 - (size & 3)) & 3;
                return bytes;
            }
            function parse_ClipboardData(blob) {
                var o = {};
                o.Size = blob.read_shift(4);
                blob.l += o.Size + 3 - ((o.Size - 1) % 4);
                return o;
            }
            function parse_TypedPropertyValue(blob, type, _opts) {
                var t2 = blob.read_shift(2),
                    ret,
                    opts = _opts || {};
                blob.l += 2;
                if (type !== VT_VARIANT) {
                    if (
                        t2 !== type &&
                        VT_CUSTOM.indexOf(type) === -1 &&
                        !((type & 65534) == 4126 && (t2 & 65534) == 4126)
                    )
                        throw new Error('Expected type ' + type + ' saw ' + t2);
                }
                switch (type === VT_VARIANT ? t2 : type) {
                    case 2:
                        ret = blob.read_shift(2, 'i');
                        if (!opts.raw) blob.l += 2;
                        return ret;
                    case 3:
                        ret = blob.read_shift(4, 'i');
                        return ret;
                    case 11:
                        return blob.read_shift(4) !== 0;
                    case 19:
                        ret = blob.read_shift(4);
                        return ret;
                    case 30:
                        return parse_lpstr(blob, t2, 4).replace(chr0, '');
                    case 31:
                        return parse_lpwstr(blob);
                    case 64:
                        return parse_FILETIME(blob);
                    case 65:
                        return parse_BLOB(blob);
                    case 71:
                        return parse_ClipboardData(blob);
                    case 80:
                        return parse_VtString(blob, t2, !opts.raw).replace(chr0, '');
                    case 81:
                        return parse_VtUnalignedString(
                            blob,
                            t2,
                            /*, 4*/
                        ).replace(chr0, '');
                    case 4108:
                        return parse_VtVecHeadingPairValue(blob);
                    case 4126:
                    case 4127:
                        return t2 == 4127
                            ? parse_VtVecLpwstrValue(blob)
                            : parse_VtVecUnalignedLpstrValue(blob);
                    default:
                        throw new Error('TypedPropertyValue unrecognized type ' + type + ' ' + t2);
                }
            }
            function write_TypedPropertyValue(type, value) {
                var o = new_buf(4),
                    p = new_buf(4);
                o.write_shift(4, type == 80 ? 31 : type);
                switch (type) {
                    case 3:
                        p.write_shift(-4, value);
                        break;
                    case 5:
                        p = new_buf(8);
                        p.write_shift(8, value, 'f');
                        break;
                    case 11:
                        p.write_shift(4, value ? 1 : 0);
                        break;
                    case 64:
                        p = write_FILETIME(value);
                        break;
                    case 31:
                    case 80:
                        p = new_buf(4 + 2 * (value.length + 1) + (value.length % 2 ? 0 : 2));
                        p.write_shift(4, value.length + 1);
                        p.write_shift(0, value, 'dbcs');
                        while (p.l != p.length) p.write_shift(1, 0);
                        break;
                    default:
                        throw new Error(
                            'TypedPropertyValue unrecognized type ' + type + ' ' + value,
                        );
                }
                return bconcat([o, p]);
            }
            function parse_PropertySet(blob, PIDSI) {
                var start_addr = blob.l;
                var size = blob.read_shift(4);
                var NumProps = blob.read_shift(4);
                var Props = [],
                    i2 = 0;
                var CodePage = 0;
                var Dictionary = -1,
                    DictObj = {};
                for (i2 = 0; i2 != NumProps; ++i2) {
                    var PropID = blob.read_shift(4);
                    var Offset = blob.read_shift(4);
                    Props[i2] = [PropID, Offset + start_addr];
                }
                Props.sort(function (x2, y) {
                    return x2[1] - y[1];
                });
                var PropH = {};
                for (i2 = 0; i2 != NumProps; ++i2) {
                    if (blob.l !== Props[i2][1]) {
                        var fail = true;
                        if (i2 > 0 && PIDSI)
                            switch (PIDSI[Props[i2 - 1][0]].t) {
                                case 2:
                                    if (blob.l + 2 === Props[i2][1]) {
                                        blob.l += 2;
                                        fail = false;
                                    }
                                    break;
                                case 80:
                                    if (blob.l <= Props[i2][1]) {
                                        blob.l = Props[i2][1];
                                        fail = false;
                                    }
                                    break;
                                case 4108:
                                    if (blob.l <= Props[i2][1]) {
                                        blob.l = Props[i2][1];
                                        fail = false;
                                    }
                                    break;
                            }
                        if ((!PIDSI || i2 == 0) && blob.l <= Props[i2][1]) {
                            fail = false;
                            blob.l = Props[i2][1];
                        }
                        if (fail)
                            throw new Error(
                                'Read Error: Expected address ' +
                                    Props[i2][1] +
                                    ' at ' +
                                    blob.l +
                                    ' :' +
                                    i2,
                            );
                    }
                    if (PIDSI) {
                        var piddsi = PIDSI[Props[i2][0]];
                        PropH[piddsi.n] = parse_TypedPropertyValue(blob, piddsi.t, { raw: true });
                        if (piddsi.p === 'version')
                            PropH[piddsi.n] =
                                String(PropH[piddsi.n] >> 16) +
                                '.' +
                                ('0000' + String(PropH[piddsi.n] & 65535)).slice(-4);
                        if (piddsi.n == 'CodePage')
                            switch (PropH[piddsi.n]) {
                                case 0:
                                    PropH[piddsi.n] = 1252;
                                case 874:
                                case 932:
                                case 936:
                                case 949:
                                case 950:
                                case 1250:
                                case 1251:
                                case 1253:
                                case 1254:
                                case 1255:
                                case 1256:
                                case 1257:
                                case 1258:
                                case 1e4:
                                case 1200:
                                case 1201:
                                case 1252:
                                case 65e3:
                                case -536:
                                case 65001:
                                case -535:
                                    set_cp((CodePage = (PropH[piddsi.n] >>> 0) & 65535));
                                    break;
                                default:
                                    throw new Error('Unsupported CodePage: ' + PropH[piddsi.n]);
                            }
                    } else {
                        if (Props[i2][0] === 1) {
                            CodePage = PropH.CodePage = parse_TypedPropertyValue(blob, VT_I2);
                            set_cp(CodePage);
                            if (Dictionary !== -1) {
                                var oldpos = blob.l;
                                blob.l = Props[Dictionary][1];
                                DictObj = parse_dictionary(blob, CodePage);
                                blob.l = oldpos;
                            }
                        } else if (Props[i2][0] === 0) {
                            if (CodePage === 0) {
                                Dictionary = i2;
                                blob.l = Props[i2 + 1][1];
                                continue;
                            }
                            DictObj = parse_dictionary(blob, CodePage);
                        } else {
                            var name = DictObj[Props[i2][0]];
                            var val2;
                            switch (blob[blob.l]) {
                                case 65:
                                    blob.l += 4;
                                    val2 = parse_BLOB(blob);
                                    break;
                                case 30:
                                    blob.l += 4;
                                    val2 = parse_VtString(blob, blob[blob.l - 4]).replace(
                                        /\u0000+$/,
                                        '',
                                    );
                                    break;
                                case 31:
                                    blob.l += 4;
                                    val2 = parse_VtString(blob, blob[blob.l - 4]).replace(
                                        /\u0000+$/,
                                        '',
                                    );
                                    break;
                                case 3:
                                    blob.l += 4;
                                    val2 = blob.read_shift(4, 'i');
                                    break;
                                case 19:
                                    blob.l += 4;
                                    val2 = blob.read_shift(4);
                                    break;
                                case 5:
                                    blob.l += 4;
                                    val2 = blob.read_shift(8, 'f');
                                    break;
                                case 11:
                                    blob.l += 4;
                                    val2 = parsebool(blob, 4);
                                    break;
                                case 64:
                                    blob.l += 4;
                                    val2 = parseDate(parse_FILETIME(blob));
                                    break;
                                default:
                                    throw new Error('unparsed value: ' + blob[blob.l]);
                            }
                            PropH[name] = val2;
                        }
                    }
                }
                blob.l = start_addr + size;
                return PropH;
            }
            var XLSPSSkip = [
                'CodePage',
                'Thumbnail',
                '_PID_LINKBASE',
                '_PID_HLINKS',
                'SystemIdentifier',
                'FMTID',
            ];
            function guess_property_type(val2) {
                switch (typeof val2) {
                    case 'boolean':
                        return 11;
                    case 'number':
                        return (val2 | 0) == val2 ? 3 : 5;
                    case 'string':
                        return 31;
                    case 'object':
                        if (val2 instanceof Date) return 64;
                        break;
                }
                return -1;
            }
            function write_PropertySet(entries, RE, PIDSI) {
                var hdr = new_buf(8),
                    piao = [],
                    prop2 = [];
                var sz = 8,
                    i2 = 0;
                var pr = new_buf(8),
                    pio = new_buf(8);
                pr.write_shift(4, 2);
                pr.write_shift(4, 1200);
                pio.write_shift(4, 1);
                prop2.push(pr);
                piao.push(pio);
                sz += 8 + pr.length;
                if (!RE) {
                    pio = new_buf(8);
                    pio.write_shift(4, 0);
                    piao.unshift(pio);
                    var bufs = [new_buf(4)];
                    bufs[0].write_shift(4, entries.length);
                    for (i2 = 0; i2 < entries.length; ++i2) {
                        var value = entries[i2][0];
                        pr = new_buf(4 + 4 + 2 * (value.length + 1) + (value.length % 2 ? 0 : 2));
                        pr.write_shift(4, i2 + 2);
                        pr.write_shift(4, value.length + 1);
                        pr.write_shift(0, value, 'dbcs');
                        while (pr.l != pr.length) pr.write_shift(1, 0);
                        bufs.push(pr);
                    }
                    pr = bconcat(bufs);
                    prop2.unshift(pr);
                    sz += 8 + pr.length;
                }
                for (i2 = 0; i2 < entries.length; ++i2) {
                    if (RE && !RE[entries[i2][0]]) continue;
                    if (
                        XLSPSSkip.indexOf(entries[i2][0]) > -1 ||
                        PseudoPropsPairs.indexOf(entries[i2][0]) > -1
                    )
                        continue;
                    if (entries[i2][1] == null) continue;
                    var val2 = entries[i2][1],
                        idx = 0;
                    if (RE) {
                        idx = +RE[entries[i2][0]];
                        var pinfo = PIDSI[idx];
                        if (pinfo.p == 'version' && typeof val2 == 'string') {
                            var arr = val2.split('.');
                            val2 = (+arr[0] << 16) + (+arr[1] || 0);
                        }
                        pr = write_TypedPropertyValue(pinfo.t, val2);
                    } else {
                        var T = guess_property_type(val2);
                        if (T == -1) {
                            T = 31;
                            val2 = String(val2);
                        }
                        pr = write_TypedPropertyValue(T, val2);
                    }
                    prop2.push(pr);
                    pio = new_buf(8);
                    pio.write_shift(4, !RE ? 2 + i2 : idx);
                    piao.push(pio);
                    sz += 8 + pr.length;
                }
                var w = 8 * (prop2.length + 1);
                for (i2 = 0; i2 < prop2.length; ++i2) {
                    piao[i2].write_shift(4, w);
                    w += prop2[i2].length;
                }
                hdr.write_shift(4, sz);
                hdr.write_shift(4, prop2.length);
                return bconcat([hdr].concat(piao).concat(prop2));
            }
            function parse_PropertySetStream(file, PIDSI, clsid) {
                var blob = file.content;
                if (!blob) return {};
                prep_blob(blob, 0);
                var NumSets,
                    FMTID0,
                    FMTID1,
                    Offset0,
                    Offset1 = 0;
                blob.chk('feff', 'Byte Order: ');
                blob.read_shift(2);
                var SystemIdentifier = blob.read_shift(4);
                var CLSID = blob.read_shift(16);
                if (CLSID !== CFB.utils.consts.HEADER_CLSID && CLSID !== clsid)
                    throw new Error('Bad PropertySet CLSID ' + CLSID);
                NumSets = blob.read_shift(4);
                if (NumSets !== 1 && NumSets !== 2)
                    throw new Error('Unrecognized #Sets: ' + NumSets);
                FMTID0 = blob.read_shift(16);
                Offset0 = blob.read_shift(4);
                if (NumSets === 1 && Offset0 !== blob.l)
                    throw new Error('Length mismatch: ' + Offset0 + ' !== ' + blob.l);
                else if (NumSets === 2) {
                    FMTID1 = blob.read_shift(16);
                    Offset1 = blob.read_shift(4);
                }
                var PSet0 = parse_PropertySet(blob, PIDSI);
                var rval = { SystemIdentifier };
                for (var y in PSet0) rval[y] = PSet0[y];
                rval.FMTID = FMTID0;
                if (NumSets === 1) return rval;
                if (Offset1 - blob.l == 2) blob.l += 2;
                if (blob.l !== Offset1)
                    throw new Error('Length mismatch 2: ' + blob.l + ' !== ' + Offset1);
                var PSet1;
                try {
                    PSet1 = parse_PropertySet(blob, null);
                } catch (e2) {}
                for (y in PSet1) rval[y] = PSet1[y];
                rval.FMTID = [FMTID0, FMTID1];
                return rval;
            }
            function write_PropertySetStream(entries, clsid, RE, PIDSI, entries2, clsid2) {
                var hdr = new_buf(entries2 ? 68 : 48);
                var bufs = [hdr];
                hdr.write_shift(2, 65534);
                hdr.write_shift(2, 0);
                hdr.write_shift(4, 842412599);
                hdr.write_shift(16, CFB.utils.consts.HEADER_CLSID, 'hex');
                hdr.write_shift(4, entries2 ? 2 : 1);
                hdr.write_shift(16, clsid, 'hex');
                hdr.write_shift(4, entries2 ? 68 : 48);
                var ps0 = write_PropertySet(entries, RE, PIDSI);
                bufs.push(ps0);
                if (entries2) {
                    var ps1 = write_PropertySet(entries2, null, null);
                    hdr.write_shift(16, clsid2, 'hex');
                    hdr.write_shift(4, 68 + ps0.length);
                    bufs.push(ps1);
                }
                return bconcat(bufs);
            }
            function parsenoop2(blob, length) {
                blob.read_shift(length);
                return null;
            }
            function writezeroes(n, o) {
                if (!o) o = new_buf(n);
                for (var j = 0; j < n; ++j) o.write_shift(1, 0);
                return o;
            }
            function parslurp(blob, length, cb) {
                var arr = [],
                    target = blob.l + length;
                while (blob.l < target) arr.push(cb(blob, target - blob.l));
                if (target !== blob.l) throw new Error('Slurp error');
                return arr;
            }
            function parsebool(blob, length) {
                return blob.read_shift(length) === 1;
            }
            function writebool(v, o) {
                if (!o) o = new_buf(2);
                o.write_shift(2, +!!v);
                return o;
            }
            function parseuint16(blob) {
                return blob.read_shift(2, 'u');
            }
            function writeuint16(v, o) {
                if (!o) o = new_buf(2);
                o.write_shift(2, v);
                return o;
            }
            function parseuint16a(blob, length) {
                return parslurp(blob, length, parseuint16);
            }
            function parse_Bes(blob) {
                var v = blob.read_shift(1),
                    t2 = blob.read_shift(1);
                return t2 === 1 ? v : v === 1;
            }
            function write_Bes(v, t2, o) {
                if (!o) o = new_buf(2);
                o.write_shift(1, t2 == 'e' ? +v : +!!v);
                o.write_shift(1, t2 == 'e' ? 1 : 0);
                return o;
            }
            function parse_ShortXLUnicodeString(blob, length, opts) {
                var cch = blob.read_shift(opts && opts.biff >= 12 ? 2 : 1);
                var encoding = 'sbcs-cont';
                var cp = current_codepage;
                if (opts && opts.biff >= 8) current_codepage = 1200;
                if (!opts || opts.biff == 8) {
                    var fHighByte = blob.read_shift(1);
                    if (fHighByte) {
                        encoding = 'dbcs-cont';
                    }
                } else if (opts.biff == 12) {
                    encoding = 'wstr';
                }
                if (opts.biff >= 2 && opts.biff <= 5) encoding = 'cpstr';
                var o = cch ? blob.read_shift(cch, encoding) : '';
                current_codepage = cp;
                return o;
            }
            function parse_XLUnicodeRichExtendedString(blob) {
                var cp = current_codepage;
                current_codepage = 1200;
                var cch = blob.read_shift(2),
                    flags = blob.read_shift(1);
                var fExtSt = flags & 4,
                    fRichSt = flags & 8;
                var width = 1 + (flags & 1);
                var cRun = 0,
                    cbExtRst;
                var z = {};
                if (fRichSt) cRun = blob.read_shift(2);
                if (fExtSt) cbExtRst = blob.read_shift(4);
                var encoding = width == 2 ? 'dbcs-cont' : 'sbcs-cont';
                var msg = cch === 0 ? '' : blob.read_shift(cch, encoding);
                if (fRichSt) blob.l += 4 * cRun;
                if (fExtSt) blob.l += cbExtRst;
                z.t = msg;
                if (!fRichSt) {
                    z.raw = '<t>' + z.t + '</t>';
                    z.r = z.t;
                }
                current_codepage = cp;
                return z;
            }
            function write_XLUnicodeRichExtendedString(xlstr) {
                var str = xlstr.t || '',
                    nfmts = 1;
                var hdr = new_buf(3 + (nfmts > 1 ? 2 : 0));
                hdr.write_shift(2, str.length);
                hdr.write_shift(1, (nfmts > 1 ? 8 : 0) | 1);
                if (nfmts > 1) hdr.write_shift(2, nfmts);
                var otext = new_buf(2 * str.length);
                otext.write_shift(2 * str.length, str, 'utf16le');
                var out = [hdr, otext];
                return bconcat(out);
            }
            function parse_XLUnicodeStringNoCch(blob, cch, opts) {
                var retval;
                if (opts) {
                    if (opts.biff >= 2 && opts.biff <= 5) return blob.read_shift(cch, 'cpstr');
                    if (opts.biff >= 12) return blob.read_shift(cch, 'dbcs-cont');
                }
                var fHighByte = blob.read_shift(1);
                if (fHighByte === 0) {
                    retval = blob.read_shift(cch, 'sbcs-cont');
                } else {
                    retval = blob.read_shift(cch, 'dbcs-cont');
                }
                return retval;
            }
            function parse_XLUnicodeString(blob, length, opts) {
                var cch = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
                if (cch === 0) {
                    blob.l++;
                    return '';
                }
                return parse_XLUnicodeStringNoCch(blob, cch, opts);
            }
            function parse_XLUnicodeString2(blob, length, opts) {
                if (opts.biff > 5) return parse_XLUnicodeString(blob, length, opts);
                var cch = blob.read_shift(1);
                if (cch === 0) {
                    blob.l++;
                    return '';
                }
                return blob.read_shift(cch, opts.biff <= 4 || !blob.lens ? 'cpstr' : 'sbcs-cont');
            }
            function write_XLUnicodeString(str, opts, o) {
                if (!o) o = new_buf(3 + 2 * str.length);
                o.write_shift(2, str.length);
                o.write_shift(1, 1);
                o.write_shift(31, str, 'utf16le');
                return o;
            }
            function parse_ControlInfo(blob) {
                var flags = blob.read_shift(1);
                blob.l++;
                var accel = blob.read_shift(2);
                blob.l += 2;
                return [flags, accel];
            }
            function parse_URLMoniker(blob) {
                var len = blob.read_shift(4),
                    start = blob.l;
                var extra = false;
                if (len > 24) {
                    blob.l += len - 24;
                    if (blob.read_shift(16) === '795881f43b1d7f48af2c825dc4852763') extra = true;
                    blob.l = start;
                }
                var url = blob
                    .read_shift((extra ? len - 24 : len) >> 1, 'utf16le')
                    .replace(chr0, '');
                if (extra) blob.l += 24;
                return url;
            }
            function parse_FileMoniker(blob) {
                var cAnti = blob.read_shift(2);
                var preamble = '';
                while (cAnti-- > 0) preamble += '../';
                var ansiPath = blob.read_shift(0, 'lpstr-ansi');
                blob.l += 2;
                if (blob.read_shift(2) != 57005) throw new Error('Bad FileMoniker');
                var sz = blob.read_shift(4);
                if (sz === 0) return preamble + ansiPath.replace(/\\/g, '/');
                var bytes = blob.read_shift(4);
                if (blob.read_shift(2) != 3) throw new Error('Bad FileMoniker');
                var unicodePath = blob.read_shift(bytes >> 1, 'utf16le').replace(chr0, '');
                return preamble + unicodePath;
            }
            function parse_HyperlinkMoniker(blob, length) {
                var clsid = blob.read_shift(16);
                length -= 16;
                switch (clsid) {
                    case 'e0c9ea79f9bace118c8200aa004ba90b':
                        return parse_URLMoniker(blob, length);
                    case '0303000000000000c000000000000046':
                        return parse_FileMoniker(blob, length);
                    default:
                        throw new Error('Unsupported Moniker ' + clsid);
                }
            }
            function parse_HyperlinkString(blob) {
                var len = blob.read_shift(4);
                var o = len > 0 ? blob.read_shift(len, 'utf16le').replace(chr0, '') : '';
                return o;
            }
            function write_HyperlinkString(str, o) {
                if (!o) o = new_buf(6 + str.length * 2);
                o.write_shift(4, 1 + str.length);
                for (var i2 = 0; i2 < str.length; ++i2) o.write_shift(2, str.charCodeAt(i2));
                o.write_shift(2, 0);
                return o;
            }
            function parse_Hyperlink(blob, length) {
                var end2 = blob.l + length;
                var sVer = blob.read_shift(4);
                if (sVer !== 2) throw new Error('Unrecognized streamVersion: ' + sVer);
                var flags = blob.read_shift(2);
                blob.l += 2;
                var displayName,
                    targetFrameName,
                    moniker,
                    oleMoniker,
                    Loc = '',
                    guid,
                    fileTime;
                if (flags & 16) displayName = parse_HyperlinkString(blob, end2 - blob.l);
                if (flags & 128) targetFrameName = parse_HyperlinkString(blob, end2 - blob.l);
                if ((flags & 257) === 257) moniker = parse_HyperlinkString(blob, end2 - blob.l);
                if ((flags & 257) === 1) oleMoniker = parse_HyperlinkMoniker(blob, end2 - blob.l);
                if (flags & 8) Loc = parse_HyperlinkString(blob, end2 - blob.l);
                if (flags & 32) guid = blob.read_shift(16);
                if (flags & 64)
                    fileTime = parse_FILETIME(
                        blob,
                        /*, 8*/
                    );
                blob.l = end2;
                var target = targetFrameName || moniker || oleMoniker || '';
                if (target && Loc) target += '#' + Loc;
                if (!target) target = '#' + Loc;
                if (flags & 2 && target.charAt(0) == '/' && target.charAt(1) != '/')
                    target = 'file://' + target;
                var out = { Target: target };
                if (guid) out.guid = guid;
                if (fileTime) out.time = fileTime;
                if (displayName) out.Tooltip = displayName;
                return out;
            }
            function write_Hyperlink(hl) {
                var out = new_buf(512),
                    i2 = 0;
                var Target = hl.Target;
                if (Target.slice(0, 7) == 'file://') Target = Target.slice(7);
                var hashidx = Target.indexOf('#');
                var F2 = hashidx > -1 ? 31 : 23;
                switch (Target.charAt(0)) {
                    case '#':
                        F2 = 28;
                        break;
                    case '.':
                        F2 &= ~2;
                        break;
                }
                out.write_shift(4, 2);
                out.write_shift(4, F2);
                var data2 = [8, 6815827, 6619237, 4849780, 83];
                for (i2 = 0; i2 < data2.length; ++i2) out.write_shift(4, data2[i2]);
                if (F2 == 28) {
                    Target = Target.slice(1);
                    write_HyperlinkString(Target, out);
                } else if (F2 & 2) {
                    data2 = 'e0 c9 ea 79 f9 ba ce 11 8c 82 00 aa 00 4b a9 0b'.split(' ');
                    for (i2 = 0; i2 < data2.length; ++i2)
                        out.write_shift(1, parseInt(data2[i2], 16));
                    var Pretarget = hashidx > -1 ? Target.slice(0, hashidx) : Target;
                    out.write_shift(4, 2 * (Pretarget.length + 1));
                    for (i2 = 0; i2 < Pretarget.length; ++i2)
                        out.write_shift(2, Pretarget.charCodeAt(i2));
                    out.write_shift(2, 0);
                    if (F2 & 8)
                        write_HyperlinkString(hashidx > -1 ? Target.slice(hashidx + 1) : '', out);
                } else {
                    data2 = '03 03 00 00 00 00 00 00 c0 00 00 00 00 00 00 46'.split(' ');
                    for (i2 = 0; i2 < data2.length; ++i2)
                        out.write_shift(1, parseInt(data2[i2], 16));
                    var P = 0;
                    while (
                        Target.slice(P * 3, P * 3 + 3) == '../' ||
                        Target.slice(P * 3, P * 3 + 3) == '..\\'
                    )
                        ++P;
                    out.write_shift(2, P);
                    out.write_shift(4, Target.length - 3 * P + 1);
                    for (i2 = 0; i2 < Target.length - 3 * P; ++i2)
                        out.write_shift(1, Target.charCodeAt(i2 + 3 * P) & 255);
                    out.write_shift(1, 0);
                    out.write_shift(2, 65535);
                    out.write_shift(2, 57005);
                    for (i2 = 0; i2 < 6; ++i2) out.write_shift(4, 0);
                }
                return out.slice(0, out.l);
            }
            function parse_LongRGBA(blob) {
                var r2 = blob.read_shift(1),
                    g = blob.read_shift(1),
                    b = blob.read_shift(1),
                    a = blob.read_shift(1);
                return [r2, g, b, a];
            }
            function parse_LongRGB(blob, length) {
                var x2 = parse_LongRGBA(blob, length);
                x2[3] = 0;
                return x2;
            }
            function parse_XLSCell(blob) {
                var rw = blob.read_shift(2);
                var col = blob.read_shift(2);
                var ixfe = blob.read_shift(2);
                return { r: rw, c: col, ixfe };
            }
            function write_XLSCell(R, C, ixfe, o) {
                if (!o) o = new_buf(6);
                o.write_shift(2, R);
                o.write_shift(2, C);
                o.write_shift(2, ixfe || 0);
                return o;
            }
            function parse_frtHeader(blob) {
                var rt = blob.read_shift(2);
                var flags = blob.read_shift(2);
                blob.l += 8;
                return { type: rt, flags };
            }
            function parse_OptXLUnicodeString(blob, length, opts) {
                return length === 0 ? '' : parse_XLUnicodeString2(blob, length, opts);
            }
            function parse_XTI(blob, length, opts) {
                var w = opts.biff > 8 ? 4 : 2;
                var iSupBook = blob.read_shift(w),
                    itabFirst = blob.read_shift(w, 'i'),
                    itabLast = blob.read_shift(w, 'i');
                return [iSupBook, itabFirst, itabLast];
            }
            function parse_RkRec(blob) {
                var ixfe = blob.read_shift(2);
                var RK = parse_RkNumber(blob);
                return [ixfe, RK];
            }
            function parse_AddinUdf(blob, length, opts) {
                blob.l += 4;
                length -= 4;
                var l = blob.l + length;
                var udfName = parse_ShortXLUnicodeString(blob, length, opts);
                var cb = blob.read_shift(2);
                l -= blob.l;
                if (cb !== l) throw new Error('Malformed AddinUdf: padding = ' + l + ' != ' + cb);
                blob.l += cb;
                return udfName;
            }
            function parse_Ref8U(blob) {
                var rwFirst = blob.read_shift(2);
                var rwLast = blob.read_shift(2);
                var colFirst = blob.read_shift(2);
                var colLast = blob.read_shift(2);
                return { s: { c: colFirst, r: rwFirst }, e: { c: colLast, r: rwLast } };
            }
            function write_Ref8U(r2, o) {
                if (!o) o = new_buf(8);
                o.write_shift(2, r2.s.r);
                o.write_shift(2, r2.e.r);
                o.write_shift(2, r2.s.c);
                o.write_shift(2, r2.e.c);
                return o;
            }
            function parse_RefU(blob) {
                var rwFirst = blob.read_shift(2);
                var rwLast = blob.read_shift(2);
                var colFirst = blob.read_shift(1);
                var colLast = blob.read_shift(1);
                return { s: { c: colFirst, r: rwFirst }, e: { c: colLast, r: rwLast } };
            }
            var parse_Ref = parse_RefU;
            function parse_FtCmo(blob) {
                blob.l += 4;
                var ot = blob.read_shift(2);
                var id = blob.read_shift(2);
                var flags = blob.read_shift(2);
                blob.l += 12;
                return [id, ot, flags];
            }
            function parse_FtNts(blob) {
                var out = {};
                blob.l += 4;
                blob.l += 16;
                out.fSharedNote = blob.read_shift(2);
                blob.l += 4;
                return out;
            }
            function parse_FtCf(blob) {
                var out = {};
                blob.l += 4;
                blob.cf = blob.read_shift(2);
                return out;
            }
            function parse_FtSkip(blob) {
                blob.l += 2;
                blob.l += blob.read_shift(2);
            }
            var FtTab = {
                0: parse_FtSkip,
                /* FtEnd */
                4: parse_FtSkip,
                /* FtMacro */
                5: parse_FtSkip,
                /* FtButton */
                6: parse_FtSkip,
                /* FtGmo */
                7: parse_FtCf,
                /* FtCf */
                8: parse_FtSkip,
                /* FtPioGrbit */
                9: parse_FtSkip,
                /* FtPictFmla */
                10: parse_FtSkip,
                /* FtCbls */
                11: parse_FtSkip,
                /* FtRbo */
                12: parse_FtSkip,
                /* FtSbs */
                13: parse_FtNts,
                /* FtNts */
                14: parse_FtSkip,
                /* FtSbsFmla */
                15: parse_FtSkip,
                /* FtGboData */
                16: parse_FtSkip,
                /* FtEdoData */
                17: parse_FtSkip,
                /* FtRboData */
                18: parse_FtSkip,
                /* FtCblsData */
                19: parse_FtSkip,
                /* FtLbsData */
                20: parse_FtSkip,
                /* FtCblsFmla */
                21: parse_FtCmo,
            };
            function parse_FtArray(blob, length) {
                var tgt = blob.l + length;
                var fts = [];
                while (blob.l < tgt) {
                    var ft = blob.read_shift(2);
                    blob.l -= 2;
                    try {
                        fts.push(FtTab[ft](blob, tgt - blob.l));
                    } catch (e2) {
                        blob.l = tgt;
                        return fts;
                    }
                }
                if (blob.l != tgt) blob.l = tgt;
                return fts;
            }
            function parse_BOF(blob, length) {
                var o = { BIFFVer: 0, dt: 0 };
                o.BIFFVer = blob.read_shift(2);
                length -= 2;
                if (length >= 2) {
                    o.dt = blob.read_shift(2);
                    blob.l -= 2;
                }
                switch (o.BIFFVer) {
                    case 1536:
                    case 1280:
                    case 1024:
                    case 768:
                    case 512:
                    case 2:
                    case 7:
                        break;
                    default:
                        if (length > 6) throw new Error('Unexpected BIFF Ver ' + o.BIFFVer);
                }
                blob.read_shift(length);
                return o;
            }
            function write_BOF(wb, t2, o) {
                var h2 = 1536,
                    w = 16;
                switch (o.bookType) {
                    case 'biff8':
                        break;
                    case 'biff5':
                        h2 = 1280;
                        w = 8;
                        break;
                    case 'biff4':
                        h2 = 4;
                        w = 6;
                        break;
                    case 'biff3':
                        h2 = 3;
                        w = 6;
                        break;
                    case 'biff2':
                        h2 = 2;
                        w = 4;
                        break;
                    case 'xla':
                        break;
                    default:
                        throw new Error('unsupported BIFF version');
                }
                var out = new_buf(w);
                out.write_shift(2, h2);
                out.write_shift(2, t2);
                if (w > 4) out.write_shift(2, 29282);
                if (w > 6) out.write_shift(2, 1997);
                if (w > 8) {
                    out.write_shift(2, 49161);
                    out.write_shift(2, 1);
                    out.write_shift(2, 1798);
                    out.write_shift(2, 0);
                }
                return out;
            }
            function parse_InterfaceHdr(blob, length) {
                if (length === 0) return 1200;
                if (blob.read_shift(2) !== 1200) {
                }
                return 1200;
            }
            function parse_WriteAccess(blob, length, opts) {
                if (opts.enc) {
                    blob.l += length;
                    return '';
                }
                var l = blob.l;
                var UserName = parse_XLUnicodeString2(blob, 0, opts);
                blob.read_shift(length + l - blob.l);
                return UserName;
            }
            function write_WriteAccess(s2, opts) {
                var b8 = !opts || opts.biff == 8;
                var o = new_buf(b8 ? 112 : 54);
                o.write_shift(opts.biff == 8 ? 2 : 1, 7);
                if (b8) o.write_shift(1, 0);
                o.write_shift(4, 859007059);
                o.write_shift(4, 5458548 | (b8 ? 0 : 536870912));
                while (o.l < o.length) o.write_shift(1, b8 ? 0 : 32);
                return o;
            }
            function parse_WsBool(blob, length, opts) {
                var flags =
                    (opts && opts.biff == 8) || length == 2
                        ? blob.read_shift(2)
                        : ((blob.l += length), 0);
                return { fDialog: flags & 16, fBelow: flags & 64, fRight: flags & 128 };
            }
            function parse_BoundSheet8(blob, length, opts) {
                var pos = blob.read_shift(4);
                var hidden2 = blob.read_shift(1) & 3;
                var dt = blob.read_shift(1);
                switch (dt) {
                    case 0:
                        dt = 'Worksheet';
                        break;
                    case 1:
                        dt = 'Macrosheet';
                        break;
                    case 2:
                        dt = 'Chartsheet';
                        break;
                    case 6:
                        dt = 'VBAModule';
                        break;
                }
                var name = parse_ShortXLUnicodeString(blob, 0, opts);
                if (name.length === 0) name = 'Sheet1';
                return { pos, hs: hidden2, dt, name };
            }
            function write_BoundSheet8(data2, opts) {
                var w = !opts || opts.biff >= 8 ? 2 : 1;
                var o = new_buf(8 + w * data2.name.length);
                o.write_shift(4, data2.pos);
                o.write_shift(1, data2.hs || 0);
                o.write_shift(1, data2.dt);
                o.write_shift(1, data2.name.length);
                if (opts.biff >= 8) o.write_shift(1, 1);
                o.write_shift(
                    w * data2.name.length,
                    data2.name,
                    opts.biff < 8 ? 'sbcs' : 'utf16le',
                );
                var out = o.slice(0, o.l);
                out.l = o.l;
                return out;
            }
            function parse_SST(blob, length) {
                var end2 = blob.l + length;
                var cnt = blob.read_shift(4);
                var ucnt = blob.read_shift(4);
                var strs2 = [];
                for (var i2 = 0; i2 != ucnt && blob.l < end2; ++i2) {
                    strs2.push(parse_XLUnicodeRichExtendedString(blob));
                }
                strs2.Count = cnt;
                strs2.Unique = ucnt;
                return strs2;
            }
            function write_SST(sst, opts) {
                var header = new_buf(8);
                header.write_shift(4, sst.Count);
                header.write_shift(4, sst.Unique);
                var strs2 = [];
                for (var j = 0; j < sst.length; ++j)
                    strs2[j] = write_XLUnicodeRichExtendedString(sst[j], opts);
                var o = bconcat([header].concat(strs2));
                o.parts = [header.length].concat(
                    strs2.map(function (str) {
                        return str.length;
                    }),
                );
                return o;
            }
            function parse_ExtSST(blob, length) {
                var extsst = {};
                extsst.dsst = blob.read_shift(2);
                blob.l += length - 2;
                return extsst;
            }
            function parse_Row(blob) {
                var z = {};
                z.r = blob.read_shift(2);
                z.c = blob.read_shift(2);
                z.cnt = blob.read_shift(2) - z.c;
                var miyRw = blob.read_shift(2);
                blob.l += 4;
                var flags = blob.read_shift(1);
                blob.l += 3;
                if (flags & 7) z.level = flags & 7;
                if (flags & 32) z.hidden = true;
                if (flags & 64) z.hpt = miyRw / 20;
                return z;
            }
            function parse_ForceFullCalculation(blob) {
                var header = parse_frtHeader(blob);
                if (header.type != 2211) throw new Error('Invalid Future Record ' + header.type);
                var fullcalc = blob.read_shift(4);
                return fullcalc !== 0;
            }
            function parse_RecalcId(blob) {
                blob.read_shift(2);
                return blob.read_shift(4);
            }
            function parse_DefaultRowHeight(blob, length, opts) {
                var f3 = 0;
                if (!(opts && opts.biff == 2)) {
                    f3 = blob.read_shift(2);
                }
                var miyRw = blob.read_shift(2);
                if (opts && opts.biff == 2) {
                    f3 = 1 - (miyRw >> 15);
                    miyRw &= 32767;
                }
                var fl = {
                    Unsynced: f3 & 1,
                    DyZero: (f3 & 2) >> 1,
                    ExAsc: (f3 & 4) >> 2,
                    ExDsc: (f3 & 8) >> 3,
                };
                return [fl, miyRw];
            }
            function parse_Window1(blob) {
                var xWn = blob.read_shift(2),
                    yWn = blob.read_shift(2),
                    dxWn = blob.read_shift(2),
                    dyWn = blob.read_shift(2);
                var flags = blob.read_shift(2),
                    iTabCur = blob.read_shift(2),
                    iTabFirst = blob.read_shift(2);
                var ctabSel = blob.read_shift(2),
                    wTabRatio = blob.read_shift(2);
                return {
                    Pos: [xWn, yWn],
                    Dim: [dxWn, dyWn],
                    Flags: flags,
                    CurTab: iTabCur,
                    FirstTab: iTabFirst,
                    Selected: ctabSel,
                    TabRatio: wTabRatio,
                };
            }
            function write_Window1() {
                var o = new_buf(18);
                o.write_shift(2, 0);
                o.write_shift(2, 0);
                o.write_shift(2, 29280);
                o.write_shift(2, 17600);
                o.write_shift(2, 56);
                o.write_shift(2, 0);
                o.write_shift(2, 0);
                o.write_shift(2, 1);
                o.write_shift(2, 500);
                return o;
            }
            function parse_Window2(blob, length, opts) {
                if (opts && opts.biff >= 2 && opts.biff < 5) return {};
                var f3 = blob.read_shift(2);
                return { RTL: f3 & 64 };
            }
            function write_Window2(view) {
                var o = new_buf(18),
                    f3 = 1718;
                if (view && view.RTL) f3 |= 64;
                o.write_shift(2, f3);
                o.write_shift(4, 0);
                o.write_shift(4, 64);
                o.write_shift(4, 0);
                o.write_shift(4, 0);
                return o;
            }
            function parse_Pane() {}
            function parse_Font(blob, length, opts) {
                var o = {
                    dyHeight: blob.read_shift(2),
                    fl: blob.read_shift(2),
                };
                switch ((opts && opts.biff) || 8) {
                    case 2:
                        break;
                    case 3:
                    case 4:
                        blob.l += 2;
                        break;
                    default:
                        blob.l += 10;
                        break;
                }
                o.name = parse_ShortXLUnicodeString(blob, 0, opts);
                return o;
            }
            function write_Font(data2, opts) {
                var name = data2.name || 'Arial';
                var b5 = opts && opts.biff == 5,
                    w = b5 ? 15 + name.length : 16 + 2 * name.length;
                var o = new_buf(w);
                o.write_shift(2, (data2.sz || 12) * 20);
                o.write_shift(4, 0);
                o.write_shift(2, 400);
                o.write_shift(4, 0);
                o.write_shift(2, 0);
                o.write_shift(1, name.length);
                if (!b5) o.write_shift(1, 1);
                o.write_shift((b5 ? 1 : 2) * name.length, name, b5 ? 'sbcs' : 'utf16le');
                return o;
            }
            function parse_LabelSst(blob) {
                var cell = parse_XLSCell(blob);
                cell.isst = blob.read_shift(4);
                return cell;
            }
            function write_LabelSst(R, C, v, os2) {
                var o = new_buf(10);
                write_XLSCell(R, C, os2, o);
                o.write_shift(4, v);
                return o;
            }
            function parse_Label(blob, length, opts) {
                if (opts.biffguess && opts.biff == 2) opts.biff = 5;
                var target = blob.l + length;
                var cell = parse_XLSCell(blob, 6);
                if (opts.biff == 2) blob.l++;
                var str = parse_XLUnicodeString(blob, target - blob.l, opts);
                cell.val = str;
                return cell;
            }
            function write_Label(R, C, v, os2, opts) {
                var b8 = !opts || opts.biff == 8;
                var o = new_buf(6 + 2 + +b8 + (1 + b8) * v.length);
                write_XLSCell(R, C, os2, o);
                o.write_shift(2, v.length);
                if (b8) o.write_shift(1, 1);
                o.write_shift((1 + b8) * v.length, v, b8 ? 'utf16le' : 'sbcs');
                return o;
            }
            function parse_Format(blob, length, opts) {
                var numFmtId = blob.read_shift(2);
                var fmtstr = parse_XLUnicodeString2(blob, 0, opts);
                return [numFmtId, fmtstr];
            }
            function write_Format(i2, f3, opts, o) {
                var b5 = opts && opts.biff == 5;
                if (!o) o = new_buf(b5 ? 3 + f3.length : 5 + 2 * f3.length);
                o.write_shift(2, i2);
                o.write_shift(b5 ? 1 : 2, f3.length);
                if (!b5) o.write_shift(1, 1);
                o.write_shift((b5 ? 1 : 2) * f3.length, f3, b5 ? 'sbcs' : 'utf16le');
                var out = o.length > o.l ? o.slice(0, o.l) : o;
                if (out.l == null) out.l = out.length;
                return out;
            }
            var parse_BIFF2Format = parse_XLUnicodeString2;
            function parse_Dimensions(blob, length, opts) {
                var end2 = blob.l + length;
                var w = opts.biff == 8 || !opts.biff ? 4 : 2;
                var r2 = blob.read_shift(w),
                    R = blob.read_shift(w);
                var c = blob.read_shift(2),
                    C = blob.read_shift(2);
                blob.l = end2;
                return { s: { r: r2, c }, e: { r: R, c: C } };
            }
            function write_Dimensions(range, opts) {
                var w = opts.biff == 8 || !opts.biff ? 4 : 2;
                var o = new_buf(2 * w + 6);
                o.write_shift(w, range.s.r);
                o.write_shift(w, range.e.r + 1);
                o.write_shift(2, range.s.c);
                o.write_shift(2, range.e.c + 1);
                o.write_shift(2, 0);
                return o;
            }
            function parse_RK(blob) {
                var rw = blob.read_shift(2),
                    col = blob.read_shift(2);
                var rkrec = parse_RkRec(blob);
                return { r: rw, c: col, ixfe: rkrec[0], rknum: rkrec[1] };
            }
            function parse_MulRk(blob, length) {
                var target = blob.l + length - 2;
                var rw = blob.read_shift(2),
                    col = blob.read_shift(2);
                var rkrecs = [];
                while (blob.l < target) rkrecs.push(parse_RkRec(blob));
                if (blob.l !== target) throw new Error('MulRK read error');
                var lastcol = blob.read_shift(2);
                if (rkrecs.length != lastcol - col + 1) throw new Error('MulRK length mismatch');
                return { r: rw, c: col, C: lastcol, rkrec: rkrecs };
            }
            function parse_MulBlank(blob, length) {
                var target = blob.l + length - 2;
                var rw = blob.read_shift(2),
                    col = blob.read_shift(2);
                var ixfes = [];
                while (blob.l < target) ixfes.push(blob.read_shift(2));
                if (blob.l !== target) throw new Error('MulBlank read error');
                var lastcol = blob.read_shift(2);
                if (ixfes.length != lastcol - col + 1) throw new Error('MulBlank length mismatch');
                return { r: rw, c: col, C: lastcol, ixfe: ixfes };
            }
            function parse_CellStyleXF(blob, length, style, opts) {
                var o = {};
                var a = blob.read_shift(4),
                    b = blob.read_shift(4);
                var c = blob.read_shift(4),
                    d = blob.read_shift(2);
                o.patternType = XLSFillPattern[c >> 26];
                if (!opts.cellStyles) return o;
                o.alc = a & 7;
                o.fWrap = (a >> 3) & 1;
                o.alcV = (a >> 4) & 7;
                o.fJustLast = (a >> 7) & 1;
                o.trot = (a >> 8) & 255;
                o.cIndent = (a >> 16) & 15;
                o.fShrinkToFit = (a >> 20) & 1;
                o.iReadOrder = (a >> 22) & 2;
                o.fAtrNum = (a >> 26) & 1;
                o.fAtrFnt = (a >> 27) & 1;
                o.fAtrAlc = (a >> 28) & 1;
                o.fAtrBdr = (a >> 29) & 1;
                o.fAtrPat = (a >> 30) & 1;
                o.fAtrProt = (a >> 31) & 1;
                o.dgLeft = b & 15;
                o.dgRight = (b >> 4) & 15;
                o.dgTop = (b >> 8) & 15;
                o.dgBottom = (b >> 12) & 15;
                o.icvLeft = (b >> 16) & 127;
                o.icvRight = (b >> 23) & 127;
                o.grbitDiag = (b >> 30) & 3;
                o.icvTop = c & 127;
                o.icvBottom = (c >> 7) & 127;
                o.icvDiag = (c >> 14) & 127;
                o.dgDiag = (c >> 21) & 15;
                o.icvFore = d & 127;
                o.icvBack = (d >> 7) & 127;
                o.fsxButton = (d >> 14) & 1;
                return o;
            }
            function parse_XF(blob, length, opts) {
                var o = {};
                o.ifnt = blob.read_shift(2);
                o.numFmtId = blob.read_shift(2);
                o.flags = blob.read_shift(2);
                o.fStyle = (o.flags >> 2) & 1;
                length -= 6;
                o.data = parse_CellStyleXF(blob, length, o.fStyle, opts);
                return o;
            }
            function write_XF(data2, ixfeP, opts, o) {
                var b5 = opts && opts.biff == 5;
                if (!o) o = new_buf(b5 ? 16 : 20);
                o.write_shift(2, 0);
                if (data2.style) {
                    o.write_shift(2, data2.numFmtId || 0);
                    o.write_shift(2, 65524);
                } else {
                    o.write_shift(2, data2.numFmtId || 0);
                    o.write_shift(2, ixfeP << 4);
                }
                var f3 = 0;
                if (data2.numFmtId > 0 && b5) f3 |= 1024;
                o.write_shift(4, f3);
                o.write_shift(4, 0);
                if (!b5) o.write_shift(4, 0);
                o.write_shift(2, 0);
                return o;
            }
            function parse_Guts(blob) {
                blob.l += 4;
                var out = [blob.read_shift(2), blob.read_shift(2)];
                if (out[0] !== 0) out[0]--;
                if (out[1] !== 0) out[1]--;
                if (out[0] > 7 || out[1] > 7) throw new Error('Bad Gutters: ' + out.join('|'));
                return out;
            }
            function write_Guts(guts) {
                var o = new_buf(8);
                o.write_shift(4, 0);
                o.write_shift(2, guts[0] ? guts[0] + 1 : 0);
                o.write_shift(2, guts[1] ? guts[1] + 1 : 0);
                return o;
            }
            function parse_BoolErr(blob, length, opts) {
                var cell = parse_XLSCell(blob, 6);
                if (opts.biff == 2 || length == 9) ++blob.l;
                var val2 = parse_Bes(blob, 2);
                cell.val = val2;
                cell.t = val2 === true || val2 === false ? 'b' : 'e';
                return cell;
            }
            function write_BoolErr(R, C, v, os2, opts, t2) {
                var o = new_buf(8);
                write_XLSCell(R, C, os2, o);
                write_Bes(v, t2, o);
                return o;
            }
            function parse_Number(blob, length, opts) {
                if (opts.biffguess && opts.biff == 2) opts.biff = 5;
                var cell = parse_XLSCell(blob, 6);
                var xnum = parse_Xnum(blob, 8);
                cell.val = xnum;
                return cell;
            }
            function write_Number(R, C, v, os2) {
                var o = new_buf(14);
                write_XLSCell(R, C, os2, o);
                write_Xnum(v, o);
                return o;
            }
            var parse_XLHeaderFooter = parse_OptXLUnicodeString;
            function parse_SupBook(blob, length, opts) {
                var end2 = blob.l + length;
                var ctab = blob.read_shift(2);
                var cch = blob.read_shift(2);
                opts.sbcch = cch;
                if (cch == 1025 || cch == 14849) return [cch, ctab];
                if (cch < 1 || cch > 255) throw new Error('Unexpected SupBook type: ' + cch);
                var virtPath = parse_XLUnicodeStringNoCch(blob, cch);
                var rgst = [];
                while (end2 > blob.l) rgst.push(parse_XLUnicodeString(blob));
                return [cch, ctab, virtPath, rgst];
            }
            function parse_ExternName(blob, length, opts) {
                var flags = blob.read_shift(2);
                var body;
                var o = {
                    fBuiltIn: flags & 1,
                    fWantAdvise: (flags >>> 1) & 1,
                    fWantPict: (flags >>> 2) & 1,
                    fOle: (flags >>> 3) & 1,
                    fOleLink: (flags >>> 4) & 1,
                    cf: (flags >>> 5) & 1023,
                    fIcon: (flags >>> 15) & 1,
                };
                if (opts.sbcch === 14849) body = parse_AddinUdf(blob, length - 2, opts);
                o.body = body || blob.read_shift(length - 2);
                if (typeof body === 'string') o.Name = body;
                return o;
            }
            var XLSLblBuiltIn = [
                '_xlnm.Consolidate_Area',
                '_xlnm.Auto_Open',
                '_xlnm.Auto_Close',
                '_xlnm.Extract',
                '_xlnm.Database',
                '_xlnm.Criteria',
                '_xlnm.Print_Area',
                '_xlnm.Print_Titles',
                '_xlnm.Recorder',
                '_xlnm.Data_Form',
                '_xlnm.Auto_Activate',
                '_xlnm.Auto_Deactivate',
                '_xlnm.Sheet_Title',
                '_xlnm._FilterDatabase',
            ];
            function parse_Lbl(blob, length, opts) {
                var target = blob.l + length;
                var flags = blob.read_shift(2);
                var chKey = blob.read_shift(1);
                var cch = blob.read_shift(1);
                var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
                var itab = 0;
                if (!opts || opts.biff >= 5) {
                    if (opts.biff != 5) blob.l += 2;
                    itab = blob.read_shift(2);
                    if (opts.biff == 5) blob.l += 2;
                    blob.l += 4;
                }
                var name = parse_XLUnicodeStringNoCch(blob, cch, opts);
                if (flags & 32) name = XLSLblBuiltIn[name.charCodeAt(0)];
                var npflen = target - blob.l;
                if (opts && opts.biff == 2) --npflen;
                var rgce =
                    target == blob.l || cce === 0 || !(npflen > 0)
                        ? []
                        : parse_NameParsedFormula(blob, npflen, opts, cce);
                return {
                    chKey,
                    Name: name,
                    itab,
                    rgce,
                };
            }
            function parse_ExternSheet(blob, length, opts) {
                if (opts.biff < 8) return parse_BIFF5ExternSheet(blob, length, opts);
                var o = [],
                    target = blob.l + length,
                    len = blob.read_shift(opts.biff > 8 ? 4 : 2);
                while (len-- !== 0) o.push(parse_XTI(blob, opts.biff > 8 ? 12 : 6, opts));
                if (blob.l != target)
                    throw new Error('Bad ExternSheet: ' + blob.l + ' != ' + target);
                return o;
            }
            function parse_BIFF5ExternSheet(blob, length, opts) {
                if (blob[blob.l + 1] == 3) blob[blob.l]++;
                var o = parse_ShortXLUnicodeString(blob, length, opts);
                return o.charCodeAt(0) == 3 ? o.slice(1) : o;
            }
            function parse_NameCmt(blob, length, opts) {
                if (opts.biff < 8) {
                    blob.l += length;
                    return;
                }
                var cchName = blob.read_shift(2);
                var cchComment = blob.read_shift(2);
                var name = parse_XLUnicodeStringNoCch(blob, cchName, opts);
                var comment = parse_XLUnicodeStringNoCch(blob, cchComment, opts);
                return [name, comment];
            }
            function parse_ShrFmla(blob, length, opts) {
                var ref = parse_RefU(blob, 6);
                blob.l++;
                var cUse = blob.read_shift(1);
                length -= 8;
                return [parse_SharedParsedFormula(blob, length, opts), cUse, ref];
            }
            function parse_Array(blob, length, opts) {
                var ref = parse_Ref(blob, 6);
                switch (opts.biff) {
                    case 2:
                        blob.l++;
                        length -= 7;
                        break;
                    case 3:
                    case 4:
                        blob.l += 2;
                        length -= 8;
                        break;
                    default:
                        blob.l += 6;
                        length -= 12;
                }
                return [ref, parse_ArrayParsedFormula(blob, length, opts, ref)];
            }
            function parse_MTRSettings(blob) {
                var fMTREnabled = blob.read_shift(4) !== 0;
                var fUserSetThreadCount = blob.read_shift(4) !== 0;
                var cUserThreadCount = blob.read_shift(4);
                return [fMTREnabled, fUserSetThreadCount, cUserThreadCount];
            }
            function parse_NoteSh(blob, length, opts) {
                if (opts.biff < 8) return;
                var row = blob.read_shift(2),
                    col = blob.read_shift(2);
                var flags = blob.read_shift(2),
                    idObj = blob.read_shift(2);
                var stAuthor = parse_XLUnicodeString2(blob, 0, opts);
                if (opts.biff < 8) blob.read_shift(1);
                return [{ r: row, c: col }, stAuthor, idObj, flags];
            }
            function parse_Note(blob, length, opts) {
                return parse_NoteSh(blob, length, opts);
            }
            function parse_MergeCells(blob, length) {
                var merges = [];
                var cmcs = blob.read_shift(2);
                while (cmcs--) merges.push(parse_Ref8U(blob, length));
                return merges;
            }
            function write_MergeCells(merges) {
                var o = new_buf(2 + merges.length * 8);
                o.write_shift(2, merges.length);
                for (var i2 = 0; i2 < merges.length; ++i2) write_Ref8U(merges[i2], o);
                return o;
            }
            function parse_Obj(blob, length, opts) {
                if (opts && opts.biff < 8) return parse_BIFF5Obj(blob, length, opts);
                var cmo = parse_FtCmo(blob, 22);
                var fts = parse_FtArray(blob, length - 22, cmo[1]);
                return { cmo, ft: fts };
            }
            var parse_BIFF5OT = {
                8: function (blob, length) {
                    var tgt = blob.l + length;
                    blob.l += 10;
                    var cf = blob.read_shift(2);
                    blob.l += 4;
                    blob.l += 2;
                    blob.l += 2;
                    blob.l += 2;
                    blob.l += 4;
                    var cchName = blob.read_shift(1);
                    blob.l += cchName;
                    blob.l = tgt;
                    return { fmt: cf };
                },
            };
            function parse_BIFF5Obj(blob, length, opts) {
                blob.l += 4;
                var ot = blob.read_shift(2);
                var id = blob.read_shift(2);
                var grbit = blob.read_shift(2);
                blob.l += 2;
                blob.l += 2;
                blob.l += 2;
                blob.l += 2;
                blob.l += 2;
                blob.l += 2;
                blob.l += 2;
                blob.l += 2;
                blob.l += 2;
                blob.l += 6;
                length -= 36;
                var fts = [];
                fts.push((parse_BIFF5OT[ot] || parsenoop)(blob, length, opts));
                return { cmo: [id, ot, grbit], ft: fts };
            }
            function parse_TxO(blob, length, opts) {
                var s2 = blob.l;
                var texts = '';
                try {
                    blob.l += 4;
                    var ot = (opts.lastobj || { cmo: [0, 0] }).cmo[1];
                    var controlInfo;
                    if ([0, 5, 7, 11, 12, 14].indexOf(ot) == -1) blob.l += 6;
                    else controlInfo = parse_ControlInfo(blob, 6, opts);
                    var cchText = blob.read_shift(2);
                    blob.read_shift(2);
                    parseuint16(blob, 2);
                    var len = blob.read_shift(2);
                    blob.l += len;
                    for (var i2 = 1; i2 < blob.lens.length - 1; ++i2) {
                        if (blob.l - s2 != blob.lens[i2])
                            throw new Error('TxO: bad continue record');
                        var hdr = blob[blob.l];
                        var t2 = parse_XLUnicodeStringNoCch(
                            blob,
                            blob.lens[i2 + 1] - blob.lens[i2] - 1,
                        );
                        texts += t2;
                        if (texts.length >= (hdr ? cchText : 2 * cchText)) break;
                    }
                    if (texts.length !== cchText && texts.length !== cchText * 2) {
                        throw new Error('cchText: ' + cchText + ' != ' + texts.length);
                    }
                    blob.l = s2 + length;
                    return { t: texts };
                } catch (e2) {
                    blob.l = s2 + length;
                    return { t: texts };
                }
            }
            function parse_HLink(blob, length) {
                var ref = parse_Ref8U(blob, 8);
                blob.l += 16;
                var hlink = parse_Hyperlink(blob, length - 24);
                return [ref, hlink];
            }
            function write_HLink(hl) {
                var O = new_buf(24);
                var ref = decode_cell(hl[0]);
                O.write_shift(2, ref.r);
                O.write_shift(2, ref.r);
                O.write_shift(2, ref.c);
                O.write_shift(2, ref.c);
                var clsid = 'd0 c9 ea 79 f9 ba ce 11 8c 82 00 aa 00 4b a9 0b'.split(' ');
                for (var i2 = 0; i2 < 16; ++i2) O.write_shift(1, parseInt(clsid[i2], 16));
                return bconcat([O, write_Hyperlink(hl[1])]);
            }
            function parse_HLinkTooltip(blob, length) {
                blob.read_shift(2);
                var ref = parse_Ref8U(blob, 8);
                var wzTooltip = blob.read_shift((length - 10) / 2, 'dbcs-cont');
                wzTooltip = wzTooltip.replace(chr0, '');
                return [ref, wzTooltip];
            }
            function write_HLinkTooltip(hl) {
                var TT = hl[1].Tooltip;
                var O = new_buf(10 + 2 * (TT.length + 1));
                O.write_shift(2, 2048);
                var ref = decode_cell(hl[0]);
                O.write_shift(2, ref.r);
                O.write_shift(2, ref.r);
                O.write_shift(2, ref.c);
                O.write_shift(2, ref.c);
                for (var i2 = 0; i2 < TT.length; ++i2) O.write_shift(2, TT.charCodeAt(i2));
                O.write_shift(2, 0);
                return O;
            }
            function parse_Country(blob) {
                var o = [0, 0],
                    d;
                d = blob.read_shift(2);
                o[0] = CountryEnum[d] || d;
                d = blob.read_shift(2);
                o[1] = CountryEnum[d] || d;
                return o;
            }
            function write_Country(o) {
                if (!o) o = new_buf(4);
                o.write_shift(2, 1);
                o.write_shift(2, 1);
                return o;
            }
            function parse_ClrtClient(blob) {
                var ccv = blob.read_shift(2);
                var o = [];
                while (ccv-- > 0) o.push(parse_LongRGB(blob, 8));
                return o;
            }
            function parse_Palette(blob) {
                var ccv = blob.read_shift(2);
                var o = [];
                while (ccv-- > 0) o.push(parse_LongRGB(blob, 8));
                return o;
            }
            function parse_XFCRC(blob) {
                blob.l += 2;
                var o = { cxfs: 0, crc: 0 };
                o.cxfs = blob.read_shift(2);
                o.crc = blob.read_shift(4);
                return o;
            }
            function parse_ColInfo(blob, length, opts) {
                if (!opts.cellStyles) return parsenoop(blob, length);
                var w = opts && opts.biff >= 12 ? 4 : 2;
                var colFirst = blob.read_shift(w);
                var colLast = blob.read_shift(w);
                var coldx = blob.read_shift(w);
                var ixfe = blob.read_shift(w);
                var flags = blob.read_shift(2);
                if (w == 2) blob.l += 2;
                var o = { s: colFirst, e: colLast, w: coldx, ixfe, flags };
                if (opts.biff >= 5 || !opts.biff) o.level = (flags >> 8) & 7;
                return o;
            }
            function write_ColInfo(col, idx) {
                var o = new_buf(12);
                o.write_shift(2, idx);
                o.write_shift(2, idx);
                o.write_shift(2, col.width * 256);
                o.write_shift(2, 0);
                var f3 = 0;
                if (col.hidden) f3 |= 1;
                o.write_shift(1, f3);
                f3 = col.level || 0;
                o.write_shift(1, f3);
                o.write_shift(2, 0);
                return o;
            }
            function parse_Setup(blob, length) {
                var o = {};
                if (length < 32) return o;
                blob.l += 16;
                o.header = parse_Xnum(blob, 8);
                o.footer = parse_Xnum(blob, 8);
                blob.l += 2;
                return o;
            }
            function parse_ShtProps(blob, length, opts) {
                var def = { area: false };
                if (opts.biff != 5) {
                    blob.l += length;
                    return def;
                }
                var d = blob.read_shift(1);
                blob.l += 3;
                if (d & 16) def.area = true;
                return def;
            }
            function write_RRTabId(n) {
                var out = new_buf(2 * n);
                for (var i2 = 0; i2 < n; ++i2) out.write_shift(2, i2 + 1);
                return out;
            }
            var parse_Blank = parse_XLSCell;
            var parse_Scl = parseuint16a;
            var parse_String = parse_XLUnicodeString;
            function parse_ImData(blob) {
                var cf = blob.read_shift(2);
                var env = blob.read_shift(2);
                var lcb = blob.read_shift(4);
                var o = { fmt: cf, env, len: lcb, data: blob.slice(blob.l, blob.l + lcb) };
                blob.l += lcb;
                return o;
            }
            function parse_BIFF2STR(blob, length, opts) {
                if (opts.biffguess && opts.biff == 5) opts.biff = 2;
                var cell = parse_XLSCell(blob, 6);
                ++blob.l;
                var str = parse_XLUnicodeString2(blob, length - 7, opts);
                cell.t = 'str';
                cell.val = str;
                return cell;
            }
            function parse_BIFF2NUM(blob) {
                var cell = parse_XLSCell(blob, 6);
                ++blob.l;
                var num = parse_Xnum(blob, 8);
                cell.t = 'n';
                cell.val = num;
                return cell;
            }
            function write_BIFF2NUM(r2, c, val2) {
                var out = new_buf(15);
                write_BIFF2Cell(out, r2, c);
                out.write_shift(8, val2, 'f');
                return out;
            }
            function parse_BIFF2INT(blob) {
                var cell = parse_XLSCell(blob, 6);
                ++blob.l;
                var num = blob.read_shift(2);
                cell.t = 'n';
                cell.val = num;
                return cell;
            }
            function write_BIFF2INT(r2, c, val2) {
                var out = new_buf(9);
                write_BIFF2Cell(out, r2, c);
                out.write_shift(2, val2);
                return out;
            }
            function parse_BIFF2STRING(blob) {
                var cch = blob.read_shift(1);
                if (cch === 0) {
                    blob.l++;
                    return '';
                }
                return blob.read_shift(cch, 'sbcs-cont');
            }
            function parse_BIFF2FONTXTRA(blob, length) {
                blob.l += 6;
                blob.l += 2;
                blob.l += 1;
                blob.l += 3;
                blob.l += 1;
                blob.l += length - 13;
            }
            function parse_RString(blob, length, opts) {
                var end2 = blob.l + length;
                var cell = parse_XLSCell(blob, 6);
                var cch = blob.read_shift(2);
                var str = parse_XLUnicodeStringNoCch(blob, cch, opts);
                blob.l = end2;
                cell.t = 'str';
                cell.val = str;
                return cell;
            }
            var DBF_SUPPORTED_VERSIONS = [2, 3, 48, 49, 131, 139, 140, 245];
            var DBF = (function () {
                var dbf_codepage_map = {
                    /* Code Pages Supported by Visual FoxPro */
                    1: 437,
                    2: 850,
                    3: 1252,
                    4: 1e4,
                    100: 852,
                    101: 866,
                    102: 865,
                    103: 861,
                    104: 895,
                    105: 620,
                    106: 737,
                    107: 857,
                    120: 950,
                    121: 949,
                    122: 936,
                    123: 932,
                    124: 874,
                    125: 1255,
                    126: 1256,
                    150: 10007,
                    151: 10029,
                    152: 10006,
                    200: 1250,
                    201: 1251,
                    202: 1254,
                    203: 1253,
                    /* shapefile DBF extension */
                    0: 20127,
                    8: 865,
                    9: 437,
                    10: 850,
                    11: 437,
                    13: 437,
                    14: 850,
                    15: 437,
                    16: 850,
                    17: 437,
                    18: 850,
                    19: 932,
                    20: 850,
                    21: 437,
                    22: 850,
                    23: 865,
                    24: 437,
                    25: 437,
                    26: 850,
                    27: 437,
                    28: 863,
                    29: 850,
                    31: 852,
                    34: 852,
                    35: 852,
                    36: 860,
                    37: 850,
                    38: 866,
                    55: 850,
                    64: 852,
                    77: 936,
                    78: 949,
                    79: 950,
                    80: 874,
                    87: 1252,
                    88: 1252,
                    89: 1252,
                    108: 863,
                    134: 737,
                    135: 852,
                    136: 857,
                    204: 1257,
                    255: 16969,
                };
                var dbf_reverse_map = evert({
                    1: 437,
                    2: 850,
                    3: 1252,
                    4: 1e4,
                    100: 852,
                    101: 866,
                    102: 865,
                    103: 861,
                    104: 895,
                    105: 620,
                    106: 737,
                    107: 857,
                    120: 950,
                    121: 949,
                    122: 936,
                    123: 932,
                    124: 874,
                    125: 1255,
                    126: 1256,
                    150: 10007,
                    151: 10029,
                    152: 10006,
                    200: 1250,
                    201: 1251,
                    202: 1254,
                    203: 1253,
                    0: 20127,
                });
                function dbf_to_aoa(buf, opts) {
                    var out = [];
                    var d = new_raw_buf(1);
                    switch (opts.type) {
                        case 'base64':
                            d = s2a(Base64_decode(buf));
                            break;
                        case 'binary':
                            d = s2a(buf);
                            break;
                        case 'buffer':
                        case 'array':
                            d = buf;
                            break;
                    }
                    prep_blob(d, 0);
                    var ft = d.read_shift(1);
                    var memo = !!(ft & 136);
                    var vfp = false,
                        l7 = false;
                    switch (ft) {
                        case 2:
                            break;
                        case 3:
                            break;
                        case 48:
                            vfp = true;
                            memo = true;
                            break;
                        case 49:
                            vfp = true;
                            memo = true;
                            break;
                        case 131:
                            break;
                        case 139:
                            break;
                        case 140:
                            l7 = true;
                            break;
                        case 245:
                            break;
                        default:
                            throw new Error('DBF Unsupported Version: ' + ft.toString(16));
                    }
                    var nrow = 0,
                        fpos = 521;
                    if (ft == 2) nrow = d.read_shift(2);
                    d.l += 3;
                    if (ft != 2) nrow = d.read_shift(4);
                    if (nrow > 1048576) nrow = 1e6;
                    if (ft != 2) fpos = d.read_shift(2);
                    var rlen = d.read_shift(2);
                    var current_cp = opts.codepage || 1252;
                    if (ft != 2) {
                        d.l += 16;
                        d.read_shift(1);
                        if (d[d.l] !== 0) current_cp = dbf_codepage_map[d[d.l]];
                        d.l += 1;
                        d.l += 2;
                    }
                    if (l7) d.l += 36;
                    var fields = [],
                        field = {};
                    var hend = Math.min(d.length, ft == 2 ? 521 : fpos - 10 - (vfp ? 264 : 0));
                    var ww = l7 ? 32 : 11;
                    while (d.l < hend && d[d.l] != 13) {
                        field = {};
                        field.name = $cptable.utils
                            .decode(current_cp, d.slice(d.l, d.l + ww))
                            .replace(/[\u0000\r\n].*$/g, '');
                        d.l += ww;
                        field.type = String.fromCharCode(d.read_shift(1));
                        if (ft != 2 && !l7) field.offset = d.read_shift(4);
                        field.len = d.read_shift(1);
                        if (ft == 2) field.offset = d.read_shift(2);
                        field.dec = d.read_shift(1);
                        if (field.name.length) fields.push(field);
                        if (ft != 2) d.l += l7 ? 13 : 14;
                        switch (field.type) {
                            case 'B':
                                if ((!vfp || field.len != 8) && opts.WTF)
                                    console.log('Skipping ' + field.name + ':' + field.type);
                                break;
                            case 'G':
                            case 'P':
                                if (opts.WTF)
                                    console.log('Skipping ' + field.name + ':' + field.type);
                                break;
                            case '+':
                            case '0':
                            case '@':
                            case 'C':
                            case 'D':
                            case 'F':
                            case 'I':
                            case 'L':
                            case 'M':
                            case 'N':
                            case 'O':
                            case 'T':
                            case 'Y':
                                break;
                            default:
                                throw new Error('Unknown Field Type: ' + field.type);
                        }
                    }
                    if (d[d.l] !== 13) d.l = fpos - 1;
                    if (d.read_shift(1) !== 13)
                        throw new Error('DBF Terminator not found ' + d.l + ' ' + d[d.l]);
                    d.l = fpos;
                    var R = 0,
                        C = 0;
                    out[0] = [];
                    for (C = 0; C != fields.length; ++C) out[0][C] = fields[C].name;
                    while (nrow-- > 0) {
                        if (d[d.l] === 42) {
                            d.l += rlen;
                            continue;
                        }
                        ++d.l;
                        out[++R] = [];
                        C = 0;
                        for (C = 0; C != fields.length; ++C) {
                            var dd = d.slice(d.l, d.l + fields[C].len);
                            d.l += fields[C].len;
                            prep_blob(dd, 0);
                            var s2 = $cptable.utils.decode(current_cp, dd);
                            switch (fields[C].type) {
                                case 'C':
                                    if (s2.trim().length) out[R][C] = s2.replace(/\s+$/, '');
                                    break;
                                case 'D':
                                    if (s2.length === 8)
                                        out[R][C] = new Date(
                                            +s2.slice(0, 4),
                                            +s2.slice(4, 6) - 1,
                                            +s2.slice(6, 8),
                                        );
                                    else out[R][C] = s2;
                                    break;
                                case 'F':
                                    out[R][C] = parseFloat(s2.trim());
                                    break;
                                case '+':
                                case 'I':
                                    out[R][C] = l7
                                        ? dd.read_shift(-4, 'i') ^ 2147483648
                                        : dd.read_shift(4, 'i');
                                    break;
                                case 'L':
                                    switch (s2.trim().toUpperCase()) {
                                        case 'Y':
                                        case 'T':
                                            out[R][C] = true;
                                            break;
                                        case 'N':
                                        case 'F':
                                            out[R][C] = false;
                                            break;
                                        case '':
                                        case '?':
                                            break;
                                        default:
                                            throw new Error('DBF Unrecognized L:|' + s2 + '|');
                                    }
                                    break;
                                case 'M':
                                    if (!memo)
                                        throw new Error(
                                            'DBF Unexpected MEMO for type ' + ft.toString(16),
                                        );
                                    out[R][C] =
                                        '##MEMO##' +
                                        (l7 ? parseInt(s2.trim(), 10) : dd.read_shift(4));
                                    break;
                                case 'N':
                                    s2 = s2.replace(/\u0000/g, '').trim();
                                    if (s2 && s2 != '.') out[R][C] = +s2 || 0;
                                    break;
                                case '@':
                                    out[R][C] = new Date(dd.read_shift(-8, 'f') - 621356832e5);
                                    break;
                                case 'T':
                                    out[R][C] = new Date(
                                        (dd.read_shift(4) - 2440588) * 864e5 + dd.read_shift(4),
                                    );
                                    break;
                                case 'Y':
                                    out[R][C] =
                                        dd.read_shift(4, 'i') / 1e4 +
                                        (dd.read_shift(4, 'i') / 1e4) * Math.pow(2, 32);
                                    break;
                                case 'O':
                                    out[R][C] = -dd.read_shift(-8, 'f');
                                    break;
                                case 'B':
                                    if (vfp && fields[C].len == 8) {
                                        out[R][C] = dd.read_shift(8, 'f');
                                        break;
                                    }
                                case 'G':
                                case 'P':
                                    dd.l += fields[C].len;
                                    break;
                                case '0':
                                    if (fields[C].name === '_NullFlags') break;
                                default:
                                    throw new Error('DBF Unsupported data type ' + fields[C].type);
                            }
                        }
                    }
                    if (ft != 2) {
                        if (d.l < d.length && d[d.l++] != 26)
                            throw new Error(
                                'DBF EOF Marker missing ' +
                                    (d.l - 1) +
                                    ' of ' +
                                    d.length +
                                    ' ' +
                                    d[d.l - 1].toString(16),
                            );
                    }
                    if (opts && opts.sheetRows) out = out.slice(0, opts.sheetRows);
                    opts.DBF = fields;
                    return out;
                }
                function dbf_to_sheet(buf, opts) {
                    var o = opts || {};
                    if (!o.dateNF) o.dateNF = 'yyyymmdd';
                    var ws = aoa_to_sheet(dbf_to_aoa(buf, o), o);
                    ws['!cols'] = o.DBF.map(function (field) {
                        return {
                            wch: field.len,
                            DBF: field,
                        };
                    });
                    delete o.DBF;
                    return ws;
                }
                function dbf_to_workbook(buf, opts) {
                    try {
                        return sheet_to_workbook(dbf_to_sheet(buf, opts), opts);
                    } catch (e2) {
                        if (opts && opts.WTF) throw e2;
                    }
                    return { SheetNames: [], Sheets: {} };
                }
                var _RLEN = { B: 8, C: 250, L: 1, D: 8, '?': 0, '': 0 };
                function sheet_to_dbf(ws, opts) {
                    var o = opts || {};
                    if (+o.codepage >= 0) set_cp(+o.codepage);
                    if (o.type == 'string') throw new Error('Cannot write DBF to JS string');
                    var ba = buf_array();
                    var aoa = sheet_to_json(ws, { header: 1, raw: true, cellDates: true });
                    var headers = aoa[0],
                        data2 = aoa.slice(1),
                        cols = ws['!cols'] || [];
                    var i2 = 0,
                        j = 0,
                        hcnt = 0,
                        rlen = 1;
                    for (i2 = 0; i2 < headers.length; ++i2) {
                        if (((cols[i2] || {}).DBF || {}).name) {
                            headers[i2] = cols[i2].DBF.name;
                            ++hcnt;
                            continue;
                        }
                        if (headers[i2] == null) continue;
                        ++hcnt;
                        if (typeof headers[i2] === 'number') headers[i2] = headers[i2].toString(10);
                        if (typeof headers[i2] !== 'string')
                            throw new Error(
                                'DBF Invalid column name ' +
                                    headers[i2] +
                                    ' |' +
                                    typeof headers[i2] +
                                    '|',
                            );
                        if (headers.indexOf(headers[i2]) !== i2) {
                            for (j = 0; j < 1024; ++j)
                                if (headers.indexOf(headers[i2] + '_' + j) == -1) {
                                    headers[i2] += '_' + j;
                                    break;
                                }
                        }
                    }
                    var range = safe_decode_range(ws['!ref']);
                    var coltypes = [];
                    var colwidths = [];
                    var coldecimals = [];
                    for (i2 = 0; i2 <= range.e.c - range.s.c; ++i2) {
                        var guess = '',
                            _guess = '',
                            maxlen = 0;
                        var col = [];
                        for (j = 0; j < data2.length; ++j) {
                            if (data2[j][i2] != null) col.push(data2[j][i2]);
                        }
                        if (col.length == 0 || headers[i2] == null) {
                            coltypes[i2] = '?';
                            continue;
                        }
                        for (j = 0; j < col.length; ++j) {
                            switch (typeof col[j]) {
                                case 'number':
                                    _guess = 'B';
                                    break;
                                case 'string':
                                    _guess = 'C';
                                    break;
                                case 'boolean':
                                    _guess = 'L';
                                    break;
                                case 'object':
                                    _guess = col[j] instanceof Date ? 'D' : 'C';
                                    break;
                                default:
                                    _guess = 'C';
                            }
                            maxlen = Math.max(maxlen, String(col[j]).length);
                            guess = guess && guess != _guess ? 'C' : _guess;
                        }
                        if (maxlen > 250) maxlen = 250;
                        _guess = ((cols[i2] || {}).DBF || {}).type;
                        if (_guess == 'C') {
                            if (cols[i2].DBF.len > maxlen) maxlen = cols[i2].DBF.len;
                        }
                        if (guess == 'B' && _guess == 'N') {
                            guess = 'N';
                            coldecimals[i2] = cols[i2].DBF.dec;
                            maxlen = cols[i2].DBF.len;
                        }
                        colwidths[i2] = guess == 'C' || _guess == 'N' ? maxlen : _RLEN[guess] || 0;
                        rlen += colwidths[i2];
                        coltypes[i2] = guess;
                    }
                    var h2 = ba.next(32);
                    h2.write_shift(4, 318902576);
                    h2.write_shift(4, data2.length);
                    h2.write_shift(2, 296 + 32 * hcnt);
                    h2.write_shift(2, rlen);
                    for (i2 = 0; i2 < 4; ++i2) h2.write_shift(4, 0);
                    h2.write_shift(4, 0 | ((+dbf_reverse_map[current_ansi] || 3) << 8));
                    for (i2 = 0, j = 0; i2 < headers.length; ++i2) {
                        if (headers[i2] == null) continue;
                        var hf = ba.next(32);
                        var _f = (headers[i2].slice(-10) + '\0\0\0\0\0\0\0\0\0\0\0').slice(0, 11);
                        hf.write_shift(1, _f, 'sbcs');
                        hf.write_shift(1, coltypes[i2] == '?' ? 'C' : coltypes[i2], 'sbcs');
                        hf.write_shift(4, j);
                        hf.write_shift(1, colwidths[i2] || _RLEN[coltypes[i2]] || 0);
                        hf.write_shift(1, coldecimals[i2] || 0);
                        hf.write_shift(1, 2);
                        hf.write_shift(4, 0);
                        hf.write_shift(1, 0);
                        hf.write_shift(4, 0);
                        hf.write_shift(4, 0);
                        j += colwidths[i2] || _RLEN[coltypes[i2]] || 0;
                    }
                    var hb = ba.next(264);
                    hb.write_shift(4, 13);
                    for (i2 = 0; i2 < 65; ++i2) hb.write_shift(4, 0);
                    for (i2 = 0; i2 < data2.length; ++i2) {
                        var rout = ba.next(rlen);
                        rout.write_shift(1, 0);
                        for (j = 0; j < headers.length; ++j) {
                            if (headers[j] == null) continue;
                            switch (coltypes[j]) {
                                case 'L':
                                    rout.write_shift(
                                        1,
                                        data2[i2][j] == null ? 63 : data2[i2][j] ? 84 : 70,
                                    );
                                    break;
                                case 'B':
                                    rout.write_shift(8, data2[i2][j] || 0, 'f');
                                    break;
                                case 'N':
                                    var _n = '0';
                                    if (typeof data2[i2][j] == 'number')
                                        _n = data2[i2][j].toFixed(coldecimals[j] || 0);
                                    for (hcnt = 0; hcnt < colwidths[j] - _n.length; ++hcnt)
                                        rout.write_shift(1, 32);
                                    rout.write_shift(1, _n, 'sbcs');
                                    break;
                                case 'D':
                                    if (!data2[i2][j]) rout.write_shift(8, '00000000', 'sbcs');
                                    else {
                                        rout.write_shift(
                                            4,
                                            ('0000' + data2[i2][j].getFullYear()).slice(-4),
                                            'sbcs',
                                        );
                                        rout.write_shift(
                                            2,
                                            ('00' + (data2[i2][j].getMonth() + 1)).slice(-2),
                                            'sbcs',
                                        );
                                        rout.write_shift(
                                            2,
                                            ('00' + data2[i2][j].getDate()).slice(-2),
                                            'sbcs',
                                        );
                                    }
                                    break;
                                case 'C':
                                    var _s = String(data2[i2][j] != null ? data2[i2][j] : '').slice(
                                        0,
                                        colwidths[j],
                                    );
                                    rout.write_shift(1, _s, 'sbcs');
                                    for (hcnt = 0; hcnt < colwidths[j] - _s.length; ++hcnt)
                                        rout.write_shift(1, 32);
                                    break;
                            }
                        }
                    }
                    ba.next(1).write_shift(1, 26);
                    return ba.end();
                }
                return {
                    to_workbook: dbf_to_workbook,
                    to_sheet: dbf_to_sheet,
                    from_sheet: sheet_to_dbf,
                };
            })();
            var SYLK = (function () {
                var sylk_escapes = {
                    AA: '\xC0',
                    BA: '\xC1',
                    CA: '\xC2',
                    DA: 195,
                    HA: '\xC4',
                    JA: 197,
                    AE: '\xC8',
                    BE: '\xC9',
                    CE: '\xCA',
                    HE: '\xCB',
                    AI: '\xCC',
                    BI: '\xCD',
                    CI: '\xCE',
                    HI: '\xCF',
                    AO: '\xD2',
                    BO: '\xD3',
                    CO: '\xD4',
                    DO: 213,
                    HO: '\xD6',
                    AU: '\xD9',
                    BU: '\xDA',
                    CU: '\xDB',
                    HU: '\xDC',
                    Aa: '\xE0',
                    Ba: '\xE1',
                    Ca: '\xE2',
                    Da: 227,
                    Ha: '\xE4',
                    Ja: 229,
                    Ae: '\xE8',
                    Be: '\xE9',
                    Ce: '\xEA',
                    He: '\xEB',
                    Ai: '\xEC',
                    Bi: '\xED',
                    Ci: '\xEE',
                    Hi: '\xEF',
                    Ao: '\xF2',
                    Bo: '\xF3',
                    Co: '\xF4',
                    Do: 245,
                    Ho: '\xF6',
                    Au: '\xF9',
                    Bu: '\xFA',
                    Cu: '\xFB',
                    Hu: '\xFC',
                    KC: '\xC7',
                    Kc: '\xE7',
                    q: '\xE6',
                    z: '\u0153',
                    a: '\xC6',
                    j: '\u0152',
                    DN: 209,
                    Dn: 241,
                    Hy: 255,
                    S: 169,
                    c: 170,
                    R: 174,
                    'B ': 180,
                    0: 176,
                    1: 177,
                    2: 178,
                    3: 179,
                    5: 181,
                    6: 182,
                    7: 183,
                    Q: 185,
                    k: 186,
                    b: 208,
                    i: 216,
                    l: 222,
                    s: 240,
                    y: 248,
                    '!': 161,
                    '"': 162,
                    '#': 163,
                    '(': 164,
                    '%': 165,
                    "'": 167,
                    'H ': 168,
                    '+': 171,
                    ';': 187,
                    '<': 188,
                    '=': 189,
                    '>': 190,
                    '?': 191,
                    '{': 223,
                };
                var sylk_char_regex = new RegExp(
                    '\x1BN(' +
                        keys(sylk_escapes)
                            .join('|')
                            .replace(/\|\|\|/, '|\\||')
                            .replace(/([?()+])/g, '\\$1') +
                        '|\\|)',
                    'gm',
                );
                var sylk_char_fn = function (_, $1) {
                    var o = sylk_escapes[$1];
                    return typeof o == 'number' ? _getansi(o) : o;
                };
                var decode_sylk_char = function ($$, $1, $22) {
                    var newcc = (($1.charCodeAt(0) - 32) << 4) | ($22.charCodeAt(0) - 48);
                    return newcc == 59 ? $$ : _getansi(newcc);
                };
                sylk_escapes['|'] = 254;
                function sylk_to_aoa(d, opts) {
                    switch (opts.type) {
                        case 'base64':
                            return sylk_to_aoa_str(Base64_decode(d), opts);
                        case 'binary':
                            return sylk_to_aoa_str(d, opts);
                        case 'buffer':
                            return sylk_to_aoa_str(
                                has_buf && Buffer.isBuffer(d) ? d.toString('binary') : a2s(d),
                                opts,
                            );
                        case 'array':
                            return sylk_to_aoa_str(cc2str(d), opts);
                    }
                    throw new Error('Unrecognized type ' + opts.type);
                }
                function sylk_to_aoa_str(str, opts) {
                    var records = str.split(/[\n\r]+/),
                        R = -1,
                        C = -1,
                        ri = 0,
                        rj = 0,
                        arr = [];
                    var formats = [];
                    var next_cell_format = null;
                    var sht = {},
                        rowinfo = [],
                        colinfo = [],
                        cw = [];
                    var Mval = 0,
                        j;
                    if (+opts.codepage >= 0) set_cp(+opts.codepage);
                    for (; ri !== records.length; ++ri) {
                        Mval = 0;
                        var rstr = records[ri]
                            .trim()
                            .replace(/\x1B([\x20-\x2F])([\x30-\x3F])/g, decode_sylk_char)
                            .replace(sylk_char_regex, sylk_char_fn);
                        var record = rstr
                            .replace(/;;/g, '\0')
                            .split(';')
                            .map(function (x2) {
                                return x2.replace(/\u0000/g, ';');
                            });
                        var RT = record[0],
                            val2;
                        if (rstr.length > 0)
                            switch (RT) {
                                case 'ID':
                                    break;
                                case 'E':
                                    break;
                                case 'B':
                                    break;
                                case 'O':
                                    break;
                                case 'W':
                                    break;
                                case 'P':
                                    if (record[1].charAt(0) == 'P')
                                        formats.push(rstr.slice(3).replace(/;;/g, ';'));
                                    break;
                                case 'C':
                                    var C_seen_K = false,
                                        C_seen_X = false,
                                        C_seen_S = false,
                                        C_seen_E = false,
                                        _R = -1,
                                        _C = -1;
                                    for (rj = 1; rj < record.length; ++rj)
                                        switch (record[rj].charAt(0)) {
                                            case 'A':
                                                break;
                                            case 'X':
                                                C = parseInt(record[rj].slice(1)) - 1;
                                                C_seen_X = true;
                                                break;
                                            case 'Y':
                                                R = parseInt(record[rj].slice(1)) - 1;
                                                if (!C_seen_X) C = 0;
                                                for (j = arr.length; j <= R; ++j) arr[j] = [];
                                                break;
                                            case 'K':
                                                val2 = record[rj].slice(1);
                                                if (val2.charAt(0) === '"')
                                                    val2 = val2.slice(1, val2.length - 1);
                                                else if (val2 === 'TRUE') val2 = true;
                                                else if (val2 === 'FALSE') val2 = false;
                                                else if (!isNaN(fuzzynum(val2))) {
                                                    val2 = fuzzynum(val2);
                                                    if (
                                                        next_cell_format !== null &&
                                                        fmt_is_date(next_cell_format)
                                                    )
                                                        val2 = numdate(val2);
                                                } else if (!isNaN(fuzzydate(val2).getDate())) {
                                                    val2 = parseDate(val2);
                                                }
                                                if (
                                                    typeof $cptable !== 'undefined' &&
                                                    typeof val2 == 'string' &&
                                                    (opts || {}).type != 'string' &&
                                                    (opts || {}).codepage
                                                )
                                                    val2 = $cptable.utils.decode(
                                                        opts.codepage,
                                                        val2,
                                                    );
                                                C_seen_K = true;
                                                break;
                                            case 'E':
                                                C_seen_E = true;
                                                var formula = rc_to_a1(record[rj].slice(1), {
                                                    r: R,
                                                    c: C,
                                                });
                                                arr[R][C] = [arr[R][C], formula];
                                                break;
                                            case 'S':
                                                C_seen_S = true;
                                                arr[R][C] = [arr[R][C], 'S5S'];
                                                break;
                                            case 'G':
                                                break;
                                            case 'R':
                                                _R = parseInt(record[rj].slice(1)) - 1;
                                                break;
                                            case 'C':
                                                _C = parseInt(record[rj].slice(1)) - 1;
                                                break;
                                            default:
                                                if (opts && opts.WTF)
                                                    throw new Error('SYLK bad record ' + rstr);
                                        }
                                    if (C_seen_K) {
                                        if (arr[R][C] && arr[R][C].length == 2) arr[R][C][0] = val2;
                                        else arr[R][C] = val2;
                                        next_cell_format = null;
                                    }
                                    if (C_seen_S) {
                                        if (C_seen_E)
                                            throw new Error(
                                                'SYLK shared formula cannot have own formula',
                                            );
                                        var shrbase = _R > -1 && arr[_R][_C];
                                        if (!shrbase || !shrbase[1])
                                            throw new Error('SYLK shared formula cannot find base');
                                        arr[R][C][1] = shift_formula_str(shrbase[1], {
                                            r: R - _R,
                                            c: C - _C,
                                        });
                                    }
                                    break;
                                case 'F':
                                    var F_seen = 0;
                                    for (rj = 1; rj < record.length; ++rj)
                                        switch (record[rj].charAt(0)) {
                                            case 'X':
                                                C = parseInt(record[rj].slice(1)) - 1;
                                                ++F_seen;
                                                break;
                                            case 'Y':
                                                R = parseInt(record[rj].slice(1)) - 1;
                                                for (j = arr.length; j <= R; ++j) arr[j] = [];
                                                break;
                                            case 'M':
                                                Mval = parseInt(record[rj].slice(1)) / 20;
                                                break;
                                            case 'F':
                                                break;
                                            case 'G':
                                                break;
                                            case 'P':
                                                next_cell_format =
                                                    formats[parseInt(record[rj].slice(1))];
                                                break;
                                            case 'S':
                                                break;
                                            case 'D':
                                                break;
                                            case 'N':
                                                break;
                                            case 'W':
                                                cw = record[rj].slice(1).split(' ');
                                                for (
                                                    j = parseInt(cw[0], 10);
                                                    j <= parseInt(cw[1], 10);
                                                    ++j
                                                ) {
                                                    Mval = parseInt(cw[2], 10);
                                                    colinfo[j - 1] =
                                                        Mval === 0
                                                            ? { hidden: true }
                                                            : { wch: Mval };
                                                    process_col(colinfo[j - 1]);
                                                }
                                                break;
                                            case 'C':
                                                C = parseInt(record[rj].slice(1)) - 1;
                                                if (!colinfo[C]) colinfo[C] = {};
                                                break;
                                            case 'R':
                                                R = parseInt(record[rj].slice(1)) - 1;
                                                if (!rowinfo[R]) rowinfo[R] = {};
                                                if (Mval > 0) {
                                                    rowinfo[R].hpt = Mval;
                                                    rowinfo[R].hpx = pt2px(Mval);
                                                } else if (Mval === 0) rowinfo[R].hidden = true;
                                                break;
                                            default:
                                                if (opts && opts.WTF)
                                                    throw new Error('SYLK bad record ' + rstr);
                                        }
                                    if (F_seen < 1) next_cell_format = null;
                                    break;
                                default:
                                    if (opts && opts.WTF)
                                        throw new Error('SYLK bad record ' + rstr);
                            }
                    }
                    if (rowinfo.length > 0) sht['!rows'] = rowinfo;
                    if (colinfo.length > 0) sht['!cols'] = colinfo;
                    if (opts && opts.sheetRows) arr = arr.slice(0, opts.sheetRows);
                    return [arr, sht];
                }
                function sylk_to_sheet(d, opts) {
                    var aoasht = sylk_to_aoa(d, opts);
                    var aoa = aoasht[0],
                        ws = aoasht[1];
                    var o = aoa_to_sheet(aoa, opts);
                    keys(ws).forEach(function (k) {
                        o[k] = ws[k];
                    });
                    return o;
                }
                function sylk_to_workbook(d, opts) {
                    return sheet_to_workbook(sylk_to_sheet(d, opts), opts);
                }
                function write_ws_cell_sylk(cell, ws, R, C) {
                    var o = 'C;Y' + (R + 1) + ';X' + (C + 1) + ';K';
                    switch (cell.t) {
                        case 'n':
                            o += cell.v || 0;
                            if (cell.f && !cell.F) o += ';E' + a1_to_rc(cell.f, { r: R, c: C });
                            break;
                        case 'b':
                            o += cell.v ? 'TRUE' : 'FALSE';
                            break;
                        case 'e':
                            o += cell.w || cell.v;
                            break;
                        case 'd':
                            o += '"' + (cell.w || cell.v) + '"';
                            break;
                        case 's':
                            o += '"' + cell.v.replace(/"/g, '').replace(/;/g, ';;') + '"';
                            break;
                    }
                    return o;
                }
                function write_ws_cols_sylk(out, cols) {
                    cols.forEach(function (col, i2) {
                        var rec = 'F;W' + (i2 + 1) + ' ' + (i2 + 1) + ' ';
                        if (col.hidden) rec += '0';
                        else {
                            if (typeof col.width == 'number' && !col.wpx)
                                col.wpx = width2px(col.width);
                            if (typeof col.wpx == 'number' && !col.wch) col.wch = px2char(col.wpx);
                            if (typeof col.wch == 'number') rec += Math.round(col.wch);
                        }
                        if (rec.charAt(rec.length - 1) != ' ') out.push(rec);
                    });
                }
                function write_ws_rows_sylk(out, rows) {
                    rows.forEach(function (row, i2) {
                        var rec = 'F;';
                        if (row.hidden) rec += 'M0;';
                        else if (row.hpt) rec += 'M' + 20 * row.hpt + ';';
                        else if (row.hpx) rec += 'M' + 20 * px2pt(row.hpx) + ';';
                        if (rec.length > 2) out.push(rec + 'R' + (i2 + 1));
                    });
                }
                function sheet_to_sylk(ws, opts) {
                    var preamble = ['ID;PWXL;N;E'],
                        o = [];
                    var r2 = safe_decode_range(ws['!ref']),
                        cell;
                    var dense = Array.isArray(ws);
                    var RS = '\r\n';
                    preamble.push('P;PGeneral');
                    preamble.push('F;P0;DG0G8;M255');
                    if (ws['!cols']) write_ws_cols_sylk(preamble, ws['!cols']);
                    if (ws['!rows']) write_ws_rows_sylk(preamble, ws['!rows']);
                    preamble.push(
                        'B;Y' +
                            (r2.e.r - r2.s.r + 1) +
                            ';X' +
                            (r2.e.c - r2.s.c + 1) +
                            ';D' +
                            [r2.s.c, r2.s.r, r2.e.c, r2.e.r].join(' '),
                    );
                    for (var R = r2.s.r; R <= r2.e.r; ++R) {
                        for (var C = r2.s.c; C <= r2.e.c; ++C) {
                            var coord = encode_cell({ r: R, c: C });
                            cell = dense ? (ws[R] || [])[C] : ws[coord];
                            if (!cell || (cell.v == null && (!cell.f || cell.F))) continue;
                            o.push(write_ws_cell_sylk(cell, ws, R, C, opts));
                        }
                    }
                    return preamble.join(RS) + RS + o.join(RS) + RS + 'E' + RS;
                }
                return {
                    to_workbook: sylk_to_workbook,
                    to_sheet: sylk_to_sheet,
                    from_sheet: sheet_to_sylk,
                };
            })();
            var DIF = /* @__PURE__ */ (function () {
                function dif_to_aoa(d, opts) {
                    switch (opts.type) {
                        case 'base64':
                            return dif_to_aoa_str(Base64_decode(d), opts);
                        case 'binary':
                            return dif_to_aoa_str(d, opts);
                        case 'buffer':
                            return dif_to_aoa_str(
                                has_buf && Buffer.isBuffer(d) ? d.toString('binary') : a2s(d),
                                opts,
                            );
                        case 'array':
                            return dif_to_aoa_str(cc2str(d), opts);
                    }
                    throw new Error('Unrecognized type ' + opts.type);
                }
                function dif_to_aoa_str(str, opts) {
                    var records = str.split('\n'),
                        R = -1,
                        C = -1,
                        ri = 0,
                        arr = [];
                    for (; ri !== records.length; ++ri) {
                        if (records[ri].trim() === 'BOT') {
                            arr[++R] = [];
                            C = 0;
                            continue;
                        }
                        if (R < 0) continue;
                        var metadata = records[ri].trim().split(',');
                        var type = metadata[0],
                            value = metadata[1];
                        ++ri;
                        var data2 = records[ri] || '';
                        while ((data2.match(/["]/g) || []).length & 1 && ri < records.length - 1)
                            data2 += '\n' + records[++ri];
                        data2 = data2.trim();
                        switch (+type) {
                            case -1:
                                if (data2 === 'BOT') {
                                    arr[++R] = [];
                                    C = 0;
                                    continue;
                                } else if (data2 !== 'EOD')
                                    throw new Error('Unrecognized DIF special command ' + data2);
                                break;
                            case 0:
                                if (data2 === 'TRUE') arr[R][C] = true;
                                else if (data2 === 'FALSE') arr[R][C] = false;
                                else if (!isNaN(fuzzynum(value))) arr[R][C] = fuzzynum(value);
                                else if (!isNaN(fuzzydate(value).getDate()))
                                    arr[R][C] = parseDate(value);
                                else arr[R][C] = value;
                                ++C;
                                break;
                            case 1:
                                data2 = data2.slice(1, data2.length - 1);
                                data2 = data2.replace(/""/g, '"');
                                if (DIF_XL && data2 && data2.match(/^=".*"$/))
                                    data2 = data2.slice(2, -1);
                                arr[R][C++] = data2 !== '' ? data2 : null;
                                break;
                        }
                        if (data2 === 'EOD') break;
                    }
                    if (opts && opts.sheetRows) arr = arr.slice(0, opts.sheetRows);
                    return arr;
                }
                function dif_to_sheet(str, opts) {
                    return aoa_to_sheet(dif_to_aoa(str, opts), opts);
                }
                function dif_to_workbook(str, opts) {
                    return sheet_to_workbook(dif_to_sheet(str, opts), opts);
                }
                var sheet_to_dif = /* @__PURE__ */ (function () {
                    var push_field = function pf(o, topic, v, n, s2) {
                        o.push(topic);
                        o.push(v + ',' + n);
                        o.push('"' + s2.replace(/"/g, '""') + '"');
                    };
                    var push_value = function po(o, type, v, s2) {
                        o.push(type + ',' + v);
                        o.push(type == 1 ? '"' + s2.replace(/"/g, '""') + '"' : s2);
                    };
                    return function sheet_to_dif2(ws) {
                        var o = [];
                        var r2 = safe_decode_range(ws['!ref']),
                            cell;
                        var dense = Array.isArray(ws);
                        push_field(o, 'TABLE', 0, 1, 'sheetjs');
                        push_field(o, 'VECTORS', 0, r2.e.r - r2.s.r + 1, '');
                        push_field(o, 'TUPLES', 0, r2.e.c - r2.s.c + 1, '');
                        push_field(o, 'DATA', 0, 0, '');
                        for (var R = r2.s.r; R <= r2.e.r; ++R) {
                            push_value(o, -1, 0, 'BOT');
                            for (var C = r2.s.c; C <= r2.e.c; ++C) {
                                var coord = encode_cell({ r: R, c: C });
                                cell = dense ? (ws[R] || [])[C] : ws[coord];
                                if (!cell) {
                                    push_value(o, 1, 0, '');
                                    continue;
                                }
                                switch (cell.t) {
                                    case 'n':
                                        var val2 = DIF_XL ? cell.w : cell.v;
                                        if (!val2 && cell.v != null) val2 = cell.v;
                                        if (val2 == null) {
                                            if (DIF_XL && cell.f && !cell.F)
                                                push_value(o, 1, 0, '=' + cell.f);
                                            else push_value(o, 1, 0, '');
                                        } else push_value(o, 0, val2, 'V');
                                        break;
                                    case 'b':
                                        push_value(o, 0, cell.v ? 1 : 0, cell.v ? 'TRUE' : 'FALSE');
                                        break;
                                    case 's':
                                        push_value(
                                            o,
                                            1,
                                            0,
                                            !DIF_XL || isNaN(cell.v) ? cell.v : '="' + cell.v + '"',
                                        );
                                        break;
                                    case 'd':
                                        if (!cell.w)
                                            cell.w = SSF_format(
                                                cell.z || table_fmt[14],
                                                datenum(parseDate(cell.v)),
                                            );
                                        if (DIF_XL) push_value(o, 0, cell.w, 'V');
                                        else push_value(o, 1, 0, cell.w);
                                        break;
                                    default:
                                        push_value(o, 1, 0, '');
                                }
                            }
                        }
                        push_value(o, -1, 0, 'EOD');
                        var RS = '\r\n';
                        var oo = o.join(RS);
                        return oo;
                    };
                })();
                return {
                    to_workbook: dif_to_workbook,
                    to_sheet: dif_to_sheet,
                    from_sheet: sheet_to_dif,
                };
            })();
            var ETH = (function () {
                function decode(s2) {
                    return s2.replace(/\\b/g, '\\').replace(/\\c/g, ':').replace(/\\n/g, '\n');
                }
                function encode(s2) {
                    return s2.replace(/\\/g, '\\b').replace(/:/g, '\\c').replace(/\n/g, '\\n');
                }
                function eth_to_aoa(str, opts) {
                    var records = str.split('\n'),
                        R = -1,
                        C = -1,
                        ri = 0,
                        arr = [];
                    for (; ri !== records.length; ++ri) {
                        var record = records[ri].trim().split(':');
                        if (record[0] !== 'cell') continue;
                        var addr = decode_cell(record[1]);
                        if (arr.length <= addr.r) {
                            for (R = arr.length; R <= addr.r; ++R) if (!arr[R]) arr[R] = [];
                        }
                        R = addr.r;
                        C = addr.c;
                        switch (record[2]) {
                            case 't':
                                arr[R][C] = decode(record[3]);
                                break;
                            case 'v':
                                arr[R][C] = +record[3];
                                break;
                            case 'vtf':
                                var _f = record[record.length - 1];
                            case 'vtc':
                                switch (record[3]) {
                                    case 'nl':
                                        arr[R][C] = +record[4] ? true : false;
                                        break;
                                    default:
                                        arr[R][C] = +record[4];
                                        break;
                                }
                                if (record[2] == 'vtf') arr[R][C] = [arr[R][C], _f];
                        }
                    }
                    if (opts && opts.sheetRows) arr = arr.slice(0, opts.sheetRows);
                    return arr;
                }
                function eth_to_sheet(d, opts) {
                    return aoa_to_sheet(eth_to_aoa(d, opts), opts);
                }
                function eth_to_workbook(d, opts) {
                    return sheet_to_workbook(eth_to_sheet(d, opts), opts);
                }
                var header = [
                    'socialcalc:version:1.5',
                    'MIME-Version: 1.0',
                    'Content-Type: multipart/mixed; boundary=SocialCalcSpreadsheetControlSave',
                ].join('\n');
                var sep =
                    [
                        '--SocialCalcSpreadsheetControlSave',
                        'Content-type: text/plain; charset=UTF-8',
                    ].join('\n') + '\n';
                var meta = ['# SocialCalc Spreadsheet Control Save', 'part:sheet'].join('\n');
                var end2 = '--SocialCalcSpreadsheetControlSave--';
                function sheet_to_eth_data(ws) {
                    if (!ws || !ws['!ref']) return '';
                    var o = [],
                        oo = [],
                        cell,
                        coord = '';
                    var r2 = decode_range(ws['!ref']);
                    var dense = Array.isArray(ws);
                    for (var R = r2.s.r; R <= r2.e.r; ++R) {
                        for (var C = r2.s.c; C <= r2.e.c; ++C) {
                            coord = encode_cell({ r: R, c: C });
                            cell = dense ? (ws[R] || [])[C] : ws[coord];
                            if (!cell || cell.v == null || cell.t === 'z') continue;
                            oo = ['cell', coord, 't'];
                            switch (cell.t) {
                                case 's':
                                case 'str':
                                    oo.push(encode(cell.v));
                                    break;
                                case 'n':
                                    if (!cell.f) {
                                        oo[2] = 'v';
                                        oo[3] = cell.v;
                                    } else {
                                        oo[2] = 'vtf';
                                        oo[3] = 'n';
                                        oo[4] = cell.v;
                                        oo[5] = encode(cell.f);
                                    }
                                    break;
                                case 'b':
                                    oo[2] = 'vt' + (cell.f ? 'f' : 'c');
                                    oo[3] = 'nl';
                                    oo[4] = cell.v ? '1' : '0';
                                    oo[5] = encode(cell.f || (cell.v ? 'TRUE' : 'FALSE'));
                                    break;
                                case 'd':
                                    var t2 = datenum(parseDate(cell.v));
                                    oo[2] = 'vtc';
                                    oo[3] = 'nd';
                                    oo[4] = '' + t2;
                                    oo[5] = cell.w || SSF_format(cell.z || table_fmt[14], t2);
                                    break;
                                case 'e':
                                    continue;
                            }
                            o.push(oo.join(':'));
                        }
                    }
                    o.push(
                        'sheet:c:' +
                            (r2.e.c - r2.s.c + 1) +
                            ':r:' +
                            (r2.e.r - r2.s.r + 1) +
                            ':tvf:1',
                    );
                    o.push('valueformat:1:text-wiki');
                    return o.join('\n');
                }
                function sheet_to_eth(ws) {
                    return [header, sep, meta, sep, sheet_to_eth_data(ws), end2].join('\n');
                }
                return {
                    to_workbook: eth_to_workbook,
                    to_sheet: eth_to_sheet,
                    from_sheet: sheet_to_eth,
                };
            })();
            var PRN = /* @__PURE__ */ (function () {
                function set_text_arr(data2, arr, R, C, o) {
                    if (o.raw) arr[R][C] = data2;
                    else if (data2 === '') {
                    } else if (data2 === 'TRUE') arr[R][C] = true;
                    else if (data2 === 'FALSE') arr[R][C] = false;
                    else if (!isNaN(fuzzynum(data2))) arr[R][C] = fuzzynum(data2);
                    else if (!isNaN(fuzzydate(data2).getDate())) arr[R][C] = parseDate(data2);
                    else arr[R][C] = data2;
                }
                function prn_to_aoa_str(f3, opts) {
                    var o = opts || {};
                    var arr = [];
                    if (!f3 || f3.length === 0) return arr;
                    var lines = f3.split(/[\r\n]/);
                    var L = lines.length - 1;
                    while (L >= 0 && lines[L].length === 0) --L;
                    var start = 10,
                        idx = 0;
                    var R = 0;
                    for (; R <= L; ++R) {
                        idx = lines[R].indexOf(' ');
                        if (idx == -1) idx = lines[R].length;
                        else idx++;
                        start = Math.max(start, idx);
                    }
                    for (R = 0; R <= L; ++R) {
                        arr[R] = [];
                        var C = 0;
                        set_text_arr(lines[R].slice(0, start).trim(), arr, R, C, o);
                        for (C = 1; C <= (lines[R].length - start) / 10 + 1; ++C)
                            set_text_arr(
                                lines[R].slice(start + (C - 1) * 10, start + C * 10).trim(),
                                arr,
                                R,
                                C,
                                o,
                            );
                    }
                    if (o.sheetRows) arr = arr.slice(0, o.sheetRows);
                    return arr;
                }
                var guess_seps = {
                    44: ',',
                    9: '	',
                    59: ';',
                    124: '|',
                };
                var guess_sep_weights = {
                    44: 3,
                    9: 2,
                    59: 1,
                    124: 0,
                };
                function guess_sep(str) {
                    var cnt = {},
                        instr = false,
                        end2 = 0,
                        cc = 0;
                    for (; end2 < str.length; ++end2) {
                        if ((cc = str.charCodeAt(end2)) == 34) instr = !instr;
                        else if (!instr && cc in guess_seps) cnt[cc] = (cnt[cc] || 0) + 1;
                    }
                    cc = [];
                    for (end2 in cnt)
                        if (Object.prototype.hasOwnProperty.call(cnt, end2)) {
                            cc.push([cnt[end2], end2]);
                        }
                    if (!cc.length) {
                        cnt = guess_sep_weights;
                        for (end2 in cnt)
                            if (Object.prototype.hasOwnProperty.call(cnt, end2)) {
                                cc.push([cnt[end2], end2]);
                            }
                    }
                    cc.sort(function (a, b) {
                        return a[0] - b[0] || guess_sep_weights[a[1]] - guess_sep_weights[b[1]];
                    });
                    return guess_seps[cc.pop()[1]] || 44;
                }
                function dsv_to_sheet_str(str, opts) {
                    var o = opts || {};
                    var sep = '';
                    if (DENSE != null && o.dense == null) o.dense = DENSE;
                    var ws = o.dense ? [] : {};
                    var range = { s: { c: 0, r: 0 }, e: { c: 0, r: 0 } };
                    if (str.slice(0, 4) == 'sep=') {
                        if (str.charCodeAt(5) == 13 && str.charCodeAt(6) == 10) {
                            sep = str.charAt(4);
                            str = str.slice(7);
                        } else if (str.charCodeAt(5) == 13 || str.charCodeAt(5) == 10) {
                            sep = str.charAt(4);
                            str = str.slice(6);
                        } else sep = guess_sep(str.slice(0, 1024));
                    } else if (o && o.FS) sep = o.FS;
                    else sep = guess_sep(str.slice(0, 1024));
                    var R = 0,
                        C = 0,
                        v = 0;
                    var start = 0,
                        end2 = 0,
                        sepcc = sep.charCodeAt(0),
                        instr = false,
                        cc = 0,
                        startcc = str.charCodeAt(0);
                    str = str.replace(/\r\n/gm, '\n');
                    var _re = o.dateNF != null ? dateNF_regex(o.dateNF) : null;
                    function finish_cell() {
                        var s2 = str.slice(start, end2);
                        var cell = {};
                        if (s2.charAt(0) == '"' && s2.charAt(s2.length - 1) == '"')
                            s2 = s2.slice(1, -1).replace(/""/g, '"');
                        if (s2.length === 0) cell.t = 'z';
                        else if (o.raw) {
                            cell.t = 's';
                            cell.v = s2;
                        } else if (s2.trim().length === 0) {
                            cell.t = 's';
                            cell.v = s2;
                        } else if (s2.charCodeAt(0) == 61) {
                            if (s2.charCodeAt(1) == 34 && s2.charCodeAt(s2.length - 1) == 34) {
                                cell.t = 's';
                                cell.v = s2.slice(2, -1).replace(/""/g, '"');
                            } else if (fuzzyfmla(s2)) {
                                cell.t = 'n';
                                cell.f = s2.slice(1);
                            } else {
                                cell.t = 's';
                                cell.v = s2;
                            }
                        } else if (s2 == 'TRUE') {
                            cell.t = 'b';
                            cell.v = true;
                        } else if (s2 == 'FALSE') {
                            cell.t = 'b';
                            cell.v = false;
                        } else if (!isNaN((v = fuzzynum(s2)))) {
                            cell.t = 'n';
                            if (o.cellText !== false) cell.w = s2;
                            cell.v = v;
                        } else if (!isNaN(fuzzydate(s2).getDate()) || (_re && s2.match(_re))) {
                            cell.z = o.dateNF || table_fmt[14];
                            var k = 0;
                            if (_re && s2.match(_re)) {
                                s2 = dateNF_fix(s2, o.dateNF, s2.match(_re) || []);
                                k = 1;
                            }
                            if (o.cellDates) {
                                cell.t = 'd';
                                cell.v = parseDate(s2, k);
                            } else {
                                cell.t = 'n';
                                cell.v = datenum(parseDate(s2, k));
                            }
                            if (o.cellText !== false)
                                cell.w = SSF_format(
                                    cell.z,
                                    cell.v instanceof Date ? datenum(cell.v) : cell.v,
                                );
                            if (!o.cellNF) delete cell.z;
                        } else {
                            cell.t = 's';
                            cell.v = s2;
                        }
                        if (cell.t == 'z') {
                        } else if (o.dense) {
                            if (!ws[R]) ws[R] = [];
                            ws[R][C] = cell;
                        } else ws[encode_cell({ c: C, r: R })] = cell;
                        start = end2 + 1;
                        startcc = str.charCodeAt(start);
                        if (range.e.c < C) range.e.c = C;
                        if (range.e.r < R) range.e.r = R;
                        if (cc == sepcc) ++C;
                        else {
                            C = 0;
                            ++R;
                            if (o.sheetRows && o.sheetRows <= R) return true;
                        }
                    }
                    outer: for (; end2 < str.length; ++end2)
                        switch ((cc = str.charCodeAt(end2))) {
                            case 34:
                                if (startcc === 34) instr = !instr;
                                break;
                            case sepcc:
                            case 10:
                            case 13:
                                if (!instr && finish_cell()) break outer;
                                break;
                            default:
                                break;
                        }
                    if (end2 - start > 0) finish_cell();
                    ws['!ref'] = encode_range(range);
                    return ws;
                }
                function prn_to_sheet_str(str, opts) {
                    if (!(opts && opts.PRN)) return dsv_to_sheet_str(str, opts);
                    if (opts.FS) return dsv_to_sheet_str(str, opts);
                    if (str.slice(0, 4) == 'sep=') return dsv_to_sheet_str(str, opts);
                    if (str.indexOf('	') >= 0 || str.indexOf(',') >= 0 || str.indexOf(';') >= 0)
                        return dsv_to_sheet_str(str, opts);
                    return aoa_to_sheet(prn_to_aoa_str(str, opts), opts);
                }
                function prn_to_sheet(d, opts) {
                    var str = '',
                        bytes = opts.type == 'string' ? [0, 0, 0, 0] : firstbyte(d, opts);
                    switch (opts.type) {
                        case 'base64':
                            str = Base64_decode(d);
                            break;
                        case 'binary':
                            str = d;
                            break;
                        case 'buffer':
                            if (opts.codepage == 65001) str = d.toString('utf8');
                            else if (opts.codepage && typeof $cptable !== 'undefined')
                                str = $cptable.utils.decode(opts.codepage, d);
                            else
                                str = has_buf && Buffer.isBuffer(d) ? d.toString('binary') : a2s(d);
                            break;
                        case 'array':
                            str = cc2str(d);
                            break;
                        case 'string':
                            str = d;
                            break;
                        default:
                            throw new Error('Unrecognized type ' + opts.type);
                    }
                    if (bytes[0] == 239 && bytes[1] == 187 && bytes[2] == 191)
                        str = utf8read(str.slice(3));
                    else if (
                        opts.type != 'string' &&
                        opts.type != 'buffer' &&
                        opts.codepage == 65001
                    )
                        str = utf8read(str);
                    else if (
                        opts.type == 'binary' &&
                        typeof $cptable !== 'undefined' &&
                        opts.codepage
                    )
                        str = $cptable.utils.decode(
                            opts.codepage,
                            $cptable.utils.encode(28591, str),
                        );
                    if (str.slice(0, 19) == 'socialcalc:version:')
                        return ETH.to_sheet(opts.type == 'string' ? str : utf8read(str), opts);
                    return prn_to_sheet_str(str, opts);
                }
                function prn_to_workbook(d, opts) {
                    return sheet_to_workbook(prn_to_sheet(d, opts), opts);
                }
                function sheet_to_prn(ws) {
                    var o = [];
                    var r2 = safe_decode_range(ws['!ref']),
                        cell;
                    var dense = Array.isArray(ws);
                    for (var R = r2.s.r; R <= r2.e.r; ++R) {
                        var oo = [];
                        for (var C = r2.s.c; C <= r2.e.c; ++C) {
                            var coord = encode_cell({ r: R, c: C });
                            cell = dense ? (ws[R] || [])[C] : ws[coord];
                            if (!cell || cell.v == null) {
                                oo.push('          ');
                                continue;
                            }
                            var w = (cell.w || (format_cell(cell), cell.w) || '').slice(0, 10);
                            while (w.length < 10) w += ' ';
                            oo.push(w + (C === 0 ? ' ' : ''));
                        }
                        o.push(oo.join(''));
                    }
                    return o.join('\n');
                }
                return {
                    to_workbook: prn_to_workbook,
                    to_sheet: prn_to_sheet,
                    from_sheet: sheet_to_prn,
                };
            })();
            function read_wb_ID(d, opts) {
                var o = opts || {},
                    OLD_WTF = !!o.WTF;
                o.WTF = true;
                try {
                    var out = SYLK.to_workbook(d, o);
                    o.WTF = OLD_WTF;
                    return out;
                } catch (e2) {
                    o.WTF = OLD_WTF;
                    if (!e2.message.match(/SYLK bad record ID/) && OLD_WTF) throw e2;
                    return PRN.to_workbook(d, opts);
                }
            }
            var WK_ = /* @__PURE__ */ (function () {
                function lotushopper(data2, cb, opts) {
                    if (!data2) return;
                    prep_blob(data2, data2.l || 0);
                    var Enum = opts.Enum || WK1Enum;
                    while (data2.l < data2.length) {
                        var RT = data2.read_shift(2);
                        var R = Enum[RT] || Enum[65535];
                        var length = data2.read_shift(2);
                        var tgt = data2.l + length;
                        var d = R.f && R.f(data2, length, opts);
                        data2.l = tgt;
                        if (cb(d, R, RT)) return;
                    }
                }
                function lotus_to_workbook(d, opts) {
                    switch (opts.type) {
                        case 'base64':
                            return lotus_to_workbook_buf(s2a(Base64_decode(d)), opts);
                        case 'binary':
                            return lotus_to_workbook_buf(s2a(d), opts);
                        case 'buffer':
                        case 'array':
                            return lotus_to_workbook_buf(d, opts);
                    }
                    throw 'Unsupported type ' + opts.type;
                }
                function lotus_to_workbook_buf(d, opts) {
                    if (!d) return d;
                    var o = opts || {};
                    if (DENSE != null && o.dense == null) o.dense = DENSE;
                    var s2 = o.dense ? [] : {},
                        n = 'Sheet1',
                        next_n = '',
                        sidx = 0;
                    var sheets = {},
                        snames = [],
                        realnames = [];
                    var refguess = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
                    var sheetRows = o.sheetRows || 0;
                    if (d[2] == 0) {
                        if (d[3] == 8 || d[3] == 9) {
                            if (d.length >= 16 && d[14] == 5 && d[15] === 108)
                                throw new Error('Unsupported Works 3 for Mac file');
                        }
                    }
                    if (d[2] == 2) {
                        o.Enum = WK1Enum;
                        lotushopper(
                            d,
                            function (val2, R, RT) {
                                switch (RT) {
                                    case 0:
                                        o.vers = val2;
                                        if (val2 >= 4096) o.qpro = true;
                                        break;
                                    case 6:
                                        refguess = val2;
                                        break;
                                    case 204:
                                        if (val2) next_n = val2;
                                        break;
                                    case 222:
                                        next_n = val2;
                                        break;
                                    case 15:
                                    case 51:
                                        if (!o.qpro) val2[1].v = val2[1].v.slice(1);
                                    case 13:
                                    case 14:
                                    case 16:
                                        if (
                                            RT == 14 &&
                                            (val2[2] & 112) == 112 &&
                                            (val2[2] & 15) > 1 &&
                                            (val2[2] & 15) < 15
                                        ) {
                                            val2[1].z = o.dateNF || table_fmt[14];
                                            if (o.cellDates) {
                                                val2[1].t = 'd';
                                                val2[1].v = numdate(val2[1].v);
                                            }
                                        }
                                        if (o.qpro) {
                                            if (val2[3] > sidx) {
                                                s2['!ref'] = encode_range(refguess);
                                                sheets[n] = s2;
                                                snames.push(n);
                                                s2 = o.dense ? [] : {};
                                                refguess = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
                                                sidx = val2[3];
                                                n = next_n || 'Sheet' + (sidx + 1);
                                                next_n = '';
                                            }
                                        }
                                        var tmpcell = o.dense
                                            ? (s2[val2[0].r] || [])[val2[0].c]
                                            : s2[encode_cell(val2[0])];
                                        if (tmpcell) {
                                            tmpcell.t = val2[1].t;
                                            tmpcell.v = val2[1].v;
                                            if (val2[1].z != null) tmpcell.z = val2[1].z;
                                            if (val2[1].f != null) tmpcell.f = val2[1].f;
                                            break;
                                        }
                                        if (o.dense) {
                                            if (!s2[val2[0].r]) s2[val2[0].r] = [];
                                            s2[val2[0].r][val2[0].c] = val2[1];
                                        } else s2[encode_cell(val2[0])] = val2[1];
                                        break;
                                    default:
                                }
                            },
                            o,
                        );
                    } else if (d[2] == 26 || d[2] == 14) {
                        o.Enum = WK3Enum;
                        if (d[2] == 14) {
                            o.qpro = true;
                            d.l = 0;
                        }
                        lotushopper(
                            d,
                            function (val2, R, RT) {
                                switch (RT) {
                                    case 204:
                                        n = val2;
                                        break;
                                    case 22:
                                        val2[1].v = val2[1].v.slice(1);
                                    case 23:
                                    case 24:
                                    case 25:
                                    case 37:
                                    case 39:
                                    case 40:
                                        if (val2[3] > sidx) {
                                            s2['!ref'] = encode_range(refguess);
                                            sheets[n] = s2;
                                            snames.push(n);
                                            s2 = o.dense ? [] : {};
                                            refguess = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
                                            sidx = val2[3];
                                            n = 'Sheet' + (sidx + 1);
                                        }
                                        if (sheetRows > 0 && val2[0].r >= sheetRows) break;
                                        if (o.dense) {
                                            if (!s2[val2[0].r]) s2[val2[0].r] = [];
                                            s2[val2[0].r][val2[0].c] = val2[1];
                                        } else s2[encode_cell(val2[0])] = val2[1];
                                        if (refguess.e.c < val2[0].c) refguess.e.c = val2[0].c;
                                        if (refguess.e.r < val2[0].r) refguess.e.r = val2[0].r;
                                        break;
                                    case 27:
                                        if (val2[14e3]) realnames[val2[14e3][0]] = val2[14e3][1];
                                        break;
                                    case 1537:
                                        realnames[val2[0]] = val2[1];
                                        if (val2[0] == sidx) n = val2[1];
                                        break;
                                    default:
                                        break;
                                }
                            },
                            o,
                        );
                    } else throw new Error('Unrecognized LOTUS BOF ' + d[2]);
                    s2['!ref'] = encode_range(refguess);
                    sheets[next_n || n] = s2;
                    snames.push(next_n || n);
                    if (!realnames.length) return { SheetNames: snames, Sheets: sheets };
                    var osheets = {},
                        rnames = [];
                    for (var i2 = 0; i2 < realnames.length; ++i2)
                        if (sheets[snames[i2]]) {
                            rnames.push(realnames[i2] || snames[i2]);
                            osheets[realnames[i2]] = sheets[realnames[i2]] || sheets[snames[i2]];
                        } else {
                            rnames.push(realnames[i2]);
                            osheets[realnames[i2]] = { '!ref': 'A1' };
                        }
                    return { SheetNames: rnames, Sheets: osheets };
                }
                function sheet_to_wk1(ws, opts) {
                    var o = opts || {};
                    if (+o.codepage >= 0) set_cp(+o.codepage);
                    if (o.type == 'string') throw new Error('Cannot write WK1 to JS string');
                    var ba = buf_array();
                    var range = safe_decode_range(ws['!ref']);
                    var dense = Array.isArray(ws);
                    var cols = [];
                    write_biff_rec(ba, 0, write_BOF_WK1(1030));
                    write_biff_rec(ba, 6, write_RANGE(range));
                    var max_R = Math.min(range.e.r, 8191);
                    for (var R = range.s.r; R <= max_R; ++R) {
                        var rr = encode_row(R);
                        for (var C = range.s.c; C <= range.e.c; ++C) {
                            if (R === range.s.r) cols[C] = encode_col(C);
                            var ref = cols[C] + rr;
                            var cell = dense ? (ws[R] || [])[C] : ws[ref];
                            if (!cell || cell.t == 'z') continue;
                            if (cell.t == 'n') {
                                if ((cell.v | 0) == cell.v && cell.v >= -32768 && cell.v <= 32767)
                                    write_biff_rec(ba, 13, write_INTEGER(R, C, cell.v));
                                else write_biff_rec(ba, 14, write_NUMBER(R, C, cell.v));
                            } else {
                                var str = format_cell(cell);
                                write_biff_rec(ba, 15, write_LABEL(R, C, str.slice(0, 239)));
                            }
                        }
                    }
                    write_biff_rec(ba, 1);
                    return ba.end();
                }
                function book_to_wk3(wb, opts) {
                    var o = opts || {};
                    if (+o.codepage >= 0) set_cp(+o.codepage);
                    if (o.type == 'string') throw new Error('Cannot write WK3 to JS string');
                    var ba = buf_array();
                    write_biff_rec(ba, 0, write_BOF_WK3(wb));
                    for (var i2 = 0, cnt = 0; i2 < wb.SheetNames.length; ++i2)
                        if ((wb.Sheets[wb.SheetNames[i2]] || {})['!ref'])
                            write_biff_rec(
                                ba,
                                27,
                                write_XFORMAT_SHEETNAME(wb.SheetNames[i2], cnt++),
                            );
                    var wsidx = 0;
                    for (i2 = 0; i2 < wb.SheetNames.length; ++i2) {
                        var ws = wb.Sheets[wb.SheetNames[i2]];
                        if (!ws || !ws['!ref']) continue;
                        var range = safe_decode_range(ws['!ref']);
                        var dense = Array.isArray(ws);
                        var cols = [];
                        var max_R = Math.min(range.e.r, 8191);
                        for (var R = range.s.r; R <= max_R; ++R) {
                            var rr = encode_row(R);
                            for (var C = range.s.c; C <= range.e.c; ++C) {
                                if (R === range.s.r) cols[C] = encode_col(C);
                                var ref = cols[C] + rr;
                                var cell = dense ? (ws[R] || [])[C] : ws[ref];
                                if (!cell || cell.t == 'z') continue;
                                if (cell.t == 'n') {
                                    write_biff_rec(ba, 23, write_NUMBER_17(R, C, wsidx, cell.v));
                                } else {
                                    var str = format_cell(cell);
                                    write_biff_rec(
                                        ba,
                                        22,
                                        write_LABEL_16(R, C, wsidx, str.slice(0, 239)),
                                    );
                                }
                            }
                        }
                        ++wsidx;
                    }
                    write_biff_rec(ba, 1);
                    return ba.end();
                }
                function write_BOF_WK1(v) {
                    var out = new_buf(2);
                    out.write_shift(2, v);
                    return out;
                }
                function write_BOF_WK3(wb) {
                    var out = new_buf(26);
                    out.write_shift(2, 4096);
                    out.write_shift(2, 4);
                    out.write_shift(4, 0);
                    var rows = 0,
                        cols = 0,
                        wscnt = 0;
                    for (var i2 = 0; i2 < wb.SheetNames.length; ++i2) {
                        var name = wb.SheetNames[i2];
                        var ws = wb.Sheets[name];
                        if (!ws || !ws['!ref']) continue;
                        ++wscnt;
                        var range = decode_range(ws['!ref']);
                        if (rows < range.e.r) rows = range.e.r;
                        if (cols < range.e.c) cols = range.e.c;
                    }
                    if (rows > 8191) rows = 8191;
                    out.write_shift(2, rows);
                    out.write_shift(1, wscnt);
                    out.write_shift(1, cols);
                    out.write_shift(2, 0);
                    out.write_shift(2, 0);
                    out.write_shift(1, 1);
                    out.write_shift(1, 2);
                    out.write_shift(4, 0);
                    out.write_shift(4, 0);
                    return out;
                }
                function parse_RANGE(blob, length, opts) {
                    var o = { s: { c: 0, r: 0 }, e: { c: 0, r: 0 } };
                    if (length == 8 && opts.qpro) {
                        o.s.c = blob.read_shift(1);
                        blob.l++;
                        o.s.r = blob.read_shift(2);
                        o.e.c = blob.read_shift(1);
                        blob.l++;
                        o.e.r = blob.read_shift(2);
                        return o;
                    }
                    o.s.c = blob.read_shift(2);
                    o.s.r = blob.read_shift(2);
                    if (length == 12 && opts.qpro) blob.l += 2;
                    o.e.c = blob.read_shift(2);
                    o.e.r = blob.read_shift(2);
                    if (length == 12 && opts.qpro) blob.l += 2;
                    if (o.s.c == 65535) o.s.c = o.e.c = o.s.r = o.e.r = 0;
                    return o;
                }
                function write_RANGE(range) {
                    var out = new_buf(8);
                    out.write_shift(2, range.s.c);
                    out.write_shift(2, range.s.r);
                    out.write_shift(2, range.e.c);
                    out.write_shift(2, range.e.r);
                    return out;
                }
                function parse_cell(blob, length, opts) {
                    var o = [{ c: 0, r: 0 }, { t: 'n', v: 0 }, 0, 0];
                    if (opts.qpro && opts.vers != 20768) {
                        o[0].c = blob.read_shift(1);
                        o[3] = blob.read_shift(1);
                        o[0].r = blob.read_shift(2);
                        blob.l += 2;
                    } else {
                        o[2] = blob.read_shift(1);
                        o[0].c = blob.read_shift(2);
                        o[0].r = blob.read_shift(2);
                    }
                    return o;
                }
                function parse_LABEL(blob, length, opts) {
                    var tgt = blob.l + length;
                    var o = parse_cell(blob, length, opts);
                    o[1].t = 's';
                    if (opts.vers == 20768) {
                        blob.l++;
                        var len = blob.read_shift(1);
                        o[1].v = blob.read_shift(len, 'utf8');
                        return o;
                    }
                    if (opts.qpro) blob.l++;
                    o[1].v = blob.read_shift(tgt - blob.l, 'cstr');
                    return o;
                }
                function write_LABEL(R, C, s2) {
                    var o = new_buf(7 + s2.length);
                    o.write_shift(1, 255);
                    o.write_shift(2, C);
                    o.write_shift(2, R);
                    o.write_shift(1, 39);
                    for (var i2 = 0; i2 < o.length; ++i2) {
                        var cc = s2.charCodeAt(i2);
                        o.write_shift(1, cc >= 128 ? 95 : cc);
                    }
                    o.write_shift(1, 0);
                    return o;
                }
                function parse_INTEGER(blob, length, opts) {
                    var o = parse_cell(blob, length, opts);
                    o[1].v = blob.read_shift(2, 'i');
                    return o;
                }
                function write_INTEGER(R, C, v) {
                    var o = new_buf(7);
                    o.write_shift(1, 255);
                    o.write_shift(2, C);
                    o.write_shift(2, R);
                    o.write_shift(2, v, 'i');
                    return o;
                }
                function parse_NUMBER(blob, length, opts) {
                    var o = parse_cell(blob, length, opts);
                    o[1].v = blob.read_shift(8, 'f');
                    return o;
                }
                function write_NUMBER(R, C, v) {
                    var o = new_buf(13);
                    o.write_shift(1, 255);
                    o.write_shift(2, C);
                    o.write_shift(2, R);
                    o.write_shift(8, v, 'f');
                    return o;
                }
                function parse_FORMULA(blob, length, opts) {
                    var tgt = blob.l + length;
                    var o = parse_cell(blob, length, opts);
                    o[1].v = blob.read_shift(8, 'f');
                    if (opts.qpro) blob.l = tgt;
                    else {
                        var flen = blob.read_shift(2);
                        wk1_fmla_to_csf(blob.slice(blob.l, blob.l + flen), o);
                        blob.l += flen;
                    }
                    return o;
                }
                function wk1_parse_rc(B, V, col) {
                    var rel = V & 32768;
                    V &= ~32768;
                    V = (rel ? B : 0) + (V >= 8192 ? V - 16384 : V);
                    return (rel ? '' : '$') + (col ? encode_col(V) : encode_row(V));
                }
                var FuncTab = {
                    51: ['FALSE', 0],
                    52: ['TRUE', 0],
                    70: ['LEN', 1],
                    80: ['SUM', 69],
                    81: ['AVERAGEA', 69],
                    82: ['COUNTA', 69],
                    83: ['MINA', 69],
                    84: ['MAXA', 69],
                    111: ['T', 1],
                };
                var BinOpTab = [
                    '',
                    '',
                    '',
                    '',
                    '',
                    '',
                    '',
                    '',
                    // eslint-disable-line no-mixed-spaces-and-tabs
                    '',
                    '+',
                    '-',
                    '*',
                    '/',
                    '^',
                    '=',
                    '<>',
                    // eslint-disable-line no-mixed-spaces-and-tabs
                    '<=',
                    '>=',
                    '<',
                    '>',
                    '',
                    '',
                    '',
                    '',
                    // eslint-disable-line no-mixed-spaces-and-tabs
                    '&',
                    '',
                    '',
                    '',
                    '',
                    '',
                    '',
                    '',
                    // eslint-disable-line no-mixed-spaces-and-tabs
                ];
                function wk1_fmla_to_csf(blob, o) {
                    prep_blob(blob, 0);
                    var out = [],
                        argc = 0,
                        R = '',
                        C = '',
                        argL = '',
                        argR = '';
                    while (blob.l < blob.length) {
                        var cc = blob[blob.l++];
                        switch (cc) {
                            case 0:
                                out.push(blob.read_shift(8, 'f'));
                                break;
                            case 1:
                                {
                                    C = wk1_parse_rc(o[0].c, blob.read_shift(2), true);
                                    R = wk1_parse_rc(o[0].r, blob.read_shift(2), false);
                                    out.push(C + R);
                                }
                                break;
                            case 2:
                                {
                                    var c = wk1_parse_rc(o[0].c, blob.read_shift(2), true);
                                    var r2 = wk1_parse_rc(o[0].r, blob.read_shift(2), false);
                                    C = wk1_parse_rc(o[0].c, blob.read_shift(2), true);
                                    R = wk1_parse_rc(o[0].r, blob.read_shift(2), false);
                                    out.push(c + r2 + ':' + C + R);
                                }
                                break;
                            case 3:
                                if (blob.l < blob.length) {
                                    console.error('WK1 premature formula end');
                                    return;
                                }
                                break;
                            case 4:
                                out.push('(' + out.pop() + ')');
                                break;
                            case 5:
                                out.push(blob.read_shift(2));
                                break;
                            case 6:
                                {
                                    var Z2 = '';
                                    while ((cc = blob[blob.l++])) Z2 += String.fromCharCode(cc);
                                    out.push('"' + Z2.replace(/"/g, '""') + '"');
                                }
                                break;
                            case 8:
                                out.push('-' + out.pop());
                                break;
                            case 23:
                                out.push('+' + out.pop());
                                break;
                            case 22:
                                out.push('NOT(' + out.pop() + ')');
                                break;
                            case 20:
                            case 21:
                                {
                                    argR = out.pop();
                                    argL = out.pop();
                                    out.push(
                                        ['AND', 'OR'][cc - 20] + '(' + argL + ',' + argR + ')',
                                    );
                                }
                                break;
                            default:
                                if (cc < 32 && BinOpTab[cc]) {
                                    argR = out.pop();
                                    argL = out.pop();
                                    out.push(argL + BinOpTab[cc] + argR);
                                } else if (FuncTab[cc]) {
                                    argc = FuncTab[cc][1];
                                    if (argc == 69) argc = blob[blob.l++];
                                    if (argc > out.length) {
                                        console.error(
                                            'WK1 bad formula parse 0x' +
                                                cc.toString(16) +
                                                ':|' +
                                                out.join('|') +
                                                '|',
                                        );
                                        return;
                                    }
                                    var args = out.slice(-argc);
                                    out.length -= argc;
                                    out.push(FuncTab[cc][0] + '(' + args.join(',') + ')');
                                } else if (cc <= 7)
                                    return console.error('WK1 invalid opcode ' + cc.toString(16));
                                else if (cc <= 24)
                                    return console.error('WK1 unsupported op ' + cc.toString(16));
                                else if (cc <= 30)
                                    return console.error('WK1 invalid opcode ' + cc.toString(16));
                                else if (cc <= 115)
                                    return console.error(
                                        'WK1 unsupported function opcode ' + cc.toString(16),
                                    );
                                else
                                    return console.error(
                                        'WK1 unrecognized opcode ' + cc.toString(16),
                                    );
                        }
                    }
                    if (out.length == 1) o[1].f = '' + out[0];
                    else console.error('WK1 bad formula parse |' + out.join('|') + '|');
                }
                function parse_cell_3(blob) {
                    var o = [{ c: 0, r: 0 }, { t: 'n', v: 0 }, 0];
                    o[0].r = blob.read_shift(2);
                    o[3] = blob[blob.l++];
                    o[0].c = blob[blob.l++];
                    return o;
                }
                function parse_LABEL_16(blob, length) {
                    var o = parse_cell_3(blob, length);
                    o[1].t = 's';
                    o[1].v = blob.read_shift(length - 4, 'cstr');
                    return o;
                }
                function write_LABEL_16(R, C, wsidx, s2) {
                    var o = new_buf(6 + s2.length);
                    o.write_shift(2, R);
                    o.write_shift(1, wsidx);
                    o.write_shift(1, C);
                    o.write_shift(1, 39);
                    for (var i2 = 0; i2 < s2.length; ++i2) {
                        var cc = s2.charCodeAt(i2);
                        o.write_shift(1, cc >= 128 ? 95 : cc);
                    }
                    o.write_shift(1, 0);
                    return o;
                }
                function parse_NUMBER_18(blob, length) {
                    var o = parse_cell_3(blob, length);
                    o[1].v = blob.read_shift(2);
                    var v = o[1].v >> 1;
                    if (o[1].v & 1) {
                        switch (v & 7) {
                            case 0:
                                v = (v >> 3) * 5e3;
                                break;
                            case 1:
                                v = (v >> 3) * 500;
                                break;
                            case 2:
                                v = (v >> 3) / 20;
                                break;
                            case 3:
                                v = (v >> 3) / 200;
                                break;
                            case 4:
                                v = (v >> 3) / 2e3;
                                break;
                            case 5:
                                v = (v >> 3) / 2e4;
                                break;
                            case 6:
                                v = (v >> 3) / 16;
                                break;
                            case 7:
                                v = (v >> 3) / 64;
                                break;
                        }
                    }
                    o[1].v = v;
                    return o;
                }
                function parse_NUMBER_17(blob, length) {
                    var o = parse_cell_3(blob, length);
                    var v1 = blob.read_shift(4);
                    var v2 = blob.read_shift(4);
                    var e2 = blob.read_shift(2);
                    if (e2 == 65535) {
                        if (v1 === 0 && v2 === 3221225472) {
                            o[1].t = 'e';
                            o[1].v = 15;
                        } else if (v1 === 0 && v2 === 3489660928) {
                            o[1].t = 'e';
                            o[1].v = 42;
                        } else o[1].v = 0;
                        return o;
                    }
                    var s2 = e2 & 32768;
                    e2 = (e2 & 32767) - 16446;
                    o[1].v = (1 - s2 * 2) * (v2 * Math.pow(2, e2 + 32) + v1 * Math.pow(2, e2));
                    return o;
                }
                function write_NUMBER_17(R, C, wsidx, v) {
                    var o = new_buf(14);
                    o.write_shift(2, R);
                    o.write_shift(1, wsidx);
                    o.write_shift(1, C);
                    if (v == 0) {
                        o.write_shift(4, 0);
                        o.write_shift(4, 0);
                        o.write_shift(2, 65535);
                        return o;
                    }
                    var s2 = 0,
                        e2 = 0,
                        v1 = 0,
                        v2 = 0;
                    if (v < 0) {
                        s2 = 1;
                        v = -v;
                    }
                    e2 = Math.log2(v) | 0;
                    v /= Math.pow(2, e2 - 31);
                    v2 = v >>> 0;
                    if ((v2 & 2147483648) == 0) {
                        v /= 2;
                        ++e2;
                        v2 = v >>> 0;
                    }
                    v -= v2;
                    v2 |= 2147483648;
                    v2 >>>= 0;
                    v *= Math.pow(2, 32);
                    v1 = v >>> 0;
                    o.write_shift(4, v1);
                    o.write_shift(4, v2);
                    e2 += 16383 + (s2 ? 32768 : 0);
                    o.write_shift(2, e2);
                    return o;
                }
                function parse_FORMULA_19(blob, length) {
                    var o = parse_NUMBER_17(blob, 14);
                    blob.l += length - 14;
                    return o;
                }
                function parse_NUMBER_25(blob, length) {
                    var o = parse_cell_3(blob, length);
                    var v1 = blob.read_shift(4);
                    o[1].v = v1 >> 6;
                    return o;
                }
                function parse_NUMBER_27(blob, length) {
                    var o = parse_cell_3(blob, length);
                    var v1 = blob.read_shift(8, 'f');
                    o[1].v = v1;
                    return o;
                }
                function parse_FORMULA_28(blob, length) {
                    var o = parse_NUMBER_27(blob, 14);
                    blob.l += length - 10;
                    return o;
                }
                function parse_SHEETNAMECS(blob, length) {
                    return blob[blob.l + length - 1] == 0 ? blob.read_shift(length, 'cstr') : '';
                }
                function parse_SHEETNAMELP(blob, length) {
                    var len = blob[blob.l++];
                    if (len > length - 1) len = length - 1;
                    var o = '';
                    while (o.length < len) o += String.fromCharCode(blob[blob.l++]);
                    return o;
                }
                function parse_SHEETINFOQP(blob, length, opts) {
                    if (!opts.qpro || length < 21) return;
                    var id = blob.read_shift(1);
                    blob.l += 17;
                    blob.l += 1;
                    blob.l += 2;
                    var nm = blob.read_shift(length - 21, 'cstr');
                    return [id, nm];
                }
                function parse_XFORMAT(blob, length) {
                    var o = {},
                        tgt = blob.l + length;
                    while (blob.l < tgt) {
                        var dt = blob.read_shift(2);
                        if (dt == 14e3) {
                            o[dt] = [0, ''];
                            o[dt][0] = blob.read_shift(2);
                            while (blob[blob.l]) {
                                o[dt][1] += String.fromCharCode(blob[blob.l]);
                                blob.l++;
                            }
                            blob.l++;
                        }
                    }
                    return o;
                }
                function write_XFORMAT_SHEETNAME(name, wsidx) {
                    var out = new_buf(5 + name.length);
                    out.write_shift(2, 14e3);
                    out.write_shift(2, wsidx);
                    for (var i2 = 0; i2 < name.length; ++i2) {
                        var cc = name.charCodeAt(i2);
                        out[out.l++] = cc > 127 ? 95 : cc;
                    }
                    out[out.l++] = 0;
                    return out;
                }
                var WK1Enum = {
                    0: { n: 'BOF', f: parseuint16 },
                    1: { n: 'EOF' },
                    2: { n: 'CALCMODE' },
                    3: { n: 'CALCORDER' },
                    4: { n: 'SPLIT' },
                    5: { n: 'SYNC' },
                    6: { n: 'RANGE', f: parse_RANGE },
                    7: { n: 'WINDOW1' },
                    8: { n: 'COLW1' },
                    9: { n: 'WINTWO' },
                    10: { n: 'COLW2' },
                    11: { n: 'NAME' },
                    12: { n: 'BLANK' },
                    13: { n: 'INTEGER', f: parse_INTEGER },
                    14: { n: 'NUMBER', f: parse_NUMBER },
                    15: { n: 'LABEL', f: parse_LABEL },
                    16: { n: 'FORMULA', f: parse_FORMULA },
                    24: { n: 'TABLE' },
                    25: { n: 'ORANGE' },
                    26: { n: 'PRANGE' },
                    27: { n: 'SRANGE' },
                    28: { n: 'FRANGE' },
                    29: { n: 'KRANGE1' },
                    32: { n: 'HRANGE' },
                    35: { n: 'KRANGE2' },
                    36: { n: 'PROTEC' },
                    37: { n: 'FOOTER' },
                    38: { n: 'HEADER' },
                    39: { n: 'SETUP' },
                    40: { n: 'MARGINS' },
                    41: { n: 'LABELFMT' },
                    42: { n: 'TITLES' },
                    43: { n: 'SHEETJS' },
                    45: { n: 'GRAPH' },
                    46: { n: 'NGRAPH' },
                    47: { n: 'CALCCOUNT' },
                    48: { n: 'UNFORMATTED' },
                    49: { n: 'CURSORW12' },
                    50: { n: 'WINDOW' },
                    51: { n: 'STRING', f: parse_LABEL },
                    55: { n: 'PASSWORD' },
                    56: { n: 'LOCKED' },
                    60: { n: 'QUERY' },
                    61: { n: 'QUERYNAME' },
                    62: { n: 'PRINT' },
                    63: { n: 'PRINTNAME' },
                    64: { n: 'GRAPH2' },
                    65: { n: 'GRAPHNAME' },
                    66: { n: 'ZOOM' },
                    67: { n: 'SYMSPLIT' },
                    68: { n: 'NSROWS' },
                    69: { n: 'NSCOLS' },
                    70: { n: 'RULER' },
                    71: { n: 'NNAME' },
                    72: { n: 'ACOMM' },
                    73: { n: 'AMACRO' },
                    74: { n: 'PARSE' },
                    102: { n: 'PRANGES??' },
                    103: { n: 'RRANGES??' },
                    104: { n: 'FNAME??' },
                    105: { n: 'MRANGES??' },
                    204: { n: 'SHEETNAMECS', f: parse_SHEETNAMECS },
                    222: { n: 'SHEETNAMELP', f: parse_SHEETNAMELP },
                    65535: { n: '' },
                };
                var WK3Enum = {
                    0: { n: 'BOF' },
                    1: { n: 'EOF' },
                    2: { n: 'PASSWORD' },
                    3: { n: 'CALCSET' },
                    4: { n: 'WINDOWSET' },
                    5: { n: 'SHEETCELLPTR' },
                    6: { n: 'SHEETLAYOUT' },
                    7: { n: 'COLUMNWIDTH' },
                    8: { n: 'HIDDENCOLUMN' },
                    9: { n: 'USERRANGE' },
                    10: { n: 'SYSTEMRANGE' },
                    11: { n: 'ZEROFORCE' },
                    12: { n: 'SORTKEYDIR' },
                    13: { n: 'FILESEAL' },
                    14: { n: 'DATAFILLNUMS' },
                    15: { n: 'PRINTMAIN' },
                    16: { n: 'PRINTSTRING' },
                    17: { n: 'GRAPHMAIN' },
                    18: { n: 'GRAPHSTRING' },
                    19: { n: '??' },
                    20: { n: 'ERRCELL' },
                    21: { n: 'NACELL' },
                    22: { n: 'LABEL16', f: parse_LABEL_16 },
                    23: { n: 'NUMBER17', f: parse_NUMBER_17 },
                    24: { n: 'NUMBER18', f: parse_NUMBER_18 },
                    25: { n: 'FORMULA19', f: parse_FORMULA_19 },
                    26: { n: 'FORMULA1A' },
                    27: { n: 'XFORMAT', f: parse_XFORMAT },
                    28: { n: 'DTLABELMISC' },
                    29: { n: 'DTLABELCELL' },
                    30: { n: 'GRAPHWINDOW' },
                    31: { n: 'CPA' },
                    32: { n: 'LPLAUTO' },
                    33: { n: 'QUERY' },
                    34: { n: 'HIDDENSHEET' },
                    35: { n: '??' },
                    37: { n: 'NUMBER25', f: parse_NUMBER_25 },
                    38: { n: '??' },
                    39: { n: 'NUMBER27', f: parse_NUMBER_27 },
                    40: { n: 'FORMULA28', f: parse_FORMULA_28 },
                    142: { n: '??' },
                    147: { n: '??' },
                    150: { n: '??' },
                    151: { n: '??' },
                    152: { n: '??' },
                    153: { n: '??' },
                    154: { n: '??' },
                    155: { n: '??' },
                    156: { n: '??' },
                    163: { n: '??' },
                    174: { n: '??' },
                    175: { n: '??' },
                    176: { n: '??' },
                    177: { n: '??' },
                    184: { n: '??' },
                    185: { n: '??' },
                    186: { n: '??' },
                    187: { n: '??' },
                    188: { n: '??' },
                    195: { n: '??' },
                    201: { n: '??' },
                    204: { n: 'SHEETNAMECS', f: parse_SHEETNAMECS },
                    205: { n: '??' },
                    206: { n: '??' },
                    207: { n: '??' },
                    208: { n: '??' },
                    256: { n: '??' },
                    259: { n: '??' },
                    260: { n: '??' },
                    261: { n: '??' },
                    262: { n: '??' },
                    263: { n: '??' },
                    265: { n: '??' },
                    266: { n: '??' },
                    267: { n: '??' },
                    268: { n: '??' },
                    270: { n: '??' },
                    271: { n: '??' },
                    384: { n: '??' },
                    389: { n: '??' },
                    390: { n: '??' },
                    393: { n: '??' },
                    396: { n: '??' },
                    512: { n: '??' },
                    514: { n: '??' },
                    513: { n: '??' },
                    516: { n: '??' },
                    517: { n: '??' },
                    640: { n: '??' },
                    641: { n: '??' },
                    642: { n: '??' },
                    643: { n: '??' },
                    644: { n: '??' },
                    645: { n: '??' },
                    646: { n: '??' },
                    647: { n: '??' },
                    648: { n: '??' },
                    658: { n: '??' },
                    659: { n: '??' },
                    660: { n: '??' },
                    661: { n: '??' },
                    662: { n: '??' },
                    665: { n: '??' },
                    666: { n: '??' },
                    768: { n: '??' },
                    772: { n: '??' },
                    1537: { n: 'SHEETINFOQP', f: parse_SHEETINFOQP },
                    1600: { n: '??' },
                    1602: { n: '??' },
                    1793: { n: '??' },
                    1794: { n: '??' },
                    1795: { n: '??' },
                    1796: { n: '??' },
                    1920: { n: '??' },
                    2048: { n: '??' },
                    2049: { n: '??' },
                    2052: { n: '??' },
                    2688: { n: '??' },
                    10998: { n: '??' },
                    12849: { n: '??' },
                    28233: { n: '??' },
                    28484: { n: '??' },
                    65535: { n: '' },
                };
                return {
                    sheet_to_wk1,
                    book_to_wk3,
                    to_workbook: lotus_to_workbook,
                };
            })();
            function parse_rpr(rpr) {
                var font = {},
                    m2 = rpr.match(tagregex),
                    i2 = 0;
                var pass = false;
                if (m2)
                    for (; i2 != m2.length; ++i2) {
                        var y = parsexmltag(m2[i2]);
                        switch (y[0].replace(/\w*:/g, '')) {
                            case '<condense':
                                break;
                            case '<extend':
                                break;
                            case '<shadow':
                                if (!y.val) break;
                            case '<shadow>':
                            case '<shadow/>':
                                font.shadow = 1;
                                break;
                            case '</shadow>':
                                break;
                            case '<charset':
                                if (y.val == '1') break;
                                font.cp = CS2CP[parseInt(y.val, 10)];
                                break;
                            case '<outline':
                                if (!y.val) break;
                            case '<outline>':
                            case '<outline/>':
                                font.outline = 1;
                                break;
                            case '</outline>':
                                break;
                            case '<rFont':
                                font.name = y.val;
                                break;
                            case '<sz':
                                font.sz = y.val;
                                break;
                            case '<strike':
                                if (!y.val) break;
                            case '<strike>':
                            case '<strike/>':
                                font.strike = 1;
                                break;
                            case '</strike>':
                                break;
                            case '<u':
                                if (!y.val) break;
                                switch (y.val) {
                                    case 'double':
                                        font.uval = 'double';
                                        break;
                                    case 'singleAccounting':
                                        font.uval = 'single-accounting';
                                        break;
                                    case 'doubleAccounting':
                                        font.uval = 'double-accounting';
                                        break;
                                }
                            case '<u>':
                            case '<u/>':
                                font.u = 1;
                                break;
                            case '</u>':
                                break;
                            case '<b':
                                if (y.val == '0') break;
                            case '<b>':
                            case '<b/>':
                                font.b = 1;
                                break;
                            case '</b>':
                                break;
                            case '<i':
                                if (y.val == '0') break;
                            case '<i>':
                            case '<i/>':
                                font.i = 1;
                                break;
                            case '</i>':
                                break;
                            case '<color':
                                if (y.rgb) font.color = y.rgb.slice(2, 8);
                                break;
                            case '<color>':
                            case '<color/>':
                            case '</color>':
                                break;
                            case '<family':
                                font.family = y.val;
                                break;
                            case '<family>':
                            case '<family/>':
                            case '</family>':
                                break;
                            case '<vertAlign':
                                font.valign = y.val;
                                break;
                            case '<vertAlign>':
                            case '<vertAlign/>':
                            case '</vertAlign>':
                                break;
                            case '<scheme':
                                break;
                            case '<scheme>':
                            case '<scheme/>':
                            case '</scheme>':
                                break;
                            case '<extLst':
                            case '<extLst>':
                            case '</extLst>':
                                break;
                            case '<ext':
                                pass = true;
                                break;
                            case '</ext>':
                                pass = false;
                                break;
                            default:
                                if (y[0].charCodeAt(1) !== 47 && !pass)
                                    throw new Error('Unrecognized rich format ' + y[0]);
                        }
                    }
                return font;
            }
            var parse_rs = (function () {
                var tregex = matchtag('t'),
                    rpregex = matchtag('rPr');
                function parse_r(r2) {
                    var t2 = r2.match(tregex);
                    if (!t2) return { t: 's', v: '' };
                    var o = { t: 's', v: unescapexml(t2[1]) };
                    var rpr = r2.match(rpregex);
                    if (rpr) o.s = parse_rpr(rpr[1]);
                    return o;
                }
                var rregex = /<(?:\w+:)?r>/g,
                    rend = /<\/(?:\w+:)?r>/;
                return function parse_rs2(rs) {
                    return rs
                        .replace(rregex, '')
                        .split(rend)
                        .map(parse_r)
                        .filter(function (r2) {
                            return r2.v;
                        });
                };
            })();
            var rs_to_html = /* @__PURE__ */ (function parse_rs_factory() {
                var nlregex = /(\r\n|\n)/g;
                function parse_rpr2(font, intro, outro) {
                    var style = [];
                    if (font.u) style.push('text-decoration: underline;');
                    if (font.uval) style.push('text-underline-style:' + font.uval + ';');
                    if (font.sz) style.push('font-size:' + font.sz + 'pt;');
                    if (font.outline) style.push('text-effect: outline;');
                    if (font.shadow) style.push('text-shadow: auto;');
                    intro.push('<span style="' + style.join('') + '">');
                    if (font.b) {
                        intro.push('<b>');
                        outro.push('</b>');
                    }
                    if (font.i) {
                        intro.push('<i>');
                        outro.push('</i>');
                    }
                    if (font.strike) {
                        intro.push('<s>');
                        outro.push('</s>');
                    }
                    var align = font.valign || '';
                    if (align == 'superscript' || align == 'super') align = 'sup';
                    else if (align == 'subscript') align = 'sub';
                    if (align != '') {
                        intro.push('<' + align + '>');
                        outro.push('</' + align + '>');
                    }
                    outro.push('</span>');
                    return font;
                }
                function r_to_html(r2) {
                    var terms = [[], r2.v, []];
                    if (!r2.v) return '';
                    if (r2.s) parse_rpr2(r2.s, terms[0], terms[2]);
                    return (
                        terms[0].join('') + terms[1].replace(nlregex, '<br/>') + terms[2].join('')
                    );
                }
                return function parse_rs2(rs) {
                    return rs.map(r_to_html).join('');
                };
            })();
            var sitregex = /<(?:\w+:)?t[^>]*>([^<]*)<\/(?:\w+:)?t>/g,
                sirregex = /<(?:\w+:)?r>/;
            var sirphregex = /<(?:\w+:)?rPh.*?>([\s\S]*?)<\/(?:\w+:)?rPh>/g;
            function parse_si(x2, opts) {
                var html3 = opts ? opts.cellHTML : true;
                var z = {};
                if (!x2) return { t: '' };
                if (x2.match(/^\s*<(?:\w+:)?t[^>]*>/)) {
                    z.t = unescapexml(
                        utf8read(x2.slice(x2.indexOf('>') + 1).split(/<\/(?:\w+:)?t>/)[0] || ''),
                    );
                    z.r = utf8read(x2);
                    if (html3) z.h = escapehtml(z.t);
                } else if (
                    /*y = */
                    x2.match(sirregex)
                ) {
                    z.r = utf8read(x2);
                    z.t = unescapexml(
                        utf8read(
                            (x2.replace(sirphregex, '').match(sitregex) || [])
                                .join('')
                                .replace(tagregex, ''),
                        ),
                    );
                    if (html3) z.h = rs_to_html(parse_rs(z.r));
                }
                return z;
            }
            var sstr0 = /<(?:\w+:)?sst([^>]*)>([\s\S]*)<\/(?:\w+:)?sst>/;
            var sstr1 = /<(?:\w+:)?(?:si|sstItem)>/g;
            var sstr2 = /<\/(?:\w+:)?(?:si|sstItem)>/;
            function parse_sst_xml(data2, opts) {
                var s2 = [],
                    ss = '';
                if (!data2) return s2;
                var sst = data2.match(sstr0);
                if (sst) {
                    ss = sst[2].replace(sstr1, '').split(sstr2);
                    for (var i2 = 0; i2 != ss.length; ++i2) {
                        var o = parse_si(ss[i2].trim(), opts);
                        if (o != null) s2[s2.length] = o;
                    }
                    sst = parsexmltag(sst[1]);
                    s2.Count = sst.count;
                    s2.Unique = sst.uniqueCount;
                }
                return s2;
            }
            var straywsregex = /^\s|\s$|[\t\n\r]/;
            function write_sst_xml(sst, opts) {
                if (!opts.bookSST) return '';
                var o = [XML_HEADER];
                o[o.length] = writextag('sst', null, {
                    xmlns: XMLNS_main[0],
                    count: sst.Count,
                    uniqueCount: sst.Unique,
                });
                for (var i2 = 0; i2 != sst.length; ++i2) {
                    if (sst[i2] == null) continue;
                    var s2 = sst[i2];
                    var sitag = '<si>';
                    if (s2.r) sitag += s2.r;
                    else {
                        sitag += '<t';
                        if (!s2.t) s2.t = '';
                        if (s2.t.match(straywsregex)) sitag += ' xml:space="preserve"';
                        sitag += '>' + escapexml(s2.t) + '</t>';
                    }
                    sitag += '</si>';
                    o[o.length] = sitag;
                }
                if (o.length > 2) {
                    o[o.length] = '</sst>';
                    o[1] = o[1].replace('/>', '>');
                }
                return o.join('');
            }
            function parse_BrtBeginSst(data2) {
                return [data2.read_shift(4), data2.read_shift(4)];
            }
            function parse_sst_bin(data2, opts) {
                var s2 = [];
                var pass = false;
                recordhopper(data2, function hopper_sst(val2, R, RT) {
                    switch (RT) {
                        case 159:
                            s2.Count = val2[0];
                            s2.Unique = val2[1];
                            break;
                        case 19:
                            s2.push(val2);
                            break;
                        case 160:
                            return true;
                        case 35:
                            pass = true;
                            break;
                        case 36:
                            pass = false;
                            break;
                        default:
                            if (R.T) {
                            }
                            if (!pass || opts.WTF)
                                throw new Error('Unexpected record 0x' + RT.toString(16));
                    }
                });
                return s2;
            }
            function write_BrtBeginSst(sst, o) {
                if (!o) o = new_buf(8);
                o.write_shift(4, sst.Count);
                o.write_shift(4, sst.Unique);
                return o;
            }
            var write_BrtSSTItem = write_RichStr;
            function write_sst_bin(sst) {
                var ba = buf_array();
                write_record(ba, 159, write_BrtBeginSst(sst));
                for (var i2 = 0; i2 < sst.length; ++i2)
                    write_record(ba, 19, write_BrtSSTItem(sst[i2]));
                write_record(
                    ba,
                    160,
                    /* BrtEndSst */
                );
                return ba.end();
            }
            function _JS2ANSI(str) {
                if (typeof $cptable !== 'undefined')
                    return $cptable.utils.encode(current_ansi, str);
                var o = [],
                    oo = str.split('');
                for (var i2 = 0; i2 < oo.length; ++i2) o[i2] = oo[i2].charCodeAt(0);
                return o;
            }
            function parse_CRYPTOVersion(blob, length) {
                var o = {};
                o.Major = blob.read_shift(2);
                o.Minor = blob.read_shift(2);
                if (length >= 4) blob.l += length - 4;
                return o;
            }
            function parse_DataSpaceVersionInfo(blob) {
                var o = {};
                o.id = blob.read_shift(0, 'lpp4');
                o.R = parse_CRYPTOVersion(blob, 4);
                o.U = parse_CRYPTOVersion(blob, 4);
                o.W = parse_CRYPTOVersion(blob, 4);
                return o;
            }
            function parse_DataSpaceMapEntry(blob) {
                var len = blob.read_shift(4);
                var end2 = blob.l + len - 4;
                var o = {};
                var cnt = blob.read_shift(4);
                var comps = [];
                while (cnt-- > 0)
                    comps.push({ t: blob.read_shift(4), v: blob.read_shift(0, 'lpp4') });
                o.name = blob.read_shift(0, 'lpp4');
                o.comps = comps;
                if (blob.l != end2)
                    throw new Error('Bad DataSpaceMapEntry: ' + blob.l + ' != ' + end2);
                return o;
            }
            function parse_DataSpaceMap(blob) {
                var o = [];
                blob.l += 4;
                var cnt = blob.read_shift(4);
                while (cnt-- > 0) o.push(parse_DataSpaceMapEntry(blob));
                return o;
            }
            function parse_DataSpaceDefinition(blob) {
                var o = [];
                blob.l += 4;
                var cnt = blob.read_shift(4);
                while (cnt-- > 0) o.push(blob.read_shift(0, 'lpp4'));
                return o;
            }
            function parse_TransformInfoHeader(blob) {
                var o = {};
                blob.read_shift(4);
                blob.l += 4;
                o.id = blob.read_shift(0, 'lpp4');
                o.name = blob.read_shift(0, 'lpp4');
                o.R = parse_CRYPTOVersion(blob, 4);
                o.U = parse_CRYPTOVersion(blob, 4);
                o.W = parse_CRYPTOVersion(blob, 4);
                return o;
            }
            function parse_Primary(blob) {
                var hdr = parse_TransformInfoHeader(blob);
                hdr.ename = blob.read_shift(0, '8lpp4');
                hdr.blksz = blob.read_shift(4);
                hdr.cmode = blob.read_shift(4);
                if (blob.read_shift(4) != 4) throw new Error('Bad !Primary record');
                return hdr;
            }
            function parse_EncryptionHeader(blob, length) {
                var tgt = blob.l + length;
                var o = {};
                o.Flags = blob.read_shift(4) & 63;
                blob.l += 4;
                o.AlgID = blob.read_shift(4);
                var valid = false;
                switch (o.AlgID) {
                    case 26126:
                    case 26127:
                    case 26128:
                        valid = o.Flags == 36;
                        break;
                    case 26625:
                        valid = o.Flags == 4;
                        break;
                    case 0:
                        valid = o.Flags == 16 || o.Flags == 4 || o.Flags == 36;
                        break;
                    default:
                        throw 'Unrecognized encryption algorithm: ' + o.AlgID;
                }
                if (!valid) throw new Error('Encryption Flags/AlgID mismatch');
                o.AlgIDHash = blob.read_shift(4);
                o.KeySize = blob.read_shift(4);
                o.ProviderType = blob.read_shift(4);
                blob.l += 8;
                o.CSPName = blob.read_shift((tgt - blob.l) >> 1, 'utf16le');
                blob.l = tgt;
                return o;
            }
            function parse_EncryptionVerifier(blob, length) {
                var o = {},
                    tgt = blob.l + length;
                blob.l += 4;
                o.Salt = blob.slice(blob.l, blob.l + 16);
                blob.l += 16;
                o.Verifier = blob.slice(blob.l, blob.l + 16);
                blob.l += 16;
                blob.read_shift(4);
                o.VerifierHash = blob.slice(blob.l, tgt);
                blob.l = tgt;
                return o;
            }
            function parse_EncryptionInfo(blob) {
                var vers = parse_CRYPTOVersion(blob);
                switch (vers.Minor) {
                    case 2:
                        return [vers.Minor, parse_EncInfoStd(blob, vers)];
                    case 3:
                        return [vers.Minor, parse_EncInfoExt(blob, vers)];
                    case 4:
                        return [vers.Minor, parse_EncInfoAgl(blob, vers)];
                }
                throw new Error('ECMA-376 Encrypted file unrecognized Version: ' + vers.Minor);
            }
            function parse_EncInfoStd(blob) {
                var flags = blob.read_shift(4);
                if ((flags & 63) != 36) throw new Error('EncryptionInfo mismatch');
                var sz = blob.read_shift(4);
                var hdr = parse_EncryptionHeader(blob, sz);
                var verifier = parse_EncryptionVerifier(blob, blob.length - blob.l);
                return { t: 'Std', h: hdr, v: verifier };
            }
            function parse_EncInfoExt() {
                throw new Error('File is password-protected: ECMA-376 Extensible');
            }
            function parse_EncInfoAgl(blob) {
                var KeyData = [
                    'saltSize',
                    'blockSize',
                    'keyBits',
                    'hashSize',
                    'cipherAlgorithm',
                    'cipherChaining',
                    'hashAlgorithm',
                    'saltValue',
                ];
                blob.l += 4;
                var xml2 = blob.read_shift(blob.length - blob.l, 'utf8');
                var o = {};
                xml2.replace(tagregex, function xml_agile(x2) {
                    var y = parsexmltag(x2);
                    switch (strip_ns(y[0])) {
                        case '<?xml':
                            break;
                        case '<encryption':
                        case '</encryption>':
                            break;
                        case '<keyData':
                            KeyData.forEach(function (k) {
                                o[k] = y[k];
                            });
                            break;
                        case '<dataIntegrity':
                            o.encryptedHmacKey = y.encryptedHmacKey;
                            o.encryptedHmacValue = y.encryptedHmacValue;
                            break;
                        case '<keyEncryptors>':
                        case '<keyEncryptors':
                            o.encs = [];
                            break;
                        case '</keyEncryptors>':
                            break;
                        case '<keyEncryptor':
                            o.uri = y.uri;
                            break;
                        case '</keyEncryptor>':
                            break;
                        case '<encryptedKey':
                            o.encs.push(y);
                            break;
                        default:
                            throw y[0];
                    }
                });
                return o;
            }
            function parse_RC4CryptoHeader(blob, length) {
                var o = {};
                var vers = (o.EncryptionVersionInfo = parse_CRYPTOVersion(blob, 4));
                length -= 4;
                if (vers.Minor != 2)
                    throw new Error('unrecognized minor version code: ' + vers.Minor);
                if (vers.Major > 4 || vers.Major < 2)
                    throw new Error('unrecognized major version code: ' + vers.Major);
                o.Flags = blob.read_shift(4);
                length -= 4;
                var sz = blob.read_shift(4);
                length -= 4;
                o.EncryptionHeader = parse_EncryptionHeader(blob, sz);
                length -= sz;
                o.EncryptionVerifier = parse_EncryptionVerifier(blob, length);
                return o;
            }
            function parse_RC4Header(blob) {
                var o = {};
                var vers = (o.EncryptionVersionInfo = parse_CRYPTOVersion(blob, 4));
                if (vers.Major != 1 || vers.Minor != 1)
                    throw 'unrecognized version code ' + vers.Major + ' : ' + vers.Minor;
                o.Salt = blob.read_shift(16);
                o.EncryptedVerifier = blob.read_shift(16);
                o.EncryptedVerifierHash = blob.read_shift(16);
                return o;
            }
            function crypto_CreatePasswordVerifier_Method1(Password) {
                var Verifier = 0,
                    PasswordArray;
                var PasswordDecoded = _JS2ANSI(Password);
                var len = PasswordDecoded.length + 1,
                    i2,
                    PasswordByte;
                var Intermediate1, Intermediate2, Intermediate3;
                PasswordArray = new_raw_buf(len);
                PasswordArray[0] = PasswordDecoded.length;
                for (i2 = 1; i2 != len; ++i2) PasswordArray[i2] = PasswordDecoded[i2 - 1];
                for (i2 = len - 1; i2 >= 0; --i2) {
                    PasswordByte = PasswordArray[i2];
                    Intermediate1 = (Verifier & 16384) === 0 ? 0 : 1;
                    Intermediate2 = (Verifier << 1) & 32767;
                    Intermediate3 = Intermediate1 | Intermediate2;
                    Verifier = Intermediate3 ^ PasswordByte;
                }
                return Verifier ^ 52811;
            }
            var crypto_CreateXorArray_Method1 = /* @__PURE__ */ (function () {
                var PadArray = [187, 255, 255, 186, 255, 255, 185, 128, 0, 190, 15, 0, 191, 15, 0];
                var InitialCode = [
                    57840, 7439, 52380, 33984, 4364, 3600, 61902, 12606, 6258, 57657, 54287, 34041,
                    10252, 43370, 20163,
                ];
                var XorMatrix = [
                    44796, 19929, 39858, 10053, 20106, 40212, 10761, 31585, 63170, 64933, 60267,
                    50935, 40399, 11199, 17763, 35526, 1453, 2906, 5812, 11624, 23248, 885, 1770,
                    3540, 7080, 14160, 28320, 56640, 55369, 41139, 20807, 41614, 21821, 43642,
                    17621, 28485, 56970, 44341, 19019, 38038, 14605, 29210, 60195, 50791, 40175,
                    10751, 21502, 43004, 24537, 18387, 36774, 3949, 7898, 15796, 31592, 63184,
                    47201, 24803, 49606, 37805, 14203, 28406, 56812, 17824, 35648, 1697, 3394, 6788,
                    13576, 27152, 43601, 17539, 35078, 557, 1114, 2228, 4456, 30388, 60776, 51953,
                    34243, 7079, 14158, 28316, 14128, 28256, 56512, 43425, 17251, 34502, 7597,
                    13105, 26210, 52420, 35241, 883, 1766, 3532, 4129, 8258, 16516, 33032, 4657,
                    9314, 18628,
                ];
                var Ror = function (Byte) {
                    return ((Byte / 2) | (Byte * 128)) & 255;
                };
                var XorRor = function (byte1, byte2) {
                    return Ror(byte1 ^ byte2);
                };
                var CreateXorKey_Method1 = function (Password) {
                    var XorKey = InitialCode[Password.length - 1];
                    var CurrentElement = 104;
                    for (var i2 = Password.length - 1; i2 >= 0; --i2) {
                        var Char = Password[i2];
                        for (var j = 0; j != 7; ++j) {
                            if (Char & 64) XorKey ^= XorMatrix[CurrentElement];
                            Char *= 2;
                            --CurrentElement;
                        }
                    }
                    return XorKey;
                };
                return function (password) {
                    var Password = _JS2ANSI(password);
                    var XorKey = CreateXorKey_Method1(Password);
                    var Index = Password.length;
                    var ObfuscationArray = new_raw_buf(16);
                    for (var i2 = 0; i2 != 16; ++i2) ObfuscationArray[i2] = 0;
                    var Temp, PasswordLastChar, PadIndex;
                    if ((Index & 1) === 1) {
                        Temp = XorKey >> 8;
                        ObfuscationArray[Index] = XorRor(PadArray[0], Temp);
                        --Index;
                        Temp = XorKey & 255;
                        PasswordLastChar = Password[Password.length - 1];
                        ObfuscationArray[Index] = XorRor(PasswordLastChar, Temp);
                    }
                    while (Index > 0) {
                        --Index;
                        Temp = XorKey >> 8;
                        ObfuscationArray[Index] = XorRor(Password[Index], Temp);
                        --Index;
                        Temp = XorKey & 255;
                        ObfuscationArray[Index] = XorRor(Password[Index], Temp);
                    }
                    Index = 15;
                    PadIndex = 15 - Password.length;
                    while (PadIndex > 0) {
                        Temp = XorKey >> 8;
                        ObfuscationArray[Index] = XorRor(PadArray[PadIndex], Temp);
                        --Index;
                        --PadIndex;
                        Temp = XorKey & 255;
                        ObfuscationArray[Index] = XorRor(Password[Index], Temp);
                        --Index;
                        --PadIndex;
                    }
                    return ObfuscationArray;
                };
            })();
            var crypto_DecryptData_Method1 = function (password, Data, XorArrayIndex, XorArray, O) {
                if (!O) O = Data;
                if (!XorArray) XorArray = crypto_CreateXorArray_Method1(password);
                var Index, Value;
                for (Index = 0; Index != Data.length; ++Index) {
                    Value = Data[Index];
                    Value ^= XorArray[XorArrayIndex];
                    Value = ((Value >> 5) | (Value << 3)) & 255;
                    O[Index] = Value;
                    ++XorArrayIndex;
                }
                return [O, XorArrayIndex, XorArray];
            };
            var crypto_MakeXorDecryptor = function (password) {
                var XorArrayIndex = 0,
                    XorArray = crypto_CreateXorArray_Method1(password);
                return function (Data) {
                    var O = crypto_DecryptData_Method1('', Data, XorArrayIndex, XorArray);
                    XorArrayIndex = O[1];
                    return O[0];
                };
            };
            function parse_XORObfuscation(blob, length, opts, out) {
                var o = { key: parseuint16(blob), verificationBytes: parseuint16(blob) };
                if (opts.password)
                    o.verifier = crypto_CreatePasswordVerifier_Method1(opts.password);
                out.valid = o.verificationBytes === o.verifier;
                if (out.valid) out.insitu = crypto_MakeXorDecryptor(opts.password);
                return o;
            }
            function parse_FilePassHeader(blob, length, oo) {
                var o = oo || {};
                o.Info = blob.read_shift(2);
                blob.l -= 2;
                if (o.Info === 1) o.Data = parse_RC4Header(blob, length);
                else o.Data = parse_RC4CryptoHeader(blob, length);
                return o;
            }
            function parse_FilePass(blob, length, opts) {
                var o = { Type: opts.biff >= 8 ? blob.read_shift(2) : 0 };
                if (o.Type) parse_FilePassHeader(blob, length - 2, o);
                else parse_XORObfuscation(blob, opts.biff >= 8 ? length : length - 2, opts, o);
                return o;
            }
            var RTF = /* @__PURE__ */ (function () {
                function rtf_to_sheet(d, opts) {
                    switch (opts.type) {
                        case 'base64':
                            return rtf_to_sheet_str(Base64_decode(d), opts);
                        case 'binary':
                            return rtf_to_sheet_str(d, opts);
                        case 'buffer':
                            return rtf_to_sheet_str(
                                has_buf && Buffer.isBuffer(d) ? d.toString('binary') : a2s(d),
                                opts,
                            );
                        case 'array':
                            return rtf_to_sheet_str(cc2str(d), opts);
                    }
                    throw new Error('Unrecognized type ' + opts.type);
                }
                function rtf_to_sheet_str(str, opts) {
                    var o = opts || {};
                    var ws = o.dense ? [] : {};
                    var rows = str.match(/\\trowd.*?\\row\b/g);
                    if (!rows.length) throw new Error('RTF missing table');
                    var range = { s: { c: 0, r: 0 }, e: { c: 0, r: rows.length - 1 } };
                    rows.forEach(function (rowtf, R) {
                        if (Array.isArray(ws)) ws[R] = [];
                        var rtfre = /\\\w+\b/g;
                        var last_index = 0;
                        var res;
                        var C = -1;
                        while ((res = rtfre.exec(rowtf))) {
                            switch (res[0]) {
                                case '\\cell':
                                    var data2 = rowtf.slice(
                                        last_index,
                                        rtfre.lastIndex - res[0].length,
                                    );
                                    if (data2[0] == ' ') data2 = data2.slice(1);
                                    ++C;
                                    if (data2.length) {
                                        var cell = { v: data2, t: 's' };
                                        if (Array.isArray(ws)) ws[R][C] = cell;
                                        else ws[encode_cell({ r: R, c: C })] = cell;
                                    }
                                    break;
                            }
                            last_index = rtfre.lastIndex;
                        }
                        if (C > range.e.c) range.e.c = C;
                    });
                    ws['!ref'] = encode_range(range);
                    return ws;
                }
                function rtf_to_workbook(d, opts) {
                    return sheet_to_workbook(rtf_to_sheet(d, opts), opts);
                }
                function sheet_to_rtf(ws) {
                    var o = ['{\\rtf1\\ansi'];
                    var r2 = safe_decode_range(ws['!ref']),
                        cell;
                    var dense = Array.isArray(ws);
                    for (var R = r2.s.r; R <= r2.e.r; ++R) {
                        o.push('\\trowd\\trautofit1');
                        for (var C = r2.s.c; C <= r2.e.c; ++C) o.push('\\cellx' + (C + 1));
                        o.push('\\pard\\intbl');
                        for (C = r2.s.c; C <= r2.e.c; ++C) {
                            var coord = encode_cell({ r: R, c: C });
                            cell = dense ? (ws[R] || [])[C] : ws[coord];
                            if (!cell || (cell.v == null && (!cell.f || cell.F))) continue;
                            o.push(' ' + (cell.w || (format_cell(cell), cell.w)));
                            o.push('\\cell');
                        }
                        o.push('\\pard\\intbl\\row');
                    }
                    return o.join('') + '}';
                }
                return {
                    to_workbook: rtf_to_workbook,
                    to_sheet: rtf_to_sheet,
                    from_sheet: sheet_to_rtf,
                };
            })();
            function hex2RGB(h2) {
                var o = h2.slice(h2[0] === '#' ? 1 : 0).slice(0, 6);
                return [
                    parseInt(o.slice(0, 2), 16),
                    parseInt(o.slice(2, 4), 16),
                    parseInt(o.slice(4, 6), 16),
                ];
            }
            function rgb2Hex(rgb) {
                for (var i2 = 0, o = 1; i2 != 3; ++i2)
                    o = o * 256 + (rgb[i2] > 255 ? 255 : rgb[i2] < 0 ? 0 : rgb[i2]);
                return o.toString(16).toUpperCase().slice(1);
            }
            function rgb2HSL(rgb) {
                var R = rgb[0] / 255,
                    G = rgb[1] / 255,
                    B = rgb[2] / 255;
                var M = Math.max(R, G, B),
                    m2 = Math.min(R, G, B),
                    C = M - m2;
                if (C === 0) return [0, 0, R];
                var H6 = 0,
                    S2 = 0,
                    L2 = M + m2;
                S2 = C / (L2 > 1 ? 2 - L2 : L2);
                switch (M) {
                    case R:
                        H6 = ((G - B) / C + 6) % 6;
                        break;
                    case G:
                        H6 = (B - R) / C + 2;
                        break;
                    case B:
                        H6 = (R - G) / C + 4;
                        break;
                }
                return [H6 / 6, S2, L2 / 2];
            }
            function hsl2RGB(hsl) {
                var H = hsl[0],
                    S2 = hsl[1],
                    L = hsl[2];
                var C = S2 * 2 * (L < 0.5 ? L : 1 - L),
                    m2 = L - C / 2;
                var rgb = [m2, m2, m2],
                    h6 = 6 * H;
                var X;
                if (S2 !== 0)
                    switch (h6 | 0) {
                        case 0:
                        case 6:
                            X = C * h6;
                            rgb[0] += C;
                            rgb[1] += X;
                            break;
                        case 1:
                            X = C * (2 - h6);
                            rgb[0] += X;
                            rgb[1] += C;
                            break;
                        case 2:
                            X = C * (h6 - 2);
                            rgb[1] += C;
                            rgb[2] += X;
                            break;
                        case 3:
                            X = C * (4 - h6);
                            rgb[1] += X;
                            rgb[2] += C;
                            break;
                        case 4:
                            X = C * (h6 - 4);
                            rgb[2] += C;
                            rgb[0] += X;
                            break;
                        case 5:
                            X = C * (6 - h6);
                            rgb[2] += X;
                            rgb[0] += C;
                            break;
                    }
                for (var i2 = 0; i2 != 3; ++i2) rgb[i2] = Math.round(rgb[i2] * 255);
                return rgb;
            }
            function rgb_tint(hex, tint) {
                if (tint === 0) return hex;
                var hsl = rgb2HSL(hex2RGB(hex));
                if (tint < 0) hsl[2] = hsl[2] * (1 + tint);
                else hsl[2] = 1 - (1 - hsl[2]) * (1 - tint);
                return rgb2Hex(hsl2RGB(hsl));
            }
            var DEF_MDW = 6,
                MAX_MDW = 15,
                MIN_MDW = 1,
                MDW = DEF_MDW;
            function width2px(width) {
                return Math.floor((width + Math.round(128 / MDW) / 256) * MDW);
            }
            function px2char(px) {
                return Math.floor(((px - 5) / MDW) * 100 + 0.5) / 100;
            }
            function char2width(chr) {
                return Math.round(((chr * MDW + 5) / MDW) * 256) / 256;
            }
            function cycle_width(collw) {
                return char2width(px2char(width2px(collw)));
            }
            function find_mdw_colw(collw) {
                var delta = Math.abs(collw - cycle_width(collw)),
                    _MDW = MDW;
                if (delta > 5e-3) {
                    for (MDW = MIN_MDW; MDW < MAX_MDW; ++MDW)
                        if (Math.abs(collw - cycle_width(collw)) <= delta) {
                            delta = Math.abs(collw - cycle_width(collw));
                            _MDW = MDW;
                        }
                }
                MDW = _MDW;
            }
            function process_col(coll) {
                if (coll.width) {
                    coll.wpx = width2px(coll.width);
                    coll.wch = px2char(coll.wpx);
                    coll.MDW = MDW;
                } else if (coll.wpx) {
                    coll.wch = px2char(coll.wpx);
                    coll.width = char2width(coll.wch);
                    coll.MDW = MDW;
                } else if (typeof coll.wch == 'number') {
                    coll.width = char2width(coll.wch);
                    coll.wpx = width2px(coll.width);
                    coll.MDW = MDW;
                }
                if (coll.customWidth) delete coll.customWidth;
            }
            var DEF_PPI = 96,
                PPI = DEF_PPI;
            function px2pt(px) {
                return (px * 96) / PPI;
            }
            function pt2px(pt) {
                return (pt * PPI) / 96;
            }
            var XLMLPatternTypeMap = {
                None: 'none',
                Solid: 'solid',
                Gray50: 'mediumGray',
                Gray75: 'darkGray',
                Gray25: 'lightGray',
                HorzStripe: 'darkHorizontal',
                VertStripe: 'darkVertical',
                ReverseDiagStripe: 'darkDown',
                DiagStripe: 'darkUp',
                DiagCross: 'darkGrid',
                ThickDiagCross: 'darkTrellis',
                ThinHorzStripe: 'lightHorizontal',
                ThinVertStripe: 'lightVertical',
                ThinReverseDiagStripe: 'lightDown',
                ThinHorzCross: 'lightGrid',
            };
            function parse_borders(t2, styles, themes, opts) {
                styles.Borders = [];
                var border = {};
                var pass = false;
                (t2[0].match(tagregex) || []).forEach(function (x2) {
                    var y = parsexmltag(x2);
                    switch (strip_ns(y[0])) {
                        case '<borders':
                        case '<borders>':
                        case '</borders>':
                            break;
                        case '<border':
                        case '<border>':
                        case '<border/>':
                            border = {};
                            if (y.diagonalUp) border.diagonalUp = parsexmlbool(y.diagonalUp);
                            if (y.diagonalDown) border.diagonalDown = parsexmlbool(y.diagonalDown);
                            styles.Borders.push(border);
                            break;
                        case '</border>':
                            break;
                        case '<left/>':
                            break;
                        case '<left':
                        case '<left>':
                            break;
                        case '</left>':
                            break;
                        case '<right/>':
                            break;
                        case '<right':
                        case '<right>':
                            break;
                        case '</right>':
                            break;
                        case '<top/>':
                            break;
                        case '<top':
                        case '<top>':
                            break;
                        case '</top>':
                            break;
                        case '<bottom/>':
                            break;
                        case '<bottom':
                        case '<bottom>':
                            break;
                        case '</bottom>':
                            break;
                        case '<diagonal':
                        case '<diagonal>':
                        case '<diagonal/>':
                            break;
                        case '</diagonal>':
                            break;
                        case '<horizontal':
                        case '<horizontal>':
                        case '<horizontal/>':
                            break;
                        case '</horizontal>':
                            break;
                        case '<vertical':
                        case '<vertical>':
                        case '<vertical/>':
                            break;
                        case '</vertical>':
                            break;
                        case '<start':
                        case '<start>':
                        case '<start/>':
                            break;
                        case '</start>':
                            break;
                        case '<end':
                        case '<end>':
                        case '<end/>':
                            break;
                        case '</end>':
                            break;
                        case '<color':
                        case '<color>':
                            break;
                        case '<color/>':
                        case '</color>':
                            break;
                        case '<extLst':
                        case '<extLst>':
                        case '</extLst>':
                            break;
                        case '<ext':
                            pass = true;
                            break;
                        case '</ext>':
                            pass = false;
                            break;
                        default:
                            if (opts && opts.WTF) {
                                if (!pass) throw new Error('unrecognized ' + y[0] + ' in borders');
                            }
                    }
                });
            }
            function parse_fills(t2, styles, themes, opts) {
                styles.Fills = [];
                var fill2 = {};
                var pass = false;
                (t2[0].match(tagregex) || []).forEach(function (x2) {
                    var y = parsexmltag(x2);
                    switch (strip_ns(y[0])) {
                        case '<fills':
                        case '<fills>':
                        case '</fills>':
                            break;
                        case '<fill>':
                        case '<fill':
                        case '<fill/>':
                            fill2 = {};
                            styles.Fills.push(fill2);
                            break;
                        case '</fill>':
                            break;
                        case '<gradientFill>':
                            break;
                        case '<gradientFill':
                        case '</gradientFill>':
                            styles.Fills.push(fill2);
                            fill2 = {};
                            break;
                        case '<patternFill':
                        case '<patternFill>':
                            if (y.patternType) fill2.patternType = y.patternType;
                            break;
                        case '<patternFill/>':
                        case '</patternFill>':
                            break;
                        case '<bgColor':
                            if (!fill2.bgColor) fill2.bgColor = {};
                            if (y.indexed) fill2.bgColor.indexed = parseInt(y.indexed, 10);
                            if (y.theme) fill2.bgColor.theme = parseInt(y.theme, 10);
                            if (y.tint) fill2.bgColor.tint = parseFloat(y.tint);
                            if (y.rgb) fill2.bgColor.rgb = y.rgb.slice(-6);
                            break;
                        case '<bgColor/>':
                        case '</bgColor>':
                            break;
                        case '<fgColor':
                            if (!fill2.fgColor) fill2.fgColor = {};
                            if (y.theme) fill2.fgColor.theme = parseInt(y.theme, 10);
                            if (y.tint) fill2.fgColor.tint = parseFloat(y.tint);
                            if (y.rgb != null) fill2.fgColor.rgb = y.rgb.slice(-6);
                            break;
                        case '<fgColor/>':
                        case '</fgColor>':
                            break;
                        case '<stop':
                        case '<stop/>':
                            break;
                        case '</stop>':
                            break;
                        case '<color':
                        case '<color/>':
                            break;
                        case '</color>':
                            break;
                        case '<extLst':
                        case '<extLst>':
                        case '</extLst>':
                            break;
                        case '<ext':
                            pass = true;
                            break;
                        case '</ext>':
                            pass = false;
                            break;
                        default:
                            if (opts && opts.WTF) {
                                if (!pass) throw new Error('unrecognized ' + y[0] + ' in fills');
                            }
                    }
                });
            }
            function parse_fonts(t2, styles, themes, opts) {
                styles.Fonts = [];
                var font = {};
                var pass = false;
                (t2[0].match(tagregex) || []).forEach(function (x2) {
                    var y = parsexmltag(x2);
                    switch (strip_ns(y[0])) {
                        case '<fonts':
                        case '<fonts>':
                        case '</fonts>':
                            break;
                        case '<font':
                        case '<font>':
                            break;
                        case '</font>':
                        case '<font/>':
                            styles.Fonts.push(font);
                            font = {};
                            break;
                        case '<name':
                            if (y.val) font.name = utf8read(y.val);
                            break;
                        case '<name/>':
                        case '</name>':
                            break;
                        case '<b':
                            font.bold = y.val ? parsexmlbool(y.val) : 1;
                            break;
                        case '<b/>':
                            font.bold = 1;
                            break;
                        case '<i':
                            font.italic = y.val ? parsexmlbool(y.val) : 1;
                            break;
                        case '<i/>':
                            font.italic = 1;
                            break;
                        case '<u':
                            switch (y.val) {
                                case 'none':
                                    font.underline = 0;
                                    break;
                                case 'single':
                                    font.underline = 1;
                                    break;
                                case 'double':
                                    font.underline = 2;
                                    break;
                                case 'singleAccounting':
                                    font.underline = 33;
                                    break;
                                case 'doubleAccounting':
                                    font.underline = 34;
                                    break;
                            }
                            break;
                        case '<u/>':
                            font.underline = 1;
                            break;
                        case '<strike':
                            font.strike = y.val ? parsexmlbool(y.val) : 1;
                            break;
                        case '<strike/>':
                            font.strike = 1;
                            break;
                        case '<outline':
                            font.outline = y.val ? parsexmlbool(y.val) : 1;
                            break;
                        case '<outline/>':
                            font.outline = 1;
                            break;
                        case '<shadow':
                            font.shadow = y.val ? parsexmlbool(y.val) : 1;
                            break;
                        case '<shadow/>':
                            font.shadow = 1;
                            break;
                        case '<condense':
                            font.condense = y.val ? parsexmlbool(y.val) : 1;
                            break;
                        case '<condense/>':
                            font.condense = 1;
                            break;
                        case '<extend':
                            font.extend = y.val ? parsexmlbool(y.val) : 1;
                            break;
                        case '<extend/>':
                            font.extend = 1;
                            break;
                        case '<sz':
                            if (y.val) font.sz = +y.val;
                            break;
                        case '<sz/>':
                        case '</sz>':
                            break;
                        case '<vertAlign':
                            if (y.val) font.vertAlign = y.val;
                            break;
                        case '<vertAlign/>':
                        case '</vertAlign>':
                            break;
                        case '<family':
                            if (y.val) font.family = parseInt(y.val, 10);
                            break;
                        case '<family/>':
                        case '</family>':
                            break;
                        case '<scheme':
                            if (y.val) font.scheme = y.val;
                            break;
                        case '<scheme/>':
                        case '</scheme>':
                            break;
                        case '<charset':
                            if (y.val == '1') break;
                            y.codepage = CS2CP[parseInt(y.val, 10)];
                            break;
                        case '<color':
                            if (!font.color) font.color = {};
                            if (y.auto) font.color.auto = parsexmlbool(y.auto);
                            if (y.rgb) font.color.rgb = y.rgb.slice(-6);
                            else if (y.indexed) {
                                font.color.index = parseInt(y.indexed, 10);
                                var icv = XLSIcv[font.color.index];
                                if (font.color.index == 81) icv = XLSIcv[1];
                                if (!icv) icv = XLSIcv[1];
                                font.color.rgb =
                                    icv[0].toString(16) + icv[1].toString(16) + icv[2].toString(16);
                            } else if (y.theme) {
                                font.color.theme = parseInt(y.theme, 10);
                                if (y.tint) font.color.tint = parseFloat(y.tint);
                                if (
                                    y.theme &&
                                    themes.themeElements &&
                                    themes.themeElements.clrScheme
                                ) {
                                    font.color.rgb = rgb_tint(
                                        themes.themeElements.clrScheme[font.color.theme].rgb,
                                        font.color.tint || 0,
                                    );
                                }
                            }
                            break;
                        case '<color/>':
                        case '</color>':
                            break;
                        case '<AlternateContent':
                            pass = true;
                            break;
                        case '</AlternateContent>':
                            pass = false;
                            break;
                        case '<extLst':
                        case '<extLst>':
                        case '</extLst>':
                            break;
                        case '<ext':
                            pass = true;
                            break;
                        case '</ext>':
                            pass = false;
                            break;
                        default:
                            if (opts && opts.WTF) {
                                if (!pass) throw new Error('unrecognized ' + y[0] + ' in fonts');
                            }
                    }
                });
            }
            function parse_numFmts(t2, styles, opts) {
                styles.NumberFmt = [];
                var k = keys(table_fmt);
                for (var i2 = 0; i2 < k.length; ++i2) styles.NumberFmt[k[i2]] = table_fmt[k[i2]];
                var m2 = t2[0].match(tagregex);
                if (!m2) return;
                for (i2 = 0; i2 < m2.length; ++i2) {
                    var y = parsexmltag(m2[i2]);
                    switch (strip_ns(y[0])) {
                        case '<numFmts':
                        case '</numFmts>':
                        case '<numFmts/>':
                        case '<numFmts>':
                            break;
                        case '<numFmt':
                            {
                                var f3 = unescapexml(utf8read(y.formatCode)),
                                    j = parseInt(y.numFmtId, 10);
                                styles.NumberFmt[j] = f3;
                                if (j > 0) {
                                    if (j > 392) {
                                        for (j = 392; j > 60; --j)
                                            if (styles.NumberFmt[j] == null) break;
                                        styles.NumberFmt[j] = f3;
                                    }
                                    SSF_load(f3, j);
                                }
                            }
                            break;
                        case '</numFmt>':
                            break;
                        default:
                            if (opts.WTF) throw new Error('unrecognized ' + y[0] + ' in numFmts');
                    }
                }
            }
            function write_numFmts(NF) {
                var o = ['<numFmts>'];
                [
                    [5, 8],
                    [23, 26],
                    [41, 44],
                    [
                        /*63*/
                        50 /*66],[164,*/, 392,
                    ],
                ].forEach(function (r2) {
                    for (var i2 = r2[0]; i2 <= r2[1]; ++i2)
                        if (NF[i2] != null)
                            o[o.length] = writextag('numFmt', null, {
                                numFmtId: i2,
                                formatCode: escapexml(NF[i2]),
                            });
                });
                if (o.length === 1) return '';
                o[o.length] = '</numFmts>';
                o[0] = writextag('numFmts', null, { count: o.length - 2 }).replace('/>', '>');
                return o.join('');
            }
            var cellXF_uint = ['numFmtId', 'fillId', 'fontId', 'borderId', 'xfId'];
            var cellXF_bool = [
                'applyAlignment',
                'applyBorder',
                'applyFill',
                'applyFont',
                'applyNumberFormat',
                'applyProtection',
                'pivotButton',
                'quotePrefix',
            ];
            function parse_cellXfs(t2, styles, opts) {
                styles.CellXf = [];
                var xf;
                var pass = false;
                (t2[0].match(tagregex) || []).forEach(function (x2) {
                    var y = parsexmltag(x2),
                        i2 = 0;
                    switch (strip_ns(y[0])) {
                        case '<cellXfs':
                        case '<cellXfs>':
                        case '<cellXfs/>':
                        case '</cellXfs>':
                            break;
                        case '<xf':
                        case '<xf/>':
                            xf = y;
                            delete xf[0];
                            for (i2 = 0; i2 < cellXF_uint.length; ++i2)
                                if (xf[cellXF_uint[i2]])
                                    xf[cellXF_uint[i2]] = parseInt(xf[cellXF_uint[i2]], 10);
                            for (i2 = 0; i2 < cellXF_bool.length; ++i2)
                                if (xf[cellXF_bool[i2]])
                                    xf[cellXF_bool[i2]] = parsexmlbool(xf[cellXF_bool[i2]]);
                            if (styles.NumberFmt && xf.numFmtId > 392) {
                                for (i2 = 392; i2 > 60; --i2)
                                    if (styles.NumberFmt[xf.numFmtId] == styles.NumberFmt[i2]) {
                                        xf.numFmtId = i2;
                                        break;
                                    }
                            }
                            styles.CellXf.push(xf);
                            break;
                        case '</xf>':
                            break;
                        case '<alignment':
                        case '<alignment/>':
                            var alignment = {};
                            if (y.vertical) alignment.vertical = y.vertical;
                            if (y.horizontal) alignment.horizontal = y.horizontal;
                            if (y.textRotation != null) alignment.textRotation = y.textRotation;
                            if (y.indent) alignment.indent = y.indent;
                            if (y.wrapText) alignment.wrapText = parsexmlbool(y.wrapText);
                            xf.alignment = alignment;
                            break;
                        case '</alignment>':
                            break;
                        case '<protection':
                            break;
                        case '</protection>':
                        case '<protection/>':
                            break;
                        case '<AlternateContent':
                            pass = true;
                            break;
                        case '</AlternateContent>':
                            pass = false;
                            break;
                        case '<extLst':
                        case '<extLst>':
                        case '</extLst>':
                            break;
                        case '<ext':
                            pass = true;
                            break;
                        case '</ext>':
                            pass = false;
                            break;
                        default:
                            if (opts && opts.WTF) {
                                if (!pass) throw new Error('unrecognized ' + y[0] + ' in cellXfs');
                            }
                    }
                });
            }
            function write_cellXfs(cellXfs) {
                var o = [];
                o[o.length] = writextag('cellXfs', null);
                cellXfs.forEach(function (c) {
                    o[o.length] = writextag('xf', null, c);
                });
                o[o.length] = '</cellXfs>';
                if (o.length === 2) return '';
                o[0] = writextag('cellXfs', null, { count: o.length - 2 }).replace('/>', '>');
                return o.join('');
            }
            var parse_sty_xml = /* @__PURE__ */ (function make_pstyx() {
                var numFmtRegex = /<(?:\w+:)?numFmts([^>]*)>[\S\s]*?<\/(?:\w+:)?numFmts>/;
                var cellXfRegex = /<(?:\w+:)?cellXfs([^>]*)>[\S\s]*?<\/(?:\w+:)?cellXfs>/;
                var fillsRegex = /<(?:\w+:)?fills([^>]*)>[\S\s]*?<\/(?:\w+:)?fills>/;
                var fontsRegex = /<(?:\w+:)?fonts([^>]*)>[\S\s]*?<\/(?:\w+:)?fonts>/;
                var bordersRegex = /<(?:\w+:)?borders([^>]*)>[\S\s]*?<\/(?:\w+:)?borders>/;
                return function parse_sty_xml2(data2, themes, opts) {
                    var styles = {};
                    if (!data2) return styles;
                    data2 = data2
                        .replace(/<!--([\s\S]*?)-->/gm, '')
                        .replace(/<!DOCTYPE[^\[]*\[[^\]]*\]>/gm, '');
                    var t2;
                    if ((t2 = data2.match(numFmtRegex))) parse_numFmts(t2, styles, opts);
                    if ((t2 = data2.match(fontsRegex))) parse_fonts(t2, styles, themes, opts);
                    if ((t2 = data2.match(fillsRegex))) parse_fills(t2, styles, themes, opts);
                    if ((t2 = data2.match(bordersRegex))) parse_borders(t2, styles, themes, opts);
                    if ((t2 = data2.match(cellXfRegex))) parse_cellXfs(t2, styles, opts);
                    return styles;
                };
            })();
            function write_sty_xml(wb, opts) {
                var o = [
                        XML_HEADER,
                        writextag('styleSheet', null, {
                            xmlns: XMLNS_main[0],
                            'xmlns:vt': XMLNS.vt,
                        }),
                    ],
                    w;
                if (wb.SSF && (w = write_numFmts(wb.SSF)) != null) o[o.length] = w;
                o[o.length] =
                    '<fonts count="1"><font><sz val="12"/><color theme="1"/><name val="Calibri"/><family val="2"/><scheme val="minor"/></font></fonts>';
                o[o.length] =
                    '<fills count="2"><fill><patternFill patternType="none"/></fill><fill><patternFill patternType="gray125"/></fill></fills>';
                o[o.length] =
                    '<borders count="1"><border><left/><right/><top/><bottom/><diagonal/></border></borders>';
                o[o.length] =
                    '<cellStyleXfs count="1"><xf numFmtId="0" fontId="0" fillId="0" borderId="0"/></cellStyleXfs>';
                if ((w = write_cellXfs(opts.cellXfs))) o[o.length] = w;
                o[o.length] =
                    '<cellStyles count="1"><cellStyle name="Normal" xfId="0" builtinId="0"/></cellStyles>';
                o[o.length] = '<dxfs count="0"/>';
                o[o.length] =
                    '<tableStyles count="0" defaultTableStyle="TableStyleMedium9" defaultPivotStyle="PivotStyleMedium4"/>';
                if (o.length > 2) {
                    o[o.length] = '</styleSheet>';
                    o[1] = o[1].replace('/>', '>');
                }
                return o.join('');
            }
            function parse_BrtFmt(data2, length) {
                var numFmtId = data2.read_shift(2);
                var stFmtCode = parse_XLWideString(data2, length - 2);
                return [numFmtId, stFmtCode];
            }
            function write_BrtFmt(i2, f3, o) {
                if (!o) o = new_buf(6 + 4 * f3.length);
                o.write_shift(2, i2);
                write_XLWideString(f3, o);
                var out = o.length > o.l ? o.slice(0, o.l) : o;
                if (o.l == null) o.l = o.length;
                return out;
            }
            function parse_BrtFont(data2, length, opts) {
                var out = {};
                out.sz = data2.read_shift(2) / 20;
                var grbit = parse_FontFlags(data2, 2, opts);
                if (grbit.fItalic) out.italic = 1;
                if (grbit.fCondense) out.condense = 1;
                if (grbit.fExtend) out.extend = 1;
                if (grbit.fShadow) out.shadow = 1;
                if (grbit.fOutline) out.outline = 1;
                if (grbit.fStrikeout) out.strike = 1;
                var bls = data2.read_shift(2);
                if (bls === 700) out.bold = 1;
                switch (data2.read_shift(2)) {
                    case 1:
                        out.vertAlign = 'superscript';
                        break;
                    case 2:
                        out.vertAlign = 'subscript';
                        break;
                }
                var underline2 = data2.read_shift(1);
                if (underline2 != 0) out.underline = underline2;
                var family = data2.read_shift(1);
                if (family > 0) out.family = family;
                var bCharSet = data2.read_shift(1);
                if (bCharSet > 0) out.charset = bCharSet;
                data2.l++;
                out.color = parse_BrtColor(data2, 8);
                switch (data2.read_shift(1)) {
                    case 1:
                        out.scheme = 'major';
                        break;
                    case 2:
                        out.scheme = 'minor';
                        break;
                }
                out.name = parse_XLWideString(data2, length - 21);
                return out;
            }
            function write_BrtFont(font, o) {
                if (!o) o = new_buf(25 + 4 * 32);
                o.write_shift(2, font.sz * 20);
                write_FontFlags(font, o);
                o.write_shift(2, font.bold ? 700 : 400);
                var sss = 0;
                if (font.vertAlign == 'superscript') sss = 1;
                else if (font.vertAlign == 'subscript') sss = 2;
                o.write_shift(2, sss);
                o.write_shift(1, font.underline || 0);
                o.write_shift(1, font.family || 0);
                o.write_shift(1, font.charset || 0);
                o.write_shift(1, 0);
                write_BrtColor(font.color, o);
                var scheme = 0;
                if (font.scheme == 'major') scheme = 1;
                if (font.scheme == 'minor') scheme = 2;
                o.write_shift(1, scheme);
                write_XLWideString(font.name, o);
                return o.length > o.l ? o.slice(0, o.l) : o;
            }
            var XLSBFillPTNames = [
                'none',
                'solid',
                'mediumGray',
                'darkGray',
                'lightGray',
                'darkHorizontal',
                'darkVertical',
                'darkDown',
                'darkUp',
                'darkGrid',
                'darkTrellis',
                'lightHorizontal',
                'lightVertical',
                'lightDown',
                'lightUp',
                'lightGrid',
                'lightTrellis',
                'gray125',
                'gray0625',
            ];
            var rev_XLSBFillPTNames;
            var parse_BrtFill = parsenoop;
            function write_BrtFill(fill2, o) {
                if (!o) o = new_buf(4 * 3 + 8 * 7 + 16 * 1);
                if (!rev_XLSBFillPTNames) rev_XLSBFillPTNames = evert(XLSBFillPTNames);
                var fls = rev_XLSBFillPTNames[fill2.patternType];
                if (fls == null) fls = 40;
                o.write_shift(4, fls);
                var j = 0;
                if (fls != 40) {
                    write_BrtColor({ auto: 1 }, o);
                    write_BrtColor({ auto: 1 }, o);
                    for (; j < 12; ++j) o.write_shift(4, 0);
                } else {
                    for (; j < 4; ++j) o.write_shift(4, 0);
                    for (; j < 12; ++j) o.write_shift(4, 0);
                }
                return o.length > o.l ? o.slice(0, o.l) : o;
            }
            function parse_BrtXF(data2, length) {
                var tgt = data2.l + length;
                var ixfeParent = data2.read_shift(2);
                var ifmt = data2.read_shift(2);
                data2.l = tgt;
                return { ixfe: ixfeParent, numFmtId: ifmt };
            }
            function write_BrtXF(data2, ixfeP, o) {
                if (!o) o = new_buf(16);
                o.write_shift(2, ixfeP || 0);
                o.write_shift(2, data2.numFmtId || 0);
                o.write_shift(2, 0);
                o.write_shift(2, 0);
                o.write_shift(2, 0);
                o.write_shift(1, 0);
                o.write_shift(1, 0);
                var flow = 0;
                o.write_shift(1, flow);
                o.write_shift(1, 0);
                o.write_shift(1, 0);
                o.write_shift(1, 0);
                return o;
            }
            function write_Blxf(data2, o) {
                if (!o) o = new_buf(10);
                o.write_shift(1, 0);
                o.write_shift(1, 0);
                o.write_shift(4, 0);
                o.write_shift(4, 0);
                return o;
            }
            var parse_BrtBorder = parsenoop;
            function write_BrtBorder(border, o) {
                if (!o) o = new_buf(51);
                o.write_shift(1, 0);
                write_Blxf(null, o);
                write_Blxf(null, o);
                write_Blxf(null, o);
                write_Blxf(null, o);
                write_Blxf(null, o);
                return o.length > o.l ? o.slice(0, o.l) : o;
            }
            function write_BrtStyle(style, o) {
                if (!o) o = new_buf(12 + 4 * 10);
                o.write_shift(4, style.xfId);
                o.write_shift(2, 1);
                o.write_shift(1, +style.builtinId);
                o.write_shift(1, 0);
                write_XLNullableWideString(style.name || '', o);
                return o.length > o.l ? o.slice(0, o.l) : o;
            }
            function write_BrtBeginTableStyles(cnt, defTableStyle, defPivotStyle) {
                var o = new_buf(4 + 256 * 2 * 4);
                o.write_shift(4, cnt);
                write_XLNullableWideString(defTableStyle, o);
                write_XLNullableWideString(defPivotStyle, o);
                return o.length > o.l ? o.slice(0, o.l) : o;
            }
            function parse_sty_bin(data2, themes, opts) {
                var styles = {};
                styles.NumberFmt = [];
                for (var y in table_fmt) styles.NumberFmt[y] = table_fmt[y];
                styles.CellXf = [];
                styles.Fonts = [];
                var state = [];
                var pass = false;
                recordhopper(data2, function hopper_sty(val2, R, RT) {
                    switch (RT) {
                        case 44:
                            styles.NumberFmt[val2[0]] = val2[1];
                            SSF_load(val2[1], val2[0]);
                            break;
                        case 43:
                            styles.Fonts.push(val2);
                            if (
                                val2.color.theme != null &&
                                themes &&
                                themes.themeElements &&
                                themes.themeElements.clrScheme
                            ) {
                                val2.color.rgb = rgb_tint(
                                    themes.themeElements.clrScheme[val2.color.theme].rgb,
                                    val2.color.tint || 0,
                                );
                            }
                            break;
                        case 1025:
                            break;
                        case 45:
                            break;
                        case 46:
                            break;
                        case 47:
                            if (state[state.length - 1] == 617) {
                                styles.CellXf.push(val2);
                            }
                            break;
                        case 48:
                        case 507:
                        case 572:
                        case 475:
                            break;
                        case 1171:
                        case 2102:
                        case 1130:
                        case 512:
                        case 2095:
                        case 3072:
                            break;
                        case 35:
                            pass = true;
                            break;
                        case 36:
                            pass = false;
                            break;
                        case 37:
                            state.push(RT);
                            pass = true;
                            break;
                        case 38:
                            state.pop();
                            pass = false;
                            break;
                        default:
                            if (R.T > 0) state.push(RT);
                            else if (R.T < 0) state.pop();
                            else if (!pass || (opts.WTF && state[state.length - 1] != 37))
                                throw new Error('Unexpected record 0x' + RT.toString(16));
                    }
                });
                return styles;
            }
            function write_FMTS_bin(ba, NF) {
                if (!NF) return;
                var cnt = 0;
                [
                    [5, 8],
                    [23, 26],
                    [41, 44],
                    [
                        /*63*/
                        50 /*66],[164,*/, 392,
                    ],
                ].forEach(function (r2) {
                    for (var i2 = r2[0]; i2 <= r2[1]; ++i2) if (NF[i2] != null) ++cnt;
                });
                if (cnt == 0) return;
                write_record(ba, 615, write_UInt32LE(cnt));
                [
                    [5, 8],
                    [23, 26],
                    [41, 44],
                    [
                        /*63*/
                        50 /*66],[164,*/, 392,
                    ],
                ].forEach(function (r2) {
                    for (var i2 = r2[0]; i2 <= r2[1]; ++i2)
                        if (NF[i2] != null) write_record(ba, 44, write_BrtFmt(i2, NF[i2]));
                });
                write_record(
                    ba,
                    616,
                    /* BrtEndFmts */
                );
            }
            function write_FONTS_bin(ba) {
                var cnt = 1;
                if (cnt == 0) return;
                write_record(ba, 611, write_UInt32LE(cnt));
                write_record(
                    ba,
                    43,
                    write_BrtFont({
                        sz: 12,
                        color: { theme: 1 },
                        name: 'Calibri',
                        family: 2,
                        scheme: 'minor',
                    }),
                );
                write_record(
                    ba,
                    612,
                    /* BrtEndFonts */
                );
            }
            function write_FILLS_bin(ba) {
                var cnt = 2;
                if (cnt == 0) return;
                write_record(ba, 603, write_UInt32LE(cnt));
                write_record(ba, 45, write_BrtFill({ patternType: 'none' }));
                write_record(ba, 45, write_BrtFill({ patternType: 'gray125' }));
                write_record(
                    ba,
                    604,
                    /* BrtEndFills */
                );
            }
            function write_BORDERS_bin(ba) {
                var cnt = 1;
                if (cnt == 0) return;
                write_record(ba, 613, write_UInt32LE(cnt));
                write_record(ba, 46, write_BrtBorder({}));
                write_record(
                    ba,
                    614,
                    /* BrtEndBorders */
                );
            }
            function write_CELLSTYLEXFS_bin(ba) {
                var cnt = 1;
                write_record(ba, 626, write_UInt32LE(cnt));
                write_record(
                    ba,
                    47,
                    write_BrtXF(
                        {
                            numFmtId: 0,
                            fontId: 0,
                            fillId: 0,
                            borderId: 0,
                        },
                        65535,
                    ),
                );
                write_record(
                    ba,
                    627,
                    /* BrtEndCellStyleXFs */
                );
            }
            function write_CELLXFS_bin(ba, data2) {
                write_record(ba, 617, write_UInt32LE(data2.length));
                data2.forEach(function (c) {
                    write_record(ba, 47, write_BrtXF(c, 0));
                });
                write_record(
                    ba,
                    618,
                    /* BrtEndCellXFs */
                );
            }
            function write_STYLES_bin(ba) {
                var cnt = 1;
                write_record(ba, 619, write_UInt32LE(cnt));
                write_record(
                    ba,
                    48,
                    write_BrtStyle({
                        xfId: 0,
                        builtinId: 0,
                        name: 'Normal',
                    }),
                );
                write_record(
                    ba,
                    620,
                    /* BrtEndStyles */
                );
            }
            function write_DXFS_bin(ba) {
                var cnt = 0;
                write_record(ba, 505, write_UInt32LE(cnt));
                write_record(
                    ba,
                    506,
                    /* BrtEndDXFs */
                );
            }
            function write_TABLESTYLES_bin(ba) {
                var cnt = 0;
                write_record(
                    ba,
                    508,
                    write_BrtBeginTableStyles(cnt, 'TableStyleMedium9', 'PivotStyleMedium4'),
                );
                write_record(
                    ba,
                    509,
                    /* BrtEndTableStyles */
                );
            }
            function write_COLORPALETTE_bin() {
                return;
            }
            function write_sty_bin(wb, opts) {
                var ba = buf_array();
                write_record(
                    ba,
                    278,
                    /* BrtBeginStyleSheet */
                );
                write_FMTS_bin(ba, wb.SSF);
                write_FONTS_bin(ba, wb);
                write_FILLS_bin(ba, wb);
                write_BORDERS_bin(ba, wb);
                write_CELLSTYLEXFS_bin(ba, wb);
                write_CELLXFS_bin(ba, opts.cellXfs);
                write_STYLES_bin(ba, wb);
                write_DXFS_bin(ba, wb);
                write_TABLESTYLES_bin(ba, wb);
                write_COLORPALETTE_bin(ba, wb);
                write_record(
                    ba,
                    279,
                    /* BrtEndStyleSheet */
                );
                return ba.end();
            }
            var XLSXThemeClrScheme = [
                '</a:lt1>',
                '</a:dk1>',
                '</a:lt2>',
                '</a:dk2>',
                '</a:accent1>',
                '</a:accent2>',
                '</a:accent3>',
                '</a:accent4>',
                '</a:accent5>',
                '</a:accent6>',
                '</a:hlink>',
                '</a:folHlink>',
            ];
            function parse_clrScheme(t2, themes, opts) {
                themes.themeElements.clrScheme = [];
                var color = {};
                (t2[0].match(tagregex) || []).forEach(function (x2) {
                    var y = parsexmltag(x2);
                    switch (y[0]) {
                        case '<a:clrScheme':
                        case '</a:clrScheme>':
                            break;
                        case '<a:srgbClr':
                            color.rgb = y.val;
                            break;
                        case '<a:sysClr':
                            color.rgb = y.lastClr;
                            break;
                        case '<a:dk1>':
                        case '</a:dk1>':
                        case '<a:lt1>':
                        case '</a:lt1>':
                        case '<a:dk2>':
                        case '</a:dk2>':
                        case '<a:lt2>':
                        case '</a:lt2>':
                        case '<a:accent1>':
                        case '</a:accent1>':
                        case '<a:accent2>':
                        case '</a:accent2>':
                        case '<a:accent3>':
                        case '</a:accent3>':
                        case '<a:accent4>':
                        case '</a:accent4>':
                        case '<a:accent5>':
                        case '</a:accent5>':
                        case '<a:accent6>':
                        case '</a:accent6>':
                        case '<a:hlink>':
                        case '</a:hlink>':
                        case '<a:folHlink>':
                        case '</a:folHlink>':
                            if (y[0].charAt(1) === '/') {
                                themes.themeElements.clrScheme[XLSXThemeClrScheme.indexOf(y[0])] =
                                    color;
                                color = {};
                            } else {
                                color.name = y[0].slice(3, y[0].length - 1);
                            }
                            break;
                        default:
                            if (opts && opts.WTF)
                                throw new Error('Unrecognized ' + y[0] + ' in clrScheme');
                    }
                });
            }
            function parse_fontScheme() {}
            function parse_fmtScheme() {}
            var clrsregex = /<a:clrScheme([^>]*)>[\s\S]*<\/a:clrScheme>/;
            var fntsregex = /<a:fontScheme([^>]*)>[\s\S]*<\/a:fontScheme>/;
            var fmtsregex = /<a:fmtScheme([^>]*)>[\s\S]*<\/a:fmtScheme>/;
            function parse_themeElements(data2, themes, opts) {
                themes.themeElements = {};
                var t2;
                [
                    /* clrScheme CT_ColorScheme */
                    ['clrScheme', clrsregex, parse_clrScheme],
                    /* fontScheme CT_FontScheme */
                    ['fontScheme', fntsregex, parse_fontScheme],
                    /* fmtScheme CT_StyleMatrix */
                    ['fmtScheme', fmtsregex, parse_fmtScheme],
                ].forEach(function (m2) {
                    if (!(t2 = data2.match(m2[1])))
                        throw new Error(m2[0] + ' not found in themeElements');
                    m2[2](t2, themes, opts);
                });
            }
            var themeltregex = /<a:themeElements([^>]*)>[\s\S]*<\/a:themeElements>/;
            function parse_theme_xml(data2, opts) {
                if (!data2 || data2.length === 0) data2 = write_theme();
                var t2;
                var themes = {};
                if (!(t2 = data2.match(themeltregex)))
                    throw new Error('themeElements not found in theme');
                parse_themeElements(t2[0], themes, opts);
                themes.raw = data2;
                return themes;
            }
            function write_theme(Themes, opts) {
                if (opts && opts.themeXLSX) return opts.themeXLSX;
                if (Themes && typeof Themes.raw == 'string') return Themes.raw;
                var o = [XML_HEADER];
                o[o.length] =
                    '<a:theme xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" name="Office Theme">';
                o[o.length] = '<a:themeElements>';
                o[o.length] = '<a:clrScheme name="Office">';
                o[o.length] = '<a:dk1><a:sysClr val="windowText" lastClr="000000"/></a:dk1>';
                o[o.length] = '<a:lt1><a:sysClr val="window" lastClr="FFFFFF"/></a:lt1>';
                o[o.length] = '<a:dk2><a:srgbClr val="1F497D"/></a:dk2>';
                o[o.length] = '<a:lt2><a:srgbClr val="EEECE1"/></a:lt2>';
                o[o.length] = '<a:accent1><a:srgbClr val="4F81BD"/></a:accent1>';
                o[o.length] = '<a:accent2><a:srgbClr val="C0504D"/></a:accent2>';
                o[o.length] = '<a:accent3><a:srgbClr val="9BBB59"/></a:accent3>';
                o[o.length] = '<a:accent4><a:srgbClr val="8064A2"/></a:accent4>';
                o[o.length] = '<a:accent5><a:srgbClr val="4BACC6"/></a:accent5>';
                o[o.length] = '<a:accent6><a:srgbClr val="F79646"/></a:accent6>';
                o[o.length] = '<a:hlink><a:srgbClr val="0000FF"/></a:hlink>';
                o[o.length] = '<a:folHlink><a:srgbClr val="800080"/></a:folHlink>';
                o[o.length] = '</a:clrScheme>';
                o[o.length] = '<a:fontScheme name="Office">';
                o[o.length] = '<a:majorFont>';
                o[o.length] = '<a:latin typeface="Cambria"/>';
                o[o.length] = '<a:ea typeface=""/>';
                o[o.length] = '<a:cs typeface=""/>';
                o[o.length] =
                    '<a:font script="Jpan" typeface="\uFF2D\uFF33 \uFF30\u30B4\u30B7\u30C3\u30AF"/>';
                o[o.length] = '<a:font script="Hang" typeface="\uB9D1\uC740 \uACE0\uB515"/>';
                o[o.length] = '<a:font script="Hans" typeface="\u5B8B\u4F53"/>';
                o[o.length] = '<a:font script="Hant" typeface="\u65B0\u7D30\u660E\u9AD4"/>';
                o[o.length] = '<a:font script="Arab" typeface="Times New Roman"/>';
                o[o.length] = '<a:font script="Hebr" typeface="Times New Roman"/>';
                o[o.length] = '<a:font script="Thai" typeface="Tahoma"/>';
                o[o.length] = '<a:font script="Ethi" typeface="Nyala"/>';
                o[o.length] = '<a:font script="Beng" typeface="Vrinda"/>';
                o[o.length] = '<a:font script="Gujr" typeface="Shruti"/>';
                o[o.length] = '<a:font script="Khmr" typeface="MoolBoran"/>';
                o[o.length] = '<a:font script="Knda" typeface="Tunga"/>';
                o[o.length] = '<a:font script="Guru" typeface="Raavi"/>';
                o[o.length] = '<a:font script="Cans" typeface="Euphemia"/>';
                o[o.length] = '<a:font script="Cher" typeface="Plantagenet Cherokee"/>';
                o[o.length] = '<a:font script="Yiii" typeface="Microsoft Yi Baiti"/>';
                o[o.length] = '<a:font script="Tibt" typeface="Microsoft Himalaya"/>';
                o[o.length] = '<a:font script="Thaa" typeface="MV Boli"/>';
                o[o.length] = '<a:font script="Deva" typeface="Mangal"/>';
                o[o.length] = '<a:font script="Telu" typeface="Gautami"/>';
                o[o.length] = '<a:font script="Taml" typeface="Latha"/>';
                o[o.length] = '<a:font script="Syrc" typeface="Estrangelo Edessa"/>';
                o[o.length] = '<a:font script="Orya" typeface="Kalinga"/>';
                o[o.length] = '<a:font script="Mlym" typeface="Kartika"/>';
                o[o.length] = '<a:font script="Laoo" typeface="DokChampa"/>';
                o[o.length] = '<a:font script="Sinh" typeface="Iskoola Pota"/>';
                o[o.length] = '<a:font script="Mong" typeface="Mongolian Baiti"/>';
                o[o.length] = '<a:font script="Viet" typeface="Times New Roman"/>';
                o[o.length] = '<a:font script="Uigh" typeface="Microsoft Uighur"/>';
                o[o.length] = '<a:font script="Geor" typeface="Sylfaen"/>';
                o[o.length] = '</a:majorFont>';
                o[o.length] = '<a:minorFont>';
                o[o.length] = '<a:latin typeface="Calibri"/>';
                o[o.length] = '<a:ea typeface=""/>';
                o[o.length] = '<a:cs typeface=""/>';
                o[o.length] =
                    '<a:font script="Jpan" typeface="\uFF2D\uFF33 \uFF30\u30B4\u30B7\u30C3\u30AF"/>';
                o[o.length] = '<a:font script="Hang" typeface="\uB9D1\uC740 \uACE0\uB515"/>';
                o[o.length] = '<a:font script="Hans" typeface="\u5B8B\u4F53"/>';
                o[o.length] = '<a:font script="Hant" typeface="\u65B0\u7D30\u660E\u9AD4"/>';
                o[o.length] = '<a:font script="Arab" typeface="Arial"/>';
                o[o.length] = '<a:font script="Hebr" typeface="Arial"/>';
                o[o.length] = '<a:font script="Thai" typeface="Tahoma"/>';
                o[o.length] = '<a:font script="Ethi" typeface="Nyala"/>';
                o[o.length] = '<a:font script="Beng" typeface="Vrinda"/>';
                o[o.length] = '<a:font script="Gujr" typeface="Shruti"/>';
                o[o.length] = '<a:font script="Khmr" typeface="DaunPenh"/>';
                o[o.length] = '<a:font script="Knda" typeface="Tunga"/>';
                o[o.length] = '<a:font script="Guru" typeface="Raavi"/>';
                o[o.length] = '<a:font script="Cans" typeface="Euphemia"/>';
                o[o.length] = '<a:font script="Cher" typeface="Plantagenet Cherokee"/>';
                o[o.length] = '<a:font script="Yiii" typeface="Microsoft Yi Baiti"/>';
                o[o.length] = '<a:font script="Tibt" typeface="Microsoft Himalaya"/>';
                o[o.length] = '<a:font script="Thaa" typeface="MV Boli"/>';
                o[o.length] = '<a:font script="Deva" typeface="Mangal"/>';
                o[o.length] = '<a:font script="Telu" typeface="Gautami"/>';
                o[o.length] = '<a:font script="Taml" typeface="Latha"/>';
                o[o.length] = '<a:font script="Syrc" typeface="Estrangelo Edessa"/>';
                o[o.length] = '<a:font script="Orya" typeface="Kalinga"/>';
                o[o.length] = '<a:font script="Mlym" typeface="Kartika"/>';
                o[o.length] = '<a:font script="Laoo" typeface="DokChampa"/>';
                o[o.length] = '<a:font script="Sinh" typeface="Iskoola Pota"/>';
                o[o.length] = '<a:font script="Mong" typeface="Mongolian Baiti"/>';
                o[o.length] = '<a:font script="Viet" typeface="Arial"/>';
                o[o.length] = '<a:font script="Uigh" typeface="Microsoft Uighur"/>';
                o[o.length] = '<a:font script="Geor" typeface="Sylfaen"/>';
                o[o.length] = '</a:minorFont>';
                o[o.length] = '</a:fontScheme>';
                o[o.length] = '<a:fmtScheme name="Office">';
                o[o.length] = '<a:fillStyleLst>';
                o[o.length] = '<a:solidFill><a:schemeClr val="phClr"/></a:solidFill>';
                o[o.length] = '<a:gradFill rotWithShape="1">';
                o[o.length] = '<a:gsLst>';
                o[o.length] =
                    '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="50000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
                o[o.length] =
                    '<a:gs pos="35000"><a:schemeClr val="phClr"><a:tint val="37000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
                o[o.length] =
                    '<a:gs pos="100000"><a:schemeClr val="phClr"><a:tint val="15000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
                o[o.length] = '</a:gsLst>';
                o[o.length] = '<a:lin ang="16200000" scaled="1"/>';
                o[o.length] = '</a:gradFill>';
                o[o.length] = '<a:gradFill rotWithShape="1">';
                o[o.length] = '<a:gsLst>';
                o[o.length] =
                    '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="100000"/><a:shade val="100000"/><a:satMod val="130000"/></a:schemeClr></a:gs>';
                o[o.length] =
                    '<a:gs pos="100000"><a:schemeClr val="phClr"><a:tint val="50000"/><a:shade val="100000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
                o[o.length] = '</a:gsLst>';
                o[o.length] = '<a:lin ang="16200000" scaled="0"/>';
                o[o.length] = '</a:gradFill>';
                o[o.length] = '</a:fillStyleLst>';
                o[o.length] = '<a:lnStyleLst>';
                o[o.length] =
                    '<a:ln w="9525" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"><a:shade val="95000"/><a:satMod val="105000"/></a:schemeClr></a:solidFill><a:prstDash val="solid"/></a:ln>';
                o[o.length] =
                    '<a:ln w="25400" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"/></a:solidFill><a:prstDash val="solid"/></a:ln>';
                o[o.length] =
                    '<a:ln w="38100" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"/></a:solidFill><a:prstDash val="solid"/></a:ln>';
                o[o.length] = '</a:lnStyleLst>';
                o[o.length] = '<a:effectStyleLst>';
                o[o.length] = '<a:effectStyle>';
                o[o.length] = '<a:effectLst>';
                o[o.length] =
                    '<a:outerShdw blurRad="40000" dist="20000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="38000"/></a:srgbClr></a:outerShdw>';
                o[o.length] = '</a:effectLst>';
                o[o.length] = '</a:effectStyle>';
                o[o.length] = '<a:effectStyle>';
                o[o.length] = '<a:effectLst>';
                o[o.length] =
                    '<a:outerShdw blurRad="40000" dist="23000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="35000"/></a:srgbClr></a:outerShdw>';
                o[o.length] = '</a:effectLst>';
                o[o.length] = '</a:effectStyle>';
                o[o.length] = '<a:effectStyle>';
                o[o.length] = '<a:effectLst>';
                o[o.length] =
                    '<a:outerShdw blurRad="40000" dist="23000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="35000"/></a:srgbClr></a:outerShdw>';
                o[o.length] = '</a:effectLst>';
                o[o.length] =
                    '<a:scene3d><a:camera prst="orthographicFront"><a:rot lat="0" lon="0" rev="0"/></a:camera><a:lightRig rig="threePt" dir="t"><a:rot lat="0" lon="0" rev="1200000"/></a:lightRig></a:scene3d>';
                o[o.length] = '<a:sp3d><a:bevelT w="63500" h="25400"/></a:sp3d>';
                o[o.length] = '</a:effectStyle>';
                o[o.length] = '</a:effectStyleLst>';
                o[o.length] = '<a:bgFillStyleLst>';
                o[o.length] = '<a:solidFill><a:schemeClr val="phClr"/></a:solidFill>';
                o[o.length] = '<a:gradFill rotWithShape="1">';
                o[o.length] = '<a:gsLst>';
                o[o.length] =
                    '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="40000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
                o[o.length] =
                    '<a:gs pos="40000"><a:schemeClr val="phClr"><a:tint val="45000"/><a:shade val="99000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
                o[o.length] =
                    '<a:gs pos="100000"><a:schemeClr val="phClr"><a:shade val="20000"/><a:satMod val="255000"/></a:schemeClr></a:gs>';
                o[o.length] = '</a:gsLst>';
                o[o.length] =
                    '<a:path path="circle"><a:fillToRect l="50000" t="-80000" r="50000" b="180000"/></a:path>';
                o[o.length] = '</a:gradFill>';
                o[o.length] = '<a:gradFill rotWithShape="1">';
                o[o.length] = '<a:gsLst>';
                o[o.length] =
                    '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="80000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
                o[o.length] =
                    '<a:gs pos="100000"><a:schemeClr val="phClr"><a:shade val="30000"/><a:satMod val="200000"/></a:schemeClr></a:gs>';
                o[o.length] = '</a:gsLst>';
                o[o.length] =
                    '<a:path path="circle"><a:fillToRect l="50000" t="50000" r="50000" b="50000"/></a:path>';
                o[o.length] = '</a:gradFill>';
                o[o.length] = '</a:bgFillStyleLst>';
                o[o.length] = '</a:fmtScheme>';
                o[o.length] = '</a:themeElements>';
                o[o.length] = '<a:objectDefaults>';
                o[o.length] = '<a:spDef>';
                o[o.length] =
                    '<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx="1"><a:schemeClr val="accent1"/></a:lnRef><a:fillRef idx="3"><a:schemeClr val="accent1"/></a:fillRef><a:effectRef idx="2"><a:schemeClr val="accent1"/></a:effectRef><a:fontRef idx="minor"><a:schemeClr val="lt1"/></a:fontRef></a:style>';
                o[o.length] = '</a:spDef>';
                o[o.length] = '<a:lnDef>';
                o[o.length] =
                    '<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx="2"><a:schemeClr val="accent1"/></a:lnRef><a:fillRef idx="0"><a:schemeClr val="accent1"/></a:fillRef><a:effectRef idx="1"><a:schemeClr val="accent1"/></a:effectRef><a:fontRef idx="minor"><a:schemeClr val="tx1"/></a:fontRef></a:style>';
                o[o.length] = '</a:lnDef>';
                o[o.length] = '</a:objectDefaults>';
                o[o.length] = '<a:extraClrSchemeLst/>';
                o[o.length] = '</a:theme>';
                return o.join('');
            }
            function parse_Theme(blob, length, opts) {
                var end2 = blob.l + length;
                var dwThemeVersion = blob.read_shift(4);
                if (dwThemeVersion === 124226) return;
                if (!opts.cellStyles) {
                    blob.l = end2;
                    return;
                }
                var data2 = blob.slice(blob.l);
                blob.l = end2;
                var zip;
                try {
                    zip = zip_read(data2, { type: 'array' });
                } catch (e2) {
                    return;
                }
                var themeXML = getzipstr(zip, 'theme/theme/theme1.xml', true);
                if (!themeXML) return;
                return parse_theme_xml(themeXML, opts);
            }
            function parse_ColorTheme(blob) {
                return blob.read_shift(4);
            }
            function parse_FullColorExt(blob) {
                var o = {};
                o.xclrType = blob.read_shift(2);
                o.nTintShade = blob.read_shift(2);
                switch (o.xclrType) {
                    case 0:
                        blob.l += 4;
                        break;
                    case 1:
                        o.xclrValue = parse_IcvXF(blob, 4);
                        break;
                    case 2:
                        o.xclrValue = parse_LongRGBA(blob, 4);
                        break;
                    case 3:
                        o.xclrValue = parse_ColorTheme(blob, 4);
                        break;
                    case 4:
                        blob.l += 4;
                        break;
                }
                blob.l += 8;
                return o;
            }
            function parse_IcvXF(blob, length) {
                return parsenoop(blob, length);
            }
            function parse_XFExtGradient(blob, length) {
                return parsenoop(blob, length);
            }
            function parse_ExtProp(blob) {
                var extType = blob.read_shift(2);
                var cb = blob.read_shift(2) - 4;
                var o = [extType];
                switch (extType) {
                    case 4:
                    case 5:
                    case 7:
                    case 8:
                    case 9:
                    case 10:
                    case 11:
                    case 13:
                        o[1] = parse_FullColorExt(blob, cb);
                        break;
                    case 6:
                        o[1] = parse_XFExtGradient(blob, cb);
                        break;
                    case 14:
                    case 15:
                        o[1] = blob.read_shift(cb === 1 ? 1 : 2);
                        break;
                    default:
                        throw new Error('Unrecognized ExtProp type: ' + extType + ' ' + cb);
                }
                return o;
            }
            function parse_XFExt(blob, length) {
                var end2 = blob.l + length;
                blob.l += 2;
                var ixfe = blob.read_shift(2);
                blob.l += 2;
                var cexts = blob.read_shift(2);
                var ext = [];
                while (cexts-- > 0) ext.push(parse_ExtProp(blob, end2 - blob.l));
                return { ixfe, ext };
            }
            function update_xfext(xf, xfext) {
                xfext.forEach(function (xfe) {
                    switch (xfe[0]) {
                        case 4:
                            break;
                        case 5:
                            break;
                        case 6:
                            break;
                        case 7:
                            break;
                        case 8:
                            break;
                        case 9:
                            break;
                        case 10:
                            break;
                        case 11:
                            break;
                        case 13:
                            break;
                        case 14:
                            break;
                        case 15:
                            break;
                    }
                });
            }
            function parse_BrtMdtinfo(data2, length) {
                return {
                    flags: data2.read_shift(4),
                    version: data2.read_shift(4),
                    name: parse_XLWideString(data2, length - 8),
                };
            }
            function write_BrtMdtinfo(data2) {
                var o = new_buf(12 + 2 * data2.name.length);
                o.write_shift(4, data2.flags);
                o.write_shift(4, data2.version);
                write_XLWideString(data2.name, o);
                return o.slice(0, o.l);
            }
            function parse_BrtMdb(data2) {
                var out = [];
                var cnt = data2.read_shift(4);
                while (cnt-- > 0) out.push([data2.read_shift(4), data2.read_shift(4)]);
                return out;
            }
            function write_BrtMdb(mdb) {
                var o = new_buf(4 + 8 * mdb.length);
                o.write_shift(4, mdb.length);
                for (var i2 = 0; i2 < mdb.length; ++i2) {
                    o.write_shift(4, mdb[i2][0]);
                    o.write_shift(4, mdb[i2][1]);
                }
                return o;
            }
            function write_BrtBeginEsfmd(cnt, name) {
                var o = new_buf(8 + 2 * name.length);
                o.write_shift(4, cnt);
                write_XLWideString(name, o);
                return o.slice(0, o.l);
            }
            function parse_BrtBeginEsmdb(data2) {
                data2.l += 4;
                return data2.read_shift(4) != 0;
            }
            function write_BrtBeginEsmdb(cnt, cm) {
                var o = new_buf(8);
                o.write_shift(4, cnt);
                o.write_shift(4, cm ? 1 : 0);
                return o;
            }
            function parse_xlmeta_bin(data2, name, _opts) {
                var out = { Types: [], Cell: [], Value: [] };
                var opts = _opts || {};
                var state = [];
                var pass = false;
                var metatype = 2;
                recordhopper(data2, function (val2, R, RT) {
                    switch (RT) {
                        case 335:
                            out.Types.push({ name: val2.name });
                            break;
                        case 51:
                            val2.forEach(function (r2) {
                                if (metatype == 1)
                                    out.Cell.push({
                                        type: out.Types[r2[0] - 1].name,
                                        index: r2[1],
                                    });
                                else if (metatype == 0)
                                    out.Value.push({
                                        type: out.Types[r2[0] - 1].name,
                                        index: r2[1],
                                    });
                            });
                            break;
                        case 337:
                            metatype = val2 ? 1 : 0;
                            break;
                        case 338:
                            metatype = 2;
                            break;
                        case 35:
                            state.push(RT);
                            pass = true;
                            break;
                        case 36:
                            state.pop();
                            pass = false;
                            break;
                        default:
                            if (R.T) {
                            } else if (!pass || (opts.WTF && state[state.length - 1] != 35))
                                throw new Error('Unexpected record 0x' + RT.toString(16));
                    }
                });
                return out;
            }
            function write_xlmeta_bin() {
                var ba = buf_array();
                write_record(ba, 332);
                write_record(ba, 334, write_UInt32LE(1));
                write_record(
                    ba,
                    335,
                    write_BrtMdtinfo({
                        name: 'XLDAPR',
                        version: 12e4,
                        flags: 3496657072,
                    }),
                );
                write_record(ba, 336);
                write_record(ba, 339, write_BrtBeginEsfmd(1, 'XLDAPR'));
                write_record(ba, 52);
                write_record(ba, 35, write_UInt32LE(514));
                write_record(ba, 4096, write_UInt32LE(0));
                write_record(ba, 4097, writeuint16(1));
                write_record(ba, 36);
                write_record(ba, 53);
                write_record(ba, 340);
                write_record(ba, 337, write_BrtBeginEsmdb(1, true));
                write_record(ba, 51, write_BrtMdb([[1, 0]]));
                write_record(ba, 338);
                write_record(ba, 333);
                return ba.end();
            }
            function parse_xlmeta_xml(data2, name, opts) {
                var out = { Types: [], Cell: [], Value: [] };
                if (!data2) return out;
                var pass = false;
                var metatype = 2;
                var lastmeta;
                data2.replace(tagregex, function (x2) {
                    var y = parsexmltag(x2);
                    switch (strip_ns(y[0])) {
                        case '<?xml':
                            break;
                        case '<metadata':
                        case '</metadata>':
                            break;
                        case '<metadataTypes':
                        case '</metadataTypes>':
                            break;
                        case '<metadataType':
                            out.Types.push({ name: y.name });
                            break;
                        case '</metadataType>':
                            break;
                        case '<futureMetadata':
                            for (var j = 0; j < out.Types.length; ++j)
                                if (out.Types[j].name == y.name) lastmeta = out.Types[j];
                            break;
                        case '</futureMetadata>':
                            break;
                        case '<bk>':
                            break;
                        case '</bk>':
                            break;
                        case '<rc':
                            if (metatype == 1)
                                out.Cell.push({ type: out.Types[y.t - 1].name, index: +y.v });
                            else if (metatype == 0)
                                out.Value.push({ type: out.Types[y.t - 1].name, index: +y.v });
                            break;
                        case '</rc>':
                            break;
                        case '<cellMetadata':
                            metatype = 1;
                            break;
                        case '</cellMetadata>':
                            metatype = 2;
                            break;
                        case '<valueMetadata':
                            metatype = 0;
                            break;
                        case '</valueMetadata>':
                            metatype = 2;
                            break;
                        case '<extLst':
                        case '<extLst>':
                        case '</extLst>':
                        case '<extLst/>':
                            break;
                        case '<ext':
                            pass = true;
                            break;
                        case '</ext>':
                            pass = false;
                            break;
                        case '<rvb':
                            if (!lastmeta) break;
                            if (!lastmeta.offsets) lastmeta.offsets = [];
                            lastmeta.offsets.push(+y.i);
                            break;
                        default:
                            if (!pass && opts.WTF)
                                throw new Error('unrecognized ' + y[0] + ' in metadata');
                    }
                    return x2;
                });
                return out;
            }
            function write_xlmeta_xml() {
                var o = [XML_HEADER];
                o.push(
                    '<metadata xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main" xmlns:xlrd="http://schemas.microsoft.com/office/spreadsheetml/2017/richdata" xmlns:xda="http://schemas.microsoft.com/office/spreadsheetml/2017/dynamicarray">\n  <metadataTypes count="1">\n    <metadataType name="XLDAPR" minSupportedVersion="120000" copy="1" pasteAll="1" pasteValues="1" merge="1" splitFirst="1" rowColShift="1" clearFormats="1" clearComments="1" assign="1" coerce="1" cellMeta="1"/>\n  </metadataTypes>\n  <futureMetadata name="XLDAPR" count="1">\n    <bk>\n      <extLst>\n        <ext uri="{bdbb8cdc-fa1e-496e-a857-3c3f30c029c3}">\n          <xda:dynamicArrayProperties fDynamic="1" fCollapsed="0"/>\n        </ext>\n      </extLst>\n    </bk>\n  </futureMetadata>\n  <cellMetadata count="1">\n    <bk>\n      <rc t="1" v="0"/>\n    </bk>\n  </cellMetadata>\n</metadata>',
                );
                return o.join('');
            }
            function parse_cc_xml(data2) {
                var d = [];
                if (!data2) return d;
                var i2 = 1;
                (data2.match(tagregex) || []).forEach(function (x2) {
                    var y = parsexmltag(x2);
                    switch (y[0]) {
                        case '<?xml':
                            break;
                        case '<calcChain':
                        case '<calcChain>':
                        case '</calcChain>':
                            break;
                        case '<c':
                            delete y[0];
                            if (y.i) i2 = y.i;
                            else y.i = i2;
                            d.push(y);
                            break;
                    }
                });
                return d;
            }
            function parse_BrtCalcChainItem$(data2) {
                var out = {};
                out.i = data2.read_shift(4);
                var cell = {};
                cell.r = data2.read_shift(4);
                cell.c = data2.read_shift(4);
                out.r = encode_cell(cell);
                var flags = data2.read_shift(1);
                if (flags & 2) out.l = '1';
                if (flags & 8) out.a = '1';
                return out;
            }
            function parse_cc_bin(data2, name, opts) {
                var out = [];
                var pass = false;
                recordhopper(data2, function hopper_cc(val2, R, RT) {
                    switch (RT) {
                        case 63:
                            out.push(val2);
                            break;
                        default:
                            if (R.T) {
                            } else if (!pass || opts.WTF)
                                throw new Error('Unexpected record 0x' + RT.toString(16));
                    }
                });
                return out;
            }
            function parse_xlink_xml() {}
            function parse_xlink_bin(data2, rel, name, _opts) {
                if (!data2) return data2;
                var opts = _opts || {};
                var pass = false,
                    end2 = false;
                recordhopper(
                    data2,
                    function xlink_parse(val2, R, RT) {
                        if (end2) return;
                        switch (RT) {
                            case 359:
                            case 363:
                            case 364:
                            case 366:
                            case 367:
                            case 368:
                            case 369:
                            case 370:
                            case 371:
                            case 472:
                            case 577:
                            case 578:
                            case 579:
                            case 580:
                            case 581:
                            case 582:
                            case 583:
                            case 584:
                            case 585:
                            case 586:
                            case 587:
                                break;
                            case 35:
                                pass = true;
                                break;
                            case 36:
                                pass = false;
                                break;
                            default:
                                if (R.T) {
                                } else if (!pass || opts.WTF)
                                    throw new Error('Unexpected record 0x' + RT.toString(16));
                        }
                    },
                    opts,
                );
            }
            function parse_drawing(data2, rels) {
                if (!data2) return '??';
                var id = (data2.match(/<c:chart [^>]*r:id="([^"]*)"/) || ['', ''])[1];
                return rels['!id'][id].Target;
            }
            var _shapeid = 1024;
            function write_comments_vml(rId, comments) {
                var csize = [21600, 21600];
                var bbox = ['m0,0l0', csize[1], csize[0], csize[1], csize[0], '0xe'].join(',');
                var o = [
                    writextag('xml', null, {
                        'xmlns:v': XLMLNS.v,
                        'xmlns:o': XLMLNS.o,
                        'xmlns:x': XLMLNS.x,
                        'xmlns:mv': XLMLNS.mv,
                    }).replace(/\/>/, '>'),
                    writextag(
                        'o:shapelayout',
                        writextag('o:idmap', null, { 'v:ext': 'edit', data: rId }),
                        { 'v:ext': 'edit' },
                    ),
                    writextag(
                        'v:shapetype',
                        [
                            writextag('v:stroke', null, { joinstyle: 'miter' }),
                            writextag('v:path', null, {
                                gradientshapeok: 't',
                                'o:connecttype': 'rect',
                            }),
                        ].join(''),
                        { id: '_x0000_t202', 'o:spt': 202, coordsize: csize.join(','), path: bbox },
                    ),
                ];
                while (_shapeid < rId * 1e3) _shapeid += 1e3;
                comments.forEach(function (x2) {
                    var c = decode_cell(x2[0]);
                    var fillopts = { color2: '#BEFF82', type: 'gradient' };
                    if (fillopts.type == 'gradient') fillopts.angle = '-180';
                    var fillparm =
                        fillopts.type == 'gradient'
                            ? writextag('o:fill', null, {
                                  type: 'gradientUnscaled',
                                  'v:ext': 'view',
                              })
                            : null;
                    var fillxml = writextag('v:fill', fillparm, fillopts);
                    var shadata = { on: 't', obscured: 't' };
                    ++_shapeid;
                    o = o.concat([
                        '<v:shape' +
                            wxt_helper({
                                id: '_x0000_s' + _shapeid,
                                type: '#_x0000_t202',
                                style:
                                    'position:absolute; margin-left:80pt;margin-top:5pt;width:104pt;height:64pt;z-index:10' +
                                    (x2[1].hidden ? ';visibility:hidden' : ''),
                                fillcolor: '#ECFAD4',
                                strokecolor: '#edeaa1',
                            }) +
                            '>',
                        fillxml,
                        writextag('v:shadow', null, shadata),
                        writextag('v:path', null, { 'o:connecttype': 'none' }),
                        '<v:textbox><div style="text-align:left"></div></v:textbox>',
                        '<x:ClientData ObjectType="Note">',
                        '<x:MoveWithCells/>',
                        '<x:SizeWithCells/>',
                        /* Part 4 19.4.2.3 Anchor (Anchor) */
                        writetag(
                            'x:Anchor',
                            [c.c + 1, 0, c.r + 1, 0, c.c + 3, 20, c.r + 5, 20].join(','),
                        ),
                        writetag('x:AutoFill', 'False'),
                        writetag('x:Row', String(c.r)),
                        writetag('x:Column', String(c.c)),
                        x2[1].hidden ? '' : '<x:Visible/>',
                        '</x:ClientData>',
                        '</v:shape>',
                    ]);
                });
                o.push('</xml>');
                return o.join('');
            }
            function sheet_insert_comments(sheet, comments, threaded, people) {
                var dense = Array.isArray(sheet);
                var cell;
                comments.forEach(function (comment) {
                    var r2 = decode_cell(comment.ref);
                    if (dense) {
                        if (!sheet[r2.r]) sheet[r2.r] = [];
                        cell = sheet[r2.r][r2.c];
                    } else cell = sheet[comment.ref];
                    if (!cell) {
                        cell = { t: 'z' };
                        if (dense) sheet[r2.r][r2.c] = cell;
                        else sheet[comment.ref] = cell;
                        var range = safe_decode_range(sheet['!ref'] || 'BDWGO1000001:A1');
                        if (range.s.r > r2.r) range.s.r = r2.r;
                        if (range.e.r < r2.r) range.e.r = r2.r;
                        if (range.s.c > r2.c) range.s.c = r2.c;
                        if (range.e.c < r2.c) range.e.c = r2.c;
                        var encoded = encode_range(range);
                        if (encoded !== sheet['!ref']) sheet['!ref'] = encoded;
                    }
                    if (!cell.c) cell.c = [];
                    var o = { a: comment.author, t: comment.t, r: comment.r, T: threaded };
                    if (comment.h) o.h = comment.h;
                    for (var i2 = cell.c.length - 1; i2 >= 0; --i2) {
                        if (!threaded && cell.c[i2].T) return;
                        if (threaded && !cell.c[i2].T) cell.c.splice(i2, 1);
                    }
                    if (threaded && people)
                        for (i2 = 0; i2 < people.length; ++i2) {
                            if (o.a == people[i2].id) {
                                o.a = people[i2].name || o.a;
                                break;
                            }
                        }
                    cell.c.push(o);
                });
            }
            function parse_comments_xml(data2, opts) {
                if (data2.match(/<(?:\w+:)?comments *\/>/)) return [];
                var authors = [];
                var commentList = [];
                var authtag = data2.match(/<(?:\w+:)?authors>([\s\S]*)<\/(?:\w+:)?authors>/);
                if (authtag && authtag[1])
                    authtag[1].split(/<\/\w*:?author>/).forEach(function (x2) {
                        if (x2 === '' || x2.trim() === '') return;
                        var a = x2.match(/<(?:\w+:)?author[^>]*>(.*)/);
                        if (a) authors.push(a[1]);
                    });
                var cmnttag = data2.match(
                    /<(?:\w+:)?commentList>([\s\S]*)<\/(?:\w+:)?commentList>/,
                );
                if (cmnttag && cmnttag[1])
                    cmnttag[1].split(/<\/\w*:?comment>/).forEach(function (x2) {
                        if (x2 === '' || x2.trim() === '') return;
                        var cm = x2.match(/<(?:\w+:)?comment[^>]*>/);
                        if (!cm) return;
                        var y = parsexmltag(cm[0]);
                        var comment = {
                            author: (y.authorId && authors[y.authorId]) || 'sheetjsghost',
                            ref: y.ref,
                            guid: y.guid,
                        };
                        var cell = decode_cell(y.ref);
                        if (opts.sheetRows && opts.sheetRows <= cell.r) return;
                        var textMatch = x2.match(/<(?:\w+:)?text>([\s\S]*)<\/(?:\w+:)?text>/);
                        var rt = (!!textMatch && !!textMatch[1] && parse_si(textMatch[1])) || {
                            r: '',
                            t: '',
                            h: '',
                        };
                        comment.r = rt.r;
                        if (rt.r == '<t></t>') rt.t = rt.h = '';
                        comment.t = (rt.t || '').replace(/\r\n/g, '\n').replace(/\r/g, '\n');
                        if (opts.cellHTML) comment.h = rt.h;
                        commentList.push(comment);
                    });
                return commentList;
            }
            function write_comments_xml(data2) {
                var o = [XML_HEADER, writextag('comments', null, { xmlns: XMLNS_main[0] })];
                var iauthor = [];
                o.push('<authors>');
                data2.forEach(function (x2) {
                    x2[1].forEach(function (w) {
                        var a = escapexml(w.a);
                        if (iauthor.indexOf(a) == -1) {
                            iauthor.push(a);
                            o.push('<author>' + a + '</author>');
                        }
                        if (w.T && w.ID && iauthor.indexOf('tc=' + w.ID) == -1) {
                            iauthor.push('tc=' + w.ID);
                            o.push('<author>tc=' + w.ID + '</author>');
                        }
                    });
                });
                if (iauthor.length == 0) {
                    iauthor.push('SheetJ5');
                    o.push('<author>SheetJ5</author>');
                }
                o.push('</authors>');
                o.push('<commentList>');
                data2.forEach(function (d) {
                    var lastauthor = 0,
                        ts = [];
                    if (d[1][0] && d[1][0].T && d[1][0].ID)
                        lastauthor = iauthor.indexOf('tc=' + d[1][0].ID);
                    else
                        d[1].forEach(function (c) {
                            if (c.a) lastauthor = iauthor.indexOf(escapexml(c.a));
                            ts.push(c.t || '');
                        });
                    o.push('<comment ref="' + d[0] + '" authorId="' + lastauthor + '"><text>');
                    if (ts.length <= 1) o.push(writetag('t', escapexml(ts[0] || '')));
                    else {
                        var t2 = 'Comment:\n    ' + ts[0] + '\n';
                        for (var i2 = 1; i2 < ts.length; ++i2) t2 += 'Reply:\n    ' + ts[i2] + '\n';
                        o.push(writetag('t', escapexml(t2)));
                    }
                    o.push('</text></comment>');
                });
                o.push('</commentList>');
                if (o.length > 2) {
                    o[o.length] = '</comments>';
                    o[1] = o[1].replace('/>', '>');
                }
                return o.join('');
            }
            function parse_tcmnt_xml(data2, opts) {
                var out = [];
                var pass = false,
                    comment = {},
                    tidx = 0;
                data2.replace(tagregex, function xml_tcmnt(x2, idx) {
                    var y = parsexmltag(x2);
                    switch (strip_ns(y[0])) {
                        case '<?xml':
                            break;
                        case '<ThreadedComments':
                            break;
                        case '</ThreadedComments>':
                            break;
                        case '<threadedComment':
                            comment = { author: y.personId, guid: y.id, ref: y.ref, T: 1 };
                            break;
                        case '</threadedComment>':
                            if (comment.t != null) out.push(comment);
                            break;
                        case '<text>':
                        case '<text':
                            tidx = idx + x2.length;
                            break;
                        case '</text>':
                            comment.t = data2
                                .slice(tidx, idx)
                                .replace(/\r\n/g, '\n')
                                .replace(/\r/g, '\n');
                            break;
                        case '<mentions':
                        case '<mentions>':
                            pass = true;
                            break;
                        case '</mentions>':
                            pass = false;
                            break;
                        case '<extLst':
                        case '<extLst>':
                        case '</extLst>':
                        case '<extLst/>':
                            break;
                        case '<ext':
                            pass = true;
                            break;
                        case '</ext>':
                            pass = false;
                            break;
                        default:
                            if (!pass && opts.WTF)
                                throw new Error('unrecognized ' + y[0] + ' in threaded comments');
                    }
                    return x2;
                });
                return out;
            }
            function write_tcmnt_xml(comments, people, opts) {
                var o = [
                    XML_HEADER,
                    writextag('ThreadedComments', null, { xmlns: XMLNS.TCMNT }).replace(
                        /[\/]>/,
                        '>',
                    ),
                ];
                comments.forEach(function (carr) {
                    var rootid = '';
                    (carr[1] || []).forEach(function (c, idx) {
                        if (!c.T) {
                            delete c.ID;
                            return;
                        }
                        if (c.a && people.indexOf(c.a) == -1) people.push(c.a);
                        var tcopts = {
                            ref: carr[0],
                            id:
                                '{54EE7951-7262-4200-6969-' +
                                ('000000000000' + opts.tcid++).slice(-12) +
                                '}',
                        };
                        if (idx == 0) rootid = tcopts.id;
                        else tcopts.parentId = rootid;
                        c.ID = tcopts.id;
                        if (c.a)
                            tcopts.personId =
                                '{54EE7950-7262-4200-6969-' +
                                ('000000000000' + people.indexOf(c.a)).slice(-12) +
                                '}';
                        o.push(writextag('threadedComment', writetag('text', c.t || ''), tcopts));
                    });
                });
                o.push('</ThreadedComments>');
                return o.join('');
            }
            function parse_people_xml(data2, opts) {
                var out = [];
                var pass = false;
                data2.replace(tagregex, function xml_tcmnt(x2) {
                    var y = parsexmltag(x2);
                    switch (strip_ns(y[0])) {
                        case '<?xml':
                            break;
                        case '<personList':
                            break;
                        case '</personList>':
                            break;
                        case '<person':
                            out.push({ name: y.displayname, id: y.id });
                            break;
                        case '</person>':
                            break;
                        case '<extLst':
                        case '<extLst>':
                        case '</extLst>':
                        case '<extLst/>':
                            break;
                        case '<ext':
                            pass = true;
                            break;
                        case '</ext>':
                            pass = false;
                            break;
                        default:
                            if (!pass && opts.WTF)
                                throw new Error('unrecognized ' + y[0] + ' in threaded comments');
                    }
                    return x2;
                });
                return out;
            }
            function write_people_xml(people) {
                var o = [
                    XML_HEADER,
                    writextag('personList', null, {
                        xmlns: XMLNS.TCMNT,
                        'xmlns:x': XMLNS_main[0],
                    }).replace(/[\/]>/, '>'),
                ];
                people.forEach(function (person, idx) {
                    o.push(
                        writextag('person', null, {
                            displayName: person,
                            id:
                                '{54EE7950-7262-4200-6969-' +
                                ('000000000000' + idx).slice(-12) +
                                '}',
                            userId: person,
                            providerId: 'None',
                        }),
                    );
                });
                o.push('</personList>');
                return o.join('');
            }
            function parse_BrtBeginComment(data2) {
                var out = {};
                out.iauthor = data2.read_shift(4);
                var rfx = parse_UncheckedRfX(data2, 16);
                out.rfx = rfx.s;
                out.ref = encode_cell(rfx.s);
                data2.l += 16;
                return out;
            }
            function write_BrtBeginComment(data2, o) {
                if (o == null) o = new_buf(36);
                o.write_shift(4, data2[1].iauthor);
                write_UncheckedRfX(data2[0], o);
                o.write_shift(4, 0);
                o.write_shift(4, 0);
                o.write_shift(4, 0);
                o.write_shift(4, 0);
                return o;
            }
            var parse_BrtCommentAuthor = parse_XLWideString;
            function write_BrtCommentAuthor(data2) {
                return write_XLWideString(data2.slice(0, 54));
            }
            function parse_comments_bin(data2, opts) {
                var out = [];
                var authors = [];
                var c = {};
                var pass = false;
                recordhopper(data2, function hopper_cmnt(val2, R, RT) {
                    switch (RT) {
                        case 632:
                            authors.push(val2);
                            break;
                        case 635:
                            c = val2;
                            break;
                        case 637:
                            c.t = val2.t;
                            c.h = val2.h;
                            c.r = val2.r;
                            break;
                        case 636:
                            c.author = authors[c.iauthor];
                            delete c.iauthor;
                            if (opts.sheetRows && c.rfx && opts.sheetRows <= c.rfx.r) break;
                            if (!c.t) c.t = '';
                            delete c.rfx;
                            out.push(c);
                            break;
                        case 3072:
                            break;
                        case 35:
                            pass = true;
                            break;
                        case 36:
                            pass = false;
                            break;
                        case 37:
                            break;
                        case 38:
                            break;
                        default:
                            if (R.T) {
                            } else if (!pass || opts.WTF)
                                throw new Error('Unexpected record 0x' + RT.toString(16));
                    }
                });
                return out;
            }
            function write_comments_bin(data2) {
                var ba = buf_array();
                var iauthor = [];
                write_record(
                    ba,
                    628,
                    /* BrtBeginComments */
                );
                write_record(
                    ba,
                    630,
                    /* BrtBeginCommentAuthors */
                );
                data2.forEach(function (comment) {
                    comment[1].forEach(function (c) {
                        if (iauthor.indexOf(c.a) > -1) return;
                        iauthor.push(c.a.slice(0, 54));
                        write_record(ba, 632, write_BrtCommentAuthor(c.a));
                    });
                });
                write_record(
                    ba,
                    631,
                    /* BrtEndCommentAuthors */
                );
                write_record(
                    ba,
                    633,
                    /* BrtBeginCommentList */
                );
                data2.forEach(function (comment) {
                    comment[1].forEach(function (c) {
                        c.iauthor = iauthor.indexOf(c.a);
                        var range = { s: decode_cell(comment[0]), e: decode_cell(comment[0]) };
                        write_record(ba, 635, write_BrtBeginComment([range, c]));
                        if (c.t && c.t.length > 0) write_record(ba, 637, write_BrtCommentText(c));
                        write_record(
                            ba,
                            636,
                            /* BrtEndComment */
                        );
                        delete c.iauthor;
                    });
                });
                write_record(
                    ba,
                    634,
                    /* BrtEndCommentList */
                );
                write_record(
                    ba,
                    629,
                    /* BrtEndComments */
                );
                return ba.end();
            }
            var CT_VBA = 'application/vnd.ms-office.vbaProject';
            function make_vba_xls(cfb) {
                var newcfb = CFB.utils.cfb_new({ root: 'R' });
                cfb.FullPaths.forEach(function (p, i2) {
                    if (p.slice(-1) === '/' || !p.match(/_VBA_PROJECT_CUR/)) return;
                    var newpath = p
                        .replace(/^[^\/]*/, 'R')
                        .replace(/\/_VBA_PROJECT_CUR\u0000*/, '');
                    CFB.utils.cfb_add(newcfb, newpath, cfb.FileIndex[i2].content);
                });
                return CFB.write(newcfb);
            }
            function fill_vba_xls(cfb, vba) {
                vba.FullPaths.forEach(function (p, i2) {
                    if (i2 == 0) return;
                    var newpath = p.replace(/[^\/]*[\/]/, '/_VBA_PROJECT_CUR/');
                    if (newpath.slice(-1) !== '/')
                        CFB.utils.cfb_add(cfb, newpath, vba.FileIndex[i2].content);
                });
            }
            var VBAFMTS = ['xlsb', 'xlsm', 'xlam', 'biff8', 'xla'];
            function parse_ds_bin() {
                return { '!type': 'dialog' };
            }
            function parse_ds_xml() {
                return { '!type': 'dialog' };
            }
            function parse_ms_bin() {
                return { '!type': 'macro' };
            }
            function parse_ms_xml() {
                return { '!type': 'macro' };
            }
            var rc_to_a1 = /* @__PURE__ */ (function () {
                var rcregex =
                    /(^|[^A-Za-z_])R(\[?-?\d+\]|[1-9]\d*|)C(\[?-?\d+\]|[1-9]\d*|)(?![A-Za-z0-9_])/g;
                var rcbase = { r: 0, c: 0 };
                function rcfunc($$, $1, $22, $32) {
                    var cRel = false,
                        rRel = false;
                    if ($22.length == 0) rRel = true;
                    else if ($22.charAt(0) == '[') {
                        rRel = true;
                        $22 = $22.slice(1, -1);
                    }
                    if ($32.length == 0) cRel = true;
                    else if ($32.charAt(0) == '[') {
                        cRel = true;
                        $32 = $32.slice(1, -1);
                    }
                    var R = $22.length > 0 ? parseInt($22, 10) | 0 : 0,
                        C = $32.length > 0 ? parseInt($32, 10) | 0 : 0;
                    if (cRel) C += rcbase.c;
                    else --C;
                    if (rRel) R += rcbase.r;
                    else --R;
                    return (
                        $1 + (cRel ? '' : '$') + encode_col(C) + (rRel ? '' : '$') + encode_row(R)
                    );
                }
                return function rc_to_a12(fstr, base) {
                    rcbase = base;
                    return fstr.replace(rcregex, rcfunc);
                };
            })();
            var crefregex =
                /(^|[^._A-Z0-9])([$]?)([A-Z]{1,2}|[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D])([$]?)(10[0-3]\d{4}|104[0-7]\d{3}|1048[0-4]\d{2}|10485[0-6]\d|104857[0-6]|[1-9]\d{0,5})(?![_.\(A-Za-z0-9])/g;
            var a1_to_rc = /* @__PURE__ */ (function () {
                return function a1_to_rc2(fstr, base) {
                    return fstr.replace(crefregex, function ($0, $1, $22, $32, $4, $5) {
                        var c = decode_col($32) - ($22 ? 0 : base.c);
                        var r2 = decode_row($5) - ($4 ? 0 : base.r);
                        var R = r2 == 0 ? '' : !$4 ? '[' + r2 + ']' : r2 + 1;
                        var C = c == 0 ? '' : !$22 ? '[' + c + ']' : c + 1;
                        return $1 + 'R' + R + 'C' + C;
                    });
                };
            })();
            function shift_formula_str(f3, delta) {
                return f3.replace(crefregex, function ($0, $1, $22, $32, $4, $5) {
                    return (
                        $1 +
                        ($22 == '$' ? $22 + $32 : encode_col(decode_col($32) + delta.c)) +
                        ($4 == '$' ? $4 + $5 : encode_row(decode_row($5) + delta.r))
                    );
                });
            }
            function shift_formula_xlsx(f3, range, cell) {
                var r2 = decode_range(range),
                    s2 = r2.s,
                    c = decode_cell(cell);
                var delta = { r: c.r - s2.r, c: c.c - s2.c };
                return shift_formula_str(f3, delta);
            }
            function fuzzyfmla(f3) {
                if (f3.length == 1) return false;
                return true;
            }
            function _xlfn(f3) {
                return f3.replace(/_xlfn\./g, '');
            }
            function parseread1(blob) {
                blob.l += 1;
                return;
            }
            function parse_ColRelU(blob, length) {
                var c = blob.read_shift(length == 1 ? 1 : 2);
                return [c & 16383, (c >> 14) & 1, (c >> 15) & 1];
            }
            function parse_RgceArea(blob, length, opts) {
                var w = 2;
                if (opts) {
                    if (opts.biff >= 2 && opts.biff <= 5)
                        return parse_RgceArea_BIFF2(blob, length, opts);
                    else if (opts.biff == 12) w = 4;
                }
                var r2 = blob.read_shift(w),
                    R = blob.read_shift(w);
                var c = parse_ColRelU(blob, 2);
                var C = parse_ColRelU(blob, 2);
                return {
                    s: { r: r2, c: c[0], cRel: c[1], rRel: c[2] },
                    e: { r: R, c: C[0], cRel: C[1], rRel: C[2] },
                };
            }
            function parse_RgceArea_BIFF2(blob) {
                var r2 = parse_ColRelU(blob, 2),
                    R = parse_ColRelU(blob, 2);
                var c = blob.read_shift(1);
                var C = blob.read_shift(1);
                return {
                    s: { r: r2[0], c, cRel: r2[1], rRel: r2[2] },
                    e: { r: R[0], c: C, cRel: R[1], rRel: R[2] },
                };
            }
            function parse_RgceAreaRel(blob, length, opts) {
                if (opts.biff < 8) return parse_RgceArea_BIFF2(blob, length, opts);
                var r2 = blob.read_shift(opts.biff == 12 ? 4 : 2),
                    R = blob.read_shift(opts.biff == 12 ? 4 : 2);
                var c = parse_ColRelU(blob, 2);
                var C = parse_ColRelU(blob, 2);
                return {
                    s: { r: r2, c: c[0], cRel: c[1], rRel: c[2] },
                    e: { r: R, c: C[0], cRel: C[1], rRel: C[2] },
                };
            }
            function parse_RgceLoc(blob, length, opts) {
                if (opts && opts.biff >= 2 && opts.biff <= 5)
                    return parse_RgceLoc_BIFF2(blob, length, opts);
                var r2 = blob.read_shift(opts && opts.biff == 12 ? 4 : 2);
                var c = parse_ColRelU(blob, 2);
                return { r: r2, c: c[0], cRel: c[1], rRel: c[2] };
            }
            function parse_RgceLoc_BIFF2(blob) {
                var r2 = parse_ColRelU(blob, 2);
                var c = blob.read_shift(1);
                return { r: r2[0], c, cRel: r2[1], rRel: r2[2] };
            }
            function parse_RgceElfLoc(blob) {
                var r2 = blob.read_shift(2);
                var c = blob.read_shift(2);
                return { r: r2, c: c & 255, fQuoted: !!(c & 16384), cRel: c >> 15, rRel: c >> 15 };
            }
            function parse_RgceLocRel(blob, length, opts) {
                var biff = opts && opts.biff ? opts.biff : 8;
                if (biff >= 2 && biff <= 5) return parse_RgceLocRel_BIFF2(blob, length, opts);
                var r2 = blob.read_shift(biff >= 12 ? 4 : 2);
                var cl = blob.read_shift(2);
                var cRel = (cl & 16384) >> 14,
                    rRel = (cl & 32768) >> 15;
                cl &= 16383;
                if (rRel == 1) while (r2 > 524287) r2 -= 1048576;
                if (cRel == 1) while (cl > 8191) cl = cl - 16384;
                return { r: r2, c: cl, cRel, rRel };
            }
            function parse_RgceLocRel_BIFF2(blob) {
                var rl = blob.read_shift(2);
                var c = blob.read_shift(1);
                var rRel = (rl & 32768) >> 15,
                    cRel = (rl & 16384) >> 14;
                rl &= 16383;
                if (rRel == 1 && rl >= 8192) rl = rl - 16384;
                if (cRel == 1 && c >= 128) c = c - 256;
                return { r: rl, c, cRel, rRel };
            }
            function parse_PtgArea(blob, length, opts) {
                var type = (blob[blob.l++] & 96) >> 5;
                var area = parse_RgceArea(blob, opts.biff >= 2 && opts.biff <= 5 ? 6 : 8, opts);
                return [type, area];
            }
            function parse_PtgArea3d(blob, length, opts) {
                var type = (blob[blob.l++] & 96) >> 5;
                var ixti = blob.read_shift(2, 'i');
                var w = 8;
                if (opts)
                    switch (opts.biff) {
                        case 5:
                            blob.l += 12;
                            w = 6;
                            break;
                        case 12:
                            w = 12;
                            break;
                    }
                var area = parse_RgceArea(blob, w, opts);
                return [type, ixti, area];
            }
            function parse_PtgAreaErr(blob, length, opts) {
                var type = (blob[blob.l++] & 96) >> 5;
                blob.l += opts && opts.biff > 8 ? 12 : opts.biff < 8 ? 6 : 8;
                return [type];
            }
            function parse_PtgAreaErr3d(blob, length, opts) {
                var type = (blob[blob.l++] & 96) >> 5;
                var ixti = blob.read_shift(2);
                var w = 8;
                if (opts)
                    switch (opts.biff) {
                        case 5:
                            blob.l += 12;
                            w = 6;
                            break;
                        case 12:
                            w = 12;
                            break;
                    }
                blob.l += w;
                return [type, ixti];
            }
            function parse_PtgAreaN(blob, length, opts) {
                var type = (blob[blob.l++] & 96) >> 5;
                var area = parse_RgceAreaRel(blob, length - 1, opts);
                return [type, area];
            }
            function parse_PtgArray(blob, length, opts) {
                var type = (blob[blob.l++] & 96) >> 5;
                blob.l += opts.biff == 2 ? 6 : opts.biff == 12 ? 14 : 7;
                return [type];
            }
            function parse_PtgAttrBaxcel(blob) {
                var bitSemi = blob[blob.l + 1] & 1;
                var bitBaxcel = 1;
                blob.l += 4;
                return [bitSemi, bitBaxcel];
            }
            function parse_PtgAttrChoose(blob, length, opts) {
                blob.l += 2;
                var offset = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
                var o = [];
                for (var i2 = 0; i2 <= offset; ++i2)
                    o.push(blob.read_shift(opts && opts.biff == 2 ? 1 : 2));
                return o;
            }
            function parse_PtgAttrGoto(blob, length, opts) {
                var bitGoto = blob[blob.l + 1] & 255 ? 1 : 0;
                blob.l += 2;
                return [bitGoto, blob.read_shift(opts && opts.biff == 2 ? 1 : 2)];
            }
            function parse_PtgAttrIf(blob, length, opts) {
                var bitIf = blob[blob.l + 1] & 255 ? 1 : 0;
                blob.l += 2;
                return [bitIf, blob.read_shift(opts && opts.biff == 2 ? 1 : 2)];
            }
            function parse_PtgAttrIfError(blob) {
                var bitIf = blob[blob.l + 1] & 255 ? 1 : 0;
                blob.l += 2;
                return [bitIf, blob.read_shift(2)];
            }
            function parse_PtgAttrSemi(blob, length, opts) {
                var bitSemi = blob[blob.l + 1] & 255 ? 1 : 0;
                blob.l += opts && opts.biff == 2 ? 3 : 4;
                return [bitSemi];
            }
            function parse_PtgAttrSpaceType(blob) {
                var type = blob.read_shift(1),
                    cch = blob.read_shift(1);
                return [type, cch];
            }
            function parse_PtgAttrSpace(blob) {
                blob.read_shift(2);
                return parse_PtgAttrSpaceType(blob, 2);
            }
            function parse_PtgAttrSpaceSemi(blob) {
                blob.read_shift(2);
                return parse_PtgAttrSpaceType(blob, 2);
            }
            function parse_PtgRef(blob, length, opts) {
                var type = (blob[blob.l] & 96) >> 5;
                blob.l += 1;
                var loc = parse_RgceLoc(blob, 0, opts);
                return [type, loc];
            }
            function parse_PtgRefN(blob, length, opts) {
                var type = (blob[blob.l] & 96) >> 5;
                blob.l += 1;
                var loc = parse_RgceLocRel(blob, 0, opts);
                return [type, loc];
            }
            function parse_PtgRef3d(blob, length, opts) {
                var type = (blob[blob.l] & 96) >> 5;
                blob.l += 1;
                var ixti = blob.read_shift(2);
                if (opts && opts.biff == 5) blob.l += 12;
                var loc = parse_RgceLoc(blob, 0, opts);
                return [type, ixti, loc];
            }
            function parse_PtgFunc(blob, length, opts) {
                var type = (blob[blob.l] & 96) >> 5;
                blob.l += 1;
                var iftab = blob.read_shift(opts && opts.biff <= 3 ? 1 : 2);
                return [FtabArgc[iftab], Ftab[iftab], type];
            }
            function parse_PtgFuncVar(blob, length, opts) {
                var type = blob[blob.l++];
                var cparams = blob.read_shift(1),
                    tab =
                        opts && opts.biff <= 3
                            ? [type == 88 ? -1 : 0, blob.read_shift(1)]
                            : parsetab(blob);
                return [cparams, (tab[0] === 0 ? Ftab : Cetab)[tab[1]]];
            }
            function parsetab(blob) {
                return [blob[blob.l + 1] >> 7, blob.read_shift(2) & 32767];
            }
            function parse_PtgAttrSum(blob, length, opts) {
                blob.l += opts && opts.biff == 2 ? 3 : 4;
                return;
            }
            function parse_PtgExp(blob, length, opts) {
                blob.l++;
                if (opts && opts.biff == 12) return [blob.read_shift(4, 'i'), 0];
                var row = blob.read_shift(2);
                var col = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
                return [row, col];
            }
            function parse_PtgErr(blob) {
                blob.l++;
                return BErr[blob.read_shift(1)];
            }
            function parse_PtgInt(blob) {
                blob.l++;
                return blob.read_shift(2);
            }
            function parse_PtgBool(blob) {
                blob.l++;
                return blob.read_shift(1) !== 0;
            }
            function parse_PtgNum(blob) {
                blob.l++;
                return parse_Xnum(blob, 8);
            }
            function parse_PtgStr(blob, length, opts) {
                blob.l++;
                return parse_ShortXLUnicodeString(blob, length - 1, opts);
            }
            function parse_SerAr(blob, biff) {
                var val2 = [blob.read_shift(1)];
                if (biff == 12)
                    switch (val2[0]) {
                        case 2:
                            val2[0] = 4;
                            break;
                        case 4:
                            val2[0] = 16;
                            break;
                        case 0:
                            val2[0] = 1;
                            break;
                        case 1:
                            val2[0] = 2;
                            break;
                    }
                switch (val2[0]) {
                    case 4:
                        val2[1] = parsebool(blob, 1) ? 'TRUE' : 'FALSE';
                        if (biff != 12) blob.l += 7;
                        break;
                    case 37:
                    case 16:
                        val2[1] = BErr[blob[blob.l]];
                        blob.l += biff == 12 ? 4 : 8;
                        break;
                    case 0:
                        blob.l += 8;
                        break;
                    case 1:
                        val2[1] = parse_Xnum(blob, 8);
                        break;
                    case 2:
                        val2[1] = parse_XLUnicodeString2(blob, 0, {
                            biff: biff > 0 && biff < 8 ? 2 : biff,
                        });
                        break;
                    default:
                        throw new Error('Bad SerAr: ' + val2[0]);
                }
                return val2;
            }
            function parse_PtgExtraMem(blob, cce, opts) {
                var count = blob.read_shift(opts.biff == 12 ? 4 : 2);
                var out = [];
                for (var i2 = 0; i2 != count; ++i2)
                    out.push((opts.biff == 12 ? parse_UncheckedRfX : parse_Ref8U)(blob, 8));
                return out;
            }
            function parse_PtgExtraArray(blob, length, opts) {
                var rows = 0,
                    cols = 0;
                if (opts.biff == 12) {
                    rows = blob.read_shift(4);
                    cols = blob.read_shift(4);
                } else {
                    cols = 1 + blob.read_shift(1);
                    rows = 1 + blob.read_shift(2);
                }
                if (opts.biff >= 2 && opts.biff < 8) {
                    --rows;
                    if (--cols == 0) cols = 256;
                }
                for (var i2 = 0, o = []; i2 != rows && (o[i2] = []); ++i2)
                    for (var j = 0; j != cols; ++j) o[i2][j] = parse_SerAr(blob, opts.biff);
                return o;
            }
            function parse_PtgName(blob, length, opts) {
                var type = (blob.read_shift(1) >>> 5) & 3;
                var w = !opts || opts.biff >= 8 ? 4 : 2;
                var nameindex = blob.read_shift(w);
                switch (opts.biff) {
                    case 2:
                        blob.l += 5;
                        break;
                    case 3:
                    case 4:
                        blob.l += 8;
                        break;
                    case 5:
                        blob.l += 12;
                        break;
                }
                return [type, 0, nameindex];
            }
            function parse_PtgNameX(blob, length, opts) {
                if (opts.biff == 5) return parse_PtgNameX_BIFF5(blob, length, opts);
                var type = (blob.read_shift(1) >>> 5) & 3;
                var ixti = blob.read_shift(2);
                var nameindex = blob.read_shift(4);
                return [type, ixti, nameindex];
            }
            function parse_PtgNameX_BIFF5(blob) {
                var type = (blob.read_shift(1) >>> 5) & 3;
                var ixti = blob.read_shift(2, 'i');
                blob.l += 8;
                var nameindex = blob.read_shift(2);
                blob.l += 12;
                return [type, ixti, nameindex];
            }
            function parse_PtgMemArea(blob, length, opts) {
                var type = (blob.read_shift(1) >>> 5) & 3;
                blob.l += opts && opts.biff == 2 ? 3 : 4;
                var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
                return [type, cce];
            }
            function parse_PtgMemFunc(blob, length, opts) {
                var type = (blob.read_shift(1) >>> 5) & 3;
                var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
                return [type, cce];
            }
            function parse_PtgRefErr(blob, length, opts) {
                var type = (blob.read_shift(1) >>> 5) & 3;
                blob.l += 4;
                if (opts.biff < 8) blob.l--;
                if (opts.biff == 12) blob.l += 2;
                return [type];
            }
            function parse_PtgRefErr3d(blob, length, opts) {
                var type = (blob[blob.l++] & 96) >> 5;
                var ixti = blob.read_shift(2);
                var w = 4;
                if (opts)
                    switch (opts.biff) {
                        case 5:
                            w = 15;
                            break;
                        case 12:
                            w = 6;
                            break;
                    }
                blob.l += w;
                return [type, ixti];
            }
            var parse_PtgMemErr = parsenoop;
            var parse_PtgMemNoMem = parsenoop;
            var parse_PtgTbl = parsenoop;
            function parse_PtgElfLoc(blob, length, opts) {
                blob.l += 2;
                return [parse_RgceElfLoc(blob, 4, opts)];
            }
            function parse_PtgElfNoop(blob) {
                blob.l += 6;
                return [];
            }
            var parse_PtgElfCol = parse_PtgElfLoc;
            var parse_PtgElfColS = parse_PtgElfNoop;
            var parse_PtgElfColSV = parse_PtgElfNoop;
            var parse_PtgElfColV = parse_PtgElfLoc;
            function parse_PtgElfLel(blob) {
                blob.l += 2;
                return [parseuint16(blob), blob.read_shift(2) & 1];
            }
            var parse_PtgElfRadical = parse_PtgElfLoc;
            var parse_PtgElfRadicalLel = parse_PtgElfLel;
            var parse_PtgElfRadicalS = parse_PtgElfNoop;
            var parse_PtgElfRw = parse_PtgElfLoc;
            var parse_PtgElfRwV = parse_PtgElfLoc;
            var PtgListRT = [
                'Data',
                'All',
                'Headers',
                '??',
                '?Data2',
                '??',
                '?DataHeaders',
                '??',
                'Totals',
                '??',
                '??',
                '??',
                '?DataTotals',
                '??',
                '??',
                '??',
                '?Current',
            ];
            function parse_PtgList(blob) {
                blob.l += 2;
                var ixti = blob.read_shift(2);
                var flags = blob.read_shift(2);
                var idx = blob.read_shift(4);
                var c = blob.read_shift(2);
                var C = blob.read_shift(2);
                var rt = PtgListRT[(flags >> 2) & 31];
                return { ixti, coltype: flags & 3, rt, idx, c, C };
            }
            function parse_PtgSxName(blob) {
                blob.l += 2;
                return [blob.read_shift(4)];
            }
            function parse_PtgSheet(blob, length, opts) {
                blob.l += 5;
                blob.l += 2;
                blob.l += opts.biff == 2 ? 1 : 4;
                return ['PTGSHEET'];
            }
            function parse_PtgEndSheet(blob, length, opts) {
                blob.l += opts.biff == 2 ? 4 : 5;
                return ['PTGENDSHEET'];
            }
            function parse_PtgMemAreaN(blob) {
                var type = (blob.read_shift(1) >>> 5) & 3;
                var cce = blob.read_shift(2);
                return [type, cce];
            }
            function parse_PtgMemNoMemN(blob) {
                var type = (blob.read_shift(1) >>> 5) & 3;
                var cce = blob.read_shift(2);
                return [type, cce];
            }
            function parse_PtgAttrNoop(blob) {
                blob.l += 4;
                return [0, 0];
            }
            var PtgTypes = {
                1: { n: 'PtgExp', f: parse_PtgExp },
                2: { n: 'PtgTbl', f: parse_PtgTbl },
                3: { n: 'PtgAdd', f: parseread1 },
                4: { n: 'PtgSub', f: parseread1 },
                5: { n: 'PtgMul', f: parseread1 },
                6: { n: 'PtgDiv', f: parseread1 },
                7: { n: 'PtgPower', f: parseread1 },
                8: { n: 'PtgConcat', f: parseread1 },
                9: { n: 'PtgLt', f: parseread1 },
                10: { n: 'PtgLe', f: parseread1 },
                11: { n: 'PtgEq', f: parseread1 },
                12: { n: 'PtgGe', f: parseread1 },
                13: { n: 'PtgGt', f: parseread1 },
                14: { n: 'PtgNe', f: parseread1 },
                15: { n: 'PtgIsect', f: parseread1 },
                16: { n: 'PtgUnion', f: parseread1 },
                17: { n: 'PtgRange', f: parseread1 },
                18: { n: 'PtgUplus', f: parseread1 },
                19: { n: 'PtgUminus', f: parseread1 },
                20: { n: 'PtgPercent', f: parseread1 },
                21: { n: 'PtgParen', f: parseread1 },
                22: { n: 'PtgMissArg', f: parseread1 },
                23: { n: 'PtgStr', f: parse_PtgStr },
                26: { n: 'PtgSheet', f: parse_PtgSheet },
                27: { n: 'PtgEndSheet', f: parse_PtgEndSheet },
                28: { n: 'PtgErr', f: parse_PtgErr },
                29: { n: 'PtgBool', f: parse_PtgBool },
                30: { n: 'PtgInt', f: parse_PtgInt },
                31: { n: 'PtgNum', f: parse_PtgNum },
                32: { n: 'PtgArray', f: parse_PtgArray },
                33: { n: 'PtgFunc', f: parse_PtgFunc },
                34: { n: 'PtgFuncVar', f: parse_PtgFuncVar },
                35: { n: 'PtgName', f: parse_PtgName },
                36: { n: 'PtgRef', f: parse_PtgRef },
                37: { n: 'PtgArea', f: parse_PtgArea },
                38: { n: 'PtgMemArea', f: parse_PtgMemArea },
                39: { n: 'PtgMemErr', f: parse_PtgMemErr },
                40: { n: 'PtgMemNoMem', f: parse_PtgMemNoMem },
                41: { n: 'PtgMemFunc', f: parse_PtgMemFunc },
                42: { n: 'PtgRefErr', f: parse_PtgRefErr },
                43: { n: 'PtgAreaErr', f: parse_PtgAreaErr },
                44: { n: 'PtgRefN', f: parse_PtgRefN },
                45: { n: 'PtgAreaN', f: parse_PtgAreaN },
                46: { n: 'PtgMemAreaN', f: parse_PtgMemAreaN },
                47: { n: 'PtgMemNoMemN', f: parse_PtgMemNoMemN },
                57: { n: 'PtgNameX', f: parse_PtgNameX },
                58: { n: 'PtgRef3d', f: parse_PtgRef3d },
                59: { n: 'PtgArea3d', f: parse_PtgArea3d },
                60: { n: 'PtgRefErr3d', f: parse_PtgRefErr3d },
                61: { n: 'PtgAreaErr3d', f: parse_PtgAreaErr3d },
                255: {},
            };
            var PtgDupes = {
                64: 32,
                96: 32,
                65: 33,
                97: 33,
                66: 34,
                98: 34,
                67: 35,
                99: 35,
                68: 36,
                100: 36,
                69: 37,
                101: 37,
                70: 38,
                102: 38,
                71: 39,
                103: 39,
                72: 40,
                104: 40,
                73: 41,
                105: 41,
                74: 42,
                106: 42,
                75: 43,
                107: 43,
                76: 44,
                108: 44,
                77: 45,
                109: 45,
                78: 46,
                110: 46,
                79: 47,
                111: 47,
                88: 34,
                120: 34,
                89: 57,
                121: 57,
                90: 58,
                122: 58,
                91: 59,
                123: 59,
                92: 60,
                124: 60,
                93: 61,
                125: 61,
            };
            var Ptg18 = {
                1: { n: 'PtgElfLel', f: parse_PtgElfLel },
                2: { n: 'PtgElfRw', f: parse_PtgElfRw },
                3: { n: 'PtgElfCol', f: parse_PtgElfCol },
                6: { n: 'PtgElfRwV', f: parse_PtgElfRwV },
                7: { n: 'PtgElfColV', f: parse_PtgElfColV },
                10: { n: 'PtgElfRadical', f: parse_PtgElfRadical },
                11: { n: 'PtgElfRadicalS', f: parse_PtgElfRadicalS },
                13: { n: 'PtgElfColS', f: parse_PtgElfColS },
                15: { n: 'PtgElfColSV', f: parse_PtgElfColSV },
                16: { n: 'PtgElfRadicalLel', f: parse_PtgElfRadicalLel },
                25: { n: 'PtgList', f: parse_PtgList },
                29: { n: 'PtgSxName', f: parse_PtgSxName },
                255: {},
            };
            var Ptg19 = {
                0: { n: 'PtgAttrNoop', f: parse_PtgAttrNoop },
                1: { n: 'PtgAttrSemi', f: parse_PtgAttrSemi },
                2: { n: 'PtgAttrIf', f: parse_PtgAttrIf },
                4: { n: 'PtgAttrChoose', f: parse_PtgAttrChoose },
                8: { n: 'PtgAttrGoto', f: parse_PtgAttrGoto },
                16: { n: 'PtgAttrSum', f: parse_PtgAttrSum },
                32: { n: 'PtgAttrBaxcel', f: parse_PtgAttrBaxcel },
                33: { n: 'PtgAttrBaxcel', f: parse_PtgAttrBaxcel },
                64: { n: 'PtgAttrSpace', f: parse_PtgAttrSpace },
                65: { n: 'PtgAttrSpaceSemi', f: parse_PtgAttrSpaceSemi },
                128: { n: 'PtgAttrIfError', f: parse_PtgAttrIfError },
                255: {},
            };
            function parse_RgbExtra(blob, length, rgce, opts) {
                if (opts.biff < 8) return parsenoop(blob, length);
                var target = blob.l + length;
                var o = [];
                for (var i2 = 0; i2 !== rgce.length; ++i2) {
                    switch (rgce[i2][0]) {
                        case 'PtgArray':
                            rgce[i2][1] = parse_PtgExtraArray(blob, 0, opts);
                            o.push(rgce[i2][1]);
                            break;
                        case 'PtgMemArea':
                            rgce[i2][2] = parse_PtgExtraMem(blob, rgce[i2][1], opts);
                            o.push(rgce[i2][2]);
                            break;
                        case 'PtgExp':
                            if (opts && opts.biff == 12) {
                                rgce[i2][1][1] = blob.read_shift(4);
                                o.push(rgce[i2][1]);
                            }
                            break;
                        case 'PtgList':
                        case 'PtgElfRadicalS':
                        case 'PtgElfColS':
                        case 'PtgElfColSV':
                            throw 'Unsupported ' + rgce[i2][0];
                        default:
                            break;
                    }
                }
                length = target - blob.l;
                if (length !== 0) o.push(parsenoop(blob, length));
                return o;
            }
            function parse_Rgce(blob, length, opts) {
                var target = blob.l + length;
                var R,
                    id,
                    ptgs = [];
                while (target != blob.l) {
                    length = target - blob.l;
                    id = blob[blob.l];
                    R = PtgTypes[id] || PtgTypes[PtgDupes[id]];
                    if (id === 24 || id === 25) R = (id === 24 ? Ptg18 : Ptg19)[blob[blob.l + 1]];
                    if (!R || !R.f) {
                        parsenoop(blob, length);
                    } else {
                        ptgs.push([R.n, R.f(blob, length, opts)]);
                    }
                }
                return ptgs;
            }
            function stringify_array(f3) {
                var o = [];
                for (var i2 = 0; i2 < f3.length; ++i2) {
                    var x2 = f3[i2],
                        r2 = [];
                    for (var j = 0; j < x2.length; ++j) {
                        var y = x2[j];
                        if (y)
                            switch (y[0]) {
                                case 2:
                                    r2.push('"' + y[1].replace(/"/g, '""') + '"');
                                    break;
                                default:
                                    r2.push(y[1]);
                            }
                        else r2.push('');
                    }
                    o.push(r2.join(','));
                }
                return o.join(';');
            }
            var PtgBinOp = {
                PtgAdd: '+',
                PtgConcat: '&',
                PtgDiv: '/',
                PtgEq: '=',
                PtgGe: '>=',
                PtgGt: '>',
                PtgLe: '<=',
                PtgLt: '<',
                PtgMul: '*',
                PtgNe: '<>',
                PtgPower: '^',
                PtgSub: '-',
            };
            function formula_quote_sheet_name(sname, opts) {
                if (!sname && !(opts && opts.biff <= 5 && opts.biff >= 2))
                    throw new Error('empty sheet name');
                if (/[^\w\u4E00-\u9FFF\u3040-\u30FF]/.test(sname)) return "'" + sname + "'";
                return sname;
            }
            function get_ixti_raw(supbooks, ixti, opts) {
                if (!supbooks) return 'SH33TJSERR0';
                if (opts.biff > 8 && (!supbooks.XTI || !supbooks.XTI[ixti]))
                    return supbooks.SheetNames[ixti];
                if (!supbooks.XTI) return 'SH33TJSERR6';
                var XTI = supbooks.XTI[ixti];
                if (opts.biff < 8) {
                    if (ixti > 1e4) ixti -= 65536;
                    if (ixti < 0) ixti = -ixti;
                    return ixti == 0 ? '' : supbooks.XTI[ixti - 1];
                }
                if (!XTI) return 'SH33TJSERR1';
                var o = '';
                if (opts.biff > 8)
                    switch (supbooks[XTI[0]][0]) {
                        case 357:
                            o = XTI[1] == -1 ? '#REF' : supbooks.SheetNames[XTI[1]];
                            return XTI[1] == XTI[2] ? o : o + ':' + supbooks.SheetNames[XTI[2]];
                        case 358:
                            if (opts.SID != null) return supbooks.SheetNames[opts.SID];
                            return 'SH33TJSSAME' + supbooks[XTI[0]][0];
                        case 355:
                        default:
                            return 'SH33TJSSRC' + supbooks[XTI[0]][0];
                    }
                switch (supbooks[XTI[0]][0][0]) {
                    case 1025:
                        o = XTI[1] == -1 ? '#REF' : supbooks.SheetNames[XTI[1]] || 'SH33TJSERR3';
                        return XTI[1] == XTI[2] ? o : o + ':' + supbooks.SheetNames[XTI[2]];
                    case 14849:
                        return supbooks[XTI[0]]
                            .slice(1)
                            .map(function (name) {
                                return name.Name;
                            })
                            .join(';;');
                    default:
                        if (!supbooks[XTI[0]][0][3]) return 'SH33TJSERR2';
                        o = XTI[1] == -1 ? '#REF' : supbooks[XTI[0]][0][3][XTI[1]] || 'SH33TJSERR4';
                        return XTI[1] == XTI[2] ? o : o + ':' + supbooks[XTI[0]][0][3][XTI[2]];
                }
            }
            function get_ixti(supbooks, ixti, opts) {
                var ixtiraw = get_ixti_raw(supbooks, ixti, opts);
                return ixtiraw == '#REF' ? ixtiraw : formula_quote_sheet_name(ixtiraw, opts);
            }
            function stringify_formula(formula, range, cell, supbooks, opts) {
                var biff = (opts && opts.biff) || 8;
                var _range =
                    /*range != null ? range :*/
                    { s: { c: 0, r: 0 }, e: { c: 0, r: 0 } };
                var stack = [],
                    e1,
                    e2,
                    c,
                    ixti = 0,
                    nameidx = 0,
                    r2,
                    sname = '';
                if (!formula[0] || !formula[0][0]) return '';
                var last_sp = -1,
                    sp = '';
                for (var ff = 0, fflen = formula[0].length; ff < fflen; ++ff) {
                    var f3 = formula[0][ff];
                    switch (f3[0]) {
                        case 'PtgUminus':
                            stack.push('-' + stack.pop());
                            break;
                        case 'PtgUplus':
                            stack.push('+' + stack.pop());
                            break;
                        case 'PtgPercent':
                            stack.push(stack.pop() + '%');
                            break;
                        case 'PtgAdd':
                        case 'PtgConcat':
                        case 'PtgDiv':
                        case 'PtgEq':
                        case 'PtgGe':
                        case 'PtgGt':
                        case 'PtgLe':
                        case 'PtgLt':
                        case 'PtgMul':
                        case 'PtgNe':
                        case 'PtgPower':
                        case 'PtgSub':
                            e1 = stack.pop();
                            e2 = stack.pop();
                            if (last_sp >= 0) {
                                switch (formula[0][last_sp][1][0]) {
                                    case 0:
                                        sp = fill(' ', formula[0][last_sp][1][1]);
                                        break;
                                    case 1:
                                        sp = fill('\r', formula[0][last_sp][1][1]);
                                        break;
                                    default:
                                        sp = '';
                                        if (opts.WTF)
                                            throw new Error(
                                                'Unexpected PtgAttrSpaceType ' +
                                                    formula[0][last_sp][1][0],
                                            );
                                }
                                e2 = e2 + sp;
                                last_sp = -1;
                            }
                            stack.push(e2 + PtgBinOp[f3[0]] + e1);
                            break;
                        case 'PtgIsect':
                            e1 = stack.pop();
                            e2 = stack.pop();
                            stack.push(e2 + ' ' + e1);
                            break;
                        case 'PtgUnion':
                            e1 = stack.pop();
                            e2 = stack.pop();
                            stack.push(e2 + ',' + e1);
                            break;
                        case 'PtgRange':
                            e1 = stack.pop();
                            e2 = stack.pop();
                            stack.push(e2 + ':' + e1);
                            break;
                        case 'PtgAttrChoose':
                            break;
                        case 'PtgAttrGoto':
                            break;
                        case 'PtgAttrIf':
                            break;
                        case 'PtgAttrIfError':
                            break;
                        case 'PtgRef':
                            c = shift_cell_xls(f3[1][1], _range, opts);
                            stack.push(encode_cell_xls(c, biff));
                            break;
                        case 'PtgRefN':
                            c = cell ? shift_cell_xls(f3[1][1], cell, opts) : f3[1][1];
                            stack.push(encode_cell_xls(c, biff));
                            break;
                        case 'PtgRef3d':
                            ixti = f3[1][1];
                            c = shift_cell_xls(f3[1][2], _range, opts);
                            sname = get_ixti(supbooks, ixti, opts);
                            var w = sname;
                            stack.push(sname + '!' + encode_cell_xls(c, biff));
                            break;
                        case 'PtgFunc':
                        case 'PtgFuncVar':
                            var argc = f3[1][0],
                                func = f3[1][1];
                            if (!argc) argc = 0;
                            argc &= 127;
                            var args = argc == 0 ? [] : stack.slice(-argc);
                            stack.length -= argc;
                            if (func === 'User') func = args.shift();
                            stack.push(func + '(' + args.join(',') + ')');
                            break;
                        case 'PtgBool':
                            stack.push(f3[1] ? 'TRUE' : 'FALSE');
                            break;
                        case 'PtgInt':
                            stack.push(f3[1]);
                            break;
                        case 'PtgNum':
                            stack.push(String(f3[1]));
                            break;
                        case 'PtgStr':
                            stack.push('"' + f3[1].replace(/"/g, '""') + '"');
                            break;
                        case 'PtgErr':
                            stack.push(f3[1]);
                            break;
                        case 'PtgAreaN':
                            r2 = shift_range_xls(f3[1][1], cell ? { s: cell } : _range, opts);
                            stack.push(encode_range_xls(r2, opts));
                            break;
                        case 'PtgArea':
                            r2 = shift_range_xls(f3[1][1], _range, opts);
                            stack.push(encode_range_xls(r2, opts));
                            break;
                        case 'PtgArea3d':
                            ixti = f3[1][1];
                            r2 = f3[1][2];
                            sname = get_ixti(supbooks, ixti, opts);
                            stack.push(sname + '!' + encode_range_xls(r2, opts));
                            break;
                        case 'PtgAttrSum':
                            stack.push('SUM(' + stack.pop() + ')');
                            break;
                        case 'PtgAttrBaxcel':
                        case 'PtgAttrSemi':
                            break;
                        case 'PtgName':
                            nameidx = f3[1][2];
                            var lbl =
                                (supbooks.names || [])[nameidx - 1] || (supbooks[0] || [])[nameidx];
                            var name = lbl ? lbl.Name : 'SH33TJSNAME' + String(nameidx);
                            if (name && name.slice(0, 6) == '_xlfn.' && !opts.xlfn)
                                name = name.slice(6);
                            stack.push(name);
                            break;
                        case 'PtgNameX':
                            var bookidx = f3[1][1];
                            nameidx = f3[1][2];
                            var externbook;
                            if (opts.biff <= 5) {
                                if (bookidx < 0) bookidx = -bookidx;
                                if (supbooks[bookidx]) externbook = supbooks[bookidx][nameidx];
                            } else {
                                var o = '';
                                if (((supbooks[bookidx] || [])[0] || [])[0] == 14849) {
                                } else if (((supbooks[bookidx] || [])[0] || [])[0] == 1025) {
                                    if (
                                        supbooks[bookidx][nameidx] &&
                                        supbooks[bookidx][nameidx].itab > 0
                                    ) {
                                        o =
                                            supbooks.SheetNames[
                                                supbooks[bookidx][nameidx].itab - 1
                                            ] + '!';
                                    }
                                } else o = supbooks.SheetNames[nameidx - 1] + '!';
                                if (supbooks[bookidx] && supbooks[bookidx][nameidx])
                                    o += supbooks[bookidx][nameidx].Name;
                                else if (supbooks[0] && supbooks[0][nameidx])
                                    o += supbooks[0][nameidx].Name;
                                else {
                                    var ixtidata = (
                                        get_ixti_raw(supbooks, bookidx, opts) || ''
                                    ).split(';;');
                                    if (ixtidata[nameidx - 1]) o = ixtidata[nameidx - 1];
                                    else o += 'SH33TJSERRX';
                                }
                                stack.push(o);
                                break;
                            }
                            if (!externbook) externbook = { Name: 'SH33TJSERRY' };
                            stack.push(externbook.Name);
                            break;
                        case 'PtgParen':
                            var lp = '(',
                                rp = ')';
                            if (last_sp >= 0) {
                                sp = '';
                                switch (formula[0][last_sp][1][0]) {
                                    case 2:
                                        lp = fill(' ', formula[0][last_sp][1][1]) + lp;
                                        break;
                                    case 3:
                                        lp = fill('\r', formula[0][last_sp][1][1]) + lp;
                                        break;
                                    case 4:
                                        rp = fill(' ', formula[0][last_sp][1][1]) + rp;
                                        break;
                                    case 5:
                                        rp = fill('\r', formula[0][last_sp][1][1]) + rp;
                                        break;
                                    default:
                                        if (opts.WTF)
                                            throw new Error(
                                                'Unexpected PtgAttrSpaceType ' +
                                                    formula[0][last_sp][1][0],
                                            );
                                }
                                last_sp = -1;
                            }
                            stack.push(lp + stack.pop() + rp);
                            break;
                        case 'PtgRefErr':
                            stack.push('#REF!');
                            break;
                        case 'PtgRefErr3d':
                            stack.push('#REF!');
                            break;
                        case 'PtgExp':
                            c = { c: f3[1][1], r: f3[1][0] };
                            var q = { c: cell.c, r: cell.r };
                            if (supbooks.sharedf[encode_cell(c)]) {
                                var parsedf = supbooks.sharedf[encode_cell(c)];
                                stack.push(stringify_formula(parsedf, _range, q, supbooks, opts));
                            } else {
                                var fnd = false;
                                for (e1 = 0; e1 != supbooks.arrayf.length; ++e1) {
                                    e2 = supbooks.arrayf[e1];
                                    if (c.c < e2[0].s.c || c.c > e2[0].e.c) continue;
                                    if (c.r < e2[0].s.r || c.r > e2[0].e.r) continue;
                                    stack.push(stringify_formula(e2[1], _range, q, supbooks, opts));
                                    fnd = true;
                                    break;
                                }
                                if (!fnd) stack.push(f3[1]);
                            }
                            break;
                        case 'PtgArray':
                            stack.push('{' + stringify_array(f3[1]) + '}');
                            break;
                        case 'PtgMemArea':
                            break;
                        case 'PtgAttrSpace':
                        case 'PtgAttrSpaceSemi':
                            last_sp = ff;
                            break;
                        case 'PtgTbl':
                            break;
                        case 'PtgMemErr':
                            break;
                        case 'PtgMissArg':
                            stack.push('');
                            break;
                        case 'PtgAreaErr':
                            stack.push('#REF!');
                            break;
                        case 'PtgAreaErr3d':
                            stack.push('#REF!');
                            break;
                        case 'PtgList':
                            stack.push('Table' + f3[1].idx + '[#' + f3[1].rt + ']');
                            break;
                        case 'PtgMemAreaN':
                        case 'PtgMemNoMemN':
                        case 'PtgAttrNoop':
                        case 'PtgSheet':
                        case 'PtgEndSheet':
                            break;
                        case 'PtgMemFunc':
                            break;
                        case 'PtgMemNoMem':
                            break;
                        case 'PtgElfCol':
                        case 'PtgElfColS':
                        case 'PtgElfColSV':
                        case 'PtgElfColV':
                        case 'PtgElfLel':
                        case 'PtgElfRadical':
                        case 'PtgElfRadicalLel':
                        case 'PtgElfRadicalS':
                        case 'PtgElfRw':
                        case 'PtgElfRwV':
                            throw new Error('Unsupported ELFs');
                        case 'PtgSxName':
                            throw new Error('Unrecognized Formula Token: ' + String(f3));
                        default:
                            throw new Error('Unrecognized Formula Token: ' + String(f3));
                    }
                    var PtgNonDisp = ['PtgAttrSpace', 'PtgAttrSpaceSemi', 'PtgAttrGoto'];
                    if (opts.biff != 3) {
                        if (last_sp >= 0 && PtgNonDisp.indexOf(formula[0][ff][0]) == -1) {
                            f3 = formula[0][last_sp];
                            var _left = true;
                            switch (f3[1][0]) {
                                case 4:
                                    _left = false;
                                case 0:
                                    sp = fill(' ', f3[1][1]);
                                    break;
                                case 5:
                                    _left = false;
                                case 1:
                                    sp = fill('\r', f3[1][1]);
                                    break;
                                default:
                                    sp = '';
                                    if (opts.WTF)
                                        throw new Error('Unexpected PtgAttrSpaceType ' + f3[1][0]);
                            }
                            stack.push((_left ? sp : '') + stack.pop() + (_left ? '' : sp));
                            last_sp = -1;
                        }
                    }
                }
                if (stack.length > 1 && opts.WTF) throw new Error('bad formula stack');
                return stack[0];
            }
            function parse_ArrayParsedFormula(blob, length, opts) {
                var target = blob.l + length,
                    len = opts.biff == 2 ? 1 : 2;
                var rgcb,
                    cce = blob.read_shift(len);
                if (cce == 65535) return [[], parsenoop(blob, length - 2)];
                var rgce = parse_Rgce(blob, cce, opts);
                if (length !== cce + len)
                    rgcb = parse_RgbExtra(blob, length - cce - len, rgce, opts);
                blob.l = target;
                return [rgce, rgcb];
            }
            function parse_XLSCellParsedFormula(blob, length, opts) {
                var target = blob.l + length,
                    len = opts.biff == 2 ? 1 : 2;
                var rgcb,
                    cce = blob.read_shift(len);
                if (cce == 65535) return [[], parsenoop(blob, length - 2)];
                var rgce = parse_Rgce(blob, cce, opts);
                if (length !== cce + len)
                    rgcb = parse_RgbExtra(blob, length - cce - len, rgce, opts);
                blob.l = target;
                return [rgce, rgcb];
            }
            function parse_NameParsedFormula(blob, length, opts, cce) {
                var target = blob.l + length;
                var rgce = parse_Rgce(blob, cce, opts);
                var rgcb;
                if (target !== blob.l) rgcb = parse_RgbExtra(blob, target - blob.l, rgce, opts);
                return [rgce, rgcb];
            }
            function parse_SharedParsedFormula(blob, length, opts) {
                var target = blob.l + length;
                var rgcb,
                    cce = blob.read_shift(2);
                var rgce = parse_Rgce(blob, cce, opts);
                if (cce == 65535) return [[], parsenoop(blob, length - 2)];
                if (length !== cce + 2) rgcb = parse_RgbExtra(blob, target - cce - 2, rgce, opts);
                return [rgce, rgcb];
            }
            function parse_FormulaValue(blob) {
                var b;
                if (__readUInt16LE(blob, blob.l + 6) !== 65535) return [parse_Xnum(blob), 'n'];
                switch (blob[blob.l]) {
                    case 0:
                        blob.l += 8;
                        return ['String', 's'];
                    case 1:
                        b = blob[blob.l + 2] === 1;
                        blob.l += 8;
                        return [b, 'b'];
                    case 2:
                        b = blob[blob.l + 2];
                        blob.l += 8;
                        return [b, 'e'];
                    case 3:
                        blob.l += 8;
                        return ['', 's'];
                }
                return [];
            }
            function write_FormulaValue(value) {
                if (value == null) {
                    var o = new_buf(8);
                    o.write_shift(1, 3);
                    o.write_shift(1, 0);
                    o.write_shift(2, 0);
                    o.write_shift(2, 0);
                    o.write_shift(2, 65535);
                    return o;
                } else if (typeof value == 'number') return write_Xnum(value);
                return write_Xnum(0);
            }
            function parse_Formula(blob, length, opts) {
                var end2 = blob.l + length;
                var cell = parse_XLSCell(blob, 6);
                if (opts.biff == 2) ++blob.l;
                var val2 = parse_FormulaValue(blob, 8);
                var flags = blob.read_shift(1);
                if (opts.biff != 2) {
                    blob.read_shift(1);
                    if (opts.biff >= 5) {
                        blob.read_shift(4);
                    }
                }
                var cbf = parse_XLSCellParsedFormula(blob, end2 - blob.l, opts);
                return { cell, val: val2[0], formula: cbf, shared: (flags >> 3) & 1, tt: val2[1] };
            }
            function write_Formula(cell, R, C, opts, os2) {
                var o1 = write_XLSCell(R, C, os2);
                var o2 = write_FormulaValue(cell.v);
                var o3 = new_buf(6);
                var flags = 1 | 32;
                o3.write_shift(2, flags);
                o3.write_shift(4, 0);
                var bf = new_buf(cell.bf.length);
                for (var i2 = 0; i2 < cell.bf.length; ++i2) bf[i2] = cell.bf[i2];
                var out = bconcat([o1, o2, o3, bf]);
                return out;
            }
            function parse_XLSBParsedFormula(data2, length, opts) {
                var cce = data2.read_shift(4);
                var rgce = parse_Rgce(data2, cce, opts);
                var cb = data2.read_shift(4);
                var rgcb = cb > 0 ? parse_RgbExtra(data2, cb, rgce, opts) : null;
                return [rgce, rgcb];
            }
            var parse_XLSBArrayParsedFormula = parse_XLSBParsedFormula;
            var parse_XLSBCellParsedFormula = parse_XLSBParsedFormula;
            var parse_XLSBNameParsedFormula = parse_XLSBParsedFormula;
            var parse_XLSBSharedParsedFormula = parse_XLSBParsedFormula;
            var Cetab = {
                0: 'BEEP',
                1: 'OPEN',
                2: 'OPEN.LINKS',
                3: 'CLOSE.ALL',
                4: 'SAVE',
                5: 'SAVE.AS',
                6: 'FILE.DELETE',
                7: 'PAGE.SETUP',
                8: 'PRINT',
                9: 'PRINTER.SETUP',
                10: 'QUIT',
                11: 'NEW.WINDOW',
                12: 'ARRANGE.ALL',
                13: 'WINDOW.SIZE',
                14: 'WINDOW.MOVE',
                15: 'FULL',
                16: 'CLOSE',
                17: 'RUN',
                22: 'SET.PRINT.AREA',
                23: 'SET.PRINT.TITLES',
                24: 'SET.PAGE.BREAK',
                25: 'REMOVE.PAGE.BREAK',
                26: 'FONT',
                27: 'DISPLAY',
                28: 'PROTECT.DOCUMENT',
                29: 'PRECISION',
                30: 'A1.R1C1',
                31: 'CALCULATE.NOW',
                32: 'CALCULATION',
                34: 'DATA.FIND',
                35: 'EXTRACT',
                36: 'DATA.DELETE',
                37: 'SET.DATABASE',
                38: 'SET.CRITERIA',
                39: 'SORT',
                40: 'DATA.SERIES',
                41: 'TABLE',
                42: 'FORMAT.NUMBER',
                43: 'ALIGNMENT',
                44: 'STYLE',
                45: 'BORDER',
                46: 'CELL.PROTECTION',
                47: 'COLUMN.WIDTH',
                48: 'UNDO',
                49: 'CUT',
                50: 'COPY',
                51: 'PASTE',
                52: 'CLEAR',
                53: 'PASTE.SPECIAL',
                54: 'EDIT.DELETE',
                55: 'INSERT',
                56: 'FILL.RIGHT',
                57: 'FILL.DOWN',
                61: 'DEFINE.NAME',
                62: 'CREATE.NAMES',
                63: 'FORMULA.GOTO',
                64: 'FORMULA.FIND',
                65: 'SELECT.LAST.CELL',
                66: 'SHOW.ACTIVE.CELL',
                67: 'GALLERY.AREA',
                68: 'GALLERY.BAR',
                69: 'GALLERY.COLUMN',
                70: 'GALLERY.LINE',
                71: 'GALLERY.PIE',
                72: 'GALLERY.SCATTER',
                73: 'COMBINATION',
                74: 'PREFERRED',
                75: 'ADD.OVERLAY',
                76: 'GRIDLINES',
                77: 'SET.PREFERRED',
                78: 'AXES',
                79: 'LEGEND',
                80: 'ATTACH.TEXT',
                81: 'ADD.ARROW',
                82: 'SELECT.CHART',
                83: 'SELECT.PLOT.AREA',
                84: 'PATTERNS',
                85: 'MAIN.CHART',
                86: 'OVERLAY',
                87: 'SCALE',
                88: 'FORMAT.LEGEND',
                89: 'FORMAT.TEXT',
                90: 'EDIT.REPEAT',
                91: 'PARSE',
                92: 'JUSTIFY',
                93: 'HIDE',
                94: 'UNHIDE',
                95: 'WORKSPACE',
                96: 'FORMULA',
                97: 'FORMULA.FILL',
                98: 'FORMULA.ARRAY',
                99: 'DATA.FIND.NEXT',
                100: 'DATA.FIND.PREV',
                101: 'FORMULA.FIND.NEXT',
                102: 'FORMULA.FIND.PREV',
                103: 'ACTIVATE',
                104: 'ACTIVATE.NEXT',
                105: 'ACTIVATE.PREV',
                106: 'UNLOCKED.NEXT',
                107: 'UNLOCKED.PREV',
                108: 'COPY.PICTURE',
                109: 'SELECT',
                110: 'DELETE.NAME',
                111: 'DELETE.FORMAT',
                112: 'VLINE',
                113: 'HLINE',
                114: 'VPAGE',
                115: 'HPAGE',
                116: 'VSCROLL',
                117: 'HSCROLL',
                118: 'ALERT',
                119: 'NEW',
                120: 'CANCEL.COPY',
                121: 'SHOW.CLIPBOARD',
                122: 'MESSAGE',
                124: 'PASTE.LINK',
                125: 'APP.ACTIVATE',
                126: 'DELETE.ARROW',
                127: 'ROW.HEIGHT',
                128: 'FORMAT.MOVE',
                129: 'FORMAT.SIZE',
                130: 'FORMULA.REPLACE',
                131: 'SEND.KEYS',
                132: 'SELECT.SPECIAL',
                133: 'APPLY.NAMES',
                134: 'REPLACE.FONT',
                135: 'FREEZE.PANES',
                136: 'SHOW.INFO',
                137: 'SPLIT',
                138: 'ON.WINDOW',
                139: 'ON.DATA',
                140: 'DISABLE.INPUT',
                142: 'OUTLINE',
                143: 'LIST.NAMES',
                144: 'FILE.CLOSE',
                145: 'SAVE.WORKBOOK',
                146: 'DATA.FORM',
                147: 'COPY.CHART',
                148: 'ON.TIME',
                149: 'WAIT',
                150: 'FORMAT.FONT',
                151: 'FILL.UP',
                152: 'FILL.LEFT',
                153: 'DELETE.OVERLAY',
                155: 'SHORT.MENUS',
                159: 'SET.UPDATE.STATUS',
                161: 'COLOR.PALETTE',
                162: 'DELETE.STYLE',
                163: 'WINDOW.RESTORE',
                164: 'WINDOW.MAXIMIZE',
                166: 'CHANGE.LINK',
                167: 'CALCULATE.DOCUMENT',
                168: 'ON.KEY',
                169: 'APP.RESTORE',
                170: 'APP.MOVE',
                171: 'APP.SIZE',
                172: 'APP.MINIMIZE',
                173: 'APP.MAXIMIZE',
                174: 'BRING.TO.FRONT',
                175: 'SEND.TO.BACK',
                185: 'MAIN.CHART.TYPE',
                186: 'OVERLAY.CHART.TYPE',
                187: 'SELECT.END',
                188: 'OPEN.MAIL',
                189: 'SEND.MAIL',
                190: 'STANDARD.FONT',
                191: 'CONSOLIDATE',
                192: 'SORT.SPECIAL',
                193: 'GALLERY.3D.AREA',
                194: 'GALLERY.3D.COLUMN',
                195: 'GALLERY.3D.LINE',
                196: 'GALLERY.3D.PIE',
                197: 'VIEW.3D',
                198: 'GOAL.SEEK',
                199: 'WORKGROUP',
                200: 'FILL.GROUP',
                201: 'UPDATE.LINK',
                202: 'PROMOTE',
                203: 'DEMOTE',
                204: 'SHOW.DETAIL',
                206: 'UNGROUP',
                207: 'OBJECT.PROPERTIES',
                208: 'SAVE.NEW.OBJECT',
                209: 'SHARE',
                210: 'SHARE.NAME',
                211: 'DUPLICATE',
                212: 'APPLY.STYLE',
                213: 'ASSIGN.TO.OBJECT',
                214: 'OBJECT.PROTECTION',
                215: 'HIDE.OBJECT',
                216: 'SET.EXTRACT',
                217: 'CREATE.PUBLISHER',
                218: 'SUBSCRIBE.TO',
                219: 'ATTRIBUTES',
                220: 'SHOW.TOOLBAR',
                222: 'PRINT.PREVIEW',
                223: 'EDIT.COLOR',
                224: 'SHOW.LEVELS',
                225: 'FORMAT.MAIN',
                226: 'FORMAT.OVERLAY',
                227: 'ON.RECALC',
                228: 'EDIT.SERIES',
                229: 'DEFINE.STYLE',
                240: 'LINE.PRINT',
                243: 'ENTER.DATA',
                249: 'GALLERY.RADAR',
                250: 'MERGE.STYLES',
                251: 'EDITION.OPTIONS',
                252: 'PASTE.PICTURE',
                253: 'PASTE.PICTURE.LINK',
                254: 'SPELLING',
                256: 'ZOOM',
                259: 'INSERT.OBJECT',
                260: 'WINDOW.MINIMIZE',
                265: 'SOUND.NOTE',
                266: 'SOUND.PLAY',
                267: 'FORMAT.SHAPE',
                268: 'EXTEND.POLYGON',
                269: 'FORMAT.AUTO',
                272: 'GALLERY.3D.BAR',
                273: 'GALLERY.3D.SURFACE',
                274: 'FILL.AUTO',
                276: 'CUSTOMIZE.TOOLBAR',
                277: 'ADD.TOOL',
                278: 'EDIT.OBJECT',
                279: 'ON.DOUBLECLICK',
                280: 'ON.ENTRY',
                281: 'WORKBOOK.ADD',
                282: 'WORKBOOK.MOVE',
                283: 'WORKBOOK.COPY',
                284: 'WORKBOOK.OPTIONS',
                285: 'SAVE.WORKSPACE',
                288: 'CHART.WIZARD',
                289: 'DELETE.TOOL',
                290: 'MOVE.TOOL',
                291: 'WORKBOOK.SELECT',
                292: 'WORKBOOK.ACTIVATE',
                293: 'ASSIGN.TO.TOOL',
                295: 'COPY.TOOL',
                296: 'RESET.TOOL',
                297: 'CONSTRAIN.NUMERIC',
                298: 'PASTE.TOOL',
                302: 'WORKBOOK.NEW',
                305: 'SCENARIO.CELLS',
                306: 'SCENARIO.DELETE',
                307: 'SCENARIO.ADD',
                308: 'SCENARIO.EDIT',
                309: 'SCENARIO.SHOW',
                310: 'SCENARIO.SHOW.NEXT',
                311: 'SCENARIO.SUMMARY',
                312: 'PIVOT.TABLE.WIZARD',
                313: 'PIVOT.FIELD.PROPERTIES',
                314: 'PIVOT.FIELD',
                315: 'PIVOT.ITEM',
                316: 'PIVOT.ADD.FIELDS',
                318: 'OPTIONS.CALCULATION',
                319: 'OPTIONS.EDIT',
                320: 'OPTIONS.VIEW',
                321: 'ADDIN.MANAGER',
                322: 'MENU.EDITOR',
                323: 'ATTACH.TOOLBARS',
                324: 'VBAActivate',
                325: 'OPTIONS.CHART',
                328: 'VBA.INSERT.FILE',
                330: 'VBA.PROCEDURE.DEFINITION',
                336: 'ROUTING.SLIP',
                338: 'ROUTE.DOCUMENT',
                339: 'MAIL.LOGON',
                342: 'INSERT.PICTURE',
                343: 'EDIT.TOOL',
                344: 'GALLERY.DOUGHNUT',
                350: 'CHART.TREND',
                352: 'PIVOT.ITEM.PROPERTIES',
                354: 'WORKBOOK.INSERT',
                355: 'OPTIONS.TRANSITION',
                356: 'OPTIONS.GENERAL',
                370: 'FILTER.ADVANCED',
                373: 'MAIL.ADD.MAILER',
                374: 'MAIL.DELETE.MAILER',
                375: 'MAIL.REPLY',
                376: 'MAIL.REPLY.ALL',
                377: 'MAIL.FORWARD',
                378: 'MAIL.NEXT.LETTER',
                379: 'DATA.LABEL',
                380: 'INSERT.TITLE',
                381: 'FONT.PROPERTIES',
                382: 'MACRO.OPTIONS',
                383: 'WORKBOOK.HIDE',
                384: 'WORKBOOK.UNHIDE',
                385: 'WORKBOOK.DELETE',
                386: 'WORKBOOK.NAME',
                388: 'GALLERY.CUSTOM',
                390: 'ADD.CHART.AUTOFORMAT',
                391: 'DELETE.CHART.AUTOFORMAT',
                392: 'CHART.ADD.DATA',
                393: 'AUTO.OUTLINE',
                394: 'TAB.ORDER',
                395: 'SHOW.DIALOG',
                396: 'SELECT.ALL',
                397: 'UNGROUP.SHEETS',
                398: 'SUBTOTAL.CREATE',
                399: 'SUBTOTAL.REMOVE',
                400: 'RENAME.OBJECT',
                412: 'WORKBOOK.SCROLL',
                413: 'WORKBOOK.NEXT',
                414: 'WORKBOOK.PREV',
                415: 'WORKBOOK.TAB.SPLIT',
                416: 'FULL.SCREEN',
                417: 'WORKBOOK.PROTECT',
                420: 'SCROLLBAR.PROPERTIES',
                421: 'PIVOT.SHOW.PAGES',
                422: 'TEXT.TO.COLUMNS',
                423: 'FORMAT.CHARTTYPE',
                424: 'LINK.FORMAT',
                425: 'TRACER.DISPLAY',
                430: 'TRACER.NAVIGATE',
                431: 'TRACER.CLEAR',
                432: 'TRACER.ERROR',
                433: 'PIVOT.FIELD.GROUP',
                434: 'PIVOT.FIELD.UNGROUP',
                435: 'CHECKBOX.PROPERTIES',
                436: 'LABEL.PROPERTIES',
                437: 'LISTBOX.PROPERTIES',
                438: 'EDITBOX.PROPERTIES',
                439: 'PIVOT.REFRESH',
                440: 'LINK.COMBO',
                441: 'OPEN.TEXT',
                442: 'HIDE.DIALOG',
                443: 'SET.DIALOG.FOCUS',
                444: 'ENABLE.OBJECT',
                445: 'PUSHBUTTON.PROPERTIES',
                446: 'SET.DIALOG.DEFAULT',
                447: 'FILTER',
                448: 'FILTER.SHOW.ALL',
                449: 'CLEAR.OUTLINE',
                450: 'FUNCTION.WIZARD',
                451: 'ADD.LIST.ITEM',
                452: 'SET.LIST.ITEM',
                453: 'REMOVE.LIST.ITEM',
                454: 'SELECT.LIST.ITEM',
                455: 'SET.CONTROL.VALUE',
                456: 'SAVE.COPY.AS',
                458: 'OPTIONS.LISTS.ADD',
                459: 'OPTIONS.LISTS.DELETE',
                460: 'SERIES.AXES',
                461: 'SERIES.X',
                462: 'SERIES.Y',
                463: 'ERRORBAR.X',
                464: 'ERRORBAR.Y',
                465: 'FORMAT.CHART',
                466: 'SERIES.ORDER',
                467: 'MAIL.LOGOFF',
                468: 'CLEAR.ROUTING.SLIP',
                469: 'APP.ACTIVATE.MICROSOFT',
                470: 'MAIL.EDIT.MAILER',
                471: 'ON.SHEET',
                472: 'STANDARD.WIDTH',
                473: 'SCENARIO.MERGE',
                474: 'SUMMARY.INFO',
                475: 'FIND.FILE',
                476: 'ACTIVE.CELL.FONT',
                477: 'ENABLE.TIPWIZARD',
                478: 'VBA.MAKE.ADDIN',
                480: 'INSERTDATATABLE',
                481: 'WORKGROUP.OPTIONS',
                482: 'MAIL.SEND.MAILER',
                485: 'AUTOCORRECT',
                489: 'POST.DOCUMENT',
                491: 'PICKLIST',
                493: 'VIEW.SHOW',
                494: 'VIEW.DEFINE',
                495: 'VIEW.DELETE',
                509: 'SHEET.BACKGROUND',
                510: 'INSERT.MAP.OBJECT',
                511: 'OPTIONS.MENONO',
                517: 'MSOCHECKS',
                518: 'NORMAL',
                519: 'LAYOUT',
                520: 'RM.PRINT.AREA',
                521: 'CLEAR.PRINT.AREA',
                522: 'ADD.PRINT.AREA',
                523: 'MOVE.BRK',
                545: 'HIDECURR.NOTE',
                546: 'HIDEALL.NOTES',
                547: 'DELETE.NOTE',
                548: 'TRAVERSE.NOTES',
                549: 'ACTIVATE.NOTES',
                620: 'PROTECT.REVISIONS',
                621: 'UNPROTECT.REVISIONS',
                647: 'OPTIONS.ME',
                653: 'WEB.PUBLISH',
                667: 'NEWWEBQUERY',
                673: 'PIVOT.TABLE.CHART',
                753: 'OPTIONS.SAVE',
                755: 'OPTIONS.SPELL',
                808: 'HIDEALL.INKANNOTS',
            };
            var Ftab = {
                0: 'COUNT',
                1: 'IF',
                2: 'ISNA',
                3: 'ISERROR',
                4: 'SUM',
                5: 'AVERAGE',
                6: 'MIN',
                7: 'MAX',
                8: 'ROW',
                9: 'COLUMN',
                10: 'NA',
                11: 'NPV',
                12: 'STDEV',
                13: 'DOLLAR',
                14: 'FIXED',
                15: 'SIN',
                16: 'COS',
                17: 'TAN',
                18: 'ATAN',
                19: 'PI',
                20: 'SQRT',
                21: 'EXP',
                22: 'LN',
                23: 'LOG10',
                24: 'ABS',
                25: 'INT',
                26: 'SIGN',
                27: 'ROUND',
                28: 'LOOKUP',
                29: 'INDEX',
                30: 'REPT',
                31: 'MID',
                32: 'LEN',
                33: 'VALUE',
                34: 'TRUE',
                35: 'FALSE',
                36: 'AND',
                37: 'OR',
                38: 'NOT',
                39: 'MOD',
                40: 'DCOUNT',
                41: 'DSUM',
                42: 'DAVERAGE',
                43: 'DMIN',
                44: 'DMAX',
                45: 'DSTDEV',
                46: 'VAR',
                47: 'DVAR',
                48: 'TEXT',
                49: 'LINEST',
                50: 'TREND',
                51: 'LOGEST',
                52: 'GROWTH',
                53: 'GOTO',
                54: 'HALT',
                55: 'RETURN',
                56: 'PV',
                57: 'FV',
                58: 'NPER',
                59: 'PMT',
                60: 'RATE',
                61: 'MIRR',
                62: 'IRR',
                63: 'RAND',
                64: 'MATCH',
                65: 'DATE',
                66: 'TIME',
                67: 'DAY',
                68: 'MONTH',
                69: 'YEAR',
                70: 'WEEKDAY',
                71: 'HOUR',
                72: 'MINUTE',
                73: 'SECOND',
                74: 'NOW',
                75: 'AREAS',
                76: 'ROWS',
                77: 'COLUMNS',
                78: 'OFFSET',
                79: 'ABSREF',
                80: 'RELREF',
                81: 'ARGUMENT',
                82: 'SEARCH',
                83: 'TRANSPOSE',
                84: 'ERROR',
                85: 'STEP',
                86: 'TYPE',
                87: 'ECHO',
                88: 'SET.NAME',
                89: 'CALLER',
                90: 'DEREF',
                91: 'WINDOWS',
                92: 'SERIES',
                93: 'DOCUMENTS',
                94: 'ACTIVE.CELL',
                95: 'SELECTION',
                96: 'RESULT',
                97: 'ATAN2',
                98: 'ASIN',
                99: 'ACOS',
                100: 'CHOOSE',
                101: 'HLOOKUP',
                102: 'VLOOKUP',
                103: 'LINKS',
                104: 'INPUT',
                105: 'ISREF',
                106: 'GET.FORMULA',
                107: 'GET.NAME',
                108: 'SET.VALUE',
                109: 'LOG',
                110: 'EXEC',
                111: 'CHAR',
                112: 'LOWER',
                113: 'UPPER',
                114: 'PROPER',
                115: 'LEFT',
                116: 'RIGHT',
                117: 'EXACT',
                118: 'TRIM',
                119: 'REPLACE',
                120: 'SUBSTITUTE',
                121: 'CODE',
                122: 'NAMES',
                123: 'DIRECTORY',
                124: 'FIND',
                125: 'CELL',
                126: 'ISERR',
                127: 'ISTEXT',
                128: 'ISNUMBER',
                129: 'ISBLANK',
                130: 'T',
                131: 'N',
                132: 'FOPEN',
                133: 'FCLOSE',
                134: 'FSIZE',
                135: 'FREADLN',
                136: 'FREAD',
                137: 'FWRITELN',
                138: 'FWRITE',
                139: 'FPOS',
                140: 'DATEVALUE',
                141: 'TIMEVALUE',
                142: 'SLN',
                143: 'SYD',
                144: 'DDB',
                145: 'GET.DEF',
                146: 'REFTEXT',
                147: 'TEXTREF',
                148: 'INDIRECT',
                149: 'REGISTER',
                150: 'CALL',
                151: 'ADD.BAR',
                152: 'ADD.MENU',
                153: 'ADD.COMMAND',
                154: 'ENABLE.COMMAND',
                155: 'CHECK.COMMAND',
                156: 'RENAME.COMMAND',
                157: 'SHOW.BAR',
                158: 'DELETE.MENU',
                159: 'DELETE.COMMAND',
                160: 'GET.CHART.ITEM',
                161: 'DIALOG.BOX',
                162: 'CLEAN',
                163: 'MDETERM',
                164: 'MINVERSE',
                165: 'MMULT',
                166: 'FILES',
                167: 'IPMT',
                168: 'PPMT',
                169: 'COUNTA',
                170: 'CANCEL.KEY',
                171: 'FOR',
                172: 'WHILE',
                173: 'BREAK',
                174: 'NEXT',
                175: 'INITIATE',
                176: 'REQUEST',
                177: 'POKE',
                178: 'EXECUTE',
                179: 'TERMINATE',
                180: 'RESTART',
                181: 'HELP',
                182: 'GET.BAR',
                183: 'PRODUCT',
                184: 'FACT',
                185: 'GET.CELL',
                186: 'GET.WORKSPACE',
                187: 'GET.WINDOW',
                188: 'GET.DOCUMENT',
                189: 'DPRODUCT',
                190: 'ISNONTEXT',
                191: 'GET.NOTE',
                192: 'NOTE',
                193: 'STDEVP',
                194: 'VARP',
                195: 'DSTDEVP',
                196: 'DVARP',
                197: 'TRUNC',
                198: 'ISLOGICAL',
                199: 'DCOUNTA',
                200: 'DELETE.BAR',
                201: 'UNREGISTER',
                204: 'USDOLLAR',
                205: 'FINDB',
                206: 'SEARCHB',
                207: 'REPLACEB',
                208: 'LEFTB',
                209: 'RIGHTB',
                210: 'MIDB',
                211: 'LENB',
                212: 'ROUNDUP',
                213: 'ROUNDDOWN',
                214: 'ASC',
                215: 'DBCS',
                216: 'RANK',
                219: 'ADDRESS',
                220: 'DAYS360',
                221: 'TODAY',
                222: 'VDB',
                223: 'ELSE',
                224: 'ELSE.IF',
                225: 'END.IF',
                226: 'FOR.CELL',
                227: 'MEDIAN',
                228: 'SUMPRODUCT',
                229: 'SINH',
                230: 'COSH',
                231: 'TANH',
                232: 'ASINH',
                233: 'ACOSH',
                234: 'ATANH',
                235: 'DGET',
                236: 'CREATE.OBJECT',
                237: 'VOLATILE',
                238: 'LAST.ERROR',
                239: 'CUSTOM.UNDO',
                240: 'CUSTOM.REPEAT',
                241: 'FORMULA.CONVERT',
                242: 'GET.LINK.INFO',
                243: 'TEXT.BOX',
                244: 'INFO',
                245: 'GROUP',
                246: 'GET.OBJECT',
                247: 'DB',
                248: 'PAUSE',
                251: 'RESUME',
                252: 'FREQUENCY',
                253: 'ADD.TOOLBAR',
                254: 'DELETE.TOOLBAR',
                255: 'User',
                256: 'RESET.TOOLBAR',
                257: 'EVALUATE',
                258: 'GET.TOOLBAR',
                259: 'GET.TOOL',
                260: 'SPELLING.CHECK',
                261: 'ERROR.TYPE',
                262: 'APP.TITLE',
                263: 'WINDOW.TITLE',
                264: 'SAVE.TOOLBAR',
                265: 'ENABLE.TOOL',
                266: 'PRESS.TOOL',
                267: 'REGISTER.ID',
                268: 'GET.WORKBOOK',
                269: 'AVEDEV',
                270: 'BETADIST',
                271: 'GAMMALN',
                272: 'BETAINV',
                273: 'BINOMDIST',
                274: 'CHIDIST',
                275: 'CHIINV',
                276: 'COMBIN',
                277: 'CONFIDENCE',
                278: 'CRITBINOM',
                279: 'EVEN',
                280: 'EXPONDIST',
                281: 'FDIST',
                282: 'FINV',
                283: 'FISHER',
                284: 'FISHERINV',
                285: 'FLOOR',
                286: 'GAMMADIST',
                287: 'GAMMAINV',
                288: 'CEILING',
                289: 'HYPGEOMDIST',
                290: 'LOGNORMDIST',
                291: 'LOGINV',
                292: 'NEGBINOMDIST',
                293: 'NORMDIST',
                294: 'NORMSDIST',
                295: 'NORMINV',
                296: 'NORMSINV',
                297: 'STANDARDIZE',
                298: 'ODD',
                299: 'PERMUT',
                300: 'POISSON',
                301: 'TDIST',
                302: 'WEIBULL',
                303: 'SUMXMY2',
                304: 'SUMX2MY2',
                305: 'SUMX2PY2',
                306: 'CHITEST',
                307: 'CORREL',
                308: 'COVAR',
                309: 'FORECAST',
                310: 'FTEST',
                311: 'INTERCEPT',
                312: 'PEARSON',
                313: 'RSQ',
                314: 'STEYX',
                315: 'SLOPE',
                316: 'TTEST',
                317: 'PROB',
                318: 'DEVSQ',
                319: 'GEOMEAN',
                320: 'HARMEAN',
                321: 'SUMSQ',
                322: 'KURT',
                323: 'SKEW',
                324: 'ZTEST',
                325: 'LARGE',
                326: 'SMALL',
                327: 'QUARTILE',
                328: 'PERCENTILE',
                329: 'PERCENTRANK',
                330: 'MODE',
                331: 'TRIMMEAN',
                332: 'TINV',
                334: 'MOVIE.COMMAND',
                335: 'GET.MOVIE',
                336: 'CONCATENATE',
                337: 'POWER',
                338: 'PIVOT.ADD.DATA',
                339: 'GET.PIVOT.TABLE',
                340: 'GET.PIVOT.FIELD',
                341: 'GET.PIVOT.ITEM',
                342: 'RADIANS',
                343: 'DEGREES',
                344: 'SUBTOTAL',
                345: 'SUMIF',
                346: 'COUNTIF',
                347: 'COUNTBLANK',
                348: 'SCENARIO.GET',
                349: 'OPTIONS.LISTS.GET',
                350: 'ISPMT',
                351: 'DATEDIF',
                352: 'DATESTRING',
                353: 'NUMBERSTRING',
                354: 'ROMAN',
                355: 'OPEN.DIALOG',
                356: 'SAVE.DIALOG',
                357: 'VIEW.GET',
                358: 'GETPIVOTDATA',
                359: 'HYPERLINK',
                360: 'PHONETIC',
                361: 'AVERAGEA',
                362: 'MAXA',
                363: 'MINA',
                364: 'STDEVPA',
                365: 'VARPA',
                366: 'STDEVA',
                367: 'VARA',
                368: 'BAHTTEXT',
                369: 'THAIDAYOFWEEK',
                370: 'THAIDIGIT',
                371: 'THAIMONTHOFYEAR',
                372: 'THAINUMSOUND',
                373: 'THAINUMSTRING',
                374: 'THAISTRINGLENGTH',
                375: 'ISTHAIDIGIT',
                376: 'ROUNDBAHTDOWN',
                377: 'ROUNDBAHTUP',
                378: 'THAIYEAR',
                379: 'RTD',
                380: 'CUBEVALUE',
                381: 'CUBEMEMBER',
                382: 'CUBEMEMBERPROPERTY',
                383: 'CUBERANKEDMEMBER',
                384: 'HEX2BIN',
                385: 'HEX2DEC',
                386: 'HEX2OCT',
                387: 'DEC2BIN',
                388: 'DEC2HEX',
                389: 'DEC2OCT',
                390: 'OCT2BIN',
                391: 'OCT2HEX',
                392: 'OCT2DEC',
                393: 'BIN2DEC',
                394: 'BIN2OCT',
                395: 'BIN2HEX',
                396: 'IMSUB',
                397: 'IMDIV',
                398: 'IMPOWER',
                399: 'IMABS',
                400: 'IMSQRT',
                401: 'IMLN',
                402: 'IMLOG2',
                403: 'IMLOG10',
                404: 'IMSIN',
                405: 'IMCOS',
                406: 'IMEXP',
                407: 'IMARGUMENT',
                408: 'IMCONJUGATE',
                409: 'IMAGINARY',
                410: 'IMREAL',
                411: 'COMPLEX',
                412: 'IMSUM',
                413: 'IMPRODUCT',
                414: 'SERIESSUM',
                415: 'FACTDOUBLE',
                416: 'SQRTPI',
                417: 'QUOTIENT',
                418: 'DELTA',
                419: 'GESTEP',
                420: 'ISEVEN',
                421: 'ISODD',
                422: 'MROUND',
                423: 'ERF',
                424: 'ERFC',
                425: 'BESSELJ',
                426: 'BESSELK',
                427: 'BESSELY',
                428: 'BESSELI',
                429: 'XIRR',
                430: 'XNPV',
                431: 'PRICEMAT',
                432: 'YIELDMAT',
                433: 'INTRATE',
                434: 'RECEIVED',
                435: 'DISC',
                436: 'PRICEDISC',
                437: 'YIELDDISC',
                438: 'TBILLEQ',
                439: 'TBILLPRICE',
                440: 'TBILLYIELD',
                441: 'PRICE',
                442: 'YIELD',
                443: 'DOLLARDE',
                444: 'DOLLARFR',
                445: 'NOMINAL',
                446: 'EFFECT',
                447: 'CUMPRINC',
                448: 'CUMIPMT',
                449: 'EDATE',
                450: 'EOMONTH',
                451: 'YEARFRAC',
                452: 'COUPDAYBS',
                453: 'COUPDAYS',
                454: 'COUPDAYSNC',
                455: 'COUPNCD',
                456: 'COUPNUM',
                457: 'COUPPCD',
                458: 'DURATION',
                459: 'MDURATION',
                460: 'ODDLPRICE',
                461: 'ODDLYIELD',
                462: 'ODDFPRICE',
                463: 'ODDFYIELD',
                464: 'RANDBETWEEN',
                465: 'WEEKNUM',
                466: 'AMORDEGRC',
                467: 'AMORLINC',
                468: 'CONVERT',
                724: 'SHEETJS',
                469: 'ACCRINT',
                470: 'ACCRINTM',
                471: 'WORKDAY',
                472: 'NETWORKDAYS',
                473: 'GCD',
                474: 'MULTINOMIAL',
                475: 'LCM',
                476: 'FVSCHEDULE',
                477: 'CUBEKPIMEMBER',
                478: 'CUBESET',
                479: 'CUBESETCOUNT',
                480: 'IFERROR',
                481: 'COUNTIFS',
                482: 'SUMIFS',
                483: 'AVERAGEIF',
                484: 'AVERAGEIFS',
            };
            var FtabArgc = {
                2: 1,
                3: 1,
                10: 0,
                15: 1,
                16: 1,
                17: 1,
                18: 1,
                19: 0,
                20: 1,
                21: 1,
                22: 1,
                23: 1,
                24: 1,
                25: 1,
                26: 1,
                27: 2,
                30: 2,
                31: 3,
                32: 1,
                33: 1,
                34: 0,
                35: 0,
                38: 1,
                39: 2,
                40: 3,
                41: 3,
                42: 3,
                43: 3,
                44: 3,
                45: 3,
                47: 3,
                48: 2,
                53: 1,
                61: 3,
                63: 0,
                65: 3,
                66: 3,
                67: 1,
                68: 1,
                69: 1,
                70: 1,
                71: 1,
                72: 1,
                73: 1,
                74: 0,
                75: 1,
                76: 1,
                77: 1,
                79: 2,
                80: 2,
                83: 1,
                85: 0,
                86: 1,
                89: 0,
                90: 1,
                94: 0,
                95: 0,
                97: 2,
                98: 1,
                99: 1,
                101: 3,
                102: 3,
                105: 1,
                106: 1,
                108: 2,
                111: 1,
                112: 1,
                113: 1,
                114: 1,
                117: 2,
                118: 1,
                119: 4,
                121: 1,
                126: 1,
                127: 1,
                128: 1,
                129: 1,
                130: 1,
                131: 1,
                133: 1,
                134: 1,
                135: 1,
                136: 2,
                137: 2,
                138: 2,
                140: 1,
                141: 1,
                142: 3,
                143: 4,
                144: 4,
                161: 1,
                162: 1,
                163: 1,
                164: 1,
                165: 2,
                172: 1,
                175: 2,
                176: 2,
                177: 3,
                178: 2,
                179: 1,
                184: 1,
                186: 1,
                189: 3,
                190: 1,
                195: 3,
                196: 3,
                197: 1,
                198: 1,
                199: 3,
                201: 1,
                207: 4,
                210: 3,
                211: 1,
                212: 2,
                213: 2,
                214: 1,
                215: 1,
                225: 0,
                229: 1,
                230: 1,
                231: 1,
                232: 1,
                233: 1,
                234: 1,
                235: 3,
                244: 1,
                247: 4,
                252: 2,
                257: 1,
                261: 1,
                271: 1,
                273: 4,
                274: 2,
                275: 2,
                276: 2,
                277: 3,
                278: 3,
                279: 1,
                280: 3,
                281: 3,
                282: 3,
                283: 1,
                284: 1,
                285: 2,
                286: 4,
                287: 3,
                288: 2,
                289: 4,
                290: 3,
                291: 3,
                292: 3,
                293: 4,
                294: 1,
                295: 3,
                296: 1,
                297: 3,
                298: 1,
                299: 2,
                300: 3,
                301: 3,
                302: 4,
                303: 2,
                304: 2,
                305: 2,
                306: 2,
                307: 2,
                308: 2,
                309: 3,
                310: 2,
                311: 2,
                312: 2,
                313: 2,
                314: 2,
                315: 2,
                316: 4,
                325: 2,
                326: 2,
                327: 2,
                328: 2,
                331: 2,
                332: 2,
                337: 2,
                342: 1,
                343: 1,
                346: 2,
                347: 1,
                350: 4,
                351: 3,
                352: 1,
                353: 2,
                360: 1,
                368: 1,
                369: 1,
                370: 1,
                371: 1,
                372: 1,
                373: 1,
                374: 1,
                375: 1,
                376: 1,
                377: 1,
                378: 1,
                382: 3,
                385: 1,
                392: 1,
                393: 1,
                396: 2,
                397: 2,
                398: 2,
                399: 1,
                400: 1,
                401: 1,
                402: 1,
                403: 1,
                404: 1,
                405: 1,
                406: 1,
                407: 1,
                408: 1,
                409: 1,
                410: 1,
                414: 4,
                415: 1,
                416: 1,
                417: 2,
                420: 1,
                421: 1,
                422: 2,
                424: 1,
                425: 2,
                426: 2,
                427: 2,
                428: 2,
                430: 3,
                438: 3,
                439: 3,
                440: 3,
                443: 2,
                444: 2,
                445: 2,
                446: 2,
                447: 6,
                448: 6,
                449: 2,
                450: 2,
                464: 2,
                468: 3,
                476: 2,
                479: 1,
                480: 2,
                65535: 0,
            };
            function ods_to_csf_formula(f3) {
                if (f3.slice(0, 3) == 'of:') f3 = f3.slice(3);
                if (f3.charCodeAt(0) == 61) {
                    f3 = f3.slice(1);
                    if (f3.charCodeAt(0) == 61) f3 = f3.slice(1);
                }
                f3 = f3.replace(/COM\.MICROSOFT\./g, '');
                f3 = f3.replace(/\[((?:\.[A-Z]+[0-9]+)(?::\.[A-Z]+[0-9]+)?)\]/g, function ($$, $1) {
                    return $1.replace(/\./g, '');
                });
                f3 = f3.replace(/\[.(#[A-Z]*[?!])\]/g, '$1');
                return f3.replace(/[;~]/g, ',').replace(/\|/g, ';');
            }
            function csf_to_ods_formula(f3) {
                var o = 'of:=' + f3.replace(crefregex, '$1[.$2$3$4$5]').replace(/\]:\[/g, ':');
                return o.replace(/;/g, '|').replace(/,/g, ';');
            }
            function ods_to_csf_3D(r2) {
                var a = r2.split(':');
                var s2 = a[0].split('.')[0];
                return [
                    s2,
                    a[0].split('.')[1] +
                        (a.length > 1 ? ':' + (a[1].split('.')[1] || a[1].split('.')[0]) : ''),
                ];
            }
            function csf_to_ods_3D(r2) {
                return r2.replace(/\./, '!');
            }
            var strs = {};
            var _ssfopts = {};
            var browser_has_Map = typeof Map !== 'undefined';
            function get_sst_id(sst, str, rev) {
                var i2 = 0,
                    len = sst.length;
                if (rev) {
                    if (
                        browser_has_Map
                            ? rev.has(str)
                            : Object.prototype.hasOwnProperty.call(rev, str)
                    ) {
                        var revarr = browser_has_Map ? rev.get(str) : rev[str];
                        for (; i2 < revarr.length; ++i2) {
                            if (sst[revarr[i2]].t === str) {
                                sst.Count++;
                                return revarr[i2];
                            }
                        }
                    }
                } else
                    for (; i2 < len; ++i2) {
                        if (sst[i2].t === str) {
                            sst.Count++;
                            return i2;
                        }
                    }
                sst[len] = { t: str };
                sst.Count++;
                sst.Unique++;
                if (rev) {
                    if (browser_has_Map) {
                        if (!rev.has(str)) rev.set(str, []);
                        rev.get(str).push(len);
                    } else {
                        if (!Object.prototype.hasOwnProperty.call(rev, str)) rev[str] = [];
                        rev[str].push(len);
                    }
                }
                return len;
            }
            function col_obj_w(C, col) {
                var p = { min: C + 1, max: C + 1 };
                var wch = -1;
                if (col.MDW) MDW = col.MDW;
                if (col.width != null) p.customWidth = 1;
                else if (col.wpx != null) wch = px2char(col.wpx);
                else if (col.wch != null) wch = col.wch;
                if (wch > -1) {
                    p.width = char2width(wch);
                    p.customWidth = 1;
                } else if (col.width != null) p.width = col.width;
                if (col.hidden) p.hidden = true;
                if (col.level != null) {
                    p.outlineLevel = p.level = col.level;
                }
                return p;
            }
            function default_margins(margins, mode) {
                if (!margins) return;
                var defs = [0.7, 0.7, 0.75, 0.75, 0.3, 0.3];
                if (mode == 'xlml') defs = [1, 1, 1, 1, 0.5, 0.5];
                if (margins.left == null) margins.left = defs[0];
                if (margins.right == null) margins.right = defs[1];
                if (margins.top == null) margins.top = defs[2];
                if (margins.bottom == null) margins.bottom = defs[3];
                if (margins.header == null) margins.header = defs[4];
                if (margins.footer == null) margins.footer = defs[5];
            }
            function get_cell_style(styles, cell, opts) {
                var z = opts.revssf[cell.z != null ? cell.z : 'General'];
                var i2 = 60,
                    len = styles.length;
                if (z == null && opts.ssf) {
                    for (; i2 < 392; ++i2)
                        if (opts.ssf[i2] == null) {
                            SSF_load(cell.z, i2);
                            opts.ssf[i2] = cell.z;
                            opts.revssf[cell.z] = z = i2;
                            break;
                        }
                }
                for (i2 = 0; i2 != len; ++i2) if (styles[i2].numFmtId === z) return i2;
                styles[len] = {
                    numFmtId: z,
                    fontId: 0,
                    fillId: 0,
                    borderId: 0,
                    xfId: 0,
                    applyNumberFormat: 1,
                };
                return len;
            }
            function safe_format(p, fmtid, fillid, opts, themes, styles) {
                try {
                    if (opts.cellNF) p.z = table_fmt[fmtid];
                } catch (e2) {
                    if (opts.WTF) throw e2;
                }
                if (p.t === 'z' && !opts.cellStyles) return;
                if (p.t === 'd' && typeof p.v === 'string') p.v = parseDate(p.v);
                if ((!opts || opts.cellText !== false) && p.t !== 'z')
                    try {
                        if (table_fmt[fmtid] == null)
                            SSF_load(SSFImplicit[fmtid] || 'General', fmtid);
                        if (p.t === 'e') p.w = p.w || BErr[p.v];
                        else if (fmtid === 0) {
                            if (p.t === 'n') {
                                if ((p.v | 0) === p.v) p.w = p.v.toString(10);
                                else p.w = SSF_general_num(p.v);
                            } else if (p.t === 'd') {
                                var dd = datenum(p.v);
                                if ((dd | 0) === dd) p.w = dd.toString(10);
                                else p.w = SSF_general_num(dd);
                            } else if (p.v === void 0) return '';
                            else p.w = SSF_general(p.v, _ssfopts);
                        } else if (p.t === 'd') p.w = SSF_format(fmtid, datenum(p.v), _ssfopts);
                        else p.w = SSF_format(fmtid, p.v, _ssfopts);
                    } catch (e2) {
                        if (opts.WTF) throw e2;
                    }
                if (!opts.cellStyles) return;
                if (fillid != null)
                    try {
                        p.s = styles.Fills[fillid];
                        if (p.s.fgColor && p.s.fgColor.theme && !p.s.fgColor.rgb) {
                            p.s.fgColor.rgb = rgb_tint(
                                themes.themeElements.clrScheme[p.s.fgColor.theme].rgb,
                                p.s.fgColor.tint || 0,
                            );
                            if (opts.WTF)
                                p.s.fgColor.raw_rgb =
                                    themes.themeElements.clrScheme[p.s.fgColor.theme].rgb;
                        }
                        if (p.s.bgColor && p.s.bgColor.theme) {
                            p.s.bgColor.rgb = rgb_tint(
                                themes.themeElements.clrScheme[p.s.bgColor.theme].rgb,
                                p.s.bgColor.tint || 0,
                            );
                            if (opts.WTF)
                                p.s.bgColor.raw_rgb =
                                    themes.themeElements.clrScheme[p.s.bgColor.theme].rgb;
                        }
                    } catch (e2) {
                        if (opts.WTF && styles.Fills) throw e2;
                    }
            }
            function check_ws(ws, sname, i2) {
                if (ws && ws['!ref']) {
                    var range = safe_decode_range(ws['!ref']);
                    if (range.e.c < range.s.c || range.e.r < range.s.r)
                        throw new Error('Bad range (' + i2 + '): ' + ws['!ref']);
                }
            }
            function parse_ws_xml_dim(ws, s2) {
                var d = safe_decode_range(s2);
                if (d.s.r <= d.e.r && d.s.c <= d.e.c && d.s.r >= 0 && d.s.c >= 0)
                    ws['!ref'] = encode_range(d);
            }
            var mergecregex = /<(?:\w:)?mergeCell ref="[A-Z0-9:]+"\s*[\/]?>/g;
            var sheetdataregex = /<(?:\w+:)?sheetData[^>]*>([\s\S]*)<\/(?:\w+:)?sheetData>/;
            var hlinkregex = /<(?:\w:)?hyperlink [^>]*>/gm;
            var dimregex = /"(\w*:\w*)"/;
            var colregex = /<(?:\w:)?col\b[^>]*[\/]?>/g;
            var afregex = /<(?:\w:)?autoFilter[^>]*([\/]|>([\s\S]*)<\/(?:\w:)?autoFilter)>/g;
            var marginregex = /<(?:\w:)?pageMargins[^>]*\/>/g;
            var sheetprregex = /<(?:\w:)?sheetPr\b(?:[^>a-z][^>]*)?\/>/;
            var sheetprregex2 = /<(?:\w:)?sheetPr[^>]*(?:[\/]|>([\s\S]*)<\/(?:\w:)?sheetPr)>/;
            var svsregex = /<(?:\w:)?sheetViews[^>]*(?:[\/]|>([\s\S]*)<\/(?:\w:)?sheetViews)>/;
            function parse_ws_xml(data2, opts, idx, rels, wb, themes, styles) {
                if (!data2) return data2;
                if (!rels) rels = { '!id': {} };
                if (DENSE != null && opts.dense == null) opts.dense = DENSE;
                var s2 = opts.dense ? [] : {};
                var refguess = { s: { r: 2e6, c: 2e6 }, e: { r: 0, c: 0 } };
                var data1 = '',
                    data22 = '';
                var mtch = data2.match(sheetdataregex);
                if (mtch) {
                    data1 = data2.slice(0, mtch.index);
                    data22 = data2.slice(mtch.index + mtch[0].length);
                } else data1 = data22 = data2;
                var sheetPr = data1.match(sheetprregex);
                if (sheetPr) parse_ws_xml_sheetpr(sheetPr[0], s2, wb, idx);
                else if ((sheetPr = data1.match(sheetprregex2)))
                    parse_ws_xml_sheetpr2(
                        sheetPr[0],
                        sheetPr[1] || '',
                        s2,
                        wb,
                        idx,
                        styles,
                        themes,
                    );
                var ridx = (data1.match(/<(?:\w*:)?dimension/) || { index: -1 }).index;
                if (ridx > 0) {
                    var ref = data1.slice(ridx, ridx + 50).match(dimregex);
                    if (ref) parse_ws_xml_dim(s2, ref[1]);
                }
                var svs = data1.match(svsregex);
                if (svs && svs[1]) parse_ws_xml_sheetviews(svs[1], wb);
                var columns = [];
                if (opts.cellStyles) {
                    var cols = data1.match(colregex);
                    if (cols) parse_ws_xml_cols(columns, cols);
                }
                if (mtch) parse_ws_xml_data(mtch[1], s2, opts, refguess, themes, styles);
                var afilter = data22.match(afregex);
                if (afilter) s2['!autofilter'] = parse_ws_xml_autofilter(afilter[0]);
                var merges = [];
                var _merge = data22.match(mergecregex);
                if (_merge)
                    for (ridx = 0; ridx != _merge.length; ++ridx)
                        merges[ridx] = safe_decode_range(
                            _merge[ridx].slice(_merge[ridx].indexOf('"') + 1),
                        );
                var hlink = data22.match(hlinkregex);
                if (hlink) parse_ws_xml_hlinks(s2, hlink, rels);
                var margins = data22.match(marginregex);
                if (margins) s2['!margins'] = parse_ws_xml_margins(parsexmltag(margins[0]));
                if (!s2['!ref'] && refguess.e.c >= refguess.s.c && refguess.e.r >= refguess.s.r)
                    s2['!ref'] = encode_range(refguess);
                if (opts.sheetRows > 0 && s2['!ref']) {
                    var tmpref = safe_decode_range(s2['!ref']);
                    if (opts.sheetRows <= +tmpref.e.r) {
                        tmpref.e.r = opts.sheetRows - 1;
                        if (tmpref.e.r > refguess.e.r) tmpref.e.r = refguess.e.r;
                        if (tmpref.e.r < tmpref.s.r) tmpref.s.r = tmpref.e.r;
                        if (tmpref.e.c > refguess.e.c) tmpref.e.c = refguess.e.c;
                        if (tmpref.e.c < tmpref.s.c) tmpref.s.c = tmpref.e.c;
                        s2['!fullref'] = s2['!ref'];
                        s2['!ref'] = encode_range(tmpref);
                    }
                }
                if (columns.length > 0) s2['!cols'] = columns;
                if (merges.length > 0) s2['!merges'] = merges;
                return s2;
            }
            function write_ws_xml_merges(merges) {
                if (merges.length === 0) return '';
                var o = '<mergeCells count="' + merges.length + '">';
                for (var i2 = 0; i2 != merges.length; ++i2)
                    o += '<mergeCell ref="' + encode_range(merges[i2]) + '"/>';
                return o + '</mergeCells>';
            }
            function parse_ws_xml_sheetpr(sheetPr, s2, wb, idx) {
                var data2 = parsexmltag(sheetPr);
                if (!wb.Sheets[idx]) wb.Sheets[idx] = {};
                if (data2.codeName) wb.Sheets[idx].CodeName = unescapexml(utf8read(data2.codeName));
            }
            function parse_ws_xml_sheetpr2(sheetPr, body, s2, wb, idx) {
                parse_ws_xml_sheetpr(sheetPr.slice(0, sheetPr.indexOf('>')), s2, wb, idx);
            }
            function write_ws_xml_sheetpr(ws, wb, idx, opts, o) {
                var needed = false;
                var props = {},
                    payload = null;
                if (opts.bookType !== 'xlsx' && wb.vbaraw) {
                    var cname = wb.SheetNames[idx];
                    try {
                        if (wb.Workbook) cname = wb.Workbook.Sheets[idx].CodeName || cname;
                    } catch (e2) {}
                    needed = true;
                    props.codeName = utf8write(escapexml(cname));
                }
                if (ws && ws['!outline']) {
                    var outlineprops = { summaryBelow: 1, summaryRight: 1 };
                    if (ws['!outline'].above) outlineprops.summaryBelow = 0;
                    if (ws['!outline'].left) outlineprops.summaryRight = 0;
                    payload = (payload || '') + writextag('outlinePr', null, outlineprops);
                }
                if (!needed && !payload) return;
                o[o.length] = writextag('sheetPr', payload, props);
            }
            var sheetprot_deffalse = [
                'objects',
                'scenarios',
                'selectLockedCells',
                'selectUnlockedCells',
            ];
            var sheetprot_deftrue = [
                'formatColumns',
                'formatRows',
                'formatCells',
                'insertColumns',
                'insertRows',
                'insertHyperlinks',
                'deleteColumns',
                'deleteRows',
                'sort',
                'autoFilter',
                'pivotTables',
            ];
            function write_ws_xml_protection(sp) {
                var o = { sheet: 1 };
                sheetprot_deffalse.forEach(function (n) {
                    if (sp[n] != null && sp[n]) o[n] = '1';
                });
                sheetprot_deftrue.forEach(function (n) {
                    if (sp[n] != null && !sp[n]) o[n] = '0';
                });
                if (sp.password)
                    o.password = crypto_CreatePasswordVerifier_Method1(sp.password)
                        .toString(16)
                        .toUpperCase();
                return writextag('sheetProtection', null, o);
            }
            function parse_ws_xml_hlinks(s2, data2, rels) {
                var dense = Array.isArray(s2);
                for (var i2 = 0; i2 != data2.length; ++i2) {
                    var val2 = parsexmltag(utf8read(data2[i2]), true);
                    if (!val2.ref) return;
                    var rel = ((rels || {})['!id'] || [])[val2.id];
                    if (rel) {
                        val2.Target = rel.Target;
                        if (val2.location) val2.Target += '#' + unescapexml(val2.location);
                    } else {
                        val2.Target = '#' + unescapexml(val2.location);
                        rel = { Target: val2.Target, TargetMode: 'Internal' };
                    }
                    val2.Rel = rel;
                    if (val2.tooltip) {
                        val2.Tooltip = val2.tooltip;
                        delete val2.tooltip;
                    }
                    var rng = safe_decode_range(val2.ref);
                    for (var R = rng.s.r; R <= rng.e.r; ++R)
                        for (var C = rng.s.c; C <= rng.e.c; ++C) {
                            var addr = encode_cell({ c: C, r: R });
                            if (dense) {
                                if (!s2[R]) s2[R] = [];
                                if (!s2[R][C]) s2[R][C] = { t: 'z', v: void 0 };
                                s2[R][C].l = val2;
                            } else {
                                if (!s2[addr]) s2[addr] = { t: 'z', v: void 0 };
                                s2[addr].l = val2;
                            }
                        }
                }
            }
            function parse_ws_xml_margins(margin) {
                var o = {};
                ['left', 'right', 'top', 'bottom', 'header', 'footer'].forEach(function (k) {
                    if (margin[k]) o[k] = parseFloat(margin[k]);
                });
                return o;
            }
            function write_ws_xml_margins(margin) {
                default_margins(margin);
                return writextag('pageMargins', null, margin);
            }
            function parse_ws_xml_cols(columns, cols) {
                var seencol = false;
                for (var coli = 0; coli != cols.length; ++coli) {
                    var coll = parsexmltag(cols[coli], true);
                    if (coll.hidden) coll.hidden = parsexmlbool(coll.hidden);
                    var colm = parseInt(coll.min, 10) - 1,
                        colM = parseInt(coll.max, 10) - 1;
                    if (coll.outlineLevel) coll.level = +coll.outlineLevel || 0;
                    delete coll.min;
                    delete coll.max;
                    coll.width = +coll.width;
                    if (!seencol && coll.width) {
                        seencol = true;
                        find_mdw_colw(coll.width);
                    }
                    process_col(coll);
                    while (colm <= colM) columns[colm++] = dup(coll);
                }
            }
            function write_ws_xml_cols(ws, cols) {
                var o = ['<cols>'],
                    col;
                for (var i2 = 0; i2 != cols.length; ++i2) {
                    if (!(col = cols[i2])) continue;
                    o[o.length] = writextag('col', null, col_obj_w(i2, col));
                }
                o[o.length] = '</cols>';
                return o.join('');
            }
            function parse_ws_xml_autofilter(data2) {
                var o = { ref: (data2.match(/ref="([^"]*)"/) || [])[1] };
                return o;
            }
            function write_ws_xml_autofilter(data2, ws, wb, idx) {
                var ref = typeof data2.ref == 'string' ? data2.ref : encode_range(data2.ref);
                if (!wb.Workbook) wb.Workbook = { Sheets: [] };
                if (!wb.Workbook.Names) wb.Workbook.Names = [];
                var names = wb.Workbook.Names;
                var range = decode_range(ref);
                if (range.s.r == range.e.r) {
                    range.e.r = decode_range(ws['!ref']).e.r;
                    ref = encode_range(range);
                }
                for (var i2 = 0; i2 < names.length; ++i2) {
                    var name = names[i2];
                    if (name.Name != '_xlnm._FilterDatabase') continue;
                    if (name.Sheet != idx) continue;
                    name.Ref = "'" + wb.SheetNames[idx] + "'!" + ref;
                    break;
                }
                if (i2 == names.length)
                    names.push({
                        Name: '_xlnm._FilterDatabase',
                        Sheet: idx,
                        Ref: "'" + wb.SheetNames[idx] + "'!" + ref,
                    });
                return writextag('autoFilter', null, { ref });
            }
            var sviewregex = /<(?:\w:)?sheetView(?:[^>a-z][^>]*)?\/?>/;
            function parse_ws_xml_sheetviews(data2, wb) {
                if (!wb.Views) wb.Views = [{}];
                (data2.match(sviewregex) || []).forEach(function (r2, i2) {
                    var tag = parsexmltag(r2);
                    if (!wb.Views[i2]) wb.Views[i2] = {};
                    if (+tag.zoomScale) wb.Views[i2].zoom = +tag.zoomScale;
                    if (parsexmlbool(tag.rightToLeft)) wb.Views[i2].RTL = true;
                });
            }
            function write_ws_xml_sheetviews(ws, opts, idx, wb) {
                var sview = { workbookViewId: '0' };
                if ((((wb || {}).Workbook || {}).Views || [])[0])
                    sview.rightToLeft = wb.Workbook.Views[0].RTL ? '1' : '0';
                return writextag('sheetViews', writextag('sheetView', null, sview), {});
            }
            function write_ws_xml_cell(cell, ref, ws, opts) {
                if (cell.c) ws['!comments'].push([ref, cell.c]);
                if (
                    (cell.v === void 0 && typeof cell.f !== 'string') ||
                    (cell.t === 'z' && !cell.f)
                )
                    return '';
                var vv = '';
                var oldt = cell.t,
                    oldv = cell.v;
                if (cell.t !== 'z')
                    switch (cell.t) {
                        case 'b':
                            vv = cell.v ? '1' : '0';
                            break;
                        case 'n':
                            vv = '' + cell.v;
                            break;
                        case 'e':
                            vv = BErr[cell.v];
                            break;
                        case 'd':
                            if (opts && opts.cellDates) vv = parseDate(cell.v, -1).toISOString();
                            else {
                                cell = dup(cell);
                                cell.t = 'n';
                                vv = '' + (cell.v = datenum(parseDate(cell.v)));
                            }
                            if (typeof cell.z === 'undefined') cell.z = table_fmt[14];
                            break;
                        default:
                            vv = cell.v;
                            break;
                    }
                var v = writetag('v', escapexml(vv)),
                    o = { r: ref };
                var os2 = get_cell_style(opts.cellXfs, cell, opts);
                if (os2 !== 0) o.s = os2;
                switch (cell.t) {
                    case 'n':
                        break;
                    case 'd':
                        o.t = 'd';
                        break;
                    case 'b':
                        o.t = 'b';
                        break;
                    case 'e':
                        o.t = 'e';
                        break;
                    case 'z':
                        break;
                    default:
                        if (cell.v == null) {
                            delete cell.t;
                            break;
                        }
                        if (cell.v.length > 32767)
                            throw new Error('Text length must not exceed 32767 characters');
                        if (opts && opts.bookSST) {
                            v = writetag(
                                'v',
                                '' + get_sst_id(opts.Strings, cell.v, opts.revStrings),
                            );
                            o.t = 's';
                            break;
                        }
                        o.t = 'str';
                        break;
                }
                if (cell.t != oldt) {
                    cell.t = oldt;
                    cell.v = oldv;
                }
                if (typeof cell.f == 'string' && cell.f) {
                    var ff =
                        cell.F && cell.F.slice(0, ref.length) == ref
                            ? { t: 'array', ref: cell.F }
                            : null;
                    v = writextag('f', escapexml(cell.f), ff) + (cell.v != null ? v : '');
                }
                if (cell.l) ws['!links'].push([ref, cell.l]);
                if (cell.D) o.cm = 1;
                return writextag('c', v, o);
            }
            var parse_ws_xml_data = (function () {
                var cellregex = /<(?:\w+:)?c[ \/>]/,
                    rowregex = /<\/(?:\w+:)?row>/;
                var rregex = /r=["']([^"']*)["']/,
                    isregex = /<(?:\w+:)?is>([\S\s]*?)<\/(?:\w+:)?is>/;
                var refregex = /ref=["']([^"']*)["']/;
                var match_v = matchtag('v'),
                    match_f = matchtag('f');
                return function parse_ws_xml_data2(sdata, s2, opts, guess, themes, styles) {
                    var ri = 0,
                        x2 = '',
                        cells = [],
                        cref = [],
                        idx = 0,
                        i2 = 0,
                        cc = 0,
                        d = '',
                        p;
                    var tag,
                        tagr = 0,
                        tagc = 0;
                    var sstr, ftag;
                    var fmtid = 0,
                        fillid = 0;
                    var do_format = Array.isArray(styles.CellXf),
                        cf;
                    var arrayf = [];
                    var sharedf = [];
                    var dense = Array.isArray(s2);
                    var rows = [],
                        rowobj = {},
                        rowrite = false;
                    var sheetStubs = !!opts.sheetStubs;
                    for (
                        var marr = sdata.split(rowregex), mt = 0, marrlen = marr.length;
                        mt != marrlen;
                        ++mt
                    ) {
                        x2 = marr[mt].trim();
                        var xlen = x2.length;
                        if (xlen === 0) continue;
                        var rstarti = 0;
                        outa: for (ri = 0; ri < xlen; ++ri)
                            switch (
                                /*x.charCodeAt(ri)*/
                                x2[ri]
                            ) {
                                case '>':
                                    if (
                                        /*x.charCodeAt(ri-1) != 47*/
                                        x2[ri - 1] != '/'
                                    ) {
                                        ++ri;
                                        break outa;
                                    }
                                    if (opts && opts.cellStyles) {
                                        tag = parsexmltag(x2.slice(rstarti, ri), true);
                                        tagr = tag.r != null ? parseInt(tag.r, 10) : tagr + 1;
                                        tagc = -1;
                                        if (opts.sheetRows && opts.sheetRows < tagr) continue;
                                        rowobj = {};
                                        rowrite = false;
                                        if (tag.ht) {
                                            rowrite = true;
                                            rowobj.hpt = parseFloat(tag.ht);
                                            rowobj.hpx = pt2px(rowobj.hpt);
                                        }
                                        if (tag.hidden == '1') {
                                            rowrite = true;
                                            rowobj.hidden = true;
                                        }
                                        if (tag.outlineLevel != null) {
                                            rowrite = true;
                                            rowobj.level = +tag.outlineLevel;
                                        }
                                        if (rowrite) rows[tagr - 1] = rowobj;
                                    }
                                    break;
                                case '<':
                                    rstarti = ri;
                                    break;
                            }
                        if (rstarti >= ri) break;
                        tag = parsexmltag(x2.slice(rstarti, ri), true);
                        tagr = tag.r != null ? parseInt(tag.r, 10) : tagr + 1;
                        tagc = -1;
                        if (opts.sheetRows && opts.sheetRows < tagr) continue;
                        if (guess.s.r > tagr - 1) guess.s.r = tagr - 1;
                        if (guess.e.r < tagr - 1) guess.e.r = tagr - 1;
                        if (opts && opts.cellStyles) {
                            rowobj = {};
                            rowrite = false;
                            if (tag.ht) {
                                rowrite = true;
                                rowobj.hpt = parseFloat(tag.ht);
                                rowobj.hpx = pt2px(rowobj.hpt);
                            }
                            if (tag.hidden == '1') {
                                rowrite = true;
                                rowobj.hidden = true;
                            }
                            if (tag.outlineLevel != null) {
                                rowrite = true;
                                rowobj.level = +tag.outlineLevel;
                            }
                            if (rowrite) rows[tagr - 1] = rowobj;
                        }
                        cells = x2.slice(ri).split(cellregex);
                        for (var rslice = 0; rslice != cells.length; ++rslice)
                            if (cells[rslice].trim().charAt(0) != '<') break;
                        cells = cells.slice(rslice);
                        for (ri = 0; ri != cells.length; ++ri) {
                            x2 = cells[ri].trim();
                            if (x2.length === 0) continue;
                            cref = x2.match(rregex);
                            idx = ri;
                            i2 = 0;
                            cc = 0;
                            x2 = '<c ' + (x2.slice(0, 1) == '<' ? '>' : '') + x2;
                            if (cref != null && cref.length === 2) {
                                idx = 0;
                                d = cref[1];
                                for (i2 = 0; i2 != d.length; ++i2) {
                                    if ((cc = d.charCodeAt(i2) - 64) < 1 || cc > 26) break;
                                    idx = 26 * idx + cc;
                                }
                                --idx;
                                tagc = idx;
                            } else ++tagc;
                            for (i2 = 0; i2 != x2.length; ++i2) if (x2.charCodeAt(i2) === 62) break;
                            ++i2;
                            tag = parsexmltag(x2.slice(0, i2), true);
                            if (!tag.r) tag.r = encode_cell({ r: tagr - 1, c: tagc });
                            d = x2.slice(i2);
                            p = { t: '' };
                            if ((cref = d.match(match_v)) != null && cref[1] !== '')
                                p.v = unescapexml(cref[1]);
                            if (opts.cellFormula) {
                                if ((cref = d.match(match_f)) != null && cref[1] !== '') {
                                    p.f = unescapexml(utf8read(cref[1])).replace(/\r\n/g, '\n');
                                    if (!opts.xlfn) p.f = _xlfn(p.f);
                                    if (cref[0].indexOf('t="array"') > -1) {
                                        p.F = (d.match(refregex) || [])[1];
                                        if (p.F.indexOf(':') > -1)
                                            arrayf.push([safe_decode_range(p.F), p.F]);
                                    } else if (cref[0].indexOf('t="shared"') > -1) {
                                        ftag = parsexmltag(cref[0]);
                                        var ___f = unescapexml(utf8read(cref[1]));
                                        if (!opts.xlfn) ___f = _xlfn(___f);
                                        sharedf[parseInt(ftag.si, 10)] = [ftag, ___f, tag.r];
                                    }
                                } else if ((cref = d.match(/<f[^>]*\/>/))) {
                                    ftag = parsexmltag(cref[0]);
                                    if (sharedf[ftag.si])
                                        p.f = shift_formula_xlsx(
                                            sharedf[ftag.si][1],
                                            sharedf[ftag.si][2],
                                            tag.r,
                                        );
                                }
                                var _tag = decode_cell(tag.r);
                                for (i2 = 0; i2 < arrayf.length; ++i2)
                                    if (
                                        _tag.r >= arrayf[i2][0].s.r &&
                                        _tag.r <= arrayf[i2][0].e.r
                                    ) {
                                        if (
                                            _tag.c >= arrayf[i2][0].s.c &&
                                            _tag.c <= arrayf[i2][0].e.c
                                        )
                                            p.F = arrayf[i2][1];
                                    }
                            }
                            if (tag.t == null && p.v === void 0) {
                                if (p.f || p.F) {
                                    p.v = 0;
                                    p.t = 'n';
                                } else if (!sheetStubs) continue;
                                else p.t = 'z';
                            } else p.t = tag.t || 'n';
                            if (guess.s.c > tagc) guess.s.c = tagc;
                            if (guess.e.c < tagc) guess.e.c = tagc;
                            switch (p.t) {
                                case 'n':
                                    if (p.v == '' || p.v == null) {
                                        if (!sheetStubs) continue;
                                        p.t = 'z';
                                    } else p.v = parseFloat(p.v);
                                    break;
                                case 's':
                                    if (typeof p.v == 'undefined') {
                                        if (!sheetStubs) continue;
                                        p.t = 'z';
                                    } else {
                                        sstr = strs[parseInt(p.v, 10)];
                                        p.v = sstr.t;
                                        p.r = sstr.r;
                                        if (opts.cellHTML) p.h = sstr.h;
                                    }
                                    break;
                                case 'str':
                                    p.t = 's';
                                    p.v = p.v != null ? utf8read(p.v) : '';
                                    if (opts.cellHTML) p.h = escapehtml(p.v);
                                    break;
                                case 'inlineStr':
                                    cref = d.match(isregex);
                                    p.t = 's';
                                    if (cref != null && (sstr = parse_si(cref[1]))) {
                                        p.v = sstr.t;
                                        if (opts.cellHTML) p.h = sstr.h;
                                    } else p.v = '';
                                    break;
                                case 'b':
                                    p.v = parsexmlbool(p.v);
                                    break;
                                case 'd':
                                    if (opts.cellDates) p.v = parseDate(p.v, 1);
                                    else {
                                        p.v = datenum(parseDate(p.v, 1));
                                        p.t = 'n';
                                    }
                                    break;
                                case 'e':
                                    if (!opts || opts.cellText !== false) p.w = p.v;
                                    p.v = RBErr[p.v];
                                    break;
                            }
                            fmtid = fillid = 0;
                            cf = null;
                            if (do_format && tag.s !== void 0) {
                                cf = styles.CellXf[tag.s];
                                if (cf != null) {
                                    if (cf.numFmtId != null) fmtid = cf.numFmtId;
                                    if (opts.cellStyles) {
                                        if (cf.fillId != null) fillid = cf.fillId;
                                    }
                                }
                            }
                            safe_format(p, fmtid, fillid, opts, themes, styles);
                            if (
                                opts.cellDates &&
                                do_format &&
                                p.t == 'n' &&
                                fmt_is_date(table_fmt[fmtid])
                            ) {
                                p.t = 'd';
                                p.v = numdate(p.v);
                            }
                            if (tag.cm && opts.xlmeta) {
                                var cm = (opts.xlmeta.Cell || [])[+tag.cm - 1];
                                if (cm && cm.type == 'XLDAPR') p.D = true;
                            }
                            if (dense) {
                                var _r = decode_cell(tag.r);
                                if (!s2[_r.r]) s2[_r.r] = [];
                                s2[_r.r][_r.c] = p;
                            } else s2[tag.r] = p;
                        }
                    }
                    if (rows.length > 0) s2['!rows'] = rows;
                };
            })();
            function write_ws_xml_data(ws, opts, idx, wb) {
                var o = [],
                    r2 = [],
                    range = safe_decode_range(ws['!ref']),
                    cell = '',
                    ref,
                    rr = '',
                    cols = [],
                    R = 0,
                    C = 0,
                    rows = ws['!rows'];
                var dense = Array.isArray(ws);
                var params = { r: rr },
                    row,
                    height = -1;
                for (C = range.s.c; C <= range.e.c; ++C) cols[C] = encode_col(C);
                for (R = range.s.r; R <= range.e.r; ++R) {
                    r2 = [];
                    rr = encode_row(R);
                    for (C = range.s.c; C <= range.e.c; ++C) {
                        ref = cols[C] + rr;
                        var _cell = dense ? (ws[R] || [])[C] : ws[ref];
                        if (_cell === void 0) continue;
                        if ((cell = write_ws_xml_cell(_cell, ref, ws, opts, idx, wb)) != null)
                            r2.push(cell);
                    }
                    if (r2.length > 0 || (rows && rows[R])) {
                        params = { r: rr };
                        if (rows && rows[R]) {
                            row = rows[R];
                            if (row.hidden) params.hidden = 1;
                            height = -1;
                            if (row.hpx) height = px2pt(row.hpx);
                            else if (row.hpt) height = row.hpt;
                            if (height > -1) {
                                params.ht = height;
                                params.customHeight = 1;
                            }
                            if (row.level) {
                                params.outlineLevel = row.level;
                            }
                        }
                        o[o.length] = writextag('row', r2.join(''), params);
                    }
                }
                if (rows)
                    for (; R < rows.length; ++R) {
                        if (rows && rows[R]) {
                            params = { r: R + 1 };
                            row = rows[R];
                            if (row.hidden) params.hidden = 1;
                            height = -1;
                            if (row.hpx) height = px2pt(row.hpx);
                            else if (row.hpt) height = row.hpt;
                            if (height > -1) {
                                params.ht = height;
                                params.customHeight = 1;
                            }
                            if (row.level) {
                                params.outlineLevel = row.level;
                            }
                            o[o.length] = writextag('row', '', params);
                        }
                    }
                return o.join('');
            }
            function write_ws_xml(idx, opts, wb, rels) {
                var o = [
                    XML_HEADER,
                    writextag('worksheet', null, {
                        xmlns: XMLNS_main[0],
                        'xmlns:r': XMLNS.r,
                    }),
                ];
                var s2 = wb.SheetNames[idx],
                    sidx = 0,
                    rdata = '';
                var ws = wb.Sheets[s2];
                if (ws == null) ws = {};
                var ref = ws['!ref'] || 'A1';
                var range = safe_decode_range(ref);
                if (range.e.c > 16383 || range.e.r > 1048575) {
                    if (opts.WTF)
                        throw new Error('Range ' + ref + ' exceeds format limit A1:XFD1048576');
                    range.e.c = Math.min(range.e.c, 16383);
                    range.e.r = Math.min(range.e.c, 1048575);
                    ref = encode_range(range);
                }
                if (!rels) rels = {};
                ws['!comments'] = [];
                var _drawing = [];
                write_ws_xml_sheetpr(ws, wb, idx, opts, o);
                o[o.length] = writextag('dimension', null, { ref: ref });
                o[o.length] = write_ws_xml_sheetviews(ws, opts, idx, wb);
                if (opts.sheetFormat)
                    o[o.length] = writextag('sheetFormatPr', null, {
                        defaultRowHeight: opts.sheetFormat.defaultRowHeight || '16',
                        baseColWidth: opts.sheetFormat.baseColWidth || '10',
                        outlineLevelRow: opts.sheetFormat.outlineLevelRow || '7',
                    });
                if (ws['!cols'] != null && ws['!cols'].length > 0)
                    o[o.length] = write_ws_xml_cols(ws, ws['!cols']);
                o[(sidx = o.length)] = '<sheetData/>';
                ws['!links'] = [];
                if (ws['!ref'] != null) {
                    rdata = write_ws_xml_data(ws, opts, idx, wb, rels);
                    if (rdata.length > 0) o[o.length] = rdata;
                }
                if (o.length > sidx + 1) {
                    o[o.length] = '</sheetData>';
                    o[sidx] = o[sidx].replace('/>', '>');
                }
                if (ws['!protect']) o[o.length] = write_ws_xml_protection(ws['!protect']);
                if (ws['!autofilter'] != null)
                    o[o.length] = write_ws_xml_autofilter(ws['!autofilter'], ws, wb, idx);
                if (ws['!merges'] != null && ws['!merges'].length > 0)
                    o[o.length] = write_ws_xml_merges(ws['!merges']);
                var relc = -1,
                    rel,
                    rId = -1;
                if (ws['!links'].length > 0) {
                    o[o.length] = '<hyperlinks>';
                    ws['!links'].forEach(function (l) {
                        if (!l[1].Target) return;
                        rel = { ref: l[0] };
                        if (l[1].Target.charAt(0) != '#') {
                            rId = add_rels(
                                rels,
                                -1,
                                escapexml(l[1].Target).replace(/#.*$/, ''),
                                RELS.HLINK,
                            );
                            rel['r:id'] = 'rId' + rId;
                        }
                        if ((relc = l[1].Target.indexOf('#')) > -1)
                            rel.location = escapexml(l[1].Target.slice(relc + 1));
                        if (l[1].Tooltip) rel.tooltip = escapexml(l[1].Tooltip);
                        o[o.length] = writextag('hyperlink', null, rel);
                    });
                    o[o.length] = '</hyperlinks>';
                }
                delete ws['!links'];
                if (ws['!margins'] != null) o[o.length] = write_ws_xml_margins(ws['!margins']);
                if (!opts || opts.ignoreEC || opts.ignoreEC == void 0)
                    o[o.length] = writetag(
                        'ignoredErrors',
                        writextag('ignoredError', null, { numberStoredAsText: 1, sqref: ref }),
                    );
                if (_drawing.length > 0) {
                    rId = add_rels(rels, -1, '../drawings/drawing' + (idx + 1) + '.xml', RELS.DRAW);
                    o[o.length] = writextag('drawing', null, { 'r:id': 'rId' + rId });
                    ws['!drawing'] = _drawing;
                }
                if (ws['!comments'].length > 0) {
                    rId = add_rels(
                        rels,
                        -1,
                        '../drawings/vmlDrawing' + (idx + 1) + '.vml',
                        RELS.VML,
                    );
                    o[o.length] = writextag('legacyDrawing', null, { 'r:id': 'rId' + rId });
                    ws['!legacy'] = rId;
                }
                if (o.length > 1) {
                    o[o.length] = '</worksheet>';
                    o[1] = o[1].replace('/>', '>');
                }
                return o.join('');
            }
            function parse_BrtRowHdr(data2, length) {
                var z = {};
                var tgt = data2.l + length;
                z.r = data2.read_shift(4);
                data2.l += 4;
                var miyRw = data2.read_shift(2);
                data2.l += 1;
                var flags = data2.read_shift(1);
                data2.l = tgt;
                if (flags & 7) z.level = flags & 7;
                if (flags & 16) z.hidden = true;
                if (flags & 32) z.hpt = miyRw / 20;
                return z;
            }
            function write_BrtRowHdr(R, range, ws) {
                var o = new_buf(17 + 8 * 16);
                var row = (ws['!rows'] || [])[R] || {};
                o.write_shift(4, R);
                o.write_shift(4, 0);
                var miyRw = 320;
                if (row.hpx) miyRw = px2pt(row.hpx) * 20;
                else if (row.hpt) miyRw = row.hpt * 20;
                o.write_shift(2, miyRw);
                o.write_shift(1, 0);
                var flags = 0;
                if (row.level) flags |= row.level;
                if (row.hidden) flags |= 16;
                if (row.hpx || row.hpt) flags |= 32;
                o.write_shift(1, flags);
                o.write_shift(1, 0);
                var ncolspan = 0,
                    lcs = o.l;
                o.l += 4;
                var caddr = { r: R, c: 0 };
                for (var i2 = 0; i2 < 16; ++i2) {
                    if (range.s.c > (i2 + 1) << 10 || range.e.c < i2 << 10) continue;
                    var first2 = -1,
                        last2 = -1;
                    for (var j = i2 << 10; j < (i2 + 1) << 10; ++j) {
                        caddr.c = j;
                        var cell = Array.isArray(ws)
                            ? (ws[caddr.r] || [])[caddr.c]
                            : ws[encode_cell(caddr)];
                        if (cell) {
                            if (first2 < 0) first2 = j;
                            last2 = j;
                        }
                    }
                    if (first2 < 0) continue;
                    ++ncolspan;
                    o.write_shift(4, first2);
                    o.write_shift(4, last2);
                }
                var l = o.l;
                o.l = lcs;
                o.write_shift(4, ncolspan);
                o.l = l;
                return o.length > o.l ? o.slice(0, o.l) : o;
            }
            function write_row_header(ba, ws, range, R) {
                var o = write_BrtRowHdr(R, range, ws);
                if (o.length > 17 || (ws['!rows'] || [])[R]) write_record(ba, 0, o);
            }
            var parse_BrtWsDim = parse_UncheckedRfX;
            var write_BrtWsDim = write_UncheckedRfX;
            function parse_BrtWsFmtInfo() {}
            function parse_BrtWsProp(data2, length) {
                var z = {};
                var f3 = data2[data2.l];
                ++data2.l;
                z.above = !(f3 & 64);
                z.left = !(f3 & 128);
                data2.l += 18;
                z.name = parse_XLSBCodeName(data2, length - 19);
                return z;
            }
            function write_BrtWsProp(str, outl, o) {
                if (o == null) o = new_buf(84 + 4 * str.length);
                var f3 = 192;
                if (outl) {
                    if (outl.above) f3 &= ~64;
                    if (outl.left) f3 &= ~128;
                }
                o.write_shift(1, f3);
                for (var i2 = 1; i2 < 3; ++i2) o.write_shift(1, 0);
                write_BrtColor({ auto: 1 }, o);
                o.write_shift(-4, -1);
                o.write_shift(-4, -1);
                write_XLSBCodeName(str, o);
                return o.slice(0, o.l);
            }
            function parse_BrtCellBlank(data2) {
                var cell = parse_XLSBCell(data2);
                return [cell];
            }
            function write_BrtCellBlank(cell, ncell, o) {
                if (o == null) o = new_buf(8);
                return write_XLSBCell(ncell, o);
            }
            function parse_BrtShortBlank(data2) {
                var cell = parse_XLSBShortCell(data2);
                return [cell];
            }
            function write_BrtShortBlank(cell, ncell, o) {
                if (o == null) o = new_buf(4);
                return write_XLSBShortCell(ncell, o);
            }
            function parse_BrtCellBool(data2) {
                var cell = parse_XLSBCell(data2);
                var fBool = data2.read_shift(1);
                return [cell, fBool, 'b'];
            }
            function write_BrtCellBool(cell, ncell, o) {
                if (o == null) o = new_buf(9);
                write_XLSBCell(ncell, o);
                o.write_shift(1, cell.v ? 1 : 0);
                return o;
            }
            function parse_BrtShortBool(data2) {
                var cell = parse_XLSBShortCell(data2);
                var fBool = data2.read_shift(1);
                return [cell, fBool, 'b'];
            }
            function write_BrtShortBool(cell, ncell, o) {
                if (o == null) o = new_buf(5);
                write_XLSBShortCell(ncell, o);
                o.write_shift(1, cell.v ? 1 : 0);
                return o;
            }
            function parse_BrtCellError(data2) {
                var cell = parse_XLSBCell(data2);
                var bError = data2.read_shift(1);
                return [cell, bError, 'e'];
            }
            function write_BrtCellError(cell, ncell, o) {
                if (o == null) o = new_buf(9);
                write_XLSBCell(ncell, o);
                o.write_shift(1, cell.v);
                return o;
            }
            function parse_BrtShortError(data2) {
                var cell = parse_XLSBShortCell(data2);
                var bError = data2.read_shift(1);
                return [cell, bError, 'e'];
            }
            function write_BrtShortError(cell, ncell, o) {
                if (o == null) o = new_buf(8);
                write_XLSBShortCell(ncell, o);
                o.write_shift(1, cell.v);
                o.write_shift(2, 0);
                o.write_shift(1, 0);
                return o;
            }
            function parse_BrtCellIsst(data2) {
                var cell = parse_XLSBCell(data2);
                var isst = data2.read_shift(4);
                return [cell, isst, 's'];
            }
            function write_BrtCellIsst(cell, ncell, o) {
                if (o == null) o = new_buf(12);
                write_XLSBCell(ncell, o);
                o.write_shift(4, ncell.v);
                return o;
            }
            function parse_BrtShortIsst(data2) {
                var cell = parse_XLSBShortCell(data2);
                var isst = data2.read_shift(4);
                return [cell, isst, 's'];
            }
            function write_BrtShortIsst(cell, ncell, o) {
                if (o == null) o = new_buf(8);
                write_XLSBShortCell(ncell, o);
                o.write_shift(4, ncell.v);
                return o;
            }
            function parse_BrtCellReal(data2) {
                var cell = parse_XLSBCell(data2);
                var value = parse_Xnum(data2);
                return [cell, value, 'n'];
            }
            function write_BrtCellReal(cell, ncell, o) {
                if (o == null) o = new_buf(16);
                write_XLSBCell(ncell, o);
                write_Xnum(cell.v, o);
                return o;
            }
            function parse_BrtShortReal(data2) {
                var cell = parse_XLSBShortCell(data2);
                var value = parse_Xnum(data2);
                return [cell, value, 'n'];
            }
            function write_BrtShortReal(cell, ncell, o) {
                if (o == null) o = new_buf(12);
                write_XLSBShortCell(ncell, o);
                write_Xnum(cell.v, o);
                return o;
            }
            function parse_BrtCellRk(data2) {
                var cell = parse_XLSBCell(data2);
                var value = parse_RkNumber(data2);
                return [cell, value, 'n'];
            }
            function write_BrtCellRk(cell, ncell, o) {
                if (o == null) o = new_buf(12);
                write_XLSBCell(ncell, o);
                write_RkNumber(cell.v, o);
                return o;
            }
            function parse_BrtShortRk(data2) {
                var cell = parse_XLSBShortCell(data2);
                var value = parse_RkNumber(data2);
                return [cell, value, 'n'];
            }
            function write_BrtShortRk(cell, ncell, o) {
                if (o == null) o = new_buf(8);
                write_XLSBShortCell(ncell, o);
                write_RkNumber(cell.v, o);
                return o;
            }
            function parse_BrtCellRString(data2) {
                var cell = parse_XLSBCell(data2);
                var value = parse_RichStr(data2);
                return [cell, value, 'is'];
            }
            function parse_BrtCellSt(data2) {
                var cell = parse_XLSBCell(data2);
                var value = parse_XLWideString(data2);
                return [cell, value, 'str'];
            }
            function write_BrtCellSt(cell, ncell, o) {
                if (o == null) o = new_buf(12 + 4 * cell.v.length);
                write_XLSBCell(ncell, o);
                write_XLWideString(cell.v, o);
                return o.length > o.l ? o.slice(0, o.l) : o;
            }
            function parse_BrtShortSt(data2) {
                var cell = parse_XLSBShortCell(data2);
                var value = parse_XLWideString(data2);
                return [cell, value, 'str'];
            }
            function write_BrtShortSt(cell, ncell, o) {
                if (o == null) o = new_buf(8 + 4 * cell.v.length);
                write_XLSBShortCell(ncell, o);
                write_XLWideString(cell.v, o);
                return o.length > o.l ? o.slice(0, o.l) : o;
            }
            function parse_BrtFmlaBool(data2, length, opts) {
                var end2 = data2.l + length;
                var cell = parse_XLSBCell(data2);
                cell.r = opts['!row'];
                var value = data2.read_shift(1);
                var o = [cell, value, 'b'];
                if (opts.cellFormula) {
                    data2.l += 2;
                    var formula = parse_XLSBCellParsedFormula(data2, end2 - data2.l, opts);
                    o[3] = stringify_formula(formula, null, cell, opts.supbooks, opts);
                } else data2.l = end2;
                return o;
            }
            function parse_BrtFmlaError(data2, length, opts) {
                var end2 = data2.l + length;
                var cell = parse_XLSBCell(data2);
                cell.r = opts['!row'];
                var value = data2.read_shift(1);
                var o = [cell, value, 'e'];
                if (opts.cellFormula) {
                    data2.l += 2;
                    var formula = parse_XLSBCellParsedFormula(data2, end2 - data2.l, opts);
                    o[3] = stringify_formula(formula, null, cell, opts.supbooks, opts);
                } else data2.l = end2;
                return o;
            }
            function parse_BrtFmlaNum(data2, length, opts) {
                var end2 = data2.l + length;
                var cell = parse_XLSBCell(data2);
                cell.r = opts['!row'];
                var value = parse_Xnum(data2);
                var o = [cell, value, 'n'];
                if (opts.cellFormula) {
                    data2.l += 2;
                    var formula = parse_XLSBCellParsedFormula(data2, end2 - data2.l, opts);
                    o[3] = stringify_formula(formula, null, cell, opts.supbooks, opts);
                } else data2.l = end2;
                return o;
            }
            function parse_BrtFmlaString(data2, length, opts) {
                var end2 = data2.l + length;
                var cell = parse_XLSBCell(data2);
                cell.r = opts['!row'];
                var value = parse_XLWideString(data2);
                var o = [cell, value, 'str'];
                if (opts.cellFormula) {
                    data2.l += 2;
                    var formula = parse_XLSBCellParsedFormula(data2, end2 - data2.l, opts);
                    o[3] = stringify_formula(formula, null, cell, opts.supbooks, opts);
                } else data2.l = end2;
                return o;
            }
            var parse_BrtMergeCell = parse_UncheckedRfX;
            var write_BrtMergeCell = write_UncheckedRfX;
            function write_BrtBeginMergeCells(cnt, o) {
                if (o == null) o = new_buf(4);
                o.write_shift(4, cnt);
                return o;
            }
            function parse_BrtHLink(data2, length) {
                var end2 = data2.l + length;
                var rfx = parse_UncheckedRfX(data2, 16);
                var relId = parse_XLNullableWideString(data2);
                var loc = parse_XLWideString(data2);
                var tooltip = parse_XLWideString(data2);
                var display = parse_XLWideString(data2);
                data2.l = end2;
                var o = { rfx, relId, loc, display };
                if (tooltip) o.Tooltip = tooltip;
                return o;
            }
            function write_BrtHLink(l, rId) {
                var o = new_buf(50 + 4 * (l[1].Target.length + (l[1].Tooltip || '').length));
                write_UncheckedRfX({ s: decode_cell(l[0]), e: decode_cell(l[0]) }, o);
                write_RelID('rId' + rId, o);
                var locidx = l[1].Target.indexOf('#');
                var loc = locidx == -1 ? '' : l[1].Target.slice(locidx + 1);
                write_XLWideString(loc || '', o);
                write_XLWideString(l[1].Tooltip || '', o);
                write_XLWideString('', o);
                return o.slice(0, o.l);
            }
            function parse_BrtPane() {}
            function parse_BrtArrFmla(data2, length, opts) {
                var end2 = data2.l + length;
                var rfx = parse_RfX(data2, 16);
                var fAlwaysCalc = data2.read_shift(1);
                var o = [rfx];
                o[2] = fAlwaysCalc;
                if (opts.cellFormula) {
                    var formula = parse_XLSBArrayParsedFormula(data2, end2 - data2.l, opts);
                    o[1] = formula;
                } else data2.l = end2;
                return o;
            }
            function parse_BrtShrFmla(data2, length, opts) {
                var end2 = data2.l + length;
                var rfx = parse_UncheckedRfX(data2, 16);
                var o = [rfx];
                if (opts.cellFormula) {
                    var formula = parse_XLSBSharedParsedFormula(data2, end2 - data2.l, opts);
                    o[1] = formula;
                    data2.l = end2;
                } else data2.l = end2;
                return o;
            }
            function write_BrtColInfo(C, col, o) {
                if (o == null) o = new_buf(18);
                var p = col_obj_w(C, col);
                o.write_shift(-4, C);
                o.write_shift(-4, C);
                o.write_shift(4, (p.width || 10) * 256);
                o.write_shift(
                    4,
                    0,
                    /*ixfe*/
                );
                var flags = 0;
                if (col.hidden) flags |= 1;
                if (typeof p.width == 'number') flags |= 2;
                if (col.level) flags |= col.level << 8;
                o.write_shift(2, flags);
                return o;
            }
            var BrtMarginKeys = ['left', 'right', 'top', 'bottom', 'header', 'footer'];
            function parse_BrtMargins(data2) {
                var margins = {};
                BrtMarginKeys.forEach(function (k) {
                    margins[k] = parse_Xnum(data2, 8);
                });
                return margins;
            }
            function write_BrtMargins(margins, o) {
                if (o == null) o = new_buf(6 * 8);
                default_margins(margins);
                BrtMarginKeys.forEach(function (k) {
                    write_Xnum(margins[k], o);
                });
                return o;
            }
            function parse_BrtBeginWsView(data2) {
                var f3 = data2.read_shift(2);
                data2.l += 28;
                return { RTL: f3 & 32 };
            }
            function write_BrtBeginWsView(ws, Workbook, o) {
                if (o == null) o = new_buf(30);
                var f3 = 924;
                if ((((Workbook || {}).Views || [])[0] || {}).RTL) f3 |= 32;
                o.write_shift(2, f3);
                o.write_shift(4, 0);
                o.write_shift(4, 0);
                o.write_shift(4, 0);
                o.write_shift(1, 0);
                o.write_shift(1, 0);
                o.write_shift(2, 0);
                o.write_shift(2, 100);
                o.write_shift(2, 0);
                o.write_shift(2, 0);
                o.write_shift(2, 0);
                o.write_shift(4, 0);
                return o;
            }
            function write_BrtCellIgnoreEC(ref) {
                var o = new_buf(24);
                o.write_shift(4, 4);
                o.write_shift(4, 1);
                write_UncheckedRfX(ref, o);
                return o;
            }
            function write_BrtSheetProtection(sp, o) {
                if (o == null) o = new_buf(16 * 4 + 2);
                o.write_shift(
                    2,
                    sp.password ? crypto_CreatePasswordVerifier_Method1(sp.password) : 0,
                );
                o.write_shift(4, 1);
                [
                    ['objects', false],
                    // fObjects
                    ['scenarios', false],
                    // fScenarios
                    ['formatCells', true],
                    // fFormatCells
                    ['formatColumns', true],
                    // fFormatColumns
                    ['formatRows', true],
                    // fFormatRows
                    ['insertColumns', true],
                    // fInsertColumns
                    ['insertRows', true],
                    // fInsertRows
                    ['insertHyperlinks', true],
                    // fInsertHyperlinks
                    ['deleteColumns', true],
                    // fDeleteColumns
                    ['deleteRows', true],
                    // fDeleteRows
                    ['selectLockedCells', false],
                    // fSelLockedCells
                    ['sort', true],
                    // fSort
                    ['autoFilter', true],
                    // fAutoFilter
                    ['pivotTables', true],
                    // fPivotTables
                    ['selectUnlockedCells', false],
                    // fSelUnlockedCells
                ].forEach(function (n) {
                    if (n[1]) o.write_shift(4, sp[n[0]] != null && !sp[n[0]] ? 1 : 0);
                    else o.write_shift(4, sp[n[0]] != null && sp[n[0]] ? 0 : 1);
                });
                return o;
            }
            function parse_BrtDVal() {}
            function parse_BrtDVal14() {}
            function parse_ws_bin(data2, _opts, idx, rels, wb, themes, styles) {
                if (!data2) return data2;
                var opts = _opts || {};
                if (!rels) rels = { '!id': {} };
                if (DENSE != null && opts.dense == null) opts.dense = DENSE;
                var s2 = opts.dense ? [] : {};
                var ref;
                var refguess = { s: { r: 2e6, c: 2e6 }, e: { r: 0, c: 0 } };
                var state = [];
                var pass = false,
                    end2 = false;
                var row, p, cf, R, C, addr, sstr, rr, cell;
                var merges = [];
                opts.biff = 12;
                opts['!row'] = 0;
                var ai = 0,
                    af = false;
                var arrayf = [];
                var sharedf = {};
                var supbooks = opts.supbooks || wb.supbooks || [[]];
                supbooks.sharedf = sharedf;
                supbooks.arrayf = arrayf;
                supbooks.SheetNames =
                    wb.SheetNames ||
                    wb.Sheets.map(function (x2) {
                        return x2.name;
                    });
                if (!opts.supbooks) {
                    opts.supbooks = supbooks;
                    if (wb.Names)
                        for (var i2 = 0; i2 < wb.Names.length; ++i2)
                            supbooks[0][i2 + 1] = wb.Names[i2];
                }
                var colinfo = [],
                    rowinfo = [];
                var seencol = false;
                XLSBRecordEnum[16] = { n: 'BrtShortReal', f: parse_BrtShortReal };
                var cm, vm;
                recordhopper(
                    data2,
                    function ws_parse(val2, RR, RT) {
                        if (end2) return;
                        switch (RT) {
                            case 148:
                                ref = val2;
                                break;
                            case 0:
                                row = val2;
                                if (opts.sheetRows && opts.sheetRows <= row.r) end2 = true;
                                rr = encode_row((R = row.r));
                                opts['!row'] = row.r;
                                if (val2.hidden || val2.hpt || val2.level != null) {
                                    if (val2.hpt) val2.hpx = pt2px(val2.hpt);
                                    rowinfo[val2.r] = val2;
                                }
                                break;
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                            case 8:
                            case 9:
                            case 10:
                            case 11:
                            case 13:
                            case 14:
                            case 15:
                            case 16:
                            case 17:
                            case 18:
                            case 62:
                                p = { t: val2[2] };
                                switch (val2[2]) {
                                    case 'n':
                                        p.v = val2[1];
                                        break;
                                    case 's':
                                        sstr = strs[val2[1]];
                                        p.v = sstr.t;
                                        p.r = sstr.r;
                                        break;
                                    case 'b':
                                        p.v = val2[1] ? true : false;
                                        break;
                                    case 'e':
                                        p.v = val2[1];
                                        if (opts.cellText !== false) p.w = BErr[p.v];
                                        break;
                                    case 'str':
                                        p.t = 's';
                                        p.v = val2[1];
                                        break;
                                    case 'is':
                                        p.t = 's';
                                        p.v = val2[1].t;
                                        break;
                                }
                                if ((cf = styles.CellXf[val2[0].iStyleRef]))
                                    safe_format(p, cf.numFmtId, null, opts, themes, styles);
                                C = val2[0].c == -1 ? C + 1 : val2[0].c;
                                if (opts.dense) {
                                    if (!s2[R]) s2[R] = [];
                                    s2[R][C] = p;
                                } else s2[encode_col(C) + rr] = p;
                                if (opts.cellFormula) {
                                    af = false;
                                    for (ai = 0; ai < arrayf.length; ++ai) {
                                        var aii = arrayf[ai];
                                        if (row.r >= aii[0].s.r && row.r <= aii[0].e.r) {
                                            if (C >= aii[0].s.c && C <= aii[0].e.c) {
                                                p.F = encode_range(aii[0]);
                                                af = true;
                                            }
                                        }
                                    }
                                    if (!af && val2.length > 3) p.f = val2[3];
                                }
                                if (refguess.s.r > row.r) refguess.s.r = row.r;
                                if (refguess.s.c > C) refguess.s.c = C;
                                if (refguess.e.r < row.r) refguess.e.r = row.r;
                                if (refguess.e.c < C) refguess.e.c = C;
                                if (
                                    opts.cellDates &&
                                    cf &&
                                    p.t == 'n' &&
                                    fmt_is_date(table_fmt[cf.numFmtId])
                                ) {
                                    var _d2 = SSF_parse_date_code(p.v);
                                    if (_d2) {
                                        p.t = 'd';
                                        p.v = new Date(
                                            _d2.y,
                                            _d2.m - 1,
                                            _d2.d,
                                            _d2.H,
                                            _d2.M,
                                            _d2.S,
                                            _d2.u,
                                        );
                                    }
                                }
                                if (cm) {
                                    if (cm.type == 'XLDAPR') p.D = true;
                                    cm = void 0;
                                }
                                if (vm) vm = void 0;
                                break;
                            case 1:
                            case 12:
                                if (!opts.sheetStubs || pass) break;
                                p = { t: 'z', v: void 0 };
                                C = val2[0].c == -1 ? C + 1 : val2[0].c;
                                if (opts.dense) {
                                    if (!s2[R]) s2[R] = [];
                                    s2[R][C] = p;
                                } else s2[encode_col(C) + rr] = p;
                                if (refguess.s.r > row.r) refguess.s.r = row.r;
                                if (refguess.s.c > C) refguess.s.c = C;
                                if (refguess.e.r < row.r) refguess.e.r = row.r;
                                if (refguess.e.c < C) refguess.e.c = C;
                                if (cm) {
                                    if (cm.type == 'XLDAPR') p.D = true;
                                    cm = void 0;
                                }
                                if (vm) vm = void 0;
                                break;
                            case 176:
                                merges.push(val2);
                                break;
                            case 49:
                                {
                                    cm = ((opts.xlmeta || {}).Cell || [])[val2 - 1];
                                }
                                break;
                            case 494:
                                var rel = rels['!id'][val2.relId];
                                if (rel) {
                                    val2.Target = rel.Target;
                                    if (val2.loc) val2.Target += '#' + val2.loc;
                                    val2.Rel = rel;
                                } else if (val2.relId == '') {
                                    val2.Target = '#' + val2.loc;
                                }
                                for (R = val2.rfx.s.r; R <= val2.rfx.e.r; ++R)
                                    for (C = val2.rfx.s.c; C <= val2.rfx.e.c; ++C) {
                                        if (opts.dense) {
                                            if (!s2[R]) s2[R] = [];
                                            if (!s2[R][C]) s2[R][C] = { t: 'z', v: void 0 };
                                            s2[R][C].l = val2;
                                        } else {
                                            addr = encode_cell({ c: C, r: R });
                                            if (!s2[addr]) s2[addr] = { t: 'z', v: void 0 };
                                            s2[addr].l = val2;
                                        }
                                    }
                                break;
                            case 426:
                                if (!opts.cellFormula) break;
                                arrayf.push(val2);
                                cell = opts.dense ? s2[R][C] : s2[encode_col(C) + rr];
                                cell.f = stringify_formula(
                                    val2[1],
                                    refguess,
                                    { r: row.r, c: C },
                                    supbooks,
                                    opts,
                                );
                                cell.F = encode_range(val2[0]);
                                break;
                            case 427:
                                if (!opts.cellFormula) break;
                                sharedf[encode_cell(val2[0].s)] = val2[1];
                                cell = opts.dense ? s2[R][C] : s2[encode_col(C) + rr];
                                cell.f = stringify_formula(
                                    val2[1],
                                    refguess,
                                    { r: row.r, c: C },
                                    supbooks,
                                    opts,
                                );
                                break;
                            case 60:
                                if (!opts.cellStyles) break;
                                while (val2.e >= val2.s) {
                                    colinfo[val2.e--] = {
                                        width: val2.w / 256,
                                        hidden: !!(val2.flags & 1),
                                        level: val2.level,
                                    };
                                    if (!seencol) {
                                        seencol = true;
                                        find_mdw_colw(val2.w / 256);
                                    }
                                    process_col(colinfo[val2.e + 1]);
                                }
                                break;
                            case 161:
                                s2['!autofilter'] = { ref: encode_range(val2) };
                                break;
                            case 476:
                                s2['!margins'] = val2;
                                break;
                            case 147:
                                if (!wb.Sheets[idx]) wb.Sheets[idx] = {};
                                if (val2.name) wb.Sheets[idx].CodeName = val2.name;
                                if (val2.above || val2.left)
                                    s2['!outline'] = { above: val2.above, left: val2.left };
                                break;
                            case 137:
                                if (!wb.Views) wb.Views = [{}];
                                if (!wb.Views[0]) wb.Views[0] = {};
                                if (val2.RTL) wb.Views[0].RTL = true;
                                break;
                            case 485:
                                break;
                            case 64:
                            case 1053:
                                break;
                            case 151:
                                break;
                            case 152:
                            case 175:
                            case 644:
                            case 625:
                            case 562:
                            case 396:
                            case 1112:
                            case 1146:
                            case 471:
                            case 1050:
                            case 649:
                            case 1105:
                            case 589:
                            case 607:
                            case 564:
                            case 1055:
                            case 168:
                            case 174:
                            case 1180:
                            case 499:
                            case 507:
                            case 550:
                            case 171:
                            case 167:
                            case 1177:
                            case 169:
                            case 1181:
                            case 551:
                            case 552:
                            case 661:
                            case 639:
                            case 478:
                            case 537:
                            case 477:
                            case 536:
                            case 1103:
                            case 680:
                            case 1104:
                            case 1024:
                            case 663:
                            case 535:
                            case 678:
                            case 504:
                            case 1043:
                            case 428:
                            case 170:
                            case 3072:
                            case 50:
                            case 2070:
                            case 1045:
                                break;
                            case 35:
                                pass = true;
                                break;
                            case 36:
                                pass = false;
                                break;
                            case 37:
                                state.push(RT);
                                pass = true;
                                break;
                            case 38:
                                state.pop();
                                pass = false;
                                break;
                            default:
                                if (RR.T) {
                                } else if (!pass || opts.WTF)
                                    throw new Error('Unexpected record 0x' + RT.toString(16));
                        }
                    },
                    opts,
                );
                delete opts.supbooks;
                delete opts['!row'];
                if (
                    !s2['!ref'] &&
                    (refguess.s.r < 2e6 ||
                        (ref && (ref.e.r > 0 || ref.e.c > 0 || ref.s.r > 0 || ref.s.c > 0)))
                )
                    s2['!ref'] = encode_range(ref || refguess);
                if (opts.sheetRows && s2['!ref']) {
                    var tmpref = safe_decode_range(s2['!ref']);
                    if (opts.sheetRows <= +tmpref.e.r) {
                        tmpref.e.r = opts.sheetRows - 1;
                        if (tmpref.e.r > refguess.e.r) tmpref.e.r = refguess.e.r;
                        if (tmpref.e.r < tmpref.s.r) tmpref.s.r = tmpref.e.r;
                        if (tmpref.e.c > refguess.e.c) tmpref.e.c = refguess.e.c;
                        if (tmpref.e.c < tmpref.s.c) tmpref.s.c = tmpref.e.c;
                        s2['!fullref'] = s2['!ref'];
                        s2['!ref'] = encode_range(tmpref);
                    }
                }
                if (merges.length > 0) s2['!merges'] = merges;
                if (colinfo.length > 0) s2['!cols'] = colinfo;
                if (rowinfo.length > 0) s2['!rows'] = rowinfo;
                return s2;
            }
            function write_ws_bin_cell(ba, cell, R, C, opts, ws, last_seen) {
                if (cell.v === void 0) return false;
                var vv = '';
                switch (cell.t) {
                    case 'b':
                        vv = cell.v ? '1' : '0';
                        break;
                    case 'd':
                        cell = dup(cell);
                        cell.z = cell.z || table_fmt[14];
                        cell.v = datenum(parseDate(cell.v));
                        cell.t = 'n';
                        break;
                    case 'n':
                    case 'e':
                        vv = '' + cell.v;
                        break;
                    default:
                        vv = cell.v;
                        break;
                }
                var o = { r: R, c: C };
                o.s = get_cell_style(opts.cellXfs, cell, opts);
                if (cell.l) ws['!links'].push([encode_cell(o), cell.l]);
                if (cell.c) ws['!comments'].push([encode_cell(o), cell.c]);
                switch (cell.t) {
                    case 's':
                    case 'str':
                        if (opts.bookSST) {
                            vv = get_sst_id(opts.Strings, cell.v, opts.revStrings);
                            o.t = 's';
                            o.v = vv;
                            if (last_seen) write_record(ba, 18, write_BrtShortIsst(cell, o));
                            else write_record(ba, 7, write_BrtCellIsst(cell, o));
                        } else {
                            o.t = 'str';
                            if (last_seen) write_record(ba, 17, write_BrtShortSt(cell, o));
                            else write_record(ba, 6, write_BrtCellSt(cell, o));
                        }
                        return true;
                    case 'n':
                        if (cell.v == (cell.v | 0) && cell.v > -1e3 && cell.v < 1e3) {
                            if (last_seen) write_record(ba, 13, write_BrtShortRk(cell, o));
                            else write_record(ba, 2, write_BrtCellRk(cell, o));
                        } else {
                            if (last_seen) write_record(ba, 16, write_BrtShortReal(cell, o));
                            else write_record(ba, 5, write_BrtCellReal(cell, o));
                        }
                        return true;
                    case 'b':
                        o.t = 'b';
                        if (last_seen) write_record(ba, 15, write_BrtShortBool(cell, o));
                        else write_record(ba, 4, write_BrtCellBool(cell, o));
                        return true;
                    case 'e':
                        o.t = 'e';
                        if (last_seen) write_record(ba, 14, write_BrtShortError(cell, o));
                        else write_record(ba, 3, write_BrtCellError(cell, o));
                        return true;
                }
                if (last_seen) write_record(ba, 12, write_BrtShortBlank(cell, o));
                else write_record(ba, 1, write_BrtCellBlank(cell, o));
                return true;
            }
            function write_CELLTABLE(ba, ws, idx, opts) {
                var range = safe_decode_range(ws['!ref'] || 'A1'),
                    ref,
                    rr = '',
                    cols = [];
                write_record(
                    ba,
                    145,
                    /* BrtBeginSheetData */
                );
                var dense = Array.isArray(ws);
                var cap = range.e.r;
                if (ws['!rows']) cap = Math.max(range.e.r, ws['!rows'].length - 1);
                for (var R = range.s.r; R <= cap; ++R) {
                    rr = encode_row(R);
                    write_row_header(ba, ws, range, R);
                    var last_seen = false;
                    if (R <= range.e.r)
                        for (var C = range.s.c; C <= range.e.c; ++C) {
                            if (R === range.s.r) cols[C] = encode_col(C);
                            ref = cols[C] + rr;
                            var cell = dense ? (ws[R] || [])[C] : ws[ref];
                            if (!cell) {
                                last_seen = false;
                                continue;
                            }
                            last_seen = write_ws_bin_cell(ba, cell, R, C, opts, ws, last_seen);
                        }
                }
                write_record(
                    ba,
                    146,
                    /* BrtEndSheetData */
                );
            }
            function write_MERGECELLS(ba, ws) {
                if (!ws || !ws['!merges']) return;
                write_record(ba, 177, write_BrtBeginMergeCells(ws['!merges'].length));
                ws['!merges'].forEach(function (m2) {
                    write_record(ba, 176, write_BrtMergeCell(m2));
                });
                write_record(
                    ba,
                    178,
                    /* BrtEndMergeCells */
                );
            }
            function write_COLINFOS(ba, ws) {
                if (!ws || !ws['!cols']) return;
                write_record(
                    ba,
                    390,
                    /* BrtBeginColInfos */
                );
                ws['!cols'].forEach(function (m2, i2) {
                    if (m2) write_record(ba, 60, write_BrtColInfo(i2, m2));
                });
                write_record(
                    ba,
                    391,
                    /* BrtEndColInfos */
                );
            }
            function write_IGNOREECS(ba, ws) {
                if (!ws || !ws['!ref']) return;
                write_record(
                    ba,
                    648,
                    /* BrtBeginCellIgnoreECs */
                );
                write_record(ba, 649, write_BrtCellIgnoreEC(safe_decode_range(ws['!ref'])));
                write_record(
                    ba,
                    650,
                    /* BrtEndCellIgnoreECs */
                );
            }
            function write_HLINKS(ba, ws, rels) {
                ws['!links'].forEach(function (l) {
                    if (!l[1].Target) return;
                    var rId = add_rels(rels, -1, l[1].Target.replace(/#.*$/, ''), RELS.HLINK);
                    write_record(ba, 494, write_BrtHLink(l, rId));
                });
                delete ws['!links'];
            }
            function write_LEGACYDRAWING(ba, ws, idx, rels) {
                if (ws['!comments'].length > 0) {
                    var rId = add_rels(
                        rels,
                        -1,
                        '../drawings/vmlDrawing' + (idx + 1) + '.vml',
                        RELS.VML,
                    );
                    write_record(ba, 551, write_RelID('rId' + rId));
                    ws['!legacy'] = rId;
                }
            }
            function write_AUTOFILTER(ba, ws, wb, idx) {
                if (!ws['!autofilter']) return;
                var data2 = ws['!autofilter'];
                var ref = typeof data2.ref === 'string' ? data2.ref : encode_range(data2.ref);
                if (!wb.Workbook) wb.Workbook = { Sheets: [] };
                if (!wb.Workbook.Names) wb.Workbook.Names = [];
                var names = wb.Workbook.Names;
                var range = decode_range(ref);
                if (range.s.r == range.e.r) {
                    range.e.r = decode_range(ws['!ref']).e.r;
                    ref = encode_range(range);
                }
                for (var i2 = 0; i2 < names.length; ++i2) {
                    var name = names[i2];
                    if (name.Name != '_xlnm._FilterDatabase') continue;
                    if (name.Sheet != idx) continue;
                    name.Ref = "'" + wb.SheetNames[idx] + "'!" + ref;
                    break;
                }
                if (i2 == names.length)
                    names.push({
                        Name: '_xlnm._FilterDatabase',
                        Sheet: idx,
                        Ref: "'" + wb.SheetNames[idx] + "'!" + ref,
                    });
                write_record(ba, 161, write_UncheckedRfX(safe_decode_range(ref)));
                write_record(
                    ba,
                    162,
                    /* BrtEndAFilter */
                );
            }
            function write_WSVIEWS2(ba, ws, Workbook) {
                write_record(
                    ba,
                    133,
                    /* BrtBeginWsViews */
                );
                {
                    write_record(ba, 137, write_BrtBeginWsView(ws, Workbook));
                    write_record(
                        ba,
                        138,
                        /* BrtEndWsView */
                    );
                }
                write_record(
                    ba,
                    134,
                    /* BrtEndWsViews */
                );
            }
            function write_WSFMTINFO() {}
            function write_SHEETPROTECT(ba, ws) {
                if (!ws['!protect']) return;
                write_record(ba, 535, write_BrtSheetProtection(ws['!protect']));
            }
            function write_ws_bin(idx, opts, wb, rels) {
                var ba = buf_array();
                var s2 = wb.SheetNames[idx],
                    ws = wb.Sheets[s2] || {};
                var c = s2;
                try {
                    if (wb && wb.Workbook) c = wb.Workbook.Sheets[idx].CodeName || c;
                } catch (e2) {}
                var r2 = safe_decode_range(ws['!ref'] || 'A1');
                if (r2.e.c > 16383 || r2.e.r > 1048575) {
                    if (opts.WTF)
                        throw new Error(
                            'Range ' + (ws['!ref'] || 'A1') + ' exceeds format limit A1:XFD1048576',
                        );
                    r2.e.c = Math.min(r2.e.c, 16383);
                    r2.e.r = Math.min(r2.e.c, 1048575);
                }
                ws['!links'] = [];
                ws['!comments'] = [];
                write_record(
                    ba,
                    129,
                    /* BrtBeginSheet */
                );
                if (wb.vbaraw || ws['!outline'])
                    write_record(ba, 147, write_BrtWsProp(c, ws['!outline']));
                write_record(ba, 148, write_BrtWsDim(r2));
                write_WSVIEWS2(ba, ws, wb.Workbook);
                write_WSFMTINFO(ba, ws);
                write_COLINFOS(ba, ws, idx, opts, wb);
                write_CELLTABLE(ba, ws, idx, opts, wb);
                write_SHEETPROTECT(ba, ws);
                write_AUTOFILTER(ba, ws, wb, idx);
                write_MERGECELLS(ba, ws);
                write_HLINKS(ba, ws, rels);
                if (ws['!margins']) write_record(ba, 476, write_BrtMargins(ws['!margins']));
                if (!opts || opts.ignoreEC || opts.ignoreEC == void 0) write_IGNOREECS(ba, ws);
                write_LEGACYDRAWING(ba, ws, idx, rels);
                write_record(
                    ba,
                    130,
                    /* BrtEndSheet */
                );
                return ba.end();
            }
            function parse_Cache(data2) {
                var col = [];
                var num = data2.match(/^<c:numCache>/);
                var f3;
                (data2.match(/<c:pt idx="(\d*)">(.*?)<\/c:pt>/gm) || []).forEach(function (pt) {
                    var q = pt.match(/<c:pt idx="(\d*?)"><c:v>(.*)<\/c:v><\/c:pt>/);
                    if (!q) return;
                    col[+q[1]] = num ? +q[2] : q[2];
                });
                var nf = unescapexml(
                    (data2.match(/<c:formatCode>([\s\S]*?)<\/c:formatCode>/) || ['', 'General'])[1],
                );
                (data2.match(/<c:f>(.*?)<\/c:f>/gm) || []).forEach(function (F2) {
                    f3 = F2.replace(/<.*?>/g, '');
                });
                return [col, nf, f3];
            }
            function parse_chart(data2, name, opts, rels, wb, csheet) {
                var cs = csheet || { '!type': 'chart' };
                if (!data2) return csheet;
                var C = 0,
                    R = 0,
                    col = 'A';
                var refguess = { s: { r: 2e6, c: 2e6 }, e: { r: 0, c: 0 } };
                (data2.match(/<c:numCache>[\s\S]*?<\/c:numCache>/gm) || []).forEach(function (nc) {
                    var cache = parse_Cache(nc);
                    refguess.s.r = refguess.s.c = 0;
                    refguess.e.c = C;
                    col = encode_col(C);
                    cache[0].forEach(function (n, i2) {
                        cs[col + encode_row(i2)] = { t: 'n', v: n, z: cache[1] };
                        R = i2;
                    });
                    if (refguess.e.r < R) refguess.e.r = R;
                    ++C;
                });
                if (C > 0) cs['!ref'] = encode_range(refguess);
                return cs;
            }
            function parse_cs_xml(data2, opts, idx, rels, wb) {
                if (!data2) return data2;
                if (!rels) rels = { '!id': {} };
                var s2 = { '!type': 'chart', '!drawel': null, '!rel': '' };
                var m2;
                var sheetPr = data2.match(sheetprregex);
                if (sheetPr) parse_ws_xml_sheetpr(sheetPr[0], s2, wb, idx);
                if ((m2 = data2.match(/drawing r:id="(.*?)"/))) s2['!rel'] = m2[1];
                if (rels['!id'][s2['!rel']]) s2['!drawel'] = rels['!id'][s2['!rel']];
                return s2;
            }
            function write_cs_xml(idx, opts, wb, rels) {
                var o = [
                    XML_HEADER,
                    writextag('chartsheet', null, {
                        xmlns: XMLNS_main[0],
                        'xmlns:r': XMLNS.r,
                    }),
                ];
                o[o.length] = writextag('drawing', null, { 'r:id': 'rId1' });
                add_rels(rels, -1, '../drawings/drawing' + (idx + 1) + '.xml', RELS.DRAW);
                if (o.length > 2) {
                    o[o.length] = '</chartsheet>';
                    o[1] = o[1].replace('/>', '>');
                }
                return o.join('');
            }
            function parse_BrtCsProp(data2, length) {
                data2.l += 10;
                var name = parse_XLWideString(data2, length - 10);
                return { name };
            }
            function parse_cs_bin(data2, opts, idx, rels, wb) {
                if (!data2) return data2;
                if (!rels) rels = { '!id': {} };
                var s2 = { '!type': 'chart', '!drawel': null, '!rel': '' };
                var state = [];
                var pass = false;
                recordhopper(
                    data2,
                    function cs_parse(val2, R, RT) {
                        switch (RT) {
                            case 550:
                                s2['!rel'] = val2;
                                break;
                            case 651:
                                if (!wb.Sheets[idx]) wb.Sheets[idx] = {};
                                if (val2.name) wb.Sheets[idx].CodeName = val2.name;
                                break;
                            case 562:
                            case 652:
                            case 669:
                            case 679:
                            case 551:
                            case 552:
                            case 476:
                            case 3072:
                                break;
                            case 35:
                                pass = true;
                                break;
                            case 36:
                                pass = false;
                                break;
                            case 37:
                                state.push(RT);
                                break;
                            case 38:
                                state.pop();
                                break;
                            default:
                                if (R.T > 0) state.push(RT);
                                else if (R.T < 0) state.pop();
                                else if (!pass || opts.WTF)
                                    throw new Error('Unexpected record 0x' + RT.toString(16));
                        }
                    },
                    opts,
                );
                if (rels['!id'][s2['!rel']]) s2['!drawel'] = rels['!id'][s2['!rel']];
                return s2;
            }
            function write_cs_bin() {
                var ba = buf_array();
                write_record(
                    ba,
                    129,
                    /* BrtBeginSheet */
                );
                write_record(
                    ba,
                    130,
                    /* BrtEndSheet */
                );
                return ba.end();
            }
            var WBPropsDef = [
                ['allowRefreshQuery', false, 'bool'],
                ['autoCompressPictures', true, 'bool'],
                ['backupFile', false, 'bool'],
                ['checkCompatibility', false, 'bool'],
                ['CodeName', ''],
                ['date1904', false, 'bool'],
                ['defaultThemeVersion', 0, 'int'],
                ['filterPrivacy', false, 'bool'],
                ['hidePivotFieldList', false, 'bool'],
                ['promptedSolutions', false, 'bool'],
                ['publishItems', false, 'bool'],
                ['refreshAllConnections', false, 'bool'],
                ['saveExternalLinkValues', true, 'bool'],
                ['showBorderUnselectedTables', true, 'bool'],
                ['showInkAnnotation', true, 'bool'],
                ['showObjects', 'all'],
                ['showPivotChartFilter', false, 'bool'],
                ['updateLinks', 'userSet'],
            ];
            var WBViewDef = [
                ['activeTab', 0, 'int'],
                ['autoFilterDateGrouping', true, 'bool'],
                ['firstSheet', 0, 'int'],
                ['minimized', false, 'bool'],
                ['showHorizontalScroll', true, 'bool'],
                ['showSheetTabs', true, 'bool'],
                ['showVerticalScroll', true, 'bool'],
                ['tabRatio', 600, 'int'],
                ['visibility', 'visible'],
                //window{Height,Width}, {x,y}Window
            ];
            var SheetDef = [
                //['state', 'visible']
            ];
            var CalcPrDef = [
                ['calcCompleted', 'true'],
                ['calcMode', 'auto'],
                ['calcOnSave', 'true'],
                ['concurrentCalc', 'true'],
                ['fullCalcOnLoad', 'false'],
                ['fullPrecision', 'true'],
                ['iterate', 'false'],
                ['iterateCount', '100'],
                ['iterateDelta', '0.001'],
                ['refMode', 'A1'],
            ];
            function push_defaults_array(target, defaults) {
                for (var j = 0; j != target.length; ++j) {
                    var w = target[j];
                    for (var i2 = 0; i2 != defaults.length; ++i2) {
                        var z = defaults[i2];
                        if (w[z[0]] == null) w[z[0]] = z[1];
                        else
                            switch (z[2]) {
                                case 'bool':
                                    if (typeof w[z[0]] == 'string') w[z[0]] = parsexmlbool(w[z[0]]);
                                    break;
                                case 'int':
                                    if (typeof w[z[0]] == 'string') w[z[0]] = parseInt(w[z[0]], 10);
                                    break;
                            }
                    }
                }
            }
            function push_defaults(target, defaults) {
                for (var i2 = 0; i2 != defaults.length; ++i2) {
                    var z = defaults[i2];
                    if (target[z[0]] == null) target[z[0]] = z[1];
                    else
                        switch (z[2]) {
                            case 'bool':
                                if (typeof target[z[0]] == 'string')
                                    target[z[0]] = parsexmlbool(target[z[0]]);
                                break;
                            case 'int':
                                if (typeof target[z[0]] == 'string')
                                    target[z[0]] = parseInt(target[z[0]], 10);
                                break;
                        }
                }
            }
            function parse_wb_defaults(wb) {
                push_defaults(wb.WBProps, WBPropsDef);
                push_defaults(wb.CalcPr, CalcPrDef);
                push_defaults_array(wb.WBView, WBViewDef);
                push_defaults_array(wb.Sheets, SheetDef);
                _ssfopts.date1904 = parsexmlbool(wb.WBProps.date1904);
            }
            function safe1904(wb) {
                if (!wb.Workbook) return 'false';
                if (!wb.Workbook.WBProps) return 'false';
                return parsexmlbool(wb.Workbook.WBProps.date1904) ? 'true' : 'false';
            }
            var badchars = '][*?/\\'.split('');
            function check_ws_name(n, safe) {
                if (n.length > 31) {
                    if (safe) return false;
                    throw new Error('Sheet names cannot exceed 31 chars');
                }
                var _good = true;
                badchars.forEach(function (c) {
                    if (n.indexOf(c) == -1) return;
                    if (!safe) throw new Error('Sheet name cannot contain : \\ / ? * [ ]');
                    _good = false;
                });
                return _good;
            }
            function check_wb_names(N, S2, codes) {
                N.forEach(function (n, i2) {
                    check_ws_name(n);
                    for (var j = 0; j < i2; ++j)
                        if (n == N[j]) throw new Error('Duplicate Sheet Name: ' + n);
                    if (codes) {
                        var cn = (S2 && S2[i2] && S2[i2].CodeName) || n;
                        if (cn.charCodeAt(0) == 95 && cn.length > 22)
                            throw new Error('Bad Code Name: Worksheet' + cn);
                    }
                });
            }
            function check_wb(wb) {
                if (!wb || !wb.SheetNames || !wb.Sheets) throw new Error('Invalid Workbook');
                if (!wb.SheetNames.length) throw new Error('Workbook is empty');
                var Sheets = (wb.Workbook && wb.Workbook.Sheets) || [];
                check_wb_names(wb.SheetNames, Sheets, !!wb.vbaraw);
                for (var i2 = 0; i2 < wb.SheetNames.length; ++i2)
                    check_ws(wb.Sheets[wb.SheetNames[i2]], wb.SheetNames[i2], i2);
            }
            var wbnsregex = /<\w+:workbook/;
            function parse_wb_xml(data2, opts) {
                if (!data2) throw new Error('Could not find file');
                var wb = {
                    AppVersion: {},
                    WBProps: {},
                    WBView: [],
                    Sheets: [],
                    CalcPr: {},
                    Names: [],
                    xmlns: '',
                };
                var pass = false,
                    xmlns = 'xmlns';
                var dname = {},
                    dnstart = 0;
                data2.replace(tagregex, function xml_wb(x2, idx) {
                    var y = parsexmltag(x2);
                    switch (strip_ns(y[0])) {
                        case '<?xml':
                            break;
                        case '<workbook':
                            if (x2.match(wbnsregex)) xmlns = 'xmlns' + x2.match(/<(\w+):/)[1];
                            wb.xmlns = y[xmlns];
                            break;
                        case '</workbook>':
                            break;
                        case '<fileVersion':
                            delete y[0];
                            wb.AppVersion = y;
                            break;
                        case '<fileVersion/>':
                        case '</fileVersion>':
                            break;
                        case '<fileSharing':
                            break;
                        case '<fileSharing/>':
                            break;
                        case '<workbookPr':
                        case '<workbookPr/>':
                            WBPropsDef.forEach(function (w) {
                                if (y[w[0]] == null) return;
                                switch (w[2]) {
                                    case 'bool':
                                        wb.WBProps[w[0]] = parsexmlbool(y[w[0]]);
                                        break;
                                    case 'int':
                                        wb.WBProps[w[0]] = parseInt(y[w[0]], 10);
                                        break;
                                    default:
                                        wb.WBProps[w[0]] = y[w[0]];
                                }
                            });
                            if (y.codeName) wb.WBProps.CodeName = utf8read(y.codeName);
                            break;
                        case '</workbookPr>':
                            break;
                        case '<workbookProtection':
                            break;
                        case '<workbookProtection/>':
                            break;
                        case '<bookViews':
                        case '<bookViews>':
                        case '</bookViews>':
                            break;
                        case '<workbookView':
                        case '<workbookView/>':
                            delete y[0];
                            wb.WBView.push(y);
                            break;
                        case '</workbookView>':
                            break;
                        case '<sheets':
                        case '<sheets>':
                        case '</sheets>':
                            break;
                        case '<sheet':
                            switch (y.state) {
                                case 'hidden':
                                    y.Hidden = 1;
                                    break;
                                case 'veryHidden':
                                    y.Hidden = 2;
                                    break;
                                default:
                                    y.Hidden = 0;
                            }
                            delete y.state;
                            y.name = unescapexml(utf8read(y.name));
                            delete y[0];
                            wb.Sheets.push(y);
                            break;
                        case '</sheet>':
                            break;
                        case '<functionGroups':
                        case '<functionGroups/>':
                            break;
                        case '<functionGroup':
                            break;
                        case '<externalReferences':
                        case '</externalReferences>':
                        case '<externalReferences>':
                            break;
                        case '<externalReference':
                            break;
                        case '<definedNames/>':
                            break;
                        case '<definedNames>':
                        case '<definedNames':
                            pass = true;
                            break;
                        case '</definedNames>':
                            pass = false;
                            break;
                        case '<definedName':
                            {
                                dname = {};
                                dname.Name = utf8read(y.name);
                                if (y.comment) dname.Comment = y.comment;
                                if (y.localSheetId) dname.Sheet = +y.localSheetId;
                                if (parsexmlbool(y.hidden || '0')) dname.Hidden = true;
                                dnstart = idx + x2.length;
                            }
                            break;
                        case '</definedName>':
                            {
                                dname.Ref = unescapexml(utf8read(data2.slice(dnstart, idx)));
                                wb.Names.push(dname);
                            }
                            break;
                        case '<definedName/>':
                            break;
                        case '<calcPr':
                            delete y[0];
                            wb.CalcPr = y;
                            break;
                        case '<calcPr/>':
                            delete y[0];
                            wb.CalcPr = y;
                            break;
                        case '</calcPr>':
                            break;
                        case '<oleSize':
                            break;
                        case '<customWorkbookViews>':
                        case '</customWorkbookViews>':
                        case '<customWorkbookViews':
                            break;
                        case '<customWorkbookView':
                        case '</customWorkbookView>':
                            break;
                        case '<pivotCaches>':
                        case '</pivotCaches>':
                        case '<pivotCaches':
                            break;
                        case '<pivotCache':
                            break;
                        case '<smartTagPr':
                        case '<smartTagPr/>':
                            break;
                        case '<smartTagTypes':
                        case '<smartTagTypes>':
                        case '</smartTagTypes>':
                            break;
                        case '<smartTagType':
                            break;
                        case '<webPublishing':
                        case '<webPublishing/>':
                            break;
                        case '<fileRecoveryPr':
                        case '<fileRecoveryPr/>':
                            break;
                        case '<webPublishObjects>':
                        case '<webPublishObjects':
                        case '</webPublishObjects>':
                            break;
                        case '<webPublishObject':
                            break;
                        case '<extLst':
                        case '<extLst>':
                        case '</extLst>':
                        case '<extLst/>':
                            break;
                        case '<ext':
                            pass = true;
                            break;
                        case '</ext>':
                            pass = false;
                            break;
                        case '<ArchID':
                            break;
                        case '<AlternateContent':
                        case '<AlternateContent>':
                            pass = true;
                            break;
                        case '</AlternateContent>':
                            pass = false;
                            break;
                        case '<revisionPtr':
                            break;
                        default:
                            if (!pass && opts.WTF)
                                throw new Error('unrecognized ' + y[0] + ' in workbook');
                    }
                    return x2;
                });
                if (XMLNS_main.indexOf(wb.xmlns) === -1)
                    throw new Error('Unknown Namespace: ' + wb.xmlns);
                parse_wb_defaults(wb);
                return wb;
            }
            function write_wb_xml(wb) {
                var o = [XML_HEADER];
                o[o.length] = writextag('workbook', null, {
                    xmlns: XMLNS_main[0],
                    //'xmlns:mx': XMLNS.mx,
                    //'xmlns:s': XMLNS_main[0],
                    'xmlns:r': XMLNS.r,
                });
                var write_names = wb.Workbook && (wb.Workbook.Names || []).length > 0;
                var workbookPr = { codeName: 'ThisWorkbook' };
                if (wb.Workbook && wb.Workbook.WBProps) {
                    WBPropsDef.forEach(function (x2) {
                        if (wb.Workbook.WBProps[x2[0]] == null) return;
                        if (wb.Workbook.WBProps[x2[0]] == x2[1]) return;
                        workbookPr[x2[0]] = wb.Workbook.WBProps[x2[0]];
                    });
                    if (wb.Workbook.WBProps.CodeName) {
                        workbookPr.codeName = wb.Workbook.WBProps.CodeName;
                        delete workbookPr.CodeName;
                    }
                }
                o[o.length] = writextag('workbookPr', null, workbookPr);
                var sheets = (wb.Workbook && wb.Workbook.Sheets) || [];
                var i2 = 0;
                if (sheets && sheets[0] && !!sheets[0].Hidden) {
                    o[o.length] = '<bookViews>';
                    for (i2 = 0; i2 != wb.SheetNames.length; ++i2) {
                        if (!sheets[i2]) break;
                        if (!sheets[i2].Hidden) break;
                    }
                    if (i2 == wb.SheetNames.length) i2 = 0;
                    o[o.length] = '<workbookView firstSheet="' + i2 + '" activeTab="' + i2 + '"/>';
                    o[o.length] = '</bookViews>';
                }
                o[o.length] = '<sheets>';
                for (i2 = 0; i2 != wb.SheetNames.length; ++i2) {
                    var sht = { name: escapexml(wb.SheetNames[i2].slice(0, 31)) };
                    sht.sheetId = '' + (i2 + 1);
                    sht['r:id'] = 'rId' + (i2 + 1);
                    if (sheets[i2])
                        switch (sheets[i2].Hidden) {
                            case 1:
                                sht.state = 'hidden';
                                break;
                            case 2:
                                sht.state = 'veryHidden';
                                break;
                        }
                    o[o.length] = writextag('sheet', null, sht);
                }
                o[o.length] = '</sheets>';
                if (write_names) {
                    o[o.length] = '<definedNames>';
                    if (wb.Workbook && wb.Workbook.Names)
                        wb.Workbook.Names.forEach(function (n) {
                            var d = { name: n.Name };
                            if (n.Comment) d.comment = n.Comment;
                            if (n.Sheet != null) d.localSheetId = '' + n.Sheet;
                            if (n.Hidden) d.hidden = '1';
                            if (!n.Ref) return;
                            o[o.length] = writextag('definedName', escapexml(n.Ref), d);
                        });
                    o[o.length] = '</definedNames>';
                }
                if (o.length > 2) {
                    o[o.length] = '</workbook>';
                    o[1] = o[1].replace('/>', '>');
                }
                return o.join('');
            }
            function parse_BrtBundleSh(data2, length) {
                var z = {};
                z.Hidden = data2.read_shift(4);
                z.iTabID = data2.read_shift(4);
                z.strRelID = parse_RelID(data2, length - 8);
                z.name = parse_XLWideString(data2);
                return z;
            }
            function write_BrtBundleSh(data2, o) {
                if (!o) o = new_buf(127);
                o.write_shift(4, data2.Hidden);
                o.write_shift(4, data2.iTabID);
                write_RelID(data2.strRelID, o);
                write_XLWideString(data2.name.slice(0, 31), o);
                return o.length > o.l ? o.slice(0, o.l) : o;
            }
            function parse_BrtWbProp(data2, length) {
                var o = {};
                var flags = data2.read_shift(4);
                o.defaultThemeVersion = data2.read_shift(4);
                var strName = length > 8 ? parse_XLWideString(data2) : '';
                if (strName.length > 0) o.CodeName = strName;
                o.autoCompressPictures = !!(flags & 65536);
                o.backupFile = !!(flags & 64);
                o.checkCompatibility = !!(flags & 4096);
                o.date1904 = !!(flags & 1);
                o.filterPrivacy = !!(flags & 8);
                o.hidePivotFieldList = !!(flags & 1024);
                o.promptedSolutions = !!(flags & 16);
                o.publishItems = !!(flags & 2048);
                o.refreshAllConnections = !!(flags & 262144);
                o.saveExternalLinkValues = !!(flags & 128);
                o.showBorderUnselectedTables = !!(flags & 4);
                o.showInkAnnotation = !!(flags & 32);
                o.showObjects = ['all', 'placeholders', 'none'][(flags >> 13) & 3];
                o.showPivotChartFilter = !!(flags & 32768);
                o.updateLinks = ['userSet', 'never', 'always'][(flags >> 8) & 3];
                return o;
            }
            function write_BrtWbProp(data2, o) {
                if (!o) o = new_buf(72);
                var flags = 0;
                if (data2) {
                    if (data2.filterPrivacy) flags |= 8;
                }
                o.write_shift(4, flags);
                o.write_shift(4, 0);
                write_XLSBCodeName((data2 && data2.CodeName) || 'ThisWorkbook', o);
                return o.slice(0, o.l);
            }
            function parse_BrtFRTArchID$(data2, length) {
                var o = {};
                data2.read_shift(4);
                o.ArchID = data2.read_shift(4);
                data2.l += length - 8;
                return o;
            }
            function parse_BrtName(data2, length, opts) {
                var end2 = data2.l + length;
                data2.l += 4;
                data2.l += 1;
                var itab = data2.read_shift(4);
                var name = parse_XLNameWideString(data2);
                var formula = parse_XLSBNameParsedFormula(data2, 0, opts);
                var comment = parse_XLNullableWideString(data2);
                data2.l = end2;
                var out = { Name: name, Ptg: formula };
                if (itab < 268435455) out.Sheet = itab;
                if (comment) out.Comment = comment;
                return out;
            }
            function parse_wb_bin(data2, opts) {
                var wb = {
                    AppVersion: {},
                    WBProps: {},
                    WBView: [],
                    Sheets: [],
                    CalcPr: {},
                    xmlns: '',
                };
                var state = [];
                var pass = false;
                if (!opts) opts = {};
                opts.biff = 12;
                var Names = [];
                var supbooks = [[]];
                supbooks.SheetNames = [];
                supbooks.XTI = [];
                XLSBRecordEnum[16] = { n: 'BrtFRTArchID$', f: parse_BrtFRTArchID$ };
                recordhopper(
                    data2,
                    function hopper_wb(val2, R, RT) {
                        switch (RT) {
                            case 156:
                                supbooks.SheetNames.push(val2.name);
                                wb.Sheets.push(val2);
                                break;
                            case 153:
                                wb.WBProps = val2;
                                break;
                            case 39:
                                if (val2.Sheet != null) opts.SID = val2.Sheet;
                                val2.Ref = stringify_formula(val2.Ptg, null, null, supbooks, opts);
                                delete opts.SID;
                                delete val2.Ptg;
                                Names.push(val2);
                                break;
                            case 1036:
                                break;
                            case 357:
                            case 358:
                            case 355:
                            case 667:
                                if (!supbooks[0].length) supbooks[0] = [RT, val2];
                                else supbooks.push([RT, val2]);
                                supbooks[supbooks.length - 1].XTI = [];
                                break;
                            case 362:
                                if (supbooks.length === 0) {
                                    supbooks[0] = [];
                                    supbooks[0].XTI = [];
                                }
                                supbooks[supbooks.length - 1].XTI =
                                    supbooks[supbooks.length - 1].XTI.concat(val2);
                                supbooks.XTI = supbooks.XTI.concat(val2);
                                break;
                            case 361:
                                break;
                            case 2071:
                            case 158:
                            case 143:
                            case 664:
                            case 353:
                                break;
                            case 3072:
                            case 3073:
                            case 534:
                            case 677:
                            case 157:
                            case 610:
                            case 2050:
                            case 155:
                            case 548:
                            case 676:
                            case 128:
                            case 665:
                            case 2128:
                            case 2125:
                            case 549:
                            case 2053:
                            case 596:
                            case 2076:
                            case 2075:
                            case 2082:
                            case 397:
                            case 154:
                            case 1117:
                            case 553:
                            case 2091:
                                break;
                            case 35:
                                state.push(RT);
                                pass = true;
                                break;
                            case 36:
                                state.pop();
                                pass = false;
                                break;
                            case 37:
                                state.push(RT);
                                pass = true;
                                break;
                            case 38:
                                state.pop();
                                pass = false;
                                break;
                            case 16:
                                break;
                            default:
                                if (R.T) {
                                } else if (
                                    !pass ||
                                    (opts.WTF &&
                                        state[state.length - 1] != 37 &&
                                        state[state.length - 1] != 35)
                                )
                                    throw new Error('Unexpected record 0x' + RT.toString(16));
                        }
                    },
                    opts,
                );
                parse_wb_defaults(wb);
                wb.Names = Names;
                wb.supbooks = supbooks;
                return wb;
            }
            function write_BUNDLESHS(ba, wb) {
                write_record(
                    ba,
                    143,
                    /* BrtBeginBundleShs */
                );
                for (var idx = 0; idx != wb.SheetNames.length; ++idx) {
                    var viz =
                        (wb.Workbook &&
                            wb.Workbook.Sheets &&
                            wb.Workbook.Sheets[idx] &&
                            wb.Workbook.Sheets[idx].Hidden) ||
                        0;
                    var d = {
                        Hidden: viz,
                        iTabID: idx + 1,
                        strRelID: 'rId' + (idx + 1),
                        name: wb.SheetNames[idx],
                    };
                    write_record(ba, 156, write_BrtBundleSh(d));
                }
                write_record(
                    ba,
                    144,
                    /* BrtEndBundleShs */
                );
            }
            function write_BrtFileVersion(data2, o) {
                if (!o) o = new_buf(127);
                for (var i2 = 0; i2 != 4; ++i2) o.write_shift(4, 0);
                write_XLWideString('SheetJS', o);
                write_XLWideString(XLSX3.version, o);
                write_XLWideString(XLSX3.version, o);
                write_XLWideString('7262', o);
                return o.length > o.l ? o.slice(0, o.l) : o;
            }
            function write_BrtBookView(idx, o) {
                if (!o) o = new_buf(29);
                o.write_shift(-4, 0);
                o.write_shift(-4, 460);
                o.write_shift(4, 28800);
                o.write_shift(4, 17600);
                o.write_shift(4, 500);
                o.write_shift(4, idx);
                o.write_shift(4, idx);
                var flags = 120;
                o.write_shift(1, flags);
                return o.length > o.l ? o.slice(0, o.l) : o;
            }
            function write_BOOKVIEWS(ba, wb) {
                if (!wb.Workbook || !wb.Workbook.Sheets) return;
                var sheets = wb.Workbook.Sheets;
                var i2 = 0,
                    vistab = -1,
                    hidden2 = -1;
                for (; i2 < sheets.length; ++i2) {
                    if (!sheets[i2] || (!sheets[i2].Hidden && vistab == -1)) vistab = i2;
                    else if (sheets[i2].Hidden == 1 && hidden2 == -1) hidden2 = i2;
                }
                if (hidden2 > vistab) return;
                write_record(
                    ba,
                    135,
                    /* BrtBeginBookViews */
                );
                write_record(ba, 158, write_BrtBookView(vistab));
                write_record(
                    ba,
                    136,
                    /* BrtEndBookViews */
                );
            }
            function write_wb_bin(wb, opts) {
                var ba = buf_array();
                write_record(
                    ba,
                    131,
                    /* BrtBeginBook */
                );
                write_record(ba, 128, write_BrtFileVersion());
                write_record(
                    ba,
                    153,
                    write_BrtWbProp((wb.Workbook && wb.Workbook.WBProps) || null),
                );
                write_BOOKVIEWS(ba, wb, opts);
                write_BUNDLESHS(ba, wb, opts);
                write_record(
                    ba,
                    132,
                    /* BrtEndBook */
                );
                return ba.end();
            }
            function parse_wb(data2, name, opts) {
                if (name.slice(-4) === '.bin') return parse_wb_bin(data2, opts);
                return parse_wb_xml(data2, opts);
            }
            function parse_ws(data2, name, idx, opts, rels, wb, themes, styles) {
                if (name.slice(-4) === '.bin')
                    return parse_ws_bin(data2, opts, idx, rels, wb, themes, styles);
                return parse_ws_xml(data2, opts, idx, rels, wb, themes, styles);
            }
            function parse_cs(data2, name, idx, opts, rels, wb, themes, styles) {
                if (name.slice(-4) === '.bin')
                    return parse_cs_bin(data2, opts, idx, rels, wb, themes, styles);
                return parse_cs_xml(data2, opts, idx, rels, wb, themes, styles);
            }
            function parse_ms(data2, name, idx, opts, rels, wb, themes, styles) {
                if (name.slice(-4) === '.bin')
                    return parse_ms_bin(data2, opts, idx, rels, wb, themes, styles);
                return parse_ms_xml(data2, opts, idx, rels, wb, themes, styles);
            }
            function parse_ds(data2, name, idx, opts, rels, wb, themes, styles) {
                if (name.slice(-4) === '.bin')
                    return parse_ds_bin(data2, opts, idx, rels, wb, themes, styles);
                return parse_ds_xml(data2, opts, idx, rels, wb, themes, styles);
            }
            function parse_sty(data2, name, themes, opts) {
                if (name.slice(-4) === '.bin') return parse_sty_bin(data2, themes, opts);
                return parse_sty_xml(data2, themes, opts);
            }
            function parse_theme(data2, name, opts) {
                return parse_theme_xml(data2, opts);
            }
            function parse_sst(data2, name, opts) {
                if (name.slice(-4) === '.bin') return parse_sst_bin(data2, opts);
                return parse_sst_xml(data2, opts);
            }
            function parse_cmnt(data2, name, opts) {
                if (name.slice(-4) === '.bin') return parse_comments_bin(data2, opts);
                return parse_comments_xml(data2, opts);
            }
            function parse_cc(data2, name, opts) {
                if (name.slice(-4) === '.bin') return parse_cc_bin(data2, name, opts);
                return parse_cc_xml(data2, name, opts);
            }
            function parse_xlink(data2, rel, name, opts) {
                if (name.slice(-4) === '.bin') return parse_xlink_bin(data2, rel, name, opts);
                return parse_xlink_xml(data2, rel, name, opts);
            }
            function parse_xlmeta(data2, name, opts) {
                if (name.slice(-4) === '.bin') return parse_xlmeta_bin(data2, name, opts);
                return parse_xlmeta_xml(data2, name, opts);
            }
            function write_wb(wb, name, opts) {
                return (name.slice(-4) === '.bin' ? write_wb_bin : write_wb_xml)(wb, opts);
            }
            function write_ws(data2, name, opts, wb, rels) {
                return (name.slice(-4) === '.bin' ? write_ws_bin : write_ws_xml)(
                    data2,
                    opts,
                    wb,
                    rels,
                );
            }
            function write_cs(data2, name, opts, wb, rels) {
                return (name.slice(-4) === '.bin' ? write_cs_bin : write_cs_xml)(
                    data2,
                    opts,
                    wb,
                    rels,
                );
            }
            function write_sty(data2, name, opts) {
                return (name.slice(-4) === '.bin' ? write_sty_bin : write_sty_xml)(data2, opts);
            }
            function write_sst(data2, name, opts) {
                return (name.slice(-4) === '.bin' ? write_sst_bin : write_sst_xml)(data2, opts);
            }
            function write_cmnt(data2, name, opts) {
                return (name.slice(-4) === '.bin' ? write_comments_bin : write_comments_xml)(
                    data2,
                    opts,
                );
            }
            function write_xlmeta(name) {
                return (name.slice(-4) === '.bin' ? write_xlmeta_bin : write_xlmeta_xml)();
            }
            var attregexg2 = /([\w:]+)=((?:")([^"]*)(?:")|(?:')([^']*)(?:'))/g;
            var attregex2 = /([\w:]+)=((?:")(?:[^"]*)(?:")|(?:')(?:[^']*)(?:'))/;
            function xlml_parsexmltag(tag, skip_root) {
                var words = tag.split(/\s+/);
                var z = [];
                if (!skip_root) z[0] = words[0];
                if (words.length === 1) return z;
                var m2 = tag.match(attregexg2),
                    y,
                    j,
                    w,
                    i2;
                if (m2)
                    for (i2 = 0; i2 != m2.length; ++i2) {
                        y = m2[i2].match(attregex2);
                        if ((j = y[1].indexOf(':')) === -1)
                            z[y[1]] = y[2].slice(1, y[2].length - 1);
                        else {
                            if (y[1].slice(0, 6) === 'xmlns:') w = 'xmlns' + y[1].slice(6);
                            else w = y[1].slice(j + 1);
                            z[w] = y[2].slice(1, y[2].length - 1);
                        }
                    }
                return z;
            }
            function xlml_parsexmltagobj(tag) {
                var words = tag.split(/\s+/);
                var z = {};
                if (words.length === 1) return z;
                var m2 = tag.match(attregexg2),
                    y,
                    j,
                    w,
                    i2;
                if (m2)
                    for (i2 = 0; i2 != m2.length; ++i2) {
                        y = m2[i2].match(attregex2);
                        if ((j = y[1].indexOf(':')) === -1)
                            z[y[1]] = y[2].slice(1, y[2].length - 1);
                        else {
                            if (y[1].slice(0, 6) === 'xmlns:') w = 'xmlns' + y[1].slice(6);
                            else w = y[1].slice(j + 1);
                            z[w] = y[2].slice(1, y[2].length - 1);
                        }
                    }
                return z;
            }
            var XLMLFormatMap;
            function xlml_format(format, value) {
                var fmt = XLMLFormatMap[format] || unescapexml(format);
                if (fmt === 'General') return SSF_general(value);
                return SSF_format(fmt, value);
            }
            function xlml_set_custprop(Custprops, key, cp, val2) {
                var oval = val2;
                switch ((cp[0].match(/dt:dt="([\w.]+)"/) || ['', ''])[1]) {
                    case 'boolean':
                        oval = parsexmlbool(val2);
                        break;
                    case 'i2':
                    case 'int':
                        oval = parseInt(val2, 10);
                        break;
                    case 'r4':
                    case 'float':
                        oval = parseFloat(val2);
                        break;
                    case 'date':
                    case 'dateTime.tz':
                        oval = parseDate(val2);
                        break;
                    case 'i8':
                    case 'string':
                    case 'fixed':
                    case 'uuid':
                    case 'bin.base64':
                        break;
                    default:
                        throw new Error('bad custprop:' + cp[0]);
                }
                Custprops[unescapexml(key)] = oval;
            }
            function safe_format_xlml(cell, nf, o) {
                if (cell.t === 'z') return;
                if (!o || o.cellText !== false)
                    try {
                        if (cell.t === 'e') {
                            cell.w = cell.w || BErr[cell.v];
                        } else if (nf === 'General') {
                            if (cell.t === 'n') {
                                if ((cell.v | 0) === cell.v) cell.w = cell.v.toString(10);
                                else cell.w = SSF_general_num(cell.v);
                            } else cell.w = SSF_general(cell.v);
                        } else cell.w = xlml_format(nf || 'General', cell.v);
                    } catch (e2) {
                        if (o.WTF) throw e2;
                    }
                try {
                    var z = XLMLFormatMap[nf] || nf || 'General';
                    if (o.cellNF) cell.z = z;
                    if (o.cellDates && cell.t == 'n' && fmt_is_date(z)) {
                        var _d2 = SSF_parse_date_code(cell.v);
                        if (_d2) {
                            cell.t = 'd';
                            cell.v = new Date(_d2.y, _d2.m - 1, _d2.d, _d2.H, _d2.M, _d2.S, _d2.u);
                        }
                    }
                } catch (e2) {
                    if (o.WTF) throw e2;
                }
            }
            function process_style_xlml(styles, stag, opts) {
                if (opts.cellStyles) {
                    if (stag.Interior) {
                        var I = stag.Interior;
                        if (I.Pattern) I.patternType = XLMLPatternTypeMap[I.Pattern] || I.Pattern;
                    }
                }
                styles[stag.ID] = stag;
            }
            function parse_xlml_data(xml2, ss, data2, cell, base, styles, csty, row, arrayf, o) {
                var nf = 'General',
                    sid = cell.StyleID,
                    S2 = {};
                o = o || {};
                var interiors = [];
                var i2 = 0;
                if (sid === void 0 && row) sid = row.StyleID;
                if (sid === void 0 && csty) sid = csty.StyleID;
                while (styles[sid] !== void 0) {
                    if (styles[sid].nf) nf = styles[sid].nf;
                    if (styles[sid].Interior) interiors.push(styles[sid].Interior);
                    if (!styles[sid].Parent) break;
                    sid = styles[sid].Parent;
                }
                switch (data2.Type) {
                    case 'Boolean':
                        cell.t = 'b';
                        cell.v = parsexmlbool(xml2);
                        break;
                    case 'String':
                        cell.t = 's';
                        cell.r = xlml_fixstr(unescapexml(xml2));
                        cell.v =
                            xml2.indexOf('<') > -1
                                ? unescapexml(ss || xml2).replace(/<.*?>/g, '')
                                : cell.r;
                        break;
                    case 'DateTime':
                        if (xml2.slice(-1) != 'Z') xml2 += 'Z';
                        cell.v =
                            (parseDate(xml2) - new Date(Date.UTC(1899, 11, 30))) /
                            (24 * 60 * 60 * 1e3);
                        if (cell.v !== cell.v) cell.v = unescapexml(xml2);
                        else if (cell.v < 60) cell.v = cell.v - 1;
                        if (!nf || nf == 'General') nf = 'yyyy-mm-dd';
                    case 'Number':
                        if (cell.v === void 0) cell.v = +xml2;
                        if (!cell.t) cell.t = 'n';
                        break;
                    case 'Error':
                        cell.t = 'e';
                        cell.v = RBErr[xml2];
                        if (o.cellText !== false) cell.w = xml2;
                        break;
                    default:
                        if (xml2 == '' && ss == '') {
                            cell.t = 'z';
                        } else {
                            cell.t = 's';
                            cell.v = xlml_fixstr(ss || xml2);
                        }
                        break;
                }
                safe_format_xlml(cell, nf, o);
                if (o.cellFormula !== false) {
                    if (cell.Formula) {
                        var fstr = unescapexml(cell.Formula);
                        if (fstr.charCodeAt(0) == 61) fstr = fstr.slice(1);
                        cell.f = rc_to_a1(fstr, base);
                        delete cell.Formula;
                        if (cell.ArrayRange == 'RC') cell.F = rc_to_a1('RC:RC', base);
                        else if (cell.ArrayRange) {
                            cell.F = rc_to_a1(cell.ArrayRange, base);
                            arrayf.push([safe_decode_range(cell.F), cell.F]);
                        }
                    } else {
                        for (i2 = 0; i2 < arrayf.length; ++i2)
                            if (base.r >= arrayf[i2][0].s.r && base.r <= arrayf[i2][0].e.r) {
                                if (base.c >= arrayf[i2][0].s.c && base.c <= arrayf[i2][0].e.c)
                                    cell.F = arrayf[i2][1];
                            }
                    }
                }
                if (o.cellStyles) {
                    interiors.forEach(function (x2) {
                        if (!S2.patternType && x2.patternType) S2.patternType = x2.patternType;
                    });
                    cell.s = S2;
                }
                if (cell.StyleID !== void 0) cell.ixfe = cell.StyleID;
            }
            function xlml_clean_comment(comment) {
                comment.t = comment.v || '';
                comment.t = comment.t.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
                comment.v = comment.w = comment.ixfe = void 0;
            }
            function parse_xlml_xml(d, _opts) {
                var opts = _opts || {};
                make_ssf();
                var str = debom(xlml_normalize(d));
                if (opts.type == 'binary' || opts.type == 'array' || opts.type == 'base64') {
                    if (typeof $cptable !== 'undefined')
                        str = $cptable.utils.decode(65001, char_codes(str));
                    else str = utf8read(str);
                }
                var opening = str.slice(0, 1024).toLowerCase(),
                    ishtml = false;
                opening = opening.replace(/".*?"/g, '');
                if (
                    (opening.indexOf('>') & 1023) >
                    Math.min(opening.indexOf(',') & 1023, opening.indexOf(';') & 1023)
                ) {
                    var _o = dup(opts);
                    _o.type = 'string';
                    return PRN.to_workbook(str, _o);
                }
                if (opening.indexOf('<?xml') == -1)
                    ['html', 'table', 'head', 'meta', 'script', 'style', 'div'].forEach(
                        function (tag) {
                            if (opening.indexOf('<' + tag) >= 0) ishtml = true;
                        },
                    );
                if (ishtml) return html_to_workbook(str, opts);
                XLMLFormatMap = {
                    'General Number': 'General',
                    'General Date': table_fmt[22],
                    'Long Date': 'dddd, mmmm dd, yyyy',
                    'Medium Date': table_fmt[15],
                    'Short Date': table_fmt[14],
                    'Long Time': table_fmt[19],
                    'Medium Time': table_fmt[18],
                    'Short Time': table_fmt[20],
                    Currency: '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
                    Fixed: table_fmt[2],
                    Standard: table_fmt[4],
                    Percent: table_fmt[10],
                    Scientific: table_fmt[11],
                    'Yes/No': '"Yes";"Yes";"No";@',
                    'True/False': '"True";"True";"False";@',
                    'On/Off': '"Yes";"Yes";"No";@',
                };
                var Rn;
                var state = [],
                    tmp;
                if (DENSE != null && opts.dense == null) opts.dense = DENSE;
                var sheets = {},
                    sheetnames = [],
                    cursheet = opts.dense ? [] : {},
                    sheetname = '';
                var cell = {},
                    row = {};
                var dtag = xlml_parsexmltag('<Data ss:Type="String">'),
                    didx = 0;
                var c = 0,
                    r2 = 0;
                var refguess = { s: { r: 2e6, c: 2e6 }, e: { r: 0, c: 0 } };
                var styles = {},
                    stag = {};
                var ss = '',
                    fidx = 0;
                var merges = [];
                var Props = {},
                    Custprops = {},
                    pidx = 0,
                    cp = [];
                var comments = [],
                    comment = {};
                var cstys = [],
                    csty,
                    seencol = false;
                var arrayf = [];
                var rowinfo = [],
                    rowobj = {},
                    cc = 0,
                    rr = 0;
                var Workbook = { Sheets: [], WBProps: { date1904: false } },
                    wsprops = {};
                xlmlregex.lastIndex = 0;
                str = str.replace(/<!--([\s\S]*?)-->/gm, '');
                var raw_Rn3 = '';
                while ((Rn = xlmlregex.exec(str)))
                    switch ((Rn[3] = (raw_Rn3 = Rn[3]).toLowerCase())) {
                        case 'data':
                            if (raw_Rn3 == 'data') {
                                if (Rn[1] === '/') {
                                    if ((tmp = state.pop())[0] !== Rn[3])
                                        throw new Error('Bad state: ' + tmp.join('|'));
                                } else if (Rn[0].charAt(Rn[0].length - 2) !== '/')
                                    state.push([Rn[3], true]);
                                break;
                            }
                            if (state[state.length - 1][1]) break;
                            if (Rn[1] === '/')
                                parse_xlml_data(
                                    str.slice(didx, Rn.index),
                                    ss,
                                    dtag,
                                    state[state.length - 1][0] /*"Comment"*/ == 'comment'
                                        ? comment
                                        : cell,
                                    { c, r: r2 },
                                    styles,
                                    cstys[c],
                                    row,
                                    arrayf,
                                    opts,
                                );
                            else {
                                ss = '';
                                dtag = xlml_parsexmltag(Rn[0]);
                                didx = Rn.index + Rn[0].length;
                            }
                            break;
                        case 'cell':
                            if (Rn[1] === '/') {
                                if (comments.length > 0) cell.c = comments;
                                if ((!opts.sheetRows || opts.sheetRows > r2) && cell.v !== void 0) {
                                    if (opts.dense) {
                                        if (!cursheet[r2]) cursheet[r2] = [];
                                        cursheet[r2][c] = cell;
                                    } else cursheet[encode_col(c) + encode_row(r2)] = cell;
                                }
                                if (cell.HRef) {
                                    cell.l = { Target: unescapexml(cell.HRef) };
                                    if (cell.HRefScreenTip) cell.l.Tooltip = cell.HRefScreenTip;
                                    delete cell.HRef;
                                    delete cell.HRefScreenTip;
                                }
                                if (cell.MergeAcross || cell.MergeDown) {
                                    cc = c + (parseInt(cell.MergeAcross, 10) | 0);
                                    rr = r2 + (parseInt(cell.MergeDown, 10) | 0);
                                    merges.push({ s: { c, r: r2 }, e: { c: cc, r: rr } });
                                }
                                if (!opts.sheetStubs) {
                                    if (cell.MergeAcross) c = cc + 1;
                                    else ++c;
                                } else if (cell.MergeAcross || cell.MergeDown) {
                                    for (var cma = c; cma <= cc; ++cma) {
                                        for (var cmd = r2; cmd <= rr; ++cmd) {
                                            if (cma > c || cmd > r2) {
                                                if (opts.dense) {
                                                    if (!cursheet[cmd]) cursheet[cmd] = [];
                                                    cursheet[cmd][cma] = { t: 'z' };
                                                } else
                                                    cursheet[encode_col(cma) + encode_row(cmd)] = {
                                                        t: 'z',
                                                    };
                                            }
                                        }
                                    }
                                    c = cc + 1;
                                } else ++c;
                            } else {
                                cell = xlml_parsexmltagobj(Rn[0]);
                                if (cell.Index) c = +cell.Index - 1;
                                if (c < refguess.s.c) refguess.s.c = c;
                                if (c > refguess.e.c) refguess.e.c = c;
                                if (Rn[0].slice(-2) === '/>') ++c;
                                comments = [];
                            }
                            break;
                        case 'row':
                            if (Rn[1] === '/' || Rn[0].slice(-2) === '/>') {
                                if (r2 < refguess.s.r) refguess.s.r = r2;
                                if (r2 > refguess.e.r) refguess.e.r = r2;
                                if (Rn[0].slice(-2) === '/>') {
                                    row = xlml_parsexmltag(Rn[0]);
                                    if (row.Index) r2 = +row.Index - 1;
                                }
                                c = 0;
                                ++r2;
                            } else {
                                row = xlml_parsexmltag(Rn[0]);
                                if (row.Index) r2 = +row.Index - 1;
                                rowobj = {};
                                if (row.AutoFitHeight == '0' || row.Height) {
                                    rowobj.hpx = parseInt(row.Height, 10);
                                    rowobj.hpt = px2pt(rowobj.hpx);
                                    rowinfo[r2] = rowobj;
                                }
                                if (row.Hidden == '1') {
                                    rowobj.hidden = true;
                                    rowinfo[r2] = rowobj;
                                }
                            }
                            break;
                        case 'worksheet':
                            if (Rn[1] === '/') {
                                if ((tmp = state.pop())[0] !== Rn[3])
                                    throw new Error('Bad state: ' + tmp.join('|'));
                                sheetnames.push(sheetname);
                                if (refguess.s.r <= refguess.e.r && refguess.s.c <= refguess.e.c) {
                                    cursheet['!ref'] = encode_range(refguess);
                                    if (opts.sheetRows && opts.sheetRows <= refguess.e.r) {
                                        cursheet['!fullref'] = cursheet['!ref'];
                                        refguess.e.r = opts.sheetRows - 1;
                                        cursheet['!ref'] = encode_range(refguess);
                                    }
                                }
                                if (merges.length) cursheet['!merges'] = merges;
                                if (cstys.length > 0) cursheet['!cols'] = cstys;
                                if (rowinfo.length > 0) cursheet['!rows'] = rowinfo;
                                sheets[sheetname] = cursheet;
                            } else {
                                refguess = { s: { r: 2e6, c: 2e6 }, e: { r: 0, c: 0 } };
                                r2 = c = 0;
                                state.push([Rn[3], false]);
                                tmp = xlml_parsexmltag(Rn[0]);
                                sheetname = unescapexml(tmp.Name);
                                cursheet = opts.dense ? [] : {};
                                merges = [];
                                arrayf = [];
                                rowinfo = [];
                                wsprops = { name: sheetname, Hidden: 0 };
                                Workbook.Sheets.push(wsprops);
                            }
                            break;
                        case 'table':
                            if (Rn[1] === '/') {
                                if ((tmp = state.pop())[0] !== Rn[3])
                                    throw new Error('Bad state: ' + tmp.join('|'));
                            } else if (Rn[0].slice(-2) == '/>') break;
                            else {
                                state.push([Rn[3], false]);
                                cstys = [];
                                seencol = false;
                            }
                            break;
                        case 'style':
                            if (Rn[1] === '/') process_style_xlml(styles, stag, opts);
                            else stag = xlml_parsexmltag(Rn[0]);
                            break;
                        case 'numberformat':
                            stag.nf = unescapexml(xlml_parsexmltag(Rn[0]).Format || 'General');
                            if (XLMLFormatMap[stag.nf]) stag.nf = XLMLFormatMap[stag.nf];
                            for (var ssfidx = 0; ssfidx != 392; ++ssfidx)
                                if (table_fmt[ssfidx] == stag.nf) break;
                            if (ssfidx == 392) {
                                for (ssfidx = 57; ssfidx != 392; ++ssfidx)
                                    if (table_fmt[ssfidx] == null) {
                                        SSF_load(stag.nf, ssfidx);
                                        break;
                                    }
                            }
                            break;
                        case 'column':
                            if (state[state.length - 1][0] /*'Table'*/ !== 'table') break;
                            csty = xlml_parsexmltag(Rn[0]);
                            if (csty.Hidden) {
                                csty.hidden = true;
                                delete csty.Hidden;
                            }
                            if (csty.Width) csty.wpx = parseInt(csty.Width, 10);
                            if (!seencol && csty.wpx > 10) {
                                seencol = true;
                                MDW = DEF_MDW;
                                for (var _col = 0; _col < cstys.length; ++_col)
                                    if (cstys[_col]) process_col(cstys[_col]);
                            }
                            if (seencol) process_col(csty);
                            cstys[csty.Index - 1 || cstys.length] = csty;
                            for (var i2 = 0; i2 < +csty.Span; ++i2) cstys[cstys.length] = dup(csty);
                            break;
                        case 'namedrange':
                            if (Rn[1] === '/') break;
                            if (!Workbook.Names) Workbook.Names = [];
                            var _NamedRange = parsexmltag(Rn[0]);
                            var _DefinedName = {
                                Name: _NamedRange.Name,
                                Ref: rc_to_a1(_NamedRange.RefersTo.slice(1), { r: 0, c: 0 }),
                            };
                            if (Workbook.Sheets.length > 0)
                                _DefinedName.Sheet = Workbook.Sheets.length - 1;
                            Workbook.Names.push(_DefinedName);
                            break;
                        case 'namedcell':
                            break;
                        case 'b':
                            break;
                        case 'i':
                            break;
                        case 'u':
                            break;
                        case 's':
                            break;
                        case 'em':
                            break;
                        case 'h2':
                            break;
                        case 'h3':
                            break;
                        case 'sub':
                            break;
                        case 'sup':
                            break;
                        case 'span':
                            break;
                        case 'alignment':
                            break;
                        case 'borders':
                            break;
                        case 'border':
                            break;
                        case 'font':
                            if (Rn[0].slice(-2) === '/>') break;
                            else if (Rn[1] === '/') ss += str.slice(fidx, Rn.index);
                            else fidx = Rn.index + Rn[0].length;
                            break;
                        case 'interior':
                            if (!opts.cellStyles) break;
                            stag.Interior = xlml_parsexmltag(Rn[0]);
                            break;
                        case 'protection':
                            break;
                        case 'author':
                        case 'title':
                        case 'description':
                        case 'created':
                        case 'keywords':
                        case 'subject':
                        case 'category':
                        case 'company':
                        case 'lastauthor':
                        case 'lastsaved':
                        case 'lastprinted':
                        case 'version':
                        case 'revision':
                        case 'totaltime':
                        case 'hyperlinkbase':
                        case 'manager':
                        case 'contentstatus':
                        case 'identifier':
                        case 'language':
                        case 'appname':
                            if (Rn[0].slice(-2) === '/>') break;
                            else if (Rn[1] === '/')
                                xlml_set_prop(Props, raw_Rn3, str.slice(pidx, Rn.index));
                            else pidx = Rn.index + Rn[0].length;
                            break;
                        case 'paragraphs':
                            break;
                        case 'styles':
                        case 'workbook':
                            if (Rn[1] === '/') {
                                if ((tmp = state.pop())[0] !== Rn[3])
                                    throw new Error('Bad state: ' + tmp.join('|'));
                            } else state.push([Rn[3], false]);
                            break;
                        case 'comment':
                            if (Rn[1] === '/') {
                                if ((tmp = state.pop())[0] !== Rn[3])
                                    throw new Error('Bad state: ' + tmp.join('|'));
                                xlml_clean_comment(comment);
                                comments.push(comment);
                            } else {
                                state.push([Rn[3], false]);
                                tmp = xlml_parsexmltag(Rn[0]);
                                comment = { a: tmp.Author };
                            }
                            break;
                        case 'autofilter':
                            if (Rn[1] === '/') {
                                if ((tmp = state.pop())[0] !== Rn[3])
                                    throw new Error('Bad state: ' + tmp.join('|'));
                            } else if (Rn[0].charAt(Rn[0].length - 2) !== '/') {
                                var AutoFilter = xlml_parsexmltag(Rn[0]);
                                cursheet['!autofilter'] = {
                                    ref: rc_to_a1(AutoFilter.Range).replace(/\$/g, ''),
                                };
                                state.push([Rn[3], true]);
                            }
                            break;
                        case 'name':
                            break;
                        case 'datavalidation':
                            if (Rn[1] === '/') {
                                if ((tmp = state.pop())[0] !== Rn[3])
                                    throw new Error('Bad state: ' + tmp.join('|'));
                            } else {
                                if (Rn[0].charAt(Rn[0].length - 2) !== '/')
                                    state.push([Rn[3], true]);
                            }
                            break;
                        case 'pixelsperinch':
                            break;
                        case 'componentoptions':
                        case 'documentproperties':
                        case 'customdocumentproperties':
                        case 'officedocumentsettings':
                        case 'pivottable':
                        case 'pivotcache':
                        case 'names':
                        case 'mapinfo':
                        case 'pagebreaks':
                        case 'querytable':
                        case 'sorting':
                        case 'schema':
                        case 'conditionalformatting':
                        case 'smarttagtype':
                        case 'smarttags':
                        case 'excelworkbook':
                        case 'workbookoptions':
                        case 'worksheetoptions':
                            if (Rn[1] === '/') {
                                if ((tmp = state.pop())[0] !== Rn[3])
                                    throw new Error('Bad state: ' + tmp.join('|'));
                            } else if (Rn[0].charAt(Rn[0].length - 2) !== '/')
                                state.push([Rn[3], true]);
                            break;
                        case 'null':
                            break;
                        default:
                            if (state.length == 0 && Rn[3] == 'document')
                                return parse_fods(str, opts);
                            if (state.length == 0 && Rn[3] == 'uof') return parse_fods(str, opts);
                            var seen = true;
                            switch (state[state.length - 1][0]) {
                                case 'officedocumentsettings':
                                    switch (Rn[3]) {
                                        case 'allowpng':
                                            break;
                                        case 'removepersonalinformation':
                                            break;
                                        case 'downloadcomponents':
                                            break;
                                        case 'locationofcomponents':
                                            break;
                                        case 'colors':
                                            break;
                                        case 'color':
                                            break;
                                        case 'index':
                                            break;
                                        case 'rgb':
                                            break;
                                        case 'targetscreensize':
                                            break;
                                        case 'readonlyrecommended':
                                            break;
                                        default:
                                            seen = false;
                                    }
                                    break;
                                case 'componentoptions':
                                    switch (Rn[3]) {
                                        case 'toolbar':
                                            break;
                                        case 'hideofficelogo':
                                            break;
                                        case 'spreadsheetautofit':
                                            break;
                                        case 'label':
                                            break;
                                        case 'caption':
                                            break;
                                        case 'maxheight':
                                            break;
                                        case 'maxwidth':
                                            break;
                                        case 'nextsheetnumber':
                                            break;
                                        default:
                                            seen = false;
                                    }
                                    break;
                                case 'excelworkbook':
                                    switch (Rn[3]) {
                                        case 'date1904':
                                            Workbook.WBProps.date1904 = true;
                                            break;
                                        case 'windowheight':
                                            break;
                                        case 'windowwidth':
                                            break;
                                        case 'windowtopx':
                                            break;
                                        case 'windowtopy':
                                            break;
                                        case 'tabratio':
                                            break;
                                        case 'protectstructure':
                                            break;
                                        case 'protectwindow':
                                            break;
                                        case 'protectwindows':
                                            break;
                                        case 'activesheet':
                                            break;
                                        case 'displayinknotes':
                                            break;
                                        case 'firstvisiblesheet':
                                            break;
                                        case 'supbook':
                                            break;
                                        case 'sheetname':
                                            break;
                                        case 'sheetindex':
                                            break;
                                        case 'sheetindexfirst':
                                            break;
                                        case 'sheetindexlast':
                                            break;
                                        case 'dll':
                                            break;
                                        case 'acceptlabelsinformulas':
                                            break;
                                        case 'donotsavelinkvalues':
                                            break;
                                        case 'iteration':
                                            break;
                                        case 'maxiterations':
                                            break;
                                        case 'maxchange':
                                            break;
                                        case 'path':
                                            break;
                                        case 'xct':
                                            break;
                                        case 'count':
                                            break;
                                        case 'selectedsheets':
                                            break;
                                        case 'calculation':
                                            break;
                                        case 'uncalced':
                                            break;
                                        case 'startupprompt':
                                            break;
                                        case 'crn':
                                            break;
                                        case 'externname':
                                            break;
                                        case 'formula':
                                            break;
                                        case 'colfirst':
                                            break;
                                        case 'collast':
                                            break;
                                        case 'wantadvise':
                                            break;
                                        case 'boolean':
                                            break;
                                        case 'error':
                                            break;
                                        case 'text':
                                            break;
                                        case 'ole':
                                            break;
                                        case 'noautorecover':
                                            break;
                                        case 'publishobjects':
                                            break;
                                        case 'donotcalculatebeforesave':
                                            break;
                                        case 'number':
                                            break;
                                        case 'refmoder1c1':
                                            break;
                                        case 'embedsavesmarttags':
                                            break;
                                        default:
                                            seen = false;
                                    }
                                    break;
                                case 'workbookoptions':
                                    switch (Rn[3]) {
                                        case 'owcversion':
                                            break;
                                        case 'height':
                                            break;
                                        case 'width':
                                            break;
                                        default:
                                            seen = false;
                                    }
                                    break;
                                case 'worksheetoptions':
                                    switch (Rn[3]) {
                                        case 'visible':
                                            if (Rn[0].slice(-2) === '/>') {
                                            } else if (Rn[1] === '/')
                                                switch (str.slice(pidx, Rn.index)) {
                                                    case 'SheetHidden':
                                                        wsprops.Hidden = 1;
                                                        break;
                                                    case 'SheetVeryHidden':
                                                        wsprops.Hidden = 2;
                                                        break;
                                                }
                                            else pidx = Rn.index + Rn[0].length;
                                            break;
                                        case 'header':
                                            if (!cursheet['!margins'])
                                                default_margins(
                                                    (cursheet['!margins'] = {}),
                                                    'xlml',
                                                );
                                            if (!isNaN(+parsexmltag(Rn[0]).Margin))
                                                cursheet['!margins'].header = +parsexmltag(Rn[0])
                                                    .Margin;
                                            break;
                                        case 'footer':
                                            if (!cursheet['!margins'])
                                                default_margins(
                                                    (cursheet['!margins'] = {}),
                                                    'xlml',
                                                );
                                            if (!isNaN(+parsexmltag(Rn[0]).Margin))
                                                cursheet['!margins'].footer = +parsexmltag(Rn[0])
                                                    .Margin;
                                            break;
                                        case 'pagemargins':
                                            var pagemargins = parsexmltag(Rn[0]);
                                            if (!cursheet['!margins'])
                                                default_margins(
                                                    (cursheet['!margins'] = {}),
                                                    'xlml',
                                                );
                                            if (!isNaN(+pagemargins.Top))
                                                cursheet['!margins'].top = +pagemargins.Top;
                                            if (!isNaN(+pagemargins.Left))
                                                cursheet['!margins'].left = +pagemargins.Left;
                                            if (!isNaN(+pagemargins.Right))
                                                cursheet['!margins'].right = +pagemargins.Right;
                                            if (!isNaN(+pagemargins.Bottom))
                                                cursheet['!margins'].bottom = +pagemargins.Bottom;
                                            break;
                                        case 'displayrighttoleft':
                                            if (!Workbook.Views) Workbook.Views = [];
                                            if (!Workbook.Views[0]) Workbook.Views[0] = {};
                                            Workbook.Views[0].RTL = true;
                                            break;
                                        case 'freezepanes':
                                            break;
                                        case 'frozennosplit':
                                            break;
                                        case 'splithorizontal':
                                        case 'splitvertical':
                                            break;
                                        case 'donotdisplaygridlines':
                                            break;
                                        case 'activerow':
                                            break;
                                        case 'activecol':
                                            break;
                                        case 'toprowbottompane':
                                            break;
                                        case 'leftcolumnrightpane':
                                            break;
                                        case 'unsynced':
                                            break;
                                        case 'print':
                                            break;
                                        case 'printerrors':
                                            break;
                                        case 'panes':
                                            break;
                                        case 'scale':
                                            break;
                                        case 'pane':
                                            break;
                                        case 'number':
                                            break;
                                        case 'layout':
                                            break;
                                        case 'pagesetup':
                                            break;
                                        case 'selected':
                                            break;
                                        case 'protectobjects':
                                            break;
                                        case 'enableselection':
                                            break;
                                        case 'protectscenarios':
                                            break;
                                        case 'validprinterinfo':
                                            break;
                                        case 'horizontalresolution':
                                            break;
                                        case 'verticalresolution':
                                            break;
                                        case 'numberofcopies':
                                            break;
                                        case 'activepane':
                                            break;
                                        case 'toprowvisible':
                                            break;
                                        case 'leftcolumnvisible':
                                            break;
                                        case 'fittopage':
                                            break;
                                        case 'rangeselection':
                                            break;
                                        case 'papersizeindex':
                                            break;
                                        case 'pagelayoutzoom':
                                            break;
                                        case 'pagebreakzoom':
                                            break;
                                        case 'filteron':
                                            break;
                                        case 'fitwidth':
                                            break;
                                        case 'fitheight':
                                            break;
                                        case 'commentslayout':
                                            break;
                                        case 'zoom':
                                            break;
                                        case 'lefttoright':
                                            break;
                                        case 'gridlines':
                                            break;
                                        case 'allowsort':
                                            break;
                                        case 'allowfilter':
                                            break;
                                        case 'allowinsertrows':
                                            break;
                                        case 'allowdeleterows':
                                            break;
                                        case 'allowinsertcols':
                                            break;
                                        case 'allowdeletecols':
                                            break;
                                        case 'allowinserthyperlinks':
                                            break;
                                        case 'allowformatcells':
                                            break;
                                        case 'allowsizecols':
                                            break;
                                        case 'allowsizerows':
                                            break;
                                        case 'nosummaryrowsbelowdetail':
                                            if (!cursheet['!outline']) cursheet['!outline'] = {};
                                            cursheet['!outline'].above = true;
                                            break;
                                        case 'tabcolorindex':
                                            break;
                                        case 'donotdisplayheadings':
                                            break;
                                        case 'showpagelayoutzoom':
                                            break;
                                        case 'nosummarycolumnsrightdetail':
                                            if (!cursheet['!outline']) cursheet['!outline'] = {};
                                            cursheet['!outline'].left = true;
                                            break;
                                        case 'blackandwhite':
                                            break;
                                        case 'donotdisplayzeros':
                                            break;
                                        case 'displaypagebreak':
                                            break;
                                        case 'rowcolheadings':
                                            break;
                                        case 'donotdisplayoutline':
                                            break;
                                        case 'noorientation':
                                            break;
                                        case 'allowusepivottables':
                                            break;
                                        case 'zeroheight':
                                            break;
                                        case 'viewablerange':
                                            break;
                                        case 'selection':
                                            break;
                                        case 'protectcontents':
                                            break;
                                        default:
                                            seen = false;
                                    }
                                    break;
                                case 'pivottable':
                                case 'pivotcache':
                                    switch (Rn[3]) {
                                        case 'immediateitemsondrop':
                                            break;
                                        case 'showpagemultipleitemlabel':
                                            break;
                                        case 'compactrowindent':
                                            break;
                                        case 'location':
                                            break;
                                        case 'pivotfield':
                                            break;
                                        case 'orientation':
                                            break;
                                        case 'layoutform':
                                            break;
                                        case 'layoutsubtotallocation':
                                            break;
                                        case 'layoutcompactrow':
                                            break;
                                        case 'position':
                                            break;
                                        case 'pivotitem':
                                            break;
                                        case 'datatype':
                                            break;
                                        case 'datafield':
                                            break;
                                        case 'sourcename':
                                            break;
                                        case 'parentfield':
                                            break;
                                        case 'ptlineitems':
                                            break;
                                        case 'ptlineitem':
                                            break;
                                        case 'countofsameitems':
                                            break;
                                        case 'item':
                                            break;
                                        case 'itemtype':
                                            break;
                                        case 'ptsource':
                                            break;
                                        case 'cacheindex':
                                            break;
                                        case 'consolidationreference':
                                            break;
                                        case 'filename':
                                            break;
                                        case 'reference':
                                            break;
                                        case 'nocolumngrand':
                                            break;
                                        case 'norowgrand':
                                            break;
                                        case 'blanklineafteritems':
                                            break;
                                        case 'hidden':
                                            break;
                                        case 'subtotal':
                                            break;
                                        case 'basefield':
                                            break;
                                        case 'mapchilditems':
                                            break;
                                        case 'function':
                                            break;
                                        case 'refreshonfileopen':
                                            break;
                                        case 'printsettitles':
                                            break;
                                        case 'mergelabels':
                                            break;
                                        case 'defaultversion':
                                            break;
                                        case 'refreshname':
                                            break;
                                        case 'refreshdate':
                                            break;
                                        case 'refreshdatecopy':
                                            break;
                                        case 'versionlastrefresh':
                                            break;
                                        case 'versionlastupdate':
                                            break;
                                        case 'versionupdateablemin':
                                            break;
                                        case 'versionrefreshablemin':
                                            break;
                                        case 'calculation':
                                            break;
                                        default:
                                            seen = false;
                                    }
                                    break;
                                case 'pagebreaks':
                                    switch (Rn[3]) {
                                        case 'colbreaks':
                                            break;
                                        case 'colbreak':
                                            break;
                                        case 'rowbreaks':
                                            break;
                                        case 'rowbreak':
                                            break;
                                        case 'colstart':
                                            break;
                                        case 'colend':
                                            break;
                                        case 'rowend':
                                            break;
                                        default:
                                            seen = false;
                                    }
                                    break;
                                case 'autofilter':
                                    switch (Rn[3]) {
                                        case 'autofiltercolumn':
                                            break;
                                        case 'autofiltercondition':
                                            break;
                                        case 'autofilterand':
                                            break;
                                        case 'autofilteror':
                                            break;
                                        default:
                                            seen = false;
                                    }
                                    break;
                                case 'querytable':
                                    switch (Rn[3]) {
                                        case 'id':
                                            break;
                                        case 'autoformatfont':
                                            break;
                                        case 'autoformatpattern':
                                            break;
                                        case 'querysource':
                                            break;
                                        case 'querytype':
                                            break;
                                        case 'enableredirections':
                                            break;
                                        case 'refreshedinxl9':
                                            break;
                                        case 'urlstring':
                                            break;
                                        case 'htmltables':
                                            break;
                                        case 'connection':
                                            break;
                                        case 'commandtext':
                                            break;
                                        case 'refreshinfo':
                                            break;
                                        case 'notitles':
                                            break;
                                        case 'nextid':
                                            break;
                                        case 'columninfo':
                                            break;
                                        case 'overwritecells':
                                            break;
                                        case 'donotpromptforfile':
                                            break;
                                        case 'textwizardsettings':
                                            break;
                                        case 'source':
                                            break;
                                        case 'number':
                                            break;
                                        case 'decimal':
                                            break;
                                        case 'thousandseparator':
                                            break;
                                        case 'trailingminusnumbers':
                                            break;
                                        case 'formatsettings':
                                            break;
                                        case 'fieldtype':
                                            break;
                                        case 'delimiters':
                                            break;
                                        case 'tab':
                                            break;
                                        case 'comma':
                                            break;
                                        case 'autoformatname':
                                            break;
                                        case 'versionlastedit':
                                            break;
                                        case 'versionlastrefresh':
                                            break;
                                        default:
                                            seen = false;
                                    }
                                    break;
                                case 'datavalidation':
                                    switch (Rn[3]) {
                                        case 'range':
                                            break;
                                        case 'type':
                                            break;
                                        case 'min':
                                            break;
                                        case 'max':
                                            break;
                                        case 'sort':
                                            break;
                                        case 'descending':
                                            break;
                                        case 'order':
                                            break;
                                        case 'casesensitive':
                                            break;
                                        case 'value':
                                            break;
                                        case 'errorstyle':
                                            break;
                                        case 'errormessage':
                                            break;
                                        case 'errortitle':
                                            break;
                                        case 'inputmessage':
                                            break;
                                        case 'inputtitle':
                                            break;
                                        case 'combohide':
                                            break;
                                        case 'inputhide':
                                            break;
                                        case 'condition':
                                            break;
                                        case 'qualifier':
                                            break;
                                        case 'useblank':
                                            break;
                                        case 'value1':
                                            break;
                                        case 'value2':
                                            break;
                                        case 'format':
                                            break;
                                        case 'cellrangelist':
                                            break;
                                        default:
                                            seen = false;
                                    }
                                    break;
                                case 'sorting':
                                case 'conditionalformatting':
                                    switch (Rn[3]) {
                                        case 'range':
                                            break;
                                        case 'type':
                                            break;
                                        case 'min':
                                            break;
                                        case 'max':
                                            break;
                                        case 'sort':
                                            break;
                                        case 'descending':
                                            break;
                                        case 'order':
                                            break;
                                        case 'casesensitive':
                                            break;
                                        case 'value':
                                            break;
                                        case 'errorstyle':
                                            break;
                                        case 'errormessage':
                                            break;
                                        case 'errortitle':
                                            break;
                                        case 'cellrangelist':
                                            break;
                                        case 'inputmessage':
                                            break;
                                        case 'inputtitle':
                                            break;
                                        case 'combohide':
                                            break;
                                        case 'inputhide':
                                            break;
                                        case 'condition':
                                            break;
                                        case 'qualifier':
                                            break;
                                        case 'useblank':
                                            break;
                                        case 'value1':
                                            break;
                                        case 'value2':
                                            break;
                                        case 'format':
                                            break;
                                        default:
                                            seen = false;
                                    }
                                    break;
                                case 'mapinfo':
                                case 'schema':
                                case 'data':
                                    switch (Rn[3]) {
                                        case 'map':
                                            break;
                                        case 'entry':
                                            break;
                                        case 'range':
                                            break;
                                        case 'xpath':
                                            break;
                                        case 'field':
                                            break;
                                        case 'xsdtype':
                                            break;
                                        case 'filteron':
                                            break;
                                        case 'aggregate':
                                            break;
                                        case 'elementtype':
                                            break;
                                        case 'attributetype':
                                            break;
                                        case 'schema':
                                        case 'element':
                                        case 'complextype':
                                        case 'datatype':
                                        case 'all':
                                        case 'attribute':
                                        case 'extends':
                                            break;
                                        case 'row':
                                            break;
                                        default:
                                            seen = false;
                                    }
                                    break;
                                case 'smarttags':
                                    break;
                                default:
                                    seen = false;
                                    break;
                            }
                            if (seen) break;
                            if (Rn[3].match(/!\[CDATA/)) break;
                            if (!state[state.length - 1][1])
                                throw 'Unrecognized tag: ' + Rn[3] + '|' + state.join('|');
                            if (
                                state[state.length - 1][0] /*'CustomDocumentProperties'*/ ===
                                'customdocumentproperties'
                            ) {
                                if (Rn[0].slice(-2) === '/>') break;
                                else if (Rn[1] === '/')
                                    xlml_set_custprop(
                                        Custprops,
                                        raw_Rn3,
                                        cp,
                                        str.slice(pidx, Rn.index),
                                    );
                                else {
                                    cp = Rn;
                                    pidx = Rn.index + Rn[0].length;
                                }
                                break;
                            }
                            if (opts.WTF)
                                throw 'Unrecognized tag: ' + Rn[3] + '|' + state.join('|');
                    }
                var out = {};
                if (!opts.bookSheets && !opts.bookProps) out.Sheets = sheets;
                out.SheetNames = sheetnames;
                out.Workbook = Workbook;
                out.SSF = dup(table_fmt);
                out.Props = Props;
                out.Custprops = Custprops;
                return out;
            }
            function parse_xlml(data2, opts) {
                fix_read_opts((opts = opts || {}));
                switch (opts.type || 'base64') {
                    case 'base64':
                        return parse_xlml_xml(Base64_decode(data2), opts);
                    case 'binary':
                    case 'buffer':
                    case 'file':
                        return parse_xlml_xml(data2, opts);
                    case 'array':
                        return parse_xlml_xml(a2s(data2), opts);
                }
            }
            function write_props_xlml(wb, opts) {
                var o = [];
                if (wb.Props) o.push(xlml_write_docprops(wb.Props, opts));
                if (wb.Custprops) o.push(xlml_write_custprops(wb.Props, wb.Custprops, opts));
                return o.join('');
            }
            function write_wb_xlml() {
                return '';
            }
            function write_sty_xlml(wb, opts) {
                var styles = ['<Style ss:ID="Default" ss:Name="Normal"><NumberFormat/></Style>'];
                opts.cellXfs.forEach(function (xf, id) {
                    var payload = [];
                    payload.push(
                        writextag('NumberFormat', null, {
                            'ss:Format': escapexml(table_fmt[xf.numFmtId]),
                        }),
                    );
                    var o = { 'ss:ID': 's' + (21 + id) };
                    styles.push(writextag('Style', payload.join(''), o));
                });
                return writextag('Styles', styles.join(''));
            }
            function write_name_xlml(n) {
                return writextag('NamedRange', null, {
                    'ss:Name': n.Name,
                    'ss:RefersTo': '=' + a1_to_rc(n.Ref, { r: 0, c: 0 }),
                });
            }
            function write_names_xlml(wb) {
                if (!((wb || {}).Workbook || {}).Names) return '';
                var names = wb.Workbook.Names;
                var out = [];
                for (var i2 = 0; i2 < names.length; ++i2) {
                    var n = names[i2];
                    if (n.Sheet != null) continue;
                    if (n.Name.match(/^_xlfn\./)) continue;
                    out.push(write_name_xlml(n));
                }
                return writextag('Names', out.join(''));
            }
            function write_ws_xlml_names(ws, opts, idx, wb) {
                if (!ws) return '';
                if (!((wb || {}).Workbook || {}).Names) return '';
                var names = wb.Workbook.Names;
                var out = [];
                for (var i2 = 0; i2 < names.length; ++i2) {
                    var n = names[i2];
                    if (n.Sheet != idx) continue;
                    if (n.Name.match(/^_xlfn\./)) continue;
                    out.push(write_name_xlml(n));
                }
                return out.join('');
            }
            function write_ws_xlml_wsopts(ws, opts, idx, wb) {
                if (!ws) return '';
                var o = [];
                if (ws['!margins']) {
                    o.push('<PageSetup>');
                    if (ws['!margins'].header)
                        o.push(writextag('Header', null, { 'x:Margin': ws['!margins'].header }));
                    if (ws['!margins'].footer)
                        o.push(writextag('Footer', null, { 'x:Margin': ws['!margins'].footer }));
                    o.push(
                        writextag('PageMargins', null, {
                            'x:Bottom': ws['!margins'].bottom || '0.75',
                            'x:Left': ws['!margins'].left || '0.7',
                            'x:Right': ws['!margins'].right || '0.7',
                            'x:Top': ws['!margins'].top || '0.75',
                        }),
                    );
                    o.push('</PageSetup>');
                }
                if (wb && wb.Workbook && wb.Workbook.Sheets && wb.Workbook.Sheets[idx]) {
                    if (wb.Workbook.Sheets[idx].Hidden)
                        o.push(
                            writextag(
                                'Visible',
                                wb.Workbook.Sheets[idx].Hidden == 1
                                    ? 'SheetHidden'
                                    : 'SheetVeryHidden',
                                {},
                            ),
                        );
                    else {
                        for (var i2 = 0; i2 < idx; ++i2)
                            if (wb.Workbook.Sheets[i2] && !wb.Workbook.Sheets[i2].Hidden) break;
                        if (i2 == idx) o.push('<Selected/>');
                    }
                }
                if (((((wb || {}).Workbook || {}).Views || [])[0] || {}).RTL)
                    o.push('<DisplayRightToLeft/>');
                if (ws['!protect']) {
                    o.push(writetag('ProtectContents', 'True'));
                    if (ws['!protect'].objects) o.push(writetag('ProtectObjects', 'True'));
                    if (ws['!protect'].scenarios) o.push(writetag('ProtectScenarios', 'True'));
                    if (
                        ws['!protect'].selectLockedCells != null &&
                        !ws['!protect'].selectLockedCells
                    )
                        o.push(writetag('EnableSelection', 'NoSelection'));
                    else if (
                        ws['!protect'].selectUnlockedCells != null &&
                        !ws['!protect'].selectUnlockedCells
                    )
                        o.push(writetag('EnableSelection', 'UnlockedCells'));
                    [
                        ['formatCells', 'AllowFormatCells'],
                        ['formatColumns', 'AllowSizeCols'],
                        ['formatRows', 'AllowSizeRows'],
                        ['insertColumns', 'AllowInsertCols'],
                        ['insertRows', 'AllowInsertRows'],
                        ['insertHyperlinks', 'AllowInsertHyperlinks'],
                        ['deleteColumns', 'AllowDeleteCols'],
                        ['deleteRows', 'AllowDeleteRows'],
                        ['sort', 'AllowSort'],
                        ['autoFilter', 'AllowFilter'],
                        ['pivotTables', 'AllowUsePivotTables'],
                    ].forEach(function (x2) {
                        if (ws['!protect'][x2[0]]) o.push('<' + x2[1] + '/>');
                    });
                }
                if (o.length == 0) return '';
                return writextag('WorksheetOptions', o.join(''), { xmlns: XLMLNS.x });
            }
            function write_ws_xlml_comment(comments) {
                return comments
                    .map(function (c) {
                        var t2 = xlml_unfixstr(c.t || '');
                        var d = writextag('ss:Data', t2, {
                            xmlns: 'http://www.w3.org/TR/REC-html40',
                        });
                        return writextag('Comment', d, { 'ss:Author': c.a });
                    })
                    .join('');
            }
            function write_ws_xlml_cell(cell, ref, ws, opts, idx, wb, addr) {
                if (!cell || (cell.v == void 0 && cell.f == void 0)) return '';
                var attr2 = {};
                if (cell.f) attr2['ss:Formula'] = '=' + escapexml(a1_to_rc(cell.f, addr));
                if (cell.F && cell.F.slice(0, ref.length) == ref) {
                    var end2 = decode_cell(cell.F.slice(ref.length + 1));
                    attr2['ss:ArrayRange'] =
                        'RC:R' +
                        (end2.r == addr.r ? '' : '[' + (end2.r - addr.r) + ']') +
                        'C' +
                        (end2.c == addr.c ? '' : '[' + (end2.c - addr.c) + ']');
                }
                if (cell.l && cell.l.Target) {
                    attr2['ss:HRef'] = escapexml(cell.l.Target);
                    if (cell.l.Tooltip) attr2['x:HRefScreenTip'] = escapexml(cell.l.Tooltip);
                }
                if (ws['!merges']) {
                    var marr = ws['!merges'];
                    for (var mi = 0; mi != marr.length; ++mi) {
                        if (marr[mi].s.c != addr.c || marr[mi].s.r != addr.r) continue;
                        if (marr[mi].e.c > marr[mi].s.c)
                            attr2['ss:MergeAcross'] = marr[mi].e.c - marr[mi].s.c;
                        if (marr[mi].e.r > marr[mi].s.r)
                            attr2['ss:MergeDown'] = marr[mi].e.r - marr[mi].s.r;
                    }
                }
                var t2 = '',
                    p = '';
                switch (cell.t) {
                    case 'z':
                        if (!opts.sheetStubs) return '';
                        break;
                    case 'n':
                        t2 = 'Number';
                        p = String(cell.v);
                        break;
                    case 'b':
                        t2 = 'Boolean';
                        p = cell.v ? '1' : '0';
                        break;
                    case 'e':
                        t2 = 'Error';
                        p = BErr[cell.v];
                        break;
                    case 'd':
                        t2 = 'DateTime';
                        p = new Date(cell.v).toISOString();
                        if (cell.z == null) cell.z = cell.z || table_fmt[14];
                        break;
                    case 's':
                        t2 = 'String';
                        p = escapexlml(cell.v || '');
                        break;
                }
                var os2 = get_cell_style(opts.cellXfs, cell, opts);
                attr2['ss:StyleID'] = 's' + (21 + os2);
                attr2['ss:Index'] = addr.c + 1;
                var _v = cell.v != null ? p : '';
                var m2 = cell.t == 'z' ? '' : '<Data ss:Type="' + t2 + '">' + _v + '</Data>';
                if ((cell.c || []).length > 0) m2 += write_ws_xlml_comment(cell.c);
                return writextag('Cell', m2, attr2);
            }
            function write_ws_xlml_row(R, row) {
                var o = '<Row ss:Index="' + (R + 1) + '"';
                if (row) {
                    if (row.hpt && !row.hpx) row.hpx = pt2px(row.hpt);
                    if (row.hpx) o += ' ss:AutoFitHeight="0" ss:Height="' + row.hpx + '"';
                    if (row.hidden) o += ' ss:Hidden="1"';
                }
                return o + '>';
            }
            function write_ws_xlml_table(ws, opts, idx, wb) {
                if (!ws['!ref']) return '';
                var range = safe_decode_range(ws['!ref']);
                var marr = ws['!merges'] || [],
                    mi = 0;
                var o = [];
                if (ws['!cols'])
                    ws['!cols'].forEach(function (n, i2) {
                        process_col(n);
                        var w = !!n.width;
                        var p = col_obj_w(i2, n);
                        var k = { 'ss:Index': i2 + 1 };
                        if (w) k['ss:Width'] = width2px(p.width);
                        if (n.hidden) k['ss:Hidden'] = '1';
                        o.push(writextag('Column', null, k));
                    });
                var dense = Array.isArray(ws);
                for (var R = range.s.r; R <= range.e.r; ++R) {
                    var row = [write_ws_xlml_row(R, (ws['!rows'] || [])[R])];
                    for (var C = range.s.c; C <= range.e.c; ++C) {
                        var skip = false;
                        for (mi = 0; mi != marr.length; ++mi) {
                            if (marr[mi].s.c > C) continue;
                            if (marr[mi].s.r > R) continue;
                            if (marr[mi].e.c < C) continue;
                            if (marr[mi].e.r < R) continue;
                            if (marr[mi].s.c != C || marr[mi].s.r != R) skip = true;
                            break;
                        }
                        if (skip) continue;
                        var addr = { r: R, c: C };
                        var ref = encode_cell(addr),
                            cell = dense ? (ws[R] || [])[C] : ws[ref];
                        row.push(write_ws_xlml_cell(cell, ref, ws, opts, idx, wb, addr));
                    }
                    row.push('</Row>');
                    if (row.length > 2) o.push(row.join(''));
                }
                return o.join('');
            }
            function write_ws_xlml(idx, opts, wb) {
                var o = [];
                var s2 = wb.SheetNames[idx];
                var ws = wb.Sheets[s2];
                var t2 = ws ? write_ws_xlml_names(ws, opts, idx, wb) : '';
                if (t2.length > 0) o.push('<Names>' + t2 + '</Names>');
                t2 = ws ? write_ws_xlml_table(ws, opts, idx, wb) : '';
                if (t2.length > 0) o.push('<Table>' + t2 + '</Table>');
                o.push(write_ws_xlml_wsopts(ws, opts, idx, wb));
                return o.join('');
            }
            function write_xlml(wb, opts) {
                if (!opts) opts = {};
                if (!wb.SSF) wb.SSF = dup(table_fmt);
                if (wb.SSF) {
                    make_ssf();
                    SSF_load_table(wb.SSF);
                    opts.revssf = evert_num(wb.SSF);
                    opts.revssf[wb.SSF[65535]] = 0;
                    opts.ssf = wb.SSF;
                    opts.cellXfs = [];
                    get_cell_style(opts.cellXfs, {}, { revssf: { General: 0 } });
                }
                var d = [];
                d.push(write_props_xlml(wb, opts));
                d.push(write_wb_xlml(wb, opts));
                d.push('');
                d.push('');
                for (var i2 = 0; i2 < wb.SheetNames.length; ++i2)
                    d.push(
                        writextag('Worksheet', write_ws_xlml(i2, opts, wb), {
                            'ss:Name': escapexml(wb.SheetNames[i2]),
                        }),
                    );
                d[2] = write_sty_xlml(wb, opts);
                d[3] = write_names_xlml(wb, opts);
                return (
                    XML_HEADER +
                    writextag('Workbook', d.join(''), {
                        xmlns: XLMLNS.ss,
                        'xmlns:o': XLMLNS.o,
                        'xmlns:x': XLMLNS.x,
                        'xmlns:ss': XLMLNS.ss,
                        'xmlns:dt': XLMLNS.dt,
                        'xmlns:html': XLMLNS.html,
                    })
                );
            }
            function parse_compobj(obj) {
                var v = {};
                var o = obj.content;
                o.l = 28;
                v.AnsiUserType = o.read_shift(0, 'lpstr-ansi');
                v.AnsiClipboardFormat = parse_ClipboardFormatOrAnsiString(o);
                if (o.length - o.l <= 4) return v;
                var m2 = o.read_shift(4);
                if (m2 == 0 || m2 > 40) return v;
                o.l -= 4;
                v.Reserved1 = o.read_shift(0, 'lpstr-ansi');
                if (o.length - o.l <= 4) return v;
                m2 = o.read_shift(4);
                if (m2 !== 1907505652) return v;
                v.UnicodeClipboardFormat = parse_ClipboardFormatOrUnicodeString(o);
                m2 = o.read_shift(4);
                if (m2 == 0 || m2 > 40) return v;
                o.l -= 4;
                v.Reserved2 = o.read_shift(0, 'lpwstr');
            }
            var CONTINUE_RT = [60, 1084, 2066, 2165, 2175];
            function slurp(RecordType, R, blob, length, opts) {
                var l = length;
                var bufs = [];
                var d = blob.slice(blob.l, blob.l + l);
                if (opts && opts.enc && opts.enc.insitu && d.length > 0)
                    switch (RecordType) {
                        case 9:
                        case 521:
                        case 1033:
                        case 2057:
                        case 47:
                        case 405:
                        case 225:
                        case 406:
                        case 312:
                        case 404:
                        case 10:
                            break;
                        case 133:
                            break;
                        default:
                            opts.enc.insitu(d);
                    }
                bufs.push(d);
                blob.l += l;
                var nextrt = __readUInt16LE(blob, blob.l),
                    next2 = XLSRecordEnum[nextrt];
                var start = 0;
                while (next2 != null && CONTINUE_RT.indexOf(nextrt) > -1) {
                    l = __readUInt16LE(blob, blob.l + 2);
                    start = blob.l + 4;
                    if (nextrt == 2066) start += 4;
                    else if (nextrt == 2165 || nextrt == 2175) {
                        start += 12;
                    }
                    d = blob.slice(start, blob.l + 4 + l);
                    bufs.push(d);
                    blob.l += 4 + l;
                    next2 = XLSRecordEnum[(nextrt = __readUInt16LE(blob, blob.l))];
                }
                var b = bconcat(bufs);
                prep_blob(b, 0);
                var ll = 0;
                b.lens = [];
                for (var j = 0; j < bufs.length; ++j) {
                    b.lens.push(ll);
                    ll += bufs[j].length;
                }
                if (b.length < length)
                    throw (
                        'XLS Record 0x' +
                        RecordType.toString(16) +
                        ' Truncated: ' +
                        b.length +
                        ' < ' +
                        length
                    );
                return R.f(b, b.length, opts);
            }
            function safe_format_xf(p, opts, date1904) {
                if (p.t === 'z') return;
                if (!p.XF) return;
                var fmtid = 0;
                try {
                    fmtid = p.z || p.XF.numFmtId || 0;
                    if (opts.cellNF) p.z = table_fmt[fmtid];
                } catch (e2) {
                    if (opts.WTF) throw e2;
                }
                if (!opts || opts.cellText !== false)
                    try {
                        if (p.t === 'e') {
                            p.w = p.w || BErr[p.v];
                        } else if (fmtid === 0 || fmtid == 'General') {
                            if (p.t === 'n') {
                                if ((p.v | 0) === p.v) p.w = p.v.toString(10);
                                else p.w = SSF_general_num(p.v);
                            } else p.w = SSF_general(p.v);
                        } else
                            p.w = SSF_format(fmtid, p.v, {
                                date1904: !!date1904,
                                dateNF: opts && opts.dateNF,
                            });
                    } catch (e2) {
                        if (opts.WTF) throw e2;
                    }
                if (
                    opts.cellDates &&
                    fmtid &&
                    p.t == 'n' &&
                    fmt_is_date(table_fmt[fmtid] || String(fmtid))
                ) {
                    var _d2 = SSF_parse_date_code(p.v);
                    if (_d2) {
                        p.t = 'd';
                        p.v = new Date(_d2.y, _d2.m - 1, _d2.d, _d2.H, _d2.M, _d2.S, _d2.u);
                    }
                }
            }
            function make_cell(val2, ixfe, t2) {
                return { v: val2, ixfe, t: t2 };
            }
            function parse_workbook(blob, options2) {
                var wb = { opts: {} };
                var Sheets = {};
                if (DENSE != null && options2.dense == null) options2.dense = DENSE;
                var out = options2.dense ? [] : {};
                var Directory = {};
                var range = {};
                var last_formula = null;
                var sst = [];
                var cur_sheet = '';
                var Preamble = {};
                var lastcell,
                    last_cell = '',
                    cc,
                    cmnt,
                    rngC,
                    rngR;
                var sharedf = {};
                var arrayf = [];
                var temp_val;
                var country;
                var XFs = [];
                var palette = [];
                var Workbook = { Sheets: [], WBProps: { date1904: false }, Views: [{}] },
                    wsprops = {};
                var get_rgb = function getrgb(icv) {
                    if (icv < 8) return XLSIcv[icv];
                    if (icv < 64) return palette[icv - 8] || XLSIcv[icv];
                    return XLSIcv[icv];
                };
                var process_cell_style = function pcs(cell, line, options3) {
                    var xfd = line.XF.data;
                    if (!xfd || !xfd.patternType || !options3 || !options3.cellStyles) return;
                    line.s = {};
                    line.s.patternType = xfd.patternType;
                    var t2;
                    if ((t2 = rgb2Hex(get_rgb(xfd.icvFore)))) {
                        line.s.fgColor = { rgb: t2 };
                    }
                    if ((t2 = rgb2Hex(get_rgb(xfd.icvBack)))) {
                        line.s.bgColor = { rgb: t2 };
                    }
                };
                var addcell = function addcell2(cell, line, options3) {
                    if (file_depth > 1) return;
                    if (options3.sheetRows && cell.r >= options3.sheetRows) return;
                    if (options3.cellStyles && line.XF && line.XF.data)
                        process_cell_style(cell, line, options3);
                    delete line.ixfe;
                    delete line.XF;
                    lastcell = cell;
                    last_cell = encode_cell(cell);
                    if (!range || !range.s || !range.e)
                        range = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
                    if (cell.r < range.s.r) range.s.r = cell.r;
                    if (cell.c < range.s.c) range.s.c = cell.c;
                    if (cell.r + 1 > range.e.r) range.e.r = cell.r + 1;
                    if (cell.c + 1 > range.e.c) range.e.c = cell.c + 1;
                    if (options3.cellFormula && line.f) {
                        for (var afi = 0; afi < arrayf.length; ++afi) {
                            if (arrayf[afi][0].s.c > cell.c || arrayf[afi][0].s.r > cell.r)
                                continue;
                            if (arrayf[afi][0].e.c < cell.c || arrayf[afi][0].e.r < cell.r)
                                continue;
                            line.F = encode_range(arrayf[afi][0]);
                            if (arrayf[afi][0].s.c != cell.c || arrayf[afi][0].s.r != cell.r)
                                delete line.f;
                            if (line.f)
                                line.f =
                                    '' +
                                    stringify_formula(arrayf[afi][1], range, cell, supbooks, opts);
                            break;
                        }
                    }
                    {
                        if (options3.dense) {
                            if (!out[cell.r]) out[cell.r] = [];
                            out[cell.r][cell.c] = line;
                        } else out[last_cell] = line;
                    }
                };
                var opts = {
                    enc: false,
                    // encrypted
                    sbcch: 0,
                    // cch in the preceding SupBook
                    snames: [],
                    // sheetnames
                    sharedf,
                    // shared formulae by address
                    arrayf,
                    // array formulae array
                    rrtabid: [],
                    // RRTabId
                    lastuser: '',
                    // Last User from WriteAccess
                    biff: 8,
                    // BIFF version
                    codepage: 0,
                    // CP from CodePage record
                    winlocked: 0,
                    // fLockWn from WinProtect
                    cellStyles: !!options2 && !!options2.cellStyles,
                    WTF: !!options2 && !!options2.wtf,
                };
                if (options2.password) opts.password = options2.password;
                var themes;
                var merges = [];
                var objects = [];
                var colinfo = [],
                    rowinfo = [];
                var seencol = false;
                var supbooks = [];
                supbooks.SheetNames = opts.snames;
                supbooks.sharedf = opts.sharedf;
                supbooks.arrayf = opts.arrayf;
                supbooks.names = [];
                supbooks.XTI = [];
                var last_RT = 0;
                var file_depth = 0;
                var BIFF2Fmt = 0,
                    BIFF2FmtTable = [];
                var FilterDatabases = [];
                var last_lbl;
                opts.codepage = 1200;
                set_cp(1200);
                var seen_codepage = false;
                while (blob.l < blob.length - 1) {
                    var s2 = blob.l;
                    var RecordType = blob.read_shift(2);
                    if (RecordType === 0 && last_RT === 10) break;
                    var length = blob.l === blob.length ? 0 : blob.read_shift(2);
                    var R = XLSRecordEnum[RecordType];
                    if (R && R.f) {
                        if (options2.bookSheets) {
                            if (last_RT === 133 && RecordType !== 133) break;
                        }
                        last_RT = RecordType;
                        if (R.r === 2 || R.r == 12) {
                            var rt = blob.read_shift(2);
                            length -= 2;
                            if (
                                !opts.enc &&
                                rt !== RecordType &&
                                (((rt & 255) << 8) | (rt >> 8)) !== RecordType
                            )
                                throw new Error('rt mismatch: ' + rt + '!=' + RecordType);
                            if (R.r == 12) {
                                blob.l += 10;
                                length -= 10;
                            }
                        }
                        var val2 = {};
                        if (RecordType === 10) val2 = R.f(blob, length, opts);
                        else val2 = slurp(RecordType, R, blob, length, opts);
                        if (file_depth == 0 && [9, 521, 1033, 2057].indexOf(last_RT) === -1)
                            continue;
                        switch (RecordType) {
                            case 34:
                                wb.opts.Date1904 = Workbook.WBProps.date1904 = val2;
                                break;
                            case 134:
                                wb.opts.WriteProtect = true;
                                break;
                            case 47:
                                if (!opts.enc) blob.l = 0;
                                opts.enc = val2;
                                if (!options2.password)
                                    throw new Error('File is password-protected');
                                if (val2.valid == null)
                                    throw new Error('Encryption scheme unsupported');
                                if (!val2.valid) throw new Error('Password is incorrect');
                                break;
                            case 92:
                                opts.lastuser = val2;
                                break;
                            case 66:
                                var cpval = Number(val2);
                                switch (cpval) {
                                    case 21010:
                                        cpval = 1200;
                                        break;
                                    case 32768:
                                        cpval = 1e4;
                                        break;
                                    case 32769:
                                        cpval = 1252;
                                        break;
                                }
                                set_cp((opts.codepage = cpval));
                                seen_codepage = true;
                                break;
                            case 317:
                                opts.rrtabid = val2;
                                break;
                            case 25:
                                opts.winlocked = val2;
                                break;
                            case 439:
                                wb.opts['RefreshAll'] = val2;
                                break;
                            case 12:
                                wb.opts['CalcCount'] = val2;
                                break;
                            case 16:
                                wb.opts['CalcDelta'] = val2;
                                break;
                            case 17:
                                wb.opts['CalcIter'] = val2;
                                break;
                            case 13:
                                wb.opts['CalcMode'] = val2;
                                break;
                            case 14:
                                wb.opts['CalcPrecision'] = val2;
                                break;
                            case 95:
                                wb.opts['CalcSaveRecalc'] = val2;
                                break;
                            case 15:
                                opts.CalcRefMode = val2;
                                break;
                            case 2211:
                                wb.opts.FullCalc = val2;
                                break;
                            case 129:
                                if (val2.fDialog) out['!type'] = 'dialog';
                                if (!val2.fBelow)
                                    (out['!outline'] || (out['!outline'] = {})).above = true;
                                if (!val2.fRight)
                                    (out['!outline'] || (out['!outline'] = {})).left = true;
                                break;
                            case 224:
                                XFs.push(val2);
                                break;
                            case 430:
                                supbooks.push([val2]);
                                supbooks[supbooks.length - 1].XTI = [];
                                break;
                            case 35:
                            case 547:
                                supbooks[supbooks.length - 1].push(val2);
                                break;
                            case 24:
                            case 536:
                                last_lbl = {
                                    Name: val2.Name,
                                    Ref: stringify_formula(val2.rgce, range, null, supbooks, opts),
                                };
                                if (val2.itab > 0) last_lbl.Sheet = val2.itab - 1;
                                supbooks.names.push(last_lbl);
                                if (!supbooks[0]) {
                                    supbooks[0] = [];
                                    supbooks[0].XTI = [];
                                }
                                supbooks[supbooks.length - 1].push(val2);
                                if (val2.Name == '_xlnm._FilterDatabase' && val2.itab > 0) {
                                    if (
                                        val2.rgce &&
                                        val2.rgce[0] &&
                                        val2.rgce[0][0] &&
                                        val2.rgce[0][0][0] == 'PtgArea3d'
                                    )
                                        FilterDatabases[val2.itab - 1] = {
                                            ref: encode_range(val2.rgce[0][0][1][2]),
                                        };
                                }
                                break;
                            case 22:
                                opts.ExternCount = val2;
                                break;
                            case 23:
                                if (supbooks.length == 0) {
                                    supbooks[0] = [];
                                    supbooks[0].XTI = [];
                                }
                                supbooks[supbooks.length - 1].XTI =
                                    supbooks[supbooks.length - 1].XTI.concat(val2);
                                supbooks.XTI = supbooks.XTI.concat(val2);
                                break;
                            case 2196:
                                if (opts.biff < 8) break;
                                if (last_lbl != null) last_lbl.Comment = val2[1];
                                break;
                            case 18:
                                out['!protect'] = val2;
                                break;
                            case 19:
                                if (val2 !== 0 && opts.WTF)
                                    console.error('Password verifier: ' + val2);
                                break;
                            case 133:
                                {
                                    Directory[val2.pos] = val2;
                                    opts.snames.push(val2.name);
                                }
                                break;
                            case 10:
                                {
                                    if (--file_depth) break;
                                    if (range.e) {
                                        if (range.e.r > 0 && range.e.c > 0) {
                                            range.e.r--;
                                            range.e.c--;
                                            out['!ref'] = encode_range(range);
                                            if (
                                                options2.sheetRows &&
                                                options2.sheetRows <= range.e.r
                                            ) {
                                                var tmpri = range.e.r;
                                                range.e.r = options2.sheetRows - 1;
                                                out['!fullref'] = out['!ref'];
                                                out['!ref'] = encode_range(range);
                                                range.e.r = tmpri;
                                            }
                                            range.e.r++;
                                            range.e.c++;
                                        }
                                        if (merges.length > 0) out['!merges'] = merges;
                                        if (objects.length > 0) out['!objects'] = objects;
                                        if (colinfo.length > 0) out['!cols'] = colinfo;
                                        if (rowinfo.length > 0) out['!rows'] = rowinfo;
                                        Workbook.Sheets.push(wsprops);
                                    }
                                    if (cur_sheet === '') Preamble = out;
                                    else Sheets[cur_sheet] = out;
                                    out = options2.dense ? [] : {};
                                }
                                break;
                            case 9:
                            case 521:
                            case 1033:
                            case 2057:
                                {
                                    if (opts.biff === 8)
                                        opts.biff =
                                            {
                                                9: 2,
                                                521: 3,
                                                1033: 4,
                                            }[RecordType] ||
                                            {
                                                512: 2,
                                                768: 3,
                                                1024: 4,
                                                1280: 5,
                                                1536: 8,
                                                2: 2,
                                                7: 2,
                                            }[val2.BIFFVer] ||
                                            8;
                                    opts.biffguess = val2.BIFFVer == 0;
                                    if (val2.BIFFVer == 0 && val2.dt == 4096) {
                                        opts.biff = 5;
                                        seen_codepage = true;
                                        set_cp((opts.codepage = 28591));
                                    }
                                    if (opts.biff == 8 && val2.BIFFVer == 0 && val2.dt == 16)
                                        opts.biff = 2;
                                    if (file_depth++) break;
                                    out = options2.dense ? [] : {};
                                    if (opts.biff < 8 && !seen_codepage) {
                                        seen_codepage = true;
                                        set_cp((opts.codepage = options2.codepage || 1252));
                                    }
                                    if (opts.biff < 5 || (val2.BIFFVer == 0 && val2.dt == 4096)) {
                                        if (cur_sheet === '') cur_sheet = 'Sheet1';
                                        range = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
                                        var fakebs8 = { pos: blob.l - length, name: cur_sheet };
                                        Directory[fakebs8.pos] = fakebs8;
                                        opts.snames.push(cur_sheet);
                                    } else cur_sheet = (Directory[s2] || { name: '' }).name;
                                    if (val2.dt == 32) out['!type'] = 'chart';
                                    if (val2.dt == 64) out['!type'] = 'macro';
                                    merges = [];
                                    objects = [];
                                    opts.arrayf = arrayf = [];
                                    colinfo = [];
                                    rowinfo = [];
                                    seencol = false;
                                    wsprops = {
                                        Hidden: (Directory[s2] || { hs: 0 }).hs,
                                        name: cur_sheet,
                                    };
                                }
                                break;
                            case 515:
                            case 3:
                            case 2:
                                {
                                    if (out['!type'] == 'chart') {
                                        if (
                                            options2.dense
                                                ? (out[val2.r] || [])[val2.c]
                                                : out[encode_cell({ c: val2.c, r: val2.r })]
                                        )
                                            ++val2.c;
                                    }
                                    temp_val = {
                                        ixfe: val2.ixfe,
                                        XF: XFs[val2.ixfe] || {},
                                        v: val2.val,
                                        t: 'n',
                                    };
                                    if (BIFF2Fmt > 0)
                                        temp_val.z = BIFF2FmtTable[(temp_val.ixfe >> 8) & 63];
                                    safe_format_xf(temp_val, options2, wb.opts.Date1904);
                                    addcell({ c: val2.c, r: val2.r }, temp_val, options2);
                                }
                                break;
                            case 5:
                            case 517:
                                {
                                    temp_val = {
                                        ixfe: val2.ixfe,
                                        XF: XFs[val2.ixfe],
                                        v: val2.val,
                                        t: val2.t,
                                    };
                                    if (BIFF2Fmt > 0)
                                        temp_val.z = BIFF2FmtTable[(temp_val.ixfe >> 8) & 63];
                                    safe_format_xf(temp_val, options2, wb.opts.Date1904);
                                    addcell({ c: val2.c, r: val2.r }, temp_val, options2);
                                }
                                break;
                            case 638:
                                {
                                    temp_val = {
                                        ixfe: val2.ixfe,
                                        XF: XFs[val2.ixfe],
                                        v: val2.rknum,
                                        t: 'n',
                                    };
                                    if (BIFF2Fmt > 0)
                                        temp_val.z = BIFF2FmtTable[(temp_val.ixfe >> 8) & 63];
                                    safe_format_xf(temp_val, options2, wb.opts.Date1904);
                                    addcell({ c: val2.c, r: val2.r }, temp_val, options2);
                                }
                                break;
                            case 189:
                                {
                                    for (var j = val2.c; j <= val2.C; ++j) {
                                        var ixfe = val2.rkrec[j - val2.c][0];
                                        temp_val = {
                                            ixfe,
                                            XF: XFs[ixfe],
                                            v: val2.rkrec[j - val2.c][1],
                                            t: 'n',
                                        };
                                        if (BIFF2Fmt > 0)
                                            temp_val.z = BIFF2FmtTable[(temp_val.ixfe >> 8) & 63];
                                        safe_format_xf(temp_val, options2, wb.opts.Date1904);
                                        addcell({ c: j, r: val2.r }, temp_val, options2);
                                    }
                                }
                                break;
                            case 6:
                            case 518:
                            case 1030:
                                {
                                    if (val2.val == 'String') {
                                        last_formula = val2;
                                        break;
                                    }
                                    temp_val = make_cell(val2.val, val2.cell.ixfe, val2.tt);
                                    temp_val.XF = XFs[temp_val.ixfe];
                                    if (options2.cellFormula) {
                                        var _f = val2.formula;
                                        if (_f && _f[0] && _f[0][0] && _f[0][0][0] == 'PtgExp') {
                                            var _fr = _f[0][0][1][0],
                                                _fc = _f[0][0][1][1];
                                            var _fe = encode_cell({ r: _fr, c: _fc });
                                            if (sharedf[_fe])
                                                temp_val.f =
                                                    '' +
                                                    stringify_formula(
                                                        val2.formula,
                                                        range,
                                                        val2.cell,
                                                        supbooks,
                                                        opts,
                                                    );
                                            else
                                                temp_val.F = (
                                                    (options2.dense
                                                        ? (out[_fr] || [])[_fc]
                                                        : out[_fe]) || {}
                                                ).F;
                                        } else
                                            temp_val.f =
                                                '' +
                                                stringify_formula(
                                                    val2.formula,
                                                    range,
                                                    val2.cell,
                                                    supbooks,
                                                    opts,
                                                );
                                    }
                                    if (BIFF2Fmt > 0)
                                        temp_val.z = BIFF2FmtTable[(temp_val.ixfe >> 8) & 63];
                                    safe_format_xf(temp_val, options2, wb.opts.Date1904);
                                    addcell(val2.cell, temp_val, options2);
                                    last_formula = val2;
                                }
                                break;
                            case 7:
                            case 519:
                                {
                                    if (last_formula) {
                                        last_formula.val = val2;
                                        temp_val = make_cell(val2, last_formula.cell.ixfe, 's');
                                        temp_val.XF = XFs[temp_val.ixfe];
                                        if (options2.cellFormula) {
                                            temp_val.f =
                                                '' +
                                                stringify_formula(
                                                    last_formula.formula,
                                                    range,
                                                    last_formula.cell,
                                                    supbooks,
                                                    opts,
                                                );
                                        }
                                        if (BIFF2Fmt > 0)
                                            temp_val.z = BIFF2FmtTable[(temp_val.ixfe >> 8) & 63];
                                        safe_format_xf(temp_val, options2, wb.opts.Date1904);
                                        addcell(last_formula.cell, temp_val, options2);
                                        last_formula = null;
                                    } else throw new Error('String record expects Formula');
                                }
                                break;
                            case 33:
                            case 545:
                                {
                                    arrayf.push(val2);
                                    var _arraystart = encode_cell(val2[0].s);
                                    cc = options2.dense
                                        ? (out[val2[0].s.r] || [])[val2[0].s.c]
                                        : out[_arraystart];
                                    if (options2.cellFormula && cc) {
                                        if (!last_formula) break;
                                        if (!_arraystart || !cc) break;
                                        cc.f =
                                            '' +
                                            stringify_formula(
                                                val2[1],
                                                range,
                                                val2[0],
                                                supbooks,
                                                opts,
                                            );
                                        cc.F = encode_range(val2[0]);
                                    }
                                }
                                break;
                            case 1212:
                                {
                                    if (!options2.cellFormula) break;
                                    if (last_cell) {
                                        if (!last_formula) break;
                                        sharedf[encode_cell(last_formula.cell)] = val2[0];
                                        cc = options2.dense
                                            ? (out[last_formula.cell.r] || [])[last_formula.cell.c]
                                            : out[encode_cell(last_formula.cell)];
                                        (cc || {}).f =
                                            '' +
                                            stringify_formula(
                                                val2[0],
                                                range,
                                                lastcell,
                                                supbooks,
                                                opts,
                                            );
                                    }
                                }
                                break;
                            case 253:
                                temp_val = make_cell(sst[val2.isst].t, val2.ixfe, 's');
                                if (sst[val2.isst].h) temp_val.h = sst[val2.isst].h;
                                temp_val.XF = XFs[temp_val.ixfe];
                                if (BIFF2Fmt > 0)
                                    temp_val.z = BIFF2FmtTable[(temp_val.ixfe >> 8) & 63];
                                safe_format_xf(temp_val, options2, wb.opts.Date1904);
                                addcell({ c: val2.c, r: val2.r }, temp_val, options2);
                                break;
                            case 513:
                                if (options2.sheetStubs) {
                                    temp_val = { ixfe: val2.ixfe, XF: XFs[val2.ixfe], t: 'z' };
                                    if (BIFF2Fmt > 0)
                                        temp_val.z = BIFF2FmtTable[(temp_val.ixfe >> 8) & 63];
                                    safe_format_xf(temp_val, options2, wb.opts.Date1904);
                                    addcell({ c: val2.c, r: val2.r }, temp_val, options2);
                                }
                                break;
                            case 190:
                                if (options2.sheetStubs) {
                                    for (var _j = val2.c; _j <= val2.C; ++_j) {
                                        var _ixfe = val2.ixfe[_j - val2.c];
                                        temp_val = { ixfe: _ixfe, XF: XFs[_ixfe], t: 'z' };
                                        if (BIFF2Fmt > 0)
                                            temp_val.z = BIFF2FmtTable[(temp_val.ixfe >> 8) & 63];
                                        safe_format_xf(temp_val, options2, wb.opts.Date1904);
                                        addcell({ c: _j, r: val2.r }, temp_val, options2);
                                    }
                                }
                                break;
                            case 214:
                            case 516:
                            case 4:
                                temp_val = make_cell(val2.val, val2.ixfe, 's');
                                temp_val.XF = XFs[temp_val.ixfe];
                                if (BIFF2Fmt > 0)
                                    temp_val.z = BIFF2FmtTable[(temp_val.ixfe >> 8) & 63];
                                safe_format_xf(temp_val, options2, wb.opts.Date1904);
                                addcell({ c: val2.c, r: val2.r }, temp_val, options2);
                                break;
                            case 0:
                            case 512:
                                {
                                    if (file_depth === 1) range = val2;
                                }
                                break;
                            case 252:
                                {
                                    sst = val2;
                                }
                                break;
                            case 1054:
                                {
                                    if (opts.biff == 4) {
                                        BIFF2FmtTable[BIFF2Fmt++] = val2[1];
                                        for (var b4idx = 0; b4idx < BIFF2Fmt + 163; ++b4idx)
                                            if (table_fmt[b4idx] == val2[1]) break;
                                        if (b4idx >= 163) SSF_load(val2[1], BIFF2Fmt + 163);
                                    } else SSF_load(val2[1], val2[0]);
                                }
                                break;
                            case 30:
                                {
                                    BIFF2FmtTable[BIFF2Fmt++] = val2;
                                    for (var b2idx = 0; b2idx < BIFF2Fmt + 163; ++b2idx)
                                        if (table_fmt[b2idx] == val2) break;
                                    if (b2idx >= 163) SSF_load(val2, BIFF2Fmt + 163);
                                }
                                break;
                            case 229:
                                merges = merges.concat(val2);
                                break;
                            case 93:
                                objects[val2.cmo[0]] = opts.lastobj = val2;
                                break;
                            case 438:
                                opts.lastobj.TxO = val2;
                                break;
                            case 127:
                                opts.lastobj.ImData = val2;
                                break;
                            case 440:
                                {
                                    for (rngR = val2[0].s.r; rngR <= val2[0].e.r; ++rngR)
                                        for (rngC = val2[0].s.c; rngC <= val2[0].e.c; ++rngC) {
                                            cc = options2.dense
                                                ? (out[rngR] || [])[rngC]
                                                : out[encode_cell({ c: rngC, r: rngR })];
                                            if (cc) cc.l = val2[1];
                                        }
                                }
                                break;
                            case 2048:
                                {
                                    for (rngR = val2[0].s.r; rngR <= val2[0].e.r; ++rngR)
                                        for (rngC = val2[0].s.c; rngC <= val2[0].e.c; ++rngC) {
                                            cc = options2.dense
                                                ? (out[rngR] || [])[rngC]
                                                : out[encode_cell({ c: rngC, r: rngR })];
                                            if (cc && cc.l) cc.l.Tooltip = val2[1];
                                        }
                                }
                                break;
                            case 28:
                                {
                                    if (opts.biff <= 5 && opts.biff >= 2) break;
                                    cc = options2.dense
                                        ? (out[val2[0].r] || [])[val2[0].c]
                                        : out[encode_cell(val2[0])];
                                    var noteobj = objects[val2[2]];
                                    if (!cc) {
                                        if (options2.dense) {
                                            if (!out[val2[0].r]) out[val2[0].r] = [];
                                            cc = out[val2[0].r][val2[0].c] = { t: 'z' };
                                        } else {
                                            cc = out[encode_cell(val2[0])] = { t: 'z' };
                                        }
                                        range.e.r = Math.max(range.e.r, val2[0].r);
                                        range.s.r = Math.min(range.s.r, val2[0].r);
                                        range.e.c = Math.max(range.e.c, val2[0].c);
                                        range.s.c = Math.min(range.s.c, val2[0].c);
                                    }
                                    if (!cc.c) cc.c = [];
                                    cmnt = { a: val2[1], t: noteobj.TxO.t };
                                    cc.c.push(cmnt);
                                }
                                break;
                            case 2173:
                                update_xfext(XFs[val2.ixfe], val2.ext);
                                break;
                            case 125:
                                {
                                    if (!opts.cellStyles) break;
                                    while (val2.e >= val2.s) {
                                        colinfo[val2.e--] = {
                                            width: val2.w / 256,
                                            level: val2.level || 0,
                                            hidden: !!(val2.flags & 1),
                                        };
                                        if (!seencol) {
                                            seencol = true;
                                            find_mdw_colw(val2.w / 256);
                                        }
                                        process_col(colinfo[val2.e + 1]);
                                    }
                                }
                                break;
                            case 520:
                                {
                                    var rowobj = {};
                                    if (val2.level != null) {
                                        rowinfo[val2.r] = rowobj;
                                        rowobj.level = val2.level;
                                    }
                                    if (val2.hidden) {
                                        rowinfo[val2.r] = rowobj;
                                        rowobj.hidden = true;
                                    }
                                    if (val2.hpt) {
                                        rowinfo[val2.r] = rowobj;
                                        rowobj.hpt = val2.hpt;
                                        rowobj.hpx = pt2px(val2.hpt);
                                    }
                                }
                                break;
                            case 38:
                            case 39:
                            case 40:
                            case 41:
                                if (!out['!margins']) default_margins((out['!margins'] = {}));
                                out['!margins'][
                                    { 38: 'left', 39: 'right', 40: 'top', 41: 'bottom' }[RecordType]
                                ] = val2;
                                break;
                            case 161:
                                if (!out['!margins']) default_margins((out['!margins'] = {}));
                                out['!margins'].header = val2.header;
                                out['!margins'].footer = val2.footer;
                                break;
                            case 574:
                                if (val2.RTL) Workbook.Views[0].RTL = true;
                                break;
                            case 146:
                                palette = val2;
                                break;
                            case 2198:
                                themes = val2;
                                break;
                            case 140:
                                country = val2;
                                break;
                            case 442:
                                {
                                    if (!cur_sheet)
                                        Workbook.WBProps.CodeName = val2 || 'ThisWorkbook';
                                    else wsprops.CodeName = val2 || wsprops.name;
                                }
                                break;
                        }
                    } else {
                        if (!R)
                            console.error(
                                'Missing Info for XLS Record 0x' + RecordType.toString(16),
                            );
                        blob.l += length;
                    }
                }
                wb.SheetNames = keys(Directory)
                    .sort(function (a, b) {
                        return Number(a) - Number(b);
                    })
                    .map(function (x2) {
                        return Directory[x2].name;
                    });
                if (!options2.bookSheets) wb.Sheets = Sheets;
                if (!wb.SheetNames.length && Preamble['!ref']) {
                    wb.SheetNames.push('Sheet1');
                    if (wb.Sheets) wb.Sheets['Sheet1'] = Preamble;
                } else wb.Preamble = Preamble;
                if (wb.Sheets)
                    FilterDatabases.forEach(function (r2, i2) {
                        wb.Sheets[wb.SheetNames[i2]]['!autofilter'] = r2;
                    });
                wb.Strings = sst;
                wb.SSF = dup(table_fmt);
                if (opts.enc) wb.Encryption = opts.enc;
                if (themes) wb.Themes = themes;
                wb.Metadata = {};
                if (country !== void 0) wb.Metadata.Country = country;
                if (supbooks.names.length > 0) Workbook.Names = supbooks.names;
                wb.Workbook = Workbook;
                return wb;
            }
            var PSCLSID = {
                SI: 'e0859ff2f94f6810ab9108002b27b3d9',
                DSI: '02d5cdd59c2e1b10939708002b2cf9ae',
                UDI: '05d5cdd59c2e1b10939708002b2cf9ae',
            };
            function parse_xls_props(cfb, props, o) {
                var DSI = CFB.find(cfb, '/!DocumentSummaryInformation');
                if (DSI && DSI.size > 0)
                    try {
                        var DocSummary = parse_PropertySetStream(
                            DSI,
                            DocSummaryPIDDSI,
                            PSCLSID.DSI,
                        );
                        for (var d in DocSummary) props[d] = DocSummary[d];
                    } catch (e2) {
                        if (o.WTF) throw e2;
                    }
                var SI = CFB.find(cfb, '/!SummaryInformation');
                if (SI && SI.size > 0)
                    try {
                        var Summary = parse_PropertySetStream(SI, SummaryPIDSI, PSCLSID.SI);
                        for (var s2 in Summary) if (props[s2] == null) props[s2] = Summary[s2];
                    } catch (e2) {
                        if (o.WTF) throw e2;
                    }
                if (props.HeadingPairs && props.TitlesOfParts) {
                    load_props_pairs(props.HeadingPairs, props.TitlesOfParts, props, o);
                    delete props.HeadingPairs;
                    delete props.TitlesOfParts;
                }
            }
            function write_xls_props(wb, cfb) {
                var DSEntries = [],
                    SEntries = [],
                    CEntries = [];
                var i2 = 0,
                    Keys;
                var DocSummaryRE = evert_key(DocSummaryPIDDSI, 'n');
                var SummaryRE = evert_key(SummaryPIDSI, 'n');
                if (wb.Props) {
                    Keys = keys(wb.Props);
                    for (i2 = 0; i2 < Keys.length; ++i2)
                        (Object.prototype.hasOwnProperty.call(DocSummaryRE, Keys[i2])
                            ? DSEntries
                            : Object.prototype.hasOwnProperty.call(SummaryRE, Keys[i2])
                              ? SEntries
                              : CEntries
                        ).push([Keys[i2], wb.Props[Keys[i2]]]);
                }
                if (wb.Custprops) {
                    Keys = keys(wb.Custprops);
                    for (i2 = 0; i2 < Keys.length; ++i2)
                        if (!Object.prototype.hasOwnProperty.call(wb.Props || {}, Keys[i2]))
                            (Object.prototype.hasOwnProperty.call(DocSummaryRE, Keys[i2])
                                ? DSEntries
                                : Object.prototype.hasOwnProperty.call(SummaryRE, Keys[i2])
                                  ? SEntries
                                  : CEntries
                            ).push([Keys[i2], wb.Custprops[Keys[i2]]]);
                }
                var CEntries2 = [];
                for (i2 = 0; i2 < CEntries.length; ++i2) {
                    if (
                        XLSPSSkip.indexOf(CEntries[i2][0]) > -1 ||
                        PseudoPropsPairs.indexOf(CEntries[i2][0]) > -1
                    )
                        continue;
                    if (CEntries[i2][1] == null) continue;
                    CEntries2.push(CEntries[i2]);
                }
                if (SEntries.length)
                    CFB.utils.cfb_add(
                        cfb,
                        '/SummaryInformation',
                        write_PropertySetStream(SEntries, PSCLSID.SI, SummaryRE, SummaryPIDSI),
                    );
                if (DSEntries.length || CEntries2.length)
                    CFB.utils.cfb_add(
                        cfb,
                        '/DocumentSummaryInformation',
                        write_PropertySetStream(
                            DSEntries,
                            PSCLSID.DSI,
                            DocSummaryRE,
                            DocSummaryPIDDSI,
                            CEntries2.length ? CEntries2 : null,
                            PSCLSID.UDI,
                        ),
                    );
            }
            function parse_xlscfb(cfb, options2) {
                if (!options2) options2 = {};
                fix_read_opts(options2);
                reset_cp();
                if (options2.codepage) set_ansi(options2.codepage);
                var CompObj, WB;
                if (cfb.FullPaths) {
                    if (CFB.find(cfb, '/encryption')) throw new Error('File is password-protected');
                    CompObj = CFB.find(cfb, '!CompObj');
                    WB = CFB.find(cfb, '/Workbook') || CFB.find(cfb, '/Book');
                } else {
                    switch (options2.type) {
                        case 'base64':
                            cfb = s2a(Base64_decode(cfb));
                            break;
                        case 'binary':
                            cfb = s2a(cfb);
                            break;
                        case 'buffer':
                            break;
                        case 'array':
                            if (!Array.isArray(cfb)) cfb = Array.prototype.slice.call(cfb);
                            break;
                    }
                    prep_blob(cfb, 0);
                    WB = { content: cfb };
                }
                var WorkbookP;
                var _data;
                if (CompObj) parse_compobj(CompObj);
                if (options2.bookProps && !options2.bookSheets) WorkbookP = {};
                else {
                    var T = has_buf ? 'buffer' : 'array';
                    if (WB && WB.content) WorkbookP = parse_workbook(WB.content, options2);
                    else if ((_data = CFB.find(cfb, 'PerfectOffice_MAIN')) && _data.content)
                        WorkbookP = WK_.to_workbook(_data.content, ((options2.type = T), options2));
                    else if ((_data = CFB.find(cfb, 'NativeContent_MAIN')) && _data.content)
                        WorkbookP = WK_.to_workbook(_data.content, ((options2.type = T), options2));
                    else if ((_data = CFB.find(cfb, 'MN0')) && _data.content)
                        throw new Error('Unsupported Works 4 for Mac file');
                    else throw new Error('Cannot find Workbook stream');
                    if (
                        options2.bookVBA &&
                        cfb.FullPaths &&
                        CFB.find(cfb, '/_VBA_PROJECT_CUR/VBA/dir')
                    )
                        WorkbookP.vbaraw = make_vba_xls(cfb);
                }
                var props = {};
                if (cfb.FullPaths) parse_xls_props(cfb, props, options2);
                WorkbookP.Props = WorkbookP.Custprops = props;
                if (options2.bookFiles) WorkbookP.cfb = cfb;
                return WorkbookP;
            }
            function write_xlscfb(wb, opts) {
                var o = opts || {};
                var cfb = CFB.utils.cfb_new({ root: 'R' });
                var wbpath = '/Workbook';
                switch (o.bookType || 'xls') {
                    case 'xls':
                        o.bookType = 'biff8';
                    case 'xla':
                        if (!o.bookType) o.bookType = 'xla';
                    case 'biff8':
                        wbpath = '/Workbook';
                        o.biff = 8;
                        break;
                    case 'biff5':
                        wbpath = '/Book';
                        o.biff = 5;
                        break;
                    default:
                        throw new Error('invalid type ' + o.bookType + ' for XLS CFB');
                }
                CFB.utils.cfb_add(cfb, wbpath, write_biff_buf(wb, o));
                if (o.biff == 8 && (wb.Props || wb.Custprops)) write_xls_props(wb, cfb);
                if (o.biff == 8 && wb.vbaraw)
                    fill_vba_xls(
                        cfb,
                        CFB.read(wb.vbaraw, {
                            type: typeof wb.vbaraw == 'string' ? 'binary' : 'buffer',
                        }),
                    );
                return cfb;
            }
            var XLSBRecordEnum = {
                0: {
                    /* n:"BrtRowHdr", */
                    f: parse_BrtRowHdr,
                },
                1: {
                    /* n:"BrtCellBlank", */
                    f: parse_BrtCellBlank,
                },
                2: {
                    /* n:"BrtCellRk", */
                    f: parse_BrtCellRk,
                },
                3: {
                    /* n:"BrtCellError", */
                    f: parse_BrtCellError,
                },
                4: {
                    /* n:"BrtCellBool", */
                    f: parse_BrtCellBool,
                },
                5: {
                    /* n:"BrtCellReal", */
                    f: parse_BrtCellReal,
                },
                6: {
                    /* n:"BrtCellSt", */
                    f: parse_BrtCellSt,
                },
                7: {
                    /* n:"BrtCellIsst", */
                    f: parse_BrtCellIsst,
                },
                8: {
                    /* n:"BrtFmlaString", */
                    f: parse_BrtFmlaString,
                },
                9: {
                    /* n:"BrtFmlaNum", */
                    f: parse_BrtFmlaNum,
                },
                10: {
                    /* n:"BrtFmlaBool", */
                    f: parse_BrtFmlaBool,
                },
                11: {
                    /* n:"BrtFmlaError", */
                    f: parse_BrtFmlaError,
                },
                12: {
                    /* n:"BrtShortBlank", */
                    f: parse_BrtShortBlank,
                },
                13: {
                    /* n:"BrtShortRk", */
                    f: parse_BrtShortRk,
                },
                14: {
                    /* n:"BrtShortError", */
                    f: parse_BrtShortError,
                },
                15: {
                    /* n:"BrtShortBool", */
                    f: parse_BrtShortBool,
                },
                16: {
                    /* n:"BrtShortReal", */
                    f: parse_BrtShortReal,
                },
                17: {
                    /* n:"BrtShortSt", */
                    f: parse_BrtShortSt,
                },
                18: {
                    /* n:"BrtShortIsst", */
                    f: parse_BrtShortIsst,
                },
                19: {
                    /* n:"BrtSSTItem", */
                    f: parse_RichStr,
                },
                20: {
                    /* n:"BrtPCDIMissing" */
                },
                21: {
                    /* n:"BrtPCDINumber" */
                },
                22: {
                    /* n:"BrtPCDIBoolean" */
                },
                23: {
                    /* n:"BrtPCDIError" */
                },
                24: {
                    /* n:"BrtPCDIString" */
                },
                25: {
                    /* n:"BrtPCDIDatetime" */
                },
                26: {
                    /* n:"BrtPCDIIndex" */
                },
                27: {
                    /* n:"BrtPCDIAMissing" */
                },
                28: {
                    /* n:"BrtPCDIANumber" */
                },
                29: {
                    /* n:"BrtPCDIABoolean" */
                },
                30: {
                    /* n:"BrtPCDIAError" */
                },
                31: {
                    /* n:"BrtPCDIAString" */
                },
                32: {
                    /* n:"BrtPCDIADatetime" */
                },
                33: {
                    /* n:"BrtPCRRecord" */
                },
                34: {
                    /* n:"BrtPCRRecordDt" */
                },
                35: {
                    /* n:"BrtFRTBegin", */
                    T: 1,
                },
                36: {
                    /* n:"BrtFRTEnd", */
                    T: -1,
                },
                37: {
                    /* n:"BrtACBegin", */
                    T: 1,
                },
                38: {
                    /* n:"BrtACEnd", */
                    T: -1,
                },
                39: {
                    /* n:"BrtName", */
                    f: parse_BrtName,
                },
                40: {
                    /* n:"BrtIndexRowBlock" */
                },
                42: {
                    /* n:"BrtIndexBlock" */
                },
                43: {
                    /* n:"BrtFont", */
                    f: parse_BrtFont,
                },
                44: {
                    /* n:"BrtFmt", */
                    f: parse_BrtFmt,
                },
                45: {
                    /* n:"BrtFill", */
                    f: parse_BrtFill,
                },
                46: {
                    /* n:"BrtBorder", */
                    f: parse_BrtBorder,
                },
                47: {
                    /* n:"BrtXF", */
                    f: parse_BrtXF,
                },
                48: {
                    /* n:"BrtStyle" */
                },
                49: {
                    /* n:"BrtCellMeta", */
                    f: parse_Int32LE,
                },
                50: {
                    /* n:"BrtValueMeta" */
                },
                51: {
                    /* n:"BrtMdb" */
                    f: parse_BrtMdb,
                },
                52: {
                    /* n:"BrtBeginFmd", */
                    T: 1,
                },
                53: {
                    /* n:"BrtEndFmd", */
                    T: -1,
                },
                54: {
                    /* n:"BrtBeginMdx", */
                    T: 1,
                },
                55: {
                    /* n:"BrtEndMdx", */
                    T: -1,
                },
                56: {
                    /* n:"BrtBeginMdxTuple", */
                    T: 1,
                },
                57: {
                    /* n:"BrtEndMdxTuple", */
                    T: -1,
                },
                58: {
                    /* n:"BrtMdxMbrIstr" */
                },
                59: {
                    /* n:"BrtStr" */
                },
                60: {
                    /* n:"BrtColInfo", */
                    f: parse_ColInfo,
                },
                62: {
                    /* n:"BrtCellRString", */
                    f: parse_BrtCellRString,
                },
                63: {
                    /* n:"BrtCalcChainItem$", */
                    f: parse_BrtCalcChainItem$,
                },
                64: {
                    /* n:"BrtDVal", */
                    f: parse_BrtDVal,
                },
                65: {
                    /* n:"BrtSxvcellNum" */
                },
                66: {
                    /* n:"BrtSxvcellStr" */
                },
                67: {
                    /* n:"BrtSxvcellBool" */
                },
                68: {
                    /* n:"BrtSxvcellErr" */
                },
                69: {
                    /* n:"BrtSxvcellDate" */
                },
                70: {
                    /* n:"BrtSxvcellNil" */
                },
                128: {
                    /* n:"BrtFileVersion" */
                },
                129: {
                    /* n:"BrtBeginSheet", */
                    T: 1,
                },
                130: {
                    /* n:"BrtEndSheet", */
                    T: -1,
                },
                131: {
                    /* n:"BrtBeginBook", */
                    T: 1,
                    f: parsenoop,
                    p: 0,
                },
                132: {
                    /* n:"BrtEndBook", */
                    T: -1,
                },
                133: {
                    /* n:"BrtBeginWsViews", */
                    T: 1,
                },
                134: {
                    /* n:"BrtEndWsViews", */
                    T: -1,
                },
                135: {
                    /* n:"BrtBeginBookViews", */
                    T: 1,
                },
                136: {
                    /* n:"BrtEndBookViews", */
                    T: -1,
                },
                137: {
                    /* n:"BrtBeginWsView", */
                    T: 1,
                    f: parse_BrtBeginWsView,
                },
                138: {
                    /* n:"BrtEndWsView", */
                    T: -1,
                },
                139: {
                    /* n:"BrtBeginCsViews", */
                    T: 1,
                },
                140: {
                    /* n:"BrtEndCsViews", */
                    T: -1,
                },
                141: {
                    /* n:"BrtBeginCsView", */
                    T: 1,
                },
                142: {
                    /* n:"BrtEndCsView", */
                    T: -1,
                },
                143: {
                    /* n:"BrtBeginBundleShs", */
                    T: 1,
                },
                144: {
                    /* n:"BrtEndBundleShs", */
                    T: -1,
                },
                145: {
                    /* n:"BrtBeginSheetData", */
                    T: 1,
                },
                146: {
                    /* n:"BrtEndSheetData", */
                    T: -1,
                },
                147: {
                    /* n:"BrtWsProp", */
                    f: parse_BrtWsProp,
                },
                148: {
                    /* n:"BrtWsDim", */
                    f: parse_BrtWsDim,
                    p: 16,
                },
                151: {
                    /* n:"BrtPane", */
                    f: parse_BrtPane,
                },
                152: {
                    /* n:"BrtSel" */
                },
                153: {
                    /* n:"BrtWbProp", */
                    f: parse_BrtWbProp,
                },
                154: {
                    /* n:"BrtWbFactoid" */
                },
                155: {
                    /* n:"BrtFileRecover" */
                },
                156: {
                    /* n:"BrtBundleSh", */
                    f: parse_BrtBundleSh,
                },
                157: {
                    /* n:"BrtCalcProp" */
                },
                158: {
                    /* n:"BrtBookView" */
                },
                159: {
                    /* n:"BrtBeginSst", */
                    T: 1,
                    f: parse_BrtBeginSst,
                },
                160: {
                    /* n:"BrtEndSst", */
                    T: -1,
                },
                161: {
                    /* n:"BrtBeginAFilter", */
                    T: 1,
                    f: parse_UncheckedRfX,
                },
                162: {
                    /* n:"BrtEndAFilter", */
                    T: -1,
                },
                163: {
                    /* n:"BrtBeginFilterColumn", */
                    T: 1,
                },
                164: {
                    /* n:"BrtEndFilterColumn", */
                    T: -1,
                },
                165: {
                    /* n:"BrtBeginFilters", */
                    T: 1,
                },
                166: {
                    /* n:"BrtEndFilters", */
                    T: -1,
                },
                167: {
                    /* n:"BrtFilter" */
                },
                168: {
                    /* n:"BrtColorFilter" */
                },
                169: {
                    /* n:"BrtIconFilter" */
                },
                170: {
                    /* n:"BrtTop10Filter" */
                },
                171: {
                    /* n:"BrtDynamicFilter" */
                },
                172: {
                    /* n:"BrtBeginCustomFilters", */
                    T: 1,
                },
                173: {
                    /* n:"BrtEndCustomFilters", */
                    T: -1,
                },
                174: {
                    /* n:"BrtCustomFilter" */
                },
                175: {
                    /* n:"BrtAFilterDateGroupItem" */
                },
                176: {
                    /* n:"BrtMergeCell", */
                    f: parse_BrtMergeCell,
                },
                177: {
                    /* n:"BrtBeginMergeCells", */
                    T: 1,
                },
                178: {
                    /* n:"BrtEndMergeCells", */
                    T: -1,
                },
                179: {
                    /* n:"BrtBeginPivotCacheDef", */
                    T: 1,
                },
                180: {
                    /* n:"BrtEndPivotCacheDef", */
                    T: -1,
                },
                181: {
                    /* n:"BrtBeginPCDFields", */
                    T: 1,
                },
                182: {
                    /* n:"BrtEndPCDFields", */
                    T: -1,
                },
                183: {
                    /* n:"BrtBeginPCDField", */
                    T: 1,
                },
                184: {
                    /* n:"BrtEndPCDField", */
                    T: -1,
                },
                185: {
                    /* n:"BrtBeginPCDSource", */
                    T: 1,
                },
                186: {
                    /* n:"BrtEndPCDSource", */
                    T: -1,
                },
                187: {
                    /* n:"BrtBeginPCDSRange", */
                    T: 1,
                },
                188: {
                    /* n:"BrtEndPCDSRange", */
                    T: -1,
                },
                189: {
                    /* n:"BrtBeginPCDFAtbl", */
                    T: 1,
                },
                190: {
                    /* n:"BrtEndPCDFAtbl", */
                    T: -1,
                },
                191: {
                    /* n:"BrtBeginPCDIRun", */
                    T: 1,
                },
                192: {
                    /* n:"BrtEndPCDIRun", */
                    T: -1,
                },
                193: {
                    /* n:"BrtBeginPivotCacheRecords", */
                    T: 1,
                },
                194: {
                    /* n:"BrtEndPivotCacheRecords", */
                    T: -1,
                },
                195: {
                    /* n:"BrtBeginPCDHierarchies", */
                    T: 1,
                },
                196: {
                    /* n:"BrtEndPCDHierarchies", */
                    T: -1,
                },
                197: {
                    /* n:"BrtBeginPCDHierarchy", */
                    T: 1,
                },
                198: {
                    /* n:"BrtEndPCDHierarchy", */
                    T: -1,
                },
                199: {
                    /* n:"BrtBeginPCDHFieldsUsage", */
                    T: 1,
                },
                200: {
                    /* n:"BrtEndPCDHFieldsUsage", */
                    T: -1,
                },
                201: {
                    /* n:"BrtBeginExtConnection", */
                    T: 1,
                },
                202: {
                    /* n:"BrtEndExtConnection", */
                    T: -1,
                },
                203: {
                    /* n:"BrtBeginECDbProps", */
                    T: 1,
                },
                204: {
                    /* n:"BrtEndECDbProps", */
                    T: -1,
                },
                205: {
                    /* n:"BrtBeginECOlapProps", */
                    T: 1,
                },
                206: {
                    /* n:"BrtEndECOlapProps", */
                    T: -1,
                },
                207: {
                    /* n:"BrtBeginPCDSConsol", */
                    T: 1,
                },
                208: {
                    /* n:"BrtEndPCDSConsol", */
                    T: -1,
                },
                209: {
                    /* n:"BrtBeginPCDSCPages", */
                    T: 1,
                },
                210: {
                    /* n:"BrtEndPCDSCPages", */
                    T: -1,
                },
                211: {
                    /* n:"BrtBeginPCDSCPage", */
                    T: 1,
                },
                212: {
                    /* n:"BrtEndPCDSCPage", */
                    T: -1,
                },
                213: {
                    /* n:"BrtBeginPCDSCPItem", */
                    T: 1,
                },
                214: {
                    /* n:"BrtEndPCDSCPItem", */
                    T: -1,
                },
                215: {
                    /* n:"BrtBeginPCDSCSets", */
                    T: 1,
                },
                216: {
                    /* n:"BrtEndPCDSCSets", */
                    T: -1,
                },
                217: {
                    /* n:"BrtBeginPCDSCSet", */
                    T: 1,
                },
                218: {
                    /* n:"BrtEndPCDSCSet", */
                    T: -1,
                },
                219: {
                    /* n:"BrtBeginPCDFGroup", */
                    T: 1,
                },
                220: {
                    /* n:"BrtEndPCDFGroup", */
                    T: -1,
                },
                221: {
                    /* n:"BrtBeginPCDFGItems", */
                    T: 1,
                },
                222: {
                    /* n:"BrtEndPCDFGItems", */
                    T: -1,
                },
                223: {
                    /* n:"BrtBeginPCDFGRange", */
                    T: 1,
                },
                224: {
                    /* n:"BrtEndPCDFGRange", */
                    T: -1,
                },
                225: {
                    /* n:"BrtBeginPCDFGDiscrete", */
                    T: 1,
                },
                226: {
                    /* n:"BrtEndPCDFGDiscrete", */
                    T: -1,
                },
                227: {
                    /* n:"BrtBeginPCDSDTupleCache", */
                    T: 1,
                },
                228: {
                    /* n:"BrtEndPCDSDTupleCache", */
                    T: -1,
                },
                229: {
                    /* n:"BrtBeginPCDSDTCEntries", */
                    T: 1,
                },
                230: {
                    /* n:"BrtEndPCDSDTCEntries", */
                    T: -1,
                },
                231: {
                    /* n:"BrtBeginPCDSDTCEMembers", */
                    T: 1,
                },
                232: {
                    /* n:"BrtEndPCDSDTCEMembers", */
                    T: -1,
                },
                233: {
                    /* n:"BrtBeginPCDSDTCEMember", */
                    T: 1,
                },
                234: {
                    /* n:"BrtEndPCDSDTCEMember", */
                    T: -1,
                },
                235: {
                    /* n:"BrtBeginPCDSDTCQueries", */
                    T: 1,
                },
                236: {
                    /* n:"BrtEndPCDSDTCQueries", */
                    T: -1,
                },
                237: {
                    /* n:"BrtBeginPCDSDTCQuery", */
                    T: 1,
                },
                238: {
                    /* n:"BrtEndPCDSDTCQuery", */
                    T: -1,
                },
                239: {
                    /* n:"BrtBeginPCDSDTCSets", */
                    T: 1,
                },
                240: {
                    /* n:"BrtEndPCDSDTCSets", */
                    T: -1,
                },
                241: {
                    /* n:"BrtBeginPCDSDTCSet", */
                    T: 1,
                },
                242: {
                    /* n:"BrtEndPCDSDTCSet", */
                    T: -1,
                },
                243: {
                    /* n:"BrtBeginPCDCalcItems", */
                    T: 1,
                },
                244: {
                    /* n:"BrtEndPCDCalcItems", */
                    T: -1,
                },
                245: {
                    /* n:"BrtBeginPCDCalcItem", */
                    T: 1,
                },
                246: {
                    /* n:"BrtEndPCDCalcItem", */
                    T: -1,
                },
                247: {
                    /* n:"BrtBeginPRule", */
                    T: 1,
                },
                248: {
                    /* n:"BrtEndPRule", */
                    T: -1,
                },
                249: {
                    /* n:"BrtBeginPRFilters", */
                    T: 1,
                },
                250: {
                    /* n:"BrtEndPRFilters", */
                    T: -1,
                },
                251: {
                    /* n:"BrtBeginPRFilter", */
                    T: 1,
                },
                252: {
                    /* n:"BrtEndPRFilter", */
                    T: -1,
                },
                253: {
                    /* n:"BrtBeginPNames", */
                    T: 1,
                },
                254: {
                    /* n:"BrtEndPNames", */
                    T: -1,
                },
                255: {
                    /* n:"BrtBeginPName", */
                    T: 1,
                },
                256: {
                    /* n:"BrtEndPName", */
                    T: -1,
                },
                257: {
                    /* n:"BrtBeginPNPairs", */
                    T: 1,
                },
                258: {
                    /* n:"BrtEndPNPairs", */
                    T: -1,
                },
                259: {
                    /* n:"BrtBeginPNPair", */
                    T: 1,
                },
                260: {
                    /* n:"BrtEndPNPair", */
                    T: -1,
                },
                261: {
                    /* n:"BrtBeginECWebProps", */
                    T: 1,
                },
                262: {
                    /* n:"BrtEndECWebProps", */
                    T: -1,
                },
                263: {
                    /* n:"BrtBeginEcWpTables", */
                    T: 1,
                },
                264: {
                    /* n:"BrtEndECWPTables", */
                    T: -1,
                },
                265: {
                    /* n:"BrtBeginECParams", */
                    T: 1,
                },
                266: {
                    /* n:"BrtEndECParams", */
                    T: -1,
                },
                267: {
                    /* n:"BrtBeginECParam", */
                    T: 1,
                },
                268: {
                    /* n:"BrtEndECParam", */
                    T: -1,
                },
                269: {
                    /* n:"BrtBeginPCDKPIs", */
                    T: 1,
                },
                270: {
                    /* n:"BrtEndPCDKPIs", */
                    T: -1,
                },
                271: {
                    /* n:"BrtBeginPCDKPI", */
                    T: 1,
                },
                272: {
                    /* n:"BrtEndPCDKPI", */
                    T: -1,
                },
                273: {
                    /* n:"BrtBeginDims", */
                    T: 1,
                },
                274: {
                    /* n:"BrtEndDims", */
                    T: -1,
                },
                275: {
                    /* n:"BrtBeginDim", */
                    T: 1,
                },
                276: {
                    /* n:"BrtEndDim", */
                    T: -1,
                },
                277: {
                    /* n:"BrtIndexPartEnd" */
                },
                278: {
                    /* n:"BrtBeginStyleSheet", */
                    T: 1,
                },
                279: {
                    /* n:"BrtEndStyleSheet", */
                    T: -1,
                },
                280: {
                    /* n:"BrtBeginSXView", */
                    T: 1,
                },
                281: {
                    /* n:"BrtEndSXVI", */
                    T: -1,
                },
                282: {
                    /* n:"BrtBeginSXVI", */
                    T: 1,
                },
                283: {
                    /* n:"BrtBeginSXVIs", */
                    T: 1,
                },
                284: {
                    /* n:"BrtEndSXVIs", */
                    T: -1,
                },
                285: {
                    /* n:"BrtBeginSXVD", */
                    T: 1,
                },
                286: {
                    /* n:"BrtEndSXVD", */
                    T: -1,
                },
                287: {
                    /* n:"BrtBeginSXVDs", */
                    T: 1,
                },
                288: {
                    /* n:"BrtEndSXVDs", */
                    T: -1,
                },
                289: {
                    /* n:"BrtBeginSXPI", */
                    T: 1,
                },
                290: {
                    /* n:"BrtEndSXPI", */
                    T: -1,
                },
                291: {
                    /* n:"BrtBeginSXPIs", */
                    T: 1,
                },
                292: {
                    /* n:"BrtEndSXPIs", */
                    T: -1,
                },
                293: {
                    /* n:"BrtBeginSXDI", */
                    T: 1,
                },
                294: {
                    /* n:"BrtEndSXDI", */
                    T: -1,
                },
                295: {
                    /* n:"BrtBeginSXDIs", */
                    T: 1,
                },
                296: {
                    /* n:"BrtEndSXDIs", */
                    T: -1,
                },
                297: {
                    /* n:"BrtBeginSXLI", */
                    T: 1,
                },
                298: {
                    /* n:"BrtEndSXLI", */
                    T: -1,
                },
                299: {
                    /* n:"BrtBeginSXLIRws", */
                    T: 1,
                },
                300: {
                    /* n:"BrtEndSXLIRws", */
                    T: -1,
                },
                301: {
                    /* n:"BrtBeginSXLICols", */
                    T: 1,
                },
                302: {
                    /* n:"BrtEndSXLICols", */
                    T: -1,
                },
                303: {
                    /* n:"BrtBeginSXFormat", */
                    T: 1,
                },
                304: {
                    /* n:"BrtEndSXFormat", */
                    T: -1,
                },
                305: {
                    /* n:"BrtBeginSXFormats", */
                    T: 1,
                },
                306: {
                    /* n:"BrtEndSxFormats", */
                    T: -1,
                },
                307: {
                    /* n:"BrtBeginSxSelect", */
                    T: 1,
                },
                308: {
                    /* n:"BrtEndSxSelect", */
                    T: -1,
                },
                309: {
                    /* n:"BrtBeginISXVDRws", */
                    T: 1,
                },
                310: {
                    /* n:"BrtEndISXVDRws", */
                    T: -1,
                },
                311: {
                    /* n:"BrtBeginISXVDCols", */
                    T: 1,
                },
                312: {
                    /* n:"BrtEndISXVDCols", */
                    T: -1,
                },
                313: {
                    /* n:"BrtEndSXLocation", */
                    T: -1,
                },
                314: {
                    /* n:"BrtBeginSXLocation", */
                    T: 1,
                },
                315: {
                    /* n:"BrtEndSXView", */
                    T: -1,
                },
                316: {
                    /* n:"BrtBeginSXTHs", */
                    T: 1,
                },
                317: {
                    /* n:"BrtEndSXTHs", */
                    T: -1,
                },
                318: {
                    /* n:"BrtBeginSXTH", */
                    T: 1,
                },
                319: {
                    /* n:"BrtEndSXTH", */
                    T: -1,
                },
                320: {
                    /* n:"BrtBeginISXTHRws", */
                    T: 1,
                },
                321: {
                    /* n:"BrtEndISXTHRws", */
                    T: -1,
                },
                322: {
                    /* n:"BrtBeginISXTHCols", */
                    T: 1,
                },
                323: {
                    /* n:"BrtEndISXTHCols", */
                    T: -1,
                },
                324: {
                    /* n:"BrtBeginSXTDMPS", */
                    T: 1,
                },
                325: {
                    /* n:"BrtEndSXTDMPs", */
                    T: -1,
                },
                326: {
                    /* n:"BrtBeginSXTDMP", */
                    T: 1,
                },
                327: {
                    /* n:"BrtEndSXTDMP", */
                    T: -1,
                },
                328: {
                    /* n:"BrtBeginSXTHItems", */
                    T: 1,
                },
                329: {
                    /* n:"BrtEndSXTHItems", */
                    T: -1,
                },
                330: {
                    /* n:"BrtBeginSXTHItem", */
                    T: 1,
                },
                331: {
                    /* n:"BrtEndSXTHItem", */
                    T: -1,
                },
                332: {
                    /* n:"BrtBeginMetadata", */
                    T: 1,
                },
                333: {
                    /* n:"BrtEndMetadata", */
                    T: -1,
                },
                334: {
                    /* n:"BrtBeginEsmdtinfo", */
                    T: 1,
                },
                335: {
                    /* n:"BrtMdtinfo", */
                    f: parse_BrtMdtinfo,
                },
                336: {
                    /* n:"BrtEndEsmdtinfo", */
                    T: -1,
                },
                337: {
                    /* n:"BrtBeginEsmdb", */
                    f: parse_BrtBeginEsmdb,
                    T: 1,
                },
                338: {
                    /* n:"BrtEndEsmdb", */
                    T: -1,
                },
                339: {
                    /* n:"BrtBeginEsfmd", */
                    T: 1,
                },
                340: {
                    /* n:"BrtEndEsfmd", */
                    T: -1,
                },
                341: {
                    /* n:"BrtBeginSingleCells", */
                    T: 1,
                },
                342: {
                    /* n:"BrtEndSingleCells", */
                    T: -1,
                },
                343: {
                    /* n:"BrtBeginList", */
                    T: 1,
                },
                344: {
                    /* n:"BrtEndList", */
                    T: -1,
                },
                345: {
                    /* n:"BrtBeginListCols", */
                    T: 1,
                },
                346: {
                    /* n:"BrtEndListCols", */
                    T: -1,
                },
                347: {
                    /* n:"BrtBeginListCol", */
                    T: 1,
                },
                348: {
                    /* n:"BrtEndListCol", */
                    T: -1,
                },
                349: {
                    /* n:"BrtBeginListXmlCPr", */
                    T: 1,
                },
                350: {
                    /* n:"BrtEndListXmlCPr", */
                    T: -1,
                },
                351: {
                    /* n:"BrtListCCFmla" */
                },
                352: {
                    /* n:"BrtListTrFmla" */
                },
                353: {
                    /* n:"BrtBeginExternals", */
                    T: 1,
                },
                354: {
                    /* n:"BrtEndExternals", */
                    T: -1,
                },
                355: {
                    /* n:"BrtSupBookSrc", */
                    f: parse_RelID,
                },
                357: {
                    /* n:"BrtSupSelf" */
                },
                358: {
                    /* n:"BrtSupSame" */
                },
                359: {
                    /* n:"BrtSupTabs" */
                },
                360: {
                    /* n:"BrtBeginSupBook", */
                    T: 1,
                },
                361: {
                    /* n:"BrtPlaceholderName" */
                },
                362: {
                    /* n:"BrtExternSheet", */
                    f: parse_ExternSheet,
                },
                363: {
                    /* n:"BrtExternTableStart" */
                },
                364: {
                    /* n:"BrtExternTableEnd" */
                },
                366: {
                    /* n:"BrtExternRowHdr" */
                },
                367: {
                    /* n:"BrtExternCellBlank" */
                },
                368: {
                    /* n:"BrtExternCellReal" */
                },
                369: {
                    /* n:"BrtExternCellBool" */
                },
                370: {
                    /* n:"BrtExternCellError" */
                },
                371: {
                    /* n:"BrtExternCellString" */
                },
                372: {
                    /* n:"BrtBeginEsmdx", */
                    T: 1,
                },
                373: {
                    /* n:"BrtEndEsmdx", */
                    T: -1,
                },
                374: {
                    /* n:"BrtBeginMdxSet", */
                    T: 1,
                },
                375: {
                    /* n:"BrtEndMdxSet", */
                    T: -1,
                },
                376: {
                    /* n:"BrtBeginMdxMbrProp", */
                    T: 1,
                },
                377: {
                    /* n:"BrtEndMdxMbrProp", */
                    T: -1,
                },
                378: {
                    /* n:"BrtBeginMdxKPI", */
                    T: 1,
                },
                379: {
                    /* n:"BrtEndMdxKPI", */
                    T: -1,
                },
                380: {
                    /* n:"BrtBeginEsstr", */
                    T: 1,
                },
                381: {
                    /* n:"BrtEndEsstr", */
                    T: -1,
                },
                382: {
                    /* n:"BrtBeginPRFItem", */
                    T: 1,
                },
                383: {
                    /* n:"BrtEndPRFItem", */
                    T: -1,
                },
                384: {
                    /* n:"BrtBeginPivotCacheIDs", */
                    T: 1,
                },
                385: {
                    /* n:"BrtEndPivotCacheIDs", */
                    T: -1,
                },
                386: {
                    /* n:"BrtBeginPivotCacheID", */
                    T: 1,
                },
                387: {
                    /* n:"BrtEndPivotCacheID", */
                    T: -1,
                },
                388: {
                    /* n:"BrtBeginISXVIs", */
                    T: 1,
                },
                389: {
                    /* n:"BrtEndISXVIs", */
                    T: -1,
                },
                390: {
                    /* n:"BrtBeginColInfos", */
                    T: 1,
                },
                391: {
                    /* n:"BrtEndColInfos", */
                    T: -1,
                },
                392: {
                    /* n:"BrtBeginRwBrk", */
                    T: 1,
                },
                393: {
                    /* n:"BrtEndRwBrk", */
                    T: -1,
                },
                394: {
                    /* n:"BrtBeginColBrk", */
                    T: 1,
                },
                395: {
                    /* n:"BrtEndColBrk", */
                    T: -1,
                },
                396: {
                    /* n:"BrtBrk" */
                },
                397: {
                    /* n:"BrtUserBookView" */
                },
                398: {
                    /* n:"BrtInfo" */
                },
                399: {
                    /* n:"BrtCUsr" */
                },
                400: {
                    /* n:"BrtUsr" */
                },
                401: {
                    /* n:"BrtBeginUsers", */
                    T: 1,
                },
                403: {
                    /* n:"BrtEOF" */
                },
                404: {
                    /* n:"BrtUCR" */
                },
                405: {
                    /* n:"BrtRRInsDel" */
                },
                406: {
                    /* n:"BrtRREndInsDel" */
                },
                407: {
                    /* n:"BrtRRMove" */
                },
                408: {
                    /* n:"BrtRREndMove" */
                },
                409: {
                    /* n:"BrtRRChgCell" */
                },
                410: {
                    /* n:"BrtRREndChgCell" */
                },
                411: {
                    /* n:"BrtRRHeader" */
                },
                412: {
                    /* n:"BrtRRUserView" */
                },
                413: {
                    /* n:"BrtRRRenSheet" */
                },
                414: {
                    /* n:"BrtRRInsertSh" */
                },
                415: {
                    /* n:"BrtRRDefName" */
                },
                416: {
                    /* n:"BrtRRNote" */
                },
                417: {
                    /* n:"BrtRRConflict" */
                },
                418: {
                    /* n:"BrtRRTQSIF" */
                },
                419: {
                    /* n:"BrtRRFormat" */
                },
                420: {
                    /* n:"BrtRREndFormat" */
                },
                421: {
                    /* n:"BrtRRAutoFmt" */
                },
                422: {
                    /* n:"BrtBeginUserShViews", */
                    T: 1,
                },
                423: {
                    /* n:"BrtBeginUserShView", */
                    T: 1,
                },
                424: {
                    /* n:"BrtEndUserShView", */
                    T: -1,
                },
                425: {
                    /* n:"BrtEndUserShViews", */
                    T: -1,
                },
                426: {
                    /* n:"BrtArrFmla", */
                    f: parse_BrtArrFmla,
                },
                427: {
                    /* n:"BrtShrFmla", */
                    f: parse_BrtShrFmla,
                },
                428: {
                    /* n:"BrtTable" */
                },
                429: {
                    /* n:"BrtBeginExtConnections", */
                    T: 1,
                },
                430: {
                    /* n:"BrtEndExtConnections", */
                    T: -1,
                },
                431: {
                    /* n:"BrtBeginPCDCalcMems", */
                    T: 1,
                },
                432: {
                    /* n:"BrtEndPCDCalcMems", */
                    T: -1,
                },
                433: {
                    /* n:"BrtBeginPCDCalcMem", */
                    T: 1,
                },
                434: {
                    /* n:"BrtEndPCDCalcMem", */
                    T: -1,
                },
                435: {
                    /* n:"BrtBeginPCDHGLevels", */
                    T: 1,
                },
                436: {
                    /* n:"BrtEndPCDHGLevels", */
                    T: -1,
                },
                437: {
                    /* n:"BrtBeginPCDHGLevel", */
                    T: 1,
                },
                438: {
                    /* n:"BrtEndPCDHGLevel", */
                    T: -1,
                },
                439: {
                    /* n:"BrtBeginPCDHGLGroups", */
                    T: 1,
                },
                440: {
                    /* n:"BrtEndPCDHGLGroups", */
                    T: -1,
                },
                441: {
                    /* n:"BrtBeginPCDHGLGroup", */
                    T: 1,
                },
                442: {
                    /* n:"BrtEndPCDHGLGroup", */
                    T: -1,
                },
                443: {
                    /* n:"BrtBeginPCDHGLGMembers", */
                    T: 1,
                },
                444: {
                    /* n:"BrtEndPCDHGLGMembers", */
                    T: -1,
                },
                445: {
                    /* n:"BrtBeginPCDHGLGMember", */
                    T: 1,
                },
                446: {
                    /* n:"BrtEndPCDHGLGMember", */
                    T: -1,
                },
                447: {
                    /* n:"BrtBeginQSI", */
                    T: 1,
                },
                448: {
                    /* n:"BrtEndQSI", */
                    T: -1,
                },
                449: {
                    /* n:"BrtBeginQSIR", */
                    T: 1,
                },
                450: {
                    /* n:"BrtEndQSIR", */
                    T: -1,
                },
                451: {
                    /* n:"BrtBeginDeletedNames", */
                    T: 1,
                },
                452: {
                    /* n:"BrtEndDeletedNames", */
                    T: -1,
                },
                453: {
                    /* n:"BrtBeginDeletedName", */
                    T: 1,
                },
                454: {
                    /* n:"BrtEndDeletedName", */
                    T: -1,
                },
                455: {
                    /* n:"BrtBeginQSIFs", */
                    T: 1,
                },
                456: {
                    /* n:"BrtEndQSIFs", */
                    T: -1,
                },
                457: {
                    /* n:"BrtBeginQSIF", */
                    T: 1,
                },
                458: {
                    /* n:"BrtEndQSIF", */
                    T: -1,
                },
                459: {
                    /* n:"BrtBeginAutoSortScope", */
                    T: 1,
                },
                460: {
                    /* n:"BrtEndAutoSortScope", */
                    T: -1,
                },
                461: {
                    /* n:"BrtBeginConditionalFormatting", */
                    T: 1,
                },
                462: {
                    /* n:"BrtEndConditionalFormatting", */
                    T: -1,
                },
                463: {
                    /* n:"BrtBeginCFRule", */
                    T: 1,
                },
                464: {
                    /* n:"BrtEndCFRule", */
                    T: -1,
                },
                465: {
                    /* n:"BrtBeginIconSet", */
                    T: 1,
                },
                466: {
                    /* n:"BrtEndIconSet", */
                    T: -1,
                },
                467: {
                    /* n:"BrtBeginDatabar", */
                    T: 1,
                },
                468: {
                    /* n:"BrtEndDatabar", */
                    T: -1,
                },
                469: {
                    /* n:"BrtBeginColorScale", */
                    T: 1,
                },
                470: {
                    /* n:"BrtEndColorScale", */
                    T: -1,
                },
                471: {
                    /* n:"BrtCFVO" */
                },
                472: {
                    /* n:"BrtExternValueMeta" */
                },
                473: {
                    /* n:"BrtBeginColorPalette", */
                    T: 1,
                },
                474: {
                    /* n:"BrtEndColorPalette", */
                    T: -1,
                },
                475: {
                    /* n:"BrtIndexedColor" */
                },
                476: {
                    /* n:"BrtMargins", */
                    f: parse_BrtMargins,
                },
                477: {
                    /* n:"BrtPrintOptions" */
                },
                478: {
                    /* n:"BrtPageSetup" */
                },
                479: {
                    /* n:"BrtBeginHeaderFooter", */
                    T: 1,
                },
                480: {
                    /* n:"BrtEndHeaderFooter", */
                    T: -1,
                },
                481: {
                    /* n:"BrtBeginSXCrtFormat", */
                    T: 1,
                },
                482: {
                    /* n:"BrtEndSXCrtFormat", */
                    T: -1,
                },
                483: {
                    /* n:"BrtBeginSXCrtFormats", */
                    T: 1,
                },
                484: {
                    /* n:"BrtEndSXCrtFormats", */
                    T: -1,
                },
                485: {
                    /* n:"BrtWsFmtInfo", */
                    f: parse_BrtWsFmtInfo,
                },
                486: {
                    /* n:"BrtBeginMgs", */
                    T: 1,
                },
                487: {
                    /* n:"BrtEndMGs", */
                    T: -1,
                },
                488: {
                    /* n:"BrtBeginMGMaps", */
                    T: 1,
                },
                489: {
                    /* n:"BrtEndMGMaps", */
                    T: -1,
                },
                490: {
                    /* n:"BrtBeginMG", */
                    T: 1,
                },
                491: {
                    /* n:"BrtEndMG", */
                    T: -1,
                },
                492: {
                    /* n:"BrtBeginMap", */
                    T: 1,
                },
                493: {
                    /* n:"BrtEndMap", */
                    T: -1,
                },
                494: {
                    /* n:"BrtHLink", */
                    f: parse_BrtHLink,
                },
                495: {
                    /* n:"BrtBeginDCon", */
                    T: 1,
                },
                496: {
                    /* n:"BrtEndDCon", */
                    T: -1,
                },
                497: {
                    /* n:"BrtBeginDRefs", */
                    T: 1,
                },
                498: {
                    /* n:"BrtEndDRefs", */
                    T: -1,
                },
                499: {
                    /* n:"BrtDRef" */
                },
                500: {
                    /* n:"BrtBeginScenMan", */
                    T: 1,
                },
                501: {
                    /* n:"BrtEndScenMan", */
                    T: -1,
                },
                502: {
                    /* n:"BrtBeginSct", */
                    T: 1,
                },
                503: {
                    /* n:"BrtEndSct", */
                    T: -1,
                },
                504: {
                    /* n:"BrtSlc" */
                },
                505: {
                    /* n:"BrtBeginDXFs", */
                    T: 1,
                },
                506: {
                    /* n:"BrtEndDXFs", */
                    T: -1,
                },
                507: {
                    /* n:"BrtDXF" */
                },
                508: {
                    /* n:"BrtBeginTableStyles", */
                    T: 1,
                },
                509: {
                    /* n:"BrtEndTableStyles", */
                    T: -1,
                },
                510: {
                    /* n:"BrtBeginTableStyle", */
                    T: 1,
                },
                511: {
                    /* n:"BrtEndTableStyle", */
                    T: -1,
                },
                512: {
                    /* n:"BrtTableStyleElement" */
                },
                513: {
                    /* n:"BrtTableStyleClient" */
                },
                514: {
                    /* n:"BrtBeginVolDeps", */
                    T: 1,
                },
                515: {
                    /* n:"BrtEndVolDeps", */
                    T: -1,
                },
                516: {
                    /* n:"BrtBeginVolType", */
                    T: 1,
                },
                517: {
                    /* n:"BrtEndVolType", */
                    T: -1,
                },
                518: {
                    /* n:"BrtBeginVolMain", */
                    T: 1,
                },
                519: {
                    /* n:"BrtEndVolMain", */
                    T: -1,
                },
                520: {
                    /* n:"BrtBeginVolTopic", */
                    T: 1,
                },
                521: {
                    /* n:"BrtEndVolTopic", */
                    T: -1,
                },
                522: {
                    /* n:"BrtVolSubtopic" */
                },
                523: {
                    /* n:"BrtVolRef" */
                },
                524: {
                    /* n:"BrtVolNum" */
                },
                525: {
                    /* n:"BrtVolErr" */
                },
                526: {
                    /* n:"BrtVolStr" */
                },
                527: {
                    /* n:"BrtVolBool" */
                },
                528: {
                    /* n:"BrtBeginCalcChain$", */
                    T: 1,
                },
                529: {
                    /* n:"BrtEndCalcChain$", */
                    T: -1,
                },
                530: {
                    /* n:"BrtBeginSortState", */
                    T: 1,
                },
                531: {
                    /* n:"BrtEndSortState", */
                    T: -1,
                },
                532: {
                    /* n:"BrtBeginSortCond", */
                    T: 1,
                },
                533: {
                    /* n:"BrtEndSortCond", */
                    T: -1,
                },
                534: {
                    /* n:"BrtBookProtection" */
                },
                535: {
                    /* n:"BrtSheetProtection" */
                },
                536: {
                    /* n:"BrtRangeProtection" */
                },
                537: {
                    /* n:"BrtPhoneticInfo" */
                },
                538: {
                    /* n:"BrtBeginECTxtWiz", */
                    T: 1,
                },
                539: {
                    /* n:"BrtEndECTxtWiz", */
                    T: -1,
                },
                540: {
                    /* n:"BrtBeginECTWFldInfoLst", */
                    T: 1,
                },
                541: {
                    /* n:"BrtEndECTWFldInfoLst", */
                    T: -1,
                },
                542: {
                    /* n:"BrtBeginECTwFldInfo", */
                    T: 1,
                },
                548: {
                    /* n:"BrtFileSharing" */
                },
                549: {
                    /* n:"BrtOleSize" */
                },
                550: {
                    /* n:"BrtDrawing", */
                    f: parse_RelID,
                },
                551: {
                    /* n:"BrtLegacyDrawing" */
                },
                552: {
                    /* n:"BrtLegacyDrawingHF" */
                },
                553: {
                    /* n:"BrtWebOpt" */
                },
                554: {
                    /* n:"BrtBeginWebPubItems", */
                    T: 1,
                },
                555: {
                    /* n:"BrtEndWebPubItems", */
                    T: -1,
                },
                556: {
                    /* n:"BrtBeginWebPubItem", */
                    T: 1,
                },
                557: {
                    /* n:"BrtEndWebPubItem", */
                    T: -1,
                },
                558: {
                    /* n:"BrtBeginSXCondFmt", */
                    T: 1,
                },
                559: {
                    /* n:"BrtEndSXCondFmt", */
                    T: -1,
                },
                560: {
                    /* n:"BrtBeginSXCondFmts", */
                    T: 1,
                },
                561: {
                    /* n:"BrtEndSXCondFmts", */
                    T: -1,
                },
                562: {
                    /* n:"BrtBkHim" */
                },
                564: {
                    /* n:"BrtColor" */
                },
                565: {
                    /* n:"BrtBeginIndexedColors", */
                    T: 1,
                },
                566: {
                    /* n:"BrtEndIndexedColors", */
                    T: -1,
                },
                569: {
                    /* n:"BrtBeginMRUColors", */
                    T: 1,
                },
                570: {
                    /* n:"BrtEndMRUColors", */
                    T: -1,
                },
                572: {
                    /* n:"BrtMRUColor" */
                },
                573: {
                    /* n:"BrtBeginDVals", */
                    T: 1,
                },
                574: {
                    /* n:"BrtEndDVals", */
                    T: -1,
                },
                577: {
                    /* n:"BrtSupNameStart" */
                },
                578: {
                    /* n:"BrtSupNameValueStart" */
                },
                579: {
                    /* n:"BrtSupNameValueEnd" */
                },
                580: {
                    /* n:"BrtSupNameNum" */
                },
                581: {
                    /* n:"BrtSupNameErr" */
                },
                582: {
                    /* n:"BrtSupNameSt" */
                },
                583: {
                    /* n:"BrtSupNameNil" */
                },
                584: {
                    /* n:"BrtSupNameBool" */
                },
                585: {
                    /* n:"BrtSupNameFmla" */
                },
                586: {
                    /* n:"BrtSupNameBits" */
                },
                587: {
                    /* n:"BrtSupNameEnd" */
                },
                588: {
                    /* n:"BrtEndSupBook", */
                    T: -1,
                },
                589: {
                    /* n:"BrtCellSmartTagProperty" */
                },
                590: {
                    /* n:"BrtBeginCellSmartTag", */
                    T: 1,
                },
                591: {
                    /* n:"BrtEndCellSmartTag", */
                    T: -1,
                },
                592: {
                    /* n:"BrtBeginCellSmartTags", */
                    T: 1,
                },
                593: {
                    /* n:"BrtEndCellSmartTags", */
                    T: -1,
                },
                594: {
                    /* n:"BrtBeginSmartTags", */
                    T: 1,
                },
                595: {
                    /* n:"BrtEndSmartTags", */
                    T: -1,
                },
                596: {
                    /* n:"BrtSmartTagType" */
                },
                597: {
                    /* n:"BrtBeginSmartTagTypes", */
                    T: 1,
                },
                598: {
                    /* n:"BrtEndSmartTagTypes", */
                    T: -1,
                },
                599: {
                    /* n:"BrtBeginSXFilters", */
                    T: 1,
                },
                600: {
                    /* n:"BrtEndSXFilters", */
                    T: -1,
                },
                601: {
                    /* n:"BrtBeginSXFILTER", */
                    T: 1,
                },
                602: {
                    /* n:"BrtEndSXFilter", */
                    T: -1,
                },
                603: {
                    /* n:"BrtBeginFills", */
                    T: 1,
                },
                604: {
                    /* n:"BrtEndFills", */
                    T: -1,
                },
                605: {
                    /* n:"BrtBeginCellWatches", */
                    T: 1,
                },
                606: {
                    /* n:"BrtEndCellWatches", */
                    T: -1,
                },
                607: {
                    /* n:"BrtCellWatch" */
                },
                608: {
                    /* n:"BrtBeginCRErrs", */
                    T: 1,
                },
                609: {
                    /* n:"BrtEndCRErrs", */
                    T: -1,
                },
                610: {
                    /* n:"BrtCrashRecErr" */
                },
                611: {
                    /* n:"BrtBeginFonts", */
                    T: 1,
                },
                612: {
                    /* n:"BrtEndFonts", */
                    T: -1,
                },
                613: {
                    /* n:"BrtBeginBorders", */
                    T: 1,
                },
                614: {
                    /* n:"BrtEndBorders", */
                    T: -1,
                },
                615: {
                    /* n:"BrtBeginFmts", */
                    T: 1,
                },
                616: {
                    /* n:"BrtEndFmts", */
                    T: -1,
                },
                617: {
                    /* n:"BrtBeginCellXFs", */
                    T: 1,
                },
                618: {
                    /* n:"BrtEndCellXFs", */
                    T: -1,
                },
                619: {
                    /* n:"BrtBeginStyles", */
                    T: 1,
                },
                620: {
                    /* n:"BrtEndStyles", */
                    T: -1,
                },
                625: {
                    /* n:"BrtBigName" */
                },
                626: {
                    /* n:"BrtBeginCellStyleXFs", */
                    T: 1,
                },
                627: {
                    /* n:"BrtEndCellStyleXFs", */
                    T: -1,
                },
                628: {
                    /* n:"BrtBeginComments", */
                    T: 1,
                },
                629: {
                    /* n:"BrtEndComments", */
                    T: -1,
                },
                630: {
                    /* n:"BrtBeginCommentAuthors", */
                    T: 1,
                },
                631: {
                    /* n:"BrtEndCommentAuthors", */
                    T: -1,
                },
                632: {
                    /* n:"BrtCommentAuthor", */
                    f: parse_BrtCommentAuthor,
                },
                633: {
                    /* n:"BrtBeginCommentList", */
                    T: 1,
                },
                634: {
                    /* n:"BrtEndCommentList", */
                    T: -1,
                },
                635: {
                    /* n:"BrtBeginComment", */
                    T: 1,
                    f: parse_BrtBeginComment,
                },
                636: {
                    /* n:"BrtEndComment", */
                    T: -1,
                },
                637: {
                    /* n:"BrtCommentText", */
                    f: parse_BrtCommentText,
                },
                638: {
                    /* n:"BrtBeginOleObjects", */
                    T: 1,
                },
                639: {
                    /* n:"BrtOleObject" */
                },
                640: {
                    /* n:"BrtEndOleObjects", */
                    T: -1,
                },
                641: {
                    /* n:"BrtBeginSxrules", */
                    T: 1,
                },
                642: {
                    /* n:"BrtEndSxRules", */
                    T: -1,
                },
                643: {
                    /* n:"BrtBeginActiveXControls", */
                    T: 1,
                },
                644: {
                    /* n:"BrtActiveX" */
                },
                645: {
                    /* n:"BrtEndActiveXControls", */
                    T: -1,
                },
                646: {
                    /* n:"BrtBeginPCDSDTCEMembersSortBy", */
                    T: 1,
                },
                648: {
                    /* n:"BrtBeginCellIgnoreECs", */
                    T: 1,
                },
                649: {
                    /* n:"BrtCellIgnoreEC" */
                },
                650: {
                    /* n:"BrtEndCellIgnoreECs", */
                    T: -1,
                },
                651: {
                    /* n:"BrtCsProp", */
                    f: parse_BrtCsProp,
                },
                652: {
                    /* n:"BrtCsPageSetup" */
                },
                653: {
                    /* n:"BrtBeginUserCsViews", */
                    T: 1,
                },
                654: {
                    /* n:"BrtEndUserCsViews", */
                    T: -1,
                },
                655: {
                    /* n:"BrtBeginUserCsView", */
                    T: 1,
                },
                656: {
                    /* n:"BrtEndUserCsView", */
                    T: -1,
                },
                657: {
                    /* n:"BrtBeginPcdSFCIEntries", */
                    T: 1,
                },
                658: {
                    /* n:"BrtEndPCDSFCIEntries", */
                    T: -1,
                },
                659: {
                    /* n:"BrtPCDSFCIEntry" */
                },
                660: {
                    /* n:"BrtBeginListParts", */
                    T: 1,
                },
                661: {
                    /* n:"BrtListPart" */
                },
                662: {
                    /* n:"BrtEndListParts", */
                    T: -1,
                },
                663: {
                    /* n:"BrtSheetCalcProp" */
                },
                664: {
                    /* n:"BrtBeginFnGroup", */
                    T: 1,
                },
                665: {
                    /* n:"BrtFnGroup" */
                },
                666: {
                    /* n:"BrtEndFnGroup", */
                    T: -1,
                },
                667: {
                    /* n:"BrtSupAddin" */
                },
                668: {
                    /* n:"BrtSXTDMPOrder" */
                },
                669: {
                    /* n:"BrtCsProtection" */
                },
                671: {
                    /* n:"BrtBeginWsSortMap", */
                    T: 1,
                },
                672: {
                    /* n:"BrtEndWsSortMap", */
                    T: -1,
                },
                673: {
                    /* n:"BrtBeginRRSort", */
                    T: 1,
                },
                674: {
                    /* n:"BrtEndRRSort", */
                    T: -1,
                },
                675: {
                    /* n:"BrtRRSortItem" */
                },
                676: {
                    /* n:"BrtFileSharingIso" */
                },
                677: {
                    /* n:"BrtBookProtectionIso" */
                },
                678: {
                    /* n:"BrtSheetProtectionIso" */
                },
                679: {
                    /* n:"BrtCsProtectionIso" */
                },
                680: {
                    /* n:"BrtRangeProtectionIso" */
                },
                681: {
                    /* n:"BrtDValList" */
                },
                1024: {
                    /* n:"BrtRwDescent" */
                },
                1025: {
                    /* n:"BrtKnownFonts" */
                },
                1026: {
                    /* n:"BrtBeginSXTupleSet", */
                    T: 1,
                },
                1027: {
                    /* n:"BrtEndSXTupleSet", */
                    T: -1,
                },
                1028: {
                    /* n:"BrtBeginSXTupleSetHeader", */
                    T: 1,
                },
                1029: {
                    /* n:"BrtEndSXTupleSetHeader", */
                    T: -1,
                },
                1030: {
                    /* n:"BrtSXTupleSetHeaderItem" */
                },
                1031: {
                    /* n:"BrtBeginSXTupleSetData", */
                    T: 1,
                },
                1032: {
                    /* n:"BrtEndSXTupleSetData", */
                    T: -1,
                },
                1033: {
                    /* n:"BrtBeginSXTupleSetRow", */
                    T: 1,
                },
                1034: {
                    /* n:"BrtEndSXTupleSetRow", */
                    T: -1,
                },
                1035: {
                    /* n:"BrtSXTupleSetRowItem" */
                },
                1036: {
                    /* n:"BrtNameExt" */
                },
                1037: {
                    /* n:"BrtPCDH14" */
                },
                1038: {
                    /* n:"BrtBeginPCDCalcMem14", */
                    T: 1,
                },
                1039: {
                    /* n:"BrtEndPCDCalcMem14", */
                    T: -1,
                },
                1040: {
                    /* n:"BrtSXTH14" */
                },
                1041: {
                    /* n:"BrtBeginSparklineGroup", */
                    T: 1,
                },
                1042: {
                    /* n:"BrtEndSparklineGroup", */
                    T: -1,
                },
                1043: {
                    /* n:"BrtSparkline" */
                },
                1044: {
                    /* n:"BrtSXDI14" */
                },
                1045: {
                    /* n:"BrtWsFmtInfoEx14" */
                },
                1046: {
                    /* n:"BrtBeginConditionalFormatting14", */
                    T: 1,
                },
                1047: {
                    /* n:"BrtEndConditionalFormatting14", */
                    T: -1,
                },
                1048: {
                    /* n:"BrtBeginCFRule14", */
                    T: 1,
                },
                1049: {
                    /* n:"BrtEndCFRule14", */
                    T: -1,
                },
                1050: {
                    /* n:"BrtCFVO14" */
                },
                1051: {
                    /* n:"BrtBeginDatabar14", */
                    T: 1,
                },
                1052: {
                    /* n:"BrtBeginIconSet14", */
                    T: 1,
                },
                1053: {
                    /* n:"BrtDVal14", */
                    f: parse_BrtDVal14,
                },
                1054: {
                    /* n:"BrtBeginDVals14", */
                    T: 1,
                },
                1055: {
                    /* n:"BrtColor14" */
                },
                1056: {
                    /* n:"BrtBeginSparklines", */
                    T: 1,
                },
                1057: {
                    /* n:"BrtEndSparklines", */
                    T: -1,
                },
                1058: {
                    /* n:"BrtBeginSparklineGroups", */
                    T: 1,
                },
                1059: {
                    /* n:"BrtEndSparklineGroups", */
                    T: -1,
                },
                1061: {
                    /* n:"BrtSXVD14" */
                },
                1062: {
                    /* n:"BrtBeginSXView14", */
                    T: 1,
                },
                1063: {
                    /* n:"BrtEndSXView14", */
                    T: -1,
                },
                1064: {
                    /* n:"BrtBeginSXView16", */
                    T: 1,
                },
                1065: {
                    /* n:"BrtEndSXView16", */
                    T: -1,
                },
                1066: {
                    /* n:"BrtBeginPCD14", */
                    T: 1,
                },
                1067: {
                    /* n:"BrtEndPCD14", */
                    T: -1,
                },
                1068: {
                    /* n:"BrtBeginExtConn14", */
                    T: 1,
                },
                1069: {
                    /* n:"BrtEndExtConn14", */
                    T: -1,
                },
                1070: {
                    /* n:"BrtBeginSlicerCacheIDs", */
                    T: 1,
                },
                1071: {
                    /* n:"BrtEndSlicerCacheIDs", */
                    T: -1,
                },
                1072: {
                    /* n:"BrtBeginSlicerCacheID", */
                    T: 1,
                },
                1073: {
                    /* n:"BrtEndSlicerCacheID", */
                    T: -1,
                },
                1075: {
                    /* n:"BrtBeginSlicerCache", */
                    T: 1,
                },
                1076: {
                    /* n:"BrtEndSlicerCache", */
                    T: -1,
                },
                1077: {
                    /* n:"BrtBeginSlicerCacheDef", */
                    T: 1,
                },
                1078: {
                    /* n:"BrtEndSlicerCacheDef", */
                    T: -1,
                },
                1079: {
                    /* n:"BrtBeginSlicersEx", */
                    T: 1,
                },
                1080: {
                    /* n:"BrtEndSlicersEx", */
                    T: -1,
                },
                1081: {
                    /* n:"BrtBeginSlicerEx", */
                    T: 1,
                },
                1082: {
                    /* n:"BrtEndSlicerEx", */
                    T: -1,
                },
                1083: {
                    /* n:"BrtBeginSlicer", */
                    T: 1,
                },
                1084: {
                    /* n:"BrtEndSlicer", */
                    T: -1,
                },
                1085: {
                    /* n:"BrtSlicerCachePivotTables" */
                },
                1086: {
                    /* n:"BrtBeginSlicerCacheOlapImpl", */
                    T: 1,
                },
                1087: {
                    /* n:"BrtEndSlicerCacheOlapImpl", */
                    T: -1,
                },
                1088: {
                    /* n:"BrtBeginSlicerCacheLevelsData", */
                    T: 1,
                },
                1089: {
                    /* n:"BrtEndSlicerCacheLevelsData", */
                    T: -1,
                },
                1090: {
                    /* n:"BrtBeginSlicerCacheLevelData", */
                    T: 1,
                },
                1091: {
                    /* n:"BrtEndSlicerCacheLevelData", */
                    T: -1,
                },
                1092: {
                    /* n:"BrtBeginSlicerCacheSiRanges", */
                    T: 1,
                },
                1093: {
                    /* n:"BrtEndSlicerCacheSiRanges", */
                    T: -1,
                },
                1094: {
                    /* n:"BrtBeginSlicerCacheSiRange", */
                    T: 1,
                },
                1095: {
                    /* n:"BrtEndSlicerCacheSiRange", */
                    T: -1,
                },
                1096: {
                    /* n:"BrtSlicerCacheOlapItem" */
                },
                1097: {
                    /* n:"BrtBeginSlicerCacheSelections", */
                    T: 1,
                },
                1098: {
                    /* n:"BrtSlicerCacheSelection" */
                },
                1099: {
                    /* n:"BrtEndSlicerCacheSelections", */
                    T: -1,
                },
                1100: {
                    /* n:"BrtBeginSlicerCacheNative", */
                    T: 1,
                },
                1101: {
                    /* n:"BrtEndSlicerCacheNative", */
                    T: -1,
                },
                1102: {
                    /* n:"BrtSlicerCacheNativeItem" */
                },
                1103: {
                    /* n:"BrtRangeProtection14" */
                },
                1104: {
                    /* n:"BrtRangeProtectionIso14" */
                },
                1105: {
                    /* n:"BrtCellIgnoreEC14" */
                },
                1111: {
                    /* n:"BrtList14" */
                },
                1112: {
                    /* n:"BrtCFIcon" */
                },
                1113: {
                    /* n:"BrtBeginSlicerCachesPivotCacheIDs", */
                    T: 1,
                },
                1114: {
                    /* n:"BrtEndSlicerCachesPivotCacheIDs", */
                    T: -1,
                },
                1115: {
                    /* n:"BrtBeginSlicers", */
                    T: 1,
                },
                1116: {
                    /* n:"BrtEndSlicers", */
                    T: -1,
                },
                1117: {
                    /* n:"BrtWbProp14" */
                },
                1118: {
                    /* n:"BrtBeginSXEdit", */
                    T: 1,
                },
                1119: {
                    /* n:"BrtEndSXEdit", */
                    T: -1,
                },
                1120: {
                    /* n:"BrtBeginSXEdits", */
                    T: 1,
                },
                1121: {
                    /* n:"BrtEndSXEdits", */
                    T: -1,
                },
                1122: {
                    /* n:"BrtBeginSXChange", */
                    T: 1,
                },
                1123: {
                    /* n:"BrtEndSXChange", */
                    T: -1,
                },
                1124: {
                    /* n:"BrtBeginSXChanges", */
                    T: 1,
                },
                1125: {
                    /* n:"BrtEndSXChanges", */
                    T: -1,
                },
                1126: {
                    /* n:"BrtSXTupleItems" */
                },
                1128: {
                    /* n:"BrtBeginSlicerStyle", */
                    T: 1,
                },
                1129: {
                    /* n:"BrtEndSlicerStyle", */
                    T: -1,
                },
                1130: {
                    /* n:"BrtSlicerStyleElement" */
                },
                1131: {
                    /* n:"BrtBeginStyleSheetExt14", */
                    T: 1,
                },
                1132: {
                    /* n:"BrtEndStyleSheetExt14", */
                    T: -1,
                },
                1133: {
                    /* n:"BrtBeginSlicerCachesPivotCacheID", */
                    T: 1,
                },
                1134: {
                    /* n:"BrtEndSlicerCachesPivotCacheID", */
                    T: -1,
                },
                1135: {
                    /* n:"BrtBeginConditionalFormattings", */
                    T: 1,
                },
                1136: {
                    /* n:"BrtEndConditionalFormattings", */
                    T: -1,
                },
                1137: {
                    /* n:"BrtBeginPCDCalcMemExt", */
                    T: 1,
                },
                1138: {
                    /* n:"BrtEndPCDCalcMemExt", */
                    T: -1,
                },
                1139: {
                    /* n:"BrtBeginPCDCalcMemsExt", */
                    T: 1,
                },
                1140: {
                    /* n:"BrtEndPCDCalcMemsExt", */
                    T: -1,
                },
                1141: {
                    /* n:"BrtPCDField14" */
                },
                1142: {
                    /* n:"BrtBeginSlicerStyles", */
                    T: 1,
                },
                1143: {
                    /* n:"BrtEndSlicerStyles", */
                    T: -1,
                },
                1144: {
                    /* n:"BrtBeginSlicerStyleElements", */
                    T: 1,
                },
                1145: {
                    /* n:"BrtEndSlicerStyleElements", */
                    T: -1,
                },
                1146: {
                    /* n:"BrtCFRuleExt" */
                },
                1147: {
                    /* n:"BrtBeginSXCondFmt14", */
                    T: 1,
                },
                1148: {
                    /* n:"BrtEndSXCondFmt14", */
                    T: -1,
                },
                1149: {
                    /* n:"BrtBeginSXCondFmts14", */
                    T: 1,
                },
                1150: {
                    /* n:"BrtEndSXCondFmts14", */
                    T: -1,
                },
                1152: {
                    /* n:"BrtBeginSortCond14", */
                    T: 1,
                },
                1153: {
                    /* n:"BrtEndSortCond14", */
                    T: -1,
                },
                1154: {
                    /* n:"BrtEndDVals14", */
                    T: -1,
                },
                1155: {
                    /* n:"BrtEndIconSet14", */
                    T: -1,
                },
                1156: {
                    /* n:"BrtEndDatabar14", */
                    T: -1,
                },
                1157: {
                    /* n:"BrtBeginColorScale14", */
                    T: 1,
                },
                1158: {
                    /* n:"BrtEndColorScale14", */
                    T: -1,
                },
                1159: {
                    /* n:"BrtBeginSxrules14", */
                    T: 1,
                },
                1160: {
                    /* n:"BrtEndSxrules14", */
                    T: -1,
                },
                1161: {
                    /* n:"BrtBeginPRule14", */
                    T: 1,
                },
                1162: {
                    /* n:"BrtEndPRule14", */
                    T: -1,
                },
                1163: {
                    /* n:"BrtBeginPRFilters14", */
                    T: 1,
                },
                1164: {
                    /* n:"BrtEndPRFilters14", */
                    T: -1,
                },
                1165: {
                    /* n:"BrtBeginPRFilter14", */
                    T: 1,
                },
                1166: {
                    /* n:"BrtEndPRFilter14", */
                    T: -1,
                },
                1167: {
                    /* n:"BrtBeginPRFItem14", */
                    T: 1,
                },
                1168: {
                    /* n:"BrtEndPRFItem14", */
                    T: -1,
                },
                1169: {
                    /* n:"BrtBeginCellIgnoreECs14", */
                    T: 1,
                },
                1170: {
                    /* n:"BrtEndCellIgnoreECs14", */
                    T: -1,
                },
                1171: {
                    /* n:"BrtDxf14" */
                },
                1172: {
                    /* n:"BrtBeginDxF14s", */
                    T: 1,
                },
                1173: {
                    /* n:"BrtEndDxf14s", */
                    T: -1,
                },
                1177: {
                    /* n:"BrtFilter14" */
                },
                1178: {
                    /* n:"BrtBeginCustomFilters14", */
                    T: 1,
                },
                1180: {
                    /* n:"BrtCustomFilter14" */
                },
                1181: {
                    /* n:"BrtIconFilter14" */
                },
                1182: {
                    /* n:"BrtPivotCacheConnectionName" */
                },
                2048: {
                    /* n:"BrtBeginDecoupledPivotCacheIDs", */
                    T: 1,
                },
                2049: {
                    /* n:"BrtEndDecoupledPivotCacheIDs", */
                    T: -1,
                },
                2050: {
                    /* n:"BrtDecoupledPivotCacheID" */
                },
                2051: {
                    /* n:"BrtBeginPivotTableRefs", */
                    T: 1,
                },
                2052: {
                    /* n:"BrtEndPivotTableRefs", */
                    T: -1,
                },
                2053: {
                    /* n:"BrtPivotTableRef" */
                },
                2054: {
                    /* n:"BrtSlicerCacheBookPivotTables" */
                },
                2055: {
                    /* n:"BrtBeginSxvcells", */
                    T: 1,
                },
                2056: {
                    /* n:"BrtEndSxvcells", */
                    T: -1,
                },
                2057: {
                    /* n:"BrtBeginSxRow", */
                    T: 1,
                },
                2058: {
                    /* n:"BrtEndSxRow", */
                    T: -1,
                },
                2060: {
                    /* n:"BrtPcdCalcMem15" */
                },
                2067: {
                    /* n:"BrtQsi15" */
                },
                2068: {
                    /* n:"BrtBeginWebExtensions", */
                    T: 1,
                },
                2069: {
                    /* n:"BrtEndWebExtensions", */
                    T: -1,
                },
                2070: {
                    /* n:"BrtWebExtension" */
                },
                2071: {
                    /* n:"BrtAbsPath15" */
                },
                2072: {
                    /* n:"BrtBeginPivotTableUISettings", */
                    T: 1,
                },
                2073: {
                    /* n:"BrtEndPivotTableUISettings", */
                    T: -1,
                },
                2075: {
                    /* n:"BrtTableSlicerCacheIDs" */
                },
                2076: {
                    /* n:"BrtTableSlicerCacheID" */
                },
                2077: {
                    /* n:"BrtBeginTableSlicerCache", */
                    T: 1,
                },
                2078: {
                    /* n:"BrtEndTableSlicerCache", */
                    T: -1,
                },
                2079: {
                    /* n:"BrtSxFilter15" */
                },
                2080: {
                    /* n:"BrtBeginTimelineCachePivotCacheIDs", */
                    T: 1,
                },
                2081: {
                    /* n:"BrtEndTimelineCachePivotCacheIDs", */
                    T: -1,
                },
                2082: {
                    /* n:"BrtTimelineCachePivotCacheID" */
                },
                2083: {
                    /* n:"BrtBeginTimelineCacheIDs", */
                    T: 1,
                },
                2084: {
                    /* n:"BrtEndTimelineCacheIDs", */
                    T: -1,
                },
                2085: {
                    /* n:"BrtBeginTimelineCacheID", */
                    T: 1,
                },
                2086: {
                    /* n:"BrtEndTimelineCacheID", */
                    T: -1,
                },
                2087: {
                    /* n:"BrtBeginTimelinesEx", */
                    T: 1,
                },
                2088: {
                    /* n:"BrtEndTimelinesEx", */
                    T: -1,
                },
                2089: {
                    /* n:"BrtBeginTimelineEx", */
                    T: 1,
                },
                2090: {
                    /* n:"BrtEndTimelineEx", */
                    T: -1,
                },
                2091: {
                    /* n:"BrtWorkBookPr15" */
                },
                2092: {
                    /* n:"BrtPCDH15" */
                },
                2093: {
                    /* n:"BrtBeginTimelineStyle", */
                    T: 1,
                },
                2094: {
                    /* n:"BrtEndTimelineStyle", */
                    T: -1,
                },
                2095: {
                    /* n:"BrtTimelineStyleElement" */
                },
                2096: {
                    /* n:"BrtBeginTimelineStylesheetExt15", */
                    T: 1,
                },
                2097: {
                    /* n:"BrtEndTimelineStylesheetExt15", */
                    T: -1,
                },
                2098: {
                    /* n:"BrtBeginTimelineStyles", */
                    T: 1,
                },
                2099: {
                    /* n:"BrtEndTimelineStyles", */
                    T: -1,
                },
                2100: {
                    /* n:"BrtBeginTimelineStyleElements", */
                    T: 1,
                },
                2101: {
                    /* n:"BrtEndTimelineStyleElements", */
                    T: -1,
                },
                2102: {
                    /* n:"BrtDxf15" */
                },
                2103: {
                    /* n:"BrtBeginDxfs15", */
                    T: 1,
                },
                2104: {
                    /* n:"BrtEndDxfs15", */
                    T: -1,
                },
                2105: {
                    /* n:"BrtSlicerCacheHideItemsWithNoData" */
                },
                2106: {
                    /* n:"BrtBeginItemUniqueNames", */
                    T: 1,
                },
                2107: {
                    /* n:"BrtEndItemUniqueNames", */
                    T: -1,
                },
                2108: {
                    /* n:"BrtItemUniqueName" */
                },
                2109: {
                    /* n:"BrtBeginExtConn15", */
                    T: 1,
                },
                2110: {
                    /* n:"BrtEndExtConn15", */
                    T: -1,
                },
                2111: {
                    /* n:"BrtBeginOledbPr15", */
                    T: 1,
                },
                2112: {
                    /* n:"BrtEndOledbPr15", */
                    T: -1,
                },
                2113: {
                    /* n:"BrtBeginDataFeedPr15", */
                    T: 1,
                },
                2114: {
                    /* n:"BrtEndDataFeedPr15", */
                    T: -1,
                },
                2115: {
                    /* n:"BrtTextPr15" */
                },
                2116: {
                    /* n:"BrtRangePr15" */
                },
                2117: {
                    /* n:"BrtDbCommand15" */
                },
                2118: {
                    /* n:"BrtBeginDbTables15", */
                    T: 1,
                },
                2119: {
                    /* n:"BrtEndDbTables15", */
                    T: -1,
                },
                2120: {
                    /* n:"BrtDbTable15" */
                },
                2121: {
                    /* n:"BrtBeginDataModel", */
                    T: 1,
                },
                2122: {
                    /* n:"BrtEndDataModel", */
                    T: -1,
                },
                2123: {
                    /* n:"BrtBeginModelTables", */
                    T: 1,
                },
                2124: {
                    /* n:"BrtEndModelTables", */
                    T: -1,
                },
                2125: {
                    /* n:"BrtModelTable" */
                },
                2126: {
                    /* n:"BrtBeginModelRelationships", */
                    T: 1,
                },
                2127: {
                    /* n:"BrtEndModelRelationships", */
                    T: -1,
                },
                2128: {
                    /* n:"BrtModelRelationship" */
                },
                2129: {
                    /* n:"BrtBeginECTxtWiz15", */
                    T: 1,
                },
                2130: {
                    /* n:"BrtEndECTxtWiz15", */
                    T: -1,
                },
                2131: {
                    /* n:"BrtBeginECTWFldInfoLst15", */
                    T: 1,
                },
                2132: {
                    /* n:"BrtEndECTWFldInfoLst15", */
                    T: -1,
                },
                2133: {
                    /* n:"BrtBeginECTWFldInfo15", */
                    T: 1,
                },
                2134: {
                    /* n:"BrtFieldListActiveItem" */
                },
                2135: {
                    /* n:"BrtPivotCacheIdVersion" */
                },
                2136: {
                    /* n:"BrtSXDI15" */
                },
                2137: {
                    /* n:"BrtBeginModelTimeGroupings", */
                    T: 1,
                },
                2138: {
                    /* n:"BrtEndModelTimeGroupings", */
                    T: -1,
                },
                2139: {
                    /* n:"BrtBeginModelTimeGrouping", */
                    T: 1,
                },
                2140: {
                    /* n:"BrtEndModelTimeGrouping", */
                    T: -1,
                },
                2141: {
                    /* n:"BrtModelTimeGroupingCalcCol" */
                },
                3072: {
                    /* n:"BrtUid" */
                },
                3073: {
                    /* n:"BrtRevisionPtr" */
                },
                4096: {
                    /* n:"BrtBeginDynamicArrayPr", */
                    T: 1,
                },
                4097: {
                    /* n:"BrtEndDynamicArrayPr", */
                    T: -1,
                },
                5002: {
                    /* n:"BrtBeginRichValueBlock", */
                    T: 1,
                },
                5003: {
                    /* n:"BrtEndRichValueBlock", */
                    T: -1,
                },
                5081: {
                    /* n:"BrtBeginRichFilters", */
                    T: 1,
                },
                5082: {
                    /* n:"BrtEndRichFilters", */
                    T: -1,
                },
                5083: {
                    /* n:"BrtRichFilter" */
                },
                5084: {
                    /* n:"BrtBeginRichFilterColumn", */
                    T: 1,
                },
                5085: {
                    /* n:"BrtEndRichFilterColumn", */
                    T: -1,
                },
                5086: {
                    /* n:"BrtBeginCustomRichFilters", */
                    T: 1,
                },
                5087: {
                    /* n:"BrtEndCustomRichFilters", */
                    T: -1,
                },
                5088: {
                    /* n:"BrtCustomRichFilter" */
                },
                5089: {
                    /* n:"BrtTop10RichFilter" */
                },
                5090: {
                    /* n:"BrtDynamicRichFilter" */
                },
                5092: {
                    /* n:"BrtBeginRichSortCondition", */
                    T: 1,
                },
                5093: {
                    /* n:"BrtEndRichSortCondition", */
                    T: -1,
                },
                5094: {
                    /* n:"BrtRichFilterDateGroupItem" */
                },
                5095: {
                    /* n:"BrtBeginCalcFeatures", */
                    T: 1,
                },
                5096: {
                    /* n:"BrtEndCalcFeatures", */
                    T: -1,
                },
                5097: {
                    /* n:"BrtCalcFeature" */
                },
                5099: {
                    /* n:"BrtExternalLinksPr" */
                },
                65535: { n: '' },
            };
            var XLSRecordEnum = {
                /* [MS-XLS] 2.3 Record Enumeration 2021-08-17 */
                6: {
                    /* n:"Formula", */
                    f: parse_Formula,
                },
                10: {
                    /* n:"EOF", */
                    f: parsenoop2,
                },
                12: {
                    /* n:"CalcCount", */
                    f: parseuint16,
                },
                //
                13: {
                    /* n:"CalcMode", */
                    f: parseuint16,
                },
                //
                14: {
                    /* n:"CalcPrecision", */
                    f: parsebool,
                },
                //
                15: {
                    /* n:"CalcRefMode", */
                    f: parsebool,
                },
                //
                16: {
                    /* n:"CalcDelta", */
                    f: parse_Xnum,
                },
                //
                17: {
                    /* n:"CalcIter", */
                    f: parsebool,
                },
                //
                18: {
                    /* n:"Protect", */
                    f: parsebool,
                },
                19: {
                    /* n:"Password", */
                    f: parseuint16,
                },
                20: {
                    /* n:"Header", */
                    f: parse_XLHeaderFooter,
                },
                21: {
                    /* n:"Footer", */
                    f: parse_XLHeaderFooter,
                },
                23: {
                    /* n:"ExternSheet", */
                    f: parse_ExternSheet,
                },
                24: {
                    /* n:"Lbl", */
                    f: parse_Lbl,
                },
                25: {
                    /* n:"WinProtect", */
                    f: parsebool,
                },
                26: {
                    /* n:"VerticalPageBreaks", */
                },
                27: {
                    /* n:"HorizontalPageBreaks", */
                },
                28: {
                    /* n:"Note", */
                    f: parse_Note,
                },
                29: {
                    /* n:"Selection", */
                },
                34: {
                    /* n:"Date1904", */
                    f: parsebool,
                },
                35: {
                    /* n:"ExternName", */
                    f: parse_ExternName,
                },
                38: {
                    /* n:"LeftMargin", */
                    f: parse_Xnum,
                },
                // *
                39: {
                    /* n:"RightMargin", */
                    f: parse_Xnum,
                },
                // *
                40: {
                    /* n:"TopMargin", */
                    f: parse_Xnum,
                },
                // *
                41: {
                    /* n:"BottomMargin", */
                    f: parse_Xnum,
                },
                // *
                42: {
                    /* n:"PrintRowCol", */
                    f: parsebool,
                },
                43: {
                    /* n:"PrintGrid", */
                    f: parsebool,
                },
                47: {
                    /* n:"FilePass", */
                    f: parse_FilePass,
                },
                49: {
                    /* n:"Font", */
                    f: parse_Font,
                },
                51: {
                    /* n:"PrintSize", */
                    f: parseuint16,
                },
                60: {
                    /* n:"Continue", */
                },
                61: {
                    /* n:"Window1", */
                    f: parse_Window1,
                },
                64: {
                    /* n:"Backup", */
                    f: parsebool,
                },
                65: {
                    /* n:"Pane", */
                    f: parse_Pane,
                },
                66: {
                    /* n:"CodePage", */
                    f: parseuint16,
                },
                77: {
                    /* n:"Pls", */
                },
                80: {
                    /* n:"DCon", */
                },
                81: {
                    /* n:"DConRef", */
                },
                82: {
                    /* n:"DConName", */
                },
                85: {
                    /* n:"DefColWidth", */
                    f: parseuint16,
                },
                89: {
                    /* n:"XCT", */
                },
                90: {
                    /* n:"CRN", */
                },
                91: {
                    /* n:"FileSharing", */
                },
                92: {
                    /* n:"WriteAccess", */
                    f: parse_WriteAccess,
                },
                93: {
                    /* n:"Obj", */
                    f: parse_Obj,
                },
                94: {
                    /* n:"Uncalced", */
                },
                95: {
                    /* n:"CalcSaveRecalc", */
                    f: parsebool,
                },
                //
                96: {
                    /* n:"Template", */
                },
                97: {
                    /* n:"Intl", */
                },
                99: {
                    /* n:"ObjProtect", */
                    f: parsebool,
                },
                125: {
                    /* n:"ColInfo", */
                    f: parse_ColInfo,
                },
                128: {
                    /* n:"Guts", */
                    f: parse_Guts,
                },
                129: {
                    /* n:"WsBool", */
                    f: parse_WsBool,
                },
                130: {
                    /* n:"GridSet", */
                    f: parseuint16,
                },
                131: {
                    /* n:"HCenter", */
                    f: parsebool,
                },
                132: {
                    /* n:"VCenter", */
                    f: parsebool,
                },
                133: {
                    /* n:"BoundSheet8", */
                    f: parse_BoundSheet8,
                },
                134: {
                    /* n:"WriteProtect", */
                },
                140: {
                    /* n:"Country", */
                    f: parse_Country,
                },
                141: {
                    /* n:"HideObj", */
                    f: parseuint16,
                },
                144: {
                    /* n:"Sort", */
                },
                146: {
                    /* n:"Palette", */
                    f: parse_Palette,
                },
                151: {
                    /* n:"Sync", */
                },
                152: {
                    /* n:"LPr", */
                },
                153: {
                    /* n:"DxGCol", */
                },
                154: {
                    /* n:"FnGroupName", */
                },
                155: {
                    /* n:"FilterMode", */
                },
                156: {
                    /* n:"BuiltInFnGroupCount", */
                    f: parseuint16,
                },
                157: {
                    /* n:"AutoFilterInfo", */
                },
                158: {
                    /* n:"AutoFilter", */
                },
                160: {
                    /* n:"Scl", */
                    f: parse_Scl,
                },
                161: {
                    /* n:"Setup", */
                    f: parse_Setup,
                },
                174: {
                    /* n:"ScenMan", */
                },
                175: {
                    /* n:"SCENARIO", */
                },
                176: {
                    /* n:"SxView", */
                },
                177: {
                    /* n:"Sxvd", */
                },
                178: {
                    /* n:"SXVI", */
                },
                180: {
                    /* n:"SxIvd", */
                },
                181: {
                    /* n:"SXLI", */
                },
                182: {
                    /* n:"SXPI", */
                },
                184: {
                    /* n:"DocRoute", */
                },
                185: {
                    /* n:"RecipName", */
                },
                189: {
                    /* n:"MulRk", */
                    f: parse_MulRk,
                },
                190: {
                    /* n:"MulBlank", */
                    f: parse_MulBlank,
                },
                193: {
                    /* n:"Mms", */
                    f: parsenoop2,
                },
                197: {
                    /* n:"SXDI", */
                },
                198: {
                    /* n:"SXDB", */
                },
                199: {
                    /* n:"SXFDB", */
                },
                200: {
                    /* n:"SXDBB", */
                },
                201: {
                    /* n:"SXNum", */
                },
                202: {
                    /* n:"SxBool", */
                    f: parsebool,
                },
                203: {
                    /* n:"SxErr", */
                },
                204: {
                    /* n:"SXInt", */
                },
                205: {
                    /* n:"SXString", */
                },
                206: {
                    /* n:"SXDtr", */
                },
                207: {
                    /* n:"SxNil", */
                },
                208: {
                    /* n:"SXTbl", */
                },
                209: {
                    /* n:"SXTBRGIITM", */
                },
                210: {
                    /* n:"SxTbpg", */
                },
                211: {
                    /* n:"ObProj", */
                },
                213: {
                    /* n:"SXStreamID", */
                },
                215: {
                    /* n:"DBCell", */
                },
                216: {
                    /* n:"SXRng", */
                },
                217: {
                    /* n:"SxIsxoper", */
                },
                218: {
                    /* n:"BookBool", */
                    f: parseuint16,
                },
                220: {
                    /* n:"DbOrParamQry", */
                },
                221: {
                    /* n:"ScenarioProtect", */
                    f: parsebool,
                },
                222: {
                    /* n:"OleObjectSize", */
                },
                224: {
                    /* n:"XF", */
                    f: parse_XF,
                },
                225: {
                    /* n:"InterfaceHdr", */
                    f: parse_InterfaceHdr,
                },
                226: {
                    /* n:"InterfaceEnd", */
                    f: parsenoop2,
                },
                227: {
                    /* n:"SXVS", */
                },
                229: {
                    /* n:"MergeCells", */
                    f: parse_MergeCells,
                },
                233: {
                    /* n:"BkHim", */
                },
                235: {
                    /* n:"MsoDrawingGroup", */
                },
                236: {
                    /* n:"MsoDrawing", */
                },
                237: {
                    /* n:"MsoDrawingSelection", */
                },
                239: {
                    /* n:"PhoneticInfo", */
                },
                240: {
                    /* n:"SxRule", */
                },
                241: {
                    /* n:"SXEx", */
                },
                242: {
                    /* n:"SxFilt", */
                },
                244: {
                    /* n:"SxDXF", */
                },
                245: {
                    /* n:"SxItm", */
                },
                246: {
                    /* n:"SxName", */
                },
                247: {
                    /* n:"SxSelect", */
                },
                248: {
                    /* n:"SXPair", */
                },
                249: {
                    /* n:"SxFmla", */
                },
                251: {
                    /* n:"SxFormat", */
                },
                252: {
                    /* n:"SST", */
                    f: parse_SST,
                },
                253: {
                    /* n:"LabelSst", */
                    f: parse_LabelSst,
                },
                255: {
                    /* n:"ExtSST", */
                    f: parse_ExtSST,
                },
                256: {
                    /* n:"SXVDEx", */
                },
                259: {
                    /* n:"SXFormula", */
                },
                290: {
                    /* n:"SXDBEx", */
                },
                311: {
                    /* n:"RRDInsDel", */
                },
                312: {
                    /* n:"RRDHead", */
                },
                315: {
                    /* n:"RRDChgCell", */
                },
                317: {
                    /* n:"RRTabId", */
                    f: parseuint16a,
                },
                318: {
                    /* n:"RRDRenSheet", */
                },
                319: {
                    /* n:"RRSort", */
                },
                320: {
                    /* n:"RRDMove", */
                },
                330: {
                    /* n:"RRFormat", */
                },
                331: {
                    /* n:"RRAutoFmt", */
                },
                333: {
                    /* n:"RRInsertSh", */
                },
                334: {
                    /* n:"RRDMoveBegin", */
                },
                335: {
                    /* n:"RRDMoveEnd", */
                },
                336: {
                    /* n:"RRDInsDelBegin", */
                },
                337: {
                    /* n:"RRDInsDelEnd", */
                },
                338: {
                    /* n:"RRDConflict", */
                },
                339: {
                    /* n:"RRDDefName", */
                },
                340: {
                    /* n:"RRDRstEtxp", */
                },
                351: {
                    /* n:"LRng", */
                },
                352: {
                    /* n:"UsesELFs", */
                    f: parsebool,
                },
                353: {
                    /* n:"DSF", */
                    f: parsenoop2,
                },
                401: {
                    /* n:"CUsr", */
                },
                402: {
                    /* n:"CbUsr", */
                },
                403: {
                    /* n:"UsrInfo", */
                },
                404: {
                    /* n:"UsrExcl", */
                },
                405: {
                    /* n:"FileLock", */
                },
                406: {
                    /* n:"RRDInfo", */
                },
                407: {
                    /* n:"BCUsrs", */
                },
                408: {
                    /* n:"UsrChk", */
                },
                425: {
                    /* n:"UserBView", */
                },
                426: {
                    /* n:"UserSViewBegin", */
                },
                427: {
                    /* n:"UserSViewEnd", */
                },
                428: {
                    /* n:"RRDUserView", */
                },
                429: {
                    /* n:"Qsi", */
                },
                430: {
                    /* n:"SupBook", */
                    f: parse_SupBook,
                },
                431: {
                    /* n:"Prot4Rev", */
                    f: parsebool,
                },
                432: {
                    /* n:"CondFmt", */
                },
                433: {
                    /* n:"CF", */
                },
                434: {
                    /* n:"DVal", */
                },
                437: {
                    /* n:"DConBin", */
                },
                438: {
                    /* n:"TxO", */
                    f: parse_TxO,
                },
                439: {
                    /* n:"RefreshAll", */
                    f: parsebool,
                },
                //
                440: {
                    /* n:"HLink", */
                    f: parse_HLink,
                },
                441: {
                    /* n:"Lel", */
                },
                442: {
                    /* n:"CodeName", */
                    f: parse_XLUnicodeString,
                },
                443: {
                    /* n:"SXFDBType", */
                },
                444: {
                    /* n:"Prot4RevPass", */
                    f: parseuint16,
                },
                445: {
                    /* n:"ObNoMacros", */
                },
                446: {
                    /* n:"Dv", */
                },
                448: {
                    /* n:"Excel9File", */
                    f: parsenoop2,
                },
                449: {
                    /* n:"RecalcId", */
                    f: parse_RecalcId,
                    r: 2,
                },
                450: {
                    /* n:"EntExU2", */
                    f: parsenoop2,
                },
                512: {
                    /* n:"Dimensions", */
                    f: parse_Dimensions,
                },
                513: {
                    /* n:"Blank", */
                    f: parse_Blank,
                },
                515: {
                    /* n:"Number", */
                    f: parse_Number,
                },
                516: {
                    /* n:"Label", */
                    f: parse_Label,
                },
                517: {
                    /* n:"BoolErr", */
                    f: parse_BoolErr,
                },
                519: {
                    /* n:"String", */
                    f: parse_String,
                },
                520: {
                    /* n:"Row", */
                    f: parse_Row,
                },
                523: {
                    /* n:"Index", */
                },
                545: {
                    /* n:"Array", */
                    f: parse_Array,
                },
                549: {
                    /* n:"DefaultRowHeight", */
                    f: parse_DefaultRowHeight,
                },
                566: {
                    /* n:"Table", */
                },
                574: {
                    /* n:"Window2", */
                    f: parse_Window2,
                },
                638: {
                    /* n:"RK", */
                    f: parse_RK,
                },
                659: {
                    /* n:"Style", */
                },
                1048: {
                    /* n:"BigName", */
                },
                1054: {
                    /* n:"Format", */
                    f: parse_Format,
                },
                1084: {
                    /* n:"ContinueBigName", */
                },
                1212: {
                    /* n:"ShrFmla", */
                    f: parse_ShrFmla,
                },
                2048: {
                    /* n:"HLinkTooltip", */
                    f: parse_HLinkTooltip,
                },
                2049: {
                    /* n:"WebPub", */
                },
                2050: {
                    /* n:"QsiSXTag", */
                },
                2051: {
                    /* n:"DBQueryExt", */
                },
                2052: {
                    /* n:"ExtString", */
                },
                2053: {
                    /* n:"TxtQry", */
                },
                2054: {
                    /* n:"Qsir", */
                },
                2055: {
                    /* n:"Qsif", */
                },
                2056: {
                    /* n:"RRDTQSIF", */
                },
                2057: {
                    /* n:"BOF", */
                    f: parse_BOF,
                },
                2058: {
                    /* n:"OleDbConn", */
                },
                2059: {
                    /* n:"WOpt", */
                },
                2060: {
                    /* n:"SXViewEx", */
                },
                2061: {
                    /* n:"SXTH", */
                },
                2062: {
                    /* n:"SXPIEx", */
                },
                2063: {
                    /* n:"SXVDTEx", */
                },
                2064: {
                    /* n:"SXViewEx9", */
                },
                2066: {
                    /* n:"ContinueFrt", */
                },
                2067: {
                    /* n:"RealTimeData", */
                },
                2128: {
                    /* n:"ChartFrtInfo", */
                },
                2129: {
                    /* n:"FrtWrapper", */
                },
                2130: {
                    /* n:"StartBlock", */
                },
                2131: {
                    /* n:"EndBlock", */
                },
                2132: {
                    /* n:"StartObject", */
                },
                2133: {
                    /* n:"EndObject", */
                },
                2134: {
                    /* n:"CatLab", */
                },
                2135: {
                    /* n:"YMult", */
                },
                2136: {
                    /* n:"SXViewLink", */
                },
                2137: {
                    /* n:"PivotChartBits", */
                },
                2138: {
                    /* n:"FrtFontList", */
                },
                2146: {
                    /* n:"SheetExt", */
                },
                2147: {
                    /* n:"BookExt", */
                    r: 12,
                },
                2148: {
                    /* n:"SXAddl", */
                },
                2149: {
                    /* n:"CrErr", */
                },
                2150: {
                    /* n:"HFPicture", */
                },
                2151: {
                    /* n:"FeatHdr", */
                    f: parsenoop2,
                },
                2152: {
                    /* n:"Feat", */
                },
                2154: {
                    /* n:"DataLabExt", */
                },
                2155: {
                    /* n:"DataLabExtContents", */
                },
                2156: {
                    /* n:"CellWatch", */
                },
                2161: {
                    /* n:"FeatHdr11", */
                },
                2162: {
                    /* n:"Feature11", */
                },
                2164: {
                    /* n:"DropDownObjIds", */
                },
                2165: {
                    /* n:"ContinueFrt11", */
                },
                2166: {
                    /* n:"DConn", */
                },
                2167: {
                    /* n:"List12", */
                },
                2168: {
                    /* n:"Feature12", */
                },
                2169: {
                    /* n:"CondFmt12", */
                },
                2170: {
                    /* n:"CF12", */
                },
                2171: {
                    /* n:"CFEx", */
                },
                2172: {
                    /* n:"XFCRC", */
                    f: parse_XFCRC,
                    r: 12,
                },
                2173: {
                    /* n:"XFExt", */
                    f: parse_XFExt,
                    r: 12,
                },
                2174: {
                    /* n:"AutoFilter12", */
                },
                2175: {
                    /* n:"ContinueFrt12", */
                },
                2180: {
                    /* n:"MDTInfo", */
                },
                2181: {
                    /* n:"MDXStr", */
                },
                2182: {
                    /* n:"MDXTuple", */
                },
                2183: {
                    /* n:"MDXSet", */
                },
                2184: {
                    /* n:"MDXProp", */
                },
                2185: {
                    /* n:"MDXKPI", */
                },
                2186: {
                    /* n:"MDB", */
                },
                2187: {
                    /* n:"PLV", */
                },
                2188: {
                    /* n:"Compat12", */
                    f: parsebool,
                    r: 12,
                },
                2189: {
                    /* n:"DXF", */
                },
                2190: {
                    /* n:"TableStyles", */
                    r: 12,
                },
                2191: {
                    /* n:"TableStyle", */
                },
                2192: {
                    /* n:"TableStyleElement", */
                },
                2194: {
                    /* n:"StyleExt", */
                },
                2195: {
                    /* n:"NamePublish", */
                },
                2196: {
                    /* n:"NameCmt", */
                    f: parse_NameCmt,
                    r: 12,
                },
                2197: {
                    /* n:"SortData", */
                },
                2198: {
                    /* n:"Theme", */
                    f: parse_Theme,
                    r: 12,
                },
                2199: {
                    /* n:"GUIDTypeLib", */
                },
                2200: {
                    /* n:"FnGrp12", */
                },
                2201: {
                    /* n:"NameFnGrp12", */
                },
                2202: {
                    /* n:"MTRSettings", */
                    f: parse_MTRSettings,
                    r: 12,
                },
                2203: {
                    /* n:"CompressPictures", */
                    f: parsenoop2,
                },
                2204: {
                    /* n:"HeaderFooter", */
                },
                2205: {
                    /* n:"CrtLayout12", */
                },
                2206: {
                    /* n:"CrtMlFrt", */
                },
                2207: {
                    /* n:"CrtMlFrtContinue", */
                },
                2211: {
                    /* n:"ForceFullCalculation", */
                    f: parse_ForceFullCalculation,
                },
                2212: {
                    /* n:"ShapePropsStream", */
                },
                2213: {
                    /* n:"TextPropsStream", */
                },
                2214: {
                    /* n:"RichTextStream", */
                },
                2215: {
                    /* n:"CrtLayout12A", */
                },
                4097: {
                    /* n:"Units", */
                },
                4098: {
                    /* n:"Chart", */
                },
                4099: {
                    /* n:"Series", */
                },
                4102: {
                    /* n:"DataFormat", */
                },
                4103: {
                    /* n:"LineFormat", */
                },
                4105: {
                    /* n:"MarkerFormat", */
                },
                4106: {
                    /* n:"AreaFormat", */
                },
                4107: {
                    /* n:"PieFormat", */
                },
                4108: {
                    /* n:"AttachedLabel", */
                },
                4109: {
                    /* n:"SeriesText", */
                },
                4116: {
                    /* n:"ChartFormat", */
                },
                4117: {
                    /* n:"Legend", */
                },
                4118: {
                    /* n:"SeriesList", */
                },
                4119: {
                    /* n:"Bar", */
                },
                4120: {
                    /* n:"Line", */
                },
                4121: {
                    /* n:"Pie", */
                },
                4122: {
                    /* n:"Area", */
                },
                4123: {
                    /* n:"Scatter", */
                },
                4124: {
                    /* n:"CrtLine", */
                },
                4125: {
                    /* n:"Axis", */
                },
                4126: {
                    /* n:"Tick", */
                },
                4127: {
                    /* n:"ValueRange", */
                },
                4128: {
                    /* n:"CatSerRange", */
                },
                4129: {
                    /* n:"AxisLine", */
                },
                4130: {
                    /* n:"CrtLink", */
                },
                4132: {
                    /* n:"DefaultText", */
                },
                4133: {
                    /* n:"Text", */
                },
                4134: {
                    /* n:"FontX", */
                    f: parseuint16,
                },
                4135: {
                    /* n:"ObjectLink", */
                },
                4146: {
                    /* n:"Frame", */
                },
                4147: {
                    /* n:"Begin", */
                },
                4148: {
                    /* n:"End", */
                },
                4149: {
                    /* n:"PlotArea", */
                },
                4154: {
                    /* n:"Chart3d", */
                },
                4156: {
                    /* n:"PicF", */
                },
                4157: {
                    /* n:"DropBar", */
                },
                4158: {
                    /* n:"Radar", */
                },
                4159: {
                    /* n:"Surf", */
                },
                4160: {
                    /* n:"RadarArea", */
                },
                4161: {
                    /* n:"AxisParent", */
                },
                4163: {
                    /* n:"LegendException", */
                },
                4164: {
                    /* n:"ShtProps", */
                    f: parse_ShtProps,
                },
                4165: {
                    /* n:"SerToCrt", */
                },
                4166: {
                    /* n:"AxesUsed", */
                },
                4168: {
                    /* n:"SBaseRef", */
                },
                4170: {
                    /* n:"SerParent", */
                },
                4171: {
                    /* n:"SerAuxTrend", */
                },
                4174: {
                    /* n:"IFmtRecord", */
                },
                4175: {
                    /* n:"Pos", */
                },
                4176: {
                    /* n:"AlRuns", */
                },
                4177: {
                    /* n:"BRAI", */
                },
                4187: {
                    /* n:"SerAuxErrBar", */
                },
                4188: {
                    /* n:"ClrtClient", */
                    f: parse_ClrtClient,
                },
                4189: {
                    /* n:"SerFmt", */
                },
                4191: {
                    /* n:"Chart3DBarShape", */
                },
                4192: {
                    /* n:"Fbi", */
                },
                4193: {
                    /* n:"BopPop", */
                },
                4194: {
                    /* n:"AxcExt", */
                },
                4195: {
                    /* n:"Dat", */
                },
                4196: {
                    /* n:"PlotGrowth", */
                },
                4197: {
                    /* n:"SIIndex", */
                },
                4198: {
                    /* n:"GelFrame", */
                },
                4199: {
                    /* n:"BopPopCustom", */
                },
                4200: {
                    /* n:"Fbi2", */
                },
                0: {
                    /* n:"Dimensions", */
                    f: parse_Dimensions,
                },
                1: {
                    /* n:"BIFF2BLANK", */
                },
                2: {
                    /* n:"BIFF2INT", */
                    f: parse_BIFF2INT,
                },
                3: {
                    /* n:"BIFF2NUM", */
                    f: parse_BIFF2NUM,
                },
                4: {
                    /* n:"BIFF2STR", */
                    f: parse_BIFF2STR,
                },
                5: {
                    /* n:"BoolErr", */
                    f: parse_BoolErr,
                },
                7: {
                    /* n:"String", */
                    f: parse_BIFF2STRING,
                },
                8: {
                    /* n:"BIFF2ROW", */
                },
                9: {
                    /* n:"BOF", */
                    f: parse_BOF,
                },
                11: {
                    /* n:"Index", */
                },
                22: {
                    /* n:"ExternCount", */
                    f: parseuint16,
                },
                30: {
                    /* n:"BIFF2FORMAT", */
                    f: parse_BIFF2Format,
                },
                31: {
                    /* n:"BIFF2FMTCNT", */
                },
                /* 16-bit cnt of BIFF2FORMAT records */
                32: {
                    /* n:"BIFF2COLINFO", */
                },
                33: {
                    /* n:"Array", */
                    f: parse_Array,
                },
                36: {
                    /* n:"COLWIDTH", */
                },
                37: {
                    /* n:"DefaultRowHeight", */
                    f: parse_DefaultRowHeight,
                },
                // 0x2c ??
                // 0x2d ??
                // 0x2e ??
                // 0x30 FONTCOUNT: number of fonts
                50: {
                    /* n:"BIFF2FONTXTRA", */
                    f: parse_BIFF2FONTXTRA,
                },
                // 0x35: INFOOPTS
                // 0x36: TABLE (BIFF2 only)
                // 0x37: TABLE2 (BIFF2 only)
                // 0x38: WNDESK
                // 0x39 ??
                // 0x3a: BEGINPREF
                // 0x3b: ENDPREF
                62: {
                    /* n:"BIFF2WINDOW2", */
                },
                // 0x3f ??
                // 0x46: SHOWSCROLL
                // 0x47: SHOWFORMULA
                // 0x48: STATUSBAR
                // 0x49: SHORTMENUS
                // 0x4A:
                // 0x4B:
                // 0x4C:
                // 0x4E:
                // 0x4F:
                // 0x58: TOOLBAR (BIFF3)
                /* - - - */
                52: {
                    /* n:"DDEObjName", */
                },
                67: {
                    /* n:"BIFF2XF", */
                },
                68: {
                    /* n:"BIFF2XFINDEX", */
                    f: parseuint16,
                },
                69: {
                    /* n:"BIFF2FONTCLR", */
                },
                86: {
                    /* n:"BIFF4FMTCNT", */
                },
                /* 16-bit cnt, similar to BIFF2 */
                126: {
                    /* n:"RK", */
                },
                /* Not necessarily same as 0x027e */
                127: {
                    /* n:"ImData", */
                    f: parse_ImData,
                },
                135: {
                    /* n:"Addin", */
                },
                136: {
                    /* n:"Edg", */
                },
                137: {
                    /* n:"Pub", */
                },
                // 0x8A
                // 0x8B LH: alternate menu key flag (BIFF3/4)
                // 0x8E
                // 0x8F
                145: {
                    /* n:"Sub", */
                },
                // 0x93 STYLE
                148: {
                    /* n:"LHRecord", */
                },
                149: {
                    /* n:"LHNGraph", */
                },
                150: {
                    /* n:"Sound", */
                },
                // 0xA2 FNPROTO: function prototypes (BIFF4)
                // 0xA3
                // 0xA8
                169: {
                    /* n:"CoordList", */
                },
                171: {
                    /* n:"GCW", */
                },
                188: {
                    /* n:"ShrFmla", */
                },
                /* Not necessarily same as 0x04bc */
                191: {
                    /* n:"ToolbarHdr", */
                },
                192: {
                    /* n:"ToolbarEnd", */
                },
                194: {
                    /* n:"AddMenu", */
                },
                195: {
                    /* n:"DelMenu", */
                },
                214: {
                    /* n:"RString", */
                    f: parse_RString,
                },
                223: {
                    /* n:"UDDesc", */
                },
                234: {
                    /* n:"TabIdConf", */
                },
                354: {
                    /* n:"XL5Modify", */
                },
                421: {
                    /* n:"FileSharing2", */
                },
                518: {
                    /* n:"Formula", */
                    f: parse_Formula,
                },
                521: {
                    /* n:"BOF", */
                    f: parse_BOF,
                },
                536: {
                    /* n:"Lbl", */
                    f: parse_Lbl,
                },
                547: {
                    /* n:"ExternName", */
                    f: parse_ExternName,
                },
                561: {
                    /* n:"Font", */
                },
                579: {
                    /* n:"BIFF3XF", */
                },
                1030: {
                    /* n:"Formula", */
                    f: parse_Formula,
                },
                1033: {
                    /* n:"BOF", */
                    f: parse_BOF,
                },
                1091: {
                    /* n:"BIFF4XF", */
                },
                2157: {
                    /* n:"FeatInfo", */
                },
                2163: {
                    /* n:"FeatInfo11", */
                },
                2177: {
                    /* n:"SXAddl12", */
                },
                2240: {
                    /* n:"AutoWebPub", */
                },
                2241: {
                    /* n:"ListObj", */
                },
                2242: {
                    /* n:"ListField", */
                },
                2243: {
                    /* n:"ListDV", */
                },
                2244: {
                    /* n:"ListCondFmt", */
                },
                2245: {
                    /* n:"ListCF", */
                },
                2246: {
                    /* n:"FMQry", */
                },
                2247: {
                    /* n:"FMSQry", */
                },
                2248: {
                    /* n:"PLV", */
                },
                2249: {
                    /* n:"LnExt", */
                },
                2250: {
                    /* n:"MkrExt", */
                },
                2251: {
                    /* n:"CrtCoopt", */
                },
                2262: {
                    /* n:"FRTArchId$", */
                    r: 12,
                },
                29282: {},
            };
            function write_biff_rec(ba, type, payload, length) {
                var t2 = type;
                if (isNaN(t2)) return;
                var len = length || (payload || []).length || 0;
                var o = ba.next(4);
                o.write_shift(2, t2);
                o.write_shift(2, len);
                if (len > 0 && is_buf(payload)) ba.push(payload);
            }
            function write_biff_continue(ba, type, payload, length) {
                var len = length || (payload || []).length || 0;
                if (len <= 8224) return write_biff_rec(ba, type, payload, len);
                var t2 = type;
                if (isNaN(t2)) return;
                var parts = payload.parts || [],
                    sidx = 0;
                var i2 = 0,
                    w = 0;
                while (w + (parts[sidx] || 8224) <= 8224) {
                    w += parts[sidx] || 8224;
                    sidx++;
                }
                var o = ba.next(4);
                o.write_shift(2, t2);
                o.write_shift(2, w);
                ba.push(payload.slice(i2, i2 + w));
                i2 += w;
                while (i2 < len) {
                    o = ba.next(4);
                    o.write_shift(2, 60);
                    w = 0;
                    while (w + (parts[sidx] || 8224) <= 8224) {
                        w += parts[sidx] || 8224;
                        sidx++;
                    }
                    o.write_shift(2, w);
                    ba.push(payload.slice(i2, i2 + w));
                    i2 += w;
                }
            }
            function write_BIFF2Cell(out, r2, c) {
                if (!out) out = new_buf(7);
                out.write_shift(2, r2);
                out.write_shift(2, c);
                out.write_shift(2, 0);
                out.write_shift(1, 0);
                return out;
            }
            function write_BIFF2BERR(r2, c, val2, t2) {
                var out = new_buf(9);
                write_BIFF2Cell(out, r2, c);
                write_Bes(val2, t2 || 'b', out);
                return out;
            }
            function write_BIFF2LABEL(r2, c, val2) {
                var out = new_buf(8 + 2 * val2.length);
                write_BIFF2Cell(out, r2, c);
                out.write_shift(1, val2.length);
                out.write_shift(val2.length, val2, 'sbcs');
                return out.l < out.length ? out.slice(0, out.l) : out;
            }
            function write_ws_biff2_cell(ba, cell, R, C) {
                if (cell.v != null)
                    switch (cell.t) {
                        case 'd':
                        case 'n':
                            var v = cell.t == 'd' ? datenum(parseDate(cell.v)) : cell.v;
                            if (v == (v | 0) && v >= 0 && v < 65536)
                                write_biff_rec(ba, 2, write_BIFF2INT(R, C, v));
                            else write_biff_rec(ba, 3, write_BIFF2NUM(R, C, v));
                            return;
                        case 'b':
                        case 'e':
                            write_biff_rec(ba, 5, write_BIFF2BERR(R, C, cell.v, cell.t));
                            return;
                        case 's':
                        case 'str':
                            write_biff_rec(
                                ba,
                                4,
                                write_BIFF2LABEL(R, C, (cell.v || '').slice(0, 255)),
                            );
                            return;
                    }
                write_biff_rec(ba, 1, write_BIFF2Cell(null, R, C));
            }
            function write_ws_biff2(ba, ws, idx, opts) {
                var dense = Array.isArray(ws);
                var range = safe_decode_range(ws['!ref'] || 'A1'),
                    ref,
                    rr = '',
                    cols = [];
                if (range.e.c > 255 || range.e.r > 16383) {
                    if (opts.WTF)
                        throw new Error(
                            'Range ' + (ws['!ref'] || 'A1') + ' exceeds format limit A1:IV16384',
                        );
                    range.e.c = Math.min(range.e.c, 255);
                    range.e.r = Math.min(range.e.c, 16383);
                    ref = encode_range(range);
                }
                for (var R = range.s.r; R <= range.e.r; ++R) {
                    rr = encode_row(R);
                    for (var C = range.s.c; C <= range.e.c; ++C) {
                        if (R === range.s.r) cols[C] = encode_col(C);
                        ref = cols[C] + rr;
                        var cell = dense ? (ws[R] || [])[C] : ws[ref];
                        if (!cell) continue;
                        write_ws_biff2_cell(ba, cell, R, C, opts);
                    }
                }
            }
            function write_biff2_buf(wb, opts) {
                var o = opts || {};
                if (DENSE != null && o.dense == null) o.dense = DENSE;
                var ba = buf_array();
                var idx = 0;
                for (var i2 = 0; i2 < wb.SheetNames.length; ++i2)
                    if (wb.SheetNames[i2] == o.sheet) idx = i2;
                if (idx == 0 && !!o.sheet && wb.SheetNames[0] != o.sheet)
                    throw new Error('Sheet not found: ' + o.sheet);
                write_biff_rec(
                    ba,
                    o.biff == 4 ? 1033 : o.biff == 3 ? 521 : 9,
                    write_BOF(wb, 16, o),
                );
                write_ws_biff2(ba, wb.Sheets[wb.SheetNames[idx]], idx, o, wb);
                write_biff_rec(ba, 10);
                return ba.end();
            }
            function write_FONTS_biff8(ba, data2, opts) {
                write_biff_rec(
                    ba,
                    49,
                    write_Font(
                        {
                            sz: 12,
                            color: { theme: 1 },
                            name: 'Arial',
                            family: 2,
                            scheme: 'minor',
                        },
                        opts,
                    ),
                );
            }
            function write_FMTS_biff8(ba, NF, opts) {
                if (!NF) return;
                [
                    [5, 8],
                    [23, 26],
                    [41, 44],
                    [
                        /*63*/
                        50 /*66],[164,*/, 392,
                    ],
                ].forEach(function (r2) {
                    for (var i2 = r2[0]; i2 <= r2[1]; ++i2)
                        if (NF[i2] != null)
                            write_biff_rec(ba, 1054, write_Format(i2, NF[i2], opts));
                });
            }
            function write_FEAT(ba, ws) {
                var o = new_buf(19);
                o.write_shift(4, 2151);
                o.write_shift(4, 0);
                o.write_shift(4, 0);
                o.write_shift(2, 3);
                o.write_shift(1, 1);
                o.write_shift(4, 0);
                write_biff_rec(ba, 2151, o);
                o = new_buf(39);
                o.write_shift(4, 2152);
                o.write_shift(4, 0);
                o.write_shift(4, 0);
                o.write_shift(2, 3);
                o.write_shift(1, 0);
                o.write_shift(4, 0);
                o.write_shift(2, 1);
                o.write_shift(4, 4);
                o.write_shift(2, 0);
                write_Ref8U(safe_decode_range(ws['!ref'] || 'A1'), o);
                o.write_shift(4, 4);
                write_biff_rec(ba, 2152, o);
            }
            function write_CELLXFS_biff8(ba, opts) {
                for (var i2 = 0; i2 < 16; ++i2)
                    write_biff_rec(ba, 224, write_XF({ numFmtId: 0, style: true }, 0, opts));
                opts.cellXfs.forEach(function (c) {
                    write_biff_rec(ba, 224, write_XF(c, 0, opts));
                });
            }
            function write_ws_biff8_hlinks(ba, ws) {
                for (var R = 0; R < ws['!links'].length; ++R) {
                    var HL = ws['!links'][R];
                    write_biff_rec(ba, 440, write_HLink(HL));
                    if (HL[1].Tooltip) write_biff_rec(ba, 2048, write_HLinkTooltip(HL));
                }
                delete ws['!links'];
            }
            function write_ws_cols_biff8(ba, cols) {
                if (!cols) return;
                var cnt = 0;
                cols.forEach(function (col, idx) {
                    if (++cnt <= 256 && col) {
                        write_biff_rec(ba, 125, write_ColInfo(col_obj_w(idx, col), idx));
                    }
                });
            }
            function write_ws_biff8_cell(ba, cell, R, C, opts) {
                var os2 = 16 + get_cell_style(opts.cellXfs, cell, opts);
                if (cell.v == null && !cell.bf) {
                    write_biff_rec(ba, 513, write_XLSCell(R, C, os2));
                    return;
                }
                if (cell.bf) write_biff_rec(ba, 6, write_Formula(cell, R, C, opts, os2));
                else
                    switch (cell.t) {
                        case 'd':
                        case 'n':
                            var v = cell.t == 'd' ? datenum(parseDate(cell.v)) : cell.v;
                            write_biff_rec(ba, 515, write_Number(R, C, v, os2, opts));
                            break;
                        case 'b':
                        case 'e':
                            write_biff_rec(ba, 517, write_BoolErr(R, C, cell.v, os2, opts, cell.t));
                            break;
                        case 's':
                        case 'str':
                            if (opts.bookSST) {
                                var isst = get_sst_id(opts.Strings, cell.v, opts.revStrings);
                                write_biff_rec(ba, 253, write_LabelSst(R, C, isst, os2, opts));
                            } else
                                write_biff_rec(
                                    ba,
                                    516,
                                    write_Label(R, C, (cell.v || '').slice(0, 255), os2, opts),
                                );
                            break;
                        default:
                            write_biff_rec(ba, 513, write_XLSCell(R, C, os2));
                    }
            }
            function write_ws_biff8(idx, opts, wb) {
                var ba = buf_array();
                var s2 = wb.SheetNames[idx],
                    ws = wb.Sheets[s2] || {};
                var _WB = (wb || {}).Workbook || {};
                var _sheet = (_WB.Sheets || [])[idx] || {};
                var dense = Array.isArray(ws);
                var b8 = opts.biff == 8;
                var ref,
                    rr = '',
                    cols = [];
                var range = safe_decode_range(ws['!ref'] || 'A1');
                var MAX_ROWS = b8 ? 65536 : 16384;
                if (range.e.c > 255 || range.e.r >= MAX_ROWS) {
                    if (opts.WTF)
                        throw new Error(
                            'Range ' + (ws['!ref'] || 'A1') + ' exceeds format limit A1:IV16384',
                        );
                    range.e.c = Math.min(range.e.c, 255);
                    range.e.r = Math.min(range.e.c, MAX_ROWS - 1);
                }
                write_biff_rec(ba, 2057, write_BOF(wb, 16, opts));
                write_biff_rec(ba, 13, writeuint16(1));
                write_biff_rec(ba, 12, writeuint16(100));
                write_biff_rec(ba, 15, writebool(true));
                write_biff_rec(ba, 17, writebool(false));
                write_biff_rec(ba, 16, write_Xnum(1e-3));
                write_biff_rec(ba, 95, writebool(true));
                write_biff_rec(ba, 42, writebool(false));
                write_biff_rec(ba, 43, writebool(false));
                write_biff_rec(ba, 130, writeuint16(1));
                write_biff_rec(ba, 128, write_Guts([0, 0]));
                write_biff_rec(ba, 131, writebool(false));
                write_biff_rec(ba, 132, writebool(false));
                if (b8) write_ws_cols_biff8(ba, ws['!cols']);
                write_biff_rec(ba, 512, write_Dimensions(range, opts));
                if (b8) ws['!links'] = [];
                for (var R = range.s.r; R <= range.e.r; ++R) {
                    rr = encode_row(R);
                    for (var C = range.s.c; C <= range.e.c; ++C) {
                        if (R === range.s.r) cols[C] = encode_col(C);
                        ref = cols[C] + rr;
                        var cell = dense ? (ws[R] || [])[C] : ws[ref];
                        if (!cell) continue;
                        write_ws_biff8_cell(ba, cell, R, C, opts);
                        if (b8 && cell.l) ws['!links'].push([ref, cell.l]);
                    }
                }
                var cname = _sheet.CodeName || _sheet.name || s2;
                if (b8) write_biff_rec(ba, 574, write_Window2((_WB.Views || [])[0]));
                if (b8 && (ws['!merges'] || []).length)
                    write_biff_rec(ba, 229, write_MergeCells(ws['!merges']));
                if (b8) write_ws_biff8_hlinks(ba, ws);
                write_biff_rec(ba, 442, write_XLUnicodeString(cname, opts));
                if (b8) write_FEAT(ba, ws);
                write_biff_rec(
                    ba,
                    10,
                    /* EOF */
                );
                return ba.end();
            }
            function write_biff8_global(wb, bufs, opts) {
                var A2 = buf_array();
                var _WB = (wb || {}).Workbook || {};
                var _sheets = _WB.Sheets || [];
                var _wb = _WB.WBProps || {};
                var b8 = opts.biff == 8,
                    b5 = opts.biff == 5;
                write_biff_rec(A2, 2057, write_BOF(wb, 5, opts));
                if (opts.bookType == 'xla')
                    write_biff_rec(
                        A2,
                        135,
                        /* Addin */
                    );
                write_biff_rec(A2, 225, b8 ? writeuint16(1200) : null);
                write_biff_rec(A2, 193, writezeroes(2));
                if (b5)
                    write_biff_rec(
                        A2,
                        191,
                        /* ToolbarHdr */
                    );
                if (b5)
                    write_biff_rec(
                        A2,
                        192,
                        /* ToolbarEnd */
                    );
                write_biff_rec(
                    A2,
                    226,
                    /* InterfaceEnd */
                );
                write_biff_rec(A2, 92, write_WriteAccess('SheetJS', opts));
                write_biff_rec(A2, 66, writeuint16(b8 ? 1200 : 1252));
                if (b8) write_biff_rec(A2, 353, writeuint16(0));
                if (b8)
                    write_biff_rec(
                        A2,
                        448,
                        /* Excel9File */
                    );
                write_biff_rec(A2, 317, write_RRTabId(wb.SheetNames.length));
                if (b8 && wb.vbaraw)
                    write_biff_rec(
                        A2,
                        211,
                        /* ObProj */
                    );
                if (b8 && wb.vbaraw) {
                    var cname = _wb.CodeName || 'ThisWorkbook';
                    write_biff_rec(A2, 442, write_XLUnicodeString(cname, opts));
                }
                write_biff_rec(A2, 156, writeuint16(17));
                write_biff_rec(A2, 25, writebool(false));
                write_biff_rec(A2, 18, writebool(false));
                write_biff_rec(A2, 19, writeuint16(0));
                if (b8) write_biff_rec(A2, 431, writebool(false));
                if (b8) write_biff_rec(A2, 444, writeuint16(0));
                write_biff_rec(A2, 61, write_Window1(opts));
                write_biff_rec(A2, 64, writebool(false));
                write_biff_rec(A2, 141, writeuint16(0));
                write_biff_rec(A2, 34, writebool(safe1904(wb) == 'true'));
                write_biff_rec(A2, 14, writebool(true));
                if (b8) write_biff_rec(A2, 439, writebool(false));
                write_biff_rec(A2, 218, writeuint16(0));
                write_FONTS_biff8(A2, wb, opts);
                write_FMTS_biff8(A2, wb.SSF, opts);
                write_CELLXFS_biff8(A2, opts);
                if (b8) write_biff_rec(A2, 352, writebool(false));
                var a = A2.end();
                var C = buf_array();
                if (b8) write_biff_rec(C, 140, write_Country());
                if (b8 && opts.Strings) write_biff_continue(C, 252, write_SST(opts.Strings, opts));
                write_biff_rec(
                    C,
                    10,
                    /* EOF */
                );
                var c = C.end();
                var B = buf_array();
                var blen = 0,
                    j = 0;
                for (j = 0; j < wb.SheetNames.length; ++j)
                    blen += (b8 ? 12 : 11) + (b8 ? 2 : 1) * wb.SheetNames[j].length;
                var start = a.length + blen + c.length;
                for (j = 0; j < wb.SheetNames.length; ++j) {
                    var _sheet = _sheets[j] || {};
                    write_biff_rec(
                        B,
                        133,
                        write_BoundSheet8(
                            { pos: start, hs: _sheet.Hidden || 0, dt: 0, name: wb.SheetNames[j] },
                            opts,
                        ),
                    );
                    start += bufs[j].length;
                }
                var b = B.end();
                if (blen != b.length) throw new Error('BS8 ' + blen + ' != ' + b.length);
                var out = [];
                if (a.length) out.push(a);
                if (b.length) out.push(b);
                if (c.length) out.push(c);
                return bconcat(out);
            }
            function write_biff8_buf(wb, opts) {
                var o = opts || {};
                var bufs = [];
                if (wb && !wb.SSF) {
                    wb.SSF = dup(table_fmt);
                }
                if (wb && wb.SSF) {
                    make_ssf();
                    SSF_load_table(wb.SSF);
                    o.revssf = evert_num(wb.SSF);
                    o.revssf[wb.SSF[65535]] = 0;
                    o.ssf = wb.SSF;
                }
                o.Strings = [];
                o.Strings.Count = 0;
                o.Strings.Unique = 0;
                fix_write_opts(o);
                o.cellXfs = [];
                get_cell_style(o.cellXfs, {}, { revssf: { General: 0 } });
                if (!wb.Props) wb.Props = {};
                for (var i2 = 0; i2 < wb.SheetNames.length; ++i2)
                    bufs[bufs.length] = write_ws_biff8(i2, o, wb);
                bufs.unshift(write_biff8_global(wb, bufs, o));
                return bconcat(bufs);
            }
            function write_biff_buf(wb, opts) {
                for (var i2 = 0; i2 <= wb.SheetNames.length; ++i2) {
                    var ws = wb.Sheets[wb.SheetNames[i2]];
                    if (!ws || !ws['!ref']) continue;
                    var range = decode_range(ws['!ref']);
                    if (range.e.c > 255) {
                        if (typeof console != 'undefined' && console.error)
                            console.error(
                                "Worksheet '" +
                                    wb.SheetNames[i2] +
                                    "' extends beyond column IV (255).  Data may be lost.",
                            );
                    }
                }
                var o = opts || {};
                switch (o.biff || 2) {
                    case 8:
                    case 5:
                        return write_biff8_buf(wb, opts);
                    case 4:
                    case 3:
                    case 2:
                        return write_biff2_buf(wb, opts);
                }
                throw new Error('invalid type ' + o.bookType + ' for BIFF');
            }
            function html_to_sheet(str, _opts) {
                var opts = _opts || {};
                if (DENSE != null && opts.dense == null) opts.dense = DENSE;
                var ws = opts.dense ? [] : {};
                str = str.replace(/<!--.*?-->/g, '');
                var mtch = str.match(/<table/i);
                if (!mtch) throw new Error('Invalid HTML: could not find <table>');
                var mtch2 = str.match(/<\/table/i);
                var i2 = mtch.index,
                    j = (mtch2 && mtch2.index) || str.length;
                var rows = split_regex(str.slice(i2, j), /(:?<tr[^>]*>)/i, '<tr>');
                var R = -1,
                    C = 0,
                    RS = 0,
                    CS = 0;
                var range = { s: { r: 1e7, c: 1e7 }, e: { r: 0, c: 0 } };
                var merges = [];
                for (i2 = 0; i2 < rows.length; ++i2) {
                    var row = rows[i2].trim();
                    var hd = row.slice(0, 3).toLowerCase();
                    if (hd == '<tr') {
                        ++R;
                        if (opts.sheetRows && opts.sheetRows <= R) {
                            --R;
                            break;
                        }
                        C = 0;
                        continue;
                    }
                    if (hd != '<td' && hd != '<th') continue;
                    var cells = row.split(/<\/t[dh]>/i);
                    for (j = 0; j < cells.length; ++j) {
                        var cell = cells[j].trim();
                        if (!cell.match(/<t[dh]/i)) continue;
                        var m2 = cell,
                            cc = 0;
                        while (m2.charAt(0) == '<' && (cc = m2.indexOf('>')) > -1)
                            m2 = m2.slice(cc + 1);
                        for (var midx = 0; midx < merges.length; ++midx) {
                            var _merge = merges[midx];
                            if (_merge.s.c == C && _merge.s.r < R && R <= _merge.e.r) {
                                C = _merge.e.c + 1;
                                midx = -1;
                            }
                        }
                        var tag = parsexmltag(cell.slice(0, cell.indexOf('>')));
                        CS = tag.colspan ? +tag.colspan : 1;
                        if ((RS = +tag.rowspan) > 1 || CS > 1)
                            merges.push({
                                s: { r: R, c: C },
                                e: { r: R + (RS || 1) - 1, c: C + CS - 1 },
                            });
                        var _t = tag.t || tag['data-t'] || '';
                        if (!m2.length) {
                            C += CS;
                            continue;
                        }
                        m2 = htmldecode(m2);
                        if (range.s.r > R) range.s.r = R;
                        if (range.e.r < R) range.e.r = R;
                        if (range.s.c > C) range.s.c = C;
                        if (range.e.c < C) range.e.c = C;
                        if (!m2.length) {
                            C += CS;
                            continue;
                        }
                        var o = { t: 's', v: m2 };
                        if (opts.raw || !m2.trim().length || _t == 's') {
                        } else if (m2 === 'TRUE') o = { t: 'b', v: true };
                        else if (m2 === 'FALSE') o = { t: 'b', v: false };
                        else if (!isNaN(fuzzynum(m2))) o = { t: 'n', v: fuzzynum(m2) };
                        else if (!isNaN(fuzzydate(m2).getDate())) {
                            o = { t: 'd', v: parseDate(m2) };
                            if (!opts.cellDates) o = { t: 'n', v: datenum(o.v) };
                            o.z = opts.dateNF || table_fmt[14];
                        }
                        if (opts.dense) {
                            if (!ws[R]) ws[R] = [];
                            ws[R][C] = o;
                        } else ws[encode_cell({ r: R, c: C })] = o;
                        C += CS;
                    }
                }
                ws['!ref'] = encode_range(range);
                if (merges.length) ws['!merges'] = merges;
                return ws;
            }
            function make_html_row(ws, r2, R, o) {
                var M = ws['!merges'] || [];
                var oo = [];
                for (var C = r2.s.c; C <= r2.e.c; ++C) {
                    var RS = 0,
                        CS = 0;
                    for (var j = 0; j < M.length; ++j) {
                        if (M[j].s.r > R || M[j].s.c > C) continue;
                        if (M[j].e.r < R || M[j].e.c < C) continue;
                        if (M[j].s.r < R || M[j].s.c < C) {
                            RS = -1;
                            break;
                        }
                        RS = M[j].e.r - M[j].s.r + 1;
                        CS = M[j].e.c - M[j].s.c + 1;
                        break;
                    }
                    if (RS < 0) continue;
                    var coord = encode_cell({ r: R, c: C });
                    var cell = o.dense ? (ws[R] || [])[C] : ws[coord];
                    var w =
                        (cell &&
                            cell.v != null &&
                            (cell.h || escapehtml(cell.w || (format_cell(cell), cell.w) || ''))) ||
                        '';
                    var sp = {};
                    if (RS > 1) sp.rowspan = RS;
                    if (CS > 1) sp.colspan = CS;
                    if (o.editable) w = '<span contenteditable="true">' + w + '</span>';
                    else if (cell) {
                        sp['data-t'] = (cell && cell.t) || 'z';
                        if (cell.v != null) sp['data-v'] = cell.v;
                        if (cell.z != null) sp['data-z'] = cell.z;
                        if (cell.l && (cell.l.Target || '#').charAt(0) != '#')
                            w = '<a href="' + cell.l.Target + '">' + w + '</a>';
                    }
                    sp.id = (o.id || 'sjs') + '-' + coord;
                    oo.push(writextag('td', w, sp));
                }
                var preamble = '<tr>';
                return preamble + oo.join('') + '</tr>';
            }
            var HTML_BEGIN =
                '<html><head><meta charset="utf-8"/><title>SheetJS Table Export</title></head><body>';
            var HTML_END = '</body></html>';
            function html_to_workbook(str, opts) {
                var mtch = str.match(/<table[\s\S]*?>[\s\S]*?<\/table>/gi);
                if (!mtch || mtch.length == 0)
                    throw new Error('Invalid HTML: could not find <table>');
                if (mtch.length == 1) return sheet_to_workbook(html_to_sheet(mtch[0], opts), opts);
                var wb = book_new();
                mtch.forEach(function (s2, idx) {
                    book_append_sheet(wb, html_to_sheet(s2, opts), 'Sheet' + (idx + 1));
                });
                return wb;
            }
            function make_html_preamble(ws, R, o) {
                var out = [];
                return out.join('') + '<table' + (o && o.id ? ' id="' + o.id + '"' : '') + '>';
            }
            function sheet_to_html(ws, opts) {
                var o = opts || {};
                var header = o.header != null ? o.header : HTML_BEGIN;
                var footer = o.footer != null ? o.footer : HTML_END;
                var out = [header];
                var r2 = decode_range(ws['!ref']);
                o.dense = Array.isArray(ws);
                out.push(make_html_preamble(ws, r2, o));
                for (var R = r2.s.r; R <= r2.e.r; ++R) out.push(make_html_row(ws, r2, R, o));
                out.push('</table>' + footer);
                return out.join('');
            }
            function sheet_add_dom(ws, table, _opts) {
                var opts = _opts || {};
                if (DENSE != null) opts.dense = DENSE;
                var or_R = 0,
                    or_C = 0;
                if (opts.origin != null) {
                    if (typeof opts.origin == 'number') or_R = opts.origin;
                    else {
                        var _origin =
                            typeof opts.origin == 'string' ? decode_cell(opts.origin) : opts.origin;
                        or_R = _origin.r;
                        or_C = _origin.c;
                    }
                }
                var rows = table.getElementsByTagName('tr');
                var sheetRows = Math.min(opts.sheetRows || 1e7, rows.length);
                var range = { s: { r: 0, c: 0 }, e: { r: or_R, c: or_C } };
                if (ws['!ref']) {
                    var _range = decode_range(ws['!ref']);
                    range.s.r = Math.min(range.s.r, _range.s.r);
                    range.s.c = Math.min(range.s.c, _range.s.c);
                    range.e.r = Math.max(range.e.r, _range.e.r);
                    range.e.c = Math.max(range.e.c, _range.e.c);
                    if (or_R == -1) range.e.r = or_R = _range.e.r + 1;
                }
                var merges = [],
                    midx = 0;
                var rowinfo = ws['!rows'] || (ws['!rows'] = []);
                var _R = 0,
                    R = 0,
                    _C = 0,
                    C = 0,
                    RS = 0,
                    CS = 0;
                if (!ws['!cols']) ws['!cols'] = [];
                for (; _R < rows.length && R < sheetRows; ++_R) {
                    var row = rows[_R];
                    if (is_dom_element_hidden(row)) {
                        if (opts.display) continue;
                        rowinfo[R] = { hidden: true };
                    }
                    var elts = row.children;
                    for (_C = C = 0; _C < elts.length; ++_C) {
                        var elt = elts[_C];
                        if (opts.display && is_dom_element_hidden(elt)) continue;
                        var v = elt.hasAttribute('data-v')
                            ? elt.getAttribute('data-v')
                            : elt.hasAttribute('v')
                              ? elt.getAttribute('v')
                              : htmldecode(elt.innerHTML);
                        var z = elt.getAttribute('data-z') || elt.getAttribute('z');
                        for (midx = 0; midx < merges.length; ++midx) {
                            var m2 = merges[midx];
                            if (m2.s.c == C + or_C && m2.s.r < R + or_R && R + or_R <= m2.e.r) {
                                C = m2.e.c + 1 - or_C;
                                midx = -1;
                            }
                        }
                        CS = +elt.getAttribute('colspan') || 1;
                        if ((RS = +elt.getAttribute('rowspan') || 1) > 1 || CS > 1)
                            merges.push({
                                s: { r: R + or_R, c: C + or_C },
                                e: { r: R + or_R + (RS || 1) - 1, c: C + or_C + (CS || 1) - 1 },
                            });
                        var o = { t: 's', v };
                        var _t = elt.getAttribute('data-t') || elt.getAttribute('t') || '';
                        if (v != null) {
                            if (v.length == 0) o.t = _t || 'z';
                            else if (opts.raw || v.trim().length == 0 || _t == 's') {
                            } else if (v === 'TRUE') o = { t: 'b', v: true };
                            else if (v === 'FALSE') o = { t: 'b', v: false };
                            else if (!isNaN(fuzzynum(v))) o = { t: 'n', v: fuzzynum(v) };
                            else if (!isNaN(fuzzydate(v).getDate())) {
                                o = { t: 'd', v: parseDate(v) };
                                if (!opts.cellDates) o = { t: 'n', v: datenum(o.v) };
                                o.z = opts.dateNF || table_fmt[14];
                            }
                        }
                        if (o.z === void 0 && z != null) o.z = z;
                        var l = '',
                            Aelts = elt.getElementsByTagName('A');
                        if (Aelts && Aelts.length) {
                            for (var Aelti = 0; Aelti < Aelts.length; ++Aelti)
                                if (Aelts[Aelti].hasAttribute('href')) {
                                    l = Aelts[Aelti].getAttribute('href');
                                    if (l.charAt(0) != '#') break;
                                }
                        }
                        if (l && l.charAt(0) != '#') o.l = { Target: l };
                        if (opts.dense) {
                            if (!ws[R + or_R]) ws[R + or_R] = [];
                            ws[R + or_R][C + or_C] = o;
                        } else ws[encode_cell({ c: C + or_C, r: R + or_R })] = o;
                        if (range.e.c < C + or_C) range.e.c = C + or_C;
                        C += CS;
                    }
                    ++R;
                }
                if (merges.length) ws['!merges'] = (ws['!merges'] || []).concat(merges);
                range.e.r = Math.max(range.e.r, R - 1 + or_R);
                ws['!ref'] = encode_range(range);
                if (R >= sheetRows)
                    ws['!fullref'] = encode_range(
                        ((range.e.r = rows.length - _R + R - 1 + or_R), range),
                    );
                return ws;
            }
            function parse_dom_table(table, _opts) {
                var opts = _opts || {};
                var ws = opts.dense ? [] : {};
                return sheet_add_dom(ws, table, _opts);
            }
            function table_to_book(table, opts) {
                return sheet_to_workbook(parse_dom_table(table, opts), opts);
            }
            function is_dom_element_hidden(element) {
                var display = '';
                var get_computed_style = get_get_computed_style_function(element);
                if (get_computed_style)
                    display = get_computed_style(element).getPropertyValue('display');
                if (!display) display = element.style && element.style.display;
                return display === 'none';
            }
            function get_get_computed_style_function(element) {
                if (
                    element.ownerDocument.defaultView &&
                    typeof element.ownerDocument.defaultView.getComputedStyle === 'function'
                )
                    return element.ownerDocument.defaultView.getComputedStyle;
                if (typeof getComputedStyle === 'function') return getComputedStyle;
                return null;
            }
            function parse_text_p(text3) {
                var fixed = text3
                    .replace(/[\t\r\n]/g, ' ')
                    .trim()
                    .replace(/ +/g, ' ')
                    .replace(/<text:s\/>/g, ' ')
                    .replace(/<text:s text:c="(\d+)"\/>/g, function ($$, $1) {
                        return Array(parseInt($1, 10) + 1).join(' ');
                    })
                    .replace(/<text:tab[^>]*\/>/g, '	')
                    .replace(/<text:line-break\/>/g, '\n');
                var v = unescapexml(fixed.replace(/<[^>]*>/g, ''));
                return [v];
            }
            var number_formats_ods = {
                /* ods name: [short ssf fmt, long ssf fmt] */
                day: ['d', 'dd'],
                month: ['m', 'mm'],
                year: ['y', 'yy'],
                hours: ['h', 'hh'],
                minutes: ['m', 'mm'],
                seconds: ['s', 'ss'],
                'am-pm': ['A/P', 'AM/PM'],
                'day-of-week': ['ddd', 'dddd'],
                era: ['e', 'ee'],
                /* there is no native representation of LO "Q" format */
                quarter: ['\\Qm', 'm\\"th quarter"'],
            };
            function parse_content_xml(d, _opts) {
                var opts = _opts || {};
                if (DENSE != null && opts.dense == null) opts.dense = DENSE;
                var str = xlml_normalize(d);
                var state = [],
                    tmp;
                var tag;
                var NFtag = { name: '' },
                    NF = '',
                    pidx = 0;
                var sheetag;
                var rowtag;
                var Sheets = {},
                    SheetNames = [];
                var ws = opts.dense ? [] : {};
                var Rn, q;
                var ctag = { value: '' };
                var textp = '',
                    textpidx = 0,
                    textptag;
                var textR = [];
                var R = -1,
                    C = -1,
                    range = { s: { r: 1e6, c: 1e7 }, e: { r: 0, c: 0 } };
                var row_ol = 0;
                var number_format_map = {};
                var merges = [],
                    mrange = {},
                    mR = 0,
                    mC = 0;
                var rowinfo = [],
                    rowpeat = 1,
                    colpeat = 1;
                var arrayf = [];
                var WB = { Names: [] };
                var atag = {};
                var _Ref = ['', ''];
                var comments = [],
                    comment = {};
                var creator = '',
                    creatoridx = 0;
                var isstub = false,
                    intable = false;
                var i2 = 0;
                xlmlregex.lastIndex = 0;
                str = str
                    .replace(/<!--([\s\S]*?)-->/gm, '')
                    .replace(/<!DOCTYPE[^\[]*\[[^\]]*\]>/gm, '');
                while ((Rn = xlmlregex.exec(str)))
                    switch ((Rn[3] = Rn[3].replace(/_.*$/, ''))) {
                        case 'table':
                        case '\u5DE5\u4F5C\u8868':
                            if (Rn[1] === '/') {
                                if (range.e.c >= range.s.c && range.e.r >= range.s.r)
                                    ws['!ref'] = encode_range(range);
                                else ws['!ref'] = 'A1:A1';
                                if (opts.sheetRows > 0 && opts.sheetRows <= range.e.r) {
                                    ws['!fullref'] = ws['!ref'];
                                    range.e.r = opts.sheetRows - 1;
                                    ws['!ref'] = encode_range(range);
                                }
                                if (merges.length) ws['!merges'] = merges;
                                if (rowinfo.length) ws['!rows'] = rowinfo;
                                sheetag.name = sheetag['\u540D\u79F0'] || sheetag.name;
                                if (typeof JSON !== 'undefined') JSON.stringify(sheetag);
                                SheetNames.push(sheetag.name);
                                Sheets[sheetag.name] = ws;
                                intable = false;
                            } else if (Rn[0].charAt(Rn[0].length - 2) !== '/') {
                                sheetag = parsexmltag(Rn[0], false);
                                R = C = -1;
                                range.s.r = range.s.c = 1e7;
                                range.e.r = range.e.c = 0;
                                ws = opts.dense ? [] : {};
                                merges = [];
                                rowinfo = [];
                                intable = true;
                            }
                            break;
                        case 'table-row-group':
                            if (Rn[1] === '/') --row_ol;
                            else ++row_ol;
                            break;
                        case 'table-row':
                        case '\u884C':
                            if (Rn[1] === '/') {
                                R += rowpeat;
                                rowpeat = 1;
                                break;
                            }
                            rowtag = parsexmltag(Rn[0], false);
                            if (rowtag['\u884C\u53F7']) R = rowtag['\u884C\u53F7'] - 1;
                            else if (R == -1) R = 0;
                            rowpeat = +rowtag['number-rows-repeated'] || 1;
                            if (rowpeat < 10) {
                                for (i2 = 0; i2 < rowpeat; ++i2)
                                    if (row_ol > 0) rowinfo[R + i2] = { level: row_ol };
                            }
                            C = -1;
                            break;
                        case 'covered-table-cell':
                            if (Rn[1] !== '/') ++C;
                            if (opts.sheetStubs) {
                                if (opts.dense) {
                                    if (!ws[R]) ws[R] = [];
                                    ws[R][C] = { t: 'z' };
                                } else ws[encode_cell({ r: R, c: C })] = { t: 'z' };
                            }
                            textp = '';
                            textR = [];
                            break;
                        case 'table-cell':
                        case '\u6570\u636E':
                            if (Rn[0].charAt(Rn[0].length - 2) === '/') {
                                ++C;
                                ctag = parsexmltag(Rn[0], false);
                                colpeat = parseInt(ctag['number-columns-repeated'] || '1', 10);
                                q = { t: 'z', v: null };
                                if (ctag.formula && opts.cellFormula != false)
                                    q.f = ods_to_csf_formula(unescapexml(ctag.formula));
                                if (
                                    (ctag['\u6570\u636E\u7C7B\u578B'] || ctag['value-type']) ==
                                    'string'
                                ) {
                                    q.t = 's';
                                    q.v = unescapexml(ctag['string-value'] || '');
                                    if (opts.dense) {
                                        if (!ws[R]) ws[R] = [];
                                        ws[R][C] = q;
                                    } else {
                                        ws[encode_cell({ r: R, c: C })] = q;
                                    }
                                }
                                C += colpeat - 1;
                            } else if (Rn[1] !== '/') {
                                ++C;
                                textp = '';
                                textpidx = 0;
                                textR = [];
                                colpeat = 1;
                                var rptR = rowpeat ? R + rowpeat - 1 : R;
                                if (C > range.e.c) range.e.c = C;
                                if (C < range.s.c) range.s.c = C;
                                if (R < range.s.r) range.s.r = R;
                                if (rptR > range.e.r) range.e.r = rptR;
                                ctag = parsexmltag(Rn[0], false);
                                comments = [];
                                comment = {};
                                q = {
                                    t: ctag['\u6570\u636E\u7C7B\u578B'] || ctag['value-type'],
                                    v: null,
                                };
                                if (opts.cellFormula) {
                                    if (ctag.formula) ctag.formula = unescapexml(ctag.formula);
                                    if (
                                        ctag['number-matrix-columns-spanned'] &&
                                        ctag['number-matrix-rows-spanned']
                                    ) {
                                        mR = parseInt(ctag['number-matrix-rows-spanned'], 10) || 0;
                                        mC =
                                            parseInt(ctag['number-matrix-columns-spanned'], 10) ||
                                            0;
                                        mrange = {
                                            s: { r: R, c: C },
                                            e: { r: R + mR - 1, c: C + mC - 1 },
                                        };
                                        q.F = encode_range(mrange);
                                        arrayf.push([mrange, q.F]);
                                    }
                                    if (ctag.formula) q.f = ods_to_csf_formula(ctag.formula);
                                    else
                                        for (i2 = 0; i2 < arrayf.length; ++i2)
                                            if (R >= arrayf[i2][0].s.r && R <= arrayf[i2][0].e.r) {
                                                if (
                                                    C >= arrayf[i2][0].s.c &&
                                                    C <= arrayf[i2][0].e.c
                                                )
                                                    q.F = arrayf[i2][1];
                                            }
                                }
                                if (ctag['number-columns-spanned'] || ctag['number-rows-spanned']) {
                                    mR = parseInt(ctag['number-rows-spanned'], 10) || 0;
                                    mC = parseInt(ctag['number-columns-spanned'], 10) || 0;
                                    mrange = {
                                        s: { r: R, c: C },
                                        e: { r: R + mR - 1, c: C + mC - 1 },
                                    };
                                    merges.push(mrange);
                                }
                                if (ctag['number-columns-repeated'])
                                    colpeat = parseInt(ctag['number-columns-repeated'], 10);
                                switch (q.t) {
                                    case 'boolean':
                                        q.t = 'b';
                                        q.v = parsexmlbool(ctag['boolean-value']);
                                        break;
                                    case 'float':
                                        q.t = 'n';
                                        q.v = parseFloat(ctag.value);
                                        break;
                                    case 'percentage':
                                        q.t = 'n';
                                        q.v = parseFloat(ctag.value);
                                        break;
                                    case 'currency':
                                        q.t = 'n';
                                        q.v = parseFloat(ctag.value);
                                        break;
                                    case 'date':
                                        q.t = 'd';
                                        q.v = parseDate(ctag['date-value']);
                                        if (!opts.cellDates) {
                                            q.t = 'n';
                                            q.v = datenum(q.v);
                                        }
                                        q.z = 'm/d/yy';
                                        break;
                                    case 'time':
                                        q.t = 'n';
                                        q.v = parse_isodur(ctag['time-value']) / 86400;
                                        if (opts.cellDates) {
                                            q.t = 'd';
                                            q.v = numdate(q.v);
                                        }
                                        q.z = 'HH:MM:SS';
                                        break;
                                    case 'number':
                                        q.t = 'n';
                                        q.v = parseFloat(ctag['\u6570\u636E\u6570\u503C']);
                                        break;
                                    default:
                                        if (q.t === 'string' || q.t === 'text' || !q.t) {
                                            q.t = 's';
                                            if (ctag['string-value'] != null) {
                                                textp = unescapexml(ctag['string-value']);
                                                textR = [];
                                            }
                                        } else throw new Error('Unsupported value type ' + q.t);
                                }
                            } else {
                                isstub = false;
                                if (q.t === 's') {
                                    q.v = textp || '';
                                    if (textR.length) q.R = textR;
                                    isstub = textpidx == 0;
                                }
                                if (atag.Target) q.l = atag;
                                if (comments.length > 0) {
                                    q.c = comments;
                                    comments = [];
                                }
                                if (textp && opts.cellText !== false) q.w = textp;
                                if (isstub) {
                                    q.t = 'z';
                                    delete q.v;
                                }
                                if (!isstub || opts.sheetStubs) {
                                    if (!(opts.sheetRows && opts.sheetRows <= R)) {
                                        for (var rpt = 0; rpt < rowpeat; ++rpt) {
                                            colpeat = parseInt(
                                                ctag['number-columns-repeated'] || '1',
                                                10,
                                            );
                                            if (opts.dense) {
                                                if (!ws[R + rpt]) ws[R + rpt] = [];
                                                ws[R + rpt][C] = rpt == 0 ? q : dup(q);
                                                while (--colpeat > 0)
                                                    ws[R + rpt][C + colpeat] = dup(q);
                                            } else {
                                                ws[encode_cell({ r: R + rpt, c: C })] = q;
                                                while (--colpeat > 0)
                                                    ws[
                                                        encode_cell({ r: R + rpt, c: C + colpeat })
                                                    ] = dup(q);
                                            }
                                            if (range.e.c <= C) range.e.c = C;
                                        }
                                    }
                                }
                                colpeat = parseInt(ctag['number-columns-repeated'] || '1', 10);
                                C += colpeat - 1;
                                colpeat = 0;
                                q = {};
                                textp = '';
                                textR = [];
                            }
                            atag = {};
                            break;
                        case 'document':
                        case 'document-content':
                        case '\u7535\u5B50\u8868\u683C\u6587\u6863':
                        case 'spreadsheet':
                        case '\u4E3B\u4F53':
                        case 'scripts':
                        case 'styles':
                        case 'font-face-decls':
                        case 'master-styles':
                            if (Rn[1] === '/') {
                                if ((tmp = state.pop())[0] !== Rn[3]) throw 'Bad state: ' + tmp;
                            } else if (Rn[0].charAt(Rn[0].length - 2) !== '/')
                                state.push([Rn[3], true]);
                            break;
                        case 'annotation':
                            if (Rn[1] === '/') {
                                if ((tmp = state.pop())[0] !== Rn[3]) throw 'Bad state: ' + tmp;
                                comment.t = textp;
                                if (textR.length) comment.R = textR;
                                comment.a = creator;
                                comments.push(comment);
                            } else if (Rn[0].charAt(Rn[0].length - 2) !== '/') {
                                state.push([Rn[3], false]);
                            }
                            creator = '';
                            creatoridx = 0;
                            textp = '';
                            textpidx = 0;
                            textR = [];
                            break;
                        case 'creator':
                            if (Rn[1] === '/') {
                                creator = str.slice(creatoridx, Rn.index);
                            } else creatoridx = Rn.index + Rn[0].length;
                            break;
                        case 'meta':
                        case '\u5143\u6570\u636E':
                        case 'settings':
                        case 'config-item-set':
                        case 'config-item-map-indexed':
                        case 'config-item-map-entry':
                        case 'config-item-map-named':
                        case 'shapes':
                        case 'frame':
                        case 'text-box':
                        case 'image':
                        case 'data-pilot-tables':
                        case 'list-style':
                        case 'form':
                        case 'dde-links':
                        case 'event-listeners':
                        case 'chart':
                            if (Rn[1] === '/') {
                                if ((tmp = state.pop())[0] !== Rn[3]) throw 'Bad state: ' + tmp;
                            } else if (Rn[0].charAt(Rn[0].length - 2) !== '/')
                                state.push([Rn[3], false]);
                            textp = '';
                            textpidx = 0;
                            textR = [];
                            break;
                        case 'scientific-number':
                            break;
                        case 'currency-symbol':
                            break;
                        case 'currency-style':
                            break;
                        case 'number-style':
                        case 'percentage-style':
                        case 'date-style':
                        case 'time-style':
                            if (Rn[1] === '/') {
                                number_format_map[NFtag.name] = NF;
                                if ((tmp = state.pop())[0] !== Rn[3]) throw 'Bad state: ' + tmp;
                            } else if (Rn[0].charAt(Rn[0].length - 2) !== '/') {
                                NF = '';
                                NFtag = parsexmltag(Rn[0], false);
                                state.push([Rn[3], true]);
                            }
                            break;
                        case 'script':
                            break;
                        case 'libraries':
                            break;
                        case 'automatic-styles':
                            break;
                        case 'default-style':
                        case 'page-layout':
                            break;
                        case 'style':
                            break;
                        case 'map':
                            break;
                        case 'font-face':
                            break;
                        case 'paragraph-properties':
                            break;
                        case 'table-properties':
                            break;
                        case 'table-column-properties':
                            break;
                        case 'table-row-properties':
                            break;
                        case 'table-cell-properties':
                            break;
                        case 'number':
                            switch (state[state.length - 1][0]) {
                                case 'time-style':
                                case 'date-style':
                                    tag = parsexmltag(Rn[0], false);
                                    NF += number_formats_ods[Rn[3]][tag.style === 'long' ? 1 : 0];
                                    break;
                            }
                            break;
                        case 'fraction':
                            break;
                        case 'day':
                        case 'month':
                        case 'year':
                        case 'era':
                        case 'day-of-week':
                        case 'week-of-year':
                        case 'quarter':
                        case 'hours':
                        case 'minutes':
                        case 'seconds':
                        case 'am-pm':
                            switch (state[state.length - 1][0]) {
                                case 'time-style':
                                case 'date-style':
                                    tag = parsexmltag(Rn[0], false);
                                    NF += number_formats_ods[Rn[3]][tag.style === 'long' ? 1 : 0];
                                    break;
                            }
                            break;
                        case 'boolean-style':
                            break;
                        case 'boolean':
                            break;
                        case 'text-style':
                            break;
                        case 'text':
                            if (Rn[0].slice(-2) === '/>') break;
                            else if (Rn[1] === '/')
                                switch (state[state.length - 1][0]) {
                                    case 'number-style':
                                    case 'date-style':
                                    case 'time-style':
                                        NF += str.slice(pidx, Rn.index);
                                        break;
                                }
                            else pidx = Rn.index + Rn[0].length;
                            break;
                        case 'named-range':
                            tag = parsexmltag(Rn[0], false);
                            _Ref = ods_to_csf_3D(tag['cell-range-address']);
                            var nrange = { Name: tag.name, Ref: _Ref[0] + '!' + _Ref[1] };
                            if (intable) nrange.Sheet = SheetNames.length;
                            WB.Names.push(nrange);
                            break;
                        case 'text-content':
                            break;
                        case 'text-properties':
                            break;
                        case 'embedded-text':
                            break;
                        case 'body':
                        case '\u7535\u5B50\u8868\u683C':
                            break;
                        case 'forms':
                            break;
                        case 'table-column':
                            break;
                        case 'table-header-rows':
                            break;
                        case 'table-rows':
                            break;
                        case 'table-column-group':
                            break;
                        case 'table-header-columns':
                            break;
                        case 'table-columns':
                            break;
                        case 'null-date':
                            break;
                        case 'graphic-properties':
                            break;
                        case 'calculation-settings':
                            break;
                        case 'named-expressions':
                            break;
                        case 'label-range':
                            break;
                        case 'label-ranges':
                            break;
                        case 'named-expression':
                            break;
                        case 'sort':
                            break;
                        case 'sort-by':
                            break;
                        case 'sort-groups':
                            break;
                        case 'tab':
                            break;
                        case 'line-break':
                            break;
                        case 'span':
                            break;
                        case 'p':
                        case '\u6587\u672C\u4E32':
                            if (['master-styles'].indexOf(state[state.length - 1][0]) > -1) break;
                            if (Rn[1] === '/' && (!ctag || !ctag['string-value'])) {
                                var ptp = parse_text_p(str.slice(textpidx, Rn.index), textptag);
                                textp = (textp.length > 0 ? textp + '\n' : '') + ptp[0];
                            } else {
                                textptag = parsexmltag(Rn[0], false);
                                textpidx = Rn.index + Rn[0].length;
                            }
                            break;
                        case 's':
                            break;
                        case 'database-range':
                            if (Rn[1] === '/') break;
                            try {
                                _Ref = ods_to_csf_3D(parsexmltag(Rn[0])['target-range-address']);
                                Sheets[_Ref[0]]['!autofilter'] = { ref: _Ref[1] };
                            } catch (e2) {}
                            break;
                        case 'date':
                            break;
                        case 'object':
                            break;
                        case 'title':
                        case '\u6807\u9898':
                            break;
                        case 'desc':
                            break;
                        case 'binary-data':
                            break;
                        case 'table-source':
                            break;
                        case 'scenario':
                            break;
                        case 'iteration':
                            break;
                        case 'content-validations':
                            break;
                        case 'content-validation':
                            break;
                        case 'help-message':
                            break;
                        case 'error-message':
                            break;
                        case 'database-ranges':
                            break;
                        case 'filter':
                            break;
                        case 'filter-and':
                            break;
                        case 'filter-or':
                            break;
                        case 'filter-condition':
                            break;
                        case 'list-level-style-bullet':
                            break;
                        case 'list-level-style-number':
                            break;
                        case 'list-level-properties':
                            break;
                        case 'sender-firstname':
                        case 'sender-lastname':
                        case 'sender-initials':
                        case 'sender-title':
                        case 'sender-position':
                        case 'sender-email':
                        case 'sender-phone-private':
                        case 'sender-fax':
                        case 'sender-company':
                        case 'sender-phone-work':
                        case 'sender-street':
                        case 'sender-city':
                        case 'sender-postal-code':
                        case 'sender-country':
                        case 'sender-state-or-province':
                        case 'author-name':
                        case 'author-initials':
                        case 'chapter':
                        case 'file-name':
                        case 'template-name':
                        case 'sheet-name':
                            break;
                        case 'event-listener':
                            break;
                        case 'initial-creator':
                        case 'creation-date':
                        case 'print-date':
                        case 'generator':
                        case 'document-statistic':
                        case 'user-defined':
                        case 'editing-duration':
                        case 'editing-cycles':
                            break;
                        case 'config-item':
                            break;
                        case 'page-number':
                            break;
                        case 'page-count':
                            break;
                        case 'time':
                            break;
                        case 'cell-range-source':
                            break;
                        case 'detective':
                            break;
                        case 'operation':
                            break;
                        case 'highlighted-range':
                            break;
                        case 'data-pilot-table':
                        case 'source-cell-range':
                        case 'source-service':
                        case 'data-pilot-field':
                        case 'data-pilot-level':
                        case 'data-pilot-subtotals':
                        case 'data-pilot-subtotal':
                        case 'data-pilot-members':
                        case 'data-pilot-member':
                        case 'data-pilot-display-info':
                        case 'data-pilot-sort-info':
                        case 'data-pilot-layout-info':
                        case 'data-pilot-field-reference':
                        case 'data-pilot-groups':
                        case 'data-pilot-group':
                        case 'data-pilot-group-member':
                            break;
                        case 'rect':
                            break;
                        case 'dde-connection-decls':
                        case 'dde-connection-decl':
                        case 'dde-link':
                        case 'dde-source':
                            break;
                        case 'properties':
                            break;
                        case 'property':
                            break;
                        case 'a':
                            if (Rn[1] !== '/') {
                                atag = parsexmltag(Rn[0], false);
                                if (!atag.href) break;
                                atag.Target = unescapexml(atag.href);
                                delete atag.href;
                                if (atag.Target.charAt(0) == '#' && atag.Target.indexOf('.') > -1) {
                                    _Ref = ods_to_csf_3D(atag.Target.slice(1));
                                    atag.Target = '#' + _Ref[0] + '!' + _Ref[1];
                                } else if (atag.Target.match(/^\.\.[\\\/]/))
                                    atag.Target = atag.Target.slice(3);
                            }
                            break;
                        case 'table-protection':
                            break;
                        case 'data-pilot-grand-total':
                            break;
                        case 'office-document-common-attrs':
                            break;
                        default:
                            switch (Rn[2]) {
                                case 'dc:':
                                case 'calcext:':
                                case 'loext:':
                                case 'ooo:':
                                case 'chartooo:':
                                case 'draw:':
                                case 'style:':
                                case 'chart:':
                                case 'form:':
                                case 'uof:':
                                case '\u8868:':
                                case '\u5B57:':
                                    break;
                                default:
                                    if (opts.WTF) throw new Error(Rn);
                            }
                    }
                var out = {
                    Sheets,
                    SheetNames,
                    Workbook: WB,
                };
                if (opts.bookSheets) delete out.Sheets;
                return out;
            }
            function parse_ods(zip, opts) {
                opts = opts || {};
                if (safegetzipfile(zip, 'META-INF/manifest.xml'))
                    parse_manifest(getzipdata(zip, 'META-INF/manifest.xml'), opts);
                var content = getzipstr(zip, 'content.xml');
                if (!content) throw new Error('Missing content.xml in ODS / UOF file');
                var wb = parse_content_xml(utf8read(content), opts);
                if (safegetzipfile(zip, 'meta.xml'))
                    wb.Props = parse_core_props(getzipdata(zip, 'meta.xml'));
                return wb;
            }
            function parse_fods(data2, opts) {
                return parse_content_xml(data2, opts);
            }
            var write_styles_ods = /* @__PURE__ */ (function () {
                var master_styles = [
                    '<office:master-styles>',
                    '<style:master-page style:name="mp1" style:page-layout-name="mp1">',
                    '<style:header/>',
                    '<style:header-left style:display="false"/>',
                    '<style:footer/>',
                    '<style:footer-left style:display="false"/>',
                    '</style:master-page>',
                    '</office:master-styles>',
                ].join('');
                var payload =
                    '<office:document-styles ' +
                    wxt_helper({
                        'xmlns:office': 'urn:oasis:names:tc:opendocument:xmlns:office:1.0',
                        'xmlns:table': 'urn:oasis:names:tc:opendocument:xmlns:table:1.0',
                        'xmlns:style': 'urn:oasis:names:tc:opendocument:xmlns:style:1.0',
                        'xmlns:text': 'urn:oasis:names:tc:opendocument:xmlns:text:1.0',
                        'xmlns:draw': 'urn:oasis:names:tc:opendocument:xmlns:drawing:1.0',
                        'xmlns:fo': 'urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0',
                        'xmlns:xlink': 'http://www.w3.org/1999/xlink',
                        'xmlns:dc': 'http://purl.org/dc/elements/1.1/',
                        'xmlns:number': 'urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0',
                        'xmlns:svg': 'urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0',
                        'xmlns:of': 'urn:oasis:names:tc:opendocument:xmlns:of:1.2',
                        'office:version': '1.2',
                    }) +
                    '>' +
                    master_styles +
                    '</office:document-styles>';
                return function wso() {
                    return XML_HEADER + payload;
                };
            })();
            var write_content_ods = /* @__PURE__ */ (function () {
                var write_text_p = function (text3) {
                    return escapexml(text3)
                        .replace(/  +/g, function ($$) {
                            return '<text:s text:c="' + $$.length + '"/>';
                        })
                        .replace(/\t/g, '<text:tab/>')
                        .replace(/\n/g, '</text:p><text:p>')
                        .replace(/^ /, '<text:s/>')
                        .replace(/ $/, '<text:s/>');
                };
                var null_cell_xml = '          <table:table-cell />\n';
                var covered_cell_xml = '          <table:covered-table-cell/>\n';
                var write_ws2 = function (ws, wb, i2) {
                    var o = [];
                    o.push(
                        '      <table:table table:name="' +
                            escapexml(wb.SheetNames[i2]) +
                            '" table:style-name="ta1">\n',
                    );
                    var R = 0,
                        C = 0,
                        range = decode_range(ws['!ref'] || 'A1');
                    var marr = ws['!merges'] || [],
                        mi = 0;
                    var dense = Array.isArray(ws);
                    if (ws['!cols']) {
                        for (C = 0; C <= range.e.c; ++C)
                            o.push(
                                '        <table:table-column' +
                                    (ws['!cols'][C]
                                        ? ' table:style-name="co' + ws['!cols'][C].ods + '"'
                                        : '') +
                                    '></table:table-column>\n',
                            );
                    }
                    var H = '',
                        ROWS = ws['!rows'] || [];
                    for (R = 0; R < range.s.r; ++R) {
                        H = ROWS[R] ? ' table:style-name="ro' + ROWS[R].ods + '"' : '';
                        o.push('        <table:table-row' + H + '></table:table-row>\n');
                    }
                    for (; R <= range.e.r; ++R) {
                        H = ROWS[R] ? ' table:style-name="ro' + ROWS[R].ods + '"' : '';
                        o.push('        <table:table-row' + H + '>\n');
                        for (C = 0; C < range.s.c; ++C) o.push(null_cell_xml);
                        for (; C <= range.e.c; ++C) {
                            var skip = false,
                                ct = {},
                                textp = '';
                            for (mi = 0; mi != marr.length; ++mi) {
                                if (marr[mi].s.c > C) continue;
                                if (marr[mi].s.r > R) continue;
                                if (marr[mi].e.c < C) continue;
                                if (marr[mi].e.r < R) continue;
                                if (marr[mi].s.c != C || marr[mi].s.r != R) skip = true;
                                ct['table:number-columns-spanned'] =
                                    marr[mi].e.c - marr[mi].s.c + 1;
                                ct['table:number-rows-spanned'] = marr[mi].e.r - marr[mi].s.r + 1;
                                break;
                            }
                            if (skip) {
                                o.push(covered_cell_xml);
                                continue;
                            }
                            var ref = encode_cell({ r: R, c: C }),
                                cell = dense ? (ws[R] || [])[C] : ws[ref];
                            if (cell && cell.f) {
                                ct['table:formula'] = escapexml(csf_to_ods_formula(cell.f));
                                if (cell.F) {
                                    if (cell.F.slice(0, ref.length) == ref) {
                                        var _Fref = decode_range(cell.F);
                                        ct['table:number-matrix-columns-spanned'] =
                                            _Fref.e.c - _Fref.s.c + 1;
                                        ct['table:number-matrix-rows-spanned'] =
                                            _Fref.e.r - _Fref.s.r + 1;
                                    }
                                }
                            }
                            if (!cell) {
                                o.push(null_cell_xml);
                                continue;
                            }
                            switch (cell.t) {
                                case 'b':
                                    textp = cell.v ? 'TRUE' : 'FALSE';
                                    ct['office:value-type'] = 'boolean';
                                    ct['office:boolean-value'] = cell.v ? 'true' : 'false';
                                    break;
                                case 'n':
                                    textp = cell.w || String(cell.v || 0);
                                    ct['office:value-type'] = 'float';
                                    ct['office:value'] = cell.v || 0;
                                    break;
                                case 's':
                                case 'str':
                                    textp = cell.v == null ? '' : cell.v;
                                    ct['office:value-type'] = 'string';
                                    break;
                                case 'd':
                                    textp = cell.w || parseDate(cell.v).toISOString();
                                    ct['office:value-type'] = 'date';
                                    ct['office:date-value'] = parseDate(cell.v).toISOString();
                                    ct['table:style-name'] = 'ce1';
                                    break;
                                default:
                                    o.push(null_cell_xml);
                                    continue;
                            }
                            var text_p = write_text_p(textp);
                            if (cell.l && cell.l.Target) {
                                var _tgt = cell.l.Target;
                                _tgt =
                                    _tgt.charAt(0) == '#'
                                        ? '#' + csf_to_ods_3D(_tgt.slice(1))
                                        : _tgt;
                                if (_tgt.charAt(0) != '#' && !_tgt.match(/^\w+:/))
                                    _tgt = '../' + _tgt;
                                text_p = writextag('text:a', text_p, {
                                    'xlink:href': _tgt.replace(/&/g, '&amp;'),
                                });
                            }
                            o.push(
                                '          ' +
                                    writextag(
                                        'table:table-cell',
                                        writextag('text:p', text_p, {}),
                                        ct,
                                    ) +
                                    '\n',
                            );
                        }
                        o.push('        </table:table-row>\n');
                    }
                    o.push('      </table:table>\n');
                    return o.join('');
                };
                var write_automatic_styles_ods = function (o, wb) {
                    o.push(' <office:automatic-styles>\n');
                    o.push(
                        '  <number:date-style style:name="N37" number:automatic-order="true">\n',
                    );
                    o.push('   <number:month number:style="long"/>\n');
                    o.push('   <number:text>/</number:text>\n');
                    o.push('   <number:day number:style="long"/>\n');
                    o.push('   <number:text>/</number:text>\n');
                    o.push('   <number:year/>\n');
                    o.push('  </number:date-style>\n');
                    var cidx = 0;
                    wb.SheetNames.map(function (n) {
                        return wb.Sheets[n];
                    }).forEach(function (ws) {
                        if (!ws) return;
                        if (ws['!cols']) {
                            for (var C = 0; C < ws['!cols'].length; ++C)
                                if (ws['!cols'][C]) {
                                    var colobj = ws['!cols'][C];
                                    if (
                                        colobj.width == null &&
                                        colobj.wpx == null &&
                                        colobj.wch == null
                                    )
                                        continue;
                                    process_col(colobj);
                                    colobj.ods = cidx;
                                    var w = ws['!cols'][C].wpx + 'px';
                                    o.push(
                                        '  <style:style style:name="co' +
                                            cidx +
                                            '" style:family="table-column">\n',
                                    );
                                    o.push(
                                        '   <style:table-column-properties fo:break-before="auto" style:column-width="' +
                                            w +
                                            '"/>\n',
                                    );
                                    o.push('  </style:style>\n');
                                    ++cidx;
                                }
                        }
                    });
                    var ridx = 0;
                    wb.SheetNames.map(function (n) {
                        return wb.Sheets[n];
                    }).forEach(function (ws) {
                        if (!ws) return;
                        if (ws['!rows']) {
                            for (var R = 0; R < ws['!rows'].length; ++R)
                                if (ws['!rows'][R]) {
                                    ws['!rows'][R].ods = ridx;
                                    var h2 = ws['!rows'][R].hpx + 'px';
                                    o.push(
                                        '  <style:style style:name="ro' +
                                            ridx +
                                            '" style:family="table-row">\n',
                                    );
                                    o.push(
                                        '   <style:table-row-properties fo:break-before="auto" style:row-height="' +
                                            h2 +
                                            '"/>\n',
                                    );
                                    o.push('  </style:style>\n');
                                    ++ridx;
                                }
                        }
                    });
                    o.push(
                        '  <style:style style:name="ta1" style:family="table" style:master-page-name="mp1">\n',
                    );
                    o.push(
                        '   <style:table-properties table:display="true" style:writing-mode="lr-tb"/>\n',
                    );
                    o.push('  </style:style>\n');
                    o.push(
                        '  <style:style style:name="ce1" style:family="table-cell" style:parent-style-name="Default" style:data-style-name="N37"/>\n',
                    );
                    o.push(' </office:automatic-styles>\n');
                };
                return function wcx(wb, opts) {
                    var o = [XML_HEADER];
                    var attr2 = wxt_helper({
                        'xmlns:office': 'urn:oasis:names:tc:opendocument:xmlns:office:1.0',
                        'xmlns:table': 'urn:oasis:names:tc:opendocument:xmlns:table:1.0',
                        'xmlns:style': 'urn:oasis:names:tc:opendocument:xmlns:style:1.0',
                        'xmlns:text': 'urn:oasis:names:tc:opendocument:xmlns:text:1.0',
                        'xmlns:draw': 'urn:oasis:names:tc:opendocument:xmlns:drawing:1.0',
                        'xmlns:fo': 'urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0',
                        'xmlns:xlink': 'http://www.w3.org/1999/xlink',
                        'xmlns:dc': 'http://purl.org/dc/elements/1.1/',
                        'xmlns:meta': 'urn:oasis:names:tc:opendocument:xmlns:meta:1.0',
                        'xmlns:number': 'urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0',
                        'xmlns:presentation':
                            'urn:oasis:names:tc:opendocument:xmlns:presentation:1.0',
                        'xmlns:svg': 'urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0',
                        'xmlns:chart': 'urn:oasis:names:tc:opendocument:xmlns:chart:1.0',
                        'xmlns:dr3d': 'urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0',
                        'xmlns:math': 'http://www.w3.org/1998/Math/MathML',
                        'xmlns:form': 'urn:oasis:names:tc:opendocument:xmlns:form:1.0',
                        'xmlns:script': 'urn:oasis:names:tc:opendocument:xmlns:script:1.0',
                        'xmlns:ooo': 'http://openoffice.org/2004/office',
                        'xmlns:ooow': 'http://openoffice.org/2004/writer',
                        'xmlns:oooc': 'http://openoffice.org/2004/calc',
                        'xmlns:dom': 'http://www.w3.org/2001/xml-events',
                        'xmlns:xforms': 'http://www.w3.org/2002/xforms',
                        'xmlns:xsd': 'http://www.w3.org/2001/XMLSchema',
                        'xmlns:xsi': 'http://www.w3.org/2001/XMLSchema-instance',
                        'xmlns:sheet': 'urn:oasis:names:tc:opendocument:sh33tjs:1.0',
                        'xmlns:rpt': 'http://openoffice.org/2005/report',
                        'xmlns:of': 'urn:oasis:names:tc:opendocument:xmlns:of:1.2',
                        'xmlns:xhtml': 'http://www.w3.org/1999/xhtml',
                        'xmlns:grddl': 'http://www.w3.org/2003/g/data-view#',
                        'xmlns:tableooo': 'http://openoffice.org/2009/table',
                        'xmlns:drawooo': 'http://openoffice.org/2010/draw',
                        'xmlns:calcext':
                            'urn:org:documentfoundation:names:experimental:calc:xmlns:calcext:1.0',
                        'xmlns:loext':
                            'urn:org:documentfoundation:names:experimental:office:xmlns:loext:1.0',
                        'xmlns:field':
                            'urn:openoffice:names:experimental:ooo-ms-interop:xmlns:field:1.0',
                        'xmlns:formx':
                            'urn:openoffice:names:experimental:ooxml-odf-interop:xmlns:form:1.0',
                        'xmlns:css3t': 'http://www.w3.org/TR/css3-text/',
                        'office:version': '1.2',
                    });
                    var fods = wxt_helper({
                        'xmlns:config': 'urn:oasis:names:tc:opendocument:xmlns:config:1.0',
                        'office:mimetype': 'application/vnd.oasis.opendocument.spreadsheet',
                    });
                    if (opts.bookType == 'fods') {
                        o.push('<office:document' + attr2 + fods + '>\n');
                        o.push(write_meta_ods().replace(/office:document-meta/g, 'office:meta'));
                    } else o.push('<office:document-content' + attr2 + '>\n');
                    write_automatic_styles_ods(o, wb);
                    o.push('  <office:body>\n');
                    o.push('    <office:spreadsheet>\n');
                    for (var i2 = 0; i2 != wb.SheetNames.length; ++i2)
                        o.push(write_ws2(wb.Sheets[wb.SheetNames[i2]], wb, i2, opts));
                    o.push('    </office:spreadsheet>\n');
                    o.push('  </office:body>\n');
                    if (opts.bookType == 'fods') o.push('</office:document>');
                    else o.push('</office:document-content>');
                    return o.join('');
                };
            })();
            function write_ods(wb, opts) {
                if (opts.bookType == 'fods') return write_content_ods(wb, opts);
                var zip = zip_new();
                var f3 = '';
                var manifest = [];
                var rdf = [];
                f3 = 'mimetype';
                zip_add_file(zip, f3, 'application/vnd.oasis.opendocument.spreadsheet');
                f3 = 'content.xml';
                zip_add_file(zip, f3, write_content_ods(wb, opts));
                manifest.push([f3, 'text/xml']);
                rdf.push([f3, 'ContentFile']);
                f3 = 'styles.xml';
                zip_add_file(zip, f3, write_styles_ods(wb, opts));
                manifest.push([f3, 'text/xml']);
                rdf.push([f3, 'StylesFile']);
                f3 = 'meta.xml';
                zip_add_file(zip, f3, XML_HEADER + write_meta_ods());
                manifest.push([f3, 'text/xml']);
                rdf.push([f3, 'MetadataFile']);
                f3 = 'manifest.rdf';
                zip_add_file(
                    zip,
                    f3,
                    write_rdf(
                        rdf,
                        /*, opts*/
                    ),
                );
                manifest.push([f3, 'application/rdf+xml']);
                f3 = 'META-INF/manifest.xml';
                zip_add_file(
                    zip,
                    f3,
                    write_manifest(
                        manifest,
                        /*, opts*/
                    ),
                );
                return zip;
            }
            function u8_to_dataview(array) {
                return new DataView(array.buffer, array.byteOffset, array.byteLength);
            }
            function u8str(u8) {
                return typeof TextDecoder != 'undefined'
                    ? new TextDecoder().decode(u8)
                    : utf8read(a2s(u8));
            }
            function stru8(str) {
                return typeof TextEncoder != 'undefined'
                    ? new TextEncoder().encode(str)
                    : s2a(utf8write(str));
            }
            function u8contains(body, search) {
                outer: for (var L = 0; L <= body.length - search.length; ++L) {
                    for (var j = 0; j < search.length; ++j)
                        if (body[L + j] != search[j]) continue outer;
                    return true;
                }
                return false;
            }
            function u8concat(u8a) {
                var len = u8a.reduce(function (acc, x2) {
                    return acc + x2.length;
                }, 0);
                var out = new Uint8Array(len);
                var off = 0;
                u8a.forEach(function (u8) {
                    out.set(u8, off);
                    off += u8.length;
                });
                return out;
            }
            function popcnt(x2) {
                x2 -= (x2 >> 1) & 1431655765;
                x2 = (x2 & 858993459) + ((x2 >> 2) & 858993459);
                return (((x2 + (x2 >> 4)) & 252645135) * 16843009) >>> 24;
            }
            function readDecimal128LE(buf, offset) {
                var exp = ((buf[offset + 15] & 127) << 7) | (buf[offset + 14] >> 1);
                var mantissa = buf[offset + 14] & 1;
                for (var j = offset + 13; j >= offset; --j) mantissa = mantissa * 256 + buf[j];
                return (buf[offset + 15] & 128 ? -mantissa : mantissa) * Math.pow(10, exp - 6176);
            }
            function writeDecimal128LE(buf, offset, value) {
                var exp =
                    Math.floor(value == 0 ? 0 : Math.LOG10E * Math.log(Math.abs(value))) +
                    6176 -
                    20;
                var mantissa = value / Math.pow(10, exp - 6176);
                buf[offset + 15] |= exp >> 7;
                buf[offset + 14] |= (exp & 127) << 1;
                for (var i2 = 0; mantissa >= 1; ++i2, mantissa /= 256)
                    buf[offset + i2] = mantissa & 255;
                buf[offset + 15] |= value >= 0 ? 0 : 128;
            }
            function parse_varint49(buf, ptr) {
                var l = ptr ? ptr[0] : 0;
                var usz = buf[l] & 127;
                varint: if (buf[l++] >= 128) {
                    usz |= (buf[l] & 127) << 7;
                    if (buf[l++] < 128) break varint;
                    usz |= (buf[l] & 127) << 14;
                    if (buf[l++] < 128) break varint;
                    usz |= (buf[l] & 127) << 21;
                    if (buf[l++] < 128) break varint;
                    usz += (buf[l] & 127) * Math.pow(2, 28);
                    ++l;
                    if (buf[l++] < 128) break varint;
                    usz += (buf[l] & 127) * Math.pow(2, 35);
                    ++l;
                    if (buf[l++] < 128) break varint;
                    usz += (buf[l] & 127) * Math.pow(2, 42);
                    ++l;
                    if (buf[l++] < 128) break varint;
                }
                if (ptr) ptr[0] = l;
                return usz;
            }
            function write_varint49(v) {
                var usz = new Uint8Array(7);
                usz[0] = v & 127;
                var L = 1;
                sz: if (v > 127) {
                    usz[L - 1] |= 128;
                    usz[L] = (v >> 7) & 127;
                    ++L;
                    if (v <= 16383) break sz;
                    usz[L - 1] |= 128;
                    usz[L] = (v >> 14) & 127;
                    ++L;
                    if (v <= 2097151) break sz;
                    usz[L - 1] |= 128;
                    usz[L] = (v >> 21) & 127;
                    ++L;
                    if (v <= 268435455) break sz;
                    usz[L - 1] |= 128;
                    usz[L] = ((v / 256) >>> 21) & 127;
                    ++L;
                    if (v <= 34359738367) break sz;
                    usz[L - 1] |= 128;
                    usz[L] = ((v / 65536) >>> 21) & 127;
                    ++L;
                    if (v <= 4398046511103) break sz;
                    usz[L - 1] |= 128;
                    usz[L] = ((v / 16777216) >>> 21) & 127;
                    ++L;
                }
                return usz.slice(0, L);
            }
            function varint_to_i32(buf) {
                var l = 0,
                    i32 = buf[l] & 127;
                varint: if (buf[l++] >= 128) {
                    i32 |= (buf[l] & 127) << 7;
                    if (buf[l++] < 128) break varint;
                    i32 |= (buf[l] & 127) << 14;
                    if (buf[l++] < 128) break varint;
                    i32 |= (buf[l] & 127) << 21;
                    if (buf[l++] < 128) break varint;
                    i32 |= (buf[l] & 127) << 28;
                }
                return i32;
            }
            function parse_shallow(buf) {
                var out = [],
                    ptr = [0];
                while (ptr[0] < buf.length) {
                    var off = ptr[0];
                    var num = parse_varint49(buf, ptr);
                    var type = num & 7;
                    num = Math.floor(num / 8);
                    var len = 0;
                    var res;
                    if (num == 0) break;
                    switch (type) {
                        case 0:
                            {
                                var l = ptr[0];
                                while (buf[ptr[0]++] >= 128);
                                res = buf.slice(l, ptr[0]);
                            }
                            break;
                        case 5:
                            len = 4;
                            res = buf.slice(ptr[0], ptr[0] + len);
                            ptr[0] += len;
                            break;
                        case 1:
                            len = 8;
                            res = buf.slice(ptr[0], ptr[0] + len);
                            ptr[0] += len;
                            break;
                        case 2:
                            len = parse_varint49(buf, ptr);
                            res = buf.slice(ptr[0], ptr[0] + len);
                            ptr[0] += len;
                            break;
                        case 3:
                        case 4:
                        default:
                            throw new Error(
                                'PB Type '
                                    .concat(type, ' for Field ')
                                    .concat(num, ' at offset ')
                                    .concat(off),
                            );
                    }
                    var v = { data: res, type };
                    if (out[num] == null) out[num] = [v];
                    else out[num].push(v);
                }
                return out;
            }
            function write_shallow(proto) {
                var out = [];
                proto.forEach(function (field, idx) {
                    field.forEach(function (item) {
                        if (!item.data) return;
                        out.push(write_varint49(idx * 8 + item.type));
                        if (item.type == 2) out.push(write_varint49(item.data.length));
                        out.push(item.data);
                    });
                });
                return u8concat(out);
            }
            function mappa(data2, cb) {
                return (
                    (data2 == null
                        ? void 0
                        : data2.map(function (d) {
                              return cb(d.data);
                          })) || []
                );
            }
            function parse_iwa_file(buf) {
                var _a5;
                var out = [],
                    ptr = [0];
                while (ptr[0] < buf.length) {
                    var len = parse_varint49(buf, ptr);
                    var ai = parse_shallow(buf.slice(ptr[0], ptr[0] + len));
                    ptr[0] += len;
                    var res = {
                        id: varint_to_i32(ai[1][0].data),
                        messages: [],
                    };
                    ai[2].forEach(function (b) {
                        var mi = parse_shallow(b.data);
                        var fl = varint_to_i32(mi[3][0].data);
                        res.messages.push({
                            meta: mi,
                            data: buf.slice(ptr[0], ptr[0] + fl),
                        });
                        ptr[0] += fl;
                    });
                    if ((_a5 = ai[3]) == null ? void 0 : _a5[0])
                        res.merge = varint_to_i32(ai[3][0].data) >>> 0 > 0;
                    out.push(res);
                }
                return out;
            }
            function write_iwa_file(ias) {
                var bufs = [];
                ias.forEach(function (ia) {
                    var ai = [];
                    ai[1] = [{ data: write_varint49(ia.id), type: 0 }];
                    ai[2] = [];
                    if (ia.merge != null) ai[3] = [{ data: write_varint49(+!!ia.merge), type: 0 }];
                    var midata = [];
                    ia.messages.forEach(function (mi) {
                        midata.push(mi.data);
                        mi.meta[3] = [{ type: 0, data: write_varint49(mi.data.length) }];
                        ai[2].push({ data: write_shallow(mi.meta), type: 2 });
                    });
                    var aipayload = write_shallow(ai);
                    bufs.push(write_varint49(aipayload.length));
                    bufs.push(aipayload);
                    midata.forEach(function (mid) {
                        return bufs.push(mid);
                    });
                });
                return u8concat(bufs);
            }
            function parse_snappy_chunk(type, buf) {
                if (type != 0) throw new Error('Unexpected Snappy chunk type '.concat(type));
                var ptr = [0];
                var usz = parse_varint49(buf, ptr);
                var chunks = [];
                while (ptr[0] < buf.length) {
                    var tag = buf[ptr[0]] & 3;
                    if (tag == 0) {
                        var len = buf[ptr[0]++] >> 2;
                        if (len < 60) ++len;
                        else {
                            var c = len - 59;
                            len = buf[ptr[0]];
                            if (c > 1) len |= buf[ptr[0] + 1] << 8;
                            if (c > 2) len |= buf[ptr[0] + 2] << 16;
                            if (c > 3) len |= buf[ptr[0] + 3] << 24;
                            len >>>= 0;
                            len++;
                            ptr[0] += c;
                        }
                        chunks.push(buf.slice(ptr[0], ptr[0] + len));
                        ptr[0] += len;
                        continue;
                    } else {
                        var offset = 0,
                            length = 0;
                        if (tag == 1) {
                            length = ((buf[ptr[0]] >> 2) & 7) + 4;
                            offset = (buf[ptr[0]++] & 224) << 3;
                            offset |= buf[ptr[0]++];
                        } else {
                            length = (buf[ptr[0]++] >> 2) + 1;
                            if (tag == 2) {
                                offset = buf[ptr[0]] | (buf[ptr[0] + 1] << 8);
                                ptr[0] += 2;
                            } else {
                                offset =
                                    (buf[ptr[0]] |
                                        (buf[ptr[0] + 1] << 8) |
                                        (buf[ptr[0] + 2] << 16) |
                                        (buf[ptr[0] + 3] << 24)) >>>
                                    0;
                                ptr[0] += 4;
                            }
                        }
                        chunks = [u8concat(chunks)];
                        if (offset == 0) throw new Error('Invalid offset 0');
                        if (offset > chunks[0].length)
                            throw new Error('Invalid offset beyond length');
                        if (length >= offset) {
                            chunks.push(chunks[0].slice(-offset));
                            length -= offset;
                            while (length >= chunks[chunks.length - 1].length) {
                                chunks.push(chunks[chunks.length - 1]);
                                length -= chunks[chunks.length - 1].length;
                            }
                        }
                        chunks.push(chunks[0].slice(-offset, -offset + length));
                    }
                }
                var o = u8concat(chunks);
                if (o.length != usz)
                    throw new Error('Unexpected length: '.concat(o.length, ' != ').concat(usz));
                return o;
            }
            function decompress_iwa_file(buf) {
                var out = [];
                var l = 0;
                while (l < buf.length) {
                    var t2 = buf[l++];
                    var len = buf[l] | (buf[l + 1] << 8) | (buf[l + 2] << 16);
                    l += 3;
                    out.push(parse_snappy_chunk(t2, buf.slice(l, l + len)));
                    l += len;
                }
                if (l !== buf.length) throw new Error('data is not a valid framed stream!');
                return u8concat(out);
            }
            function compress_iwa_file(buf) {
                var out = [];
                var l = 0;
                while (l < buf.length) {
                    var c = Math.min(buf.length - l, 268435455);
                    var frame = new Uint8Array(4);
                    out.push(frame);
                    var usz = write_varint49(c);
                    var L = usz.length;
                    out.push(usz);
                    if (c <= 60) {
                        L++;
                        out.push(new Uint8Array([(c - 1) << 2]));
                    } else if (c <= 256) {
                        L += 2;
                        out.push(new Uint8Array([240, (c - 1) & 255]));
                    } else if (c <= 65536) {
                        L += 3;
                        out.push(new Uint8Array([244, (c - 1) & 255, ((c - 1) >> 8) & 255]));
                    } else if (c <= 16777216) {
                        L += 4;
                        out.push(
                            new Uint8Array([
                                248,
                                (c - 1) & 255,
                                ((c - 1) >> 8) & 255,
                                ((c - 1) >> 16) & 255,
                            ]),
                        );
                    } else if (c <= 4294967296) {
                        L += 5;
                        out.push(
                            new Uint8Array([
                                252,
                                (c - 1) & 255,
                                ((c - 1) >> 8) & 255,
                                ((c - 1) >> 16) & 255,
                                ((c - 1) >>> 24) & 255,
                            ]),
                        );
                    }
                    out.push(buf.slice(l, l + c));
                    L += c;
                    frame[0] = 0;
                    frame[1] = L & 255;
                    frame[2] = (L >> 8) & 255;
                    frame[3] = (L >> 16) & 255;
                    l += c;
                }
                return u8concat(out);
            }
            function parse_old_storage(buf, sst, rsst, v) {
                var dv = u8_to_dataview(buf);
                var flags = dv.getUint32(4, true);
                var data_offset = (v > 1 ? 12 : 8) + popcnt(flags & (v > 1 ? 3470 : 398)) * 4;
                var ridx = -1,
                    sidx = -1,
                    ieee = NaN,
                    dt = new Date(2001, 0, 1);
                if (flags & 512) {
                    ridx = dv.getUint32(data_offset, true);
                    data_offset += 4;
                }
                data_offset += popcnt(flags & (v > 1 ? 12288 : 4096)) * 4;
                if (flags & 16) {
                    sidx = dv.getUint32(data_offset, true);
                    data_offset += 4;
                }
                if (flags & 32) {
                    ieee = dv.getFloat64(data_offset, true);
                    data_offset += 8;
                }
                if (flags & 64) {
                    dt.setTime(dt.getTime() + dv.getFloat64(data_offset, true) * 1e3);
                    data_offset += 8;
                }
                var ret;
                switch (buf[2]) {
                    case 0:
                        break;
                    case 2:
                        ret = { t: 'n', v: ieee };
                        break;
                    case 3:
                        ret = { t: 's', v: sst[sidx] };
                        break;
                    case 5:
                        ret = { t: 'd', v: dt };
                        break;
                    case 6:
                        ret = { t: 'b', v: ieee > 0 };
                        break;
                    case 7:
                        ret = { t: 'n', v: ieee / 86400 };
                        break;
                    case 8:
                        ret = { t: 'e', v: 0 };
                        break;
                    case 9:
                        {
                            if (ridx > -1) ret = { t: 's', v: rsst[ridx] };
                            else if (sidx > -1) ret = { t: 's', v: sst[sidx] };
                            else if (!isNaN(ieee)) ret = { t: 'n', v: ieee };
                            else throw new Error('Unsupported cell type '.concat(buf.slice(0, 4)));
                        }
                        break;
                    default:
                        throw new Error('Unsupported cell type '.concat(buf.slice(0, 4)));
                }
                return ret;
            }
            function parse_new_storage(buf, sst, rsst) {
                var dv = u8_to_dataview(buf);
                var flags = dv.getUint32(8, true);
                var data_offset = 12;
                var ridx = -1,
                    sidx = -1,
                    d128 = NaN,
                    ieee = NaN,
                    dt = new Date(2001, 0, 1);
                if (flags & 1) {
                    d128 = readDecimal128LE(buf, data_offset);
                    data_offset += 16;
                }
                if (flags & 2) {
                    ieee = dv.getFloat64(data_offset, true);
                    data_offset += 8;
                }
                if (flags & 4) {
                    dt.setTime(dt.getTime() + dv.getFloat64(data_offset, true) * 1e3);
                    data_offset += 8;
                }
                if (flags & 8) {
                    sidx = dv.getUint32(data_offset, true);
                    data_offset += 4;
                }
                if (flags & 16) {
                    ridx = dv.getUint32(data_offset, true);
                    data_offset += 4;
                }
                var ret;
                switch (buf[1]) {
                    case 0:
                        break;
                    case 2:
                        ret = { t: 'n', v: d128 };
                        break;
                    case 3:
                        ret = { t: 's', v: sst[sidx] };
                        break;
                    case 5:
                        ret = { t: 'd', v: dt };
                        break;
                    case 6:
                        ret = { t: 'b', v: ieee > 0 };
                        break;
                    case 7:
                        ret = { t: 'n', v: ieee / 86400 };
                        break;
                    case 8:
                        ret = { t: 'e', v: 0 };
                        break;
                    case 9:
                        {
                            if (ridx > -1) ret = { t: 's', v: rsst[ridx] };
                            else
                                throw new Error(
                                    'Unsupported cell type '
                                        .concat(buf[1], ' : ')
                                        .concat(flags & 31, ' : ')
                                        .concat(buf.slice(0, 4)),
                                );
                        }
                        break;
                    case 10:
                        ret = { t: 'n', v: d128 };
                        break;
                    default:
                        throw new Error(
                            'Unsupported cell type '
                                .concat(buf[1], ' : ')
                                .concat(flags & 31, ' : ')
                                .concat(buf.slice(0, 4)),
                        );
                }
                return ret;
            }
            function write_new_storage(cell, sst) {
                var out = new Uint8Array(32),
                    dv = u8_to_dataview(out),
                    l = 12,
                    flags = 0;
                out[0] = 5;
                switch (cell.t) {
                    case 'n':
                        out[1] = 2;
                        writeDecimal128LE(out, l, cell.v);
                        flags |= 1;
                        l += 16;
                        break;
                    case 'b':
                        out[1] = 6;
                        dv.setFloat64(l, cell.v ? 1 : 0, true);
                        flags |= 2;
                        l += 8;
                        break;
                    case 's':
                        if (sst.indexOf(cell.v) == -1)
                            throw new Error('Value '.concat(cell.v, ' missing from SST!'));
                        out[1] = 3;
                        dv.setUint32(l, sst.indexOf(cell.v), true);
                        flags |= 8;
                        l += 4;
                        break;
                    default:
                        throw 'unsupported cell type ' + cell.t;
                }
                dv.setUint32(8, flags, true);
                return out.slice(0, l);
            }
            function write_old_storage(cell, sst) {
                var out = new Uint8Array(32),
                    dv = u8_to_dataview(out),
                    l = 12,
                    flags = 0;
                out[0] = 3;
                switch (cell.t) {
                    case 'n':
                        out[2] = 2;
                        dv.setFloat64(l, cell.v, true);
                        flags |= 32;
                        l += 8;
                        break;
                    case 'b':
                        out[2] = 6;
                        dv.setFloat64(l, cell.v ? 1 : 0, true);
                        flags |= 32;
                        l += 8;
                        break;
                    case 's':
                        if (sst.indexOf(cell.v) == -1)
                            throw new Error('Value '.concat(cell.v, ' missing from SST!'));
                        out[2] = 3;
                        dv.setUint32(l, sst.indexOf(cell.v), true);
                        flags |= 16;
                        l += 4;
                        break;
                    default:
                        throw 'unsupported cell type ' + cell.t;
                }
                dv.setUint32(4, flags, true);
                return out.slice(0, l);
            }
            function parse_cell_storage(buf, sst, rsst) {
                switch (buf[0]) {
                    case 0:
                    case 1:
                    case 2:
                    case 3:
                        return parse_old_storage(buf, sst, rsst, buf[0]);
                    case 5:
                        return parse_new_storage(buf, sst, rsst);
                    default:
                        throw new Error('Unsupported payload version '.concat(buf[0]));
                }
            }
            function parse_TSP_Reference(buf) {
                var pb = parse_shallow(buf);
                return parse_varint49(pb[1][0].data);
            }
            function write_TSP_Reference(idx) {
                var out = [];
                out[1] = [{ type: 0, data: write_varint49(idx) }];
                return write_shallow(out);
            }
            function parse_TST_TableDataList(M, root3) {
                var pb = parse_shallow(root3.data);
                var type = varint_to_i32(pb[1][0].data);
                var entries = pb[3];
                var data2 = [];
                (entries || []).forEach(function (entry) {
                    var le = parse_shallow(entry.data);
                    var key = varint_to_i32(le[1][0].data) >>> 0;
                    switch (type) {
                        case 1:
                            data2[key] = u8str(le[3][0].data);
                            break;
                        case 8:
                            {
                                var rt = M[parse_TSP_Reference(le[9][0].data)][0];
                                var rtp = parse_shallow(rt.data);
                                var rtpref = M[parse_TSP_Reference(rtp[1][0].data)][0];
                                var mtype = varint_to_i32(rtpref.meta[1][0].data);
                                if (mtype != 2001)
                                    throw new Error('2000 unexpected reference to '.concat(mtype));
                                var tswpsa = parse_shallow(rtpref.data);
                                data2[key] = tswpsa[3]
                                    .map(function (x2) {
                                        return u8str(x2.data);
                                    })
                                    .join('');
                            }
                            break;
                    }
                });
                return data2;
            }
            function parse_TST_TileRowInfo(u8, type) {
                var _a5, _b, _c, _d2, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n;
                var pb = parse_shallow(u8);
                var R = varint_to_i32(pb[1][0].data) >>> 0;
                var cnt = varint_to_i32(pb[2][0].data) >>> 0;
                var wide_offsets =
                    (((_b = (_a5 = pb[8]) == null ? void 0 : _a5[0]) == null ? void 0 : _b.data) &&
                        varint_to_i32(pb[8][0].data) > 0) ||
                    false;
                var used_storage_u8, used_storage;
                if (
                    ((_d2 = (_c = pb[7]) == null ? void 0 : _c[0]) == null ? void 0 : _d2.data) &&
                    type != 0
                ) {
                    used_storage_u8 =
                        (_f = (_e = pb[7]) == null ? void 0 : _e[0]) == null ? void 0 : _f.data;
                    used_storage =
                        (_h = (_g = pb[6]) == null ? void 0 : _g[0]) == null ? void 0 : _h.data;
                } else if (
                    ((_j = (_i = pb[4]) == null ? void 0 : _i[0]) == null ? void 0 : _j.data) &&
                    type != 1
                ) {
                    used_storage_u8 =
                        (_l = (_k = pb[4]) == null ? void 0 : _k[0]) == null ? void 0 : _l.data;
                    used_storage =
                        (_n = (_m = pb[3]) == null ? void 0 : _m[0]) == null ? void 0 : _n.data;
                } else throw 'NUMBERS Tile missing '.concat(type, ' cell storage');
                var width = wide_offsets ? 4 : 1;
                var used_storage_offsets = u8_to_dataview(used_storage_u8);
                var offsets = [];
                for (var C = 0; C < used_storage_u8.length / 2; ++C) {
                    var off = used_storage_offsets.getUint16(C * 2, true);
                    if (off < 65535) offsets.push([C, off]);
                }
                if (offsets.length != cnt)
                    throw 'Expected '.concat(cnt, ' cells, found ').concat(offsets.length);
                var cells = [];
                for (C = 0; C < offsets.length - 1; ++C)
                    cells[offsets[C][0]] = used_storage.subarray(
                        offsets[C][1] * width,
                        offsets[C + 1][1] * width,
                    );
                if (offsets.length >= 1)
                    cells[offsets[offsets.length - 1][0]] = used_storage.subarray(
                        offsets[offsets.length - 1][1] * width,
                    );
                return { R, cells };
            }
            function parse_TST_Tile(M, root3) {
                var _a5;
                var pb = parse_shallow(root3.data);
                var storage = ((_a5 = pb == null ? void 0 : pb[7]) == null ? void 0 : _a5[0])
                    ? varint_to_i32(pb[7][0].data) >>> 0 > 0
                        ? 1
                        : 0
                    : -1;
                var ri = mappa(pb[5], function (u8) {
                    return parse_TST_TileRowInfo(u8, storage);
                });
                return {
                    nrows: varint_to_i32(pb[4][0].data) >>> 0,
                    data: ri.reduce(function (acc, x2) {
                        if (!acc[x2.R]) acc[x2.R] = [];
                        x2.cells.forEach(function (cell, C) {
                            if (acc[x2.R][C])
                                throw new Error('Duplicate cell r='.concat(x2.R, ' c=').concat(C));
                            acc[x2.R][C] = cell;
                        });
                        return acc;
                    }, []),
                };
            }
            function parse_TST_TableModelArchive(M, root3, ws) {
                var _a5;
                var pb = parse_shallow(root3.data);
                var range = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
                range.e.r = (varint_to_i32(pb[6][0].data) >>> 0) - 1;
                if (range.e.r < 0) throw new Error('Invalid row varint '.concat(pb[6][0].data));
                range.e.c = (varint_to_i32(pb[7][0].data) >>> 0) - 1;
                if (range.e.c < 0) throw new Error('Invalid col varint '.concat(pb[7][0].data));
                ws['!ref'] = encode_range(range);
                var store = parse_shallow(pb[4][0].data);
                var sst = parse_TST_TableDataList(M, M[parse_TSP_Reference(store[4][0].data)][0]);
                var rsst = ((_a5 = store[17]) == null ? void 0 : _a5[0])
                    ? parse_TST_TableDataList(M, M[parse_TSP_Reference(store[17][0].data)][0])
                    : [];
                var tile = parse_shallow(store[3][0].data);
                var _R = 0;
                tile[1].forEach(function (t2) {
                    var tl = parse_shallow(t2.data);
                    var ref = M[parse_TSP_Reference(tl[2][0].data)][0];
                    var mtype = varint_to_i32(ref.meta[1][0].data);
                    if (mtype != 6002)
                        throw new Error('6001 unexpected reference to '.concat(mtype));
                    var _tile = parse_TST_Tile(M, ref);
                    _tile.data.forEach(function (row, R) {
                        row.forEach(function (buf, C) {
                            var addr = encode_cell({ r: _R + R, c: C });
                            var res = parse_cell_storage(buf, sst, rsst);
                            if (res) ws[addr] = res;
                        });
                    });
                    _R += _tile.nrows;
                });
            }
            function parse_TST_TableInfoArchive(M, root3) {
                var pb = parse_shallow(root3.data);
                var out = { '!ref': 'A1' };
                var tableref = M[parse_TSP_Reference(pb[2][0].data)];
                var mtype = varint_to_i32(tableref[0].meta[1][0].data);
                if (mtype != 6001) throw new Error('6000 unexpected reference to '.concat(mtype));
                parse_TST_TableModelArchive(M, tableref[0], out);
                return out;
            }
            function parse_TN_SheetArchive(M, root3) {
                var _a5;
                var pb = parse_shallow(root3.data);
                var out = {
                    name: ((_a5 = pb[1]) == null ? void 0 : _a5[0]) ? u8str(pb[1][0].data) : '',
                    sheets: [],
                };
                var shapeoffs = mappa(pb[2], parse_TSP_Reference);
                shapeoffs.forEach(function (off) {
                    M[off].forEach(function (m2) {
                        var mtype = varint_to_i32(m2.meta[1][0].data);
                        if (mtype == 6e3) out.sheets.push(parse_TST_TableInfoArchive(M, m2));
                    });
                });
                return out;
            }
            function parse_TN_DocumentArchive(M, root3) {
                var out = book_new();
                var pb = parse_shallow(root3.data);
                var sheetoffs = mappa(pb[1], parse_TSP_Reference);
                sheetoffs.forEach(function (off) {
                    M[off].forEach(function (m2) {
                        var mtype = varint_to_i32(m2.meta[1][0].data);
                        if (mtype == 2) {
                            var root22 = parse_TN_SheetArchive(M, m2);
                            root22.sheets.forEach(function (sheet, idx) {
                                book_append_sheet(
                                    out,
                                    sheet,
                                    idx == 0 ? root22.name : root22.name + '_' + idx,
                                    true,
                                );
                            });
                        }
                    });
                });
                if (out.SheetNames.length == 0) throw new Error('Empty NUMBERS file');
                return out;
            }
            function parse_numbers_iwa(cfb) {
                var _a5, _b, _c, _d2;
                var M = {},
                    indices = [];
                cfb.FullPaths.forEach(function (p) {
                    if (p.match(/\.iwpv2/)) throw new Error('Unsupported password protection');
                });
                cfb.FileIndex.forEach(function (s2) {
                    if (!s2.name.match(/\.iwa$/)) return;
                    var o;
                    try {
                        o = decompress_iwa_file(s2.content);
                    } catch (e2) {
                        return console.log('?? ' + s2.content.length + ' ' + (e2.message || e2));
                    }
                    var packets;
                    try {
                        packets = parse_iwa_file(o);
                    } catch (e2) {
                        return console.log('## ' + (e2.message || e2));
                    }
                    packets.forEach(function (packet) {
                        M[packet.id] = packet.messages;
                        indices.push(packet.id);
                    });
                });
                if (!indices.length) throw new Error('File has no messages');
                var docroot =
                    ((_d2 =
                        (_c =
                            (_b = (_a5 = M == null ? void 0 : M[1]) == null ? void 0 : _a5[0]) ==
                            null
                                ? void 0
                                : _b.meta) == null
                            ? void 0
                            : _c[1]) == null
                        ? void 0
                        : _d2[0].data) &&
                    varint_to_i32(M[1][0].meta[1][0].data) == 1 &&
                    M[1][0];
                if (!docroot)
                    indices.forEach(function (idx) {
                        M[idx].forEach(function (iwam) {
                            var mtype = varint_to_i32(iwam.meta[1][0].data) >>> 0;
                            if (mtype == 1) {
                                if (!docroot) docroot = iwam;
                                else throw new Error('Document has multiple roots');
                            }
                        });
                    });
                if (!docroot) throw new Error('Cannot find Document root');
                return parse_TN_DocumentArchive(M, docroot);
            }
            function write_tile_row(tri, data2, SST) {
                var _a5, _b, _c, _d2;
                if (
                    !((_a5 = tri[6]) == null ? void 0 : _a5[0]) ||
                    !((_b = tri[7]) == null ? void 0 : _b[0])
                )
                    throw 'Mutation only works on post-BNC storages!';
                var wide_offsets =
                    (((_d2 = (_c = tri[8]) == null ? void 0 : _c[0]) == null ? void 0 : _d2.data) &&
                        varint_to_i32(tri[8][0].data) > 0) ||
                    false;
                if (wide_offsets) throw 'Math only works with normal offsets';
                var cnt = 0;
                var dv = u8_to_dataview(tri[7][0].data),
                    last_offset = 0,
                    cell_storage = [];
                var _dv = u8_to_dataview(tri[4][0].data),
                    _last_offset = 0,
                    _cell_storage = [];
                for (var C = 0; C < data2.length; ++C) {
                    if (data2[C] == null) {
                        dv.setUint16(C * 2, 65535, true);
                        _dv.setUint16(C * 2, 65535);
                        continue;
                    }
                    dv.setUint16(C * 2, last_offset, true);
                    _dv.setUint16(C * 2, _last_offset, true);
                    var celload, _celload;
                    switch (typeof data2[C]) {
                        case 'string':
                            celload = write_new_storage({ t: 's', v: data2[C] }, SST);
                            _celload = write_old_storage({ t: 's', v: data2[C] }, SST);
                            break;
                        case 'number':
                            celload = write_new_storage({ t: 'n', v: data2[C] }, SST);
                            _celload = write_old_storage({ t: 'n', v: data2[C] }, SST);
                            break;
                        case 'boolean':
                            celload = write_new_storage({ t: 'b', v: data2[C] }, SST);
                            _celload = write_old_storage({ t: 'b', v: data2[C] }, SST);
                            break;
                        default:
                            throw new Error('Unsupported value ' + data2[C]);
                    }
                    cell_storage.push(celload);
                    last_offset += celload.length;
                    _cell_storage.push(_celload);
                    _last_offset += _celload.length;
                    ++cnt;
                }
                tri[2][0].data = write_varint49(cnt);
                for (; C < tri[7][0].data.length / 2; ++C) {
                    dv.setUint16(C * 2, 65535, true);
                    _dv.setUint16(C * 2, 65535, true);
                }
                tri[6][0].data = u8concat(cell_storage);
                tri[3][0].data = u8concat(_cell_storage);
                return cnt;
            }
            function write_numbers_iwa(wb, opts) {
                if (!opts || !opts.numbers)
                    throw new Error('Must pass a `numbers` option -- check the README');
                var ws = wb.Sheets[wb.SheetNames[0]];
                if (wb.SheetNames.length > 1)
                    console.error('The Numbers writer currently writes only the first table');
                var range = decode_range(ws['!ref']);
                range.s.r = range.s.c = 0;
                var trunc = false;
                if (range.e.c > 9) {
                    trunc = true;
                    range.e.c = 9;
                }
                if (range.e.r > 49) {
                    trunc = true;
                    range.e.r = 49;
                }
                if (trunc)
                    console.error(
                        'The Numbers writer is currently limited to '.concat(encode_range(range)),
                    );
                var data2 = sheet_to_json(ws, { range, header: 1 });
                var SST = ['~Sh33tJ5~'];
                data2.forEach(function (row) {
                    return row.forEach(function (cell) {
                        if (typeof cell == 'string') SST.push(cell);
                    });
                });
                var dependents = {};
                var indices = [];
                var cfb = CFB.read(opts.numbers, { type: 'base64' });
                cfb.FileIndex.map(function (fi, idx) {
                    return [fi, cfb.FullPaths[idx]];
                }).forEach(function (row) {
                    var fi = row[0],
                        fp = row[1];
                    if (fi.type != 2) return;
                    if (!fi.name.match(/\.iwa/)) return;
                    var old_content = fi.content;
                    var raw1 = decompress_iwa_file(old_content);
                    var x22 = parse_iwa_file(raw1);
                    x22.forEach(function (packet2) {
                        indices.push(packet2.id);
                        dependents[packet2.id] = {
                            deps: [],
                            location: fp,
                            type: varint_to_i32(packet2.messages[0].meta[1][0].data),
                        };
                    });
                });
                indices.sort(function (x22, y2) {
                    return x22 - y2;
                });
                var indices_varint = indices
                    .filter(function (x22) {
                        return x22 > 1;
                    })
                    .map(function (x22) {
                        return [x22, write_varint49(x22)];
                    });
                cfb.FileIndex.map(function (fi, idx) {
                    return [fi, cfb.FullPaths[idx]];
                }).forEach(function (row) {
                    var fi = row[0],
                        fp = row[1];
                    if (!fi.name.match(/\.iwa/)) return;
                    var x22 = parse_iwa_file(decompress_iwa_file(fi.content));
                    x22.forEach(function (ia) {
                        ia.messages.forEach(function (m2) {
                            indices_varint.forEach(function (ivi) {
                                if (
                                    ia.messages.some(function (mess) {
                                        return (
                                            varint_to_i32(mess.meta[1][0].data) != 11006 &&
                                            u8contains(mess.data, ivi[1])
                                        );
                                    })
                                ) {
                                    dependents[ivi[0]].deps.push(ia.id);
                                }
                            });
                        });
                    });
                });
                function get_unique_msgid() {
                    for (var i2 = 927262; i2 < 2e6; ++i2) if (!dependents[i2]) return i2;
                    throw new Error('Too many messages');
                }
                var entry = CFB.find(cfb, dependents[1].location);
                var x2 = parse_iwa_file(decompress_iwa_file(entry.content));
                var docroot;
                for (var xi = 0; xi < x2.length; ++xi) {
                    var packet = x2[xi];
                    if (packet.id == 1) docroot = packet;
                }
                var sheetrootref = parse_TSP_Reference(
                    parse_shallow(docroot.messages[0].data)[1][0].data,
                );
                entry = CFB.find(cfb, dependents[sheetrootref].location);
                x2 = parse_iwa_file(decompress_iwa_file(entry.content));
                for (xi = 0; xi < x2.length; ++xi) {
                    packet = x2[xi];
                    if (packet.id == sheetrootref) docroot = packet;
                }
                sheetrootref = parse_TSP_Reference(
                    parse_shallow(docroot.messages[0].data)[2][0].data,
                );
                entry = CFB.find(cfb, dependents[sheetrootref].location);
                x2 = parse_iwa_file(decompress_iwa_file(entry.content));
                for (xi = 0; xi < x2.length; ++xi) {
                    packet = x2[xi];
                    if (packet.id == sheetrootref) docroot = packet;
                }
                sheetrootref = parse_TSP_Reference(
                    parse_shallow(docroot.messages[0].data)[2][0].data,
                );
                entry = CFB.find(cfb, dependents[sheetrootref].location);
                x2 = parse_iwa_file(decompress_iwa_file(entry.content));
                for (xi = 0; xi < x2.length; ++xi) {
                    packet = x2[xi];
                    if (packet.id == sheetrootref) docroot = packet;
                }
                var pb = parse_shallow(docroot.messages[0].data);
                {
                    pb[6][0].data = write_varint49(range.e.r + 1);
                    pb[7][0].data = write_varint49(range.e.c + 1);
                    var cruidsref = parse_TSP_Reference(pb[46][0].data);
                    var oldbucket = CFB.find(cfb, dependents[cruidsref].location);
                    var _x = parse_iwa_file(decompress_iwa_file(oldbucket.content));
                    {
                        for (var j = 0; j < _x.length; ++j) {
                            if (_x[j].id == cruidsref) break;
                        }
                        if (_x[j].id != cruidsref) throw 'Bad ColumnRowUIDMapArchive';
                        var cruids = parse_shallow(_x[j].messages[0].data);
                        cruids[1] = [];
                        (cruids[2] = []), (cruids[3] = []);
                        for (var C = 0; C <= range.e.c; ++C) {
                            var uuid = [];
                            uuid[1] = uuid[2] = [{ type: 0, data: write_varint49(C + 420690) }];
                            cruids[1].push({ type: 2, data: write_shallow(uuid) });
                            cruids[2].push({ type: 0, data: write_varint49(C) });
                            cruids[3].push({ type: 0, data: write_varint49(C) });
                        }
                        cruids[4] = [];
                        (cruids[5] = []), (cruids[6] = []);
                        for (var R = 0; R <= range.e.r; ++R) {
                            uuid = [];
                            uuid[1] = uuid[2] = [{ type: 0, data: write_varint49(R + 726270) }];
                            cruids[4].push({ type: 2, data: write_shallow(uuid) });
                            cruids[5].push({ type: 0, data: write_varint49(R) });
                            cruids[6].push({ type: 0, data: write_varint49(R) });
                        }
                        _x[j].messages[0].data = write_shallow(cruids);
                    }
                    oldbucket.content = compress_iwa_file(write_iwa_file(_x));
                    oldbucket.size = oldbucket.content.length;
                    delete pb[46];
                    var store = parse_shallow(pb[4][0].data);
                    {
                        store[7][0].data = write_varint49(range.e.r + 1);
                        var row_headers = parse_shallow(store[1][0].data);
                        var row_header_ref = parse_TSP_Reference(row_headers[2][0].data);
                        oldbucket = CFB.find(cfb, dependents[row_header_ref].location);
                        _x = parse_iwa_file(decompress_iwa_file(oldbucket.content));
                        {
                            if (_x[0].id != row_header_ref) throw 'Bad HeaderStorageBucket';
                            var base_bucket = parse_shallow(_x[0].messages[0].data);
                            for (R = 0; R < data2.length; ++R) {
                                var _bucket = parse_shallow(base_bucket[2][0].data);
                                _bucket[1][0].data = write_varint49(R);
                                _bucket[4][0].data = write_varint49(data2[R].length);
                                base_bucket[2][R] = {
                                    type: base_bucket[2][0].type,
                                    data: write_shallow(_bucket),
                                };
                            }
                            _x[0].messages[0].data = write_shallow(base_bucket);
                        }
                        oldbucket.content = compress_iwa_file(write_iwa_file(_x));
                        oldbucket.size = oldbucket.content.length;
                        var col_header_ref = parse_TSP_Reference(store[2][0].data);
                        oldbucket = CFB.find(cfb, dependents[col_header_ref].location);
                        _x = parse_iwa_file(decompress_iwa_file(oldbucket.content));
                        {
                            if (_x[0].id != col_header_ref) throw 'Bad HeaderStorageBucket';
                            base_bucket = parse_shallow(_x[0].messages[0].data);
                            for (C = 0; C <= range.e.c; ++C) {
                                _bucket = parse_shallow(base_bucket[2][0].data);
                                _bucket[1][0].data = write_varint49(C);
                                _bucket[4][0].data = write_varint49(range.e.r + 1);
                                base_bucket[2][C] = {
                                    type: base_bucket[2][0].type,
                                    data: write_shallow(_bucket),
                                };
                            }
                            _x[0].messages[0].data = write_shallow(base_bucket);
                        }
                        oldbucket.content = compress_iwa_file(write_iwa_file(_x));
                        oldbucket.size = oldbucket.content.length;
                        var sstref = parse_TSP_Reference(store[4][0].data);
                        (function () {
                            var sentry = CFB.find(cfb, dependents[sstref].location);
                            var sx = parse_iwa_file(decompress_iwa_file(sentry.content));
                            var sstroot;
                            for (var sxi = 0; sxi < sx.length; ++sxi) {
                                var packet2 = sx[sxi];
                                if (packet2.id == sstref) sstroot = packet2;
                            }
                            var sstdata = parse_shallow(sstroot.messages[0].data);
                            {
                                sstdata[3] = [];
                                var newsst = [];
                                SST.forEach(function (str, i2) {
                                    newsst[1] = [{ type: 0, data: write_varint49(i2) }];
                                    newsst[2] = [{ type: 0, data: write_varint49(1) }];
                                    newsst[3] = [{ type: 2, data: stru8(str) }];
                                    sstdata[3].push({ type: 2, data: write_shallow(newsst) });
                                });
                            }
                            sstroot.messages[0].data = write_shallow(sstdata);
                            var sy = write_iwa_file(sx);
                            var raw32 = compress_iwa_file(sy);
                            sentry.content = raw32;
                            sentry.size = sentry.content.length;
                        })();
                        var tile = parse_shallow(store[3][0].data);
                        {
                            var t2 = tile[1][0];
                            delete tile[2];
                            var tl = parse_shallow(t2.data);
                            {
                                var tileref = parse_TSP_Reference(tl[2][0].data);
                                (function () {
                                    var tentry = CFB.find(cfb, dependents[tileref].location);
                                    var tx = parse_iwa_file(decompress_iwa_file(tentry.content));
                                    var tileroot;
                                    for (var sxi = 0; sxi < tx.length; ++sxi) {
                                        var packet2 = tx[sxi];
                                        if (packet2.id == tileref) tileroot = packet2;
                                    }
                                    var tiledata = parse_shallow(tileroot.messages[0].data);
                                    {
                                        delete tiledata[6];
                                        delete tile[7];
                                        var rowload = new Uint8Array(tiledata[5][0].data);
                                        tiledata[5] = [];
                                        var cnt = 0;
                                        for (var R2 = 0; R2 <= range.e.r; ++R2) {
                                            var tilerow = parse_shallow(rowload);
                                            cnt += write_tile_row(tilerow, data2[R2], SST);
                                            tilerow[1][0].data = write_varint49(R2);
                                            tiledata[5].push({
                                                data: write_shallow(tilerow),
                                                type: 2,
                                            });
                                        }
                                        tiledata[1] = [
                                            { type: 0, data: write_varint49(range.e.c + 1) },
                                        ];
                                        tiledata[2] = [
                                            { type: 0, data: write_varint49(range.e.r + 1) },
                                        ];
                                        tiledata[3] = [{ type: 0, data: write_varint49(cnt) }];
                                        tiledata[4] = [
                                            { type: 0, data: write_varint49(range.e.r + 1) },
                                        ];
                                    }
                                    tileroot.messages[0].data = write_shallow(tiledata);
                                    var ty = write_iwa_file(tx);
                                    var raw32 = compress_iwa_file(ty);
                                    tentry.content = raw32;
                                    tentry.size = tentry.content.length;
                                })();
                            }
                            t2.data = write_shallow(tl);
                        }
                        store[3][0].data = write_shallow(tile);
                    }
                    pb[4][0].data = write_shallow(store);
                }
                docroot.messages[0].data = write_shallow(pb);
                var y = write_iwa_file(x2);
                var raw3 = compress_iwa_file(y);
                entry.content = raw3;
                entry.size = entry.content.length;
                return cfb;
            }
            function fix_opts_func(defaults) {
                return function fix_opts(opts) {
                    for (var i2 = 0; i2 != defaults.length; ++i2) {
                        var d = defaults[i2];
                        if (opts[d[0]] === void 0) opts[d[0]] = d[1];
                        if (d[2] === 'n') opts[d[0]] = Number(opts[d[0]]);
                    }
                };
            }
            function fix_read_opts(opts) {
                fix_opts_func([
                    ['cellNF', false],
                    /* emit cell number format string as .z */
                    ['cellHTML', true],
                    /* emit html string as .h */
                    ['cellFormula', true],
                    /* emit formulae as .f */
                    ['cellStyles', false],
                    /* emits style/theme as .s */
                    ['cellText', true],
                    /* emit formatted text as .w */
                    ['cellDates', false],
                    /* emit date cells with type `d` */
                    ['sheetStubs', false],
                    /* emit empty cells */
                    ['sheetRows', 0, 'n'],
                    /* read n rows (0 = read all rows) */
                    ['bookDeps', false],
                    /* parse calculation chains */
                    ['bookSheets', false],
                    /* only try to get sheet names (no Sheets) */
                    ['bookProps', false],
                    /* only try to get properties (no Sheets) */
                    ['bookFiles', false],
                    /* include raw file structure (keys, files, cfb) */
                    ['bookVBA', false],
                    /* include vba raw data (vbaraw) */
                    ['password', ''],
                    /* password */
                    ['WTF', false],
                    /* WTF mode (throws errors) */
                ])(opts);
            }
            function fix_write_opts(opts) {
                fix_opts_func([
                    ['cellDates', false],
                    /* write date cells with type `d` */
                    ['bookSST', false],
                    /* Generate Shared String Table */
                    ['bookType', 'xlsx'],
                    /* Type of workbook (xlsx/m/b) */
                    ['compression', false],
                    /* Use file compression */
                    ['WTF', false],
                    /* WTF mode (throws errors) */
                ])(opts);
            }
            function get_sheet_type(n) {
                if (RELS.WS.indexOf(n) > -1) return 'sheet';
                if (RELS.CS && n == RELS.CS) return 'chart';
                if (RELS.DS && n == RELS.DS) return 'dialog';
                if (RELS.MS && n == RELS.MS) return 'macro';
                return n && n.length ? n : 'sheet';
            }
            function safe_parse_wbrels(wbrels, sheets) {
                if (!wbrels) return 0;
                try {
                    wbrels = sheets.map(function pwbr(w) {
                        if (!w.id) w.id = w.strRelID;
                        return [
                            w.name,
                            wbrels['!id'][w.id].Target,
                            get_sheet_type(wbrels['!id'][w.id].Type),
                        ];
                    });
                } catch (e2) {
                    return null;
                }
                return !wbrels || wbrels.length === 0 ? null : wbrels;
            }
            function safe_parse_sheet(
                zip,
                path4,
                relsPath,
                sheet,
                idx,
                sheetRels,
                sheets,
                stype,
                opts,
                wb,
                themes,
                styles,
            ) {
                try {
                    sheetRels[sheet] = parse_rels(getzipstr(zip, relsPath, true), path4);
                    var data2 = getzipdata(zip, path4);
                    var _ws;
                    switch (stype) {
                        case 'sheet':
                            _ws = parse_ws(
                                data2,
                                path4,
                                idx,
                                opts,
                                sheetRels[sheet],
                                wb,
                                themes,
                                styles,
                            );
                            break;
                        case 'chart':
                            _ws = parse_cs(
                                data2,
                                path4,
                                idx,
                                opts,
                                sheetRels[sheet],
                                wb,
                                themes,
                                styles,
                            );
                            if (!_ws || !_ws['!drawel']) break;
                            var dfile = resolve_path(_ws['!drawel'].Target, path4);
                            var drelsp = get_rels_path(dfile);
                            var draw = parse_drawing(
                                getzipstr(zip, dfile, true),
                                parse_rels(getzipstr(zip, drelsp, true), dfile),
                            );
                            var chartp = resolve_path(draw, dfile);
                            var crelsp = get_rels_path(chartp);
                            _ws = parse_chart(
                                getzipstr(zip, chartp, true),
                                chartp,
                                opts,
                                parse_rels(getzipstr(zip, crelsp, true), chartp),
                                wb,
                                _ws,
                            );
                            break;
                        case 'macro':
                            _ws = parse_ms(
                                data2,
                                path4,
                                idx,
                                opts,
                                sheetRels[sheet],
                                wb,
                                themes,
                                styles,
                            );
                            break;
                        case 'dialog':
                            _ws = parse_ds(
                                data2,
                                path4,
                                idx,
                                opts,
                                sheetRels[sheet],
                                wb,
                                themes,
                                styles,
                            );
                            break;
                        default:
                            throw new Error('Unrecognized sheet type ' + stype);
                    }
                    sheets[sheet] = _ws;
                    var tcomments = [];
                    if (sheetRels && sheetRels[sheet])
                        keys(sheetRels[sheet]).forEach(function (n) {
                            var dfile2 = '';
                            if (sheetRels[sheet][n].Type == RELS.CMNT) {
                                dfile2 = resolve_path(sheetRels[sheet][n].Target, path4);
                                var comments = parse_cmnt(
                                    getzipdata(zip, dfile2, true),
                                    dfile2,
                                    opts,
                                );
                                if (!comments || !comments.length) return;
                                sheet_insert_comments(_ws, comments, false);
                            }
                            if (sheetRels[sheet][n].Type == RELS.TCMNT) {
                                dfile2 = resolve_path(sheetRels[sheet][n].Target, path4);
                                tcomments = tcomments.concat(
                                    parse_tcmnt_xml(getzipdata(zip, dfile2, true), opts),
                                );
                            }
                        });
                    if (tcomments && tcomments.length)
                        sheet_insert_comments(_ws, tcomments, true, opts.people || []);
                } catch (e2) {
                    if (opts.WTF) throw e2;
                }
            }
            function strip_front_slash(x2) {
                return x2.charAt(0) == '/' ? x2.slice(1) : x2;
            }
            function parse_zip(zip, opts) {
                make_ssf();
                opts = opts || {};
                fix_read_opts(opts);
                if (safegetzipfile(zip, 'META-INF/manifest.xml')) return parse_ods(zip, opts);
                if (safegetzipfile(zip, 'objectdata.xml')) return parse_ods(zip, opts);
                if (safegetzipfile(zip, 'Index/Document.iwa')) {
                    if (typeof Uint8Array == 'undefined')
                        throw new Error('NUMBERS file parsing requires Uint8Array support');
                    if (typeof parse_numbers_iwa != 'undefined') {
                        if (zip.FileIndex) return parse_numbers_iwa(zip);
                        var _zip = CFB.utils.cfb_new();
                        zipentries(zip).forEach(function (e2) {
                            zip_add_file(_zip, e2, getzipbin(zip, e2));
                        });
                        return parse_numbers_iwa(_zip);
                    }
                    throw new Error('Unsupported NUMBERS file');
                }
                if (!safegetzipfile(zip, '[Content_Types].xml')) {
                    if (safegetzipfile(zip, 'index.xml.gz'))
                        throw new Error('Unsupported NUMBERS 08 file');
                    if (safegetzipfile(zip, 'index.xml'))
                        throw new Error('Unsupported NUMBERS 09 file');
                    throw new Error('Unsupported ZIP file');
                }
                var entries = zipentries(zip);
                var dir = parse_ct(getzipstr(zip, '[Content_Types].xml'));
                var xlsb = false;
                var sheets, binname;
                if (dir.workbooks.length === 0) {
                    binname = 'xl/workbook.xml';
                    if (getzipdata(zip, binname, true)) dir.workbooks.push(binname);
                }
                if (dir.workbooks.length === 0) {
                    binname = 'xl/workbook.bin';
                    if (!getzipdata(zip, binname, true)) throw new Error('Could not find workbook');
                    dir.workbooks.push(binname);
                    xlsb = true;
                }
                if (dir.workbooks[0].slice(-3) == 'bin') xlsb = true;
                var themes = {};
                var styles = {};
                if (!opts.bookSheets && !opts.bookProps) {
                    strs = [];
                    if (dir.sst)
                        try {
                            strs = parse_sst(
                                getzipdata(zip, strip_front_slash(dir.sst)),
                                dir.sst,
                                opts,
                            );
                        } catch (e2) {
                            if (opts.WTF) throw e2;
                        }
                    if (opts.cellStyles && dir.themes.length)
                        themes = parse_theme(
                            getzipstr(zip, dir.themes[0].replace(/^\//, ''), true) || '',
                            dir.themes[0],
                            opts,
                        );
                    if (dir.style)
                        styles = parse_sty(
                            getzipdata(zip, strip_front_slash(dir.style)),
                            dir.style,
                            themes,
                            opts,
                        );
                }
                dir.links.map(function (link) {
                    try {
                        var rels = parse_rels(
                            getzipstr(zip, get_rels_path(strip_front_slash(link))),
                            link,
                        );
                        return parse_xlink(
                            getzipdata(zip, strip_front_slash(link)),
                            rels,
                            link,
                            opts,
                        );
                    } catch (e2) {}
                });
                var wb = parse_wb(
                    getzipdata(zip, strip_front_slash(dir.workbooks[0])),
                    dir.workbooks[0],
                    opts,
                );
                var props = {},
                    propdata = '';
                if (dir.coreprops.length) {
                    propdata = getzipdata(zip, strip_front_slash(dir.coreprops[0]), true);
                    if (propdata) props = parse_core_props(propdata);
                    if (dir.extprops.length !== 0) {
                        propdata = getzipdata(zip, strip_front_slash(dir.extprops[0]), true);
                        if (propdata) parse_ext_props(propdata, props, opts);
                    }
                }
                var custprops = {};
                if (!opts.bookSheets || opts.bookProps) {
                    if (dir.custprops.length !== 0) {
                        propdata = getzipstr(zip, strip_front_slash(dir.custprops[0]), true);
                        if (propdata) custprops = parse_cust_props(propdata, opts);
                    }
                }
                var out = {};
                if (opts.bookSheets || opts.bookProps) {
                    if (wb.Sheets)
                        sheets = wb.Sheets.map(function pluck(x2) {
                            return x2.name;
                        });
                    else if (props.Worksheets && props.SheetNames.length > 0)
                        sheets = props.SheetNames;
                    if (opts.bookProps) {
                        out.Props = props;
                        out.Custprops = custprops;
                    }
                    if (opts.bookSheets && typeof sheets !== 'undefined') out.SheetNames = sheets;
                    if (opts.bookSheets ? out.SheetNames : opts.bookProps) return out;
                }
                sheets = {};
                var deps = {};
                if (opts.bookDeps && dir.calcchain)
                    deps = parse_cc(
                        getzipdata(zip, strip_front_slash(dir.calcchain)),
                        dir.calcchain,
                        opts,
                    );
                var i2 = 0;
                var sheetRels = {};
                var path4, relsPath;
                {
                    var wbsheets = wb.Sheets;
                    props.Worksheets = wbsheets.length;
                    props.SheetNames = [];
                    for (var j = 0; j != wbsheets.length; ++j) {
                        props.SheetNames[j] = wbsheets[j].name;
                    }
                }
                var wbext = xlsb ? 'bin' : 'xml';
                var wbrelsi = dir.workbooks[0].lastIndexOf('/');
                var wbrelsfile = (
                    dir.workbooks[0].slice(0, wbrelsi + 1) +
                    '_rels/' +
                    dir.workbooks[0].slice(wbrelsi + 1) +
                    '.rels'
                ).replace(/^\//, '');
                if (!safegetzipfile(zip, wbrelsfile))
                    wbrelsfile = 'xl/_rels/workbook.' + wbext + '.rels';
                var wbrels = parse_rels(
                    getzipstr(zip, wbrelsfile, true),
                    wbrelsfile.replace(/_rels.*/, 's5s'),
                );
                if ((dir.metadata || []).length >= 1) {
                    opts.xlmeta = parse_xlmeta(
                        getzipdata(zip, strip_front_slash(dir.metadata[0])),
                        dir.metadata[0],
                        opts,
                    );
                }
                if ((dir.people || []).length >= 1) {
                    opts.people = parse_people_xml(
                        getzipdata(zip, strip_front_slash(dir.people[0])),
                        opts,
                    );
                }
                if (wbrels) wbrels = safe_parse_wbrels(wbrels, wb.Sheets);
                var nmode = getzipdata(zip, 'xl/worksheets/sheet.xml', true) ? 1 : 0;
                wsloop: for (i2 = 0; i2 != props.Worksheets; ++i2) {
                    var stype = 'sheet';
                    if (wbrels && wbrels[i2]) {
                        path4 = 'xl/' + wbrels[i2][1].replace(/[\/]?xl\//, '');
                        if (!safegetzipfile(zip, path4)) path4 = wbrels[i2][1];
                        if (!safegetzipfile(zip, path4))
                            path4 = wbrelsfile.replace(/_rels\/.*$/, '') + wbrels[i2][1];
                        stype = wbrels[i2][2];
                    } else {
                        path4 = 'xl/worksheets/sheet' + (i2 + 1 - nmode) + '.' + wbext;
                        path4 = path4.replace(/sheet0\./, 'sheet.');
                    }
                    relsPath = path4.replace(/^(.*)(\/)([^\/]*)$/, '$1/_rels/$3.rels');
                    if (opts && opts.sheets != null)
                        switch (typeof opts.sheets) {
                            case 'number':
                                if (i2 != opts.sheets) continue wsloop;
                                break;
                            case 'string':
                                if (props.SheetNames[i2].toLowerCase() != opts.sheets.toLowerCase())
                                    continue wsloop;
                                break;
                            default:
                                if (Array.isArray && Array.isArray(opts.sheets)) {
                                    var snjseen = false;
                                    for (var snj = 0; snj != opts.sheets.length; ++snj) {
                                        if (
                                            typeof opts.sheets[snj] == 'number' &&
                                            opts.sheets[snj] == i2
                                        )
                                            snjseen = 1;
                                        if (
                                            typeof opts.sheets[snj] == 'string' &&
                                            opts.sheets[snj].toLowerCase() ==
                                                props.SheetNames[i2].toLowerCase()
                                        )
                                            snjseen = 1;
                                    }
                                    if (!snjseen) continue wsloop;
                                }
                        }
                    safe_parse_sheet(
                        zip,
                        path4,
                        relsPath,
                        props.SheetNames[i2],
                        i2,
                        sheetRels,
                        sheets,
                        stype,
                        opts,
                        wb,
                        themes,
                        styles,
                    );
                }
                out = {
                    Directory: dir,
                    Workbook: wb,
                    Props: props,
                    Custprops: custprops,
                    Deps: deps,
                    Sheets: sheets,
                    SheetNames: props.SheetNames,
                    Strings: strs,
                    Styles: styles,
                    Themes: themes,
                    SSF: dup(table_fmt),
                };
                if (opts && opts.bookFiles) {
                    if (zip.files) {
                        out.keys = entries;
                        out.files = zip.files;
                    } else {
                        out.keys = [];
                        out.files = {};
                        zip.FullPaths.forEach(function (p, idx) {
                            p = p.replace(/^Root Entry[\/]/, '');
                            out.keys.push(p);
                            out.files[p] = zip.FileIndex[idx];
                        });
                    }
                }
                if (opts && opts.bookVBA) {
                    if (dir.vba.length > 0)
                        out.vbaraw = getzipdata(zip, strip_front_slash(dir.vba[0]), true);
                    else if (dir.defaults && dir.defaults.bin === CT_VBA)
                        out.vbaraw = getzipdata(zip, 'xl/vbaProject.bin', true);
                }
                return out;
            }
            function parse_xlsxcfb(cfb, _opts) {
                var opts = _opts || {};
                var f3 = 'Workbook',
                    data2 = CFB.find(cfb, f3);
                try {
                    f3 = '/!DataSpaces/Version';
                    data2 = CFB.find(cfb, f3);
                    if (!data2 || !data2.content)
                        throw new Error('ECMA-376 Encrypted file missing ' + f3);
                    parse_DataSpaceVersionInfo(data2.content);
                    f3 = '/!DataSpaces/DataSpaceMap';
                    data2 = CFB.find(cfb, f3);
                    if (!data2 || !data2.content)
                        throw new Error('ECMA-376 Encrypted file missing ' + f3);
                    var dsm = parse_DataSpaceMap(data2.content);
                    if (
                        dsm.length !== 1 ||
                        dsm[0].comps.length !== 1 ||
                        dsm[0].comps[0].t !== 0 ||
                        dsm[0].name !== 'StrongEncryptionDataSpace' ||
                        dsm[0].comps[0].v !== 'EncryptedPackage'
                    )
                        throw new Error('ECMA-376 Encrypted file bad ' + f3);
                    f3 = '/!DataSpaces/DataSpaceInfo/StrongEncryptionDataSpace';
                    data2 = CFB.find(cfb, f3);
                    if (!data2 || !data2.content)
                        throw new Error('ECMA-376 Encrypted file missing ' + f3);
                    var seds = parse_DataSpaceDefinition(data2.content);
                    if (seds.length != 1 || seds[0] != 'StrongEncryptionTransform')
                        throw new Error('ECMA-376 Encrypted file bad ' + f3);
                    f3 = '/!DataSpaces/TransformInfo/StrongEncryptionTransform/!Primary';
                    data2 = CFB.find(cfb, f3);
                    if (!data2 || !data2.content)
                        throw new Error('ECMA-376 Encrypted file missing ' + f3);
                    parse_Primary(data2.content);
                } catch (e2) {}
                f3 = '/EncryptionInfo';
                data2 = CFB.find(cfb, f3);
                if (!data2 || !data2.content)
                    throw new Error('ECMA-376 Encrypted file missing ' + f3);
                var einfo = parse_EncryptionInfo(data2.content);
                f3 = '/EncryptedPackage';
                data2 = CFB.find(cfb, f3);
                if (!data2 || !data2.content)
                    throw new Error('ECMA-376 Encrypted file missing ' + f3);
                if (einfo[0] == 4 && typeof decrypt_agile !== 'undefined')
                    return decrypt_agile(einfo[1], data2.content, opts.password || '', opts);
                if (einfo[0] == 2 && typeof decrypt_std76 !== 'undefined')
                    return decrypt_std76(einfo[1], data2.content, opts.password || '', opts);
                throw new Error('File is password-protected');
            }
            function write_zip(wb, opts) {
                if (opts.bookType == 'ods') return write_ods(wb, opts);
                if (opts.bookType == 'numbers') return write_numbers_iwa(wb, opts);
                if (opts.bookType == 'xlsb') return write_zip_xlsxb(wb, opts);
                return write_zip_xlsx(wb, opts);
            }
            function write_zip_xlsxb(wb, opts) {
                _shapeid = 1024;
                if (wb && !wb.SSF) {
                    wb.SSF = dup(table_fmt);
                }
                if (wb && wb.SSF) {
                    make_ssf();
                    SSF_load_table(wb.SSF);
                    opts.revssf = evert_num(wb.SSF);
                    opts.revssf[wb.SSF[65535]] = 0;
                    opts.ssf = wb.SSF;
                }
                opts.rels = {};
                opts.wbrels = {};
                opts.Strings = [];
                opts.Strings.Count = 0;
                opts.Strings.Unique = 0;
                if (browser_has_Map) opts.revStrings = /* @__PURE__ */ new Map();
                else {
                    opts.revStrings = {};
                    opts.revStrings.foo = [];
                    delete opts.revStrings.foo;
                }
                var wbext = opts.bookType == 'xlsb' ? 'bin' : 'xml';
                var vbafmt = VBAFMTS.indexOf(opts.bookType) > -1;
                var ct = new_ct();
                fix_write_opts((opts = opts || {}));
                var zip = zip_new();
                var f3 = '',
                    rId = 0;
                opts.cellXfs = [];
                get_cell_style(opts.cellXfs, {}, { revssf: { General: 0 } });
                if (!wb.Props) wb.Props = {};
                f3 = 'docProps/core.xml';
                zip_add_file(zip, f3, write_core_props(wb.Props, opts));
                ct.coreprops.push(f3);
                add_rels(opts.rels, 2, f3, RELS.CORE_PROPS);
                f3 = 'docProps/app.xml';
                if (wb.Props && wb.Props.SheetNames) {
                } else if (!wb.Workbook || !wb.Workbook.Sheets) wb.Props.SheetNames = wb.SheetNames;
                else {
                    var _sn = [];
                    for (var _i = 0; _i < wb.SheetNames.length; ++_i)
                        if ((wb.Workbook.Sheets[_i] || {}).Hidden != 2) _sn.push(wb.SheetNames[_i]);
                    wb.Props.SheetNames = _sn;
                }
                wb.Props.Worksheets = wb.Props.SheetNames.length;
                zip_add_file(zip, f3, write_ext_props(wb.Props, opts));
                ct.extprops.push(f3);
                add_rels(opts.rels, 3, f3, RELS.EXT_PROPS);
                if (wb.Custprops !== wb.Props && keys(wb.Custprops || {}).length > 0) {
                    f3 = 'docProps/custom.xml';
                    zip_add_file(zip, f3, write_cust_props(wb.Custprops, opts));
                    ct.custprops.push(f3);
                    add_rels(opts.rels, 4, f3, RELS.CUST_PROPS);
                }
                for (rId = 1; rId <= wb.SheetNames.length; ++rId) {
                    var wsrels = { '!id': {} };
                    var ws = wb.Sheets[wb.SheetNames[rId - 1]];
                    var _type2 = (ws || {})['!type'] || 'sheet';
                    switch (_type2) {
                        case 'chart':
                        default:
                            f3 = 'xl/worksheets/sheet' + rId + '.' + wbext;
                            zip_add_file(zip, f3, write_ws(rId - 1, f3, opts, wb, wsrels));
                            ct.sheets.push(f3);
                            add_rels(
                                opts.wbrels,
                                -1,
                                'worksheets/sheet' + rId + '.' + wbext,
                                RELS.WS[0],
                            );
                    }
                    if (ws) {
                        var comments = ws['!comments'];
                        var need_vml = false;
                        var cf = '';
                        if (comments && comments.length > 0) {
                            cf = 'xl/comments' + rId + '.' + wbext;
                            zip_add_file(zip, cf, write_cmnt(comments, cf, opts));
                            ct.comments.push(cf);
                            add_rels(wsrels, -1, '../comments' + rId + '.' + wbext, RELS.CMNT);
                            need_vml = true;
                        }
                        if (ws['!legacy']) {
                            if (need_vml)
                                zip_add_file(
                                    zip,
                                    'xl/drawings/vmlDrawing' + rId + '.vml',
                                    write_comments_vml(rId, ws['!comments']),
                                );
                        }
                        delete ws['!comments'];
                        delete ws['!legacy'];
                    }
                    if (wsrels['!id'].rId1)
                        zip_add_file(zip, get_rels_path(f3), write_rels(wsrels));
                }
                if (opts.Strings != null && opts.Strings.length > 0) {
                    f3 = 'xl/sharedStrings.' + wbext;
                    zip_add_file(zip, f3, write_sst(opts.Strings, f3, opts));
                    ct.strs.push(f3);
                    add_rels(opts.wbrels, -1, 'sharedStrings.' + wbext, RELS.SST);
                }
                f3 = 'xl/workbook.' + wbext;
                zip_add_file(zip, f3, write_wb(wb, f3, opts));
                ct.workbooks.push(f3);
                add_rels(opts.rels, 1, f3, RELS.WB);
                f3 = 'xl/theme/theme1.xml';
                zip_add_file(zip, f3, write_theme(wb.Themes, opts));
                ct.themes.push(f3);
                add_rels(opts.wbrels, -1, 'theme/theme1.xml', RELS.THEME);
                f3 = 'xl/styles.' + wbext;
                zip_add_file(zip, f3, write_sty(wb, f3, opts));
                ct.styles.push(f3);
                add_rels(opts.wbrels, -1, 'styles.' + wbext, RELS.STY);
                if (wb.vbaraw && vbafmt) {
                    f3 = 'xl/vbaProject.bin';
                    zip_add_file(zip, f3, wb.vbaraw);
                    ct.vba.push(f3);
                    add_rels(opts.wbrels, -1, 'vbaProject.bin', RELS.VBA);
                }
                f3 = 'xl/metadata.' + wbext;
                zip_add_file(zip, f3, write_xlmeta(f3));
                ct.metadata.push(f3);
                add_rels(opts.wbrels, -1, 'metadata.' + wbext, RELS.XLMETA);
                zip_add_file(zip, '[Content_Types].xml', write_ct(ct, opts));
                zip_add_file(zip, '_rels/.rels', write_rels(opts.rels));
                zip_add_file(zip, 'xl/_rels/workbook.' + wbext + '.rels', write_rels(opts.wbrels));
                delete opts.revssf;
                delete opts.ssf;
                return zip;
            }
            function write_zip_xlsx(wb, opts) {
                _shapeid = 1024;
                if (wb && !wb.SSF) {
                    wb.SSF = dup(table_fmt);
                }
                if (wb && wb.SSF) {
                    make_ssf();
                    SSF_load_table(wb.SSF);
                    opts.revssf = evert_num(wb.SSF);
                    opts.revssf[wb.SSF[65535]] = 0;
                    opts.ssf = wb.SSF;
                }
                opts.rels = {};
                opts.wbrels = {};
                opts.Strings = [];
                opts.Strings.Count = 0;
                opts.Strings.Unique = 0;
                if (browser_has_Map) opts.revStrings = /* @__PURE__ */ new Map();
                else {
                    opts.revStrings = {};
                    opts.revStrings.foo = [];
                    delete opts.revStrings.foo;
                }
                var wbext = 'xml';
                var vbafmt = VBAFMTS.indexOf(opts.bookType) > -1;
                var ct = new_ct();
                fix_write_opts((opts = opts || {}));
                var zip = zip_new();
                var f3 = '',
                    rId = 0;
                opts.cellXfs = [];
                get_cell_style(opts.cellXfs, {}, { revssf: { General: 0 } });
                if (!wb.Props) wb.Props = {};
                f3 = 'docProps/core.xml';
                zip_add_file(zip, f3, write_core_props(wb.Props, opts));
                ct.coreprops.push(f3);
                add_rels(opts.rels, 2, f3, RELS.CORE_PROPS);
                f3 = 'docProps/app.xml';
                if (wb.Props && wb.Props.SheetNames) {
                } else if (!wb.Workbook || !wb.Workbook.Sheets) wb.Props.SheetNames = wb.SheetNames;
                else {
                    var _sn = [];
                    for (var _i = 0; _i < wb.SheetNames.length; ++_i)
                        if ((wb.Workbook.Sheets[_i] || {}).Hidden != 2) _sn.push(wb.SheetNames[_i]);
                    wb.Props.SheetNames = _sn;
                }
                wb.Props.Worksheets = wb.Props.SheetNames.length;
                zip_add_file(zip, f3, write_ext_props(wb.Props, opts));
                ct.extprops.push(f3);
                add_rels(opts.rels, 3, f3, RELS.EXT_PROPS);
                if (wb.Custprops !== wb.Props && keys(wb.Custprops || {}).length > 0) {
                    f3 = 'docProps/custom.xml';
                    zip_add_file(zip, f3, write_cust_props(wb.Custprops, opts));
                    ct.custprops.push(f3);
                    add_rels(opts.rels, 4, f3, RELS.CUST_PROPS);
                }
                var people = ['SheetJ5'];
                opts.tcid = 0;
                for (rId = 1; rId <= wb.SheetNames.length; ++rId) {
                    var wsrels = { '!id': {} };
                    var ws = wb.Sheets[wb.SheetNames[rId - 1]];
                    var _type2 = (ws || {})['!type'] || 'sheet';
                    switch (_type2) {
                        case 'chart':
                        default:
                            f3 = 'xl/worksheets/sheet' + rId + '.' + wbext;
                            zip_add_file(zip, f3, write_ws_xml(rId - 1, opts, wb, wsrels));
                            ct.sheets.push(f3);
                            add_rels(
                                opts.wbrels,
                                -1,
                                'worksheets/sheet' + rId + '.' + wbext,
                                RELS.WS[0],
                            );
                    }
                    if (ws) {
                        var comments = ws['!comments'];
                        var need_vml = false;
                        var cf = '';
                        if (comments && comments.length > 0) {
                            var needtc = false;
                            comments.forEach(function (carr) {
                                carr[1].forEach(function (c) {
                                    if (c.T == true) needtc = true;
                                });
                            });
                            if (needtc) {
                                cf = 'xl/threadedComments/threadedComment' + rId + '.' + wbext;
                                zip_add_file(zip, cf, write_tcmnt_xml(comments, people, opts));
                                ct.threadedcomments.push(cf);
                                add_rels(
                                    wsrels,
                                    -1,
                                    '../threadedComments/threadedComment' + rId + '.' + wbext,
                                    RELS.TCMNT,
                                );
                            }
                            cf = 'xl/comments' + rId + '.' + wbext;
                            zip_add_file(zip, cf, write_comments_xml(comments, opts));
                            ct.comments.push(cf);
                            add_rels(wsrels, -1, '../comments' + rId + '.' + wbext, RELS.CMNT);
                            need_vml = true;
                        }
                        if (ws['!legacy']) {
                            if (need_vml)
                                zip_add_file(
                                    zip,
                                    'xl/drawings/vmlDrawing' + rId + '.vml',
                                    write_comments_vml(rId, ws['!comments']),
                                );
                        }
                        delete ws['!comments'];
                        delete ws['!legacy'];
                    }
                    if (wsrels['!id'].rId1)
                        zip_add_file(zip, get_rels_path(f3), write_rels(wsrels));
                }
                if (opts.Strings != null && opts.Strings.length > 0) {
                    f3 = 'xl/sharedStrings.' + wbext;
                    zip_add_file(zip, f3, write_sst_xml(opts.Strings, opts));
                    ct.strs.push(f3);
                    add_rels(opts.wbrels, -1, 'sharedStrings.' + wbext, RELS.SST);
                }
                f3 = 'xl/workbook.' + wbext;
                zip_add_file(zip, f3, write_wb_xml(wb, opts));
                ct.workbooks.push(f3);
                add_rels(opts.rels, 1, f3, RELS.WB);
                f3 = 'xl/theme/theme1.xml';
                zip_add_file(zip, f3, write_theme(wb.Themes, opts));
                ct.themes.push(f3);
                add_rels(opts.wbrels, -1, 'theme/theme1.xml', RELS.THEME);
                f3 = 'xl/styles.' + wbext;
                zip_add_file(zip, f3, write_sty_xml(wb, opts));
                ct.styles.push(f3);
                add_rels(opts.wbrels, -1, 'styles.' + wbext, RELS.STY);
                if (wb.vbaraw && vbafmt) {
                    f3 = 'xl/vbaProject.bin';
                    zip_add_file(zip, f3, wb.vbaraw);
                    ct.vba.push(f3);
                    add_rels(opts.wbrels, -1, 'vbaProject.bin', RELS.VBA);
                }
                f3 = 'xl/metadata.' + wbext;
                zip_add_file(zip, f3, write_xlmeta_xml());
                ct.metadata.push(f3);
                add_rels(opts.wbrels, -1, 'metadata.' + wbext, RELS.XLMETA);
                if (people.length > 1) {
                    f3 = 'xl/persons/person.xml';
                    zip_add_file(zip, f3, write_people_xml(people, opts));
                    ct.people.push(f3);
                    add_rels(opts.wbrels, -1, 'persons/person.xml', RELS.PEOPLE);
                }
                zip_add_file(zip, '[Content_Types].xml', write_ct(ct, opts));
                zip_add_file(zip, '_rels/.rels', write_rels(opts.rels));
                zip_add_file(zip, 'xl/_rels/workbook.' + wbext + '.rels', write_rels(opts.wbrels));
                delete opts.revssf;
                delete opts.ssf;
                return zip;
            }
            function firstbyte(f3, o) {
                var x2 = '';
                switch ((o || {}).type || 'base64') {
                    case 'buffer':
                        return [f3[0], f3[1], f3[2], f3[3], f3[4], f3[5], f3[6], f3[7]];
                    case 'base64':
                        x2 = Base64_decode(f3.slice(0, 12));
                        break;
                    case 'binary':
                        x2 = f3;
                        break;
                    case 'array':
                        return [f3[0], f3[1], f3[2], f3[3], f3[4], f3[5], f3[6], f3[7]];
                    default:
                        throw new Error('Unrecognized type ' + ((o && o.type) || 'undefined'));
                }
                return [
                    x2.charCodeAt(0),
                    x2.charCodeAt(1),
                    x2.charCodeAt(2),
                    x2.charCodeAt(3),
                    x2.charCodeAt(4),
                    x2.charCodeAt(5),
                    x2.charCodeAt(6),
                    x2.charCodeAt(7),
                ];
            }
            function read_cfb(cfb, opts) {
                if (CFB.find(cfb, 'EncryptedPackage')) return parse_xlsxcfb(cfb, opts);
                return parse_xlscfb(cfb, opts);
            }
            function read_zip(data2, opts) {
                var zip,
                    d = data2;
                var o = opts || {};
                if (!o.type) o.type = has_buf && Buffer.isBuffer(data2) ? 'buffer' : 'base64';
                zip = zip_read(d, o);
                return parse_zip(zip, o);
            }
            function read_plaintext(data2, o) {
                var i2 = 0;
                main: while (i2 < data2.length)
                    switch (data2.charCodeAt(i2)) {
                        case 10:
                        case 13:
                        case 32:
                            ++i2;
                            break;
                        case 60:
                            return parse_xlml(data2.slice(i2), o);
                        default:
                            break main;
                    }
                return PRN.to_workbook(data2, o);
            }
            function read_plaintext_raw(data2, o) {
                var str = '',
                    bytes = firstbyte(data2, o);
                switch (o.type) {
                    case 'base64':
                        str = Base64_decode(data2);
                        break;
                    case 'binary':
                        str = data2;
                        break;
                    case 'buffer':
                        str = data2.toString('binary');
                        break;
                    case 'array':
                        str = cc2str(data2);
                        break;
                    default:
                        throw new Error('Unrecognized type ' + o.type);
                }
                if (bytes[0] == 239 && bytes[1] == 187 && bytes[2] == 191) str = utf8read(str);
                o.type = 'binary';
                return read_plaintext(str, o);
            }
            function read_utf16(data2, o) {
                var d = data2;
                if (o.type == 'base64') d = Base64_decode(d);
                d = $cptable.utils.decode(1200, d.slice(2), 'str');
                o.type = 'binary';
                return read_plaintext(d, o);
            }
            function bstrify(data2) {
                return !data2.match(/[^\x00-\x7F]/) ? data2 : utf8write(data2);
            }
            function read_prn(data2, d, o, str) {
                if (str) {
                    o.type = 'string';
                    return PRN.to_workbook(data2, o);
                }
                return PRN.to_workbook(d, o);
            }
            function readSync(data2, opts) {
                reset_cp();
                var o = opts || {};
                if (typeof ArrayBuffer !== 'undefined' && data2 instanceof ArrayBuffer)
                    return readSync(new Uint8Array(data2), ((o = dup(o)), (o.type = 'array'), o));
                if (typeof Uint8Array !== 'undefined' && data2 instanceof Uint8Array && !o.type)
                    o.type = typeof Deno !== 'undefined' ? 'buffer' : 'array';
                var d = data2,
                    n = [0, 0, 0, 0],
                    str = false;
                if (o.cellStyles) {
                    o.cellNF = true;
                    o.sheetStubs = true;
                }
                _ssfopts = {};
                if (o.dateNF) _ssfopts.dateNF = o.dateNF;
                if (!o.type) o.type = has_buf && Buffer.isBuffer(data2) ? 'buffer' : 'base64';
                if (o.type == 'file') {
                    o.type = has_buf ? 'buffer' : 'binary';
                    d = read_binary(data2);
                    if (typeof Uint8Array !== 'undefined' && !has_buf) o.type = 'array';
                }
                if (o.type == 'string') {
                    str = true;
                    o.type = 'binary';
                    o.codepage = 65001;
                    d = bstrify(data2);
                }
                if (
                    o.type == 'array' &&
                    typeof Uint8Array !== 'undefined' &&
                    data2 instanceof Uint8Array &&
                    typeof ArrayBuffer !== 'undefined'
                ) {
                    var ab = new ArrayBuffer(3),
                        vu = new Uint8Array(ab);
                    vu.foo = 'bar';
                    if (!vu.foo) {
                        o = dup(o);
                        o.type = 'array';
                        return readSync(ab2a(d), o);
                    }
                }
                switch ((n = firstbyte(d, o))[0]) {
                    case 208:
                        if (
                            n[1] === 207 &&
                            n[2] === 17 &&
                            n[3] === 224 &&
                            n[4] === 161 &&
                            n[5] === 177 &&
                            n[6] === 26 &&
                            n[7] === 225
                        )
                            return read_cfb(CFB.read(d, o), o);
                        break;
                    case 9:
                        if (n[1] <= 8) return parse_xlscfb(d, o);
                        break;
                    case 60:
                        return parse_xlml(d, o);
                    case 73:
                        if (n[1] === 73 && n[2] === 42 && n[3] === 0)
                            throw new Error('TIFF Image File is not a spreadsheet');
                        if (n[1] === 68) return read_wb_ID(d, o);
                        break;
                    case 84:
                        if (n[1] === 65 && n[2] === 66 && n[3] === 76) return DIF.to_workbook(d, o);
                        break;
                    case 80:
                        return n[1] === 75 && n[2] < 9 && n[3] < 9
                            ? read_zip(d, o)
                            : read_prn(data2, d, o, str);
                    case 239:
                        return n[3] === 60 ? parse_xlml(d, o) : read_prn(data2, d, o, str);
                    case 255:
                        if (n[1] === 254) {
                            return read_utf16(d, o);
                        } else if (n[1] === 0 && n[2] === 2 && n[3] === 0)
                            return WK_.to_workbook(d, o);
                        break;
                    case 0:
                        if (n[1] === 0) {
                            if (n[2] >= 2 && n[3] === 0) return WK_.to_workbook(d, o);
                            if (n[2] === 0 && (n[3] === 8 || n[3] === 9))
                                return WK_.to_workbook(d, o);
                        }
                        break;
                    case 3:
                    case 131:
                    case 139:
                    case 140:
                        return DBF.to_workbook(d, o);
                    case 123:
                        if (n[1] === 92 && n[2] === 114 && n[3] === 116)
                            return RTF.to_workbook(d, o);
                        break;
                    case 10:
                    case 13:
                    case 32:
                        return read_plaintext_raw(d, o);
                    case 137:
                        if (n[1] === 80 && n[2] === 78 && n[3] === 71)
                            throw new Error('PNG Image File is not a spreadsheet');
                        break;
                }
                if (DBF_SUPPORTED_VERSIONS.indexOf(n[0]) > -1 && n[2] <= 12 && n[3] <= 31)
                    return DBF.to_workbook(d, o);
                return read_prn(data2, d, o, str);
            }
            function readFileSync2(filename, opts) {
                var o = opts || {};
                o.type = 'file';
                return readSync(filename, o);
            }
            function write_cfb_ctr(cfb, o) {
                switch (o.type) {
                    case 'base64':
                    case 'binary':
                        break;
                    case 'buffer':
                    case 'array':
                        o.type = '';
                        break;
                    case 'file':
                        return write_dl(o.file, CFB.write(cfb, { type: has_buf ? 'buffer' : '' }));
                    case 'string':
                        throw new Error(
                            "'string' output type invalid for '" + o.bookType + "' files",
                        );
                    default:
                        throw new Error('Unrecognized type ' + o.type);
                }
                return CFB.write(cfb, o);
            }
            function write_zip_type(wb, opts) {
                var o = dup(opts || {});
                var z = write_zip(wb, o);
                return write_zip_denouement(z, o);
            }
            function write_zip_typeXLSX(wb, opts) {
                var o = dup(opts || {});
                var z = write_zip_xlsx(wb, o);
                return write_zip_denouement(z, o);
            }
            function write_zip_denouement(z, o) {
                var oopts = {};
                var ftype = has_buf
                    ? 'nodebuffer'
                    : typeof Uint8Array !== 'undefined'
                      ? 'array'
                      : 'string';
                if (o.compression) oopts.compression = 'DEFLATE';
                if (o.password) oopts.type = ftype;
                else
                    switch (o.type) {
                        case 'base64':
                            oopts.type = 'base64';
                            break;
                        case 'binary':
                            oopts.type = 'string';
                            break;
                        case 'string':
                            throw new Error(
                                "'string' output type invalid for '" + o.bookType + "' files",
                            );
                        case 'buffer':
                        case 'file':
                            oopts.type = ftype;
                            break;
                        default:
                            throw new Error('Unrecognized type ' + o.type);
                    }
                var out = z.FullPaths
                    ? CFB.write(z, {
                          fileType: 'zip',
                          type:
                              { nodebuffer: 'buffer', string: 'binary' }[oopts.type] || oopts.type,
                          compression: !!o.compression,
                      })
                    : z.generate(oopts);
                if (typeof Deno !== 'undefined') {
                    if (typeof out == 'string') {
                        if (o.type == 'binary' || o.type == 'base64') return out;
                        out = new Uint8Array(s2ab(out));
                    }
                }
                if (o.password && typeof encrypt_agile !== 'undefined')
                    return write_cfb_ctr(encrypt_agile(out, o.password), o);
                if (o.type === 'file') return write_dl(o.file, out);
                return o.type == 'string' ? utf8read(out) : out;
            }
            function write_cfb_type(wb, opts) {
                var o = opts || {};
                var cfb = write_xlscfb(wb, o);
                return write_cfb_ctr(cfb, o);
            }
            function write_string_type(out, opts, bom) {
                if (!bom) bom = '';
                var o = bom + out;
                switch (opts.type) {
                    case 'base64':
                        return Base64_encode(utf8write(o));
                    case 'binary':
                        return utf8write(o);
                    case 'string':
                        return out;
                    case 'file':
                        return write_dl(opts.file, o, 'utf8');
                    case 'buffer': {
                        if (has_buf) return Buffer_from(o, 'utf8');
                        else if (typeof TextEncoder !== 'undefined')
                            return new TextEncoder().encode(o);
                        else
                            return write_string_type(o, { type: 'binary' })
                                .split('')
                                .map(function (c) {
                                    return c.charCodeAt(0);
                                });
                    }
                }
                throw new Error('Unrecognized type ' + opts.type);
            }
            function write_stxt_type(out, opts) {
                switch (opts.type) {
                    case 'base64':
                        return Base64_encode(out);
                    case 'binary':
                        return out;
                    case 'string':
                        return out;
                    case 'file':
                        return write_dl(opts.file, out, 'binary');
                    case 'buffer': {
                        if (has_buf) return Buffer_from(out, 'binary');
                        else
                            return out.split('').map(function (c) {
                                return c.charCodeAt(0);
                            });
                    }
                }
                throw new Error('Unrecognized type ' + opts.type);
            }
            function write_binary_type(out, opts) {
                switch (opts.type) {
                    case 'string':
                    case 'base64':
                    case 'binary':
                        var bstr = '';
                        for (var i2 = 0; i2 < out.length; ++i2)
                            bstr += String.fromCharCode(out[i2]);
                        return opts.type == 'base64'
                            ? Base64_encode(bstr)
                            : opts.type == 'string'
                              ? utf8read(bstr)
                              : bstr;
                    case 'file':
                        return write_dl(opts.file, out);
                    case 'buffer':
                        return out;
                    default:
                        throw new Error('Unrecognized type ' + opts.type);
                }
            }
            function writeSyncXLSX(wb, opts) {
                reset_cp();
                check_wb(wb);
                var o = dup(opts || {});
                if (o.cellStyles) {
                    o.cellNF = true;
                    o.sheetStubs = true;
                }
                if (o.type == 'array') {
                    o.type = 'binary';
                    var out = writeSyncXLSX(wb, o);
                    o.type = 'array';
                    return s2ab(out);
                }
                return write_zip_typeXLSX(wb, o);
            }
            function writeSync(wb, opts) {
                reset_cp();
                check_wb(wb);
                var o = dup(opts || {});
                if (o.cellStyles) {
                    o.cellNF = true;
                    o.sheetStubs = true;
                }
                if (o.type == 'array') {
                    o.type = 'binary';
                    var out = writeSync(wb, o);
                    o.type = 'array';
                    return s2ab(out);
                }
                var idx = 0;
                if (o.sheet) {
                    if (typeof o.sheet == 'number') idx = o.sheet;
                    else idx = wb.SheetNames.indexOf(o.sheet);
                    if (!wb.SheetNames[idx])
                        throw new Error('Sheet not found: ' + o.sheet + ' : ' + typeof o.sheet);
                }
                switch (o.bookType || 'xlsb') {
                    case 'xml':
                    case 'xlml':
                        return write_string_type(write_xlml(wb, o), o);
                    case 'slk':
                    case 'sylk':
                        return write_string_type(
                            SYLK.from_sheet(wb.Sheets[wb.SheetNames[idx]], o),
                            o,
                        );
                    case 'htm':
                    case 'html':
                        return write_string_type(
                            sheet_to_html(wb.Sheets[wb.SheetNames[idx]], o),
                            o,
                        );
                    case 'txt':
                        return write_stxt_type(sheet_to_txt(wb.Sheets[wb.SheetNames[idx]], o), o);
                    case 'csv':
                        return write_string_type(
                            sheet_to_csv(wb.Sheets[wb.SheetNames[idx]], o),
                            o,
                            '\uFEFF',
                        );
                    case 'dif':
                        return write_string_type(
                            DIF.from_sheet(wb.Sheets[wb.SheetNames[idx]], o),
                            o,
                        );
                    case 'dbf':
                        return write_binary_type(
                            DBF.from_sheet(wb.Sheets[wb.SheetNames[idx]], o),
                            o,
                        );
                    case 'prn':
                        return write_string_type(
                            PRN.from_sheet(wb.Sheets[wb.SheetNames[idx]], o),
                            o,
                        );
                    case 'rtf':
                        return write_string_type(
                            RTF.from_sheet(wb.Sheets[wb.SheetNames[idx]], o),
                            o,
                        );
                    case 'eth':
                        return write_string_type(
                            ETH.from_sheet(wb.Sheets[wb.SheetNames[idx]], o),
                            o,
                        );
                    case 'fods':
                        return write_string_type(write_ods(wb, o), o);
                    case 'wk1':
                        return write_binary_type(
                            WK_.sheet_to_wk1(wb.Sheets[wb.SheetNames[idx]], o),
                            o,
                        );
                    case 'wk3':
                        return write_binary_type(WK_.book_to_wk3(wb, o), o);
                    case 'biff2':
                        if (!o.biff) o.biff = 2;
                    case 'biff3':
                        if (!o.biff) o.biff = 3;
                    case 'biff4':
                        if (!o.biff) o.biff = 4;
                        return write_binary_type(write_biff_buf(wb, o), o);
                    case 'biff5':
                        if (!o.biff) o.biff = 5;
                    case 'biff8':
                    case 'xla':
                    case 'xls':
                        if (!o.biff) o.biff = 8;
                        return write_cfb_type(wb, o);
                    case 'xlsx':
                    case 'xlsm':
                    case 'xlam':
                    case 'xlsb':
                    case 'numbers':
                    case 'ods':
                        return write_zip_type(wb, o);
                    default:
                        throw new Error('Unrecognized bookType |' + o.bookType + '|');
                }
            }
            function resolve_book_type(o) {
                if (o.bookType) return;
                var _BT = {
                    xls: 'biff8',
                    htm: 'html',
                    slk: 'sylk',
                    socialcalc: 'eth',
                    Sh33tJS: 'WTF',
                };
                var ext = o.file.slice(o.file.lastIndexOf('.')).toLowerCase();
                if (ext.match(/^\.[a-z]+$/)) o.bookType = ext.slice(1);
                o.bookType = _BT[o.bookType] || o.bookType;
            }
            function writeFileSync(wb, filename, opts) {
                var o = opts || {};
                o.type = 'file';
                o.file = filename;
                resolve_book_type(o);
                return writeSync(wb, o);
            }
            function writeFileSyncXLSX(wb, filename, opts) {
                var o = opts || {};
                o.type = 'file';
                o.file = filename;
                resolve_book_type(o);
                return writeSyncXLSX(wb, o);
            }
            function writeFileAsync(filename, wb, opts, cb) {
                var o = opts || {};
                o.type = 'file';
                o.file = filename;
                resolve_book_type(o);
                o.type = 'buffer';
                var _cb = cb;
                if (!(_cb instanceof Function)) _cb = opts;
                return _fs.writeFile(filename, writeSync(wb, o), _cb);
            }
            function make_json_row(sheet, r2, R, cols, header, hdr, dense, o) {
                var rr = encode_row(R);
                var defval = o.defval,
                    raw = o.raw || !Object.prototype.hasOwnProperty.call(o, 'raw');
                var isempty = true;
                var row = header === 1 ? [] : {};
                if (header !== 1) {
                    if (Object.defineProperty)
                        try {
                            Object.defineProperty(row, '__rowNum__', {
                                value: R,
                                enumerable: false,
                            });
                        } catch (e2) {
                            row.__rowNum__ = R;
                        }
                    else row.__rowNum__ = R;
                }
                if (!dense || sheet[R])
                    for (var C = r2.s.c; C <= r2.e.c; ++C) {
                        var val2 = dense ? sheet[R][C] : sheet[cols[C] + rr];
                        if (val2 === void 0 || val2.t === void 0) {
                            if (defval === void 0) continue;
                            if (hdr[C] != null) {
                                row[hdr[C]] = defval;
                            }
                            continue;
                        }
                        var v = val2.v;
                        switch (val2.t) {
                            case 'z':
                                if (v == null) break;
                                continue;
                            case 'e':
                                v = v == 0 ? null : void 0;
                                break;
                            case 's':
                            case 'd':
                            case 'b':
                            case 'n':
                                break;
                            default:
                                throw new Error('unrecognized type ' + val2.t);
                        }
                        if (hdr[C] != null) {
                            if (v == null) {
                                if (val2.t == 'e' && v === null) row[hdr[C]] = null;
                                else if (defval !== void 0) row[hdr[C]] = defval;
                                else if (raw && v === null) row[hdr[C]] = null;
                                else continue;
                            } else {
                                row[hdr[C]] =
                                    raw &&
                                    (val2.t !== 'n' || (val2.t === 'n' && o.rawNumbers !== false))
                                        ? v
                                        : format_cell(val2, v, o);
                            }
                            if (v != null) isempty = false;
                        }
                    }
                return { row, isempty };
            }
            function sheet_to_json(sheet, opts) {
                if (sheet == null || sheet['!ref'] == null) return [];
                var val2 = { t: 'n', v: 0 },
                    header = 0,
                    offset = 1,
                    hdr = [],
                    v = 0,
                    vv = '';
                var r2 = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
                var o = opts || {};
                var range = o.range != null ? o.range : sheet['!ref'];
                if (o.header === 1) header = 1;
                else if (o.header === 'A') header = 2;
                else if (Array.isArray(o.header)) header = 3;
                else if (o.header == null) header = 0;
                switch (typeof range) {
                    case 'string':
                        r2 = safe_decode_range(range);
                        break;
                    case 'number':
                        r2 = safe_decode_range(sheet['!ref']);
                        r2.s.r = range;
                        break;
                    default:
                        r2 = range;
                }
                if (header > 0) offset = 0;
                var rr = encode_row(r2.s.r);
                var cols = [];
                var out = [];
                var outi = 0,
                    counter = 0;
                var dense = Array.isArray(sheet);
                var R = r2.s.r,
                    C = 0;
                var header_cnt = {};
                if (dense && !sheet[R]) sheet[R] = [];
                var colinfo = (o.skipHidden && sheet['!cols']) || [];
                var rowinfo = (o.skipHidden && sheet['!rows']) || [];
                for (C = r2.s.c; C <= r2.e.c; ++C) {
                    if ((colinfo[C] || {}).hidden) continue;
                    cols[C] = encode_col(C);
                    val2 = dense ? sheet[R][C] : sheet[cols[C] + rr];
                    switch (header) {
                        case 1:
                            hdr[C] = C - r2.s.c;
                            break;
                        case 2:
                            hdr[C] = cols[C];
                            break;
                        case 3:
                            hdr[C] = o.header[C - r2.s.c];
                            break;
                        default:
                            if (val2 == null) val2 = { w: '__EMPTY', t: 's' };
                            vv = v = format_cell(val2, null, o);
                            counter = header_cnt[v] || 0;
                            if (!counter) header_cnt[v] = 1;
                            else {
                                do {
                                    vv = v + '_' + counter++;
                                } while (header_cnt[vv]);
                                header_cnt[v] = counter;
                                header_cnt[vv] = 1;
                            }
                            hdr[C] = vv;
                    }
                }
                for (R = r2.s.r + offset; R <= r2.e.r; ++R) {
                    if ((rowinfo[R] || {}).hidden) continue;
                    var row = make_json_row(sheet, r2, R, cols, header, hdr, dense, o);
                    if (
                        row.isempty === false ||
                        (header === 1 ? o.blankrows !== false : !!o.blankrows)
                    )
                        out[outi++] = row.row;
                }
                out.length = outi;
                return out;
            }
            var qreg = /"/g;
            function make_csv_row(sheet, r2, R, cols, fs3, rs, FS, o) {
                var isempty = true;
                var row = [],
                    txt = '',
                    rr = encode_row(R);
                for (var C = r2.s.c; C <= r2.e.c; ++C) {
                    if (!cols[C]) continue;
                    var val2 = o.dense ? (sheet[R] || [])[C] : sheet[cols[C] + rr];
                    if (val2 == null) txt = '';
                    else if (val2.v != null) {
                        isempty = false;
                        txt =
                            '' +
                            (o.rawNumbers && val2.t == 'n' ? val2.v : format_cell(val2, null, o));
                        for (var i2 = 0, cc = 0; i2 !== txt.length; ++i2)
                            if (
                                (cc = txt.charCodeAt(i2)) === fs3 ||
                                cc === rs ||
                                cc === 34 ||
                                o.forceQuotes
                            ) {
                                txt = '"' + txt.replace(qreg, '""') + '"';
                                break;
                            }
                        if (txt == 'ID') txt = '"ID"';
                    } else if (val2.f != null && !val2.F) {
                        isempty = false;
                        txt = '=' + val2.f;
                        if (txt.indexOf(',') >= 0) txt = '"' + txt.replace(qreg, '""') + '"';
                    } else txt = '';
                    row.push(txt);
                }
                if (o.blankrows === false && isempty) return null;
                return row.join(FS);
            }
            function sheet_to_csv(sheet, opts) {
                var out = [];
                var o = opts == null ? {} : opts;
                if (sheet == null || sheet['!ref'] == null) return '';
                var r2 = safe_decode_range(sheet['!ref']);
                var FS = o.FS !== void 0 ? o.FS : ',',
                    fs3 = FS.charCodeAt(0);
                var RS = o.RS !== void 0 ? o.RS : '\n',
                    rs = RS.charCodeAt(0);
                var endregex = new RegExp((FS == '|' ? '\\|' : FS) + '+$');
                var row = '',
                    cols = [];
                o.dense = Array.isArray(sheet);
                var colinfo = (o.skipHidden && sheet['!cols']) || [];
                var rowinfo = (o.skipHidden && sheet['!rows']) || [];
                for (var C = r2.s.c; C <= r2.e.c; ++C)
                    if (!(colinfo[C] || {}).hidden) cols[C] = encode_col(C);
                var w = 0;
                for (var R = r2.s.r; R <= r2.e.r; ++R) {
                    if ((rowinfo[R] || {}).hidden) continue;
                    row = make_csv_row(sheet, r2, R, cols, fs3, rs, FS, o);
                    if (row == null) {
                        continue;
                    }
                    if (o.strip) row = row.replace(endregex, '');
                    if (row || o.blankrows !== false) out.push((w++ ? RS : '') + row);
                }
                delete o.dense;
                return out.join('');
            }
            function sheet_to_txt(sheet, opts) {
                if (!opts) opts = {};
                opts.FS = '	';
                opts.RS = '\n';
                var s2 = sheet_to_csv(sheet, opts);
                if (typeof $cptable == 'undefined' || opts.type == 'string') return s2;
                var o = $cptable.utils.encode(1200, s2, 'str');
                return String.fromCharCode(255) + String.fromCharCode(254) + o;
            }
            function sheet_to_formulae(sheet) {
                var y = '',
                    x2,
                    val2 = '';
                if (sheet == null || sheet['!ref'] == null) return [];
                var r2 = safe_decode_range(sheet['!ref']),
                    rr = '',
                    cols = [],
                    C;
                var cmds = [];
                var dense = Array.isArray(sheet);
                for (C = r2.s.c; C <= r2.e.c; ++C) cols[C] = encode_col(C);
                for (var R = r2.s.r; R <= r2.e.r; ++R) {
                    rr = encode_row(R);
                    for (C = r2.s.c; C <= r2.e.c; ++C) {
                        y = cols[C] + rr;
                        x2 = dense ? (sheet[R] || [])[C] : sheet[y];
                        val2 = '';
                        if (x2 === void 0) continue;
                        else if (x2.F != null) {
                            y = x2.F;
                            if (!x2.f) continue;
                            val2 = x2.f;
                            if (y.indexOf(':') == -1) y = y + ':' + y;
                        }
                        if (x2.f != null) val2 = x2.f;
                        else if (x2.t == 'z') continue;
                        else if (x2.t == 'n' && x2.v != null) val2 = '' + x2.v;
                        else if (x2.t == 'b') val2 = x2.v ? 'TRUE' : 'FALSE';
                        else if (x2.w !== void 0) val2 = "'" + x2.w;
                        else if (x2.v === void 0) continue;
                        else if (x2.t == 's') val2 = "'" + x2.v;
                        else val2 = '' + x2.v;
                        cmds[cmds.length] = y + '=' + val2;
                    }
                }
                return cmds;
            }
            function sheet_add_json(_ws, js, opts) {
                var o = opts || {};
                var offset = +!o.skipHeader;
                var ws = _ws || {};
                var _R = 0,
                    _C = 0;
                if (ws && o.origin != null) {
                    if (typeof o.origin == 'number') _R = o.origin;
                    else {
                        var _origin =
                            typeof o.origin == 'string' ? decode_cell(o.origin) : o.origin;
                        _R = _origin.r;
                        _C = _origin.c;
                    }
                }
                var cell;
                var range = { s: { c: 0, r: 0 }, e: { c: _C, r: _R + js.length - 1 + offset } };
                if (ws['!ref']) {
                    var _range = safe_decode_range(ws['!ref']);
                    range.e.c = Math.max(range.e.c, _range.e.c);
                    range.e.r = Math.max(range.e.r, _range.e.r);
                    if (_R == -1) {
                        _R = _range.e.r + 1;
                        range.e.r = _R + js.length - 1 + offset;
                    }
                } else {
                    if (_R == -1) {
                        _R = 0;
                        range.e.r = js.length - 1 + offset;
                    }
                }
                var hdr = o.header || [],
                    C = 0;
                js.forEach(function (JS, R) {
                    keys(JS).forEach(function (k) {
                        if ((C = hdr.indexOf(k)) == -1) hdr[(C = hdr.length)] = k;
                        var v = JS[k];
                        var t2 = 'z';
                        var z = '';
                        var ref = encode_cell({ c: _C + C, r: _R + R + offset });
                        cell = ws_get_cell_stub(ws, ref);
                        if (v && typeof v === 'object' && !(v instanceof Date)) {
                            ws[ref] = v;
                        } else {
                            if (typeof v == 'number') t2 = 'n';
                            else if (typeof v == 'boolean') t2 = 'b';
                            else if (typeof v == 'string') t2 = 's';
                            else if (v instanceof Date) {
                                t2 = 'd';
                                if (!o.cellDates) {
                                    t2 = 'n';
                                    v = datenum(v);
                                }
                                z = o.dateNF || table_fmt[14];
                            } else if (v === null && o.nullError) {
                                t2 = 'e';
                                v = 0;
                            }
                            if (!cell) ws[ref] = cell = { t: t2, v };
                            else {
                                cell.t = t2;
                                cell.v = v;
                                delete cell.w;
                                delete cell.R;
                                if (z) cell.z = z;
                            }
                            if (z) cell.z = z;
                        }
                    });
                });
                range.e.c = Math.max(range.e.c, _C + hdr.length - 1);
                var __R = encode_row(_R);
                if (offset)
                    for (C = 0; C < hdr.length; ++C)
                        ws[encode_col(C + _C) + __R] = { t: 's', v: hdr[C] };
                ws['!ref'] = encode_range(range);
                return ws;
            }
            function json_to_sheet(js, opts) {
                return sheet_add_json(null, js, opts);
            }
            function ws_get_cell_stub(ws, R, C) {
                if (typeof R == 'string') {
                    if (Array.isArray(ws)) {
                        var RC = decode_cell(R);
                        if (!ws[RC.r]) ws[RC.r] = [];
                        return ws[RC.r][RC.c] || (ws[RC.r][RC.c] = { t: 'z' });
                    }
                    return ws[R] || (ws[R] = { t: 'z' });
                }
                if (typeof R != 'number') return ws_get_cell_stub(ws, encode_cell(R));
                return ws_get_cell_stub(ws, encode_cell({ r: R, c: C || 0 }));
            }
            function wb_sheet_idx(wb, sh) {
                if (typeof sh == 'number') {
                    if (sh >= 0 && wb.SheetNames.length > sh) return sh;
                    throw new Error('Cannot find sheet # ' + sh);
                } else if (typeof sh == 'string') {
                    var idx = wb.SheetNames.indexOf(sh);
                    if (idx > -1) return idx;
                    throw new Error('Cannot find sheet name |' + sh + '|');
                } else throw new Error('Cannot find sheet |' + sh + '|');
            }
            function book_new() {
                return { SheetNames: [], Sheets: {} };
            }
            function book_append_sheet(wb, ws, name, roll) {
                var i2 = 1;
                if (!name) {
                    for (; i2 <= 65535; ++i2, name = void 0)
                        if (wb.SheetNames.indexOf((name = 'Sheet' + i2)) == -1) break;
                }
                if (!name || wb.SheetNames.length >= 65535) throw new Error('Too many worksheets');
                if (roll && wb.SheetNames.indexOf(name) >= 0) {
                    var m2 = name.match(/(^.*?)(\d+)$/);
                    i2 = (m2 && +m2[2]) || 0;
                    var root3 = (m2 && m2[1]) || name;
                    for (++i2; i2 <= 65535; ++i2)
                        if (wb.SheetNames.indexOf((name = root3 + i2)) == -1) break;
                }
                check_ws_name(name);
                if (wb.SheetNames.indexOf(name) >= 0)
                    throw new Error('Worksheet with name |' + name + '| already exists!');
                wb.SheetNames.push(name);
                wb.Sheets[name] = ws;
                return name;
            }
            function book_set_sheet_visibility(wb, sh, vis) {
                if (!wb.Workbook) wb.Workbook = {};
                if (!wb.Workbook.Sheets) wb.Workbook.Sheets = [];
                var idx = wb_sheet_idx(wb, sh);
                if (!wb.Workbook.Sheets[idx]) wb.Workbook.Sheets[idx] = {};
                switch (vis) {
                    case 0:
                    case 1:
                    case 2:
                        break;
                    default:
                        throw new Error('Bad sheet visibility setting ' + vis);
                }
                wb.Workbook.Sheets[idx].Hidden = vis;
            }
            function cell_set_number_format(cell, fmt) {
                cell.z = fmt;
                return cell;
            }
            function cell_set_hyperlink(cell, target, tooltip) {
                if (!target) {
                    delete cell.l;
                } else {
                    cell.l = { Target: target };
                    if (tooltip) cell.l.Tooltip = tooltip;
                }
                return cell;
            }
            function cell_set_internal_link(cell, range, tooltip) {
                return cell_set_hyperlink(cell, '#' + range, tooltip);
            }
            function cell_add_comment(cell, text3, author) {
                if (!cell.c) cell.c = [];
                cell.c.push({ t: text3, a: author || 'SheetJS' });
            }
            function sheet_set_array_formula(ws, range, formula, dynamic) {
                var rng = typeof range != 'string' ? range : safe_decode_range(range);
                var rngstr = typeof range == 'string' ? range : encode_range(range);
                for (var R = rng.s.r; R <= rng.e.r; ++R)
                    for (var C = rng.s.c; C <= rng.e.c; ++C) {
                        var cell = ws_get_cell_stub(ws, R, C);
                        cell.t = 'n';
                        cell.F = rngstr;
                        delete cell.v;
                        if (R == rng.s.r && C == rng.s.c) {
                            cell.f = formula;
                            if (dynamic) cell.D = true;
                        }
                    }
                return ws;
            }
            var utils = {
                encode_col,
                encode_row,
                encode_cell,
                encode_range,
                decode_col,
                decode_row,
                split_cell,
                decode_cell,
                decode_range,
                format_cell,
                sheet_add_aoa,
                sheet_add_json,
                sheet_add_dom,
                aoa_to_sheet,
                json_to_sheet,
                table_to_sheet: parse_dom_table,
                table_to_book,
                sheet_to_csv,
                sheet_to_txt,
                sheet_to_json,
                sheet_to_html,
                sheet_to_formulae,
                sheet_to_row_object_array: sheet_to_json,
                sheet_get_cell: ws_get_cell_stub,
                book_new,
                book_append_sheet,
                book_set_sheet_visibility,
                cell_set_number_format,
                cell_set_hyperlink,
                cell_set_internal_link,
                cell_add_comment,
                sheet_set_array_formula,
                consts: {
                    SHEET_VISIBLE: 0,
                    SHEET_HIDDEN: 1,
                    SHEET_VERY_HIDDEN: 2,
                },
            };
            var _Readable;
            function set_readable(R) {
                _Readable = R;
            }
            function write_csv_stream(sheet, opts) {
                var stream = _Readable();
                var o = opts == null ? {} : opts;
                if (sheet == null || sheet['!ref'] == null) {
                    stream.push(null);
                    return stream;
                }
                var r2 = safe_decode_range(sheet['!ref']);
                var FS = o.FS !== void 0 ? o.FS : ',',
                    fs3 = FS.charCodeAt(0);
                var RS = o.RS !== void 0 ? o.RS : '\n',
                    rs = RS.charCodeAt(0);
                var endregex = new RegExp((FS == '|' ? '\\|' : FS) + '+$');
                var row = '',
                    cols = [];
                o.dense = Array.isArray(sheet);
                var colinfo = (o.skipHidden && sheet['!cols']) || [];
                var rowinfo = (o.skipHidden && sheet['!rows']) || [];
                for (var C = r2.s.c; C <= r2.e.c; ++C)
                    if (!(colinfo[C] || {}).hidden) cols[C] = encode_col(C);
                var R = r2.s.r;
                var BOM = false,
                    w = 0;
                stream._read = function () {
                    if (!BOM) {
                        BOM = true;
                        return stream.push('\uFEFF');
                    }
                    while (R <= r2.e.r) {
                        ++R;
                        if ((rowinfo[R - 1] || {}).hidden) continue;
                        row = make_csv_row(sheet, r2, R - 1, cols, fs3, rs, FS, o);
                        if (row != null) {
                            if (o.strip) row = row.replace(endregex, '');
                            if (row || o.blankrows !== false)
                                return stream.push((w++ ? RS : '') + row);
                        }
                    }
                    return stream.push(null);
                };
                return stream;
            }
            function write_html_stream(ws, opts) {
                var stream = _Readable();
                var o = opts || {};
                var header = o.header != null ? o.header : HTML_BEGIN;
                var footer = o.footer != null ? o.footer : HTML_END;
                stream.push(header);
                var r2 = decode_range(ws['!ref']);
                o.dense = Array.isArray(ws);
                stream.push(make_html_preamble(ws, r2, o));
                var R = r2.s.r;
                var end2 = false;
                stream._read = function () {
                    if (R > r2.e.r) {
                        if (!end2) {
                            end2 = true;
                            stream.push('</table>' + footer);
                        }
                        return stream.push(null);
                    }
                    while (R <= r2.e.r) {
                        stream.push(make_html_row(ws, r2, R, o));
                        ++R;
                        break;
                    }
                };
                return stream;
            }
            function write_json_stream(sheet, opts) {
                var stream = _Readable({ objectMode: true });
                if (sheet == null || sheet['!ref'] == null) {
                    stream.push(null);
                    return stream;
                }
                var val2 = { t: 'n', v: 0 },
                    header = 0,
                    offset = 1,
                    hdr = [],
                    v = 0,
                    vv = '';
                var r2 = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
                var o = opts || {};
                var range = o.range != null ? o.range : sheet['!ref'];
                if (o.header === 1) header = 1;
                else if (o.header === 'A') header = 2;
                else if (Array.isArray(o.header)) header = 3;
                switch (typeof range) {
                    case 'string':
                        r2 = safe_decode_range(range);
                        break;
                    case 'number':
                        r2 = safe_decode_range(sheet['!ref']);
                        r2.s.r = range;
                        break;
                    default:
                        r2 = range;
                }
                if (header > 0) offset = 0;
                var rr = encode_row(r2.s.r);
                var cols = [];
                var counter = 0;
                var dense = Array.isArray(sheet);
                var R = r2.s.r,
                    C = 0;
                var header_cnt = {};
                if (dense && !sheet[R]) sheet[R] = [];
                var colinfo = (o.skipHidden && sheet['!cols']) || [];
                var rowinfo = (o.skipHidden && sheet['!rows']) || [];
                for (C = r2.s.c; C <= r2.e.c; ++C) {
                    if ((colinfo[C] || {}).hidden) continue;
                    cols[C] = encode_col(C);
                    val2 = dense ? sheet[R][C] : sheet[cols[C] + rr];
                    switch (header) {
                        case 1:
                            hdr[C] = C - r2.s.c;
                            break;
                        case 2:
                            hdr[C] = cols[C];
                            break;
                        case 3:
                            hdr[C] = o.header[C - r2.s.c];
                            break;
                        default:
                            if (val2 == null) val2 = { w: '__EMPTY', t: 's' };
                            vv = v = format_cell(val2, null, o);
                            counter = header_cnt[v] || 0;
                            if (!counter) header_cnt[v] = 1;
                            else {
                                do {
                                    vv = v + '_' + counter++;
                                } while (header_cnt[vv]);
                                header_cnt[v] = counter;
                                header_cnt[vv] = 1;
                            }
                            hdr[C] = vv;
                    }
                }
                R = r2.s.r + offset;
                stream._read = function () {
                    while (R <= r2.e.r) {
                        if ((rowinfo[R - 1] || {}).hidden) continue;
                        var row = make_json_row(sheet, r2, R, cols, header, hdr, dense, o);
                        ++R;
                        if (
                            row.isempty === false ||
                            (header === 1 ? o.blankrows !== false : !!o.blankrows)
                        ) {
                            stream.push(row.row);
                            return;
                        }
                    }
                    return stream.push(null);
                };
                return stream;
            }
            var __stream = {
                to_json: write_json_stream,
                to_html: write_html_stream,
                to_csv: write_csv_stream,
                set_readable,
            };
            if (typeof parse_xlscfb !== 'undefined') XLSX3.parse_xlscfb = parse_xlscfb;
            XLSX3.parse_zip = parse_zip;
            XLSX3.read = readSync;
            XLSX3.readFile = readFileSync2;
            XLSX3.readFileSync = readFileSync2;
            XLSX3.write = writeSync;
            XLSX3.writeFile = writeFileSync;
            XLSX3.writeFileSync = writeFileSync;
            XLSX3.writeFileAsync = writeFileAsync;
            XLSX3.utils = utils;
            XLSX3.writeXLSX = writeSyncXLSX;
            XLSX3.writeFileXLSX = writeFileSyncXLSX;
            XLSX3.SSF = SSF;
            if (typeof __stream !== 'undefined') XLSX3.stream = __stream;
            if (typeof CFB !== 'undefined') XLSX3.CFB = CFB;
            if (typeof require !== 'undefined') {
                var strmod = require('stream');
                if ((strmod || {}).Readable) set_readable(strmod.Readable);
            }
        }
        if (typeof exports2 !== 'undefined') make_xlsx_lib(exports2);
        else if (typeof module2 !== 'undefined' && module2.exports) make_xlsx_lib(module2.exports);
        else if (typeof define === 'function' && define.amd)
            define('xlsx', function () {
                if (!XLSX2.version) make_xlsx_lib(XLSX2);
                return XLSX2;
            });
        else make_xlsx_lib(XLSX2);
        if (typeof window !== 'undefined' && !window.XLSX)
            try {
                window.XLSX = XLSX2;
            } catch (e2) {}
    },
});

// node_modules/universalify/index.js
var require_universalify = __commonJS({
    'node_modules/universalify/index.js'(exports2) {
        'use strict';
        exports2.fromCallback = function (fn) {
            return Object.defineProperty(
                function (...args) {
                    if (typeof args[args.length - 1] === 'function') fn.apply(this, args);
                    else {
                        return new Promise((resolve, reject) => {
                            args.push((err, res) => (err != null ? reject(err) : resolve(res)));
                            fn.apply(this, args);
                        });
                    }
                },
                'name',
                { value: fn.name },
            );
        };
        exports2.fromPromise = function (fn) {
            return Object.defineProperty(
                function (...args) {
                    const cb = args[args.length - 1];
                    if (typeof cb !== 'function') return fn.apply(this, args);
                    else {
                        args.pop();
                        fn.apply(this, args).then((r2) => cb(null, r2), cb);
                    }
                },
                'name',
                { value: fn.name },
            );
        };
    },
});

// node_modules/graceful-fs/polyfills.js
var require_polyfills = __commonJS({
    'node_modules/graceful-fs/polyfills.js'(exports2, module2) {
        var constants3 = require('constants');
        var origCwd = process.cwd;
        var cwd = null;
        var platform = process.env.GRACEFUL_FS_PLATFORM || process.platform;
        process.cwd = function () {
            if (!cwd) cwd = origCwd.call(process);
            return cwd;
        };
        try {
            process.cwd();
        } catch (er) {}
        if (typeof process.chdir === 'function') {
            chdir = process.chdir;
            process.chdir = function (d) {
                cwd = null;
                chdir.call(process, d);
            };
            if (Object.setPrototypeOf) Object.setPrototypeOf(process.chdir, chdir);
        }
        var chdir;
        module2.exports = patch;
        function patch(fs3) {
            if (
                constants3.hasOwnProperty('O_SYMLINK') &&
                process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)
            ) {
                patchLchmod(fs3);
            }
            if (!fs3.lutimes) {
                patchLutimes(fs3);
            }
            fs3.chown = chownFix(fs3.chown);
            fs3.fchown = chownFix(fs3.fchown);
            fs3.lchown = chownFix(fs3.lchown);
            fs3.chmod = chmodFix(fs3.chmod);
            fs3.fchmod = chmodFix(fs3.fchmod);
            fs3.lchmod = chmodFix(fs3.lchmod);
            fs3.chownSync = chownFixSync(fs3.chownSync);
            fs3.fchownSync = chownFixSync(fs3.fchownSync);
            fs3.lchownSync = chownFixSync(fs3.lchownSync);
            fs3.chmodSync = chmodFixSync(fs3.chmodSync);
            fs3.fchmodSync = chmodFixSync(fs3.fchmodSync);
            fs3.lchmodSync = chmodFixSync(fs3.lchmodSync);
            fs3.stat = statFix(fs3.stat);
            fs3.fstat = statFix(fs3.fstat);
            fs3.lstat = statFix(fs3.lstat);
            fs3.statSync = statFixSync(fs3.statSync);
            fs3.fstatSync = statFixSync(fs3.fstatSync);
            fs3.lstatSync = statFixSync(fs3.lstatSync);
            if (fs3.chmod && !fs3.lchmod) {
                fs3.lchmod = function (path4, mode, cb) {
                    if (cb) process.nextTick(cb);
                };
                fs3.lchmodSync = function () {};
            }
            if (fs3.chown && !fs3.lchown) {
                fs3.lchown = function (path4, uid, gid, cb) {
                    if (cb) process.nextTick(cb);
                };
                fs3.lchownSync = function () {};
            }
            if (platform === 'win32') {
                fs3.rename =
                    typeof fs3.rename !== 'function'
                        ? fs3.rename
                        : (function (fs$rename) {
                              function rename(from, to, cb) {
                                  var start = Date.now();
                                  var backoff = 0;
                                  fs$rename(from, to, function CB(er) {
                                      if (
                                          er &&
                                          (er.code === 'EACCES' ||
                                              er.code === 'EPERM' ||
                                              er.code === 'EBUSY') &&
                                          Date.now() - start < 6e4
                                      ) {
                                          setTimeout(function () {
                                              fs3.stat(to, function (stater, st) {
                                                  if (stater && stater.code === 'ENOENT')
                                                      fs$rename(from, to, CB);
                                                  else cb(er);
                                              });
                                          }, backoff);
                                          if (backoff < 100) backoff += 10;
                                          return;
                                      }
                                      if (cb) cb(er);
                                  });
                              }
                              if (Object.setPrototypeOf) Object.setPrototypeOf(rename, fs$rename);
                              return rename;
                          })(fs3.rename);
            }
            fs3.read =
                typeof fs3.read !== 'function'
                    ? fs3.read
                    : (function (fs$read) {
                          function read(fd, buffer, offset, length, position, callback_) {
                              var callback;
                              if (callback_ && typeof callback_ === 'function') {
                                  var eagCounter = 0;
                                  callback = function (er, _, __) {
                                      if (er && er.code === 'EAGAIN' && eagCounter < 10) {
                                          eagCounter++;
                                          return fs$read.call(
                                              fs3,
                                              fd,
                                              buffer,
                                              offset,
                                              length,
                                              position,
                                              callback,
                                          );
                                      }
                                      callback_.apply(this, arguments);
                                  };
                              }
                              return fs$read.call(
                                  fs3,
                                  fd,
                                  buffer,
                                  offset,
                                  length,
                                  position,
                                  callback,
                              );
                          }
                          if (Object.setPrototypeOf) Object.setPrototypeOf(read, fs$read);
                          return read;
                      })(fs3.read);
            fs3.readSync =
                typeof fs3.readSync !== 'function'
                    ? fs3.readSync
                    : /* @__PURE__ */ (function (fs$readSync) {
                          return function (fd, buffer, offset, length, position) {
                              var eagCounter = 0;
                              while (true) {
                                  try {
                                      return fs$readSync.call(
                                          fs3,
                                          fd,
                                          buffer,
                                          offset,
                                          length,
                                          position,
                                      );
                                  } catch (er) {
                                      if (er.code === 'EAGAIN' && eagCounter < 10) {
                                          eagCounter++;
                                          continue;
                                      }
                                      throw er;
                                  }
                              }
                          };
                      })(fs3.readSync);
            function patchLchmod(fs4) {
                fs4.lchmod = function (path4, mode, callback) {
                    fs4.open(
                        path4,
                        constants3.O_WRONLY | constants3.O_SYMLINK,
                        mode,
                        function (err, fd) {
                            if (err) {
                                if (callback) callback(err);
                                return;
                            }
                            fs4.fchmod(fd, mode, function (err2) {
                                fs4.close(fd, function (err22) {
                                    if (callback) callback(err2 || err22);
                                });
                            });
                        },
                    );
                };
                fs4.lchmodSync = function (path4, mode) {
                    var fd = fs4.openSync(path4, constants3.O_WRONLY | constants3.O_SYMLINK, mode);
                    var threw = true;
                    var ret;
                    try {
                        ret = fs4.fchmodSync(fd, mode);
                        threw = false;
                    } finally {
                        if (threw) {
                            try {
                                fs4.closeSync(fd);
                            } catch (er) {}
                        } else {
                            fs4.closeSync(fd);
                        }
                    }
                    return ret;
                };
            }
            function patchLutimes(fs4) {
                if (constants3.hasOwnProperty('O_SYMLINK') && fs4.futimes) {
                    fs4.lutimes = function (path4, at, mt, cb) {
                        fs4.open(path4, constants3.O_SYMLINK, function (er, fd) {
                            if (er) {
                                if (cb) cb(er);
                                return;
                            }
                            fs4.futimes(fd, at, mt, function (er2) {
                                fs4.close(fd, function (er22) {
                                    if (cb) cb(er2 || er22);
                                });
                            });
                        });
                    };
                    fs4.lutimesSync = function (path4, at, mt) {
                        var fd = fs4.openSync(path4, constants3.O_SYMLINK);
                        var ret;
                        var threw = true;
                        try {
                            ret = fs4.futimesSync(fd, at, mt);
                            threw = false;
                        } finally {
                            if (threw) {
                                try {
                                    fs4.closeSync(fd);
                                } catch (er) {}
                            } else {
                                fs4.closeSync(fd);
                            }
                        }
                        return ret;
                    };
                } else if (fs4.futimes) {
                    fs4.lutimes = function (_a5, _b, _c, cb) {
                        if (cb) process.nextTick(cb);
                    };
                    fs4.lutimesSync = function () {};
                }
            }
            function chmodFix(orig) {
                if (!orig) return orig;
                return function (target, mode, cb) {
                    return orig.call(fs3, target, mode, function (er) {
                        if (chownErOk(er)) er = null;
                        if (cb) cb.apply(this, arguments);
                    });
                };
            }
            function chmodFixSync(orig) {
                if (!orig) return orig;
                return function (target, mode) {
                    try {
                        return orig.call(fs3, target, mode);
                    } catch (er) {
                        if (!chownErOk(er)) throw er;
                    }
                };
            }
            function chownFix(orig) {
                if (!orig) return orig;
                return function (target, uid, gid, cb) {
                    return orig.call(fs3, target, uid, gid, function (er) {
                        if (chownErOk(er)) er = null;
                        if (cb) cb.apply(this, arguments);
                    });
                };
            }
            function chownFixSync(orig) {
                if (!orig) return orig;
                return function (target, uid, gid) {
                    try {
                        return orig.call(fs3, target, uid, gid);
                    } catch (er) {
                        if (!chownErOk(er)) throw er;
                    }
                };
            }
            function statFix(orig) {
                if (!orig) return orig;
                return function (target, options2, cb) {
                    if (typeof options2 === 'function') {
                        cb = options2;
                        options2 = null;
                    }
                    function callback(er, stats) {
                        if (stats) {
                            if (stats.uid < 0) stats.uid += 4294967296;
                            if (stats.gid < 0) stats.gid += 4294967296;
                        }
                        if (cb) cb.apply(this, arguments);
                    }
                    return options2
                        ? orig.call(fs3, target, options2, callback)
                        : orig.call(fs3, target, callback);
                };
            }
            function statFixSync(orig) {
                if (!orig) return orig;
                return function (target, options2) {
                    var stats = options2
                        ? orig.call(fs3, target, options2)
                        : orig.call(fs3, target);
                    if (stats) {
                        if (stats.uid < 0) stats.uid += 4294967296;
                        if (stats.gid < 0) stats.gid += 4294967296;
                    }
                    return stats;
                };
            }
            function chownErOk(er) {
                if (!er) return true;
                if (er.code === 'ENOSYS') return true;
                var nonroot = !process.getuid || process.getuid() !== 0;
                if (nonroot) {
                    if (er.code === 'EINVAL' || er.code === 'EPERM') return true;
                }
                return false;
            }
        }
    },
});

// node_modules/graceful-fs/legacy-streams.js
var require_legacy_streams = __commonJS({
    'node_modules/graceful-fs/legacy-streams.js'(exports2, module2) {
        var Stream3 = require('stream').Stream;
        module2.exports = legacy;
        function legacy(fs3) {
            return {
                ReadStream,
                WriteStream,
            };
            function ReadStream(path4, options2) {
                if (!(this instanceof ReadStream)) return new ReadStream(path4, options2);
                Stream3.call(this);
                var self2 = this;
                this.path = path4;
                this.fd = null;
                this.readable = true;
                this.paused = false;
                this.flags = 'r';
                this.mode = 438;
                this.bufferSize = 64 * 1024;
                options2 = options2 || {};
                var keys = Object.keys(options2);
                for (var index2 = 0, length = keys.length; index2 < length; index2++) {
                    var key = keys[index2];
                    this[key] = options2[key];
                }
                if (this.encoding) this.setEncoding(this.encoding);
                if (this.start !== void 0) {
                    if ('number' !== typeof this.start) {
                        throw TypeError('start must be a Number');
                    }
                    if (this.end === void 0) {
                        this.end = Infinity;
                    } else if ('number' !== typeof this.end) {
                        throw TypeError('end must be a Number');
                    }
                    if (this.start > this.end) {
                        throw new Error('start must be <= end');
                    }
                    this.pos = this.start;
                }
                if (this.fd !== null) {
                    process.nextTick(function () {
                        self2._read();
                    });
                    return;
                }
                fs3.open(this.path, this.flags, this.mode, function (err, fd) {
                    if (err) {
                        self2.emit('error', err);
                        self2.readable = false;
                        return;
                    }
                    self2.fd = fd;
                    self2.emit('open', fd);
                    self2._read();
                });
            }
            function WriteStream(path4, options2) {
                if (!(this instanceof WriteStream)) return new WriteStream(path4, options2);
                Stream3.call(this);
                this.path = path4;
                this.fd = null;
                this.writable = true;
                this.flags = 'w';
                this.encoding = 'binary';
                this.mode = 438;
                this.bytesWritten = 0;
                options2 = options2 || {};
                var keys = Object.keys(options2);
                for (var index2 = 0, length = keys.length; index2 < length; index2++) {
                    var key = keys[index2];
                    this[key] = options2[key];
                }
                if (this.start !== void 0) {
                    if ('number' !== typeof this.start) {
                        throw TypeError('start must be a Number');
                    }
                    if (this.start < 0) {
                        throw new Error('start must be >= zero');
                    }
                    this.pos = this.start;
                }
                this.busy = false;
                this._queue = [];
                if (this.fd === null) {
                    this._open = fs3.open;
                    this._queue.push([this._open, this.path, this.flags, this.mode, void 0]);
                    this.flush();
                }
            }
        }
    },
});

// node_modules/graceful-fs/clone.js
var require_clone = __commonJS({
    'node_modules/graceful-fs/clone.js'(exports2, module2) {
        'use strict';
        module2.exports = clone3;
        var getPrototypeOf =
            Object.getPrototypeOf ||
            function (obj) {
                return obj.__proto__;
            };
        function clone3(obj) {
            if (obj === null || typeof obj !== 'object') return obj;
            if (obj instanceof Object) var copy = { __proto__: getPrototypeOf(obj) };
            else var copy = /* @__PURE__ */ Object.create(null);
            Object.getOwnPropertyNames(obj).forEach(function (key) {
                Object.defineProperty(copy, key, Object.getOwnPropertyDescriptor(obj, key));
            });
            return copy;
        }
    },
});

// node_modules/graceful-fs/graceful-fs.js
var require_graceful_fs = __commonJS({
    'node_modules/graceful-fs/graceful-fs.js'(exports2, module2) {
        var fs3 = require('fs');
        var polyfills = require_polyfills();
        var legacy = require_legacy_streams();
        var clone3 = require_clone();
        var util = require('util');
        var gracefulQueue;
        var previousSymbol;
        if (typeof Symbol === 'function' && typeof Symbol.for === 'function') {
            gracefulQueue = Symbol.for('graceful-fs.queue');
            previousSymbol = Symbol.for('graceful-fs.previous');
        } else {
            gracefulQueue = '___graceful-fs.queue';
            previousSymbol = '___graceful-fs.previous';
        }
        function noop3() {}
        function publishQueue(context, queue2) {
            Object.defineProperty(context, gracefulQueue, {
                get: function () {
                    return queue2;
                },
            });
        }
        var debug = noop3;
        if (util.debuglog) debug = util.debuglog('gfs4');
        else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || ''))
            debug = function () {
                var m2 = util.format.apply(util, arguments);
                m2 = 'GFS4: ' + m2.split(/\n/).join('\nGFS4: ');
                console.error(m2);
            };
        if (!fs3[gracefulQueue]) {
            queue = global[gracefulQueue] || [];
            publishQueue(fs3, queue);
            fs3.close = (function (fs$close) {
                function close(fd, cb) {
                    return fs$close.call(fs3, fd, function (err) {
                        if (!err) {
                            resetQueue();
                        }
                        if (typeof cb === 'function') cb.apply(this, arguments);
                    });
                }
                Object.defineProperty(close, previousSymbol, {
                    value: fs$close,
                });
                return close;
            })(fs3.close);
            fs3.closeSync = (function (fs$closeSync) {
                function closeSync(fd) {
                    fs$closeSync.apply(fs3, arguments);
                    resetQueue();
                }
                Object.defineProperty(closeSync, previousSymbol, {
                    value: fs$closeSync,
                });
                return closeSync;
            })(fs3.closeSync);
            if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || '')) {
                process.on('exit', function () {
                    debug(fs3[gracefulQueue]);
                    require('assert').equal(fs3[gracefulQueue].length, 0);
                });
            }
        }
        var queue;
        if (!global[gracefulQueue]) {
            publishQueue(global, fs3[gracefulQueue]);
        }
        module2.exports = patch(clone3(fs3));
        if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs3.__patched) {
            module2.exports = patch(fs3);
            fs3.__patched = true;
        }
        function patch(fs4) {
            polyfills(fs4);
            fs4.gracefulify = patch;
            fs4.createReadStream = createReadStream3;
            fs4.createWriteStream = createWriteStream2;
            var fs$readFile = fs4.readFile;
            fs4.readFile = readFile;
            function readFile(path4, options2, cb) {
                if (typeof options2 === 'function') (cb = options2), (options2 = null);
                return go$readFile(path4, options2, cb);
                function go$readFile(path5, options3, cb2, startTime) {
                    return fs$readFile(path5, options3, function (err) {
                        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
                            enqueue([
                                go$readFile,
                                [path5, options3, cb2],
                                err,
                                startTime || Date.now(),
                                Date.now(),
                            ]);
                        else {
                            if (typeof cb2 === 'function') cb2.apply(this, arguments);
                        }
                    });
                }
            }
            var fs$writeFile = fs4.writeFile;
            fs4.writeFile = writeFile;
            function writeFile(path4, data2, options2, cb) {
                if (typeof options2 === 'function') (cb = options2), (options2 = null);
                return go$writeFile(path4, data2, options2, cb);
                function go$writeFile(path5, data3, options3, cb2, startTime) {
                    return fs$writeFile(path5, data3, options3, function (err) {
                        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
                            enqueue([
                                go$writeFile,
                                [path5, data3, options3, cb2],
                                err,
                                startTime || Date.now(),
                                Date.now(),
                            ]);
                        else {
                            if (typeof cb2 === 'function') cb2.apply(this, arguments);
                        }
                    });
                }
            }
            var fs$appendFile = fs4.appendFile;
            if (fs$appendFile) fs4.appendFile = appendFile;
            function appendFile(path4, data2, options2, cb) {
                if (typeof options2 === 'function') (cb = options2), (options2 = null);
                return go$appendFile(path4, data2, options2, cb);
                function go$appendFile(path5, data3, options3, cb2, startTime) {
                    return fs$appendFile(path5, data3, options3, function (err) {
                        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
                            enqueue([
                                go$appendFile,
                                [path5, data3, options3, cb2],
                                err,
                                startTime || Date.now(),
                                Date.now(),
                            ]);
                        else {
                            if (typeof cb2 === 'function') cb2.apply(this, arguments);
                        }
                    });
                }
            }
            var fs$copyFile = fs4.copyFile;
            if (fs$copyFile) fs4.copyFile = copyFile;
            function copyFile(src, dest, flags, cb) {
                if (typeof flags === 'function') {
                    cb = flags;
                    flags = 0;
                }
                return go$copyFile(src, dest, flags, cb);
                function go$copyFile(src2, dest2, flags2, cb2, startTime) {
                    return fs$copyFile(src2, dest2, flags2, function (err) {
                        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
                            enqueue([
                                go$copyFile,
                                [src2, dest2, flags2, cb2],
                                err,
                                startTime || Date.now(),
                                Date.now(),
                            ]);
                        else {
                            if (typeof cb2 === 'function') cb2.apply(this, arguments);
                        }
                    });
                }
            }
            var fs$readdir = fs4.readdir;
            fs4.readdir = readdir;
            var noReaddirOptionVersions = /^v[0-5]\./;
            function readdir(path4, options2, cb) {
                if (typeof options2 === 'function') (cb = options2), (options2 = null);
                var go$readdir = noReaddirOptionVersions.test(process.version)
                    ? function go$readdir2(path5, options3, cb2, startTime) {
                          return fs$readdir(
                              path5,
                              fs$readdirCallback(path5, options3, cb2, startTime),
                          );
                      }
                    : function go$readdir2(path5, options3, cb2, startTime) {
                          return fs$readdir(
                              path5,
                              options3,
                              fs$readdirCallback(path5, options3, cb2, startTime),
                          );
                      };
                return go$readdir(path4, options2, cb);
                function fs$readdirCallback(path5, options3, cb2, startTime) {
                    return function (err, files) {
                        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
                            enqueue([
                                go$readdir,
                                [path5, options3, cb2],
                                err,
                                startTime || Date.now(),
                                Date.now(),
                            ]);
                        else {
                            if (files && files.sort) files.sort();
                            if (typeof cb2 === 'function') cb2.call(this, err, files);
                        }
                    };
                }
            }
            if (process.version.substr(0, 4) === 'v0.8') {
                var legStreams = legacy(fs4);
                ReadStream = legStreams.ReadStream;
                WriteStream = legStreams.WriteStream;
            }
            var fs$ReadStream = fs4.ReadStream;
            if (fs$ReadStream) {
                ReadStream.prototype = Object.create(fs$ReadStream.prototype);
                ReadStream.prototype.open = ReadStream$open;
            }
            var fs$WriteStream = fs4.WriteStream;
            if (fs$WriteStream) {
                WriteStream.prototype = Object.create(fs$WriteStream.prototype);
                WriteStream.prototype.open = WriteStream$open;
            }
            Object.defineProperty(fs4, 'ReadStream', {
                get: function () {
                    return ReadStream;
                },
                set: function (val2) {
                    ReadStream = val2;
                },
                enumerable: true,
                configurable: true,
            });
            Object.defineProperty(fs4, 'WriteStream', {
                get: function () {
                    return WriteStream;
                },
                set: function (val2) {
                    WriteStream = val2;
                },
                enumerable: true,
                configurable: true,
            });
            var FileReadStream = ReadStream;
            Object.defineProperty(fs4, 'FileReadStream', {
                get: function () {
                    return FileReadStream;
                },
                set: function (val2) {
                    FileReadStream = val2;
                },
                enumerable: true,
                configurable: true,
            });
            var FileWriteStream = WriteStream;
            Object.defineProperty(fs4, 'FileWriteStream', {
                get: function () {
                    return FileWriteStream;
                },
                set: function (val2) {
                    FileWriteStream = val2;
                },
                enumerable: true,
                configurable: true,
            });
            function ReadStream(path4, options2) {
                if (this instanceof ReadStream) return fs$ReadStream.apply(this, arguments), this;
                else return ReadStream.apply(Object.create(ReadStream.prototype), arguments);
            }
            function ReadStream$open() {
                var that = this;
                open(that.path, that.flags, that.mode, function (err, fd) {
                    if (err) {
                        if (that.autoClose) that.destroy();
                        that.emit('error', err);
                    } else {
                        that.fd = fd;
                        that.emit('open', fd);
                        that.read();
                    }
                });
            }
            function WriteStream(path4, options2) {
                if (this instanceof WriteStream) return fs$WriteStream.apply(this, arguments), this;
                else return WriteStream.apply(Object.create(WriteStream.prototype), arguments);
            }
            function WriteStream$open() {
                var that = this;
                open(that.path, that.flags, that.mode, function (err, fd) {
                    if (err) {
                        that.destroy();
                        that.emit('error', err);
                    } else {
                        that.fd = fd;
                        that.emit('open', fd);
                    }
                });
            }
            function createReadStream3(path4, options2) {
                return new fs4.ReadStream(path4, options2);
            }
            function createWriteStream2(path4, options2) {
                return new fs4.WriteStream(path4, options2);
            }
            var fs$open = fs4.open;
            fs4.open = open;
            function open(path4, flags, mode, cb) {
                if (typeof mode === 'function') (cb = mode), (mode = null);
                return go$open(path4, flags, mode, cb);
                function go$open(path5, flags2, mode2, cb2, startTime) {
                    return fs$open(path5, flags2, mode2, function (err, fd) {
                        if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
                            enqueue([
                                go$open,
                                [path5, flags2, mode2, cb2],
                                err,
                                startTime || Date.now(),
                                Date.now(),
                            ]);
                        else {
                            if (typeof cb2 === 'function') cb2.apply(this, arguments);
                        }
                    });
                }
            }
            return fs4;
        }
        function enqueue(elem) {
            debug('ENQUEUE', elem[0].name, elem[1]);
            fs3[gracefulQueue].push(elem);
            retry();
        }
        var retryTimer;
        function resetQueue() {
            var now = Date.now();
            for (var i2 = 0; i2 < fs3[gracefulQueue].length; ++i2) {
                if (fs3[gracefulQueue][i2].length > 2) {
                    fs3[gracefulQueue][i2][3] = now;
                    fs3[gracefulQueue][i2][4] = now;
                }
            }
            retry();
        }
        function retry() {
            clearTimeout(retryTimer);
            retryTimer = void 0;
            if (fs3[gracefulQueue].length === 0) return;
            var elem = fs3[gracefulQueue].shift();
            var fn = elem[0];
            var args = elem[1];
            var err = elem[2];
            var startTime = elem[3];
            var lastTime = elem[4];
            if (startTime === void 0) {
                debug('RETRY', fn.name, args);
                fn.apply(null, args);
            } else if (Date.now() - startTime >= 6e4) {
                debug('TIMEOUT', fn.name, args);
                var cb = args.pop();
                if (typeof cb === 'function') cb.call(null, err);
            } else {
                var sinceAttempt = Date.now() - lastTime;
                var sinceStart = Math.max(lastTime - startTime, 1);
                var desiredDelay = Math.min(sinceStart * 1.2, 100);
                if (sinceAttempt >= desiredDelay) {
                    debug('RETRY', fn.name, args);
                    fn.apply(null, args.concat([startTime]));
                } else {
                    fs3[gracefulQueue].push(elem);
                }
            }
            if (retryTimer === void 0) {
                retryTimer = setTimeout(retry, 0);
            }
        }
    },
});

// node_modules/fs-extra/lib/fs/index.js
var require_fs = __commonJS({
    'node_modules/fs-extra/lib/fs/index.js'(exports2) {
        'use strict';
        var u = require_universalify().fromCallback;
        var fs3 = require_graceful_fs();
        var api = [
            'access',
            'appendFile',
            'chmod',
            'chown',
            'close',
            'copyFile',
            'fchmod',
            'fchown',
            'fdatasync',
            'fstat',
            'fsync',
            'ftruncate',
            'futimes',
            'lchmod',
            'lchown',
            'link',
            'lstat',
            'mkdir',
            'mkdtemp',
            'open',
            'opendir',
            'readdir',
            'readFile',
            'readlink',
            'realpath',
            'rename',
            'rm',
            'rmdir',
            'stat',
            'symlink',
            'truncate',
            'unlink',
            'utimes',
            'writeFile',
        ].filter((key) => {
            return typeof fs3[key] === 'function';
        });
        Object.assign(exports2, fs3);
        api.forEach((method) => {
            exports2[method] = u(fs3[method]);
        });
        exports2.exists = function (filename, callback) {
            if (typeof callback === 'function') {
                return fs3.exists(filename, callback);
            }
            return new Promise((resolve) => {
                return fs3.exists(filename, resolve);
            });
        };
        exports2.read = function (fd, buffer, offset, length, position, callback) {
            if (typeof callback === 'function') {
                return fs3.read(fd, buffer, offset, length, position, callback);
            }
            return new Promise((resolve, reject) => {
                fs3.read(fd, buffer, offset, length, position, (err, bytesRead, buffer2) => {
                    if (err) return reject(err);
                    resolve({ bytesRead, buffer: buffer2 });
                });
            });
        };
        exports2.write = function (fd, buffer, ...args) {
            if (typeof args[args.length - 1] === 'function') {
                return fs3.write(fd, buffer, ...args);
            }
            return new Promise((resolve, reject) => {
                fs3.write(fd, buffer, ...args, (err, bytesWritten, buffer2) => {
                    if (err) return reject(err);
                    resolve({ bytesWritten, buffer: buffer2 });
                });
            });
        };
        exports2.readv = function (fd, buffers, ...args) {
            if (typeof args[args.length - 1] === 'function') {
                return fs3.readv(fd, buffers, ...args);
            }
            return new Promise((resolve, reject) => {
                fs3.readv(fd, buffers, ...args, (err, bytesRead, buffers2) => {
                    if (err) return reject(err);
                    resolve({ bytesRead, buffers: buffers2 });
                });
            });
        };
        exports2.writev = function (fd, buffers, ...args) {
            if (typeof args[args.length - 1] === 'function') {
                return fs3.writev(fd, buffers, ...args);
            }
            return new Promise((resolve, reject) => {
                fs3.writev(fd, buffers, ...args, (err, bytesWritten, buffers2) => {
                    if (err) return reject(err);
                    resolve({ bytesWritten, buffers: buffers2 });
                });
            });
        };
        if (typeof fs3.realpath.native === 'function') {
            exports2.realpath.native = u(fs3.realpath.native);
        } else {
            process.emitWarning(
                'fs.realpath.native is not a function. Is fs being monkey-patched?',
                'Warning',
                'fs-extra-WARN0003',
            );
        }
    },
});

// node_modules/fs-extra/lib/mkdirs/utils.js
var require_utils = __commonJS({
    'node_modules/fs-extra/lib/mkdirs/utils.js'(exports2, module2) {
        'use strict';
        var path4 = require('path');
        module2.exports.checkPath = function checkPath(pth) {
            if (process.platform === 'win32') {
                const pathHasInvalidWinCharacters = /[<>:"|?*]/.test(
                    pth.replace(path4.parse(pth).root, ''),
                );
                if (pathHasInvalidWinCharacters) {
                    const error = new Error(`Path contains invalid characters: ${pth}`);
                    error.code = 'EINVAL';
                    throw error;
                }
            }
        };
    },
});

// node_modules/fs-extra/lib/mkdirs/make-dir.js
var require_make_dir = __commonJS({
    'node_modules/fs-extra/lib/mkdirs/make-dir.js'(exports2, module2) {
        'use strict';
        var fs3 = require_fs();
        var { checkPath } = require_utils();
        var getMode = (options2) => {
            const defaults = { mode: 511 };
            if (typeof options2 === 'number') return options2;
            return { ...defaults, ...options2 }.mode;
        };
        module2.exports.makeDir = async (dir, options2) => {
            checkPath(dir);
            return fs3.mkdir(dir, {
                mode: getMode(options2),
                recursive: true,
            });
        };
        module2.exports.makeDirSync = (dir, options2) => {
            checkPath(dir);
            return fs3.mkdirSync(dir, {
                mode: getMode(options2),
                recursive: true,
            });
        };
    },
});

// node_modules/fs-extra/lib/mkdirs/index.js
var require_mkdirs = __commonJS({
    'node_modules/fs-extra/lib/mkdirs/index.js'(exports2, module2) {
        'use strict';
        var u = require_universalify().fromPromise;
        var { makeDir: _makeDir, makeDirSync } = require_make_dir();
        var makeDir = u(_makeDir);
        module2.exports = {
            mkdirs: makeDir,
            mkdirsSync: makeDirSync,
            // alias
            mkdirp: makeDir,
            mkdirpSync: makeDirSync,
            ensureDir: makeDir,
            ensureDirSync: makeDirSync,
        };
    },
});

// node_modules/fs-extra/lib/path-exists/index.js
var require_path_exists = __commonJS({
    'node_modules/fs-extra/lib/path-exists/index.js'(exports2, module2) {
        'use strict';
        var u = require_universalify().fromPromise;
        var fs3 = require_fs();
        function pathExists(path4) {
            return fs3
                .access(path4)
                .then(() => true)
                .catch(() => false);
        }
        module2.exports = {
            pathExists: u(pathExists),
            pathExistsSync: fs3.existsSync,
        };
    },
});

// node_modules/fs-extra/lib/util/utimes.js
var require_utimes = __commonJS({
    'node_modules/fs-extra/lib/util/utimes.js'(exports2, module2) {
        'use strict';
        var fs3 = require_fs();
        var u = require_universalify().fromPromise;
        async function utimesMillis(path4, atime, mtime) {
            const fd = await fs3.open(path4, 'r+');
            let closeErr = null;
            try {
                await fs3.futimes(fd, atime, mtime);
            } finally {
                try {
                    await fs3.close(fd);
                } catch (e2) {
                    closeErr = e2;
                }
            }
            if (closeErr) {
                throw closeErr;
            }
        }
        function utimesMillisSync(path4, atime, mtime) {
            const fd = fs3.openSync(path4, 'r+');
            fs3.futimesSync(fd, atime, mtime);
            return fs3.closeSync(fd);
        }
        module2.exports = {
            utimesMillis: u(utimesMillis),
            utimesMillisSync,
        };
    },
});

// node_modules/fs-extra/lib/util/stat.js
var require_stat = __commonJS({
    'node_modules/fs-extra/lib/util/stat.js'(exports2, module2) {
        'use strict';
        var fs3 = require_fs();
        var path4 = require('path');
        var u = require_universalify().fromPromise;
        function getStats(src, dest, opts) {
            const statFunc = opts.dereference
                ? (file) => fs3.stat(file, { bigint: true })
                : (file) => fs3.lstat(file, { bigint: true });
            return Promise.all([
                statFunc(src),
                statFunc(dest).catch((err) => {
                    if (err.code === 'ENOENT') return null;
                    throw err;
                }),
            ]).then(([srcStat, destStat]) => ({ srcStat, destStat }));
        }
        function getStatsSync(src, dest, opts) {
            let destStat;
            const statFunc = opts.dereference
                ? (file) => fs3.statSync(file, { bigint: true })
                : (file) => fs3.lstatSync(file, { bigint: true });
            const srcStat = statFunc(src);
            try {
                destStat = statFunc(dest);
            } catch (err) {
                if (err.code === 'ENOENT') return { srcStat, destStat: null };
                throw err;
            }
            return { srcStat, destStat };
        }
        async function checkPaths(src, dest, funcName, opts) {
            const { srcStat, destStat } = await getStats(src, dest, opts);
            if (destStat) {
                if (areIdentical(srcStat, destStat)) {
                    const srcBaseName = path4.basename(src);
                    const destBaseName = path4.basename(dest);
                    if (
                        funcName === 'move' &&
                        srcBaseName !== destBaseName &&
                        srcBaseName.toLowerCase() === destBaseName.toLowerCase()
                    ) {
                        return { srcStat, destStat, isChangingCase: true };
                    }
                    throw new Error('Source and destination must not be the same.');
                }
                if (srcStat.isDirectory() && !destStat.isDirectory()) {
                    throw new Error(
                        `Cannot overwrite non-directory '${dest}' with directory '${src}'.`,
                    );
                }
                if (!srcStat.isDirectory() && destStat.isDirectory()) {
                    throw new Error(
                        `Cannot overwrite directory '${dest}' with non-directory '${src}'.`,
                    );
                }
            }
            if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {
                throw new Error(errMsg(src, dest, funcName));
            }
            return { srcStat, destStat };
        }
        function checkPathsSync(src, dest, funcName, opts) {
            const { srcStat, destStat } = getStatsSync(src, dest, opts);
            if (destStat) {
                if (areIdentical(srcStat, destStat)) {
                    const srcBaseName = path4.basename(src);
                    const destBaseName = path4.basename(dest);
                    if (
                        funcName === 'move' &&
                        srcBaseName !== destBaseName &&
                        srcBaseName.toLowerCase() === destBaseName.toLowerCase()
                    ) {
                        return { srcStat, destStat, isChangingCase: true };
                    }
                    throw new Error('Source and destination must not be the same.');
                }
                if (srcStat.isDirectory() && !destStat.isDirectory()) {
                    throw new Error(
                        `Cannot overwrite non-directory '${dest}' with directory '${src}'.`,
                    );
                }
                if (!srcStat.isDirectory() && destStat.isDirectory()) {
                    throw new Error(
                        `Cannot overwrite directory '${dest}' with non-directory '${src}'.`,
                    );
                }
            }
            if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {
                throw new Error(errMsg(src, dest, funcName));
            }
            return { srcStat, destStat };
        }
        async function checkParentPaths(src, srcStat, dest, funcName) {
            const srcParent = path4.resolve(path4.dirname(src));
            const destParent = path4.resolve(path4.dirname(dest));
            if (destParent === srcParent || destParent === path4.parse(destParent).root) return;
            let destStat;
            try {
                destStat = await fs3.stat(destParent, { bigint: true });
            } catch (err) {
                if (err.code === 'ENOENT') return;
                throw err;
            }
            if (areIdentical(srcStat, destStat)) {
                throw new Error(errMsg(src, dest, funcName));
            }
            return checkParentPaths(src, srcStat, destParent, funcName);
        }
        function checkParentPathsSync(src, srcStat, dest, funcName) {
            const srcParent = path4.resolve(path4.dirname(src));
            const destParent = path4.resolve(path4.dirname(dest));
            if (destParent === srcParent || destParent === path4.parse(destParent).root) return;
            let destStat;
            try {
                destStat = fs3.statSync(destParent, { bigint: true });
            } catch (err) {
                if (err.code === 'ENOENT') return;
                throw err;
            }
            if (areIdentical(srcStat, destStat)) {
                throw new Error(errMsg(src, dest, funcName));
            }
            return checkParentPathsSync(src, srcStat, destParent, funcName);
        }
        function areIdentical(srcStat, destStat) {
            return (
                destStat.ino &&
                destStat.dev &&
                destStat.ino === srcStat.ino &&
                destStat.dev === srcStat.dev
            );
        }
        function isSrcSubdir(src, dest) {
            const srcArr = path4
                .resolve(src)
                .split(path4.sep)
                .filter((i2) => i2);
            const destArr = path4
                .resolve(dest)
                .split(path4.sep)
                .filter((i2) => i2);
            return srcArr.every((cur, i2) => destArr[i2] === cur);
        }
        function errMsg(src, dest, funcName) {
            return `Cannot ${funcName} '${src}' to a subdirectory of itself, '${dest}'.`;
        }
        module2.exports = {
            // checkPaths
            checkPaths: u(checkPaths),
            checkPathsSync,
            // checkParent
            checkParentPaths: u(checkParentPaths),
            checkParentPathsSync,
            // Misc
            isSrcSubdir,
            areIdentical,
        };
    },
});

// node_modules/fs-extra/lib/copy/copy.js
var require_copy = __commonJS({
    'node_modules/fs-extra/lib/copy/copy.js'(exports2, module2) {
        'use strict';
        var fs3 = require_fs();
        var path4 = require('path');
        var { mkdirs } = require_mkdirs();
        var { pathExists } = require_path_exists();
        var { utimesMillis } = require_utimes();
        var stat2 = require_stat();
        async function copy(src, dest, opts = {}) {
            if (typeof opts === 'function') {
                opts = { filter: opts };
            }
            opts.clobber = 'clobber' in opts ? !!opts.clobber : true;
            opts.overwrite = 'overwrite' in opts ? !!opts.overwrite : opts.clobber;
            if (opts.preserveTimestamps && process.arch === 'ia32') {
                process.emitWarning(
                    'Using the preserveTimestamps option in 32-bit node is not recommended;\n\n	see https://github.com/jprichardson/node-fs-extra/issues/269',
                    'Warning',
                    'fs-extra-WARN0001',
                );
            }
            const { srcStat, destStat } = await stat2.checkPaths(src, dest, 'copy', opts);
            await stat2.checkParentPaths(src, srcStat, dest, 'copy');
            const include = await runFilter(src, dest, opts);
            if (!include) return;
            const destParent = path4.dirname(dest);
            const dirExists = await pathExists(destParent);
            if (!dirExists) {
                await mkdirs(destParent);
            }
            await getStatsAndPerformCopy(destStat, src, dest, opts);
        }
        async function runFilter(src, dest, opts) {
            if (!opts.filter) return true;
            return opts.filter(src, dest);
        }
        async function getStatsAndPerformCopy(destStat, src, dest, opts) {
            const statFn = opts.dereference ? fs3.stat : fs3.lstat;
            const srcStat = await statFn(src);
            if (srcStat.isDirectory()) return onDir(srcStat, destStat, src, dest, opts);
            if (srcStat.isFile() || srcStat.isCharacterDevice() || srcStat.isBlockDevice())
                return onFile(srcStat, destStat, src, dest, opts);
            if (srcStat.isSymbolicLink()) return onLink(destStat, src, dest, opts);
            if (srcStat.isSocket()) throw new Error(`Cannot copy a socket file: ${src}`);
            if (srcStat.isFIFO()) throw new Error(`Cannot copy a FIFO pipe: ${src}`);
            throw new Error(`Unknown file: ${src}`);
        }
        async function onFile(srcStat, destStat, src, dest, opts) {
            if (!destStat) return copyFile(srcStat, src, dest, opts);
            if (opts.overwrite) {
                await fs3.unlink(dest);
                return copyFile(srcStat, src, dest, opts);
            }
            if (opts.errorOnExist) {
                throw new Error(`'${dest}' already exists`);
            }
        }
        async function copyFile(srcStat, src, dest, opts) {
            await fs3.copyFile(src, dest);
            if (opts.preserveTimestamps) {
                if (fileIsNotWritable(srcStat.mode)) {
                    await makeFileWritable(dest, srcStat.mode);
                }
                const updatedSrcStat = await fs3.stat(src);
                await utimesMillis(dest, updatedSrcStat.atime, updatedSrcStat.mtime);
            }
            return fs3.chmod(dest, srcStat.mode);
        }
        function fileIsNotWritable(srcMode) {
            return (srcMode & 128) === 0;
        }
        function makeFileWritable(dest, srcMode) {
            return fs3.chmod(dest, srcMode | 128);
        }
        async function onDir(srcStat, destStat, src, dest, opts) {
            if (!destStat) {
                await fs3.mkdir(dest);
            }
            const items = await fs3.readdir(src);
            await Promise.all(
                items.map(async (item) => {
                    const srcItem = path4.join(src, item);
                    const destItem = path4.join(dest, item);
                    const include = await runFilter(srcItem, destItem, opts);
                    if (!include) return;
                    const { destStat: destStat2 } = await stat2.checkPaths(
                        srcItem,
                        destItem,
                        'copy',
                        opts,
                    );
                    return getStatsAndPerformCopy(destStat2, srcItem, destItem, opts);
                }),
            );
            if (!destStat) {
                await fs3.chmod(dest, srcStat.mode);
            }
        }
        async function onLink(destStat, src, dest, opts) {
            let resolvedSrc = await fs3.readlink(src);
            if (opts.dereference) {
                resolvedSrc = path4.resolve(process.cwd(), resolvedSrc);
            }
            if (!destStat) {
                return fs3.symlink(resolvedSrc, dest);
            }
            let resolvedDest = null;
            try {
                resolvedDest = await fs3.readlink(dest);
            } catch (e2) {
                if (e2.code === 'EINVAL' || e2.code === 'UNKNOWN')
                    return fs3.symlink(resolvedSrc, dest);
                throw e2;
            }
            if (opts.dereference) {
                resolvedDest = path4.resolve(process.cwd(), resolvedDest);
            }
            if (stat2.isSrcSubdir(resolvedSrc, resolvedDest)) {
                throw new Error(
                    `Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`,
                );
            }
            if (stat2.isSrcSubdir(resolvedDest, resolvedSrc)) {
                throw new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`);
            }
            await fs3.unlink(dest);
            return fs3.symlink(resolvedSrc, dest);
        }
        module2.exports = copy;
    },
});

// node_modules/fs-extra/lib/copy/copy-sync.js
var require_copy_sync = __commonJS({
    'node_modules/fs-extra/lib/copy/copy-sync.js'(exports2, module2) {
        'use strict';
        var fs3 = require_graceful_fs();
        var path4 = require('path');
        var mkdirsSync = require_mkdirs().mkdirsSync;
        var utimesMillisSync = require_utimes().utimesMillisSync;
        var stat2 = require_stat();
        function copySync(src, dest, opts) {
            if (typeof opts === 'function') {
                opts = { filter: opts };
            }
            opts = opts || {};
            opts.clobber = 'clobber' in opts ? !!opts.clobber : true;
            opts.overwrite = 'overwrite' in opts ? !!opts.overwrite : opts.clobber;
            if (opts.preserveTimestamps && process.arch === 'ia32') {
                process.emitWarning(
                    'Using the preserveTimestamps option in 32-bit node is not recommended;\n\n	see https://github.com/jprichardson/node-fs-extra/issues/269',
                    'Warning',
                    'fs-extra-WARN0002',
                );
            }
            const { srcStat, destStat } = stat2.checkPathsSync(src, dest, 'copy', opts);
            stat2.checkParentPathsSync(src, srcStat, dest, 'copy');
            if (opts.filter && !opts.filter(src, dest)) return;
            const destParent = path4.dirname(dest);
            if (!fs3.existsSync(destParent)) mkdirsSync(destParent);
            return getStats(destStat, src, dest, opts);
        }
        function getStats(destStat, src, dest, opts) {
            const statSync2 = opts.dereference ? fs3.statSync : fs3.lstatSync;
            const srcStat = statSync2(src);
            if (srcStat.isDirectory()) return onDir(srcStat, destStat, src, dest, opts);
            else if (srcStat.isFile() || srcStat.isCharacterDevice() || srcStat.isBlockDevice())
                return onFile(srcStat, destStat, src, dest, opts);
            else if (srcStat.isSymbolicLink()) return onLink(destStat, src, dest, opts);
            else if (srcStat.isSocket()) throw new Error(`Cannot copy a socket file: ${src}`);
            else if (srcStat.isFIFO()) throw new Error(`Cannot copy a FIFO pipe: ${src}`);
            throw new Error(`Unknown file: ${src}`);
        }
        function onFile(srcStat, destStat, src, dest, opts) {
            if (!destStat) return copyFile(srcStat, src, dest, opts);
            return mayCopyFile(srcStat, src, dest, opts);
        }
        function mayCopyFile(srcStat, src, dest, opts) {
            if (opts.overwrite) {
                fs3.unlinkSync(dest);
                return copyFile(srcStat, src, dest, opts);
            } else if (opts.errorOnExist) {
                throw new Error(`'${dest}' already exists`);
            }
        }
        function copyFile(srcStat, src, dest, opts) {
            fs3.copyFileSync(src, dest);
            if (opts.preserveTimestamps) handleTimestamps(srcStat.mode, src, dest);
            return setDestMode(dest, srcStat.mode);
        }
        function handleTimestamps(srcMode, src, dest) {
            if (fileIsNotWritable(srcMode)) makeFileWritable(dest, srcMode);
            return setDestTimestamps(src, dest);
        }
        function fileIsNotWritable(srcMode) {
            return (srcMode & 128) === 0;
        }
        function makeFileWritable(dest, srcMode) {
            return setDestMode(dest, srcMode | 128);
        }
        function setDestMode(dest, srcMode) {
            return fs3.chmodSync(dest, srcMode);
        }
        function setDestTimestamps(src, dest) {
            const updatedSrcStat = fs3.statSync(src);
            return utimesMillisSync(dest, updatedSrcStat.atime, updatedSrcStat.mtime);
        }
        function onDir(srcStat, destStat, src, dest, opts) {
            if (!destStat) return mkDirAndCopy(srcStat.mode, src, dest, opts);
            return copyDir(src, dest, opts);
        }
        function mkDirAndCopy(srcMode, src, dest, opts) {
            fs3.mkdirSync(dest);
            copyDir(src, dest, opts);
            return setDestMode(dest, srcMode);
        }
        function copyDir(src, dest, opts) {
            fs3.readdirSync(src).forEach((item) => copyDirItem(item, src, dest, opts));
        }
        function copyDirItem(item, src, dest, opts) {
            const srcItem = path4.join(src, item);
            const destItem = path4.join(dest, item);
            if (opts.filter && !opts.filter(srcItem, destItem)) return;
            const { destStat } = stat2.checkPathsSync(srcItem, destItem, 'copy', opts);
            return getStats(destStat, srcItem, destItem, opts);
        }
        function onLink(destStat, src, dest, opts) {
            let resolvedSrc = fs3.readlinkSync(src);
            if (opts.dereference) {
                resolvedSrc = path4.resolve(process.cwd(), resolvedSrc);
            }
            if (!destStat) {
                return fs3.symlinkSync(resolvedSrc, dest);
            } else {
                let resolvedDest;
                try {
                    resolvedDest = fs3.readlinkSync(dest);
                } catch (err) {
                    if (err.code === 'EINVAL' || err.code === 'UNKNOWN')
                        return fs3.symlinkSync(resolvedSrc, dest);
                    throw err;
                }
                if (opts.dereference) {
                    resolvedDest = path4.resolve(process.cwd(), resolvedDest);
                }
                if (stat2.isSrcSubdir(resolvedSrc, resolvedDest)) {
                    throw new Error(
                        `Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`,
                    );
                }
                if (stat2.isSrcSubdir(resolvedDest, resolvedSrc)) {
                    throw new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`);
                }
                return copyLink(resolvedSrc, dest);
            }
        }
        function copyLink(resolvedSrc, dest) {
            fs3.unlinkSync(dest);
            return fs3.symlinkSync(resolvedSrc, dest);
        }
        module2.exports = copySync;
    },
});

// node_modules/fs-extra/lib/copy/index.js
var require_copy2 = __commonJS({
    'node_modules/fs-extra/lib/copy/index.js'(exports2, module2) {
        'use strict';
        var u = require_universalify().fromPromise;
        module2.exports = {
            copy: u(require_copy()),
            copySync: require_copy_sync(),
        };
    },
});

// node_modules/fs-extra/lib/remove/index.js
var require_remove = __commonJS({
    'node_modules/fs-extra/lib/remove/index.js'(exports2, module2) {
        'use strict';
        var fs3 = require_graceful_fs();
        var u = require_universalify().fromCallback;
        function remove2(path4, callback) {
            fs3.rm(path4, { recursive: true, force: true }, callback);
        }
        function removeSync(path4) {
            fs3.rmSync(path4, { recursive: true, force: true });
        }
        module2.exports = {
            remove: u(remove2),
            removeSync,
        };
    },
});

// node_modules/fs-extra/lib/empty/index.js
var require_empty = __commonJS({
    'node_modules/fs-extra/lib/empty/index.js'(exports2, module2) {
        'use strict';
        var u = require_universalify().fromPromise;
        var fs3 = require_fs();
        var path4 = require('path');
        var mkdir = require_mkdirs();
        var remove2 = require_remove();
        var emptyDir = u(async function emptyDir2(dir) {
            let items;
            try {
                items = await fs3.readdir(dir);
            } catch {
                return mkdir.mkdirs(dir);
            }
            return Promise.all(items.map((item) => remove2.remove(path4.join(dir, item))));
        });
        function emptyDirSync(dir) {
            let items;
            try {
                items = fs3.readdirSync(dir);
            } catch {
                return mkdir.mkdirsSync(dir);
            }
            items.forEach((item) => {
                item = path4.join(dir, item);
                remove2.removeSync(item);
            });
        }
        module2.exports = {
            emptyDirSync,
            emptydirSync: emptyDirSync,
            emptyDir,
            emptydir: emptyDir,
        };
    },
});

// node_modules/fs-extra/lib/ensure/file.js
var require_file = __commonJS({
    'node_modules/fs-extra/lib/ensure/file.js'(exports2, module2) {
        'use strict';
        var u = require_universalify().fromPromise;
        var path4 = require('path');
        var fs3 = require_fs();
        var mkdir = require_mkdirs();
        async function createFile(file) {
            let stats;
            try {
                stats = await fs3.stat(file);
            } catch {}
            if (stats && stats.isFile()) return;
            const dir = path4.dirname(file);
            let dirStats = null;
            try {
                dirStats = await fs3.stat(dir);
            } catch (err) {
                if (err.code === 'ENOENT') {
                    await mkdir.mkdirs(dir);
                    await fs3.writeFile(file, '');
                    return;
                } else {
                    throw err;
                }
            }
            if (dirStats.isDirectory()) {
                await fs3.writeFile(file, '');
            } else {
                await fs3.readdir(dir);
            }
        }
        function createFileSync(file) {
            let stats;
            try {
                stats = fs3.statSync(file);
            } catch {}
            if (stats && stats.isFile()) return;
            const dir = path4.dirname(file);
            try {
                if (!fs3.statSync(dir).isDirectory()) {
                    fs3.readdirSync(dir);
                }
            } catch (err) {
                if (err && err.code === 'ENOENT') mkdir.mkdirsSync(dir);
                else throw err;
            }
            fs3.writeFileSync(file, '');
        }
        module2.exports = {
            createFile: u(createFile),
            createFileSync,
        };
    },
});

// node_modules/fs-extra/lib/ensure/link.js
var require_link = __commonJS({
    'node_modules/fs-extra/lib/ensure/link.js'(exports2, module2) {
        'use strict';
        var u = require_universalify().fromPromise;
        var path4 = require('path');
        var fs3 = require_fs();
        var mkdir = require_mkdirs();
        var { pathExists } = require_path_exists();
        var { areIdentical } = require_stat();
        async function createLink(srcpath, dstpath) {
            let dstStat;
            try {
                dstStat = await fs3.lstat(dstpath);
            } catch {}
            let srcStat;
            try {
                srcStat = await fs3.lstat(srcpath);
            } catch (err) {
                err.message = err.message.replace('lstat', 'ensureLink');
                throw err;
            }
            if (dstStat && areIdentical(srcStat, dstStat)) return;
            const dir = path4.dirname(dstpath);
            const dirExists = await pathExists(dir);
            if (!dirExists) {
                await mkdir.mkdirs(dir);
            }
            await fs3.link(srcpath, dstpath);
        }
        function createLinkSync(srcpath, dstpath) {
            let dstStat;
            try {
                dstStat = fs3.lstatSync(dstpath);
            } catch {}
            try {
                const srcStat = fs3.lstatSync(srcpath);
                if (dstStat && areIdentical(srcStat, dstStat)) return;
            } catch (err) {
                err.message = err.message.replace('lstat', 'ensureLink');
                throw err;
            }
            const dir = path4.dirname(dstpath);
            const dirExists = fs3.existsSync(dir);
            if (dirExists) return fs3.linkSync(srcpath, dstpath);
            mkdir.mkdirsSync(dir);
            return fs3.linkSync(srcpath, dstpath);
        }
        module2.exports = {
            createLink: u(createLink),
            createLinkSync,
        };
    },
});

// node_modules/fs-extra/lib/ensure/symlink-paths.js
var require_symlink_paths = __commonJS({
    'node_modules/fs-extra/lib/ensure/symlink-paths.js'(exports2, module2) {
        'use strict';
        var path4 = require('path');
        var fs3 = require_fs();
        var { pathExists } = require_path_exists();
        var u = require_universalify().fromPromise;
        async function symlinkPaths(srcpath, dstpath) {
            if (path4.isAbsolute(srcpath)) {
                try {
                    await fs3.lstat(srcpath);
                } catch (err) {
                    err.message = err.message.replace('lstat', 'ensureSymlink');
                    throw err;
                }
                return {
                    toCwd: srcpath,
                    toDst: srcpath,
                };
            }
            const dstdir = path4.dirname(dstpath);
            const relativeToDst = path4.join(dstdir, srcpath);
            const exists = await pathExists(relativeToDst);
            if (exists) {
                return {
                    toCwd: relativeToDst,
                    toDst: srcpath,
                };
            }
            try {
                await fs3.lstat(srcpath);
            } catch (err) {
                err.message = err.message.replace('lstat', 'ensureSymlink');
                throw err;
            }
            return {
                toCwd: srcpath,
                toDst: path4.relative(dstdir, srcpath),
            };
        }
        function symlinkPathsSync(srcpath, dstpath) {
            if (path4.isAbsolute(srcpath)) {
                const exists2 = fs3.existsSync(srcpath);
                if (!exists2) throw new Error('absolute srcpath does not exist');
                return {
                    toCwd: srcpath,
                    toDst: srcpath,
                };
            }
            const dstdir = path4.dirname(dstpath);
            const relativeToDst = path4.join(dstdir, srcpath);
            const exists = fs3.existsSync(relativeToDst);
            if (exists) {
                return {
                    toCwd: relativeToDst,
                    toDst: srcpath,
                };
            }
            const srcExists = fs3.existsSync(srcpath);
            if (!srcExists) throw new Error('relative srcpath does not exist');
            return {
                toCwd: srcpath,
                toDst: path4.relative(dstdir, srcpath),
            };
        }
        module2.exports = {
            symlinkPaths: u(symlinkPaths),
            symlinkPathsSync,
        };
    },
});

// node_modules/fs-extra/lib/ensure/symlink-type.js
var require_symlink_type = __commonJS({
    'node_modules/fs-extra/lib/ensure/symlink-type.js'(exports2, module2) {
        'use strict';
        var fs3 = require_fs();
        var u = require_universalify().fromPromise;
        async function symlinkType(srcpath, type) {
            if (type) return type;
            let stats;
            try {
                stats = await fs3.lstat(srcpath);
            } catch {
                return 'file';
            }
            return stats && stats.isDirectory() ? 'dir' : 'file';
        }
        function symlinkTypeSync(srcpath, type) {
            if (type) return type;
            let stats;
            try {
                stats = fs3.lstatSync(srcpath);
            } catch {
                return 'file';
            }
            return stats && stats.isDirectory() ? 'dir' : 'file';
        }
        module2.exports = {
            symlinkType: u(symlinkType),
            symlinkTypeSync,
        };
    },
});

// node_modules/fs-extra/lib/ensure/symlink.js
var require_symlink = __commonJS({
    'node_modules/fs-extra/lib/ensure/symlink.js'(exports2, module2) {
        'use strict';
        var u = require_universalify().fromPromise;
        var path4 = require('path');
        var fs3 = require_fs();
        var { mkdirs, mkdirsSync } = require_mkdirs();
        var { symlinkPaths, symlinkPathsSync } = require_symlink_paths();
        var { symlinkType, symlinkTypeSync } = require_symlink_type();
        var { pathExists } = require_path_exists();
        var { areIdentical } = require_stat();
        async function createSymlink(srcpath, dstpath, type) {
            let stats;
            try {
                stats = await fs3.lstat(dstpath);
            } catch {}
            if (stats && stats.isSymbolicLink()) {
                const [srcStat, dstStat] = await Promise.all([
                    fs3.stat(srcpath),
                    fs3.stat(dstpath),
                ]);
                if (areIdentical(srcStat, dstStat)) return;
            }
            const relative = await symlinkPaths(srcpath, dstpath);
            srcpath = relative.toDst;
            const toType = await symlinkType(relative.toCwd, type);
            const dir = path4.dirname(dstpath);
            if (!(await pathExists(dir))) {
                await mkdirs(dir);
            }
            return fs3.symlink(srcpath, dstpath, toType);
        }
        function createSymlinkSync(srcpath, dstpath, type) {
            let stats;
            try {
                stats = fs3.lstatSync(dstpath);
            } catch {}
            if (stats && stats.isSymbolicLink()) {
                const srcStat = fs3.statSync(srcpath);
                const dstStat = fs3.statSync(dstpath);
                if (areIdentical(srcStat, dstStat)) return;
            }
            const relative = symlinkPathsSync(srcpath, dstpath);
            srcpath = relative.toDst;
            type = symlinkTypeSync(relative.toCwd, type);
            const dir = path4.dirname(dstpath);
            const exists = fs3.existsSync(dir);
            if (exists) return fs3.symlinkSync(srcpath, dstpath, type);
            mkdirsSync(dir);
            return fs3.symlinkSync(srcpath, dstpath, type);
        }
        module2.exports = {
            createSymlink: u(createSymlink),
            createSymlinkSync,
        };
    },
});

// node_modules/fs-extra/lib/ensure/index.js
var require_ensure = __commonJS({
    'node_modules/fs-extra/lib/ensure/index.js'(exports2, module2) {
        'use strict';
        var { createFile, createFileSync } = require_file();
        var { createLink, createLinkSync } = require_link();
        var { createSymlink, createSymlinkSync } = require_symlink();
        module2.exports = {
            // file
            createFile,
            createFileSync,
            ensureFile: createFile,
            ensureFileSync: createFileSync,
            // link
            createLink,
            createLinkSync,
            ensureLink: createLink,
            ensureLinkSync: createLinkSync,
            // symlink
            createSymlink,
            createSymlinkSync,
            ensureSymlink: createSymlink,
            ensureSymlinkSync: createSymlinkSync,
        };
    },
});

// node_modules/jsonfile/utils.js
var require_utils2 = __commonJS({
    'node_modules/jsonfile/utils.js'(exports2, module2) {
        function stringify2(obj, { EOL = '\n', finalEOL = true, replacer = null, spaces } = {}) {
            const EOF = finalEOL ? EOL : '';
            const str = JSON.stringify(obj, replacer, spaces);
            return str.replace(/\n/g, EOL) + EOF;
        }
        function stripBom(content) {
            if (Buffer.isBuffer(content)) content = content.toString('utf8');
            return content.replace(/^\uFEFF/, '');
        }
        module2.exports = { stringify: stringify2, stripBom };
    },
});

// node_modules/jsonfile/index.js
var require_jsonfile = __commonJS({
    'node_modules/jsonfile/index.js'(exports2, module2) {
        var _fs;
        try {
            _fs = require_graceful_fs();
        } catch (_) {
            _fs = require('fs');
        }
        var universalify = require_universalify();
        var { stringify: stringify2, stripBom } = require_utils2();
        async function _readFile(file, options2 = {}) {
            if (typeof options2 === 'string') {
                options2 = { encoding: options2 };
            }
            const fs3 = options2.fs || _fs;
            const shouldThrow = 'throws' in options2 ? options2.throws : true;
            let data2 = await universalify.fromCallback(fs3.readFile)(file, options2);
            data2 = stripBom(data2);
            let obj;
            try {
                obj = JSON.parse(data2, options2 ? options2.reviver : null);
            } catch (err) {
                if (shouldThrow) {
                    err.message = `${file}: ${err.message}`;
                    throw err;
                } else {
                    return null;
                }
            }
            return obj;
        }
        var readFile = universalify.fromPromise(_readFile);
        function readFileSync2(file, options2 = {}) {
            if (typeof options2 === 'string') {
                options2 = { encoding: options2 };
            }
            const fs3 = options2.fs || _fs;
            const shouldThrow = 'throws' in options2 ? options2.throws : true;
            try {
                let content = fs3.readFileSync(file, options2);
                content = stripBom(content);
                return JSON.parse(content, options2.reviver);
            } catch (err) {
                if (shouldThrow) {
                    err.message = `${file}: ${err.message}`;
                    throw err;
                } else {
                    return null;
                }
            }
        }
        async function _writeFile(file, obj, options2 = {}) {
            const fs3 = options2.fs || _fs;
            const str = stringify2(obj, options2);
            await universalify.fromCallback(fs3.writeFile)(file, str, options2);
        }
        var writeFile = universalify.fromPromise(_writeFile);
        function writeFileSync(file, obj, options2 = {}) {
            const fs3 = options2.fs || _fs;
            const str = stringify2(obj, options2);
            return fs3.writeFileSync(file, str, options2);
        }
        var jsonfile = {
            readFile,
            readFileSync: readFileSync2,
            writeFile,
            writeFileSync,
        };
        module2.exports = jsonfile;
    },
});

// node_modules/fs-extra/lib/json/jsonfile.js
var require_jsonfile2 = __commonJS({
    'node_modules/fs-extra/lib/json/jsonfile.js'(exports2, module2) {
        'use strict';
        var jsonFile = require_jsonfile();
        module2.exports = {
            // jsonfile exports
            readJson: jsonFile.readFile,
            readJsonSync: jsonFile.readFileSync,
            writeJson: jsonFile.writeFile,
            writeJsonSync: jsonFile.writeFileSync,
        };
    },
});

// node_modules/fs-extra/lib/output-file/index.js
var require_output_file = __commonJS({
    'node_modules/fs-extra/lib/output-file/index.js'(exports2, module2) {
        'use strict';
        var u = require_universalify().fromPromise;
        var fs3 = require_fs();
        var path4 = require('path');
        var mkdir = require_mkdirs();
        var pathExists = require_path_exists().pathExists;
        async function outputFile(file, data2, encoding = 'utf-8') {
            const dir = path4.dirname(file);
            if (!(await pathExists(dir))) {
                await mkdir.mkdirs(dir);
            }
            return fs3.writeFile(file, data2, encoding);
        }
        function outputFileSync(file, ...args) {
            const dir = path4.dirname(file);
            if (!fs3.existsSync(dir)) {
                mkdir.mkdirsSync(dir);
            }
            fs3.writeFileSync(file, ...args);
        }
        module2.exports = {
            outputFile: u(outputFile),
            outputFileSync,
        };
    },
});

// node_modules/fs-extra/lib/json/output-json.js
var require_output_json = __commonJS({
    'node_modules/fs-extra/lib/json/output-json.js'(exports2, module2) {
        'use strict';
        var { stringify: stringify2 } = require_utils2();
        var { outputFile } = require_output_file();
        async function outputJson(file, data2, options2 = {}) {
            const str = stringify2(data2, options2);
            await outputFile(file, str, options2);
        }
        module2.exports = outputJson;
    },
});

// node_modules/fs-extra/lib/json/output-json-sync.js
var require_output_json_sync = __commonJS({
    'node_modules/fs-extra/lib/json/output-json-sync.js'(exports2, module2) {
        'use strict';
        var { stringify: stringify2 } = require_utils2();
        var { outputFileSync } = require_output_file();
        function outputJsonSync(file, data2, options2) {
            const str = stringify2(data2, options2);
            outputFileSync(file, str, options2);
        }
        module2.exports = outputJsonSync;
    },
});

// node_modules/fs-extra/lib/json/index.js
var require_json = __commonJS({
    'node_modules/fs-extra/lib/json/index.js'(exports2, module2) {
        'use strict';
        var u = require_universalify().fromPromise;
        var jsonFile = require_jsonfile2();
        jsonFile.outputJson = u(require_output_json());
        jsonFile.outputJsonSync = require_output_json_sync();
        jsonFile.outputJSON = jsonFile.outputJson;
        jsonFile.outputJSONSync = jsonFile.outputJsonSync;
        jsonFile.writeJSON = jsonFile.writeJson;
        jsonFile.writeJSONSync = jsonFile.writeJsonSync;
        jsonFile.readJSON = jsonFile.readJson;
        jsonFile.readJSONSync = jsonFile.readJsonSync;
        module2.exports = jsonFile;
    },
});

// node_modules/fs-extra/lib/move/move.js
var require_move = __commonJS({
    'node_modules/fs-extra/lib/move/move.js'(exports2, module2) {
        'use strict';
        var fs3 = require_fs();
        var path4 = require('path');
        var { copy } = require_copy2();
        var { remove: remove2 } = require_remove();
        var { mkdirp } = require_mkdirs();
        var { pathExists } = require_path_exists();
        var stat2 = require_stat();
        async function move(src, dest, opts = {}) {
            const overwrite = opts.overwrite || opts.clobber || false;
            const { srcStat, isChangingCase = false } = await stat2.checkPaths(
                src,
                dest,
                'move',
                opts,
            );
            await stat2.checkParentPaths(src, srcStat, dest, 'move');
            const destParent = path4.dirname(dest);
            const parsedParentPath = path4.parse(destParent);
            if (parsedParentPath.root !== destParent) {
                await mkdirp(destParent);
            }
            return doRename(src, dest, overwrite, isChangingCase);
        }
        async function doRename(src, dest, overwrite, isChangingCase) {
            if (!isChangingCase) {
                if (overwrite) {
                    await remove2(dest);
                } else if (await pathExists(dest)) {
                    throw new Error('dest already exists.');
                }
            }
            try {
                await fs3.rename(src, dest);
            } catch (err) {
                if (err.code !== 'EXDEV') {
                    throw err;
                }
                await moveAcrossDevice(src, dest, overwrite);
            }
        }
        async function moveAcrossDevice(src, dest, overwrite) {
            const opts = {
                overwrite,
                errorOnExist: true,
                preserveTimestamps: true,
            };
            await copy(src, dest, opts);
            return remove2(src);
        }
        module2.exports = move;
    },
});

// node_modules/fs-extra/lib/move/move-sync.js
var require_move_sync = __commonJS({
    'node_modules/fs-extra/lib/move/move-sync.js'(exports2, module2) {
        'use strict';
        var fs3 = require_graceful_fs();
        var path4 = require('path');
        var copySync = require_copy2().copySync;
        var removeSync = require_remove().removeSync;
        var mkdirpSync = require_mkdirs().mkdirpSync;
        var stat2 = require_stat();
        function moveSync(src, dest, opts) {
            opts = opts || {};
            const overwrite = opts.overwrite || opts.clobber || false;
            const { srcStat, isChangingCase = false } = stat2.checkPathsSync(
                src,
                dest,
                'move',
                opts,
            );
            stat2.checkParentPathsSync(src, srcStat, dest, 'move');
            if (!isParentRoot(dest)) mkdirpSync(path4.dirname(dest));
            return doRename(src, dest, overwrite, isChangingCase);
        }
        function isParentRoot(dest) {
            const parent2 = path4.dirname(dest);
            const parsedPath = path4.parse(parent2);
            return parsedPath.root === parent2;
        }
        function doRename(src, dest, overwrite, isChangingCase) {
            if (isChangingCase) return rename(src, dest, overwrite);
            if (overwrite) {
                removeSync(dest);
                return rename(src, dest, overwrite);
            }
            if (fs3.existsSync(dest)) throw new Error('dest already exists.');
            return rename(src, dest, overwrite);
        }
        function rename(src, dest, overwrite) {
            try {
                fs3.renameSync(src, dest);
            } catch (err) {
                if (err.code !== 'EXDEV') throw err;
                return moveAcrossDevice(src, dest, overwrite);
            }
        }
        function moveAcrossDevice(src, dest, overwrite) {
            const opts = {
                overwrite,
                errorOnExist: true,
                preserveTimestamps: true,
            };
            copySync(src, dest, opts);
            return removeSync(src);
        }
        module2.exports = moveSync;
    },
});

// node_modules/fs-extra/lib/move/index.js
var require_move2 = __commonJS({
    'node_modules/fs-extra/lib/move/index.js'(exports2, module2) {
        'use strict';
        var u = require_universalify().fromPromise;
        module2.exports = {
            move: u(require_move()),
            moveSync: require_move_sync(),
        };
    },
});

// node_modules/fs-extra/lib/index.js
var require_lib2 = __commonJS({
    'node_modules/fs-extra/lib/index.js'(exports2, module2) {
        'use strict';
        module2.exports = {
            // Export promiseified graceful-fs:
            ...require_fs(),
            // Export extra methods:
            ...require_copy2(),
            ...require_empty(),
            ...require_ensure(),
            ...require_json(),
            ...require_mkdirs(),
            ...require_move2(),
            ...require_output_file(),
            ...require_path_exists(),
            ...require_remove(),
        };
    },
});

// node_modules/web-streams-polyfill/dist/ponyfill.es2018.js
var require_ponyfill_es2018 = __commonJS({
    'node_modules/web-streams-polyfill/dist/ponyfill.es2018.js'(exports2, module2) {
        (function (global3, factory) {
            typeof exports2 === 'object' && typeof module2 !== 'undefined'
                ? factory(exports2)
                : typeof define === 'function' && define.amd
                  ? define(['exports'], factory)
                  : ((global3 = typeof globalThis !== 'undefined' ? globalThis : global3 || self),
                    factory((global3.WebStreamsPolyfill = {})));
        })(exports2, function (exports3) {
            'use strict';
            function noop3() {
                return void 0;
            }
            function typeIsObject(x2) {
                return (typeof x2 === 'object' && x2 !== null) || typeof x2 === 'function';
            }
            const rethrowAssertionErrorRejection = noop3;
            function setFunctionName(fn, name) {
                try {
                    Object.defineProperty(fn, 'name', {
                        value: name,
                        configurable: true,
                    });
                } catch (_a6) {}
            }
            const originalPromise = Promise;
            const originalPromiseThen = Promise.prototype.then;
            const originalPromiseReject = Promise.reject.bind(originalPromise);
            function newPromise(executor) {
                return new originalPromise(executor);
            }
            function promiseResolvedWith(value) {
                return newPromise((resolve) => resolve(value));
            }
            function promiseRejectedWith(reason) {
                return originalPromiseReject(reason);
            }
            function PerformPromiseThen(promise, onFulfilled, onRejected) {
                return originalPromiseThen.call(promise, onFulfilled, onRejected);
            }
            function uponPromise(promise, onFulfilled, onRejected) {
                PerformPromiseThen(
                    PerformPromiseThen(promise, onFulfilled, onRejected),
                    void 0,
                    rethrowAssertionErrorRejection,
                );
            }
            function uponFulfillment(promise, onFulfilled) {
                uponPromise(promise, onFulfilled);
            }
            function uponRejection(promise, onRejected) {
                uponPromise(promise, void 0, onRejected);
            }
            function transformPromiseWith(promise, fulfillmentHandler, rejectionHandler) {
                return PerformPromiseThen(promise, fulfillmentHandler, rejectionHandler);
            }
            function setPromiseIsHandledToTrue(promise) {
                PerformPromiseThen(promise, void 0, rethrowAssertionErrorRejection);
            }
            let _queueMicrotask = (callback) => {
                if (typeof queueMicrotask === 'function') {
                    _queueMicrotask = queueMicrotask;
                } else {
                    const resolvedPromise = promiseResolvedWith(void 0);
                    _queueMicrotask = (cb) => PerformPromiseThen(resolvedPromise, cb);
                }
                return _queueMicrotask(callback);
            };
            function reflectCall(F2, V, args) {
                if (typeof F2 !== 'function') {
                    throw new TypeError('Argument is not a function');
                }
                return Function.prototype.apply.call(F2, V, args);
            }
            function promiseCall(F2, V, args) {
                try {
                    return promiseResolvedWith(reflectCall(F2, V, args));
                } catch (value) {
                    return promiseRejectedWith(value);
                }
            }
            const QUEUE_MAX_ARRAY_SIZE = 16384;
            class SimpleQueue {
                constructor() {
                    this._cursor = 0;
                    this._size = 0;
                    this._front = {
                        _elements: [],
                        _next: void 0,
                    };
                    this._back = this._front;
                    this._cursor = 0;
                    this._size = 0;
                }
                get length() {
                    return this._size;
                }
                // For exception safety, this method is structured in order:
                // 1. Read state
                // 2. Calculate required state mutations
                // 3. Perform state mutations
                push(element) {
                    const oldBack = this._back;
                    let newBack = oldBack;
                    if (oldBack._elements.length === QUEUE_MAX_ARRAY_SIZE - 1) {
                        newBack = {
                            _elements: [],
                            _next: void 0,
                        };
                    }
                    oldBack._elements.push(element);
                    if (newBack !== oldBack) {
                        this._back = newBack;
                        oldBack._next = newBack;
                    }
                    ++this._size;
                }
                // Like push(), shift() follows the read -> calculate -> mutate pattern for
                // exception safety.
                shift() {
                    const oldFront = this._front;
                    let newFront = oldFront;
                    const oldCursor = this._cursor;
                    let newCursor = oldCursor + 1;
                    const elements = oldFront._elements;
                    const element = elements[oldCursor];
                    if (newCursor === QUEUE_MAX_ARRAY_SIZE) {
                        newFront = oldFront._next;
                        newCursor = 0;
                    }
                    --this._size;
                    this._cursor = newCursor;
                    if (oldFront !== newFront) {
                        this._front = newFront;
                    }
                    elements[oldCursor] = void 0;
                    return element;
                }
                // The tricky thing about forEach() is that it can be called
                // re-entrantly. The queue may be mutated inside the callback. It is easy to
                // see that push() within the callback has no negative effects since the end
                // of the queue is checked for on every iteration. If shift() is called
                // repeatedly within the callback then the next iteration may return an
                // element that has been removed. In this case the callback will be called
                // with undefined values until we either "catch up" with elements that still
                // exist or reach the back of the queue.
                forEach(callback) {
                    let i2 = this._cursor;
                    let node = this._front;
                    let elements = node._elements;
                    while (i2 !== elements.length || node._next !== void 0) {
                        if (i2 === elements.length) {
                            node = node._next;
                            elements = node._elements;
                            i2 = 0;
                            if (elements.length === 0) {
                                break;
                            }
                        }
                        callback(elements[i2]);
                        ++i2;
                    }
                }
                // Return the element that would be returned if shift() was called now,
                // without modifying the queue.
                peek() {
                    const front = this._front;
                    const cursor = this._cursor;
                    return front._elements[cursor];
                }
            }
            const AbortSteps = Symbol('[[AbortSteps]]');
            const ErrorSteps = Symbol('[[ErrorSteps]]');
            const CancelSteps = Symbol('[[CancelSteps]]');
            const PullSteps = Symbol('[[PullSteps]]');
            const ReleaseSteps = Symbol('[[ReleaseSteps]]');
            function ReadableStreamReaderGenericInitialize(reader, stream) {
                reader._ownerReadableStream = stream;
                stream._reader = reader;
                if (stream._state === 'readable') {
                    defaultReaderClosedPromiseInitialize(reader);
                } else if (stream._state === 'closed') {
                    defaultReaderClosedPromiseInitializeAsResolved(reader);
                } else {
                    defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);
                }
            }
            function ReadableStreamReaderGenericCancel(reader, reason) {
                const stream = reader._ownerReadableStream;
                return ReadableStreamCancel(stream, reason);
            }
            function ReadableStreamReaderGenericRelease(reader) {
                const stream = reader._ownerReadableStream;
                if (stream._state === 'readable') {
                    defaultReaderClosedPromiseReject(
                        reader,
                        new TypeError(
                            `Reader was released and can no longer be used to monitor the stream's closedness`,
                        ),
                    );
                } else {
                    defaultReaderClosedPromiseResetToRejected(
                        reader,
                        new TypeError(
                            `Reader was released and can no longer be used to monitor the stream's closedness`,
                        ),
                    );
                }
                stream._readableStreamController[ReleaseSteps]();
                stream._reader = void 0;
                reader._ownerReadableStream = void 0;
            }
            function readerLockException(name) {
                return new TypeError('Cannot ' + name + ' a stream using a released reader');
            }
            function defaultReaderClosedPromiseInitialize(reader) {
                reader._closedPromise = newPromise((resolve, reject) => {
                    reader._closedPromise_resolve = resolve;
                    reader._closedPromise_reject = reject;
                });
            }
            function defaultReaderClosedPromiseInitializeAsRejected(reader, reason) {
                defaultReaderClosedPromiseInitialize(reader);
                defaultReaderClosedPromiseReject(reader, reason);
            }
            function defaultReaderClosedPromiseInitializeAsResolved(reader) {
                defaultReaderClosedPromiseInitialize(reader);
                defaultReaderClosedPromiseResolve(reader);
            }
            function defaultReaderClosedPromiseReject(reader, reason) {
                if (reader._closedPromise_reject === void 0) {
                    return;
                }
                setPromiseIsHandledToTrue(reader._closedPromise);
                reader._closedPromise_reject(reason);
                reader._closedPromise_resolve = void 0;
                reader._closedPromise_reject = void 0;
            }
            function defaultReaderClosedPromiseResetToRejected(reader, reason) {
                defaultReaderClosedPromiseInitializeAsRejected(reader, reason);
            }
            function defaultReaderClosedPromiseResolve(reader) {
                if (reader._closedPromise_resolve === void 0) {
                    return;
                }
                reader._closedPromise_resolve(void 0);
                reader._closedPromise_resolve = void 0;
                reader._closedPromise_reject = void 0;
            }
            const NumberIsFinite =
                Number.isFinite ||
                function (x2) {
                    return typeof x2 === 'number' && isFinite(x2);
                };
            const MathTrunc =
                Math.trunc ||
                function (v) {
                    return v < 0 ? Math.ceil(v) : Math.floor(v);
                };
            function isDictionary(x2) {
                return typeof x2 === 'object' || typeof x2 === 'function';
            }
            function assertDictionary(obj, context) {
                if (obj !== void 0 && !isDictionary(obj)) {
                    throw new TypeError(`${context} is not an object.`);
                }
            }
            function assertFunction(x2, context) {
                if (typeof x2 !== 'function') {
                    throw new TypeError(`${context} is not a function.`);
                }
            }
            function isObject(x2) {
                return (typeof x2 === 'object' && x2 !== null) || typeof x2 === 'function';
            }
            function assertObject(x2, context) {
                if (!isObject(x2)) {
                    throw new TypeError(`${context} is not an object.`);
                }
            }
            function assertRequiredArgument(x2, position, context) {
                if (x2 === void 0) {
                    throw new TypeError(`Parameter ${position} is required in '${context}'.`);
                }
            }
            function assertRequiredField(x2, field, context) {
                if (x2 === void 0) {
                    throw new TypeError(`${field} is required in '${context}'.`);
                }
            }
            function convertUnrestrictedDouble(value) {
                return Number(value);
            }
            function censorNegativeZero(x2) {
                return x2 === 0 ? 0 : x2;
            }
            function integerPart(x2) {
                return censorNegativeZero(MathTrunc(x2));
            }
            function convertUnsignedLongLongWithEnforceRange(value, context) {
                const lowerBound = 0;
                const upperBound = Number.MAX_SAFE_INTEGER;
                let x2 = Number(value);
                x2 = censorNegativeZero(x2);
                if (!NumberIsFinite(x2)) {
                    throw new TypeError(`${context} is not a finite number`);
                }
                x2 = integerPart(x2);
                if (x2 < lowerBound || x2 > upperBound) {
                    throw new TypeError(
                        `${context} is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`,
                    );
                }
                if (!NumberIsFinite(x2) || x2 === 0) {
                    return 0;
                }
                return x2;
            }
            function assertReadableStream(x2, context) {
                if (!IsReadableStream(x2)) {
                    throw new TypeError(`${context} is not a ReadableStream.`);
                }
            }
            function AcquireReadableStreamDefaultReader(stream) {
                return new ReadableStreamDefaultReader(stream);
            }
            function ReadableStreamAddReadRequest(stream, readRequest) {
                stream._reader._readRequests.push(readRequest);
            }
            function ReadableStreamFulfillReadRequest(stream, chunk, done) {
                const reader = stream._reader;
                const readRequest = reader._readRequests.shift();
                if (done) {
                    readRequest._closeSteps();
                } else {
                    readRequest._chunkSteps(chunk);
                }
            }
            function ReadableStreamGetNumReadRequests(stream) {
                return stream._reader._readRequests.length;
            }
            function ReadableStreamHasDefaultReader(stream) {
                const reader = stream._reader;
                if (reader === void 0) {
                    return false;
                }
                if (!IsReadableStreamDefaultReader(reader)) {
                    return false;
                }
                return true;
            }
            class ReadableStreamDefaultReader {
                constructor(stream) {
                    assertRequiredArgument(stream, 1, 'ReadableStreamDefaultReader');
                    assertReadableStream(stream, 'First parameter');
                    if (IsReadableStreamLocked(stream)) {
                        throw new TypeError(
                            'This stream has already been locked for exclusive reading by another reader',
                        );
                    }
                    ReadableStreamReaderGenericInitialize(this, stream);
                    this._readRequests = new SimpleQueue();
                }
                /**
                 * Returns a promise that will be fulfilled when the stream becomes closed,
                 * or rejected if the stream ever errors or the reader's lock is released before the stream finishes closing.
                 */
                get closed() {
                    if (!IsReadableStreamDefaultReader(this)) {
                        return promiseRejectedWith(defaultReaderBrandCheckException('closed'));
                    }
                    return this._closedPromise;
                }
                /**
                 * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.
                 */
                cancel(reason = void 0) {
                    if (!IsReadableStreamDefaultReader(this)) {
                        return promiseRejectedWith(defaultReaderBrandCheckException('cancel'));
                    }
                    if (this._ownerReadableStream === void 0) {
                        return promiseRejectedWith(readerLockException('cancel'));
                    }
                    return ReadableStreamReaderGenericCancel(this, reason);
                }
                /**
                 * Returns a promise that allows access to the next chunk from the stream's internal queue, if available.
                 *
                 * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.
                 */
                read() {
                    if (!IsReadableStreamDefaultReader(this)) {
                        return promiseRejectedWith(defaultReaderBrandCheckException('read'));
                    }
                    if (this._ownerReadableStream === void 0) {
                        return promiseRejectedWith(readerLockException('read from'));
                    }
                    let resolvePromise;
                    let rejectPromise;
                    const promise = newPromise((resolve, reject) => {
                        resolvePromise = resolve;
                        rejectPromise = reject;
                    });
                    const readRequest = {
                        _chunkSteps: (chunk) => resolvePromise({ value: chunk, done: false }),
                        _closeSteps: () => resolvePromise({ value: void 0, done: true }),
                        _errorSteps: (e2) => rejectPromise(e2),
                    };
                    ReadableStreamDefaultReaderRead(this, readRequest);
                    return promise;
                }
                /**
                 * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.
                 * If the associated stream is errored when the lock is released, the reader will appear errored in the same way
                 * from now on; otherwise, the reader will appear closed.
                 *
                 * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by
                 * the reader's {@link ReadableStreamDefaultReader.read | read()} method has not yet been settled. Attempting to
                 * do so will throw a `TypeError` and leave the reader locked to the stream.
                 */
                releaseLock() {
                    if (!IsReadableStreamDefaultReader(this)) {
                        throw defaultReaderBrandCheckException('releaseLock');
                    }
                    if (this._ownerReadableStream === void 0) {
                        return;
                    }
                    ReadableStreamDefaultReaderRelease(this);
                }
            }
            Object.defineProperties(ReadableStreamDefaultReader.prototype, {
                cancel: { enumerable: true },
                read: { enumerable: true },
                releaseLock: { enumerable: true },
                closed: { enumerable: true },
            });
            setFunctionName(ReadableStreamDefaultReader.prototype.cancel, 'cancel');
            setFunctionName(ReadableStreamDefaultReader.prototype.read, 'read');
            setFunctionName(ReadableStreamDefaultReader.prototype.releaseLock, 'releaseLock');
            if (typeof Symbol.toStringTag === 'symbol') {
                Object.defineProperty(ReadableStreamDefaultReader.prototype, Symbol.toStringTag, {
                    value: 'ReadableStreamDefaultReader',
                    configurable: true,
                });
            }
            function IsReadableStreamDefaultReader(x2) {
                if (!typeIsObject(x2)) {
                    return false;
                }
                if (!Object.prototype.hasOwnProperty.call(x2, '_readRequests')) {
                    return false;
                }
                return x2 instanceof ReadableStreamDefaultReader;
            }
            function ReadableStreamDefaultReaderRead(reader, readRequest) {
                const stream = reader._ownerReadableStream;
                stream._disturbed = true;
                if (stream._state === 'closed') {
                    readRequest._closeSteps();
                } else if (stream._state === 'errored') {
                    readRequest._errorSteps(stream._storedError);
                } else {
                    stream._readableStreamController[PullSteps](readRequest);
                }
            }
            function ReadableStreamDefaultReaderRelease(reader) {
                ReadableStreamReaderGenericRelease(reader);
                const e2 = new TypeError('Reader was released');
                ReadableStreamDefaultReaderErrorReadRequests(reader, e2);
            }
            function ReadableStreamDefaultReaderErrorReadRequests(reader, e2) {
                const readRequests = reader._readRequests;
                reader._readRequests = new SimpleQueue();
                readRequests.forEach((readRequest) => {
                    readRequest._errorSteps(e2);
                });
            }
            function defaultReaderBrandCheckException(name) {
                return new TypeError(
                    `ReadableStreamDefaultReader.prototype.${name} can only be used on a ReadableStreamDefaultReader`,
                );
            }
            const AsyncIteratorPrototype = Object.getPrototypeOf(
                Object.getPrototypeOf(async function* () {}).prototype,
            );
            class ReadableStreamAsyncIteratorImpl {
                constructor(reader, preventCancel) {
                    this._ongoingPromise = void 0;
                    this._isFinished = false;
                    this._reader = reader;
                    this._preventCancel = preventCancel;
                }
                next() {
                    const nextSteps = () => this._nextSteps();
                    this._ongoingPromise = this._ongoingPromise
                        ? transformPromiseWith(this._ongoingPromise, nextSteps, nextSteps)
                        : nextSteps();
                    return this._ongoingPromise;
                }
                return(value) {
                    const returnSteps = () => this._returnSteps(value);
                    return this._ongoingPromise
                        ? transformPromiseWith(this._ongoingPromise, returnSteps, returnSteps)
                        : returnSteps();
                }
                _nextSteps() {
                    if (this._isFinished) {
                        return Promise.resolve({ value: void 0, done: true });
                    }
                    const reader = this._reader;
                    let resolvePromise;
                    let rejectPromise;
                    const promise = newPromise((resolve, reject) => {
                        resolvePromise = resolve;
                        rejectPromise = reject;
                    });
                    const readRequest = {
                        _chunkSteps: (chunk) => {
                            this._ongoingPromise = void 0;
                            _queueMicrotask(() => resolvePromise({ value: chunk, done: false }));
                        },
                        _closeSteps: () => {
                            this._ongoingPromise = void 0;
                            this._isFinished = true;
                            ReadableStreamReaderGenericRelease(reader);
                            resolvePromise({ value: void 0, done: true });
                        },
                        _errorSteps: (reason) => {
                            this._ongoingPromise = void 0;
                            this._isFinished = true;
                            ReadableStreamReaderGenericRelease(reader);
                            rejectPromise(reason);
                        },
                    };
                    ReadableStreamDefaultReaderRead(reader, readRequest);
                    return promise;
                }
                _returnSteps(value) {
                    if (this._isFinished) {
                        return Promise.resolve({ value, done: true });
                    }
                    this._isFinished = true;
                    const reader = this._reader;
                    if (!this._preventCancel) {
                        const result = ReadableStreamReaderGenericCancel(reader, value);
                        ReadableStreamReaderGenericRelease(reader);
                        return transformPromiseWith(result, () => ({ value, done: true }));
                    }
                    ReadableStreamReaderGenericRelease(reader);
                    return promiseResolvedWith({ value, done: true });
                }
            }
            const ReadableStreamAsyncIteratorPrototype = {
                next() {
                    if (!IsReadableStreamAsyncIterator(this)) {
                        return promiseRejectedWith(streamAsyncIteratorBrandCheckException('next'));
                    }
                    return this._asyncIteratorImpl.next();
                },
                return(value) {
                    if (!IsReadableStreamAsyncIterator(this)) {
                        return promiseRejectedWith(
                            streamAsyncIteratorBrandCheckException('return'),
                        );
                    }
                    return this._asyncIteratorImpl.return(value);
                },
            };
            Object.setPrototypeOf(ReadableStreamAsyncIteratorPrototype, AsyncIteratorPrototype);
            function AcquireReadableStreamAsyncIterator(stream, preventCancel) {
                const reader = AcquireReadableStreamDefaultReader(stream);
                const impl = new ReadableStreamAsyncIteratorImpl(reader, preventCancel);
                const iterator = Object.create(ReadableStreamAsyncIteratorPrototype);
                iterator._asyncIteratorImpl = impl;
                return iterator;
            }
            function IsReadableStreamAsyncIterator(x2) {
                if (!typeIsObject(x2)) {
                    return false;
                }
                if (!Object.prototype.hasOwnProperty.call(x2, '_asyncIteratorImpl')) {
                    return false;
                }
                try {
                    return x2._asyncIteratorImpl instanceof ReadableStreamAsyncIteratorImpl;
                } catch (_a6) {
                    return false;
                }
            }
            function streamAsyncIteratorBrandCheckException(name) {
                return new TypeError(
                    `ReadableStreamAsyncIterator.${name} can only be used on a ReadableSteamAsyncIterator`,
                );
            }
            const NumberIsNaN =
                Number.isNaN ||
                function (x2) {
                    return x2 !== x2;
                };
            var _a5, _b, _c;
            function CreateArrayFromList(elements) {
                return elements.slice();
            }
            function CopyDataBlockBytes(dest, destOffset, src, srcOffset, n) {
                new Uint8Array(dest).set(new Uint8Array(src, srcOffset, n), destOffset);
            }
            let TransferArrayBuffer = (O) => {
                if (typeof O.transfer === 'function') {
                    TransferArrayBuffer = (buffer) => buffer.transfer();
                } else if (typeof structuredClone === 'function') {
                    TransferArrayBuffer = (buffer) =>
                        structuredClone(buffer, { transfer: [buffer] });
                } else {
                    TransferArrayBuffer = (buffer) => buffer;
                }
                return TransferArrayBuffer(O);
            };
            let IsDetachedBuffer = (O) => {
                if (typeof O.detached === 'boolean') {
                    IsDetachedBuffer = (buffer) => buffer.detached;
                } else {
                    IsDetachedBuffer = (buffer) => buffer.byteLength === 0;
                }
                return IsDetachedBuffer(O);
            };
            function ArrayBufferSlice(buffer, begin, end2) {
                if (buffer.slice) {
                    return buffer.slice(begin, end2);
                }
                const length = end2 - begin;
                const slice2 = new ArrayBuffer(length);
                CopyDataBlockBytes(slice2, 0, buffer, begin, length);
                return slice2;
            }
            function GetMethod(receiver, prop2) {
                const func = receiver[prop2];
                if (func === void 0 || func === null) {
                    return void 0;
                }
                if (typeof func !== 'function') {
                    throw new TypeError(`${String(prop2)} is not a function`);
                }
                return func;
            }
            function CreateAsyncFromSyncIterator(syncIteratorRecord) {
                const syncIterable = {
                    [Symbol.iterator]: () => syncIteratorRecord.iterator,
                };
                const asyncIterator = (async function* () {
                    return yield* syncIterable;
                })();
                const nextMethod = asyncIterator.next;
                return { iterator: asyncIterator, nextMethod, done: false };
            }
            const SymbolAsyncIterator =
                (_c =
                    (_a5 = Symbol.asyncIterator) !== null && _a5 !== void 0
                        ? _a5
                        : (_b = Symbol.for) === null || _b === void 0
                          ? void 0
                          : _b.call(Symbol, 'Symbol.asyncIterator')) !== null && _c !== void 0
                    ? _c
                    : '@@asyncIterator';
            function GetIterator(obj, hint = 'sync', method) {
                if (method === void 0) {
                    if (hint === 'async') {
                        method = GetMethod(obj, SymbolAsyncIterator);
                        if (method === void 0) {
                            const syncMethod = GetMethod(obj, Symbol.iterator);
                            const syncIteratorRecord = GetIterator(obj, 'sync', syncMethod);
                            return CreateAsyncFromSyncIterator(syncIteratorRecord);
                        }
                    } else {
                        method = GetMethod(obj, Symbol.iterator);
                    }
                }
                if (method === void 0) {
                    throw new TypeError('The object is not iterable');
                }
                const iterator = reflectCall(method, obj, []);
                if (!typeIsObject(iterator)) {
                    throw new TypeError('The iterator method must return an object');
                }
                const nextMethod = iterator.next;
                return { iterator, nextMethod, done: false };
            }
            function IteratorNext(iteratorRecord) {
                const result = reflectCall(iteratorRecord.nextMethod, iteratorRecord.iterator, []);
                if (!typeIsObject(result)) {
                    throw new TypeError('The iterator.next() method must return an object');
                }
                return result;
            }
            function IteratorComplete(iterResult) {
                return Boolean(iterResult.done);
            }
            function IteratorValue(iterResult) {
                return iterResult.value;
            }
            function IsNonNegativeNumber(v) {
                if (typeof v !== 'number') {
                    return false;
                }
                if (NumberIsNaN(v)) {
                    return false;
                }
                if (v < 0) {
                    return false;
                }
                return true;
            }
            function CloneAsUint8Array(O) {
                const buffer = ArrayBufferSlice(
                    O.buffer,
                    O.byteOffset,
                    O.byteOffset + O.byteLength,
                );
                return new Uint8Array(buffer);
            }
            function DequeueValue(container) {
                const pair = container._queue.shift();
                container._queueTotalSize -= pair.size;
                if (container._queueTotalSize < 0) {
                    container._queueTotalSize = 0;
                }
                return pair.value;
            }
            function EnqueueValueWithSize(container, value, size) {
                if (!IsNonNegativeNumber(size) || size === Infinity) {
                    throw new RangeError('Size must be a finite, non-NaN, non-negative number.');
                }
                container._queue.push({ value, size });
                container._queueTotalSize += size;
            }
            function PeekQueueValue(container) {
                const pair = container._queue.peek();
                return pair.value;
            }
            function ResetQueue(container) {
                container._queue = new SimpleQueue();
                container._queueTotalSize = 0;
            }
            function isDataViewConstructor(ctor) {
                return ctor === DataView;
            }
            function isDataView(view) {
                return isDataViewConstructor(view.constructor);
            }
            function arrayBufferViewElementSize(ctor) {
                if (isDataViewConstructor(ctor)) {
                    return 1;
                }
                return ctor.BYTES_PER_ELEMENT;
            }
            class ReadableStreamBYOBRequest {
                constructor() {
                    throw new TypeError('Illegal constructor');
                }
                /**
                 * Returns the view for writing in to, or `null` if the BYOB request has already been responded to.
                 */
                get view() {
                    if (!IsReadableStreamBYOBRequest(this)) {
                        throw byobRequestBrandCheckException('view');
                    }
                    return this._view;
                }
                respond(bytesWritten) {
                    if (!IsReadableStreamBYOBRequest(this)) {
                        throw byobRequestBrandCheckException('respond');
                    }
                    assertRequiredArgument(bytesWritten, 1, 'respond');
                    bytesWritten = convertUnsignedLongLongWithEnforceRange(
                        bytesWritten,
                        'First parameter',
                    );
                    if (this._associatedReadableByteStreamController === void 0) {
                        throw new TypeError('This BYOB request has been invalidated');
                    }
                    if (IsDetachedBuffer(this._view.buffer)) {
                        throw new TypeError(
                            `The BYOB request's buffer has been detached and so cannot be used as a response`,
                        );
                    }
                    ReadableByteStreamControllerRespond(
                        this._associatedReadableByteStreamController,
                        bytesWritten,
                    );
                }
                respondWithNewView(view) {
                    if (!IsReadableStreamBYOBRequest(this)) {
                        throw byobRequestBrandCheckException('respondWithNewView');
                    }
                    assertRequiredArgument(view, 1, 'respondWithNewView');
                    if (!ArrayBuffer.isView(view)) {
                        throw new TypeError('You can only respond with array buffer views');
                    }
                    if (this._associatedReadableByteStreamController === void 0) {
                        throw new TypeError('This BYOB request has been invalidated');
                    }
                    if (IsDetachedBuffer(view.buffer)) {
                        throw new TypeError(
                            "The given view's buffer has been detached and so cannot be used as a response",
                        );
                    }
                    ReadableByteStreamControllerRespondWithNewView(
                        this._associatedReadableByteStreamController,
                        view,
                    );
                }
            }
            Object.defineProperties(ReadableStreamBYOBRequest.prototype, {
                respond: { enumerable: true },
                respondWithNewView: { enumerable: true },
                view: { enumerable: true },
            });
            setFunctionName(ReadableStreamBYOBRequest.prototype.respond, 'respond');
            setFunctionName(
                ReadableStreamBYOBRequest.prototype.respondWithNewView,
                'respondWithNewView',
            );
            if (typeof Symbol.toStringTag === 'symbol') {
                Object.defineProperty(ReadableStreamBYOBRequest.prototype, Symbol.toStringTag, {
                    value: 'ReadableStreamBYOBRequest',
                    configurable: true,
                });
            }
            class ReadableByteStreamController {
                constructor() {
                    throw new TypeError('Illegal constructor');
                }
                /**
                 * Returns the current BYOB pull request, or `null` if there isn't one.
                 */
                get byobRequest() {
                    if (!IsReadableByteStreamController(this)) {
                        throw byteStreamControllerBrandCheckException('byobRequest');
                    }
                    return ReadableByteStreamControllerGetBYOBRequest(this);
                }
                /**
                 * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is
                 * over-full. An underlying byte source ought to use this information to determine when and how to apply backpressure.
                 */
                get desiredSize() {
                    if (!IsReadableByteStreamController(this)) {
                        throw byteStreamControllerBrandCheckException('desiredSize');
                    }
                    return ReadableByteStreamControllerGetDesiredSize(this);
                }
                /**
                 * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from
                 * the stream, but once those are read, the stream will become closed.
                 */
                close() {
                    if (!IsReadableByteStreamController(this)) {
                        throw byteStreamControllerBrandCheckException('close');
                    }
                    if (this._closeRequested) {
                        throw new TypeError(
                            'The stream has already been closed; do not close it again!',
                        );
                    }
                    const state = this._controlledReadableByteStream._state;
                    if (state !== 'readable') {
                        throw new TypeError(
                            `The stream (in ${state} state) is not in the readable state and cannot be closed`,
                        );
                    }
                    ReadableByteStreamControllerClose(this);
                }
                enqueue(chunk) {
                    if (!IsReadableByteStreamController(this)) {
                        throw byteStreamControllerBrandCheckException('enqueue');
                    }
                    assertRequiredArgument(chunk, 1, 'enqueue');
                    if (!ArrayBuffer.isView(chunk)) {
                        throw new TypeError('chunk must be an array buffer view');
                    }
                    if (chunk.byteLength === 0) {
                        throw new TypeError('chunk must have non-zero byteLength');
                    }
                    if (chunk.buffer.byteLength === 0) {
                        throw new TypeError(`chunk's buffer must have non-zero byteLength`);
                    }
                    if (this._closeRequested) {
                        throw new TypeError('stream is closed or draining');
                    }
                    const state = this._controlledReadableByteStream._state;
                    if (state !== 'readable') {
                        throw new TypeError(
                            `The stream (in ${state} state) is not in the readable state and cannot be enqueued to`,
                        );
                    }
                    ReadableByteStreamControllerEnqueue(this, chunk);
                }
                /**
                 * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.
                 */
                error(e2 = void 0) {
                    if (!IsReadableByteStreamController(this)) {
                        throw byteStreamControllerBrandCheckException('error');
                    }
                    ReadableByteStreamControllerError(this, e2);
                }
                /** @internal */
                [CancelSteps](reason) {
                    ReadableByteStreamControllerClearPendingPullIntos(this);
                    ResetQueue(this);
                    const result = this._cancelAlgorithm(reason);
                    ReadableByteStreamControllerClearAlgorithms(this);
                    return result;
                }
                /** @internal */
                [PullSteps](readRequest) {
                    const stream = this._controlledReadableByteStream;
                    if (this._queueTotalSize > 0) {
                        ReadableByteStreamControllerFillReadRequestFromQueue(this, readRequest);
                        return;
                    }
                    const autoAllocateChunkSize = this._autoAllocateChunkSize;
                    if (autoAllocateChunkSize !== void 0) {
                        let buffer;
                        try {
                            buffer = new ArrayBuffer(autoAllocateChunkSize);
                        } catch (bufferE) {
                            readRequest._errorSteps(bufferE);
                            return;
                        }
                        const pullIntoDescriptor = {
                            buffer,
                            bufferByteLength: autoAllocateChunkSize,
                            byteOffset: 0,
                            byteLength: autoAllocateChunkSize,
                            bytesFilled: 0,
                            minimumFill: 1,
                            elementSize: 1,
                            viewConstructor: Uint8Array,
                            readerType: 'default',
                        };
                        this._pendingPullIntos.push(pullIntoDescriptor);
                    }
                    ReadableStreamAddReadRequest(stream, readRequest);
                    ReadableByteStreamControllerCallPullIfNeeded(this);
                }
                /** @internal */
                [ReleaseSteps]() {
                    if (this._pendingPullIntos.length > 0) {
                        const firstPullInto = this._pendingPullIntos.peek();
                        firstPullInto.readerType = 'none';
                        this._pendingPullIntos = new SimpleQueue();
                        this._pendingPullIntos.push(firstPullInto);
                    }
                }
            }
            Object.defineProperties(ReadableByteStreamController.prototype, {
                close: { enumerable: true },
                enqueue: { enumerable: true },
                error: { enumerable: true },
                byobRequest: { enumerable: true },
                desiredSize: { enumerable: true },
            });
            setFunctionName(ReadableByteStreamController.prototype.close, 'close');
            setFunctionName(ReadableByteStreamController.prototype.enqueue, 'enqueue');
            setFunctionName(ReadableByteStreamController.prototype.error, 'error');
            if (typeof Symbol.toStringTag === 'symbol') {
                Object.defineProperty(ReadableByteStreamController.prototype, Symbol.toStringTag, {
                    value: 'ReadableByteStreamController',
                    configurable: true,
                });
            }
            function IsReadableByteStreamController(x2) {
                if (!typeIsObject(x2)) {
                    return false;
                }
                if (!Object.prototype.hasOwnProperty.call(x2, '_controlledReadableByteStream')) {
                    return false;
                }
                return x2 instanceof ReadableByteStreamController;
            }
            function IsReadableStreamBYOBRequest(x2) {
                if (!typeIsObject(x2)) {
                    return false;
                }
                if (
                    !Object.prototype.hasOwnProperty.call(
                        x2,
                        '_associatedReadableByteStreamController',
                    )
                ) {
                    return false;
                }
                return x2 instanceof ReadableStreamBYOBRequest;
            }
            function ReadableByteStreamControllerCallPullIfNeeded(controller) {
                const shouldPull = ReadableByteStreamControllerShouldCallPull(controller);
                if (!shouldPull) {
                    return;
                }
                if (controller._pulling) {
                    controller._pullAgain = true;
                    return;
                }
                controller._pulling = true;
                const pullPromise = controller._pullAlgorithm();
                uponPromise(
                    pullPromise,
                    () => {
                        controller._pulling = false;
                        if (controller._pullAgain) {
                            controller._pullAgain = false;
                            ReadableByteStreamControllerCallPullIfNeeded(controller);
                        }
                        return null;
                    },
                    (e2) => {
                        ReadableByteStreamControllerError(controller, e2);
                        return null;
                    },
                );
            }
            function ReadableByteStreamControllerClearPendingPullIntos(controller) {
                ReadableByteStreamControllerInvalidateBYOBRequest(controller);
                controller._pendingPullIntos = new SimpleQueue();
            }
            function ReadableByteStreamControllerCommitPullIntoDescriptor(
                stream,
                pullIntoDescriptor,
            ) {
                let done = false;
                if (stream._state === 'closed') {
                    done = true;
                }
                const filledView =
                    ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);
                if (pullIntoDescriptor.readerType === 'default') {
                    ReadableStreamFulfillReadRequest(stream, filledView, done);
                } else {
                    ReadableStreamFulfillReadIntoRequest(stream, filledView, done);
                }
            }
            function ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor) {
                const bytesFilled = pullIntoDescriptor.bytesFilled;
                const elementSize = pullIntoDescriptor.elementSize;
                return new pullIntoDescriptor.viewConstructor(
                    pullIntoDescriptor.buffer,
                    pullIntoDescriptor.byteOffset,
                    bytesFilled / elementSize,
                );
            }
            function ReadableByteStreamControllerEnqueueChunkToQueue(
                controller,
                buffer,
                byteOffset,
                byteLength,
            ) {
                controller._queue.push({ buffer, byteOffset, byteLength });
                controller._queueTotalSize += byteLength;
            }
            function ReadableByteStreamControllerEnqueueClonedChunkToQueue(
                controller,
                buffer,
                byteOffset,
                byteLength,
            ) {
                let clonedChunk;
                try {
                    clonedChunk = ArrayBufferSlice(buffer, byteOffset, byteOffset + byteLength);
                } catch (cloneE) {
                    ReadableByteStreamControllerError(controller, cloneE);
                    throw cloneE;
                }
                ReadableByteStreamControllerEnqueueChunkToQueue(
                    controller,
                    clonedChunk,
                    0,
                    byteLength,
                );
            }
            function ReadableByteStreamControllerEnqueueDetachedPullIntoToQueue(
                controller,
                firstDescriptor,
            ) {
                if (firstDescriptor.bytesFilled > 0) {
                    ReadableByteStreamControllerEnqueueClonedChunkToQueue(
                        controller,
                        firstDescriptor.buffer,
                        firstDescriptor.byteOffset,
                        firstDescriptor.bytesFilled,
                    );
                }
                ReadableByteStreamControllerShiftPendingPullInto(controller);
            }
            function ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(
                controller,
                pullIntoDescriptor,
            ) {
                const maxBytesToCopy = Math.min(
                    controller._queueTotalSize,
                    pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled,
                );
                const maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy;
                let totalBytesToCopyRemaining = maxBytesToCopy;
                let ready = false;
                const remainderBytes = maxBytesFilled % pullIntoDescriptor.elementSize;
                const maxAlignedBytes = maxBytesFilled - remainderBytes;
                if (maxAlignedBytes >= pullIntoDescriptor.minimumFill) {
                    totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled;
                    ready = true;
                }
                const queue = controller._queue;
                while (totalBytesToCopyRemaining > 0) {
                    const headOfQueue = queue.peek();
                    const bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength);
                    const destStart =
                        pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;
                    CopyDataBlockBytes(
                        pullIntoDescriptor.buffer,
                        destStart,
                        headOfQueue.buffer,
                        headOfQueue.byteOffset,
                        bytesToCopy,
                    );
                    if (headOfQueue.byteLength === bytesToCopy) {
                        queue.shift();
                    } else {
                        headOfQueue.byteOffset += bytesToCopy;
                        headOfQueue.byteLength -= bytesToCopy;
                    }
                    controller._queueTotalSize -= bytesToCopy;
                    ReadableByteStreamControllerFillHeadPullIntoDescriptor(
                        controller,
                        bytesToCopy,
                        pullIntoDescriptor,
                    );
                    totalBytesToCopyRemaining -= bytesToCopy;
                }
                return ready;
            }
            function ReadableByteStreamControllerFillHeadPullIntoDescriptor(
                controller,
                size,
                pullIntoDescriptor,
            ) {
                pullIntoDescriptor.bytesFilled += size;
            }
            function ReadableByteStreamControllerHandleQueueDrain(controller) {
                if (controller._queueTotalSize === 0 && controller._closeRequested) {
                    ReadableByteStreamControllerClearAlgorithms(controller);
                    ReadableStreamClose(controller._controlledReadableByteStream);
                } else {
                    ReadableByteStreamControllerCallPullIfNeeded(controller);
                }
            }
            function ReadableByteStreamControllerInvalidateBYOBRequest(controller) {
                if (controller._byobRequest === null) {
                    return;
                }
                controller._byobRequest._associatedReadableByteStreamController = void 0;
                controller._byobRequest._view = null;
                controller._byobRequest = null;
            }
            function ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller) {
                while (controller._pendingPullIntos.length > 0) {
                    if (controller._queueTotalSize === 0) {
                        return;
                    }
                    const pullIntoDescriptor = controller._pendingPullIntos.peek();
                    if (
                        ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(
                            controller,
                            pullIntoDescriptor,
                        )
                    ) {
                        ReadableByteStreamControllerShiftPendingPullInto(controller);
                        ReadableByteStreamControllerCommitPullIntoDescriptor(
                            controller._controlledReadableByteStream,
                            pullIntoDescriptor,
                        );
                    }
                }
            }
            function ReadableByteStreamControllerProcessReadRequestsUsingQueue(controller) {
                const reader = controller._controlledReadableByteStream._reader;
                while (reader._readRequests.length > 0) {
                    if (controller._queueTotalSize === 0) {
                        return;
                    }
                    const readRequest = reader._readRequests.shift();
                    ReadableByteStreamControllerFillReadRequestFromQueue(controller, readRequest);
                }
            }
            function ReadableByteStreamControllerPullInto(controller, view, min, readIntoRequest) {
                const stream = controller._controlledReadableByteStream;
                const ctor = view.constructor;
                const elementSize = arrayBufferViewElementSize(ctor);
                const { byteOffset, byteLength } = view;
                const minimumFill = min * elementSize;
                let buffer;
                try {
                    buffer = TransferArrayBuffer(view.buffer);
                } catch (e2) {
                    readIntoRequest._errorSteps(e2);
                    return;
                }
                const pullIntoDescriptor = {
                    buffer,
                    bufferByteLength: buffer.byteLength,
                    byteOffset,
                    byteLength,
                    bytesFilled: 0,
                    minimumFill,
                    elementSize,
                    viewConstructor: ctor,
                    readerType: 'byob',
                };
                if (controller._pendingPullIntos.length > 0) {
                    controller._pendingPullIntos.push(pullIntoDescriptor);
                    ReadableStreamAddReadIntoRequest(stream, readIntoRequest);
                    return;
                }
                if (stream._state === 'closed') {
                    const emptyView = new ctor(
                        pullIntoDescriptor.buffer,
                        pullIntoDescriptor.byteOffset,
                        0,
                    );
                    readIntoRequest._closeSteps(emptyView);
                    return;
                }
                if (controller._queueTotalSize > 0) {
                    if (
                        ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(
                            controller,
                            pullIntoDescriptor,
                        )
                    ) {
                        const filledView =
                            ReadableByteStreamControllerConvertPullIntoDescriptor(
                                pullIntoDescriptor,
                            );
                        ReadableByteStreamControllerHandleQueueDrain(controller);
                        readIntoRequest._chunkSteps(filledView);
                        return;
                    }
                    if (controller._closeRequested) {
                        const e2 = new TypeError(
                            'Insufficient bytes to fill elements in the given buffer',
                        );
                        ReadableByteStreamControllerError(controller, e2);
                        readIntoRequest._errorSteps(e2);
                        return;
                    }
                }
                controller._pendingPullIntos.push(pullIntoDescriptor);
                ReadableStreamAddReadIntoRequest(stream, readIntoRequest);
                ReadableByteStreamControllerCallPullIfNeeded(controller);
            }
            function ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor) {
                if (firstDescriptor.readerType === 'none') {
                    ReadableByteStreamControllerShiftPendingPullInto(controller);
                }
                const stream = controller._controlledReadableByteStream;
                if (ReadableStreamHasBYOBReader(stream)) {
                    while (ReadableStreamGetNumReadIntoRequests(stream) > 0) {
                        const pullIntoDescriptor =
                            ReadableByteStreamControllerShiftPendingPullInto(controller);
                        ReadableByteStreamControllerCommitPullIntoDescriptor(
                            stream,
                            pullIntoDescriptor,
                        );
                    }
                }
            }
            function ReadableByteStreamControllerRespondInReadableState(
                controller,
                bytesWritten,
                pullIntoDescriptor,
            ) {
                ReadableByteStreamControllerFillHeadPullIntoDescriptor(
                    controller,
                    bytesWritten,
                    pullIntoDescriptor,
                );
                if (pullIntoDescriptor.readerType === 'none') {
                    ReadableByteStreamControllerEnqueueDetachedPullIntoToQueue(
                        controller,
                        pullIntoDescriptor,
                    );
                    ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);
                    return;
                }
                if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.minimumFill) {
                    return;
                }
                ReadableByteStreamControllerShiftPendingPullInto(controller);
                const remainderSize =
                    pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;
                if (remainderSize > 0) {
                    const end2 = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;
                    ReadableByteStreamControllerEnqueueClonedChunkToQueue(
                        controller,
                        pullIntoDescriptor.buffer,
                        end2 - remainderSize,
                        remainderSize,
                    );
                }
                pullIntoDescriptor.bytesFilled -= remainderSize;
                ReadableByteStreamControllerCommitPullIntoDescriptor(
                    controller._controlledReadableByteStream,
                    pullIntoDescriptor,
                );
                ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);
            }
            function ReadableByteStreamControllerRespondInternal(controller, bytesWritten) {
                const firstDescriptor = controller._pendingPullIntos.peek();
                ReadableByteStreamControllerInvalidateBYOBRequest(controller);
                const state = controller._controlledReadableByteStream._state;
                if (state === 'closed') {
                    ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor);
                } else {
                    ReadableByteStreamControllerRespondInReadableState(
                        controller,
                        bytesWritten,
                        firstDescriptor,
                    );
                }
                ReadableByteStreamControllerCallPullIfNeeded(controller);
            }
            function ReadableByteStreamControllerShiftPendingPullInto(controller) {
                const descriptor = controller._pendingPullIntos.shift();
                return descriptor;
            }
            function ReadableByteStreamControllerShouldCallPull(controller) {
                const stream = controller._controlledReadableByteStream;
                if (stream._state !== 'readable') {
                    return false;
                }
                if (controller._closeRequested) {
                    return false;
                }
                if (!controller._started) {
                    return false;
                }
                if (
                    ReadableStreamHasDefaultReader(stream) &&
                    ReadableStreamGetNumReadRequests(stream) > 0
                ) {
                    return true;
                }
                if (
                    ReadableStreamHasBYOBReader(stream) &&
                    ReadableStreamGetNumReadIntoRequests(stream) > 0
                ) {
                    return true;
                }
                const desiredSize = ReadableByteStreamControllerGetDesiredSize(controller);
                if (desiredSize > 0) {
                    return true;
                }
                return false;
            }
            function ReadableByteStreamControllerClearAlgorithms(controller) {
                controller._pullAlgorithm = void 0;
                controller._cancelAlgorithm = void 0;
            }
            function ReadableByteStreamControllerClose(controller) {
                const stream = controller._controlledReadableByteStream;
                if (controller._closeRequested || stream._state !== 'readable') {
                    return;
                }
                if (controller._queueTotalSize > 0) {
                    controller._closeRequested = true;
                    return;
                }
                if (controller._pendingPullIntos.length > 0) {
                    const firstPendingPullInto = controller._pendingPullIntos.peek();
                    if (firstPendingPullInto.bytesFilled % firstPendingPullInto.elementSize !== 0) {
                        const e2 = new TypeError(
                            'Insufficient bytes to fill elements in the given buffer',
                        );
                        ReadableByteStreamControllerError(controller, e2);
                        throw e2;
                    }
                }
                ReadableByteStreamControllerClearAlgorithms(controller);
                ReadableStreamClose(stream);
            }
            function ReadableByteStreamControllerEnqueue(controller, chunk) {
                const stream = controller._controlledReadableByteStream;
                if (controller._closeRequested || stream._state !== 'readable') {
                    return;
                }
                const { buffer, byteOffset, byteLength } = chunk;
                if (IsDetachedBuffer(buffer)) {
                    throw new TypeError("chunk's buffer is detached and so cannot be enqueued");
                }
                const transferredBuffer = TransferArrayBuffer(buffer);
                if (controller._pendingPullIntos.length > 0) {
                    const firstPendingPullInto = controller._pendingPullIntos.peek();
                    if (IsDetachedBuffer(firstPendingPullInto.buffer)) {
                        throw new TypeError(
                            "The BYOB request's buffer has been detached and so cannot be filled with an enqueued chunk",
                        );
                    }
                    ReadableByteStreamControllerInvalidateBYOBRequest(controller);
                    firstPendingPullInto.buffer = TransferArrayBuffer(firstPendingPullInto.buffer);
                    if (firstPendingPullInto.readerType === 'none') {
                        ReadableByteStreamControllerEnqueueDetachedPullIntoToQueue(
                            controller,
                            firstPendingPullInto,
                        );
                    }
                }
                if (ReadableStreamHasDefaultReader(stream)) {
                    ReadableByteStreamControllerProcessReadRequestsUsingQueue(controller);
                    if (ReadableStreamGetNumReadRequests(stream) === 0) {
                        ReadableByteStreamControllerEnqueueChunkToQueue(
                            controller,
                            transferredBuffer,
                            byteOffset,
                            byteLength,
                        );
                    } else {
                        if (controller._pendingPullIntos.length > 0) {
                            ReadableByteStreamControllerShiftPendingPullInto(controller);
                        }
                        const transferredView = new Uint8Array(
                            transferredBuffer,
                            byteOffset,
                            byteLength,
                        );
                        ReadableStreamFulfillReadRequest(stream, transferredView, false);
                    }
                } else if (ReadableStreamHasBYOBReader(stream)) {
                    ReadableByteStreamControllerEnqueueChunkToQueue(
                        controller,
                        transferredBuffer,
                        byteOffset,
                        byteLength,
                    );
                    ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);
                } else {
                    ReadableByteStreamControllerEnqueueChunkToQueue(
                        controller,
                        transferredBuffer,
                        byteOffset,
                        byteLength,
                    );
                }
                ReadableByteStreamControllerCallPullIfNeeded(controller);
            }
            function ReadableByteStreamControllerError(controller, e2) {
                const stream = controller._controlledReadableByteStream;
                if (stream._state !== 'readable') {
                    return;
                }
                ReadableByteStreamControllerClearPendingPullIntos(controller);
                ResetQueue(controller);
                ReadableByteStreamControllerClearAlgorithms(controller);
                ReadableStreamError(stream, e2);
            }
            function ReadableByteStreamControllerFillReadRequestFromQueue(controller, readRequest) {
                const entry = controller._queue.shift();
                controller._queueTotalSize -= entry.byteLength;
                ReadableByteStreamControllerHandleQueueDrain(controller);
                const view = new Uint8Array(entry.buffer, entry.byteOffset, entry.byteLength);
                readRequest._chunkSteps(view);
            }
            function ReadableByteStreamControllerGetBYOBRequest(controller) {
                if (controller._byobRequest === null && controller._pendingPullIntos.length > 0) {
                    const firstDescriptor = controller._pendingPullIntos.peek();
                    const view = new Uint8Array(
                        firstDescriptor.buffer,
                        firstDescriptor.byteOffset + firstDescriptor.bytesFilled,
                        firstDescriptor.byteLength - firstDescriptor.bytesFilled,
                    );
                    const byobRequest = Object.create(ReadableStreamBYOBRequest.prototype);
                    SetUpReadableStreamBYOBRequest(byobRequest, controller, view);
                    controller._byobRequest = byobRequest;
                }
                return controller._byobRequest;
            }
            function ReadableByteStreamControllerGetDesiredSize(controller) {
                const state = controller._controlledReadableByteStream._state;
                if (state === 'errored') {
                    return null;
                }
                if (state === 'closed') {
                    return 0;
                }
                return controller._strategyHWM - controller._queueTotalSize;
            }
            function ReadableByteStreamControllerRespond(controller, bytesWritten) {
                const firstDescriptor = controller._pendingPullIntos.peek();
                const state = controller._controlledReadableByteStream._state;
                if (state === 'closed') {
                    if (bytesWritten !== 0) {
                        throw new TypeError(
                            'bytesWritten must be 0 when calling respond() on a closed stream',
                        );
                    }
                } else {
                    if (bytesWritten === 0) {
                        throw new TypeError(
                            'bytesWritten must be greater than 0 when calling respond() on a readable stream',
                        );
                    }
                    if (firstDescriptor.bytesFilled + bytesWritten > firstDescriptor.byteLength) {
                        throw new RangeError('bytesWritten out of range');
                    }
                }
                firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer);
                ReadableByteStreamControllerRespondInternal(controller, bytesWritten);
            }
            function ReadableByteStreamControllerRespondWithNewView(controller, view) {
                const firstDescriptor = controller._pendingPullIntos.peek();
                const state = controller._controlledReadableByteStream._state;
                if (state === 'closed') {
                    if (view.byteLength !== 0) {
                        throw new TypeError(
                            "The view's length must be 0 when calling respondWithNewView() on a closed stream",
                        );
                    }
                } else {
                    if (view.byteLength === 0) {
                        throw new TypeError(
                            "The view's length must be greater than 0 when calling respondWithNewView() on a readable stream",
                        );
                    }
                }
                if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset) {
                    throw new RangeError('The region specified by view does not match byobRequest');
                }
                if (firstDescriptor.bufferByteLength !== view.buffer.byteLength) {
                    throw new RangeError(
                        'The buffer of view has different capacity than byobRequest',
                    );
                }
                if (firstDescriptor.bytesFilled + view.byteLength > firstDescriptor.byteLength) {
                    throw new RangeError('The region specified by view is larger than byobRequest');
                }
                const viewByteLength = view.byteLength;
                firstDescriptor.buffer = TransferArrayBuffer(view.buffer);
                ReadableByteStreamControllerRespondInternal(controller, viewByteLength);
            }
            function SetUpReadableByteStreamController(
                stream,
                controller,
                startAlgorithm,
                pullAlgorithm,
                cancelAlgorithm,
                highWaterMark,
                autoAllocateChunkSize,
            ) {
                controller._controlledReadableByteStream = stream;
                controller._pullAgain = false;
                controller._pulling = false;
                controller._byobRequest = null;
                controller._queue = controller._queueTotalSize = void 0;
                ResetQueue(controller);
                controller._closeRequested = false;
                controller._started = false;
                controller._strategyHWM = highWaterMark;
                controller._pullAlgorithm = pullAlgorithm;
                controller._cancelAlgorithm = cancelAlgorithm;
                controller._autoAllocateChunkSize = autoAllocateChunkSize;
                controller._pendingPullIntos = new SimpleQueue();
                stream._readableStreamController = controller;
                const startResult = startAlgorithm();
                uponPromise(
                    promiseResolvedWith(startResult),
                    () => {
                        controller._started = true;
                        ReadableByteStreamControllerCallPullIfNeeded(controller);
                        return null;
                    },
                    (r2) => {
                        ReadableByteStreamControllerError(controller, r2);
                        return null;
                    },
                );
            }
            function SetUpReadableByteStreamControllerFromUnderlyingSource(
                stream,
                underlyingByteSource,
                highWaterMark,
            ) {
                const controller = Object.create(ReadableByteStreamController.prototype);
                let startAlgorithm;
                let pullAlgorithm;
                let cancelAlgorithm;
                if (underlyingByteSource.start !== void 0) {
                    startAlgorithm = () => underlyingByteSource.start(controller);
                } else {
                    startAlgorithm = () => void 0;
                }
                if (underlyingByteSource.pull !== void 0) {
                    pullAlgorithm = () => underlyingByteSource.pull(controller);
                } else {
                    pullAlgorithm = () => promiseResolvedWith(void 0);
                }
                if (underlyingByteSource.cancel !== void 0) {
                    cancelAlgorithm = (reason) => underlyingByteSource.cancel(reason);
                } else {
                    cancelAlgorithm = () => promiseResolvedWith(void 0);
                }
                const autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;
                if (autoAllocateChunkSize === 0) {
                    throw new TypeError('autoAllocateChunkSize must be greater than 0');
                }
                SetUpReadableByteStreamController(
                    stream,
                    controller,
                    startAlgorithm,
                    pullAlgorithm,
                    cancelAlgorithm,
                    highWaterMark,
                    autoAllocateChunkSize,
                );
            }
            function SetUpReadableStreamBYOBRequest(request, controller, view) {
                request._associatedReadableByteStreamController = controller;
                request._view = view;
            }
            function byobRequestBrandCheckException(name) {
                return new TypeError(
                    `ReadableStreamBYOBRequest.prototype.${name} can only be used on a ReadableStreamBYOBRequest`,
                );
            }
            function byteStreamControllerBrandCheckException(name) {
                return new TypeError(
                    `ReadableByteStreamController.prototype.${name} can only be used on a ReadableByteStreamController`,
                );
            }
            function convertReaderOptions(options2, context) {
                assertDictionary(options2, context);
                const mode = options2 === null || options2 === void 0 ? void 0 : options2.mode;
                return {
                    mode:
                        mode === void 0
                            ? void 0
                            : convertReadableStreamReaderMode(
                                  mode,
                                  `${context} has member 'mode' that`,
                              ),
                };
            }
            function convertReadableStreamReaderMode(mode, context) {
                mode = `${mode}`;
                if (mode !== 'byob') {
                    throw new TypeError(
                        `${context} '${mode}' is not a valid enumeration value for ReadableStreamReaderMode`,
                    );
                }
                return mode;
            }
            function convertByobReadOptions(options2, context) {
                var _a6;
                assertDictionary(options2, context);
                const min =
                    (_a6 = options2 === null || options2 === void 0 ? void 0 : options2.min) !==
                        null && _a6 !== void 0
                        ? _a6
                        : 1;
                return {
                    min: convertUnsignedLongLongWithEnforceRange(
                        min,
                        `${context} has member 'min' that`,
                    ),
                };
            }
            function AcquireReadableStreamBYOBReader(stream) {
                return new ReadableStreamBYOBReader(stream);
            }
            function ReadableStreamAddReadIntoRequest(stream, readIntoRequest) {
                stream._reader._readIntoRequests.push(readIntoRequest);
            }
            function ReadableStreamFulfillReadIntoRequest(stream, chunk, done) {
                const reader = stream._reader;
                const readIntoRequest = reader._readIntoRequests.shift();
                if (done) {
                    readIntoRequest._closeSteps(chunk);
                } else {
                    readIntoRequest._chunkSteps(chunk);
                }
            }
            function ReadableStreamGetNumReadIntoRequests(stream) {
                return stream._reader._readIntoRequests.length;
            }
            function ReadableStreamHasBYOBReader(stream) {
                const reader = stream._reader;
                if (reader === void 0) {
                    return false;
                }
                if (!IsReadableStreamBYOBReader(reader)) {
                    return false;
                }
                return true;
            }
            class ReadableStreamBYOBReader {
                constructor(stream) {
                    assertRequiredArgument(stream, 1, 'ReadableStreamBYOBReader');
                    assertReadableStream(stream, 'First parameter');
                    if (IsReadableStreamLocked(stream)) {
                        throw new TypeError(
                            'This stream has already been locked for exclusive reading by another reader',
                        );
                    }
                    if (!IsReadableByteStreamController(stream._readableStreamController)) {
                        throw new TypeError(
                            'Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte source',
                        );
                    }
                    ReadableStreamReaderGenericInitialize(this, stream);
                    this._readIntoRequests = new SimpleQueue();
                }
                /**
                 * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or
                 * the reader's lock is released before the stream finishes closing.
                 */
                get closed() {
                    if (!IsReadableStreamBYOBReader(this)) {
                        return promiseRejectedWith(byobReaderBrandCheckException('closed'));
                    }
                    return this._closedPromise;
                }
                /**
                 * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.
                 */
                cancel(reason = void 0) {
                    if (!IsReadableStreamBYOBReader(this)) {
                        return promiseRejectedWith(byobReaderBrandCheckException('cancel'));
                    }
                    if (this._ownerReadableStream === void 0) {
                        return promiseRejectedWith(readerLockException('cancel'));
                    }
                    return ReadableStreamReaderGenericCancel(this, reason);
                }
                read(view, rawOptions = {}) {
                    if (!IsReadableStreamBYOBReader(this)) {
                        return promiseRejectedWith(byobReaderBrandCheckException('read'));
                    }
                    if (!ArrayBuffer.isView(view)) {
                        return promiseRejectedWith(
                            new TypeError('view must be an array buffer view'),
                        );
                    }
                    if (view.byteLength === 0) {
                        return promiseRejectedWith(
                            new TypeError('view must have non-zero byteLength'),
                        );
                    }
                    if (view.buffer.byteLength === 0) {
                        return promiseRejectedWith(
                            new TypeError(`view's buffer must have non-zero byteLength`),
                        );
                    }
                    if (IsDetachedBuffer(view.buffer)) {
                        return promiseRejectedWith(
                            new TypeError("view's buffer has been detached"),
                        );
                    }
                    let options2;
                    try {
                        options2 = convertByobReadOptions(rawOptions, 'options');
                    } catch (e2) {
                        return promiseRejectedWith(e2);
                    }
                    const min = options2.min;
                    if (min === 0) {
                        return promiseRejectedWith(
                            new TypeError('options.min must be greater than 0'),
                        );
                    }
                    if (!isDataView(view)) {
                        if (min > view.length) {
                            return promiseRejectedWith(
                                new RangeError(
                                    "options.min must be less than or equal to view's length",
                                ),
                            );
                        }
                    } else if (min > view.byteLength) {
                        return promiseRejectedWith(
                            new RangeError(
                                "options.min must be less than or equal to view's byteLength",
                            ),
                        );
                    }
                    if (this._ownerReadableStream === void 0) {
                        return promiseRejectedWith(readerLockException('read from'));
                    }
                    let resolvePromise;
                    let rejectPromise;
                    const promise = newPromise((resolve, reject) => {
                        resolvePromise = resolve;
                        rejectPromise = reject;
                    });
                    const readIntoRequest = {
                        _chunkSteps: (chunk) => resolvePromise({ value: chunk, done: false }),
                        _closeSteps: (chunk) => resolvePromise({ value: chunk, done: true }),
                        _errorSteps: (e2) => rejectPromise(e2),
                    };
                    ReadableStreamBYOBReaderRead(this, view, min, readIntoRequest);
                    return promise;
                }
                /**
                 * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.
                 * If the associated stream is errored when the lock is released, the reader will appear errored in the same way
                 * from now on; otherwise, the reader will appear closed.
                 *
                 * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by
                 * the reader's {@link ReadableStreamBYOBReader.read | read()} method has not yet been settled. Attempting to
                 * do so will throw a `TypeError` and leave the reader locked to the stream.
                 */
                releaseLock() {
                    if (!IsReadableStreamBYOBReader(this)) {
                        throw byobReaderBrandCheckException('releaseLock');
                    }
                    if (this._ownerReadableStream === void 0) {
                        return;
                    }
                    ReadableStreamBYOBReaderRelease(this);
                }
            }
            Object.defineProperties(ReadableStreamBYOBReader.prototype, {
                cancel: { enumerable: true },
                read: { enumerable: true },
                releaseLock: { enumerable: true },
                closed: { enumerable: true },
            });
            setFunctionName(ReadableStreamBYOBReader.prototype.cancel, 'cancel');
            setFunctionName(ReadableStreamBYOBReader.prototype.read, 'read');
            setFunctionName(ReadableStreamBYOBReader.prototype.releaseLock, 'releaseLock');
            if (typeof Symbol.toStringTag === 'symbol') {
                Object.defineProperty(ReadableStreamBYOBReader.prototype, Symbol.toStringTag, {
                    value: 'ReadableStreamBYOBReader',
                    configurable: true,
                });
            }
            function IsReadableStreamBYOBReader(x2) {
                if (!typeIsObject(x2)) {
                    return false;
                }
                if (!Object.prototype.hasOwnProperty.call(x2, '_readIntoRequests')) {
                    return false;
                }
                return x2 instanceof ReadableStreamBYOBReader;
            }
            function ReadableStreamBYOBReaderRead(reader, view, min, readIntoRequest) {
                const stream = reader._ownerReadableStream;
                stream._disturbed = true;
                if (stream._state === 'errored') {
                    readIntoRequest._errorSteps(stream._storedError);
                } else {
                    ReadableByteStreamControllerPullInto(
                        stream._readableStreamController,
                        view,
                        min,
                        readIntoRequest,
                    );
                }
            }
            function ReadableStreamBYOBReaderRelease(reader) {
                ReadableStreamReaderGenericRelease(reader);
                const e2 = new TypeError('Reader was released');
                ReadableStreamBYOBReaderErrorReadIntoRequests(reader, e2);
            }
            function ReadableStreamBYOBReaderErrorReadIntoRequests(reader, e2) {
                const readIntoRequests = reader._readIntoRequests;
                reader._readIntoRequests = new SimpleQueue();
                readIntoRequests.forEach((readIntoRequest) => {
                    readIntoRequest._errorSteps(e2);
                });
            }
            function byobReaderBrandCheckException(name) {
                return new TypeError(
                    `ReadableStreamBYOBReader.prototype.${name} can only be used on a ReadableStreamBYOBReader`,
                );
            }
            function ExtractHighWaterMark(strategy, defaultHWM) {
                const { highWaterMark } = strategy;
                if (highWaterMark === void 0) {
                    return defaultHWM;
                }
                if (NumberIsNaN(highWaterMark) || highWaterMark < 0) {
                    throw new RangeError('Invalid highWaterMark');
                }
                return highWaterMark;
            }
            function ExtractSizeAlgorithm(strategy) {
                const { size } = strategy;
                if (!size) {
                    return () => 1;
                }
                return size;
            }
            function convertQueuingStrategy(init2, context) {
                assertDictionary(init2, context);
                const highWaterMark =
                    init2 === null || init2 === void 0 ? void 0 : init2.highWaterMark;
                const size = init2 === null || init2 === void 0 ? void 0 : init2.size;
                return {
                    highWaterMark:
                        highWaterMark === void 0
                            ? void 0
                            : convertUnrestrictedDouble(highWaterMark),
                    size:
                        size === void 0
                            ? void 0
                            : convertQueuingStrategySize(size, `${context} has member 'size' that`),
                };
            }
            function convertQueuingStrategySize(fn, context) {
                assertFunction(fn, context);
                return (chunk) => convertUnrestrictedDouble(fn(chunk));
            }
            function convertUnderlyingSink(original, context) {
                assertDictionary(original, context);
                const abort = original === null || original === void 0 ? void 0 : original.abort;
                const close = original === null || original === void 0 ? void 0 : original.close;
                const start = original === null || original === void 0 ? void 0 : original.start;
                const type = original === null || original === void 0 ? void 0 : original.type;
                const write = original === null || original === void 0 ? void 0 : original.write;
                return {
                    abort:
                        abort === void 0
                            ? void 0
                            : convertUnderlyingSinkAbortCallback(
                                  abort,
                                  original,
                                  `${context} has member 'abort' that`,
                              ),
                    close:
                        close === void 0
                            ? void 0
                            : convertUnderlyingSinkCloseCallback(
                                  close,
                                  original,
                                  `${context} has member 'close' that`,
                              ),
                    start:
                        start === void 0
                            ? void 0
                            : convertUnderlyingSinkStartCallback(
                                  start,
                                  original,
                                  `${context} has member 'start' that`,
                              ),
                    write:
                        write === void 0
                            ? void 0
                            : convertUnderlyingSinkWriteCallback(
                                  write,
                                  original,
                                  `${context} has member 'write' that`,
                              ),
                    type,
                };
            }
            function convertUnderlyingSinkAbortCallback(fn, original, context) {
                assertFunction(fn, context);
                return (reason) => promiseCall(fn, original, [reason]);
            }
            function convertUnderlyingSinkCloseCallback(fn, original, context) {
                assertFunction(fn, context);
                return () => promiseCall(fn, original, []);
            }
            function convertUnderlyingSinkStartCallback(fn, original, context) {
                assertFunction(fn, context);
                return (controller) => reflectCall(fn, original, [controller]);
            }
            function convertUnderlyingSinkWriteCallback(fn, original, context) {
                assertFunction(fn, context);
                return (chunk, controller) => promiseCall(fn, original, [chunk, controller]);
            }
            function assertWritableStream(x2, context) {
                if (!IsWritableStream(x2)) {
                    throw new TypeError(`${context} is not a WritableStream.`);
                }
            }
            function isAbortSignal2(value) {
                if (typeof value !== 'object' || value === null) {
                    return false;
                }
                try {
                    return typeof value.aborted === 'boolean';
                } catch (_a6) {
                    return false;
                }
            }
            const supportsAbortController = typeof AbortController === 'function';
            function createAbortController() {
                if (supportsAbortController) {
                    return new AbortController();
                }
                return void 0;
            }
            class WritableStream {
                constructor(rawUnderlyingSink = {}, rawStrategy = {}) {
                    if (rawUnderlyingSink === void 0) {
                        rawUnderlyingSink = null;
                    } else {
                        assertObject(rawUnderlyingSink, 'First parameter');
                    }
                    const strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');
                    const underlyingSink = convertUnderlyingSink(
                        rawUnderlyingSink,
                        'First parameter',
                    );
                    InitializeWritableStream(this);
                    const type = underlyingSink.type;
                    if (type !== void 0) {
                        throw new RangeError('Invalid type is specified');
                    }
                    const sizeAlgorithm = ExtractSizeAlgorithm(strategy);
                    const highWaterMark = ExtractHighWaterMark(strategy, 1);
                    SetUpWritableStreamDefaultControllerFromUnderlyingSink(
                        this,
                        underlyingSink,
                        highWaterMark,
                        sizeAlgorithm,
                    );
                }
                /**
                 * Returns whether or not the writable stream is locked to a writer.
                 */
                get locked() {
                    if (!IsWritableStream(this)) {
                        throw streamBrandCheckException$2('locked');
                    }
                    return IsWritableStreamLocked(this);
                }
                /**
                 * Aborts the stream, signaling that the producer can no longer successfully write to the stream and it is to be
                 * immediately moved to an errored state, with any queued-up writes discarded. This will also execute any abort
                 * mechanism of the underlying sink.
                 *
                 * The returned promise will fulfill if the stream shuts down successfully, or reject if the underlying sink signaled
                 * that there was an error doing so. Additionally, it will reject with a `TypeError` (without attempting to cancel
                 * the stream) if the stream is currently locked.
                 */
                abort(reason = void 0) {
                    if (!IsWritableStream(this)) {
                        return promiseRejectedWith(streamBrandCheckException$2('abort'));
                    }
                    if (IsWritableStreamLocked(this)) {
                        return promiseRejectedWith(
                            new TypeError('Cannot abort a stream that already has a writer'),
                        );
                    }
                    return WritableStreamAbort(this, reason);
                }
                /**
                 * Closes the stream. The underlying sink will finish processing any previously-written chunks, before invoking its
                 * close behavior. During this time any further attempts to write will fail (without erroring the stream).
                 *
                 * The method returns a promise that will fulfill if all remaining chunks are successfully written and the stream
                 * successfully closes, or rejects if an error is encountered during this process. Additionally, it will reject with
                 * a `TypeError` (without attempting to cancel the stream) if the stream is currently locked.
                 */
                close() {
                    if (!IsWritableStream(this)) {
                        return promiseRejectedWith(streamBrandCheckException$2('close'));
                    }
                    if (IsWritableStreamLocked(this)) {
                        return promiseRejectedWith(
                            new TypeError('Cannot close a stream that already has a writer'),
                        );
                    }
                    if (WritableStreamCloseQueuedOrInFlight(this)) {
                        return promiseRejectedWith(
                            new TypeError('Cannot close an already-closing stream'),
                        );
                    }
                    return WritableStreamClose(this);
                }
                /**
                 * Creates a {@link WritableStreamDefaultWriter | writer} and locks the stream to the new writer. While the stream
                 * is locked, no other writer can be acquired until this one is released.
                 *
                 * This functionality is especially useful for creating abstractions that desire the ability to write to a stream
                 * without interruption or interleaving. By getting a writer for the stream, you can ensure nobody else can write at
                 * the same time, which would cause the resulting written data to be unpredictable and probably useless.
                 */
                getWriter() {
                    if (!IsWritableStream(this)) {
                        throw streamBrandCheckException$2('getWriter');
                    }
                    return AcquireWritableStreamDefaultWriter(this);
                }
            }
            Object.defineProperties(WritableStream.prototype, {
                abort: { enumerable: true },
                close: { enumerable: true },
                getWriter: { enumerable: true },
                locked: { enumerable: true },
            });
            setFunctionName(WritableStream.prototype.abort, 'abort');
            setFunctionName(WritableStream.prototype.close, 'close');
            setFunctionName(WritableStream.prototype.getWriter, 'getWriter');
            if (typeof Symbol.toStringTag === 'symbol') {
                Object.defineProperty(WritableStream.prototype, Symbol.toStringTag, {
                    value: 'WritableStream',
                    configurable: true,
                });
            }
            function AcquireWritableStreamDefaultWriter(stream) {
                return new WritableStreamDefaultWriter(stream);
            }
            function CreateWritableStream(
                startAlgorithm,
                writeAlgorithm,
                closeAlgorithm,
                abortAlgorithm,
                highWaterMark = 1,
                sizeAlgorithm = () => 1,
            ) {
                const stream = Object.create(WritableStream.prototype);
                InitializeWritableStream(stream);
                const controller = Object.create(WritableStreamDefaultController.prototype);
                SetUpWritableStreamDefaultController(
                    stream,
                    controller,
                    startAlgorithm,
                    writeAlgorithm,
                    closeAlgorithm,
                    abortAlgorithm,
                    highWaterMark,
                    sizeAlgorithm,
                );
                return stream;
            }
            function InitializeWritableStream(stream) {
                stream._state = 'writable';
                stream._storedError = void 0;
                stream._writer = void 0;
                stream._writableStreamController = void 0;
                stream._writeRequests = new SimpleQueue();
                stream._inFlightWriteRequest = void 0;
                stream._closeRequest = void 0;
                stream._inFlightCloseRequest = void 0;
                stream._pendingAbortRequest = void 0;
                stream._backpressure = false;
            }
            function IsWritableStream(x2) {
                if (!typeIsObject(x2)) {
                    return false;
                }
                if (!Object.prototype.hasOwnProperty.call(x2, '_writableStreamController')) {
                    return false;
                }
                return x2 instanceof WritableStream;
            }
            function IsWritableStreamLocked(stream) {
                if (stream._writer === void 0) {
                    return false;
                }
                return true;
            }
            function WritableStreamAbort(stream, reason) {
                var _a6;
                if (stream._state === 'closed' || stream._state === 'errored') {
                    return promiseResolvedWith(void 0);
                }
                stream._writableStreamController._abortReason = reason;
                (_a6 = stream._writableStreamController._abortController) === null || _a6 === void 0
                    ? void 0
                    : _a6.abort(reason);
                const state = stream._state;
                if (state === 'closed' || state === 'errored') {
                    return promiseResolvedWith(void 0);
                }
                if (stream._pendingAbortRequest !== void 0) {
                    return stream._pendingAbortRequest._promise;
                }
                let wasAlreadyErroring = false;
                if (state === 'erroring') {
                    wasAlreadyErroring = true;
                    reason = void 0;
                }
                const promise = newPromise((resolve, reject) => {
                    stream._pendingAbortRequest = {
                        _promise: void 0,
                        _resolve: resolve,
                        _reject: reject,
                        _reason: reason,
                        _wasAlreadyErroring: wasAlreadyErroring,
                    };
                });
                stream._pendingAbortRequest._promise = promise;
                if (!wasAlreadyErroring) {
                    WritableStreamStartErroring(stream, reason);
                }
                return promise;
            }
            function WritableStreamClose(stream) {
                const state = stream._state;
                if (state === 'closed' || state === 'errored') {
                    return promiseRejectedWith(
                        new TypeError(
                            `The stream (in ${state} state) is not in the writable state and cannot be closed`,
                        ),
                    );
                }
                const promise = newPromise((resolve, reject) => {
                    const closeRequest = {
                        _resolve: resolve,
                        _reject: reject,
                    };
                    stream._closeRequest = closeRequest;
                });
                const writer = stream._writer;
                if (writer !== void 0 && stream._backpressure && state === 'writable') {
                    defaultWriterReadyPromiseResolve(writer);
                }
                WritableStreamDefaultControllerClose(stream._writableStreamController);
                return promise;
            }
            function WritableStreamAddWriteRequest(stream) {
                const promise = newPromise((resolve, reject) => {
                    const writeRequest = {
                        _resolve: resolve,
                        _reject: reject,
                    };
                    stream._writeRequests.push(writeRequest);
                });
                return promise;
            }
            function WritableStreamDealWithRejection(stream, error) {
                const state = stream._state;
                if (state === 'writable') {
                    WritableStreamStartErroring(stream, error);
                    return;
                }
                WritableStreamFinishErroring(stream);
            }
            function WritableStreamStartErroring(stream, reason) {
                const controller = stream._writableStreamController;
                stream._state = 'erroring';
                stream._storedError = reason;
                const writer = stream._writer;
                if (writer !== void 0) {
                    WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);
                }
                if (!WritableStreamHasOperationMarkedInFlight(stream) && controller._started) {
                    WritableStreamFinishErroring(stream);
                }
            }
            function WritableStreamFinishErroring(stream) {
                stream._state = 'errored';
                stream._writableStreamController[ErrorSteps]();
                const storedError = stream._storedError;
                stream._writeRequests.forEach((writeRequest) => {
                    writeRequest._reject(storedError);
                });
                stream._writeRequests = new SimpleQueue();
                if (stream._pendingAbortRequest === void 0) {
                    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
                    return;
                }
                const abortRequest = stream._pendingAbortRequest;
                stream._pendingAbortRequest = void 0;
                if (abortRequest._wasAlreadyErroring) {
                    abortRequest._reject(storedError);
                    WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
                    return;
                }
                const promise = stream._writableStreamController[AbortSteps](abortRequest._reason);
                uponPromise(
                    promise,
                    () => {
                        abortRequest._resolve();
                        WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
                        return null;
                    },
                    (reason) => {
                        abortRequest._reject(reason);
                        WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
                        return null;
                    },
                );
            }
            function WritableStreamFinishInFlightWrite(stream) {
                stream._inFlightWriteRequest._resolve(void 0);
                stream._inFlightWriteRequest = void 0;
            }
            function WritableStreamFinishInFlightWriteWithError(stream, error) {
                stream._inFlightWriteRequest._reject(error);
                stream._inFlightWriteRequest = void 0;
                WritableStreamDealWithRejection(stream, error);
            }
            function WritableStreamFinishInFlightClose(stream) {
                stream._inFlightCloseRequest._resolve(void 0);
                stream._inFlightCloseRequest = void 0;
                const state = stream._state;
                if (state === 'erroring') {
                    stream._storedError = void 0;
                    if (stream._pendingAbortRequest !== void 0) {
                        stream._pendingAbortRequest._resolve();
                        stream._pendingAbortRequest = void 0;
                    }
                }
                stream._state = 'closed';
                const writer = stream._writer;
                if (writer !== void 0) {
                    defaultWriterClosedPromiseResolve(writer);
                }
            }
            function WritableStreamFinishInFlightCloseWithError(stream, error) {
                stream._inFlightCloseRequest._reject(error);
                stream._inFlightCloseRequest = void 0;
                if (stream._pendingAbortRequest !== void 0) {
                    stream._pendingAbortRequest._reject(error);
                    stream._pendingAbortRequest = void 0;
                }
                WritableStreamDealWithRejection(stream, error);
            }
            function WritableStreamCloseQueuedOrInFlight(stream) {
                if (stream._closeRequest === void 0 && stream._inFlightCloseRequest === void 0) {
                    return false;
                }
                return true;
            }
            function WritableStreamHasOperationMarkedInFlight(stream) {
                if (
                    stream._inFlightWriteRequest === void 0 &&
                    stream._inFlightCloseRequest === void 0
                ) {
                    return false;
                }
                return true;
            }
            function WritableStreamMarkCloseRequestInFlight(stream) {
                stream._inFlightCloseRequest = stream._closeRequest;
                stream._closeRequest = void 0;
            }
            function WritableStreamMarkFirstWriteRequestInFlight(stream) {
                stream._inFlightWriteRequest = stream._writeRequests.shift();
            }
            function WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream) {
                if (stream._closeRequest !== void 0) {
                    stream._closeRequest._reject(stream._storedError);
                    stream._closeRequest = void 0;
                }
                const writer = stream._writer;
                if (writer !== void 0) {
                    defaultWriterClosedPromiseReject(writer, stream._storedError);
                }
            }
            function WritableStreamUpdateBackpressure(stream, backpressure) {
                const writer = stream._writer;
                if (writer !== void 0 && backpressure !== stream._backpressure) {
                    if (backpressure) {
                        defaultWriterReadyPromiseReset(writer);
                    } else {
                        defaultWriterReadyPromiseResolve(writer);
                    }
                }
                stream._backpressure = backpressure;
            }
            class WritableStreamDefaultWriter {
                constructor(stream) {
                    assertRequiredArgument(stream, 1, 'WritableStreamDefaultWriter');
                    assertWritableStream(stream, 'First parameter');
                    if (IsWritableStreamLocked(stream)) {
                        throw new TypeError(
                            'This stream has already been locked for exclusive writing by another writer',
                        );
                    }
                    this._ownerWritableStream = stream;
                    stream._writer = this;
                    const state = stream._state;
                    if (state === 'writable') {
                        if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._backpressure) {
                            defaultWriterReadyPromiseInitialize(this);
                        } else {
                            defaultWriterReadyPromiseInitializeAsResolved(this);
                        }
                        defaultWriterClosedPromiseInitialize(this);
                    } else if (state === 'erroring') {
                        defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError);
                        defaultWriterClosedPromiseInitialize(this);
                    } else if (state === 'closed') {
                        defaultWriterReadyPromiseInitializeAsResolved(this);
                        defaultWriterClosedPromiseInitializeAsResolved(this);
                    } else {
                        const storedError = stream._storedError;
                        defaultWriterReadyPromiseInitializeAsRejected(this, storedError);
                        defaultWriterClosedPromiseInitializeAsRejected(this, storedError);
                    }
                }
                /**
                 * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or
                 * the writer’s lock is released before the stream finishes closing.
                 */
                get closed() {
                    if (!IsWritableStreamDefaultWriter(this)) {
                        return promiseRejectedWith(defaultWriterBrandCheckException('closed'));
                    }
                    return this._closedPromise;
                }
                /**
                 * Returns the desired size to fill the stream’s internal queue. It can be negative, if the queue is over-full.
                 * A producer can use this information to determine the right amount of data to write.
                 *
                 * It will be `null` if the stream cannot be successfully written to (due to either being errored, or having an abort
                 * queued up). It will return zero if the stream is closed. And the getter will throw an exception if invoked when
                 * the writer’s lock is released.
                 */
                get desiredSize() {
                    if (!IsWritableStreamDefaultWriter(this)) {
                        throw defaultWriterBrandCheckException('desiredSize');
                    }
                    if (this._ownerWritableStream === void 0) {
                        throw defaultWriterLockException('desiredSize');
                    }
                    return WritableStreamDefaultWriterGetDesiredSize(this);
                }
                /**
                 * Returns a promise that will be fulfilled when the desired size to fill the stream’s internal queue transitions
                 * from non-positive to positive, signaling that it is no longer applying backpressure. Once the desired size dips
                 * back to zero or below, the getter will return a new promise that stays pending until the next transition.
                 *
                 * If the stream becomes errored or aborted, or the writer’s lock is released, the returned promise will become
                 * rejected.
                 */
                get ready() {
                    if (!IsWritableStreamDefaultWriter(this)) {
                        return promiseRejectedWith(defaultWriterBrandCheckException('ready'));
                    }
                    return this._readyPromise;
                }
                /**
                 * If the reader is active, behaves the same as {@link WritableStream.abort | stream.abort(reason)}.
                 */
                abort(reason = void 0) {
                    if (!IsWritableStreamDefaultWriter(this)) {
                        return promiseRejectedWith(defaultWriterBrandCheckException('abort'));
                    }
                    if (this._ownerWritableStream === void 0) {
                        return promiseRejectedWith(defaultWriterLockException('abort'));
                    }
                    return WritableStreamDefaultWriterAbort(this, reason);
                }
                /**
                 * If the reader is active, behaves the same as {@link WritableStream.close | stream.close()}.
                 */
                close() {
                    if (!IsWritableStreamDefaultWriter(this)) {
                        return promiseRejectedWith(defaultWriterBrandCheckException('close'));
                    }
                    const stream = this._ownerWritableStream;
                    if (stream === void 0) {
                        return promiseRejectedWith(defaultWriterLockException('close'));
                    }
                    if (WritableStreamCloseQueuedOrInFlight(stream)) {
                        return promiseRejectedWith(
                            new TypeError('Cannot close an already-closing stream'),
                        );
                    }
                    return WritableStreamDefaultWriterClose(this);
                }
                /**
                 * Releases the writer’s lock on the corresponding stream. After the lock is released, the writer is no longer active.
                 * If the associated stream is errored when the lock is released, the writer will appear errored in the same way from
                 * now on; otherwise, the writer will appear closed.
                 *
                 * Note that the lock can still be released even if some ongoing writes have not yet finished (i.e. even if the
                 * promises returned from previous calls to {@link WritableStreamDefaultWriter.write | write()} have not yet settled).
                 * It’s not necessary to hold the lock on the writer for the duration of the write; the lock instead simply prevents
                 * other producers from writing in an interleaved manner.
                 */
                releaseLock() {
                    if (!IsWritableStreamDefaultWriter(this)) {
                        throw defaultWriterBrandCheckException('releaseLock');
                    }
                    const stream = this._ownerWritableStream;
                    if (stream === void 0) {
                        return;
                    }
                    WritableStreamDefaultWriterRelease(this);
                }
                write(chunk = void 0) {
                    if (!IsWritableStreamDefaultWriter(this)) {
                        return promiseRejectedWith(defaultWriterBrandCheckException('write'));
                    }
                    if (this._ownerWritableStream === void 0) {
                        return promiseRejectedWith(defaultWriterLockException('write to'));
                    }
                    return WritableStreamDefaultWriterWrite(this, chunk);
                }
            }
            Object.defineProperties(WritableStreamDefaultWriter.prototype, {
                abort: { enumerable: true },
                close: { enumerable: true },
                releaseLock: { enumerable: true },
                write: { enumerable: true },
                closed: { enumerable: true },
                desiredSize: { enumerable: true },
                ready: { enumerable: true },
            });
            setFunctionName(WritableStreamDefaultWriter.prototype.abort, 'abort');
            setFunctionName(WritableStreamDefaultWriter.prototype.close, 'close');
            setFunctionName(WritableStreamDefaultWriter.prototype.releaseLock, 'releaseLock');
            setFunctionName(WritableStreamDefaultWriter.prototype.write, 'write');
            if (typeof Symbol.toStringTag === 'symbol') {
                Object.defineProperty(WritableStreamDefaultWriter.prototype, Symbol.toStringTag, {
                    value: 'WritableStreamDefaultWriter',
                    configurable: true,
                });
            }
            function IsWritableStreamDefaultWriter(x2) {
                if (!typeIsObject(x2)) {
                    return false;
                }
                if (!Object.prototype.hasOwnProperty.call(x2, '_ownerWritableStream')) {
                    return false;
                }
                return x2 instanceof WritableStreamDefaultWriter;
            }
            function WritableStreamDefaultWriterAbort(writer, reason) {
                const stream = writer._ownerWritableStream;
                return WritableStreamAbort(stream, reason);
            }
            function WritableStreamDefaultWriterClose(writer) {
                const stream = writer._ownerWritableStream;
                return WritableStreamClose(stream);
            }
            function WritableStreamDefaultWriterCloseWithErrorPropagation(writer) {
                const stream = writer._ownerWritableStream;
                const state = stream._state;
                if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {
                    return promiseResolvedWith(void 0);
                }
                if (state === 'errored') {
                    return promiseRejectedWith(stream._storedError);
                }
                return WritableStreamDefaultWriterClose(writer);
            }
            function WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, error) {
                if (writer._closedPromiseState === 'pending') {
                    defaultWriterClosedPromiseReject(writer, error);
                } else {
                    defaultWriterClosedPromiseResetToRejected(writer, error);
                }
            }
            function WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, error) {
                if (writer._readyPromiseState === 'pending') {
                    defaultWriterReadyPromiseReject(writer, error);
                } else {
                    defaultWriterReadyPromiseResetToRejected(writer, error);
                }
            }
            function WritableStreamDefaultWriterGetDesiredSize(writer) {
                const stream = writer._ownerWritableStream;
                const state = stream._state;
                if (state === 'errored' || state === 'erroring') {
                    return null;
                }
                if (state === 'closed') {
                    return 0;
                }
                return WritableStreamDefaultControllerGetDesiredSize(
                    stream._writableStreamController,
                );
            }
            function WritableStreamDefaultWriterRelease(writer) {
                const stream = writer._ownerWritableStream;
                const releasedError = new TypeError(
                    `Writer was released and can no longer be used to monitor the stream's closedness`,
                );
                WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError);
                WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError);
                stream._writer = void 0;
                writer._ownerWritableStream = void 0;
            }
            function WritableStreamDefaultWriterWrite(writer, chunk) {
                const stream = writer._ownerWritableStream;
                const controller = stream._writableStreamController;
                const chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);
                if (stream !== writer._ownerWritableStream) {
                    return promiseRejectedWith(defaultWriterLockException('write to'));
                }
                const state = stream._state;
                if (state === 'errored') {
                    return promiseRejectedWith(stream._storedError);
                }
                if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {
                    return promiseRejectedWith(
                        new TypeError('The stream is closing or closed and cannot be written to'),
                    );
                }
                if (state === 'erroring') {
                    return promiseRejectedWith(stream._storedError);
                }
                const promise = WritableStreamAddWriteRequest(stream);
                WritableStreamDefaultControllerWrite(controller, chunk, chunkSize);
                return promise;
            }
            const closeSentinel = {};
            class WritableStreamDefaultController {
                constructor() {
                    throw new TypeError('Illegal constructor');
                }
                /**
                 * The reason which was passed to `WritableStream.abort(reason)` when the stream was aborted.
                 *
                 * @deprecated
                 *  This property has been removed from the specification, see https://github.com/whatwg/streams/pull/1177.
                 *  Use {@link WritableStreamDefaultController.signal}'s `reason` instead.
                 */
                get abortReason() {
                    if (!IsWritableStreamDefaultController(this)) {
                        throw defaultControllerBrandCheckException$2('abortReason');
                    }
                    return this._abortReason;
                }
                /**
                 * An `AbortSignal` that can be used to abort the pending write or close operation when the stream is aborted.
                 */
                get signal() {
                    if (!IsWritableStreamDefaultController(this)) {
                        throw defaultControllerBrandCheckException$2('signal');
                    }
                    if (this._abortController === void 0) {
                        throw new TypeError(
                            'WritableStreamDefaultController.prototype.signal is not supported',
                        );
                    }
                    return this._abortController.signal;
                }
                /**
                 * Closes the controlled writable stream, making all future interactions with it fail with the given error `e`.
                 *
                 * This method is rarely used, since usually it suffices to return a rejected promise from one of the underlying
                 * sink's methods. However, it can be useful for suddenly shutting down a stream in response to an event outside the
                 * normal lifecycle of interactions with the underlying sink.
                 */
                error(e2 = void 0) {
                    if (!IsWritableStreamDefaultController(this)) {
                        throw defaultControllerBrandCheckException$2('error');
                    }
                    const state = this._controlledWritableStream._state;
                    if (state !== 'writable') {
                        return;
                    }
                    WritableStreamDefaultControllerError(this, e2);
                }
                /** @internal */
                [AbortSteps](reason) {
                    const result = this._abortAlgorithm(reason);
                    WritableStreamDefaultControllerClearAlgorithms(this);
                    return result;
                }
                /** @internal */
                [ErrorSteps]() {
                    ResetQueue(this);
                }
            }
            Object.defineProperties(WritableStreamDefaultController.prototype, {
                abortReason: { enumerable: true },
                signal: { enumerable: true },
                error: { enumerable: true },
            });
            if (typeof Symbol.toStringTag === 'symbol') {
                Object.defineProperty(
                    WritableStreamDefaultController.prototype,
                    Symbol.toStringTag,
                    {
                        value: 'WritableStreamDefaultController',
                        configurable: true,
                    },
                );
            }
            function IsWritableStreamDefaultController(x2) {
                if (!typeIsObject(x2)) {
                    return false;
                }
                if (!Object.prototype.hasOwnProperty.call(x2, '_controlledWritableStream')) {
                    return false;
                }
                return x2 instanceof WritableStreamDefaultController;
            }
            function SetUpWritableStreamDefaultController(
                stream,
                controller,
                startAlgorithm,
                writeAlgorithm,
                closeAlgorithm,
                abortAlgorithm,
                highWaterMark,
                sizeAlgorithm,
            ) {
                controller._controlledWritableStream = stream;
                stream._writableStreamController = controller;
                controller._queue = void 0;
                controller._queueTotalSize = void 0;
                ResetQueue(controller);
                controller._abortReason = void 0;
                controller._abortController = createAbortController();
                controller._started = false;
                controller._strategySizeAlgorithm = sizeAlgorithm;
                controller._strategyHWM = highWaterMark;
                controller._writeAlgorithm = writeAlgorithm;
                controller._closeAlgorithm = closeAlgorithm;
                controller._abortAlgorithm = abortAlgorithm;
                const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);
                WritableStreamUpdateBackpressure(stream, backpressure);
                const startResult = startAlgorithm();
                const startPromise = promiseResolvedWith(startResult);
                uponPromise(
                    startPromise,
                    () => {
                        controller._started = true;
                        WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
                        return null;
                    },
                    (r2) => {
                        controller._started = true;
                        WritableStreamDealWithRejection(stream, r2);
                        return null;
                    },
                );
            }
            function SetUpWritableStreamDefaultControllerFromUnderlyingSink(
                stream,
                underlyingSink,
                highWaterMark,
                sizeAlgorithm,
            ) {
                const controller = Object.create(WritableStreamDefaultController.prototype);
                let startAlgorithm;
                let writeAlgorithm;
                let closeAlgorithm;
                let abortAlgorithm;
                if (underlyingSink.start !== void 0) {
                    startAlgorithm = () => underlyingSink.start(controller);
                } else {
                    startAlgorithm = () => void 0;
                }
                if (underlyingSink.write !== void 0) {
                    writeAlgorithm = (chunk) => underlyingSink.write(chunk, controller);
                } else {
                    writeAlgorithm = () => promiseResolvedWith(void 0);
                }
                if (underlyingSink.close !== void 0) {
                    closeAlgorithm = () => underlyingSink.close();
                } else {
                    closeAlgorithm = () => promiseResolvedWith(void 0);
                }
                if (underlyingSink.abort !== void 0) {
                    abortAlgorithm = (reason) => underlyingSink.abort(reason);
                } else {
                    abortAlgorithm = () => promiseResolvedWith(void 0);
                }
                SetUpWritableStreamDefaultController(
                    stream,
                    controller,
                    startAlgorithm,
                    writeAlgorithm,
                    closeAlgorithm,
                    abortAlgorithm,
                    highWaterMark,
                    sizeAlgorithm,
                );
            }
            function WritableStreamDefaultControllerClearAlgorithms(controller) {
                controller._writeAlgorithm = void 0;
                controller._closeAlgorithm = void 0;
                controller._abortAlgorithm = void 0;
                controller._strategySizeAlgorithm = void 0;
            }
            function WritableStreamDefaultControllerClose(controller) {
                EnqueueValueWithSize(controller, closeSentinel, 0);
                WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
            }
            function WritableStreamDefaultControllerGetChunkSize(controller, chunk) {
                try {
                    return controller._strategySizeAlgorithm(chunk);
                } catch (chunkSizeE) {
                    WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);
                    return 1;
                }
            }
            function WritableStreamDefaultControllerGetDesiredSize(controller) {
                return controller._strategyHWM - controller._queueTotalSize;
            }
            function WritableStreamDefaultControllerWrite(controller, chunk, chunkSize) {
                try {
                    EnqueueValueWithSize(controller, chunk, chunkSize);
                } catch (enqueueE) {
                    WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);
                    return;
                }
                const stream = controller._controlledWritableStream;
                if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._state === 'writable') {
                    const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);
                    WritableStreamUpdateBackpressure(stream, backpressure);
                }
                WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
            }
            function WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller) {
                const stream = controller._controlledWritableStream;
                if (!controller._started) {
                    return;
                }
                if (stream._inFlightWriteRequest !== void 0) {
                    return;
                }
                const state = stream._state;
                if (state === 'erroring') {
                    WritableStreamFinishErroring(stream);
                    return;
                }
                if (controller._queue.length === 0) {
                    return;
                }
                const value = PeekQueueValue(controller);
                if (value === closeSentinel) {
                    WritableStreamDefaultControllerProcessClose(controller);
                } else {
                    WritableStreamDefaultControllerProcessWrite(controller, value);
                }
            }
            function WritableStreamDefaultControllerErrorIfNeeded(controller, error) {
                if (controller._controlledWritableStream._state === 'writable') {
                    WritableStreamDefaultControllerError(controller, error);
                }
            }
            function WritableStreamDefaultControllerProcessClose(controller) {
                const stream = controller._controlledWritableStream;
                WritableStreamMarkCloseRequestInFlight(stream);
                DequeueValue(controller);
                const sinkClosePromise = controller._closeAlgorithm();
                WritableStreamDefaultControllerClearAlgorithms(controller);
                uponPromise(
                    sinkClosePromise,
                    () => {
                        WritableStreamFinishInFlightClose(stream);
                        return null;
                    },
                    (reason) => {
                        WritableStreamFinishInFlightCloseWithError(stream, reason);
                        return null;
                    },
                );
            }
            function WritableStreamDefaultControllerProcessWrite(controller, chunk) {
                const stream = controller._controlledWritableStream;
                WritableStreamMarkFirstWriteRequestInFlight(stream);
                const sinkWritePromise = controller._writeAlgorithm(chunk);
                uponPromise(
                    sinkWritePromise,
                    () => {
                        WritableStreamFinishInFlightWrite(stream);
                        const state = stream._state;
                        DequeueValue(controller);
                        if (!WritableStreamCloseQueuedOrInFlight(stream) && state === 'writable') {
                            const backpressure =
                                WritableStreamDefaultControllerGetBackpressure(controller);
                            WritableStreamUpdateBackpressure(stream, backpressure);
                        }
                        WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
                        return null;
                    },
                    (reason) => {
                        if (stream._state === 'writable') {
                            WritableStreamDefaultControllerClearAlgorithms(controller);
                        }
                        WritableStreamFinishInFlightWriteWithError(stream, reason);
                        return null;
                    },
                );
            }
            function WritableStreamDefaultControllerGetBackpressure(controller) {
                const desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);
                return desiredSize <= 0;
            }
            function WritableStreamDefaultControllerError(controller, error) {
                const stream = controller._controlledWritableStream;
                WritableStreamDefaultControllerClearAlgorithms(controller);
                WritableStreamStartErroring(stream, error);
            }
            function streamBrandCheckException$2(name) {
                return new TypeError(
                    `WritableStream.prototype.${name} can only be used on a WritableStream`,
                );
            }
            function defaultControllerBrandCheckException$2(name) {
                return new TypeError(
                    `WritableStreamDefaultController.prototype.${name} can only be used on a WritableStreamDefaultController`,
                );
            }
            function defaultWriterBrandCheckException(name) {
                return new TypeError(
                    `WritableStreamDefaultWriter.prototype.${name} can only be used on a WritableStreamDefaultWriter`,
                );
            }
            function defaultWriterLockException(name) {
                return new TypeError('Cannot ' + name + ' a stream using a released writer');
            }
            function defaultWriterClosedPromiseInitialize(writer) {
                writer._closedPromise = newPromise((resolve, reject) => {
                    writer._closedPromise_resolve = resolve;
                    writer._closedPromise_reject = reject;
                    writer._closedPromiseState = 'pending';
                });
            }
            function defaultWriterClosedPromiseInitializeAsRejected(writer, reason) {
                defaultWriterClosedPromiseInitialize(writer);
                defaultWriterClosedPromiseReject(writer, reason);
            }
            function defaultWriterClosedPromiseInitializeAsResolved(writer) {
                defaultWriterClosedPromiseInitialize(writer);
                defaultWriterClosedPromiseResolve(writer);
            }
            function defaultWriterClosedPromiseReject(writer, reason) {
                if (writer._closedPromise_reject === void 0) {
                    return;
                }
                setPromiseIsHandledToTrue(writer._closedPromise);
                writer._closedPromise_reject(reason);
                writer._closedPromise_resolve = void 0;
                writer._closedPromise_reject = void 0;
                writer._closedPromiseState = 'rejected';
            }
            function defaultWriterClosedPromiseResetToRejected(writer, reason) {
                defaultWriterClosedPromiseInitializeAsRejected(writer, reason);
            }
            function defaultWriterClosedPromiseResolve(writer) {
                if (writer._closedPromise_resolve === void 0) {
                    return;
                }
                writer._closedPromise_resolve(void 0);
                writer._closedPromise_resolve = void 0;
                writer._closedPromise_reject = void 0;
                writer._closedPromiseState = 'resolved';
            }
            function defaultWriterReadyPromiseInitialize(writer) {
                writer._readyPromise = newPromise((resolve, reject) => {
                    writer._readyPromise_resolve = resolve;
                    writer._readyPromise_reject = reject;
                });
                writer._readyPromiseState = 'pending';
            }
            function defaultWriterReadyPromiseInitializeAsRejected(writer, reason) {
                defaultWriterReadyPromiseInitialize(writer);
                defaultWriterReadyPromiseReject(writer, reason);
            }
            function defaultWriterReadyPromiseInitializeAsResolved(writer) {
                defaultWriterReadyPromiseInitialize(writer);
                defaultWriterReadyPromiseResolve(writer);
            }
            function defaultWriterReadyPromiseReject(writer, reason) {
                if (writer._readyPromise_reject === void 0) {
                    return;
                }
                setPromiseIsHandledToTrue(writer._readyPromise);
                writer._readyPromise_reject(reason);
                writer._readyPromise_resolve = void 0;
                writer._readyPromise_reject = void 0;
                writer._readyPromiseState = 'rejected';
            }
            function defaultWriterReadyPromiseReset(writer) {
                defaultWriterReadyPromiseInitialize(writer);
            }
            function defaultWriterReadyPromiseResetToRejected(writer, reason) {
                defaultWriterReadyPromiseInitializeAsRejected(writer, reason);
            }
            function defaultWriterReadyPromiseResolve(writer) {
                if (writer._readyPromise_resolve === void 0) {
                    return;
                }
                writer._readyPromise_resolve(void 0);
                writer._readyPromise_resolve = void 0;
                writer._readyPromise_reject = void 0;
                writer._readyPromiseState = 'fulfilled';
            }
            function getGlobals() {
                if (typeof globalThis !== 'undefined') {
                    return globalThis;
                } else if (typeof self !== 'undefined') {
                    return self;
                } else if (typeof global !== 'undefined') {
                    return global;
                }
                return void 0;
            }
            const globals = getGlobals();
            function isDOMExceptionConstructor(ctor) {
                if (!(typeof ctor === 'function' || typeof ctor === 'object')) {
                    return false;
                }
                if (ctor.name !== 'DOMException') {
                    return false;
                }
                try {
                    new ctor();
                    return true;
                } catch (_a6) {
                    return false;
                }
            }
            function getFromGlobal() {
                const ctor = globals === null || globals === void 0 ? void 0 : globals.DOMException;
                return isDOMExceptionConstructor(ctor) ? ctor : void 0;
            }
            function createPolyfill() {
                const ctor = function DOMException3(message, name) {
                    this.message = message || '';
                    this.name = name || 'Error';
                    if (Error.captureStackTrace) {
                        Error.captureStackTrace(this, this.constructor);
                    }
                };
                setFunctionName(ctor, 'DOMException');
                ctor.prototype = Object.create(Error.prototype);
                Object.defineProperty(ctor.prototype, 'constructor', {
                    value: ctor,
                    writable: true,
                    configurable: true,
                });
                return ctor;
            }
            const DOMException2 = getFromGlobal() || createPolyfill();
            function ReadableStreamPipeTo(
                source,
                dest,
                preventClose,
                preventAbort,
                preventCancel,
                signal,
            ) {
                const reader = AcquireReadableStreamDefaultReader(source);
                const writer = AcquireWritableStreamDefaultWriter(dest);
                source._disturbed = true;
                let shuttingDown = false;
                let currentWrite = promiseResolvedWith(void 0);
                return newPromise((resolve, reject) => {
                    let abortAlgorithm;
                    if (signal !== void 0) {
                        abortAlgorithm = () => {
                            const error =
                                signal.reason !== void 0
                                    ? signal.reason
                                    : new DOMException2('Aborted', 'AbortError');
                            const actions = [];
                            if (!preventAbort) {
                                actions.push(() => {
                                    if (dest._state === 'writable') {
                                        return WritableStreamAbort(dest, error);
                                    }
                                    return promiseResolvedWith(void 0);
                                });
                            }
                            if (!preventCancel) {
                                actions.push(() => {
                                    if (source._state === 'readable') {
                                        return ReadableStreamCancel(source, error);
                                    }
                                    return promiseResolvedWith(void 0);
                                });
                            }
                            shutdownWithAction(
                                () => Promise.all(actions.map((action) => action())),
                                true,
                                error,
                            );
                        };
                        if (signal.aborted) {
                            abortAlgorithm();
                            return;
                        }
                        signal.addEventListener('abort', abortAlgorithm);
                    }
                    function pipeLoop() {
                        return newPromise((resolveLoop, rejectLoop) => {
                            function next2(done) {
                                if (done) {
                                    resolveLoop();
                                } else {
                                    PerformPromiseThen(pipeStep(), next2, rejectLoop);
                                }
                            }
                            next2(false);
                        });
                    }
                    function pipeStep() {
                        if (shuttingDown) {
                            return promiseResolvedWith(true);
                        }
                        return PerformPromiseThen(writer._readyPromise, () => {
                            return newPromise((resolveRead, rejectRead) => {
                                ReadableStreamDefaultReaderRead(reader, {
                                    _chunkSteps: (chunk) => {
                                        currentWrite = PerformPromiseThen(
                                            WritableStreamDefaultWriterWrite(writer, chunk),
                                            void 0,
                                            noop3,
                                        );
                                        resolveRead(false);
                                    },
                                    _closeSteps: () => resolveRead(true),
                                    _errorSteps: rejectRead,
                                });
                            });
                        });
                    }
                    isOrBecomesErrored(source, reader._closedPromise, (storedError) => {
                        if (!preventAbort) {
                            shutdownWithAction(
                                () => WritableStreamAbort(dest, storedError),
                                true,
                                storedError,
                            );
                        } else {
                            shutdown(true, storedError);
                        }
                        return null;
                    });
                    isOrBecomesErrored(dest, writer._closedPromise, (storedError) => {
                        if (!preventCancel) {
                            shutdownWithAction(
                                () => ReadableStreamCancel(source, storedError),
                                true,
                                storedError,
                            );
                        } else {
                            shutdown(true, storedError);
                        }
                        return null;
                    });
                    isOrBecomesClosed(source, reader._closedPromise, () => {
                        if (!preventClose) {
                            shutdownWithAction(() =>
                                WritableStreamDefaultWriterCloseWithErrorPropagation(writer),
                            );
                        } else {
                            shutdown();
                        }
                        return null;
                    });
                    if (WritableStreamCloseQueuedOrInFlight(dest) || dest._state === 'closed') {
                        const destClosed = new TypeError(
                            'the destination writable stream closed before all data could be piped to it',
                        );
                        if (!preventCancel) {
                            shutdownWithAction(
                                () => ReadableStreamCancel(source, destClosed),
                                true,
                                destClosed,
                            );
                        } else {
                            shutdown(true, destClosed);
                        }
                    }
                    setPromiseIsHandledToTrue(pipeLoop());
                    function waitForWritesToFinish() {
                        const oldCurrentWrite = currentWrite;
                        return PerformPromiseThen(currentWrite, () =>
                            oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : void 0,
                        );
                    }
                    function isOrBecomesErrored(stream, promise, action) {
                        if (stream._state === 'errored') {
                            action(stream._storedError);
                        } else {
                            uponRejection(promise, action);
                        }
                    }
                    function isOrBecomesClosed(stream, promise, action) {
                        if (stream._state === 'closed') {
                            action();
                        } else {
                            uponFulfillment(promise, action);
                        }
                    }
                    function shutdownWithAction(action, originalIsError, originalError) {
                        if (shuttingDown) {
                            return;
                        }
                        shuttingDown = true;
                        if (
                            dest._state === 'writable' &&
                            !WritableStreamCloseQueuedOrInFlight(dest)
                        ) {
                            uponFulfillment(waitForWritesToFinish(), doTheRest);
                        } else {
                            doTheRest();
                        }
                        function doTheRest() {
                            uponPromise(
                                action(),
                                () => finalize(originalIsError, originalError),
                                (newError) => finalize(true, newError),
                            );
                            return null;
                        }
                    }
                    function shutdown(isError, error) {
                        if (shuttingDown) {
                            return;
                        }
                        shuttingDown = true;
                        if (
                            dest._state === 'writable' &&
                            !WritableStreamCloseQueuedOrInFlight(dest)
                        ) {
                            uponFulfillment(waitForWritesToFinish(), () =>
                                finalize(isError, error),
                            );
                        } else {
                            finalize(isError, error);
                        }
                    }
                    function finalize(isError, error) {
                        WritableStreamDefaultWriterRelease(writer);
                        ReadableStreamReaderGenericRelease(reader);
                        if (signal !== void 0) {
                            signal.removeEventListener('abort', abortAlgorithm);
                        }
                        if (isError) {
                            reject(error);
                        } else {
                            resolve(void 0);
                        }
                        return null;
                    }
                });
            }
            class ReadableStreamDefaultController {
                constructor() {
                    throw new TypeError('Illegal constructor');
                }
                /**
                 * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is
                 * over-full. An underlying source ought to use this information to determine when and how to apply backpressure.
                 */
                get desiredSize() {
                    if (!IsReadableStreamDefaultController(this)) {
                        throw defaultControllerBrandCheckException$1('desiredSize');
                    }
                    return ReadableStreamDefaultControllerGetDesiredSize(this);
                }
                /**
                 * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from
                 * the stream, but once those are read, the stream will become closed.
                 */
                close() {
                    if (!IsReadableStreamDefaultController(this)) {
                        throw defaultControllerBrandCheckException$1('close');
                    }
                    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {
                        throw new TypeError('The stream is not in a state that permits close');
                    }
                    ReadableStreamDefaultControllerClose(this);
                }
                enqueue(chunk = void 0) {
                    if (!IsReadableStreamDefaultController(this)) {
                        throw defaultControllerBrandCheckException$1('enqueue');
                    }
                    if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {
                        throw new TypeError('The stream is not in a state that permits enqueue');
                    }
                    return ReadableStreamDefaultControllerEnqueue(this, chunk);
                }
                /**
                 * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.
                 */
                error(e2 = void 0) {
                    if (!IsReadableStreamDefaultController(this)) {
                        throw defaultControllerBrandCheckException$1('error');
                    }
                    ReadableStreamDefaultControllerError(this, e2);
                }
                /** @internal */
                [CancelSteps](reason) {
                    ResetQueue(this);
                    const result = this._cancelAlgorithm(reason);
                    ReadableStreamDefaultControllerClearAlgorithms(this);
                    return result;
                }
                /** @internal */
                [PullSteps](readRequest) {
                    const stream = this._controlledReadableStream;
                    if (this._queue.length > 0) {
                        const chunk = DequeueValue(this);
                        if (this._closeRequested && this._queue.length === 0) {
                            ReadableStreamDefaultControllerClearAlgorithms(this);
                            ReadableStreamClose(stream);
                        } else {
                            ReadableStreamDefaultControllerCallPullIfNeeded(this);
                        }
                        readRequest._chunkSteps(chunk);
                    } else {
                        ReadableStreamAddReadRequest(stream, readRequest);
                        ReadableStreamDefaultControllerCallPullIfNeeded(this);
                    }
                }
                /** @internal */
                [ReleaseSteps]() {}
            }
            Object.defineProperties(ReadableStreamDefaultController.prototype, {
                close: { enumerable: true },
                enqueue: { enumerable: true },
                error: { enumerable: true },
                desiredSize: { enumerable: true },
            });
            setFunctionName(ReadableStreamDefaultController.prototype.close, 'close');
            setFunctionName(ReadableStreamDefaultController.prototype.enqueue, 'enqueue');
            setFunctionName(ReadableStreamDefaultController.prototype.error, 'error');
            if (typeof Symbol.toStringTag === 'symbol') {
                Object.defineProperty(
                    ReadableStreamDefaultController.prototype,
                    Symbol.toStringTag,
                    {
                        value: 'ReadableStreamDefaultController',
                        configurable: true,
                    },
                );
            }
            function IsReadableStreamDefaultController(x2) {
                if (!typeIsObject(x2)) {
                    return false;
                }
                if (!Object.prototype.hasOwnProperty.call(x2, '_controlledReadableStream')) {
                    return false;
                }
                return x2 instanceof ReadableStreamDefaultController;
            }
            function ReadableStreamDefaultControllerCallPullIfNeeded(controller) {
                const shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);
                if (!shouldPull) {
                    return;
                }
                if (controller._pulling) {
                    controller._pullAgain = true;
                    return;
                }
                controller._pulling = true;
                const pullPromise = controller._pullAlgorithm();
                uponPromise(
                    pullPromise,
                    () => {
                        controller._pulling = false;
                        if (controller._pullAgain) {
                            controller._pullAgain = false;
                            ReadableStreamDefaultControllerCallPullIfNeeded(controller);
                        }
                        return null;
                    },
                    (e2) => {
                        ReadableStreamDefaultControllerError(controller, e2);
                        return null;
                    },
                );
            }
            function ReadableStreamDefaultControllerShouldCallPull(controller) {
                const stream = controller._controlledReadableStream;
                if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {
                    return false;
                }
                if (!controller._started) {
                    return false;
                }
                if (
                    IsReadableStreamLocked(stream) &&
                    ReadableStreamGetNumReadRequests(stream) > 0
                ) {
                    return true;
                }
                const desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);
                if (desiredSize > 0) {
                    return true;
                }
                return false;
            }
            function ReadableStreamDefaultControllerClearAlgorithms(controller) {
                controller._pullAlgorithm = void 0;
                controller._cancelAlgorithm = void 0;
                controller._strategySizeAlgorithm = void 0;
            }
            function ReadableStreamDefaultControllerClose(controller) {
                if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {
                    return;
                }
                const stream = controller._controlledReadableStream;
                controller._closeRequested = true;
                if (controller._queue.length === 0) {
                    ReadableStreamDefaultControllerClearAlgorithms(controller);
                    ReadableStreamClose(stream);
                }
            }
            function ReadableStreamDefaultControllerEnqueue(controller, chunk) {
                if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {
                    return;
                }
                const stream = controller._controlledReadableStream;
                if (
                    IsReadableStreamLocked(stream) &&
                    ReadableStreamGetNumReadRequests(stream) > 0
                ) {
                    ReadableStreamFulfillReadRequest(stream, chunk, false);
                } else {
                    let chunkSize;
                    try {
                        chunkSize = controller._strategySizeAlgorithm(chunk);
                    } catch (chunkSizeE) {
                        ReadableStreamDefaultControllerError(controller, chunkSizeE);
                        throw chunkSizeE;
                    }
                    try {
                        EnqueueValueWithSize(controller, chunk, chunkSize);
                    } catch (enqueueE) {
                        ReadableStreamDefaultControllerError(controller, enqueueE);
                        throw enqueueE;
                    }
                }
                ReadableStreamDefaultControllerCallPullIfNeeded(controller);
            }
            function ReadableStreamDefaultControllerError(controller, e2) {
                const stream = controller._controlledReadableStream;
                if (stream._state !== 'readable') {
                    return;
                }
                ResetQueue(controller);
                ReadableStreamDefaultControllerClearAlgorithms(controller);
                ReadableStreamError(stream, e2);
            }
            function ReadableStreamDefaultControllerGetDesiredSize(controller) {
                const state = controller._controlledReadableStream._state;
                if (state === 'errored') {
                    return null;
                }
                if (state === 'closed') {
                    return 0;
                }
                return controller._strategyHWM - controller._queueTotalSize;
            }
            function ReadableStreamDefaultControllerHasBackpressure(controller) {
                if (ReadableStreamDefaultControllerShouldCallPull(controller)) {
                    return false;
                }
                return true;
            }
            function ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) {
                const state = controller._controlledReadableStream._state;
                if (!controller._closeRequested && state === 'readable') {
                    return true;
                }
                return false;
            }
            function SetUpReadableStreamDefaultController(
                stream,
                controller,
                startAlgorithm,
                pullAlgorithm,
                cancelAlgorithm,
                highWaterMark,
                sizeAlgorithm,
            ) {
                controller._controlledReadableStream = stream;
                controller._queue = void 0;
                controller._queueTotalSize = void 0;
                ResetQueue(controller);
                controller._started = false;
                controller._closeRequested = false;
                controller._pullAgain = false;
                controller._pulling = false;
                controller._strategySizeAlgorithm = sizeAlgorithm;
                controller._strategyHWM = highWaterMark;
                controller._pullAlgorithm = pullAlgorithm;
                controller._cancelAlgorithm = cancelAlgorithm;
                stream._readableStreamController = controller;
                const startResult = startAlgorithm();
                uponPromise(
                    promiseResolvedWith(startResult),
                    () => {
                        controller._started = true;
                        ReadableStreamDefaultControllerCallPullIfNeeded(controller);
                        return null;
                    },
                    (r2) => {
                        ReadableStreamDefaultControllerError(controller, r2);
                        return null;
                    },
                );
            }
            function SetUpReadableStreamDefaultControllerFromUnderlyingSource(
                stream,
                underlyingSource,
                highWaterMark,
                sizeAlgorithm,
            ) {
                const controller = Object.create(ReadableStreamDefaultController.prototype);
                let startAlgorithm;
                let pullAlgorithm;
                let cancelAlgorithm;
                if (underlyingSource.start !== void 0) {
                    startAlgorithm = () => underlyingSource.start(controller);
                } else {
                    startAlgorithm = () => void 0;
                }
                if (underlyingSource.pull !== void 0) {
                    pullAlgorithm = () => underlyingSource.pull(controller);
                } else {
                    pullAlgorithm = () => promiseResolvedWith(void 0);
                }
                if (underlyingSource.cancel !== void 0) {
                    cancelAlgorithm = (reason) => underlyingSource.cancel(reason);
                } else {
                    cancelAlgorithm = () => promiseResolvedWith(void 0);
                }
                SetUpReadableStreamDefaultController(
                    stream,
                    controller,
                    startAlgorithm,
                    pullAlgorithm,
                    cancelAlgorithm,
                    highWaterMark,
                    sizeAlgorithm,
                );
            }
            function defaultControllerBrandCheckException$1(name) {
                return new TypeError(
                    `ReadableStreamDefaultController.prototype.${name} can only be used on a ReadableStreamDefaultController`,
                );
            }
            function ReadableStreamTee(stream, cloneForBranch2) {
                if (IsReadableByteStreamController(stream._readableStreamController)) {
                    return ReadableByteStreamTee(stream);
                }
                return ReadableStreamDefaultTee(stream);
            }
            function ReadableStreamDefaultTee(stream, cloneForBranch2) {
                const reader = AcquireReadableStreamDefaultReader(stream);
                let reading = false;
                let readAgain = false;
                let canceled1 = false;
                let canceled2 = false;
                let reason1;
                let reason2;
                let branch1;
                let branch2;
                let resolveCancelPromise;
                const cancelPromise = newPromise((resolve) => {
                    resolveCancelPromise = resolve;
                });
                function pullAlgorithm() {
                    if (reading) {
                        readAgain = true;
                        return promiseResolvedWith(void 0);
                    }
                    reading = true;
                    const readRequest = {
                        _chunkSteps: (chunk) => {
                            _queueMicrotask(() => {
                                readAgain = false;
                                const chunk1 = chunk;
                                const chunk2 = chunk;
                                if (!canceled1) {
                                    ReadableStreamDefaultControllerEnqueue(
                                        branch1._readableStreamController,
                                        chunk1,
                                    );
                                }
                                if (!canceled2) {
                                    ReadableStreamDefaultControllerEnqueue(
                                        branch2._readableStreamController,
                                        chunk2,
                                    );
                                }
                                reading = false;
                                if (readAgain) {
                                    pullAlgorithm();
                                }
                            });
                        },
                        _closeSteps: () => {
                            reading = false;
                            if (!canceled1) {
                                ReadableStreamDefaultControllerClose(
                                    branch1._readableStreamController,
                                );
                            }
                            if (!canceled2) {
                                ReadableStreamDefaultControllerClose(
                                    branch2._readableStreamController,
                                );
                            }
                            if (!canceled1 || !canceled2) {
                                resolveCancelPromise(void 0);
                            }
                        },
                        _errorSteps: () => {
                            reading = false;
                        },
                    };
                    ReadableStreamDefaultReaderRead(reader, readRequest);
                    return promiseResolvedWith(void 0);
                }
                function cancel1Algorithm(reason) {
                    canceled1 = true;
                    reason1 = reason;
                    if (canceled2) {
                        const compositeReason = CreateArrayFromList([reason1, reason2]);
                        const cancelResult = ReadableStreamCancel(stream, compositeReason);
                        resolveCancelPromise(cancelResult);
                    }
                    return cancelPromise;
                }
                function cancel2Algorithm(reason) {
                    canceled2 = true;
                    reason2 = reason;
                    if (canceled1) {
                        const compositeReason = CreateArrayFromList([reason1, reason2]);
                        const cancelResult = ReadableStreamCancel(stream, compositeReason);
                        resolveCancelPromise(cancelResult);
                    }
                    return cancelPromise;
                }
                function startAlgorithm() {}
                branch1 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel1Algorithm);
                branch2 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel2Algorithm);
                uponRejection(reader._closedPromise, (r2) => {
                    ReadableStreamDefaultControllerError(branch1._readableStreamController, r2);
                    ReadableStreamDefaultControllerError(branch2._readableStreamController, r2);
                    if (!canceled1 || !canceled2) {
                        resolveCancelPromise(void 0);
                    }
                    return null;
                });
                return [branch1, branch2];
            }
            function ReadableByteStreamTee(stream) {
                let reader = AcquireReadableStreamDefaultReader(stream);
                let reading = false;
                let readAgainForBranch1 = false;
                let readAgainForBranch2 = false;
                let canceled1 = false;
                let canceled2 = false;
                let reason1;
                let reason2;
                let branch1;
                let branch2;
                let resolveCancelPromise;
                const cancelPromise = newPromise((resolve) => {
                    resolveCancelPromise = resolve;
                });
                function forwardReaderError(thisReader) {
                    uponRejection(thisReader._closedPromise, (r2) => {
                        if (thisReader !== reader) {
                            return null;
                        }
                        ReadableByteStreamControllerError(branch1._readableStreamController, r2);
                        ReadableByteStreamControllerError(branch2._readableStreamController, r2);
                        if (!canceled1 || !canceled2) {
                            resolveCancelPromise(void 0);
                        }
                        return null;
                    });
                }
                function pullWithDefaultReader() {
                    if (IsReadableStreamBYOBReader(reader)) {
                        ReadableStreamReaderGenericRelease(reader);
                        reader = AcquireReadableStreamDefaultReader(stream);
                        forwardReaderError(reader);
                    }
                    const readRequest = {
                        _chunkSteps: (chunk) => {
                            _queueMicrotask(() => {
                                readAgainForBranch1 = false;
                                readAgainForBranch2 = false;
                                const chunk1 = chunk;
                                let chunk2 = chunk;
                                if (!canceled1 && !canceled2) {
                                    try {
                                        chunk2 = CloneAsUint8Array(chunk);
                                    } catch (cloneE) {
                                        ReadableByteStreamControllerError(
                                            branch1._readableStreamController,
                                            cloneE,
                                        );
                                        ReadableByteStreamControllerError(
                                            branch2._readableStreamController,
                                            cloneE,
                                        );
                                        resolveCancelPromise(ReadableStreamCancel(stream, cloneE));
                                        return;
                                    }
                                }
                                if (!canceled1) {
                                    ReadableByteStreamControllerEnqueue(
                                        branch1._readableStreamController,
                                        chunk1,
                                    );
                                }
                                if (!canceled2) {
                                    ReadableByteStreamControllerEnqueue(
                                        branch2._readableStreamController,
                                        chunk2,
                                    );
                                }
                                reading = false;
                                if (readAgainForBranch1) {
                                    pull1Algorithm();
                                } else if (readAgainForBranch2) {
                                    pull2Algorithm();
                                }
                            });
                        },
                        _closeSteps: () => {
                            reading = false;
                            if (!canceled1) {
                                ReadableByteStreamControllerClose(
                                    branch1._readableStreamController,
                                );
                            }
                            if (!canceled2) {
                                ReadableByteStreamControllerClose(
                                    branch2._readableStreamController,
                                );
                            }
                            if (branch1._readableStreamController._pendingPullIntos.length > 0) {
                                ReadableByteStreamControllerRespond(
                                    branch1._readableStreamController,
                                    0,
                                );
                            }
                            if (branch2._readableStreamController._pendingPullIntos.length > 0) {
                                ReadableByteStreamControllerRespond(
                                    branch2._readableStreamController,
                                    0,
                                );
                            }
                            if (!canceled1 || !canceled2) {
                                resolveCancelPromise(void 0);
                            }
                        },
                        _errorSteps: () => {
                            reading = false;
                        },
                    };
                    ReadableStreamDefaultReaderRead(reader, readRequest);
                }
                function pullWithBYOBReader(view, forBranch2) {
                    if (IsReadableStreamDefaultReader(reader)) {
                        ReadableStreamReaderGenericRelease(reader);
                        reader = AcquireReadableStreamBYOBReader(stream);
                        forwardReaderError(reader);
                    }
                    const byobBranch = forBranch2 ? branch2 : branch1;
                    const otherBranch = forBranch2 ? branch1 : branch2;
                    const readIntoRequest = {
                        _chunkSteps: (chunk) => {
                            _queueMicrotask(() => {
                                readAgainForBranch1 = false;
                                readAgainForBranch2 = false;
                                const byobCanceled = forBranch2 ? canceled2 : canceled1;
                                const otherCanceled = forBranch2 ? canceled1 : canceled2;
                                if (!otherCanceled) {
                                    let clonedChunk;
                                    try {
                                        clonedChunk = CloneAsUint8Array(chunk);
                                    } catch (cloneE) {
                                        ReadableByteStreamControllerError(
                                            byobBranch._readableStreamController,
                                            cloneE,
                                        );
                                        ReadableByteStreamControllerError(
                                            otherBranch._readableStreamController,
                                            cloneE,
                                        );
                                        resolveCancelPromise(ReadableStreamCancel(stream, cloneE));
                                        return;
                                    }
                                    if (!byobCanceled) {
                                        ReadableByteStreamControllerRespondWithNewView(
                                            byobBranch._readableStreamController,
                                            chunk,
                                        );
                                    }
                                    ReadableByteStreamControllerEnqueue(
                                        otherBranch._readableStreamController,
                                        clonedChunk,
                                    );
                                } else if (!byobCanceled) {
                                    ReadableByteStreamControllerRespondWithNewView(
                                        byobBranch._readableStreamController,
                                        chunk,
                                    );
                                }
                                reading = false;
                                if (readAgainForBranch1) {
                                    pull1Algorithm();
                                } else if (readAgainForBranch2) {
                                    pull2Algorithm();
                                }
                            });
                        },
                        _closeSteps: (chunk) => {
                            reading = false;
                            const byobCanceled = forBranch2 ? canceled2 : canceled1;
                            const otherCanceled = forBranch2 ? canceled1 : canceled2;
                            if (!byobCanceled) {
                                ReadableByteStreamControllerClose(
                                    byobBranch._readableStreamController,
                                );
                            }
                            if (!otherCanceled) {
                                ReadableByteStreamControllerClose(
                                    otherBranch._readableStreamController,
                                );
                            }
                            if (chunk !== void 0) {
                                if (!byobCanceled) {
                                    ReadableByteStreamControllerRespondWithNewView(
                                        byobBranch._readableStreamController,
                                        chunk,
                                    );
                                }
                                if (
                                    !otherCanceled &&
                                    otherBranch._readableStreamController._pendingPullIntos.length >
                                        0
                                ) {
                                    ReadableByteStreamControllerRespond(
                                        otherBranch._readableStreamController,
                                        0,
                                    );
                                }
                            }
                            if (!byobCanceled || !otherCanceled) {
                                resolveCancelPromise(void 0);
                            }
                        },
                        _errorSteps: () => {
                            reading = false;
                        },
                    };
                    ReadableStreamBYOBReaderRead(reader, view, 1, readIntoRequest);
                }
                function pull1Algorithm() {
                    if (reading) {
                        readAgainForBranch1 = true;
                        return promiseResolvedWith(void 0);
                    }
                    reading = true;
                    const byobRequest = ReadableByteStreamControllerGetBYOBRequest(
                        branch1._readableStreamController,
                    );
                    if (byobRequest === null) {
                        pullWithDefaultReader();
                    } else {
                        pullWithBYOBReader(byobRequest._view, false);
                    }
                    return promiseResolvedWith(void 0);
                }
                function pull2Algorithm() {
                    if (reading) {
                        readAgainForBranch2 = true;
                        return promiseResolvedWith(void 0);
                    }
                    reading = true;
                    const byobRequest = ReadableByteStreamControllerGetBYOBRequest(
                        branch2._readableStreamController,
                    );
                    if (byobRequest === null) {
                        pullWithDefaultReader();
                    } else {
                        pullWithBYOBReader(byobRequest._view, true);
                    }
                    return promiseResolvedWith(void 0);
                }
                function cancel1Algorithm(reason) {
                    canceled1 = true;
                    reason1 = reason;
                    if (canceled2) {
                        const compositeReason = CreateArrayFromList([reason1, reason2]);
                        const cancelResult = ReadableStreamCancel(stream, compositeReason);
                        resolveCancelPromise(cancelResult);
                    }
                    return cancelPromise;
                }
                function cancel2Algorithm(reason) {
                    canceled2 = true;
                    reason2 = reason;
                    if (canceled1) {
                        const compositeReason = CreateArrayFromList([reason1, reason2]);
                        const cancelResult = ReadableStreamCancel(stream, compositeReason);
                        resolveCancelPromise(cancelResult);
                    }
                    return cancelPromise;
                }
                function startAlgorithm() {
                    return;
                }
                branch1 = CreateReadableByteStream(
                    startAlgorithm,
                    pull1Algorithm,
                    cancel1Algorithm,
                );
                branch2 = CreateReadableByteStream(
                    startAlgorithm,
                    pull2Algorithm,
                    cancel2Algorithm,
                );
                forwardReaderError(reader);
                return [branch1, branch2];
            }
            function isReadableStreamLike(stream) {
                return typeIsObject(stream) && typeof stream.getReader !== 'undefined';
            }
            function ReadableStreamFrom(source) {
                if (isReadableStreamLike(source)) {
                    return ReadableStreamFromDefaultReader(source.getReader());
                }
                return ReadableStreamFromIterable(source);
            }
            function ReadableStreamFromIterable(asyncIterable) {
                let stream;
                const iteratorRecord = GetIterator(asyncIterable, 'async');
                const startAlgorithm = noop3;
                function pullAlgorithm() {
                    let nextResult;
                    try {
                        nextResult = IteratorNext(iteratorRecord);
                    } catch (e2) {
                        return promiseRejectedWith(e2);
                    }
                    const nextPromise = promiseResolvedWith(nextResult);
                    return transformPromiseWith(nextPromise, (iterResult) => {
                        if (!typeIsObject(iterResult)) {
                            throw new TypeError(
                                'The promise returned by the iterator.next() method must fulfill with an object',
                            );
                        }
                        const done = IteratorComplete(iterResult);
                        if (done) {
                            ReadableStreamDefaultControllerClose(stream._readableStreamController);
                        } else {
                            const value = IteratorValue(iterResult);
                            ReadableStreamDefaultControllerEnqueue(
                                stream._readableStreamController,
                                value,
                            );
                        }
                    });
                }
                function cancelAlgorithm(reason) {
                    const iterator = iteratorRecord.iterator;
                    let returnMethod;
                    try {
                        returnMethod = GetMethod(iterator, 'return');
                    } catch (e2) {
                        return promiseRejectedWith(e2);
                    }
                    if (returnMethod === void 0) {
                        return promiseResolvedWith(void 0);
                    }
                    let returnResult;
                    try {
                        returnResult = reflectCall(returnMethod, iterator, [reason]);
                    } catch (e2) {
                        return promiseRejectedWith(e2);
                    }
                    const returnPromise = promiseResolvedWith(returnResult);
                    return transformPromiseWith(returnPromise, (iterResult) => {
                        if (!typeIsObject(iterResult)) {
                            throw new TypeError(
                                'The promise returned by the iterator.return() method must fulfill with an object',
                            );
                        }
                        return void 0;
                    });
                }
                stream = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, 0);
                return stream;
            }
            function ReadableStreamFromDefaultReader(reader) {
                let stream;
                const startAlgorithm = noop3;
                function pullAlgorithm() {
                    let readPromise;
                    try {
                        readPromise = reader.read();
                    } catch (e2) {
                        return promiseRejectedWith(e2);
                    }
                    return transformPromiseWith(readPromise, (readResult) => {
                        if (!typeIsObject(readResult)) {
                            throw new TypeError(
                                'The promise returned by the reader.read() method must fulfill with an object',
                            );
                        }
                        if (readResult.done) {
                            ReadableStreamDefaultControllerClose(stream._readableStreamController);
                        } else {
                            const value = readResult.value;
                            ReadableStreamDefaultControllerEnqueue(
                                stream._readableStreamController,
                                value,
                            );
                        }
                    });
                }
                function cancelAlgorithm(reason) {
                    try {
                        return promiseResolvedWith(reader.cancel(reason));
                    } catch (e2) {
                        return promiseRejectedWith(e2);
                    }
                }
                stream = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, 0);
                return stream;
            }
            function convertUnderlyingDefaultOrByteSource(source, context) {
                assertDictionary(source, context);
                const original = source;
                const autoAllocateChunkSize =
                    original === null || original === void 0
                        ? void 0
                        : original.autoAllocateChunkSize;
                const cancel = original === null || original === void 0 ? void 0 : original.cancel;
                const pull = original === null || original === void 0 ? void 0 : original.pull;
                const start = original === null || original === void 0 ? void 0 : original.start;
                const type = original === null || original === void 0 ? void 0 : original.type;
                return {
                    autoAllocateChunkSize:
                        autoAllocateChunkSize === void 0
                            ? void 0
                            : convertUnsignedLongLongWithEnforceRange(
                                  autoAllocateChunkSize,
                                  `${context} has member 'autoAllocateChunkSize' that`,
                              ),
                    cancel:
                        cancel === void 0
                            ? void 0
                            : convertUnderlyingSourceCancelCallback(
                                  cancel,
                                  original,
                                  `${context} has member 'cancel' that`,
                              ),
                    pull:
                        pull === void 0
                            ? void 0
                            : convertUnderlyingSourcePullCallback(
                                  pull,
                                  original,
                                  `${context} has member 'pull' that`,
                              ),
                    start:
                        start === void 0
                            ? void 0
                            : convertUnderlyingSourceStartCallback(
                                  start,
                                  original,
                                  `${context} has member 'start' that`,
                              ),
                    type:
                        type === void 0
                            ? void 0
                            : convertReadableStreamType(type, `${context} has member 'type' that`),
                };
            }
            function convertUnderlyingSourceCancelCallback(fn, original, context) {
                assertFunction(fn, context);
                return (reason) => promiseCall(fn, original, [reason]);
            }
            function convertUnderlyingSourcePullCallback(fn, original, context) {
                assertFunction(fn, context);
                return (controller) => promiseCall(fn, original, [controller]);
            }
            function convertUnderlyingSourceStartCallback(fn, original, context) {
                assertFunction(fn, context);
                return (controller) => reflectCall(fn, original, [controller]);
            }
            function convertReadableStreamType(type, context) {
                type = `${type}`;
                if (type !== 'bytes') {
                    throw new TypeError(
                        `${context} '${type}' is not a valid enumeration value for ReadableStreamType`,
                    );
                }
                return type;
            }
            function convertIteratorOptions(options2, context) {
                assertDictionary(options2, context);
                const preventCancel =
                    options2 === null || options2 === void 0 ? void 0 : options2.preventCancel;
                return { preventCancel: Boolean(preventCancel) };
            }
            function convertPipeOptions(options2, context) {
                assertDictionary(options2, context);
                const preventAbort =
                    options2 === null || options2 === void 0 ? void 0 : options2.preventAbort;
                const preventCancel =
                    options2 === null || options2 === void 0 ? void 0 : options2.preventCancel;
                const preventClose =
                    options2 === null || options2 === void 0 ? void 0 : options2.preventClose;
                const signal = options2 === null || options2 === void 0 ? void 0 : options2.signal;
                if (signal !== void 0) {
                    assertAbortSignal(signal, `${context} has member 'signal' that`);
                }
                return {
                    preventAbort: Boolean(preventAbort),
                    preventCancel: Boolean(preventCancel),
                    preventClose: Boolean(preventClose),
                    signal,
                };
            }
            function assertAbortSignal(signal, context) {
                if (!isAbortSignal2(signal)) {
                    throw new TypeError(`${context} is not an AbortSignal.`);
                }
            }
            function convertReadableWritablePair(pair, context) {
                assertDictionary(pair, context);
                const readable = pair === null || pair === void 0 ? void 0 : pair.readable;
                assertRequiredField(readable, 'readable', 'ReadableWritablePair');
                assertReadableStream(readable, `${context} has member 'readable' that`);
                const writable = pair === null || pair === void 0 ? void 0 : pair.writable;
                assertRequiredField(writable, 'writable', 'ReadableWritablePair');
                assertWritableStream(writable, `${context} has member 'writable' that`);
                return { readable, writable };
            }
            class ReadableStream2 {
                constructor(rawUnderlyingSource = {}, rawStrategy = {}) {
                    if (rawUnderlyingSource === void 0) {
                        rawUnderlyingSource = null;
                    } else {
                        assertObject(rawUnderlyingSource, 'First parameter');
                    }
                    const strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');
                    const underlyingSource = convertUnderlyingDefaultOrByteSource(
                        rawUnderlyingSource,
                        'First parameter',
                    );
                    InitializeReadableStream(this);
                    if (underlyingSource.type === 'bytes') {
                        if (strategy.size !== void 0) {
                            throw new RangeError(
                                'The strategy for a byte stream cannot have a size function',
                            );
                        }
                        const highWaterMark = ExtractHighWaterMark(strategy, 0);
                        SetUpReadableByteStreamControllerFromUnderlyingSource(
                            this,
                            underlyingSource,
                            highWaterMark,
                        );
                    } else {
                        const sizeAlgorithm = ExtractSizeAlgorithm(strategy);
                        const highWaterMark = ExtractHighWaterMark(strategy, 1);
                        SetUpReadableStreamDefaultControllerFromUnderlyingSource(
                            this,
                            underlyingSource,
                            highWaterMark,
                            sizeAlgorithm,
                        );
                    }
                }
                /**
                 * Whether or not the readable stream is locked to a {@link ReadableStreamDefaultReader | reader}.
                 */
                get locked() {
                    if (!IsReadableStream(this)) {
                        throw streamBrandCheckException$1('locked');
                    }
                    return IsReadableStreamLocked(this);
                }
                /**
                 * Cancels the stream, signaling a loss of interest in the stream by a consumer.
                 *
                 * The supplied `reason` argument will be given to the underlying source's {@link UnderlyingSource.cancel | cancel()}
                 * method, which might or might not use it.
                 */
                cancel(reason = void 0) {
                    if (!IsReadableStream(this)) {
                        return promiseRejectedWith(streamBrandCheckException$1('cancel'));
                    }
                    if (IsReadableStreamLocked(this)) {
                        return promiseRejectedWith(
                            new TypeError('Cannot cancel a stream that already has a reader'),
                        );
                    }
                    return ReadableStreamCancel(this, reason);
                }
                getReader(rawOptions = void 0) {
                    if (!IsReadableStream(this)) {
                        throw streamBrandCheckException$1('getReader');
                    }
                    const options2 = convertReaderOptions(rawOptions, 'First parameter');
                    if (options2.mode === void 0) {
                        return AcquireReadableStreamDefaultReader(this);
                    }
                    return AcquireReadableStreamBYOBReader(this);
                }
                pipeThrough(rawTransform, rawOptions = {}) {
                    if (!IsReadableStream(this)) {
                        throw streamBrandCheckException$1('pipeThrough');
                    }
                    assertRequiredArgument(rawTransform, 1, 'pipeThrough');
                    const transform = convertReadableWritablePair(rawTransform, 'First parameter');
                    const options2 = convertPipeOptions(rawOptions, 'Second parameter');
                    if (IsReadableStreamLocked(this)) {
                        throw new TypeError(
                            'ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream',
                        );
                    }
                    if (IsWritableStreamLocked(transform.writable)) {
                        throw new TypeError(
                            'ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream',
                        );
                    }
                    const promise = ReadableStreamPipeTo(
                        this,
                        transform.writable,
                        options2.preventClose,
                        options2.preventAbort,
                        options2.preventCancel,
                        options2.signal,
                    );
                    setPromiseIsHandledToTrue(promise);
                    return transform.readable;
                }
                pipeTo(destination, rawOptions = {}) {
                    if (!IsReadableStream(this)) {
                        return promiseRejectedWith(streamBrandCheckException$1('pipeTo'));
                    }
                    if (destination === void 0) {
                        return promiseRejectedWith(`Parameter 1 is required in 'pipeTo'.`);
                    }
                    if (!IsWritableStream(destination)) {
                        return promiseRejectedWith(
                            new TypeError(
                                `ReadableStream.prototype.pipeTo's first argument must be a WritableStream`,
                            ),
                        );
                    }
                    let options2;
                    try {
                        options2 = convertPipeOptions(rawOptions, 'Second parameter');
                    } catch (e2) {
                        return promiseRejectedWith(e2);
                    }
                    if (IsReadableStreamLocked(this)) {
                        return promiseRejectedWith(
                            new TypeError(
                                'ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream',
                            ),
                        );
                    }
                    if (IsWritableStreamLocked(destination)) {
                        return promiseRejectedWith(
                            new TypeError(
                                'ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream',
                            ),
                        );
                    }
                    return ReadableStreamPipeTo(
                        this,
                        destination,
                        options2.preventClose,
                        options2.preventAbort,
                        options2.preventCancel,
                        options2.signal,
                    );
                }
                /**
                 * Tees this readable stream, returning a two-element array containing the two resulting branches as
                 * new {@link ReadableStream} instances.
                 *
                 * Teeing a stream will lock it, preventing any other consumer from acquiring a reader.
                 * To cancel the stream, cancel both of the resulting branches; a composite cancellation reason will then be
                 * propagated to the stream's underlying source.
                 *
                 * Note that the chunks seen in each branch will be the same object. If the chunks are not immutable,
                 * this could allow interference between the two branches.
                 */
                tee() {
                    if (!IsReadableStream(this)) {
                        throw streamBrandCheckException$1('tee');
                    }
                    const branches = ReadableStreamTee(this);
                    return CreateArrayFromList(branches);
                }
                values(rawOptions = void 0) {
                    if (!IsReadableStream(this)) {
                        throw streamBrandCheckException$1('values');
                    }
                    const options2 = convertIteratorOptions(rawOptions, 'First parameter');
                    return AcquireReadableStreamAsyncIterator(this, options2.preventCancel);
                }
                [SymbolAsyncIterator](options2) {
                    return this.values(options2);
                }
                /**
                 * Creates a new ReadableStream wrapping the provided iterable or async iterable.
                 *
                 * This can be used to adapt various kinds of objects into a readable stream,
                 * such as an array, an async generator, or a Node.js readable stream.
                 */
                static from(asyncIterable) {
                    return ReadableStreamFrom(asyncIterable);
                }
            }
            Object.defineProperties(ReadableStream2, {
                from: { enumerable: true },
            });
            Object.defineProperties(ReadableStream2.prototype, {
                cancel: { enumerable: true },
                getReader: { enumerable: true },
                pipeThrough: { enumerable: true },
                pipeTo: { enumerable: true },
                tee: { enumerable: true },
                values: { enumerable: true },
                locked: { enumerable: true },
            });
            setFunctionName(ReadableStream2.from, 'from');
            setFunctionName(ReadableStream2.prototype.cancel, 'cancel');
            setFunctionName(ReadableStream2.prototype.getReader, 'getReader');
            setFunctionName(ReadableStream2.prototype.pipeThrough, 'pipeThrough');
            setFunctionName(ReadableStream2.prototype.pipeTo, 'pipeTo');
            setFunctionName(ReadableStream2.prototype.tee, 'tee');
            setFunctionName(ReadableStream2.prototype.values, 'values');
            if (typeof Symbol.toStringTag === 'symbol') {
                Object.defineProperty(ReadableStream2.prototype, Symbol.toStringTag, {
                    value: 'ReadableStream',
                    configurable: true,
                });
            }
            Object.defineProperty(ReadableStream2.prototype, SymbolAsyncIterator, {
                value: ReadableStream2.prototype.values,
                writable: true,
                configurable: true,
            });
            function CreateReadableStream(
                startAlgorithm,
                pullAlgorithm,
                cancelAlgorithm,
                highWaterMark = 1,
                sizeAlgorithm = () => 1,
            ) {
                const stream = Object.create(ReadableStream2.prototype);
                InitializeReadableStream(stream);
                const controller = Object.create(ReadableStreamDefaultController.prototype);
                SetUpReadableStreamDefaultController(
                    stream,
                    controller,
                    startAlgorithm,
                    pullAlgorithm,
                    cancelAlgorithm,
                    highWaterMark,
                    sizeAlgorithm,
                );
                return stream;
            }
            function CreateReadableByteStream(startAlgorithm, pullAlgorithm, cancelAlgorithm) {
                const stream = Object.create(ReadableStream2.prototype);
                InitializeReadableStream(stream);
                const controller = Object.create(ReadableByteStreamController.prototype);
                SetUpReadableByteStreamController(
                    stream,
                    controller,
                    startAlgorithm,
                    pullAlgorithm,
                    cancelAlgorithm,
                    0,
                    void 0,
                );
                return stream;
            }
            function InitializeReadableStream(stream) {
                stream._state = 'readable';
                stream._reader = void 0;
                stream._storedError = void 0;
                stream._disturbed = false;
            }
            function IsReadableStream(x2) {
                if (!typeIsObject(x2)) {
                    return false;
                }
                if (!Object.prototype.hasOwnProperty.call(x2, '_readableStreamController')) {
                    return false;
                }
                return x2 instanceof ReadableStream2;
            }
            function IsReadableStreamLocked(stream) {
                if (stream._reader === void 0) {
                    return false;
                }
                return true;
            }
            function ReadableStreamCancel(stream, reason) {
                stream._disturbed = true;
                if (stream._state === 'closed') {
                    return promiseResolvedWith(void 0);
                }
                if (stream._state === 'errored') {
                    return promiseRejectedWith(stream._storedError);
                }
                ReadableStreamClose(stream);
                const reader = stream._reader;
                if (reader !== void 0 && IsReadableStreamBYOBReader(reader)) {
                    const readIntoRequests = reader._readIntoRequests;
                    reader._readIntoRequests = new SimpleQueue();
                    readIntoRequests.forEach((readIntoRequest) => {
                        readIntoRequest._closeSteps(void 0);
                    });
                }
                const sourceCancelPromise = stream._readableStreamController[CancelSteps](reason);
                return transformPromiseWith(sourceCancelPromise, noop3);
            }
            function ReadableStreamClose(stream) {
                stream._state = 'closed';
                const reader = stream._reader;
                if (reader === void 0) {
                    return;
                }
                defaultReaderClosedPromiseResolve(reader);
                if (IsReadableStreamDefaultReader(reader)) {
                    const readRequests = reader._readRequests;
                    reader._readRequests = new SimpleQueue();
                    readRequests.forEach((readRequest) => {
                        readRequest._closeSteps();
                    });
                }
            }
            function ReadableStreamError(stream, e2) {
                stream._state = 'errored';
                stream._storedError = e2;
                const reader = stream._reader;
                if (reader === void 0) {
                    return;
                }
                defaultReaderClosedPromiseReject(reader, e2);
                if (IsReadableStreamDefaultReader(reader)) {
                    ReadableStreamDefaultReaderErrorReadRequests(reader, e2);
                } else {
                    ReadableStreamBYOBReaderErrorReadIntoRequests(reader, e2);
                }
            }
            function streamBrandCheckException$1(name) {
                return new TypeError(
                    `ReadableStream.prototype.${name} can only be used on a ReadableStream`,
                );
            }
            function convertQueuingStrategyInit(init2, context) {
                assertDictionary(init2, context);
                const highWaterMark =
                    init2 === null || init2 === void 0 ? void 0 : init2.highWaterMark;
                assertRequiredField(highWaterMark, 'highWaterMark', 'QueuingStrategyInit');
                return {
                    highWaterMark: convertUnrestrictedDouble(highWaterMark),
                };
            }
            const byteLengthSizeFunction = (chunk) => {
                return chunk.byteLength;
            };
            setFunctionName(byteLengthSizeFunction, 'size');
            class ByteLengthQueuingStrategy {
                constructor(options2) {
                    assertRequiredArgument(options2, 1, 'ByteLengthQueuingStrategy');
                    options2 = convertQueuingStrategyInit(options2, 'First parameter');
                    this._byteLengthQueuingStrategyHighWaterMark = options2.highWaterMark;
                }
                /**
                 * Returns the high water mark provided to the constructor.
                 */
                get highWaterMark() {
                    if (!IsByteLengthQueuingStrategy(this)) {
                        throw byteLengthBrandCheckException('highWaterMark');
                    }
                    return this._byteLengthQueuingStrategyHighWaterMark;
                }
                /**
                 * Measures the size of `chunk` by returning the value of its `byteLength` property.
                 */
                get size() {
                    if (!IsByteLengthQueuingStrategy(this)) {
                        throw byteLengthBrandCheckException('size');
                    }
                    return byteLengthSizeFunction;
                }
            }
            Object.defineProperties(ByteLengthQueuingStrategy.prototype, {
                highWaterMark: { enumerable: true },
                size: { enumerable: true },
            });
            if (typeof Symbol.toStringTag === 'symbol') {
                Object.defineProperty(ByteLengthQueuingStrategy.prototype, Symbol.toStringTag, {
                    value: 'ByteLengthQueuingStrategy',
                    configurable: true,
                });
            }
            function byteLengthBrandCheckException(name) {
                return new TypeError(
                    `ByteLengthQueuingStrategy.prototype.${name} can only be used on a ByteLengthQueuingStrategy`,
                );
            }
            function IsByteLengthQueuingStrategy(x2) {
                if (!typeIsObject(x2)) {
                    return false;
                }
                if (
                    !Object.prototype.hasOwnProperty.call(
                        x2,
                        '_byteLengthQueuingStrategyHighWaterMark',
                    )
                ) {
                    return false;
                }
                return x2 instanceof ByteLengthQueuingStrategy;
            }
            const countSizeFunction = () => {
                return 1;
            };
            setFunctionName(countSizeFunction, 'size');
            class CountQueuingStrategy {
                constructor(options2) {
                    assertRequiredArgument(options2, 1, 'CountQueuingStrategy');
                    options2 = convertQueuingStrategyInit(options2, 'First parameter');
                    this._countQueuingStrategyHighWaterMark = options2.highWaterMark;
                }
                /**
                 * Returns the high water mark provided to the constructor.
                 */
                get highWaterMark() {
                    if (!IsCountQueuingStrategy(this)) {
                        throw countBrandCheckException('highWaterMark');
                    }
                    return this._countQueuingStrategyHighWaterMark;
                }
                /**
                 * Measures the size of `chunk` by always returning 1.
                 * This ensures that the total queue size is a count of the number of chunks in the queue.
                 */
                get size() {
                    if (!IsCountQueuingStrategy(this)) {
                        throw countBrandCheckException('size');
                    }
                    return countSizeFunction;
                }
            }
            Object.defineProperties(CountQueuingStrategy.prototype, {
                highWaterMark: { enumerable: true },
                size: { enumerable: true },
            });
            if (typeof Symbol.toStringTag === 'symbol') {
                Object.defineProperty(CountQueuingStrategy.prototype, Symbol.toStringTag, {
                    value: 'CountQueuingStrategy',
                    configurable: true,
                });
            }
            function countBrandCheckException(name) {
                return new TypeError(
                    `CountQueuingStrategy.prototype.${name} can only be used on a CountQueuingStrategy`,
                );
            }
            function IsCountQueuingStrategy(x2) {
                if (!typeIsObject(x2)) {
                    return false;
                }
                if (
                    !Object.prototype.hasOwnProperty.call(x2, '_countQueuingStrategyHighWaterMark')
                ) {
                    return false;
                }
                return x2 instanceof CountQueuingStrategy;
            }
            function convertTransformer(original, context) {
                assertDictionary(original, context);
                const cancel = original === null || original === void 0 ? void 0 : original.cancel;
                const flush = original === null || original === void 0 ? void 0 : original.flush;
                const readableType =
                    original === null || original === void 0 ? void 0 : original.readableType;
                const start = original === null || original === void 0 ? void 0 : original.start;
                const transform =
                    original === null || original === void 0 ? void 0 : original.transform;
                const writableType =
                    original === null || original === void 0 ? void 0 : original.writableType;
                return {
                    cancel:
                        cancel === void 0
                            ? void 0
                            : convertTransformerCancelCallback(
                                  cancel,
                                  original,
                                  `${context} has member 'cancel' that`,
                              ),
                    flush:
                        flush === void 0
                            ? void 0
                            : convertTransformerFlushCallback(
                                  flush,
                                  original,
                                  `${context} has member 'flush' that`,
                              ),
                    readableType,
                    start:
                        start === void 0
                            ? void 0
                            : convertTransformerStartCallback(
                                  start,
                                  original,
                                  `${context} has member 'start' that`,
                              ),
                    transform:
                        transform === void 0
                            ? void 0
                            : convertTransformerTransformCallback(
                                  transform,
                                  original,
                                  `${context} has member 'transform' that`,
                              ),
                    writableType,
                };
            }
            function convertTransformerFlushCallback(fn, original, context) {
                assertFunction(fn, context);
                return (controller) => promiseCall(fn, original, [controller]);
            }
            function convertTransformerStartCallback(fn, original, context) {
                assertFunction(fn, context);
                return (controller) => reflectCall(fn, original, [controller]);
            }
            function convertTransformerTransformCallback(fn, original, context) {
                assertFunction(fn, context);
                return (chunk, controller) => promiseCall(fn, original, [chunk, controller]);
            }
            function convertTransformerCancelCallback(fn, original, context) {
                assertFunction(fn, context);
                return (reason) => promiseCall(fn, original, [reason]);
            }
            class TransformStream {
                constructor(
                    rawTransformer = {},
                    rawWritableStrategy = {},
                    rawReadableStrategy = {},
                ) {
                    if (rawTransformer === void 0) {
                        rawTransformer = null;
                    }
                    const writableStrategy = convertQueuingStrategy(
                        rawWritableStrategy,
                        'Second parameter',
                    );
                    const readableStrategy = convertQueuingStrategy(
                        rawReadableStrategy,
                        'Third parameter',
                    );
                    const transformer = convertTransformer(rawTransformer, 'First parameter');
                    if (transformer.readableType !== void 0) {
                        throw new RangeError('Invalid readableType specified');
                    }
                    if (transformer.writableType !== void 0) {
                        throw new RangeError('Invalid writableType specified');
                    }
                    const readableHighWaterMark = ExtractHighWaterMark(readableStrategy, 0);
                    const readableSizeAlgorithm = ExtractSizeAlgorithm(readableStrategy);
                    const writableHighWaterMark = ExtractHighWaterMark(writableStrategy, 1);
                    const writableSizeAlgorithm = ExtractSizeAlgorithm(writableStrategy);
                    let startPromise_resolve;
                    const startPromise = newPromise((resolve) => {
                        startPromise_resolve = resolve;
                    });
                    InitializeTransformStream(
                        this,
                        startPromise,
                        writableHighWaterMark,
                        writableSizeAlgorithm,
                        readableHighWaterMark,
                        readableSizeAlgorithm,
                    );
                    SetUpTransformStreamDefaultControllerFromTransformer(this, transformer);
                    if (transformer.start !== void 0) {
                        startPromise_resolve(transformer.start(this._transformStreamController));
                    } else {
                        startPromise_resolve(void 0);
                    }
                }
                /**
                 * The readable side of the transform stream.
                 */
                get readable() {
                    if (!IsTransformStream(this)) {
                        throw streamBrandCheckException('readable');
                    }
                    return this._readable;
                }
                /**
                 * The writable side of the transform stream.
                 */
                get writable() {
                    if (!IsTransformStream(this)) {
                        throw streamBrandCheckException('writable');
                    }
                    return this._writable;
                }
            }
            Object.defineProperties(TransformStream.prototype, {
                readable: { enumerable: true },
                writable: { enumerable: true },
            });
            if (typeof Symbol.toStringTag === 'symbol') {
                Object.defineProperty(TransformStream.prototype, Symbol.toStringTag, {
                    value: 'TransformStream',
                    configurable: true,
                });
            }
            function InitializeTransformStream(
                stream,
                startPromise,
                writableHighWaterMark,
                writableSizeAlgorithm,
                readableHighWaterMark,
                readableSizeAlgorithm,
            ) {
                function startAlgorithm() {
                    return startPromise;
                }
                function writeAlgorithm(chunk) {
                    return TransformStreamDefaultSinkWriteAlgorithm(stream, chunk);
                }
                function abortAlgorithm(reason) {
                    return TransformStreamDefaultSinkAbortAlgorithm(stream, reason);
                }
                function closeAlgorithm() {
                    return TransformStreamDefaultSinkCloseAlgorithm(stream);
                }
                stream._writable = CreateWritableStream(
                    startAlgorithm,
                    writeAlgorithm,
                    closeAlgorithm,
                    abortAlgorithm,
                    writableHighWaterMark,
                    writableSizeAlgorithm,
                );
                function pullAlgorithm() {
                    return TransformStreamDefaultSourcePullAlgorithm(stream);
                }
                function cancelAlgorithm(reason) {
                    return TransformStreamDefaultSourceCancelAlgorithm(stream, reason);
                }
                stream._readable = CreateReadableStream(
                    startAlgorithm,
                    pullAlgorithm,
                    cancelAlgorithm,
                    readableHighWaterMark,
                    readableSizeAlgorithm,
                );
                stream._backpressure = void 0;
                stream._backpressureChangePromise = void 0;
                stream._backpressureChangePromise_resolve = void 0;
                TransformStreamSetBackpressure(stream, true);
                stream._transformStreamController = void 0;
            }
            function IsTransformStream(x2) {
                if (!typeIsObject(x2)) {
                    return false;
                }
                if (!Object.prototype.hasOwnProperty.call(x2, '_transformStreamController')) {
                    return false;
                }
                return x2 instanceof TransformStream;
            }
            function TransformStreamError(stream, e2) {
                ReadableStreamDefaultControllerError(
                    stream._readable._readableStreamController,
                    e2,
                );
                TransformStreamErrorWritableAndUnblockWrite(stream, e2);
            }
            function TransformStreamErrorWritableAndUnblockWrite(stream, e2) {
                TransformStreamDefaultControllerClearAlgorithms(stream._transformStreamController);
                WritableStreamDefaultControllerErrorIfNeeded(
                    stream._writable._writableStreamController,
                    e2,
                );
                TransformStreamUnblockWrite(stream);
            }
            function TransformStreamUnblockWrite(stream) {
                if (stream._backpressure) {
                    TransformStreamSetBackpressure(stream, false);
                }
            }
            function TransformStreamSetBackpressure(stream, backpressure) {
                if (stream._backpressureChangePromise !== void 0) {
                    stream._backpressureChangePromise_resolve();
                }
                stream._backpressureChangePromise = newPromise((resolve) => {
                    stream._backpressureChangePromise_resolve = resolve;
                });
                stream._backpressure = backpressure;
            }
            class TransformStreamDefaultController {
                constructor() {
                    throw new TypeError('Illegal constructor');
                }
                /**
                 * Returns the desired size to fill the readable side’s internal queue. It can be negative, if the queue is over-full.
                 */
                get desiredSize() {
                    if (!IsTransformStreamDefaultController(this)) {
                        throw defaultControllerBrandCheckException('desiredSize');
                    }
                    const readableController =
                        this._controlledTransformStream._readable._readableStreamController;
                    return ReadableStreamDefaultControllerGetDesiredSize(readableController);
                }
                enqueue(chunk = void 0) {
                    if (!IsTransformStreamDefaultController(this)) {
                        throw defaultControllerBrandCheckException('enqueue');
                    }
                    TransformStreamDefaultControllerEnqueue(this, chunk);
                }
                /**
                 * Errors both the readable side and the writable side of the controlled transform stream, making all future
                 * interactions with it fail with the given error `e`. Any chunks queued for transformation will be discarded.
                 */
                error(reason = void 0) {
                    if (!IsTransformStreamDefaultController(this)) {
                        throw defaultControllerBrandCheckException('error');
                    }
                    TransformStreamDefaultControllerError(this, reason);
                }
                /**
                 * Closes the readable side and errors the writable side of the controlled transform stream. This is useful when the
                 * transformer only needs to consume a portion of the chunks written to the writable side.
                 */
                terminate() {
                    if (!IsTransformStreamDefaultController(this)) {
                        throw defaultControllerBrandCheckException('terminate');
                    }
                    TransformStreamDefaultControllerTerminate(this);
                }
            }
            Object.defineProperties(TransformStreamDefaultController.prototype, {
                enqueue: { enumerable: true },
                error: { enumerable: true },
                terminate: { enumerable: true },
                desiredSize: { enumerable: true },
            });
            setFunctionName(TransformStreamDefaultController.prototype.enqueue, 'enqueue');
            setFunctionName(TransformStreamDefaultController.prototype.error, 'error');
            setFunctionName(TransformStreamDefaultController.prototype.terminate, 'terminate');
            if (typeof Symbol.toStringTag === 'symbol') {
                Object.defineProperty(
                    TransformStreamDefaultController.prototype,
                    Symbol.toStringTag,
                    {
                        value: 'TransformStreamDefaultController',
                        configurable: true,
                    },
                );
            }
            function IsTransformStreamDefaultController(x2) {
                if (!typeIsObject(x2)) {
                    return false;
                }
                if (!Object.prototype.hasOwnProperty.call(x2, '_controlledTransformStream')) {
                    return false;
                }
                return x2 instanceof TransformStreamDefaultController;
            }
            function SetUpTransformStreamDefaultController(
                stream,
                controller,
                transformAlgorithm,
                flushAlgorithm,
                cancelAlgorithm,
            ) {
                controller._controlledTransformStream = stream;
                stream._transformStreamController = controller;
                controller._transformAlgorithm = transformAlgorithm;
                controller._flushAlgorithm = flushAlgorithm;
                controller._cancelAlgorithm = cancelAlgorithm;
                controller._finishPromise = void 0;
                controller._finishPromise_resolve = void 0;
                controller._finishPromise_reject = void 0;
            }
            function SetUpTransformStreamDefaultControllerFromTransformer(stream, transformer) {
                const controller = Object.create(TransformStreamDefaultController.prototype);
                let transformAlgorithm;
                let flushAlgorithm;
                let cancelAlgorithm;
                if (transformer.transform !== void 0) {
                    transformAlgorithm = (chunk) => transformer.transform(chunk, controller);
                } else {
                    transformAlgorithm = (chunk) => {
                        try {
                            TransformStreamDefaultControllerEnqueue(controller, chunk);
                            return promiseResolvedWith(void 0);
                        } catch (transformResultE) {
                            return promiseRejectedWith(transformResultE);
                        }
                    };
                }
                if (transformer.flush !== void 0) {
                    flushAlgorithm = () => transformer.flush(controller);
                } else {
                    flushAlgorithm = () => promiseResolvedWith(void 0);
                }
                if (transformer.cancel !== void 0) {
                    cancelAlgorithm = (reason) => transformer.cancel(reason);
                } else {
                    cancelAlgorithm = () => promiseResolvedWith(void 0);
                }
                SetUpTransformStreamDefaultController(
                    stream,
                    controller,
                    transformAlgorithm,
                    flushAlgorithm,
                    cancelAlgorithm,
                );
            }
            function TransformStreamDefaultControllerClearAlgorithms(controller) {
                controller._transformAlgorithm = void 0;
                controller._flushAlgorithm = void 0;
                controller._cancelAlgorithm = void 0;
            }
            function TransformStreamDefaultControllerEnqueue(controller, chunk) {
                const stream = controller._controlledTransformStream;
                const readableController = stream._readable._readableStreamController;
                if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController)) {
                    throw new TypeError('Readable side is not in a state that permits enqueue');
                }
                try {
                    ReadableStreamDefaultControllerEnqueue(readableController, chunk);
                } catch (e2) {
                    TransformStreamErrorWritableAndUnblockWrite(stream, e2);
                    throw stream._readable._storedError;
                }
                const backpressure =
                    ReadableStreamDefaultControllerHasBackpressure(readableController);
                if (backpressure !== stream._backpressure) {
                    TransformStreamSetBackpressure(stream, true);
                }
            }
            function TransformStreamDefaultControllerError(controller, e2) {
                TransformStreamError(controller._controlledTransformStream, e2);
            }
            function TransformStreamDefaultControllerPerformTransform(controller, chunk) {
                const transformPromise = controller._transformAlgorithm(chunk);
                return transformPromiseWith(transformPromise, void 0, (r2) => {
                    TransformStreamError(controller._controlledTransformStream, r2);
                    throw r2;
                });
            }
            function TransformStreamDefaultControllerTerminate(controller) {
                const stream = controller._controlledTransformStream;
                const readableController = stream._readable._readableStreamController;
                ReadableStreamDefaultControllerClose(readableController);
                const error = new TypeError('TransformStream terminated');
                TransformStreamErrorWritableAndUnblockWrite(stream, error);
            }
            function TransformStreamDefaultSinkWriteAlgorithm(stream, chunk) {
                const controller = stream._transformStreamController;
                if (stream._backpressure) {
                    const backpressureChangePromise = stream._backpressureChangePromise;
                    return transformPromiseWith(backpressureChangePromise, () => {
                        const writable = stream._writable;
                        const state = writable._state;
                        if (state === 'erroring') {
                            throw writable._storedError;
                        }
                        return TransformStreamDefaultControllerPerformTransform(controller, chunk);
                    });
                }
                return TransformStreamDefaultControllerPerformTransform(controller, chunk);
            }
            function TransformStreamDefaultSinkAbortAlgorithm(stream, reason) {
                const controller = stream._transformStreamController;
                if (controller._finishPromise !== void 0) {
                    return controller._finishPromise;
                }
                const readable = stream._readable;
                controller._finishPromise = newPromise((resolve, reject) => {
                    controller._finishPromise_resolve = resolve;
                    controller._finishPromise_reject = reject;
                });
                const cancelPromise = controller._cancelAlgorithm(reason);
                TransformStreamDefaultControllerClearAlgorithms(controller);
                uponPromise(
                    cancelPromise,
                    () => {
                        if (readable._state === 'errored') {
                            defaultControllerFinishPromiseReject(controller, readable._storedError);
                        } else {
                            ReadableStreamDefaultControllerError(
                                readable._readableStreamController,
                                reason,
                            );
                            defaultControllerFinishPromiseResolve(controller);
                        }
                        return null;
                    },
                    (r2) => {
                        ReadableStreamDefaultControllerError(
                            readable._readableStreamController,
                            r2,
                        );
                        defaultControllerFinishPromiseReject(controller, r2);
                        return null;
                    },
                );
                return controller._finishPromise;
            }
            function TransformStreamDefaultSinkCloseAlgorithm(stream) {
                const controller = stream._transformStreamController;
                if (controller._finishPromise !== void 0) {
                    return controller._finishPromise;
                }
                const readable = stream._readable;
                controller._finishPromise = newPromise((resolve, reject) => {
                    controller._finishPromise_resolve = resolve;
                    controller._finishPromise_reject = reject;
                });
                const flushPromise = controller._flushAlgorithm();
                TransformStreamDefaultControllerClearAlgorithms(controller);
                uponPromise(
                    flushPromise,
                    () => {
                        if (readable._state === 'errored') {
                            defaultControllerFinishPromiseReject(controller, readable._storedError);
                        } else {
                            ReadableStreamDefaultControllerClose(
                                readable._readableStreamController,
                            );
                            defaultControllerFinishPromiseResolve(controller);
                        }
                        return null;
                    },
                    (r2) => {
                        ReadableStreamDefaultControllerError(
                            readable._readableStreamController,
                            r2,
                        );
                        defaultControllerFinishPromiseReject(controller, r2);
                        return null;
                    },
                );
                return controller._finishPromise;
            }
            function TransformStreamDefaultSourcePullAlgorithm(stream) {
                TransformStreamSetBackpressure(stream, false);
                return stream._backpressureChangePromise;
            }
            function TransformStreamDefaultSourceCancelAlgorithm(stream, reason) {
                const controller = stream._transformStreamController;
                if (controller._finishPromise !== void 0) {
                    return controller._finishPromise;
                }
                const writable = stream._writable;
                controller._finishPromise = newPromise((resolve, reject) => {
                    controller._finishPromise_resolve = resolve;
                    controller._finishPromise_reject = reject;
                });
                const cancelPromise = controller._cancelAlgorithm(reason);
                TransformStreamDefaultControllerClearAlgorithms(controller);
                uponPromise(
                    cancelPromise,
                    () => {
                        if (writable._state === 'errored') {
                            defaultControllerFinishPromiseReject(controller, writable._storedError);
                        } else {
                            WritableStreamDefaultControllerErrorIfNeeded(
                                writable._writableStreamController,
                                reason,
                            );
                            TransformStreamUnblockWrite(stream);
                            defaultControllerFinishPromiseResolve(controller);
                        }
                        return null;
                    },
                    (r2) => {
                        WritableStreamDefaultControllerErrorIfNeeded(
                            writable._writableStreamController,
                            r2,
                        );
                        TransformStreamUnblockWrite(stream);
                        defaultControllerFinishPromiseReject(controller, r2);
                        return null;
                    },
                );
                return controller._finishPromise;
            }
            function defaultControllerBrandCheckException(name) {
                return new TypeError(
                    `TransformStreamDefaultController.prototype.${name} can only be used on a TransformStreamDefaultController`,
                );
            }
            function defaultControllerFinishPromiseResolve(controller) {
                if (controller._finishPromise_resolve === void 0) {
                    return;
                }
                controller._finishPromise_resolve();
                controller._finishPromise_resolve = void 0;
                controller._finishPromise_reject = void 0;
            }
            function defaultControllerFinishPromiseReject(controller, reason) {
                if (controller._finishPromise_reject === void 0) {
                    return;
                }
                setPromiseIsHandledToTrue(controller._finishPromise);
                controller._finishPromise_reject(reason);
                controller._finishPromise_resolve = void 0;
                controller._finishPromise_reject = void 0;
            }
            function streamBrandCheckException(name) {
                return new TypeError(
                    `TransformStream.prototype.${name} can only be used on a TransformStream`,
                );
            }
            exports3.ByteLengthQueuingStrategy = ByteLengthQueuingStrategy;
            exports3.CountQueuingStrategy = CountQueuingStrategy;
            exports3.ReadableByteStreamController = ReadableByteStreamController;
            exports3.ReadableStream = ReadableStream2;
            exports3.ReadableStreamBYOBReader = ReadableStreamBYOBReader;
            exports3.ReadableStreamBYOBRequest = ReadableStreamBYOBRequest;
            exports3.ReadableStreamDefaultController = ReadableStreamDefaultController;
            exports3.ReadableStreamDefaultReader = ReadableStreamDefaultReader;
            exports3.TransformStream = TransformStream;
            exports3.TransformStreamDefaultController = TransformStreamDefaultController;
            exports3.WritableStream = WritableStream;
            exports3.WritableStreamDefaultController = WritableStreamDefaultController;
            exports3.WritableStreamDefaultWriter = WritableStreamDefaultWriter;
        });
    },
});

// node_modules/fetch-blob/streams.cjs
var require_streams = __commonJS({
    'node_modules/fetch-blob/streams.cjs'() {
        var POOL_SIZE2 = 65536;
        if (!globalThis.ReadableStream) {
            try {
                const process7 = require('process');
                const { emitWarning } = process7;
                try {
                    process7.emitWarning = () => {};
                    Object.assign(globalThis, require('stream/web'));
                    process7.emitWarning = emitWarning;
                } catch (error) {
                    process7.emitWarning = emitWarning;
                    throw error;
                }
            } catch (error) {
                Object.assign(globalThis, require_ponyfill_es2018());
            }
        }
        try {
            const { Blob: Blob3 } = require('buffer');
            if (Blob3 && !Blob3.prototype.stream) {
                Blob3.prototype.stream = function name(params) {
                    let position = 0;
                    const blob = this;
                    return new ReadableStream({
                        type: 'bytes',
                        async pull(ctrl) {
                            const chunk = blob.slice(
                                position,
                                Math.min(blob.size, position + POOL_SIZE2),
                            );
                            const buffer = await chunk.arrayBuffer();
                            position += buffer.byteLength;
                            ctrl.enqueue(new Uint8Array(buffer));
                            if (position === blob.size) {
                                ctrl.close();
                            }
                        },
                    });
                };
            }
        } catch (error) {}
    },
});

// node_modules/fetch-blob/index.js
async function* toIterator(parts, clone3 = true) {
    for (const part of parts) {
        if ('stream' in part) {
            yield* /** @type {AsyncIterableIterator<Uint8Array>} */
            part.stream();
        } else if (ArrayBuffer.isView(part)) {
            if (clone3) {
                let position = part.byteOffset;
                const end2 = part.byteOffset + part.byteLength;
                while (position !== end2) {
                    const size = Math.min(end2 - position, POOL_SIZE);
                    const chunk = part.buffer.slice(position, position + size);
                    position += chunk.byteLength;
                    yield new Uint8Array(chunk);
                }
            } else {
                yield part;
            }
        } else {
            let position = 0,
                b =
                    /** @type {Blob} */
                    part;
            while (position !== b.size) {
                const chunk = b.slice(position, Math.min(b.size, position + POOL_SIZE));
                const buffer = await chunk.arrayBuffer();
                position += buffer.byteLength;
                yield new Uint8Array(buffer);
            }
        }
    }
}
var import_streams, POOL_SIZE, _parts, _type, _size, _endings, _a, _Blob, Blob2, fetch_blob_default;
var init_fetch_blob = __esm({
    'node_modules/fetch-blob/index.js'() {
        import_streams = __toESM(require_streams(), 1);
        POOL_SIZE = 65536;
        _Blob =
            ((_a = class {
                /**
                 * The Blob() constructor returns a new Blob object. The content
                 * of the blob consists of the concatenation of the values given
                 * in the parameter array.
                 *
                 * @param {*} blobParts
                 * @param {{ type?: string, endings?: string }} [options]
                 */
                constructor(blobParts = [], options2 = {}) {
                    /** @type {Array.<(Blob|Uint8Array)>} */
                    __privateAdd(this, _parts, []);
                    __privateAdd(this, _type, '');
                    __privateAdd(this, _size, 0);
                    __privateAdd(this, _endings, 'transparent');
                    if (typeof blobParts !== 'object' || blobParts === null) {
                        throw new TypeError(
                            "Failed to construct 'Blob': The provided value cannot be converted to a sequence.",
                        );
                    }
                    if (typeof blobParts[Symbol.iterator] !== 'function') {
                        throw new TypeError(
                            "Failed to construct 'Blob': The object must have a callable @@iterator property.",
                        );
                    }
                    if (typeof options2 !== 'object' && typeof options2 !== 'function') {
                        throw new TypeError(
                            "Failed to construct 'Blob': parameter 2 cannot convert to dictionary.",
                        );
                    }
                    if (options2 === null) options2 = {};
                    const encoder = new TextEncoder();
                    for (const element of blobParts) {
                        let part;
                        if (ArrayBuffer.isView(element)) {
                            part = new Uint8Array(
                                element.buffer.slice(
                                    element.byteOffset,
                                    element.byteOffset + element.byteLength,
                                ),
                            );
                        } else if (element instanceof ArrayBuffer) {
                            part = new Uint8Array(element.slice(0));
                        } else if (element instanceof _a) {
                            part = element;
                        } else {
                            part = encoder.encode(`${element}`);
                        }
                        __privateSet(
                            this,
                            _size,
                            __privateGet(this, _size) +
                                (ArrayBuffer.isView(part) ? part.byteLength : part.size),
                        );
                        __privateGet(this, _parts).push(part);
                    }
                    __privateSet(
                        this,
                        _endings,
                        `${options2.endings === void 0 ? 'transparent' : options2.endings}`,
                    );
                    const type = options2.type === void 0 ? '' : String(options2.type);
                    __privateSet(this, _type, /^[\x20-\x7E]*$/.test(type) ? type : '');
                }
                /**
                 * The Blob interface's size property returns the
                 * size of the Blob in bytes.
                 */
                get size() {
                    return __privateGet(this, _size);
                }
                /**
                 * The type property of a Blob object returns the MIME type of the file.
                 */
                get type() {
                    return __privateGet(this, _type);
                }
                /**
                 * The text() method in the Blob interface returns a Promise
                 * that resolves with a string containing the contents of
                 * the blob, interpreted as UTF-8.
                 *
                 * @return {Promise<string>}
                 */
                async text() {
                    const decoder = new TextDecoder();
                    let str = '';
                    for await (const part of toIterator(__privateGet(this, _parts), false)) {
                        str += decoder.decode(part, { stream: true });
                    }
                    str += decoder.decode();
                    return str;
                }
                /**
                 * The arrayBuffer() method in the Blob interface returns a
                 * Promise that resolves with the contents of the blob as
                 * binary data contained in an ArrayBuffer.
                 *
                 * @return {Promise<ArrayBuffer>}
                 */
                async arrayBuffer() {
                    const data2 = new Uint8Array(this.size);
                    let offset = 0;
                    for await (const chunk of toIterator(__privateGet(this, _parts), false)) {
                        data2.set(chunk, offset);
                        offset += chunk.length;
                    }
                    return data2.buffer;
                }
                stream() {
                    const it = toIterator(__privateGet(this, _parts), true);
                    return new globalThis.ReadableStream({
                        // @ts-ignore
                        type: 'bytes',
                        async pull(ctrl) {
                            const chunk = await it.next();
                            chunk.done ? ctrl.close() : ctrl.enqueue(chunk.value);
                        },
                        async cancel() {
                            await it.return();
                        },
                    });
                }
                /**
                 * The Blob interface's slice() method creates and returns a
                 * new Blob object which contains data from a subset of the
                 * blob on which it's called.
                 *
                 * @param {number} [start]
                 * @param {number} [end]
                 * @param {string} [type]
                 */
                slice(start = 0, end2 = this.size, type = '') {
                    const { size } = this;
                    let relativeStart =
                        start < 0 ? Math.max(size + start, 0) : Math.min(start, size);
                    let relativeEnd = end2 < 0 ? Math.max(size + end2, 0) : Math.min(end2, size);
                    const span = Math.max(relativeEnd - relativeStart, 0);
                    const parts = __privateGet(this, _parts);
                    const blobParts = [];
                    let added = 0;
                    for (const part of parts) {
                        if (added >= span) {
                            break;
                        }
                        const size2 = ArrayBuffer.isView(part) ? part.byteLength : part.size;
                        if (relativeStart && size2 <= relativeStart) {
                            relativeStart -= size2;
                            relativeEnd -= size2;
                        } else {
                            let chunk;
                            if (ArrayBuffer.isView(part)) {
                                chunk = part.subarray(relativeStart, Math.min(size2, relativeEnd));
                                added += chunk.byteLength;
                            } else {
                                chunk = part.slice(relativeStart, Math.min(size2, relativeEnd));
                                added += chunk.size;
                            }
                            relativeEnd -= size2;
                            blobParts.push(chunk);
                            relativeStart = 0;
                        }
                    }
                    const blob = new _a([], { type: String(type).toLowerCase() });
                    __privateSet(blob, _size, span);
                    __privateSet(blob, _parts, blobParts);
                    return blob;
                }
                get [Symbol.toStringTag]() {
                    return 'Blob';
                }
                static [Symbol.hasInstance](object) {
                    return (
                        object &&
                        typeof object === 'object' &&
                        typeof object.constructor === 'function' &&
                        (typeof object.stream === 'function' ||
                            typeof object.arrayBuffer === 'function') &&
                        /^(Blob|File)$/.test(object[Symbol.toStringTag])
                    );
                }
            }),
            (_parts = new WeakMap()),
            (_type = new WeakMap()),
            (_size = new WeakMap()),
            (_endings = new WeakMap()),
            _a);
        Object.defineProperties(_Blob.prototype, {
            size: { enumerable: true },
            type: { enumerable: true },
            slice: { enumerable: true },
        });
        Blob2 = _Blob;
        fetch_blob_default = Blob2;
    },
});

// node_modules/fetch-blob/file.js
var _lastModified, _name, _a2, _File, File2, file_default;
var init_file = __esm({
    'node_modules/fetch-blob/file.js'() {
        init_fetch_blob();
        _File =
            ((_a2 = class extends fetch_blob_default {
                /**
                 * @param {*[]} fileBits
                 * @param {string} fileName
                 * @param {{lastModified?: number, type?: string}} options
                 */
                // @ts-ignore
                constructor(fileBits, fileName, options2 = {}) {
                    if (arguments.length < 2) {
                        throw new TypeError(
                            `Failed to construct 'File': 2 arguments required, but only ${arguments.length} present.`,
                        );
                    }
                    super(fileBits, options2);
                    __privateAdd(this, _lastModified, 0);
                    __privateAdd(this, _name, '');
                    if (options2 === null) options2 = {};
                    const lastModified =
                        options2.lastModified === void 0
                            ? Date.now()
                            : Number(options2.lastModified);
                    if (!Number.isNaN(lastModified)) {
                        __privateSet(this, _lastModified, lastModified);
                    }
                    __privateSet(this, _name, String(fileName));
                }
                get name() {
                    return __privateGet(this, _name);
                }
                get lastModified() {
                    return __privateGet(this, _lastModified);
                }
                get [Symbol.toStringTag]() {
                    return 'File';
                }
                static [Symbol.hasInstance](object) {
                    return (
                        !!object &&
                        object instanceof fetch_blob_default &&
                        /^(File)$/.test(object[Symbol.toStringTag])
                    );
                }
            }),
            (_lastModified = new WeakMap()),
            (_name = new WeakMap()),
            _a2);
        File2 = _File;
        file_default = File2;
    },
});

// node_modules/formdata-polyfill/esm.min.js
function formDataToBlob(F2, B = fetch_blob_default) {
    var b = `${r()}${r()}`.replace(/\./g, '').slice(-28).padStart(32, '-'),
        c = [],
        p = `--${b}\r
Content-Disposition: form-data; name="`;
    F2.forEach((v, n) =>
        typeof v == 'string'
            ? c.push(
                  p +
                      e(n) +
                      `"\r
\r
${v.replace(/\r(?!\n)|(?<!\r)\n/g, '\r\n')}\r
`,
              )
            : c.push(
                  p +
                      e(n) +
                      `"; filename="${e(v.name, 1)}"\r
Content-Type: ${v.type || 'application/octet-stream'}\r
\r
`,
                  v,
                  '\r\n',
              ),
    );
    c.push(`--${b}--`);
    return new B(c, { type: 'multipart/form-data; boundary=' + b });
}
var t, i, h, r, m, f, e, x, _d, _a3, FormData;
var init_esm_min = __esm({
    'node_modules/formdata-polyfill/esm.min.js'() {
        init_fetch_blob();
        init_file();
        ({ toStringTag: t, iterator: i, hasInstance: h } = Symbol);
        r = Math.random;
        m = 'append,set,get,getAll,delete,keys,values,entries,forEach,constructor'.split(',');
        f = (a, b, c) => (
            (a += ''),
            /^(Blob|File)$/.test(b && b[t])
                ? [
                      ((c = c !== void 0 ? c + '' : b[t] == 'File' ? b.name : 'blob'), a),
                      b.name !== c || b[t] == 'blob' ? new file_default([b], c, b) : b,
                  ]
                : [a, b + '']
        );
        e = (c, f3) =>
            (f3 ? c : c.replace(/\r?\n|\r/g, '\r\n'))
                .replace(/\n/g, '%0A')
                .replace(/\r/g, '%0D')
                .replace(/"/g, '%22');
        x = (n, a, e2) => {
            if (a.length < e2) {
                throw new TypeError(
                    `Failed to execute '${n}' on 'FormData': ${e2} arguments required, but only ${a.length} present.`,
                );
            }
        };
        FormData =
            ((_a3 = class {
                constructor(...a) {
                    __privateAdd(this, _d, []);
                    if (a.length)
                        throw new TypeError(
                            `Failed to construct 'FormData': parameter 1 is not of type 'HTMLFormElement'.`,
                        );
                }
                get [t]() {
                    return 'FormData';
                }
                [i]() {
                    return this.entries();
                }
                static [h](o) {
                    return (
                        o &&
                        typeof o === 'object' &&
                        o[t] === 'FormData' &&
                        !m.some((m2) => typeof o[m2] != 'function')
                    );
                }
                append(...a) {
                    x('append', arguments, 2);
                    __privateGet(this, _d).push(f(...a));
                }
                delete(a) {
                    x('delete', arguments, 1);
                    a += '';
                    __privateSet(
                        this,
                        _d,
                        __privateGet(this, _d).filter(([b]) => b !== a),
                    );
                }
                get(a) {
                    x('get', arguments, 1);
                    a += '';
                    for (var b = __privateGet(this, _d), l = b.length, c = 0; c < l; c++)
                        if (b[c][0] === a) return b[c][1];
                    return null;
                }
                getAll(a, b) {
                    x('getAll', arguments, 1);
                    b = [];
                    a += '';
                    __privateGet(this, _d).forEach((c) => c[0] === a && b.push(c[1]));
                    return b;
                }
                has(a) {
                    x('has', arguments, 1);
                    a += '';
                    return __privateGet(this, _d).some((b) => b[0] === a);
                }
                forEach(a, b) {
                    x('forEach', arguments, 1);
                    for (var [c, d] of this) a.call(b, d, c, this);
                }
                set(...a) {
                    x('set', arguments, 2);
                    var b = [],
                        c = true;
                    a = f(...a);
                    __privateGet(this, _d).forEach((d) => {
                        d[0] === a[0] ? c && (c = !b.push(a)) : b.push(d);
                    });
                    c && b.push(a);
                    __privateSet(this, _d, b);
                }
                *entries() {
                    yield* __privateGet(this, _d);
                }
                *keys() {
                    for (var [a] of this) yield a;
                }
                *values() {
                    for (var [, a] of this) yield a;
                }
            }),
            (_d = new WeakMap()),
            _a3);
    },
});

// node_modules/node-domexception/index.js
var require_node_domexception = __commonJS({
    'node_modules/node-domexception/index.js'(exports2, module2) {
        if (!globalThis.DOMException) {
            try {
                const { MessageChannel } = require('worker_threads'),
                    port = new MessageChannel().port1,
                    ab = new ArrayBuffer();
                port.postMessage(ab, [ab, ab]);
            } catch (err) {
                err.constructor.name === 'DOMException' &&
                    (globalThis.DOMException = err.constructor);
            }
        }
        module2.exports = globalThis.DOMException;
    },
});

// node_modules/fetch-blob/from.js
var import_node_fs3, import_node_domexception, stat;
var init_from = __esm({
    'node_modules/fetch-blob/from.js'() {
        import_node_fs3 = require('fs');
        import_node_domexception = __toESM(require_node_domexception(), 1);
        init_file();
        init_fetch_blob();
        ({ stat } = import_node_fs3.promises);
    },
});

// node_modules/node-fetch/src/utils/multipart-parser.js
var multipart_parser_exports = {};
__export(multipart_parser_exports, {
    toFormData: () => toFormData,
});
function _fileName(headerValue) {
    const m2 = headerValue.match(/\bfilename=("(.*?)"|([^()<>@,;:\\"/[\]?={}\s\t]+))($|;\s)/i);
    if (!m2) {
        return;
    }
    const match = m2[2] || m2[3] || '';
    let filename = match.slice(match.lastIndexOf('\\') + 1);
    filename = filename.replace(/%22/g, '"');
    filename = filename.replace(/&#(\d{4});/g, (m3, code) => {
        return String.fromCharCode(code);
    });
    return filename;
}
async function toFormData(Body2, ct) {
    if (!/multipart/i.test(ct)) {
        throw new TypeError('Failed to fetch');
    }
    const m2 = ct.match(/boundary=(?:"([^"]+)"|([^;]+))/i);
    if (!m2) {
        throw new TypeError('no or bad content-type header, no multipart boundary');
    }
    const parser = new MultipartParser(m2[1] || m2[2]);
    let headerField;
    let headerValue;
    let entryValue;
    let entryName;
    let contentType;
    let filename;
    const entryChunks = [];
    const formData = new FormData();
    const onPartData = (ui8a) => {
        entryValue += decoder.decode(ui8a, { stream: true });
    };
    const appendToFile = (ui8a) => {
        entryChunks.push(ui8a);
    };
    const appendFileToFormData = () => {
        const file = new file_default(entryChunks, filename, { type: contentType });
        formData.append(entryName, file);
    };
    const appendEntryToFormData = () => {
        formData.append(entryName, entryValue);
    };
    const decoder = new TextDecoder('utf-8');
    decoder.decode();
    parser.onPartBegin = function () {
        parser.onPartData = onPartData;
        parser.onPartEnd = appendEntryToFormData;
        headerField = '';
        headerValue = '';
        entryValue = '';
        entryName = '';
        contentType = '';
        filename = null;
        entryChunks.length = 0;
    };
    parser.onHeaderField = function (ui8a) {
        headerField += decoder.decode(ui8a, { stream: true });
    };
    parser.onHeaderValue = function (ui8a) {
        headerValue += decoder.decode(ui8a, { stream: true });
    };
    parser.onHeaderEnd = function () {
        headerValue += decoder.decode();
        headerField = headerField.toLowerCase();
        if (headerField === 'content-disposition') {
            const m3 = headerValue.match(/\bname=("([^"]*)"|([^()<>@,;:\\"/[\]?={}\s\t]+))/i);
            if (m3) {
                entryName = m3[2] || m3[3] || '';
            }
            filename = _fileName(headerValue);
            if (filename) {
                parser.onPartData = appendToFile;
                parser.onPartEnd = appendFileToFormData;
            }
        } else if (headerField === 'content-type') {
            contentType = headerValue;
        }
        headerValue = '';
        headerField = '';
    };
    for await (const chunk of Body2) {
        parser.write(chunk);
    }
    parser.end();
    return formData;
}
var s, S, f2, F, LF, CR, SPACE, HYPHEN, COLON, A, Z, lower, noop2, MultipartParser;
var init_multipart_parser = __esm({
    'node_modules/node-fetch/src/utils/multipart-parser.js'() {
        init_from();
        init_esm_min();
        s = 0;
        S = {
            START_BOUNDARY: s++,
            HEADER_FIELD_START: s++,
            HEADER_FIELD: s++,
            HEADER_VALUE_START: s++,
            HEADER_VALUE: s++,
            HEADER_VALUE_ALMOST_DONE: s++,
            HEADERS_ALMOST_DONE: s++,
            PART_DATA_START: s++,
            PART_DATA: s++,
            END: s++,
        };
        f2 = 1;
        F = {
            PART_BOUNDARY: f2,
            LAST_BOUNDARY: (f2 *= 2),
        };
        LF = 10;
        CR = 13;
        SPACE = 32;
        HYPHEN = 45;
        COLON = 58;
        A = 97;
        Z = 122;
        lower = (c) => c | 32;
        noop2 = () => {};
        MultipartParser = class {
            /**
             * @param {string} boundary
             */
            constructor(boundary) {
                this.index = 0;
                this.flags = 0;
                this.onHeaderEnd = noop2;
                this.onHeaderField = noop2;
                this.onHeadersEnd = noop2;
                this.onHeaderValue = noop2;
                this.onPartBegin = noop2;
                this.onPartData = noop2;
                this.onPartEnd = noop2;
                this.boundaryChars = {};
                boundary = '\r\n--' + boundary;
                const ui8a = new Uint8Array(boundary.length);
                for (let i2 = 0; i2 < boundary.length; i2++) {
                    ui8a[i2] = boundary.charCodeAt(i2);
                    this.boundaryChars[ui8a[i2]] = true;
                }
                this.boundary = ui8a;
                this.lookbehind = new Uint8Array(this.boundary.length + 8);
                this.state = S.START_BOUNDARY;
            }
            /**
             * @param {Uint8Array} data
             */
            write(data2) {
                let i2 = 0;
                const length_ = data2.length;
                let previousIndex = this.index;
                let { lookbehind, boundary, boundaryChars, index: index2, state, flags } = this;
                const boundaryLength = this.boundary.length;
                const boundaryEnd = boundaryLength - 1;
                const bufferLength = data2.length;
                let c;
                let cl;
                const mark = (name) => {
                    this[name + 'Mark'] = i2;
                };
                const clear = (name) => {
                    delete this[name + 'Mark'];
                };
                const callback = (callbackSymbol, start, end2, ui8a) => {
                    if (start === void 0 || start !== end2) {
                        this[callbackSymbol](ui8a && ui8a.subarray(start, end2));
                    }
                };
                const dataCallback = (name, clear2) => {
                    const markSymbol = name + 'Mark';
                    if (!(markSymbol in this)) {
                        return;
                    }
                    if (clear2) {
                        callback(name, this[markSymbol], i2, data2);
                        delete this[markSymbol];
                    } else {
                        callback(name, this[markSymbol], data2.length, data2);
                        this[markSymbol] = 0;
                    }
                };
                for (i2 = 0; i2 < length_; i2++) {
                    c = data2[i2];
                    switch (state) {
                        case S.START_BOUNDARY:
                            if (index2 === boundary.length - 2) {
                                if (c === HYPHEN) {
                                    flags |= F.LAST_BOUNDARY;
                                } else if (c !== CR) {
                                    return;
                                }
                                index2++;
                                break;
                            } else if (index2 - 1 === boundary.length - 2) {
                                if (flags & F.LAST_BOUNDARY && c === HYPHEN) {
                                    state = S.END;
                                    flags = 0;
                                } else if (!(flags & F.LAST_BOUNDARY) && c === LF) {
                                    index2 = 0;
                                    callback('onPartBegin');
                                    state = S.HEADER_FIELD_START;
                                } else {
                                    return;
                                }
                                break;
                            }
                            if (c !== boundary[index2 + 2]) {
                                index2 = -2;
                            }
                            if (c === boundary[index2 + 2]) {
                                index2++;
                            }
                            break;
                        case S.HEADER_FIELD_START:
                            state = S.HEADER_FIELD;
                            mark('onHeaderField');
                            index2 = 0;
                        case S.HEADER_FIELD:
                            if (c === CR) {
                                clear('onHeaderField');
                                state = S.HEADERS_ALMOST_DONE;
                                break;
                            }
                            index2++;
                            if (c === HYPHEN) {
                                break;
                            }
                            if (c === COLON) {
                                if (index2 === 1) {
                                    return;
                                }
                                dataCallback('onHeaderField', true);
                                state = S.HEADER_VALUE_START;
                                break;
                            }
                            cl = lower(c);
                            if (cl < A || cl > Z) {
                                return;
                            }
                            break;
                        case S.HEADER_VALUE_START:
                            if (c === SPACE) {
                                break;
                            }
                            mark('onHeaderValue');
                            state = S.HEADER_VALUE;
                        case S.HEADER_VALUE:
                            if (c === CR) {
                                dataCallback('onHeaderValue', true);
                                callback('onHeaderEnd');
                                state = S.HEADER_VALUE_ALMOST_DONE;
                            }
                            break;
                        case S.HEADER_VALUE_ALMOST_DONE:
                            if (c !== LF) {
                                return;
                            }
                            state = S.HEADER_FIELD_START;
                            break;
                        case S.HEADERS_ALMOST_DONE:
                            if (c !== LF) {
                                return;
                            }
                            callback('onHeadersEnd');
                            state = S.PART_DATA_START;
                            break;
                        case S.PART_DATA_START:
                            state = S.PART_DATA;
                            mark('onPartData');
                        case S.PART_DATA:
                            previousIndex = index2;
                            if (index2 === 0) {
                                i2 += boundaryEnd;
                                while (i2 < bufferLength && !(data2[i2] in boundaryChars)) {
                                    i2 += boundaryLength;
                                }
                                i2 -= boundaryEnd;
                                c = data2[i2];
                            }
                            if (index2 < boundary.length) {
                                if (boundary[index2] === c) {
                                    if (index2 === 0) {
                                        dataCallback('onPartData', true);
                                    }
                                    index2++;
                                } else {
                                    index2 = 0;
                                }
                            } else if (index2 === boundary.length) {
                                index2++;
                                if (c === CR) {
                                    flags |= F.PART_BOUNDARY;
                                } else if (c === HYPHEN) {
                                    flags |= F.LAST_BOUNDARY;
                                } else {
                                    index2 = 0;
                                }
                            } else if (index2 - 1 === boundary.length) {
                                if (flags & F.PART_BOUNDARY) {
                                    index2 = 0;
                                    if (c === LF) {
                                        flags &= ~F.PART_BOUNDARY;
                                        callback('onPartEnd');
                                        callback('onPartBegin');
                                        state = S.HEADER_FIELD_START;
                                        break;
                                    }
                                } else if (flags & F.LAST_BOUNDARY) {
                                    if (c === HYPHEN) {
                                        callback('onPartEnd');
                                        state = S.END;
                                        flags = 0;
                                    } else {
                                        index2 = 0;
                                    }
                                } else {
                                    index2 = 0;
                                }
                            }
                            if (index2 > 0) {
                                lookbehind[index2 - 1] = c;
                            } else if (previousIndex > 0) {
                                const _lookbehind = new Uint8Array(
                                    lookbehind.buffer,
                                    lookbehind.byteOffset,
                                    lookbehind.byteLength,
                                );
                                callback('onPartData', 0, previousIndex, _lookbehind);
                                previousIndex = 0;
                                mark('onPartData');
                                i2--;
                            }
                            break;
                        case S.END:
                            break;
                        default:
                            throw new Error(`Unexpected state entered: ${state}`);
                    }
                }
                dataCallback('onHeaderField');
                dataCallback('onHeaderValue');
                dataCallback('onPartData');
                this.index = index2;
                this.state = state;
                this.flags = flags;
            }
            end() {
                if (
                    (this.state === S.HEADER_FIELD_START && this.index === 0) ||
                    (this.state === S.PART_DATA && this.index === this.boundary.length)
                ) {
                    this.onPartEnd();
                } else if (this.state !== S.END) {
                    throw new Error('MultipartParser.end(): stream ended unexpectedly');
                }
            }
        };
    },
});

// node_modules/css-what/lib/commonjs/types.js
var require_types = __commonJS({
    'node_modules/css-what/lib/commonjs/types.js'(exports2) {
        'use strict';
        Object.defineProperty(exports2, '__esModule', { value: true });
        exports2.AttributeAction = exports2.IgnoreCaseMode = exports2.SelectorType = void 0;
        var SelectorType5;
        (function (SelectorType6) {
            SelectorType6['Attribute'] = 'attribute';
            SelectorType6['Pseudo'] = 'pseudo';
            SelectorType6['PseudoElement'] = 'pseudo-element';
            SelectorType6['Tag'] = 'tag';
            SelectorType6['Universal'] = 'universal';
            SelectorType6['Adjacent'] = 'adjacent';
            SelectorType6['Child'] = 'child';
            SelectorType6['Descendant'] = 'descendant';
            SelectorType6['Parent'] = 'parent';
            SelectorType6['Sibling'] = 'sibling';
            SelectorType6['ColumnCombinator'] = 'column-combinator';
        })((SelectorType5 = exports2.SelectorType || (exports2.SelectorType = {})));
        exports2.IgnoreCaseMode = {
            Unknown: null,
            QuirksMode: 'quirks',
            IgnoreCase: true,
            CaseSensitive: false,
        };
        var AttributeAction2;
        (function (AttributeAction3) {
            AttributeAction3['Any'] = 'any';
            AttributeAction3['Element'] = 'element';
            AttributeAction3['End'] = 'end';
            AttributeAction3['Equals'] = 'equals';
            AttributeAction3['Exists'] = 'exists';
            AttributeAction3['Hyphen'] = 'hyphen';
            AttributeAction3['Not'] = 'not';
            AttributeAction3['Start'] = 'start';
        })((AttributeAction2 = exports2.AttributeAction || (exports2.AttributeAction = {})));
    },
});

// node_modules/css-what/lib/commonjs/parse.js
var require_parse2 = __commonJS({
    'node_modules/css-what/lib/commonjs/parse.js'(exports2) {
        'use strict';
        Object.defineProperty(exports2, '__esModule', { value: true });
        exports2.parse = exports2.isTraversal = void 0;
        var types_1 = require_types();
        var reName = /^[^\\#]?(?:\\(?:[\da-f]{1,6}\s?|.)|[\w\-\u00b0-\uFFFF])+/;
        var reEscape = /\\([\da-f]{1,6}\s?|(\s)|.)/gi;
        var actionTypes = /* @__PURE__ */ new Map([
            [126, types_1.AttributeAction.Element],
            [94, types_1.AttributeAction.Start],
            [36, types_1.AttributeAction.End],
            [42, types_1.AttributeAction.Any],
            [33, types_1.AttributeAction.Not],
            [124, types_1.AttributeAction.Hyphen],
        ]);
        var unpackPseudos = /* @__PURE__ */ new Set([
            'has',
            'not',
            'matches',
            'is',
            'where',
            'host',
            'host-context',
        ]);
        function isTraversal3(selector) {
            switch (selector.type) {
                case types_1.SelectorType.Adjacent:
                case types_1.SelectorType.Child:
                case types_1.SelectorType.Descendant:
                case types_1.SelectorType.Parent:
                case types_1.SelectorType.Sibling:
                case types_1.SelectorType.ColumnCombinator:
                    return true;
                default:
                    return false;
            }
        }
        exports2.isTraversal = isTraversal3;
        var stripQuotesFromPseudos = /* @__PURE__ */ new Set(['contains', 'icontains']);
        function funescape(_, escaped, escapedWhitespace) {
            var high = parseInt(escaped, 16) - 65536;
            return high !== high || escapedWhitespace
                ? escaped
                : high < 0
                  ? // BMP codepoint
                    String.fromCharCode(high + 65536)
                  : // Supplemental Plane codepoint (surrogate pair)
                    String.fromCharCode((high >> 10) | 55296, (high & 1023) | 56320);
        }
        function unescapeCSS(str) {
            return str.replace(reEscape, funescape);
        }
        function isQuote(c) {
            return c === 39 || c === 34;
        }
        function isWhitespace3(c) {
            return c === 32 || c === 9 || c === 10 || c === 12 || c === 13;
        }
        function parse8(selector) {
            var subselects2 = [];
            var endIndex = parseSelector(subselects2, ''.concat(selector), 0);
            if (endIndex < selector.length) {
                throw new Error('Unmatched selector: '.concat(selector.slice(endIndex)));
            }
            return subselects2;
        }
        exports2.parse = parse8;
        function parseSelector(subselects2, selector, selectorIndex) {
            var tokens = [];
            function getName2(offset) {
                var match = selector.slice(selectorIndex + offset).match(reName);
                if (!match) {
                    throw new Error('Expected name, found '.concat(selector.slice(selectorIndex)));
                }
                var name = match[0];
                selectorIndex += offset + name.length;
                return unescapeCSS(name);
            }
            function stripWhitespace(offset) {
                selectorIndex += offset;
                while (
                    selectorIndex < selector.length &&
                    isWhitespace3(selector.charCodeAt(selectorIndex))
                ) {
                    selectorIndex++;
                }
            }
            function readValueWithParenthesis() {
                selectorIndex += 1;
                var start = selectorIndex;
                var counter = 1;
                for (; counter > 0 && selectorIndex < selector.length; selectorIndex++) {
                    if (selector.charCodeAt(selectorIndex) === 40 && !isEscaped(selectorIndex)) {
                        counter++;
                    } else if (
                        selector.charCodeAt(selectorIndex) === 41 &&
                        !isEscaped(selectorIndex)
                    ) {
                        counter--;
                    }
                }
                if (counter) {
                    throw new Error('Parenthesis not matched');
                }
                return unescapeCSS(selector.slice(start, selectorIndex - 1));
            }
            function isEscaped(pos) {
                var slashCount = 0;
                while (selector.charCodeAt(--pos) === 92) slashCount++;
                return (slashCount & 1) === 1;
            }
            function ensureNotTraversal() {
                if (tokens.length > 0 && isTraversal3(tokens[tokens.length - 1])) {
                    throw new Error('Did not expect successive traversals.');
                }
            }
            function addTraversal(type) {
                if (
                    tokens.length > 0 &&
                    tokens[tokens.length - 1].type === types_1.SelectorType.Descendant
                ) {
                    tokens[tokens.length - 1].type = type;
                    return;
                }
                ensureNotTraversal();
                tokens.push({ type });
            }
            function addSpecialAttribute(name, action2) {
                tokens.push({
                    type: types_1.SelectorType.Attribute,
                    name,
                    action: action2,
                    value: getName2(1),
                    namespace: null,
                    ignoreCase: 'quirks',
                });
            }
            function finalizeSubselector() {
                if (
                    tokens.length &&
                    tokens[tokens.length - 1].type === types_1.SelectorType.Descendant
                ) {
                    tokens.pop();
                }
                if (tokens.length === 0) {
                    throw new Error('Empty sub-selector');
                }
                subselects2.push(tokens);
            }
            stripWhitespace(0);
            if (selector.length === selectorIndex) {
                return selectorIndex;
            }
            loop: while (selectorIndex < selector.length) {
                var firstChar = selector.charCodeAt(selectorIndex);
                switch (firstChar) {
                    case 32:
                    case 9:
                    case 10:
                    case 12:
                    case 13: {
                        if (
                            tokens.length === 0 ||
                            tokens[0].type !== types_1.SelectorType.Descendant
                        ) {
                            ensureNotTraversal();
                            tokens.push({ type: types_1.SelectorType.Descendant });
                        }
                        stripWhitespace(1);
                        break;
                    }
                    case 62: {
                        addTraversal(types_1.SelectorType.Child);
                        stripWhitespace(1);
                        break;
                    }
                    case 60: {
                        addTraversal(types_1.SelectorType.Parent);
                        stripWhitespace(1);
                        break;
                    }
                    case 126: {
                        addTraversal(types_1.SelectorType.Sibling);
                        stripWhitespace(1);
                        break;
                    }
                    case 43: {
                        addTraversal(types_1.SelectorType.Adjacent);
                        stripWhitespace(1);
                        break;
                    }
                    case 46: {
                        addSpecialAttribute('class', types_1.AttributeAction.Element);
                        break;
                    }
                    case 35: {
                        addSpecialAttribute('id', types_1.AttributeAction.Equals);
                        break;
                    }
                    case 91: {
                        stripWhitespace(1);
                        var name_1 = void 0;
                        var namespace = null;
                        if (selector.charCodeAt(selectorIndex) === 124) {
                            name_1 = getName2(1);
                        } else if (selector.startsWith('*|', selectorIndex)) {
                            namespace = '*';
                            name_1 = getName2(2);
                        } else {
                            name_1 = getName2(0);
                            if (
                                selector.charCodeAt(selectorIndex) === 124 &&
                                selector.charCodeAt(selectorIndex + 1) !== 61
                            ) {
                                namespace = name_1;
                                name_1 = getName2(1);
                            }
                        }
                        stripWhitespace(0);
                        var action = types_1.AttributeAction.Exists;
                        var possibleAction = actionTypes.get(selector.charCodeAt(selectorIndex));
                        if (possibleAction) {
                            action = possibleAction;
                            if (selector.charCodeAt(selectorIndex + 1) !== 61) {
                                throw new Error('Expected `=`');
                            }
                            stripWhitespace(2);
                        } else if (selector.charCodeAt(selectorIndex) === 61) {
                            action = types_1.AttributeAction.Equals;
                            stripWhitespace(1);
                        }
                        var value = '';
                        var ignoreCase = null;
                        if (action !== 'exists') {
                            if (isQuote(selector.charCodeAt(selectorIndex))) {
                                var quote = selector.charCodeAt(selectorIndex);
                                var sectionEnd = selectorIndex + 1;
                                while (
                                    sectionEnd < selector.length &&
                                    (selector.charCodeAt(sectionEnd) !== quote ||
                                        isEscaped(sectionEnd))
                                ) {
                                    sectionEnd += 1;
                                }
                                if (selector.charCodeAt(sectionEnd) !== quote) {
                                    throw new Error("Attribute value didn't end");
                                }
                                value = unescapeCSS(selector.slice(selectorIndex + 1, sectionEnd));
                                selectorIndex = sectionEnd + 1;
                            } else {
                                var valueStart = selectorIndex;
                                while (
                                    selectorIndex < selector.length &&
                                    ((!isWhitespace3(selector.charCodeAt(selectorIndex)) &&
                                        selector.charCodeAt(selectorIndex) !== 93) ||
                                        isEscaped(selectorIndex))
                                ) {
                                    selectorIndex += 1;
                                }
                                value = unescapeCSS(selector.slice(valueStart, selectorIndex));
                            }
                            stripWhitespace(0);
                            var forceIgnore = selector.charCodeAt(selectorIndex) | 32;
                            if (forceIgnore === 115) {
                                ignoreCase = false;
                                stripWhitespace(1);
                            } else if (forceIgnore === 105) {
                                ignoreCase = true;
                                stripWhitespace(1);
                            }
                        }
                        if (selector.charCodeAt(selectorIndex) !== 93) {
                            throw new Error("Attribute selector didn't terminate");
                        }
                        selectorIndex += 1;
                        var attributeSelector = {
                            type: types_1.SelectorType.Attribute,
                            name: name_1,
                            action,
                            value,
                            namespace,
                            ignoreCase,
                        };
                        tokens.push(attributeSelector);
                        break;
                    }
                    case 58: {
                        if (selector.charCodeAt(selectorIndex + 1) === 58) {
                            tokens.push({
                                type: types_1.SelectorType.PseudoElement,
                                name: getName2(2).toLowerCase(),
                                data:
                                    selector.charCodeAt(selectorIndex) === 40
                                        ? readValueWithParenthesis()
                                        : null,
                            });
                            continue;
                        }
                        var name_2 = getName2(1).toLowerCase();
                        var data2 = null;
                        if (selector.charCodeAt(selectorIndex) === 40) {
                            if (unpackPseudos.has(name_2)) {
                                if (isQuote(selector.charCodeAt(selectorIndex + 1))) {
                                    throw new Error(
                                        'Pseudo-selector '.concat(name_2, ' cannot be quoted'),
                                    );
                                }
                                data2 = [];
                                selectorIndex = parseSelector(data2, selector, selectorIndex + 1);
                                if (selector.charCodeAt(selectorIndex) !== 41) {
                                    throw new Error(
                                        'Missing closing parenthesis in :'
                                            .concat(name_2, ' (')
                                            .concat(selector, ')'),
                                    );
                                }
                                selectorIndex += 1;
                            } else {
                                data2 = readValueWithParenthesis();
                                if (stripQuotesFromPseudos.has(name_2)) {
                                    var quot = data2.charCodeAt(0);
                                    if (
                                        quot === data2.charCodeAt(data2.length - 1) &&
                                        isQuote(quot)
                                    ) {
                                        data2 = data2.slice(1, -1);
                                    }
                                }
                                data2 = unescapeCSS(data2);
                            }
                        }
                        tokens.push({
                            type: types_1.SelectorType.Pseudo,
                            name: name_2,
                            data: data2,
                        });
                        break;
                    }
                    case 44: {
                        finalizeSubselector();
                        tokens = [];
                        stripWhitespace(1);
                        break;
                    }
                    default: {
                        if (selector.startsWith('/*', selectorIndex)) {
                            var endIndex = selector.indexOf('*/', selectorIndex + 2);
                            if (endIndex < 0) {
                                throw new Error('Comment was not terminated');
                            }
                            selectorIndex = endIndex + 2;
                            if (tokens.length === 0) {
                                stripWhitespace(0);
                            }
                            break;
                        }
                        var namespace = null;
                        var name_3 = void 0;
                        if (firstChar === 42) {
                            selectorIndex += 1;
                            name_3 = '*';
                        } else if (firstChar === 124) {
                            name_3 = '';
                            if (selector.charCodeAt(selectorIndex + 1) === 124) {
                                addTraversal(types_1.SelectorType.ColumnCombinator);
                                stripWhitespace(2);
                                break;
                            }
                        } else if (reName.test(selector.slice(selectorIndex))) {
                            name_3 = getName2(0);
                        } else {
                            break loop;
                        }
                        if (
                            selector.charCodeAt(selectorIndex) === 124 &&
                            selector.charCodeAt(selectorIndex + 1) !== 124
                        ) {
                            namespace = name_3;
                            if (selector.charCodeAt(selectorIndex + 1) === 42) {
                                name_3 = '*';
                                selectorIndex += 2;
                            } else {
                                name_3 = getName2(1);
                            }
                        }
                        tokens.push(
                            name_3 === '*'
                                ? { type: types_1.SelectorType.Universal, namespace }
                                : { type: types_1.SelectorType.Tag, name: name_3, namespace },
                        );
                    }
                }
            }
            finalizeSubselector();
            return selectorIndex;
        }
    },
});

// node_modules/css-what/lib/commonjs/stringify.js
var require_stringify = __commonJS({
    'node_modules/css-what/lib/commonjs/stringify.js'(exports2) {
        'use strict';
        var __spreadArray =
            (exports2 && exports2.__spreadArray) ||
            function (to, from, pack) {
                if (pack || arguments.length === 2)
                    for (var i2 = 0, l = from.length, ar; i2 < l; i2++) {
                        if (ar || !(i2 in from)) {
                            if (!ar) ar = Array.prototype.slice.call(from, 0, i2);
                            ar[i2] = from[i2];
                        }
                    }
                return to.concat(ar || Array.prototype.slice.call(from));
            };
        Object.defineProperty(exports2, '__esModule', { value: true });
        exports2.stringify = void 0;
        var types_1 = require_types();
        var attribValChars = ['\\', '"'];
        var pseudoValChars = __spreadArray(
            __spreadArray([], attribValChars, true),
            ['(', ')'],
            false,
        );
        var charsToEscapeInAttributeValue = new Set(
            attribValChars.map(function (c) {
                return c.charCodeAt(0);
            }),
        );
        var charsToEscapeInPseudoValue = new Set(
            pseudoValChars.map(function (c) {
                return c.charCodeAt(0);
            }),
        );
        var charsToEscapeInName = new Set(
            __spreadArray(
                __spreadArray([], pseudoValChars, true),
                ['~', '^', '$', '*', '+', '!', '|', ':', '[', ']', ' ', '.'],
                false,
            ).map(function (c) {
                return c.charCodeAt(0);
            }),
        );
        function stringify2(selector) {
            return selector
                .map(function (token) {
                    return token.map(stringifyToken).join('');
                })
                .join(', ');
        }
        exports2.stringify = stringify2;
        function stringifyToken(token, index2, arr) {
            switch (token.type) {
                case types_1.SelectorType.Child:
                    return index2 === 0 ? '> ' : ' > ';
                case types_1.SelectorType.Parent:
                    return index2 === 0 ? '< ' : ' < ';
                case types_1.SelectorType.Sibling:
                    return index2 === 0 ? '~ ' : ' ~ ';
                case types_1.SelectorType.Adjacent:
                    return index2 === 0 ? '+ ' : ' + ';
                case types_1.SelectorType.Descendant:
                    return ' ';
                case types_1.SelectorType.ColumnCombinator:
                    return index2 === 0 ? '|| ' : ' || ';
                case types_1.SelectorType.Universal:
                    return token.namespace === '*' &&
                        index2 + 1 < arr.length &&
                        'name' in arr[index2 + 1]
                        ? ''
                        : ''.concat(getNamespace(token.namespace), '*');
                case types_1.SelectorType.Tag:
                    return getNamespacedName(token);
                case types_1.SelectorType.PseudoElement:
                    return '::'
                        .concat(escapeName(token.name, charsToEscapeInName))
                        .concat(
                            token.data === null
                                ? ''
                                : '('.concat(
                                      escapeName(token.data, charsToEscapeInPseudoValue),
                                      ')',
                                  ),
                        );
                case types_1.SelectorType.Pseudo:
                    return ':'
                        .concat(escapeName(token.name, charsToEscapeInName))
                        .concat(
                            token.data === null
                                ? ''
                                : '('.concat(
                                      typeof token.data === 'string'
                                          ? escapeName(token.data, charsToEscapeInPseudoValue)
                                          : stringify2(token.data),
                                      ')',
                                  ),
                        );
                case types_1.SelectorType.Attribute: {
                    if (
                        token.name === 'id' &&
                        token.action === types_1.AttributeAction.Equals &&
                        token.ignoreCase === 'quirks' &&
                        !token.namespace
                    ) {
                        return '#'.concat(escapeName(token.value, charsToEscapeInName));
                    }
                    if (
                        token.name === 'class' &&
                        token.action === types_1.AttributeAction.Element &&
                        token.ignoreCase === 'quirks' &&
                        !token.namespace
                    ) {
                        return '.'.concat(escapeName(token.value, charsToEscapeInName));
                    }
                    var name_1 = getNamespacedName(token);
                    if (token.action === types_1.AttributeAction.Exists) {
                        return '['.concat(name_1, ']');
                    }
                    return '['
                        .concat(name_1)
                        .concat(getActionValue(token.action), '="')
                        .concat(escapeName(token.value, charsToEscapeInAttributeValue), '"')
                        .concat(
                            token.ignoreCase === null ? '' : token.ignoreCase ? ' i' : ' s',
                            ']',
                        );
                }
            }
        }
        function getActionValue(action) {
            switch (action) {
                case types_1.AttributeAction.Equals:
                    return '';
                case types_1.AttributeAction.Element:
                    return '~';
                case types_1.AttributeAction.Start:
                    return '^';
                case types_1.AttributeAction.End:
                    return '$';
                case types_1.AttributeAction.Any:
                    return '*';
                case types_1.AttributeAction.Not:
                    return '!';
                case types_1.AttributeAction.Hyphen:
                    return '|';
                case types_1.AttributeAction.Exists:
                    throw new Error("Shouldn't be here");
            }
        }
        function getNamespacedName(token) {
            return ''
                .concat(getNamespace(token.namespace))
                .concat(escapeName(token.name, charsToEscapeInName));
        }
        function getNamespace(namespace) {
            return namespace !== null
                ? ''.concat(
                      namespace === '*' ? '*' : escapeName(namespace, charsToEscapeInName),
                      '|',
                  )
                : '';
        }
        function escapeName(str, charsToEscape) {
            var lastIdx = 0;
            var ret = '';
            for (var i2 = 0; i2 < str.length; i2++) {
                if (charsToEscape.has(str.charCodeAt(i2))) {
                    ret += ''.concat(str.slice(lastIdx, i2), '\\').concat(str.charAt(i2));
                    lastIdx = i2 + 1;
                }
            }
            return ret.length > 0 ? ret + str.slice(lastIdx) : str;
        }
    },
});

// node_modules/css-what/lib/commonjs/index.js
var require_commonjs = __commonJS({
    'node_modules/css-what/lib/commonjs/index.js'(exports2) {
        'use strict';
        var __createBinding =
            (exports2 && exports2.__createBinding) ||
            (Object.create
                ? function (o, m2, k, k2) {
                      if (k2 === void 0) k2 = k;
                      var desc = Object.getOwnPropertyDescriptor(m2, k);
                      if (
                          !desc ||
                          ('get' in desc ? !m2.__esModule : desc.writable || desc.configurable)
                      ) {
                          desc = {
                              enumerable: true,
                              get: function () {
                                  return m2[k];
                              },
                          };
                      }
                      Object.defineProperty(o, k2, desc);
                  }
                : function (o, m2, k, k2) {
                      if (k2 === void 0) k2 = k;
                      o[k2] = m2[k];
                  });
        var __exportStar =
            (exports2 && exports2.__exportStar) ||
            function (m2, exports3) {
                for (var p in m2)
                    if (p !== 'default' && !Object.prototype.hasOwnProperty.call(exports3, p))
                        __createBinding(exports3, m2, p);
            };
        Object.defineProperty(exports2, '__esModule', { value: true });
        exports2.stringify = exports2.parse = exports2.isTraversal = void 0;
        __exportStar(require_types(), exports2);
        var parse_1 = require_parse2();
        Object.defineProperty(exports2, 'isTraversal', {
            enumerable: true,
            get: function () {
                return parse_1.isTraversal;
            },
        });
        Object.defineProperty(exports2, 'parse', {
            enumerable: true,
            get: function () {
                return parse_1.parse;
            },
        });
        var stringify_1 = require_stringify();
        Object.defineProperty(exports2, 'stringify', {
            enumerable: true,
            get: function () {
                return stringify_1.stringify;
            },
        });
    },
});

// node_modules/boolbase/index.js
var require_boolbase = __commonJS({
    'node_modules/boolbase/index.js'(exports2, module2) {
        module2.exports = {
            trueFunc: function trueFunc2() {
                return true;
            },
            falseFunc: function falseFunc() {
                return false;
            },
        };
    },
});

// index.ts
var import_prompts = __toESM(require_prompts3(), 1);

// node_modules/kolorist/dist/esm/index.mjs
var enabled = true;
var globalVar =
    typeof self !== 'undefined'
        ? self
        : typeof window !== 'undefined'
          ? window
          : typeof global !== 'undefined'
            ? global
            : {};
var supportLevel = 0;
if (globalVar.process && globalVar.process.env && globalVar.process.stdout) {
    const { FORCE_COLOR, NODE_DISABLE_COLORS, NO_COLOR, TERM, COLORTERM } = globalVar.process.env;
    if (NODE_DISABLE_COLORS || NO_COLOR || FORCE_COLOR === '0') {
        enabled = false;
    } else if (FORCE_COLOR === '1' || FORCE_COLOR === '2' || FORCE_COLOR === '3') {
        enabled = true;
    } else if (TERM === 'dumb') {
        enabled = false;
    } else if (
        'CI' in globalVar.process.env &&
        [
            'TRAVIS',
            'CIRCLECI',
            'APPVEYOR',
            'GITLAB_CI',
            'GITHUB_ACTIONS',
            'BUILDKITE',
            'DRONE',
        ].some((vendor) => vendor in globalVar.process.env)
    ) {
        enabled = true;
    } else {
        enabled = process.stdout.isTTY;
    }
    if (enabled) {
        if (process.platform === 'win32') {
            supportLevel = 3;
        } else {
            if (COLORTERM && (COLORTERM === 'truecolor' || COLORTERM === '24bit')) {
                supportLevel = 3;
            } else if (TERM && (TERM.endsWith('-256color') || TERM.endsWith('256'))) {
                supportLevel = 2;
            } else {
                supportLevel = 1;
            }
        }
    }
}
var options = {
    enabled,
    supportLevel,
};
function kolorist(start, end2, level = 1) {
    const open = `\x1B[${start}m`;
    const close = `\x1B[${end2}m`;
    const regex = new RegExp(`\\x1b\\[${end2}m`, 'g');
    return (str) => {
        return options.enabled && options.supportLevel >= level
            ? open + ('' + str).replace(regex, open) + close
            : '' + str;
    };
}
var reset = kolorist(0, 0);
var bold = kolorist(1, 22);
var dim = kolorist(2, 22);
var italic = kolorist(3, 23);
var underline = kolorist(4, 24);
var inverse = kolorist(7, 27);
var hidden = kolorist(8, 28);
var strikethrough = kolorist(9, 29);
var black = kolorist(30, 39);
var red = kolorist(31, 39);
var green = kolorist(32, 39);
var yellow = kolorist(33, 39);
var blue = kolorist(34, 39);
var magenta = kolorist(35, 39);
var cyan = kolorist(36, 39);
var white = kolorist(97, 39);
var gray = kolorist(90, 39);
var lightGray = kolorist(37, 39);
var lightRed = kolorist(91, 39);
var lightGreen = kolorist(92, 39);
var lightYellow = kolorist(93, 39);
var lightBlue = kolorist(94, 39);
var lightMagenta = kolorist(95, 39);
var lightCyan = kolorist(96, 39);
var bgBlack = kolorist(40, 49);
var bgRed = kolorist(41, 49);
var bgGreen = kolorist(42, 49);
var bgYellow = kolorist(43, 49);
var bgBlue = kolorist(44, 49);
var bgMagenta = kolorist(45, 49);
var bgCyan = kolorist(46, 49);
var bgWhite = kolorist(107, 49);
var bgGray = kolorist(100, 49);
var bgLightRed = kolorist(101, 49);
var bgLightGreen = kolorist(102, 49);
var bgLightYellow = kolorist(103, 49);
var bgLightBlue = kolorist(104, 49);
var bgLightMagenta = kolorist(105, 49);
var bgLightCyan = kolorist(106, 49);
var bgLightGray = kolorist(47, 49);

// utils/log.ts
function log(str) {
    console.log(`  ${bold(lightBlue(str))}`);
}

// utils/banners.ts
var import_gradient_string = __toESM(require_gradient_string(), 1);
var defaultBanner = 'Yu Cheng Cli - Individual Efficiency Scaffolding';
var gradientBanner = (0, import_gradient_string.default)([
    { color: '#42d392', pos: 0 },
    { color: '#42d392', pos: 0.1 },
    { color: '#647eff', pos: 1 },
])(defaultBanner);

// node_modules/execa/index.js
var import_node_buffer2 = require('buffer');
var import_node_path2 = __toESM(require('path'), 1);
var import_node_child_process3 = __toESM(require('child_process'), 1);
var import_node_process4 = __toESM(require('process'), 1);
var import_cross_spawn = __toESM(require_cross_spawn(), 1);

// node_modules/strip-final-newline/index.js
function stripFinalNewline(input) {
    const LF2 = typeof input === 'string' ? '\n' : '\n'.charCodeAt();
    const CR2 = typeof input === 'string' ? '\r' : '\r'.charCodeAt();
    if (input[input.length - 1] === LF2) {
        input = input.slice(0, -1);
    }
    if (input[input.length - 1] === CR2) {
        input = input.slice(0, -1);
    }
    return input;
}

// node_modules/npm-run-path/index.js
var import_node_process = __toESM(require('process'), 1);
var import_node_path = __toESM(require('path'), 1);
var import_node_url = require('url');

// node_modules/npm-run-path/node_modules/path-key/index.js
function pathKey(options2 = {}) {
    const { env = process.env, platform = process.platform } = options2;
    if (platform !== 'win32') {
        return 'PATH';
    }
    return (
        Object.keys(env)
            .reverse()
            .find((key) => key.toUpperCase() === 'PATH') || 'Path'
    );
}

// node_modules/npm-run-path/index.js
var npmRunPath = ({
    cwd = import_node_process.default.cwd(),
    path: pathOption = import_node_process.default.env[pathKey()],
    preferLocal = true,
    execPath = import_node_process.default.execPath,
    addExecPath = true,
} = {}) => {
    const cwdString = cwd instanceof URL ? (0, import_node_url.fileURLToPath)(cwd) : cwd;
    const cwdPath = import_node_path.default.resolve(cwdString);
    const result = [];
    if (preferLocal) {
        applyPreferLocal(result, cwdPath);
    }
    if (addExecPath) {
        applyExecPath(result, execPath, cwdPath);
    }
    return [...result, pathOption].join(import_node_path.default.delimiter);
};
var applyPreferLocal = (result, cwdPath) => {
    let previous;
    while (previous !== cwdPath) {
        result.push(import_node_path.default.join(cwdPath, 'node_modules/.bin'));
        previous = cwdPath;
        cwdPath = import_node_path.default.resolve(cwdPath, '..');
    }
};
var applyExecPath = (result, execPath, cwdPath) => {
    const execPathString =
        execPath instanceof URL ? (0, import_node_url.fileURLToPath)(execPath) : execPath;
    result.push(import_node_path.default.resolve(cwdPath, execPathString, '..'));
};
var npmRunPathEnv = ({ env = import_node_process.default.env, ...options2 } = {}) => {
    env = { ...env };
    const pathName = pathKey({ env });
    options2.path = env[pathName];
    env[pathName] = npmRunPath(options2);
    return env;
};

// node_modules/mimic-fn/index.js
var copyProperty = (to, from, property, ignoreNonConfigurable) => {
    if (property === 'length' || property === 'prototype') {
        return;
    }
    if (property === 'arguments' || property === 'caller') {
        return;
    }
    const toDescriptor = Object.getOwnPropertyDescriptor(to, property);
    const fromDescriptor = Object.getOwnPropertyDescriptor(from, property);
    if (!canCopyProperty(toDescriptor, fromDescriptor) && ignoreNonConfigurable) {
        return;
    }
    Object.defineProperty(to, property, fromDescriptor);
};
var canCopyProperty = function (toDescriptor, fromDescriptor) {
    return (
        toDescriptor === void 0 ||
        toDescriptor.configurable ||
        (toDescriptor.writable === fromDescriptor.writable &&
            toDescriptor.enumerable === fromDescriptor.enumerable &&
            toDescriptor.configurable === fromDescriptor.configurable &&
            (toDescriptor.writable || toDescriptor.value === fromDescriptor.value))
    );
};
var changePrototype = (to, from) => {
    const fromPrototype = Object.getPrototypeOf(from);
    if (fromPrototype === Object.getPrototypeOf(to)) {
        return;
    }
    Object.setPrototypeOf(to, fromPrototype);
};
var wrappedToString = (withName, fromBody) => `/* Wrapped ${withName}*/
${fromBody}`;
var toStringDescriptor = Object.getOwnPropertyDescriptor(Function.prototype, 'toString');
var toStringName = Object.getOwnPropertyDescriptor(Function.prototype.toString, 'name');
var changeToString = (to, from, name) => {
    const withName = name === '' ? '' : `with ${name.trim()}() `;
    const newToString = wrappedToString.bind(null, withName, from.toString());
    Object.defineProperty(newToString, 'name', toStringName);
    Object.defineProperty(to, 'toString', { ...toStringDescriptor, value: newToString });
};
function mimicFunction(to, from, { ignoreNonConfigurable = false } = {}) {
    const { name } = to;
    for (const property of Reflect.ownKeys(from)) {
        copyProperty(to, from, property, ignoreNonConfigurable);
    }
    changePrototype(to, from);
    changeToString(to, from, name);
    return to;
}

// node_modules/onetime/index.js
var calledFunctions = /* @__PURE__ */ new WeakMap();
var onetime = (function_, options2 = {}) => {
    if (typeof function_ !== 'function') {
        throw new TypeError('Expected a function');
    }
    let returnValue;
    let callCount = 0;
    const functionName = function_.displayName || function_.name || '<anonymous>';
    const onetime2 = function (...arguments_) {
        calledFunctions.set(onetime2, ++callCount);
        if (callCount === 1) {
            returnValue = function_.apply(this, arguments_);
            function_ = null;
        } else if (options2.throw === true) {
            throw new Error(`Function \`${functionName}\` can only be called once`);
        }
        return returnValue;
    };
    mimicFunction(onetime2, function_);
    calledFunctions.set(onetime2, callCount);
    return onetime2;
};
onetime.callCount = (function_) => {
    if (!calledFunctions.has(function_)) {
        throw new Error(
            `The given function \`${function_.name}\` is not wrapped by the \`onetime\` package`,
        );
    }
    return calledFunctions.get(function_);
};
var onetime_default = onetime;

// node_modules/execa/lib/error.js
var import_node_process2 = __toESM(require('process'), 1);

// node_modules/human-signals/build/src/main.js
var import_node_os2 = require('os');

// node_modules/human-signals/build/src/realtime.js
var getRealtimeSignals = () => {
    const length = SIGRTMAX - SIGRTMIN + 1;
    return Array.from({ length }, getRealtimeSignal);
};
var getRealtimeSignal = (value, index2) => ({
    name: `SIGRT${index2 + 1}`,
    number: SIGRTMIN + index2,
    action: 'terminate',
    description: 'Application-specific signal (realtime)',
    standard: 'posix',
});
var SIGRTMIN = 34;
var SIGRTMAX = 64;

// node_modules/human-signals/build/src/signals.js
var import_node_os = require('os');

// node_modules/human-signals/build/src/core.js
var SIGNALS = [
    {
        name: 'SIGHUP',
        number: 1,
        action: 'terminate',
        description: 'Terminal closed',
        standard: 'posix',
    },
    {
        name: 'SIGINT',
        number: 2,
        action: 'terminate',
        description: 'User interruption with CTRL-C',
        standard: 'ansi',
    },
    {
        name: 'SIGQUIT',
        number: 3,
        action: 'core',
        description: 'User interruption with CTRL-\\',
        standard: 'posix',
    },
    {
        name: 'SIGILL',
        number: 4,
        action: 'core',
        description: 'Invalid machine instruction',
        standard: 'ansi',
    },
    {
        name: 'SIGTRAP',
        number: 5,
        action: 'core',
        description: 'Debugger breakpoint',
        standard: 'posix',
    },
    {
        name: 'SIGABRT',
        number: 6,
        action: 'core',
        description: 'Aborted',
        standard: 'ansi',
    },
    {
        name: 'SIGIOT',
        number: 6,
        action: 'core',
        description: 'Aborted',
        standard: 'bsd',
    },
    {
        name: 'SIGBUS',
        number: 7,
        action: 'core',
        description: 'Bus error due to misaligned, non-existing address or paging error',
        standard: 'bsd',
    },
    {
        name: 'SIGEMT',
        number: 7,
        action: 'terminate',
        description: 'Command should be emulated but is not implemented',
        standard: 'other',
    },
    {
        name: 'SIGFPE',
        number: 8,
        action: 'core',
        description: 'Floating point arithmetic error',
        standard: 'ansi',
    },
    {
        name: 'SIGKILL',
        number: 9,
        action: 'terminate',
        description: 'Forced termination',
        standard: 'posix',
        forced: true,
    },
    {
        name: 'SIGUSR1',
        number: 10,
        action: 'terminate',
        description: 'Application-specific signal',
        standard: 'posix',
    },
    {
        name: 'SIGSEGV',
        number: 11,
        action: 'core',
        description: 'Segmentation fault',
        standard: 'ansi',
    },
    {
        name: 'SIGUSR2',
        number: 12,
        action: 'terminate',
        description: 'Application-specific signal',
        standard: 'posix',
    },
    {
        name: 'SIGPIPE',
        number: 13,
        action: 'terminate',
        description: 'Broken pipe or socket',
        standard: 'posix',
    },
    {
        name: 'SIGALRM',
        number: 14,
        action: 'terminate',
        description: 'Timeout or timer',
        standard: 'posix',
    },
    {
        name: 'SIGTERM',
        number: 15,
        action: 'terminate',
        description: 'Termination',
        standard: 'ansi',
    },
    {
        name: 'SIGSTKFLT',
        number: 16,
        action: 'terminate',
        description: 'Stack is empty or overflowed',
        standard: 'other',
    },
    {
        name: 'SIGCHLD',
        number: 17,
        action: 'ignore',
        description: 'Child process terminated, paused or unpaused',
        standard: 'posix',
    },
    {
        name: 'SIGCLD',
        number: 17,
        action: 'ignore',
        description: 'Child process terminated, paused or unpaused',
        standard: 'other',
    },
    {
        name: 'SIGCONT',
        number: 18,
        action: 'unpause',
        description: 'Unpaused',
        standard: 'posix',
        forced: true,
    },
    {
        name: 'SIGSTOP',
        number: 19,
        action: 'pause',
        description: 'Paused',
        standard: 'posix',
        forced: true,
    },
    {
        name: 'SIGTSTP',
        number: 20,
        action: 'pause',
        description: 'Paused using CTRL-Z or "suspend"',
        standard: 'posix',
    },
    {
        name: 'SIGTTIN',
        number: 21,
        action: 'pause',
        description: 'Background process cannot read terminal input',
        standard: 'posix',
    },
    {
        name: 'SIGBREAK',
        number: 21,
        action: 'terminate',
        description: 'User interruption with CTRL-BREAK',
        standard: 'other',
    },
    {
        name: 'SIGTTOU',
        number: 22,
        action: 'pause',
        description: 'Background process cannot write to terminal output',
        standard: 'posix',
    },
    {
        name: 'SIGURG',
        number: 23,
        action: 'ignore',
        description: 'Socket received out-of-band data',
        standard: 'bsd',
    },
    {
        name: 'SIGXCPU',
        number: 24,
        action: 'core',
        description: 'Process timed out',
        standard: 'bsd',
    },
    {
        name: 'SIGXFSZ',
        number: 25,
        action: 'core',
        description: 'File too big',
        standard: 'bsd',
    },
    {
        name: 'SIGVTALRM',
        number: 26,
        action: 'terminate',
        description: 'Timeout or timer',
        standard: 'bsd',
    },
    {
        name: 'SIGPROF',
        number: 27,
        action: 'terminate',
        description: 'Timeout or timer',
        standard: 'bsd',
    },
    {
        name: 'SIGWINCH',
        number: 28,
        action: 'ignore',
        description: 'Terminal window size changed',
        standard: 'bsd',
    },
    {
        name: 'SIGIO',
        number: 29,
        action: 'terminate',
        description: 'I/O is available',
        standard: 'other',
    },
    {
        name: 'SIGPOLL',
        number: 29,
        action: 'terminate',
        description: 'Watched event',
        standard: 'other',
    },
    {
        name: 'SIGINFO',
        number: 29,
        action: 'ignore',
        description: 'Request for process information',
        standard: 'other',
    },
    {
        name: 'SIGPWR',
        number: 30,
        action: 'terminate',
        description: 'Device running out of power',
        standard: 'systemv',
    },
    {
        name: 'SIGSYS',
        number: 31,
        action: 'core',
        description: 'Invalid system call',
        standard: 'other',
    },
    {
        name: 'SIGUNUSED',
        number: 31,
        action: 'terminate',
        description: 'Invalid system call',
        standard: 'other',
    },
];

// node_modules/human-signals/build/src/signals.js
var getSignals = () => {
    const realtimeSignals = getRealtimeSignals();
    const signals2 = [...SIGNALS, ...realtimeSignals].map(normalizeSignal);
    return signals2;
};
var normalizeSignal = ({
    name,
    number: defaultNumber,
    description,
    action,
    forced = false,
    standard,
}) => {
    const {
        signals: { [name]: constantSignal },
    } = import_node_os.constants;
    const supported = constantSignal !== void 0;
    const number = supported ? constantSignal : defaultNumber;
    return { name, number, description, supported, action, forced, standard };
};

// node_modules/human-signals/build/src/main.js
var getSignalsByName = () => {
    const signals2 = getSignals();
    return Object.fromEntries(signals2.map(getSignalByName));
};
var getSignalByName = ({ name, number, description, supported, action, forced, standard }) => [
    name,
    { name, number, description, supported, action, forced, standard },
];
var signalsByName = getSignalsByName();
var getSignalsByNumber = () => {
    const signals2 = getSignals();
    const length = SIGRTMAX + 1;
    const signalsA = Array.from({ length }, (value, number) => getSignalByNumber(number, signals2));
    return Object.assign({}, ...signalsA);
};
var getSignalByNumber = (number, signals2) => {
    const signal = findSignalByNumber(number, signals2);
    if (signal === void 0) {
        return {};
    }
    const { name, description, supported, action, forced, standard } = signal;
    return {
        [number]: {
            name,
            number,
            description,
            supported,
            action,
            forced,
            standard,
        },
    };
};
var findSignalByNumber = (number, signals2) => {
    const signal = signals2.find(({ name }) => import_node_os2.constants.signals[name] === number);
    if (signal !== void 0) {
        return signal;
    }
    return signals2.find((signalA) => signalA.number === number);
};
var signalsByNumber = getSignalsByNumber();

// node_modules/execa/lib/error.js
var getErrorPrefix = ({
    timedOut,
    timeout,
    errorCode,
    signal,
    signalDescription,
    exitCode,
    isCanceled,
}) => {
    if (timedOut) {
        return `timed out after ${timeout} milliseconds`;
    }
    if (isCanceled) {
        return 'was canceled';
    }
    if (errorCode !== void 0) {
        return `failed with ${errorCode}`;
    }
    if (signal !== void 0) {
        return `was killed with ${signal} (${signalDescription})`;
    }
    if (exitCode !== void 0) {
        return `failed with exit code ${exitCode}`;
    }
    return 'failed';
};
var makeError = ({
    stdout,
    stderr,
    all,
    error,
    signal,
    exitCode,
    command,
    escapedCommand,
    timedOut,
    isCanceled,
    killed,
    parsed: {
        options: { timeout, cwd = import_node_process2.default.cwd() },
    },
}) => {
    exitCode = exitCode === null ? void 0 : exitCode;
    signal = signal === null ? void 0 : signal;
    const signalDescription = signal === void 0 ? void 0 : signalsByName[signal].description;
    const errorCode = error && error.code;
    const prefix = getErrorPrefix({
        timedOut,
        timeout,
        errorCode,
        signal,
        signalDescription,
        exitCode,
        isCanceled,
    });
    const execaMessage = `Command ${prefix}: ${command}`;
    const isError = Object.prototype.toString.call(error) === '[object Error]';
    const shortMessage = isError
        ? `${execaMessage}
${error.message}`
        : execaMessage;
    const message = [shortMessage, stderr, stdout].filter(Boolean).join('\n');
    if (isError) {
        error.originalMessage = error.message;
        error.message = message;
    } else {
        error = new Error(message);
    }
    error.shortMessage = shortMessage;
    error.command = command;
    error.escapedCommand = escapedCommand;
    error.exitCode = exitCode;
    error.signal = signal;
    error.signalDescription = signalDescription;
    error.stdout = stdout;
    error.stderr = stderr;
    error.cwd = cwd;
    if (all !== void 0) {
        error.all = all;
    }
    if ('bufferedData' in error) {
        delete error.bufferedData;
    }
    error.failed = true;
    error.timedOut = Boolean(timedOut);
    error.isCanceled = isCanceled;
    error.killed = killed && !timedOut;
    return error;
};

// node_modules/execa/lib/stdio.js
var aliases = ['stdin', 'stdout', 'stderr'];
var hasAlias = (options2) => aliases.some((alias) => options2[alias] !== void 0);
var normalizeStdio = (options2) => {
    if (!options2) {
        return;
    }
    const { stdio } = options2;
    if (stdio === void 0) {
        return aliases.map((alias) => options2[alias]);
    }
    if (hasAlias(options2)) {
        throw new Error(
            `It's not possible to provide \`stdio\` in combination with one of ${aliases.map((alias) => `\`${alias}\``).join(', ')}`,
        );
    }
    if (typeof stdio === 'string') {
        return stdio;
    }
    if (!Array.isArray(stdio)) {
        throw new TypeError(
            `Expected \`stdio\` to be of type \`string\` or \`Array\`, got \`${typeof stdio}\``,
        );
    }
    const length = Math.max(stdio.length, aliases.length);
    return Array.from({ length }, (value, index2) => stdio[index2]);
};

// node_modules/execa/lib/kill.js
var import_node_os3 = __toESM(require('os'), 1);

// node_modules/signal-exit/dist/mjs/signals.js
var signals = [];
signals.push('SIGHUP', 'SIGINT', 'SIGTERM');
if (process.platform !== 'win32') {
    signals.push(
        'SIGALRM',
        'SIGABRT',
        'SIGVTALRM',
        'SIGXCPU',
        'SIGXFSZ',
        'SIGUSR2',
        'SIGTRAP',
        'SIGSYS',
        'SIGQUIT',
        'SIGIOT',
        // should detect profiler and enable/disable accordingly.
        // see #21
        // 'SIGPROF'
    );
}
if (process.platform === 'linux') {
    signals.push('SIGIO', 'SIGPOLL', 'SIGPWR', 'SIGSTKFLT');
}

// node_modules/signal-exit/dist/mjs/index.js
var processOk = (process7) =>
    !!process7 &&
    typeof process7 === 'object' &&
    typeof process7.removeListener === 'function' &&
    typeof process7.emit === 'function' &&
    typeof process7.reallyExit === 'function' &&
    typeof process7.listeners === 'function' &&
    typeof process7.kill === 'function' &&
    typeof process7.pid === 'number' &&
    typeof process7.on === 'function';
var kExitEmitter = Symbol.for('signal-exit emitter');
var global2 = globalThis;
var ObjectDefineProperty = Object.defineProperty.bind(Object);
var Emitter = class {
    emitted = {
        afterExit: false,
        exit: false,
    };
    listeners = {
        afterExit: [],
        exit: [],
    };
    count = 0;
    id = Math.random();
    constructor() {
        if (global2[kExitEmitter]) {
            return global2[kExitEmitter];
        }
        ObjectDefineProperty(global2, kExitEmitter, {
            value: this,
            writable: false,
            enumerable: false,
            configurable: false,
        });
    }
    on(ev, fn) {
        this.listeners[ev].push(fn);
    }
    removeListener(ev, fn) {
        const list = this.listeners[ev];
        const i2 = list.indexOf(fn);
        if (i2 === -1) {
            return;
        }
        if (i2 === 0 && list.length === 1) {
            list.length = 0;
        } else {
            list.splice(i2, 1);
        }
    }
    emit(ev, code, signal) {
        if (this.emitted[ev]) {
            return false;
        }
        this.emitted[ev] = true;
        let ret = false;
        for (const fn of this.listeners[ev]) {
            ret = fn(code, signal) === true || ret;
        }
        if (ev === 'exit') {
            ret = this.emit('afterExit', code, signal) || ret;
        }
        return ret;
    }
};
var SignalExitBase = class {};
var signalExitWrap = (handler) => {
    return {
        onExit(cb, opts) {
            return handler.onExit(cb, opts);
        },
        load() {
            return handler.load();
        },
        unload() {
            return handler.unload();
        },
    };
};
var SignalExitFallback = class extends SignalExitBase {
    onExit() {
        return () => {};
    }
    load() {}
    unload() {}
};
var _hupSig,
    _emitter,
    _process,
    _originalProcessEmit,
    _originalProcessReallyExit,
    _sigListeners,
    _loaded,
    _processReallyExit,
    processReallyExit_fn,
    _processEmit,
    processEmit_fn;
var SignalExit = class extends SignalExitBase {
    constructor(process7) {
        super();
        __privateAdd(this, _processReallyExit);
        __privateAdd(this, _processEmit);
        // "SIGHUP" throws an `ENOSYS` error on Windows,
        // so use a supported signal instead
        /* c8 ignore start */
        __privateAdd(this, _hupSig, process4.platform === 'win32' ? 'SIGINT' : 'SIGHUP');
        /* c8 ignore stop */
        __privateAdd(this, _emitter, new Emitter());
        __privateAdd(this, _process, void 0);
        __privateAdd(this, _originalProcessEmit, void 0);
        __privateAdd(this, _originalProcessReallyExit, void 0);
        __privateAdd(this, _sigListeners, {});
        __privateAdd(this, _loaded, false);
        __privateSet(this, _process, process7);
        __privateSet(this, _sigListeners, {});
        for (const sig of signals) {
            __privateGet(this, _sigListeners)[sig] = () => {
                const listeners = __privateGet(this, _process).listeners(sig);
                let { count } = __privateGet(this, _emitter);
                const p = process7;
                if (
                    typeof p.__signal_exit_emitter__ === 'object' &&
                    typeof p.__signal_exit_emitter__.count === 'number'
                ) {
                    count += p.__signal_exit_emitter__.count;
                }
                if (listeners.length === count) {
                    this.unload();
                    const ret = __privateGet(this, _emitter).emit('exit', null, sig);
                    const s2 = sig === 'SIGHUP' ? __privateGet(this, _hupSig) : sig;
                    if (!ret) process7.kill(process7.pid, s2);
                }
            };
        }
        __privateSet(this, _originalProcessReallyExit, process7.reallyExit);
        __privateSet(this, _originalProcessEmit, process7.emit);
    }
    onExit(cb, opts) {
        if (!processOk(__privateGet(this, _process))) {
            return () => {};
        }
        if (__privateGet(this, _loaded) === false) {
            this.load();
        }
        const ev = (opts == null ? void 0 : opts.alwaysLast) ? 'afterExit' : 'exit';
        __privateGet(this, _emitter).on(ev, cb);
        return () => {
            __privateGet(this, _emitter).removeListener(ev, cb);
            if (
                __privateGet(this, _emitter).listeners['exit'].length === 0 &&
                __privateGet(this, _emitter).listeners['afterExit'].length === 0
            ) {
                this.unload();
            }
        };
    }
    load() {
        if (__privateGet(this, _loaded)) {
            return;
        }
        __privateSet(this, _loaded, true);
        __privateGet(this, _emitter).count += 1;
        for (const sig of signals) {
            try {
                const fn = __privateGet(this, _sigListeners)[sig];
                if (fn) __privateGet(this, _process).on(sig, fn);
            } catch (_) {}
        }
        __privateGet(this, _process).emit = (ev, ...a) => {
            return __privateMethod(this, _processEmit, processEmit_fn).call(this, ev, ...a);
        };
        __privateGet(this, _process).reallyExit = (code) => {
            return __privateMethod(this, _processReallyExit, processReallyExit_fn).call(this, code);
        };
    }
    unload() {
        if (!__privateGet(this, _loaded)) {
            return;
        }
        __privateSet(this, _loaded, false);
        signals.forEach((sig) => {
            const listener = __privateGet(this, _sigListeners)[sig];
            if (!listener) {
                throw new Error('Listener not defined for signal: ' + sig);
            }
            try {
                __privateGet(this, _process).removeListener(sig, listener);
            } catch (_) {}
        });
        __privateGet(this, _process).emit = __privateGet(this, _originalProcessEmit);
        __privateGet(this, _process).reallyExit = __privateGet(this, _originalProcessReallyExit);
        __privateGet(this, _emitter).count -= 1;
    }
};
_hupSig = new WeakMap();
_emitter = new WeakMap();
_process = new WeakMap();
_originalProcessEmit = new WeakMap();
_originalProcessReallyExit = new WeakMap();
_sigListeners = new WeakMap();
_loaded = new WeakMap();
_processReallyExit = new WeakSet();
processReallyExit_fn = function (code) {
    if (!processOk(__privateGet(this, _process))) {
        return 0;
    }
    __privateGet(this, _process).exitCode = code || 0;
    __privateGet(this, _emitter).emit('exit', __privateGet(this, _process).exitCode, null);
    return __privateGet(this, _originalProcessReallyExit).call(
        __privateGet(this, _process),
        __privateGet(this, _process).exitCode,
    );
};
_processEmit = new WeakSet();
processEmit_fn = function (ev, ...args) {
    const og = __privateGet(this, _originalProcessEmit);
    if (ev === 'exit' && processOk(__privateGet(this, _process))) {
        if (typeof args[0] === 'number') {
            __privateGet(this, _process).exitCode = args[0];
        }
        const ret = og.call(__privateGet(this, _process), ev, ...args);
        __privateGet(this, _emitter).emit('exit', __privateGet(this, _process).exitCode, null);
        return ret;
    } else {
        return og.call(__privateGet(this, _process), ev, ...args);
    }
};
var process4 = globalThis.process;
var {
    /**
     * Called when the process is exiting, whether via signal, explicit
     * exit, or running out of stuff to do.
     *
     * If the global process object is not suitable for instrumentation,
     * then this will be a no-op.
     *
     * Returns a function that may be used to unload signal-exit.
     */
    onExit,
    /**
     * Load the listeners.  Likely you never need to call this, unless
     * doing a rather deep integration with signal-exit functionality.
     * Mostly exposed for the benefit of testing.
     *
     * @internal
     */
    load,
    /**
     * Unload the listeners.  Likely you never need to call this, unless
     * doing a rather deep integration with signal-exit functionality.
     * Mostly exposed for the benefit of testing.
     *
     * @internal
     */
    unload,
} = signalExitWrap(processOk(process4) ? new SignalExit(process4) : new SignalExitFallback());

// node_modules/execa/lib/kill.js
var DEFAULT_FORCE_KILL_TIMEOUT = 1e3 * 5;
var spawnedKill = (kill, signal = 'SIGTERM', options2 = {}) => {
    const killResult = kill(signal);
    setKillTimeout(kill, signal, options2, killResult);
    return killResult;
};
var setKillTimeout = (kill, signal, options2, killResult) => {
    if (!shouldForceKill(signal, options2, killResult)) {
        return;
    }
    const timeout = getForceKillAfterTimeout(options2);
    const t2 = setTimeout(() => {
        kill('SIGKILL');
    }, timeout);
    if (t2.unref) {
        t2.unref();
    }
};
var shouldForceKill = (signal, { forceKillAfterTimeout }, killResult) =>
    isSigterm(signal) && forceKillAfterTimeout !== false && killResult;
var isSigterm = (signal) =>
    signal === import_node_os3.default.constants.signals.SIGTERM ||
    (typeof signal === 'string' && signal.toUpperCase() === 'SIGTERM');
var getForceKillAfterTimeout = ({ forceKillAfterTimeout = true }) => {
    if (forceKillAfterTimeout === true) {
        return DEFAULT_FORCE_KILL_TIMEOUT;
    }
    if (!Number.isFinite(forceKillAfterTimeout) || forceKillAfterTimeout < 0) {
        throw new TypeError(
            `Expected the \`forceKillAfterTimeout\` option to be a non-negative integer, got \`${forceKillAfterTimeout}\` (${typeof forceKillAfterTimeout})`,
        );
    }
    return forceKillAfterTimeout;
};
var spawnedCancel = (spawned, context) => {
    const killResult = spawned.kill();
    if (killResult) {
        context.isCanceled = true;
    }
};
var timeoutKill = (spawned, signal, reject) => {
    spawned.kill(signal);
    reject(Object.assign(new Error('Timed out'), { timedOut: true, signal }));
};
var setupTimeout = (spawned, { timeout, killSignal = 'SIGTERM' }, spawnedPromise) => {
    if (timeout === 0 || timeout === void 0) {
        return spawnedPromise;
    }
    let timeoutId;
    const timeoutPromise = new Promise((resolve, reject) => {
        timeoutId = setTimeout(() => {
            timeoutKill(spawned, killSignal, reject);
        }, timeout);
    });
    const safeSpawnedPromise = spawnedPromise.finally(() => {
        clearTimeout(timeoutId);
    });
    return Promise.race([timeoutPromise, safeSpawnedPromise]);
};
var validateTimeout = ({ timeout }) => {
    if (timeout !== void 0 && (!Number.isFinite(timeout) || timeout < 0)) {
        throw new TypeError(
            `Expected the \`timeout\` option to be a non-negative integer, got \`${timeout}\` (${typeof timeout})`,
        );
    }
};
var setExitHandler = async (spawned, { cleanup, detached }, timedPromise) => {
    if (!cleanup || detached) {
        return timedPromise;
    }
    const removeExitHandler = onExit(() => {
        spawned.kill();
    });
    return timedPromise.finally(() => {
        removeExitHandler();
    });
};

// node_modules/execa/lib/pipe.js
var import_node_fs = require('fs');
var import_node_child_process = require('child_process');

// node_modules/is-stream/index.js
function isStream(stream) {
    return stream !== null && typeof stream === 'object' && typeof stream.pipe === 'function';
}
function isWritableStream(stream) {
    return (
        isStream(stream) &&
        stream.writable !== false &&
        typeof stream._write === 'function' &&
        typeof stream._writableState === 'object'
    );
}

// node_modules/execa/lib/pipe.js
var isExecaChildProcess = (target) =>
    target instanceof import_node_child_process.ChildProcess && typeof target.then === 'function';
var pipeToTarget = (spawned, streamName, target) => {
    if (typeof target === 'string') {
        spawned[streamName].pipe((0, import_node_fs.createWriteStream)(target));
        return spawned;
    }
    if (isWritableStream(target)) {
        spawned[streamName].pipe(target);
        return spawned;
    }
    if (!isExecaChildProcess(target)) {
        throw new TypeError(
            'The second argument must be a string, a stream or an Execa child process.',
        );
    }
    if (!isWritableStream(target.stdin)) {
        throw new TypeError("The target child process's stdin must be available.");
    }
    spawned[streamName].pipe(target.stdin);
    return target;
};
var addPipeMethods = (spawned) => {
    if (spawned.stdout !== null) {
        spawned.pipeStdout = pipeToTarget.bind(void 0, spawned, 'stdout');
    }
    if (spawned.stderr !== null) {
        spawned.pipeStderr = pipeToTarget.bind(void 0, spawned, 'stderr');
    }
    if (spawned.all !== void 0) {
        spawned.pipeAll = pipeToTarget.bind(void 0, spawned, 'all');
    }
};

// node_modules/execa/lib/stream.js
var import_node_fs2 = require('fs');
var import_promises = require('timers/promises');

// node_modules/get-stream/source/contents.js
var getStreamContents = async (
    stream,
    { init: init2, convertChunk, getSize, truncateChunk, addChunk, getFinalChunk, finalize },
    { maxBuffer = Number.POSITIVE_INFINITY } = {},
) => {
    if (!isAsyncIterable(stream)) {
        throw new Error(
            'The first argument must be a Readable, a ReadableStream, or an async iterable.',
        );
    }
    const state = init2();
    state.length = 0;
    try {
        for await (const chunk of stream) {
            const chunkType = getChunkType(chunk);
            const convertedChunk = convertChunk[chunkType](chunk, state);
            appendChunk({ convertedChunk, state, getSize, truncateChunk, addChunk, maxBuffer });
        }
        appendFinalChunk({
            state,
            convertChunk,
            getSize,
            truncateChunk,
            addChunk,
            getFinalChunk,
            maxBuffer,
        });
        return finalize(state);
    } catch (error) {
        error.bufferedData = finalize(state);
        throw error;
    }
};
var appendFinalChunk = ({ state, getSize, truncateChunk, addChunk, getFinalChunk, maxBuffer }) => {
    const convertedChunk = getFinalChunk(state);
    if (convertedChunk !== void 0) {
        appendChunk({ convertedChunk, state, getSize, truncateChunk, addChunk, maxBuffer });
    }
};
var appendChunk = ({ convertedChunk, state, getSize, truncateChunk, addChunk, maxBuffer }) => {
    const chunkSize = getSize(convertedChunk);
    const newLength = state.length + chunkSize;
    if (newLength <= maxBuffer) {
        addNewChunk(convertedChunk, state, addChunk, newLength);
        return;
    }
    const truncatedChunk = truncateChunk(convertedChunk, maxBuffer - state.length);
    if (truncatedChunk !== void 0) {
        addNewChunk(truncatedChunk, state, addChunk, maxBuffer);
    }
    throw new MaxBufferError();
};
var addNewChunk = (convertedChunk, state, addChunk, newLength) => {
    state.contents = addChunk(convertedChunk, state, newLength);
    state.length = newLength;
};
var isAsyncIterable = (stream) =>
    typeof stream === 'object' &&
    stream !== null &&
    typeof stream[Symbol.asyncIterator] === 'function';
var getChunkType = (chunk) => {
    var _a5;
    const typeOfChunk = typeof chunk;
    if (typeOfChunk === 'string') {
        return 'string';
    }
    if (typeOfChunk !== 'object' || chunk === null) {
        return 'others';
    }
    if ((_a5 = globalThis.Buffer) == null ? void 0 : _a5.isBuffer(chunk)) {
        return 'buffer';
    }
    const prototypeName = objectToString.call(chunk);
    if (prototypeName === '[object ArrayBuffer]') {
        return 'arrayBuffer';
    }
    if (prototypeName === '[object DataView]') {
        return 'dataView';
    }
    if (
        Number.isInteger(chunk.byteLength) &&
        Number.isInteger(chunk.byteOffset) &&
        objectToString.call(chunk.buffer) === '[object ArrayBuffer]'
    ) {
        return 'typedArray';
    }
    return 'others';
};
var { toString: objectToString } = Object.prototype;
var MaxBufferError = class extends Error {
    name = 'MaxBufferError';
    constructor() {
        super('maxBuffer exceeded');
    }
};

// node_modules/get-stream/source/utils.js
var identity = (value) => value;
var noop = () => void 0;
var getContentsProp = ({ contents: contents2 }) => contents2;
var throwObjectStream = (chunk) => {
    throw new Error(`Streams in object mode are not supported: ${String(chunk)}`);
};
var getLengthProp = (convertedChunk) => convertedChunk.length;

// node_modules/get-stream/source/array-buffer.js
async function getStreamAsArrayBuffer(stream, options2) {
    return getStreamContents(stream, arrayBufferMethods, options2);
}
var initArrayBuffer = () => ({ contents: new ArrayBuffer(0) });
var useTextEncoder = (chunk) => textEncoder.encode(chunk);
var textEncoder = new TextEncoder();
var useUint8Array = (chunk) => new Uint8Array(chunk);
var useUint8ArrayWithOffset = (chunk) =>
    new Uint8Array(chunk.buffer, chunk.byteOffset, chunk.byteLength);
var truncateArrayBufferChunk = (convertedChunk, chunkSize) => convertedChunk.slice(0, chunkSize);
var addArrayBufferChunk = (
    convertedChunk,
    { contents: contents2, length: previousLength },
    length,
) => {
    const newContents = hasArrayBufferResize()
        ? resizeArrayBuffer(contents2, length)
        : resizeArrayBufferSlow(contents2, length);
    new Uint8Array(newContents).set(convertedChunk, previousLength);
    return newContents;
};
var resizeArrayBufferSlow = (contents2, length) => {
    if (length <= contents2.byteLength) {
        return contents2;
    }
    const arrayBuffer = new ArrayBuffer(getNewContentsLength(length));
    new Uint8Array(arrayBuffer).set(new Uint8Array(contents2), 0);
    return arrayBuffer;
};
var resizeArrayBuffer = (contents2, length) => {
    if (length <= contents2.maxByteLength) {
        contents2.resize(length);
        return contents2;
    }
    const arrayBuffer = new ArrayBuffer(length, { maxByteLength: getNewContentsLength(length) });
    new Uint8Array(arrayBuffer).set(new Uint8Array(contents2), 0);
    return arrayBuffer;
};
var getNewContentsLength = (length) =>
    SCALE_FACTOR ** Math.ceil(Math.log(length) / Math.log(SCALE_FACTOR));
var SCALE_FACTOR = 2;
var finalizeArrayBuffer = ({ contents: contents2, length }) =>
    hasArrayBufferResize() ? contents2 : contents2.slice(0, length);
var hasArrayBufferResize = () => 'resize' in ArrayBuffer.prototype;
var arrayBufferMethods = {
    init: initArrayBuffer,
    convertChunk: {
        string: useTextEncoder,
        buffer: useUint8Array,
        arrayBuffer: useUint8Array,
        dataView: useUint8ArrayWithOffset,
        typedArray: useUint8ArrayWithOffset,
        others: throwObjectStream,
    },
    getSize: getLengthProp,
    truncateChunk: truncateArrayBufferChunk,
    addChunk: addArrayBufferChunk,
    getFinalChunk: noop,
    finalize: finalizeArrayBuffer,
};

// node_modules/get-stream/source/buffer.js
async function getStreamAsBuffer(stream, options2) {
    if (!('Buffer' in globalThis)) {
        throw new Error('getStreamAsBuffer() is only supported in Node.js');
    }
    try {
        return arrayBufferToNodeBuffer(await getStreamAsArrayBuffer(stream, options2));
    } catch (error) {
        if (error.bufferedData !== void 0) {
            error.bufferedData = arrayBufferToNodeBuffer(error.bufferedData);
        }
        throw error;
    }
}
var arrayBufferToNodeBuffer = (arrayBuffer) => globalThis.Buffer.from(arrayBuffer);

// node_modules/get-stream/source/string.js
async function getStreamAsString(stream, options2) {
    return getStreamContents(stream, stringMethods, options2);
}
var initString = () => ({ contents: '', textDecoder: new TextDecoder() });
var useTextDecoder = (chunk, { textDecoder }) => textDecoder.decode(chunk, { stream: true });
var addStringChunk = (convertedChunk, { contents: contents2 }) => contents2 + convertedChunk;
var truncateStringChunk = (convertedChunk, chunkSize) => convertedChunk.slice(0, chunkSize);
var getFinalStringChunk = ({ textDecoder }) => {
    const finalChunk = textDecoder.decode();
    return finalChunk === '' ? void 0 : finalChunk;
};
var stringMethods = {
    init: initString,
    convertChunk: {
        string: identity,
        buffer: useTextDecoder,
        arrayBuffer: useTextDecoder,
        dataView: useTextDecoder,
        typedArray: useTextDecoder,
        others: throwObjectStream,
    },
    getSize: getLengthProp,
    truncateChunk: truncateStringChunk,
    addChunk: addStringChunk,
    getFinalChunk: getFinalStringChunk,
    finalize: getContentsProp,
};

// node_modules/execa/lib/stream.js
var import_merge_stream = __toESM(require_merge_stream(), 1);
var validateInputOptions = (input) => {
    if (input !== void 0) {
        throw new TypeError('The `input` and `inputFile` options cannot be both set.');
    }
};
var getInputSync = ({ input, inputFile }) => {
    if (typeof inputFile !== 'string') {
        return input;
    }
    validateInputOptions(input);
    return (0, import_node_fs2.readFileSync)(inputFile);
};
var handleInputSync = (options2) => {
    const input = getInputSync(options2);
    if (isStream(input)) {
        throw new TypeError('The `input` option cannot be a stream in sync mode');
    }
    return input;
};
var getInput = ({ input, inputFile }) => {
    if (typeof inputFile !== 'string') {
        return input;
    }
    validateInputOptions(input);
    return (0, import_node_fs2.createReadStream)(inputFile);
};
var handleInput = (spawned, options2) => {
    const input = getInput(options2);
    if (input === void 0) {
        return;
    }
    if (isStream(input)) {
        input.pipe(spawned.stdin);
    } else {
        spawned.stdin.end(input);
    }
};
var makeAllStream = (spawned, { all }) => {
    if (!all || (!spawned.stdout && !spawned.stderr)) {
        return;
    }
    const mixed = (0, import_merge_stream.default)();
    if (spawned.stdout) {
        mixed.add(spawned.stdout);
    }
    if (spawned.stderr) {
        mixed.add(spawned.stderr);
    }
    return mixed;
};
var getBufferedData = async (stream, streamPromise) => {
    if (!stream || streamPromise === void 0) {
        return;
    }
    await (0, import_promises.setTimeout)(0);
    stream.destroy();
    try {
        return await streamPromise;
    } catch (error) {
        return error.bufferedData;
    }
};
var getStreamPromise = (stream, { encoding, buffer, maxBuffer }) => {
    if (!stream || !buffer) {
        return;
    }
    if (encoding === 'utf8' || encoding === 'utf-8') {
        return getStreamAsString(stream, { maxBuffer });
    }
    if (encoding === null || encoding === 'buffer') {
        return getStreamAsBuffer(stream, { maxBuffer });
    }
    return applyEncoding(stream, maxBuffer, encoding);
};
var applyEncoding = async (stream, maxBuffer, encoding) => {
    const buffer = await getStreamAsBuffer(stream, { maxBuffer });
    return buffer.toString(encoding);
};
var getSpawnedResult = async (
    { stdout, stderr, all },
    { encoding, buffer, maxBuffer },
    processDone,
) => {
    const stdoutPromise = getStreamPromise(stdout, { encoding, buffer, maxBuffer });
    const stderrPromise = getStreamPromise(stderr, { encoding, buffer, maxBuffer });
    const allPromise = getStreamPromise(all, { encoding, buffer, maxBuffer: maxBuffer * 2 });
    try {
        return await Promise.all([processDone, stdoutPromise, stderrPromise, allPromise]);
    } catch (error) {
        return Promise.all([
            { error, signal: error.signal, timedOut: error.timedOut },
            getBufferedData(stdout, stdoutPromise),
            getBufferedData(stderr, stderrPromise),
            getBufferedData(all, allPromise),
        ]);
    }
};

// node_modules/execa/lib/promise.js
var nativePromisePrototype = (async () => {})().constructor.prototype;
var descriptors = ['then', 'catch', 'finally'].map((property) => [
    property,
    Reflect.getOwnPropertyDescriptor(nativePromisePrototype, property),
]);
var mergePromise = (spawned, promise) => {
    for (const [property, descriptor] of descriptors) {
        const value =
            typeof promise === 'function'
                ? (...args) => Reflect.apply(descriptor.value, promise(), args)
                : descriptor.value.bind(promise);
        Reflect.defineProperty(spawned, property, { ...descriptor, value });
    }
};
var getSpawnedPromise = (spawned) =>
    new Promise((resolve, reject) => {
        spawned.on('exit', (exitCode, signal) => {
            resolve({ exitCode, signal });
        });
        spawned.on('error', (error) => {
            reject(error);
        });
        if (spawned.stdin) {
            spawned.stdin.on('error', (error) => {
                reject(error);
            });
        }
    });

// node_modules/execa/lib/command.js
var import_node_buffer = require('buffer');
var import_node_child_process2 = require('child_process');
var normalizeArgs = (file, args = []) => {
    if (!Array.isArray(args)) {
        return [file];
    }
    return [file, ...args];
};
var NO_ESCAPE_REGEXP = /^[\w.-]+$/;
var escapeArg = (arg) => {
    if (typeof arg !== 'string' || NO_ESCAPE_REGEXP.test(arg)) {
        return arg;
    }
    return `"${arg.replaceAll('"', '\\"')}"`;
};
var joinCommand = (file, args) => normalizeArgs(file, args).join(' ');
var getEscapedCommand = (file, args) =>
    normalizeArgs(file, args)
        .map((arg) => escapeArg(arg))
        .join(' ');
var SPACES_REGEXP = / +/g;
var parseExpression = (expression) => {
    const typeOfExpression = typeof expression;
    if (typeOfExpression === 'string') {
        return expression;
    }
    if (typeOfExpression === 'number') {
        return String(expression);
    }
    if (
        typeOfExpression === 'object' &&
        expression !== null &&
        !(expression instanceof import_node_child_process2.ChildProcess) &&
        'stdout' in expression
    ) {
        const typeOfStdout = typeof expression.stdout;
        if (typeOfStdout === 'string') {
            return expression.stdout;
        }
        if (import_node_buffer.Buffer.isBuffer(expression.stdout)) {
            return expression.stdout.toString();
        }
        throw new TypeError(`Unexpected "${typeOfStdout}" stdout in template expression`);
    }
    throw new TypeError(`Unexpected "${typeOfExpression}" in template expression`);
};
var concatTokens = (tokens, nextTokens, isNew) =>
    isNew || tokens.length === 0 || nextTokens.length === 0
        ? [...tokens, ...nextTokens]
        : [...tokens.slice(0, -1), `${tokens.at(-1)}${nextTokens[0]}`, ...nextTokens.slice(1)];
var parseTemplate = ({ templates, expressions, tokens, index: index2, template }) => {
    const templateString = template ?? templates.raw[index2];
    const templateTokens = templateString.split(SPACES_REGEXP).filter(Boolean);
    const newTokens = concatTokens(tokens, templateTokens, templateString.startsWith(' '));
    if (index2 === expressions.length) {
        return newTokens;
    }
    const expression = expressions[index2];
    const expressionTokens = Array.isArray(expression)
        ? expression.map((expression2) => parseExpression(expression2))
        : [parseExpression(expression)];
    return concatTokens(newTokens, expressionTokens, templateString.endsWith(' '));
};
var parseTemplates = (templates, expressions) => {
    let tokens = [];
    for (const [index2, template] of templates.entries()) {
        tokens = parseTemplate({ templates, expressions, tokens, index: index2, template });
    }
    return tokens;
};

// node_modules/execa/lib/verbose.js
var import_node_util = require('util');
var import_node_process3 = __toESM(require('process'), 1);
var verboseDefault = (0, import_node_util.debuglog)('execa').enabled;
var padField = (field, padding) => String(field).padStart(padding, '0');
var getTimestamp = () => {
    const date = /* @__PURE__ */ new Date();
    return `${padField(date.getHours(), 2)}:${padField(date.getMinutes(), 2)}:${padField(date.getSeconds(), 2)}.${padField(date.getMilliseconds(), 3)}`;
};
var logCommand = (escapedCommand, { verbose }) => {
    if (!verbose) {
        return;
    }
    import_node_process3.default.stderr.write(`[${getTimestamp()}] ${escapedCommand}
`);
};

// node_modules/execa/index.js
var DEFAULT_MAX_BUFFER = 1e3 * 1e3 * 100;
var getEnv = ({ env: envOption, extendEnv, preferLocal, localDir, execPath }) => {
    const env = extendEnv ? { ...import_node_process4.default.env, ...envOption } : envOption;
    if (preferLocal) {
        return npmRunPathEnv({ env, cwd: localDir, execPath });
    }
    return env;
};
var handleArguments = (file, args, options2 = {}) => {
    const parsed = import_cross_spawn.default._parse(file, args, options2);
    file = parsed.command;
    args = parsed.args;
    options2 = parsed.options;
    options2 = {
        maxBuffer: DEFAULT_MAX_BUFFER,
        buffer: true,
        stripFinalNewline: true,
        extendEnv: true,
        preferLocal: false,
        localDir: options2.cwd || import_node_process4.default.cwd(),
        execPath: import_node_process4.default.execPath,
        encoding: 'utf8',
        reject: true,
        cleanup: true,
        all: false,
        windowsHide: true,
        verbose: verboseDefault,
        ...options2,
    };
    options2.env = getEnv(options2);
    options2.stdio = normalizeStdio(options2);
    if (
        import_node_process4.default.platform === 'win32' &&
        import_node_path2.default.basename(file, '.exe') === 'cmd'
    ) {
        args.unshift('/q');
    }
    return { file, args, options: options2, parsed };
};
var handleOutput = (options2, value, error) => {
    if (typeof value !== 'string' && !import_node_buffer2.Buffer.isBuffer(value)) {
        return error === void 0 ? void 0 : '';
    }
    if (options2.stripFinalNewline) {
        return stripFinalNewline(value);
    }
    return value;
};
function execa(file, args, options2) {
    const parsed = handleArguments(file, args, options2);
    const command = joinCommand(file, args);
    const escapedCommand = getEscapedCommand(file, args);
    logCommand(escapedCommand, parsed.options);
    validateTimeout(parsed.options);
    let spawned;
    try {
        spawned = import_node_child_process3.default.spawn(
            parsed.file,
            parsed.args,
            parsed.options,
        );
    } catch (error) {
        const dummySpawned = new import_node_child_process3.default.ChildProcess();
        const errorPromise = Promise.reject(
            makeError({
                error,
                stdout: '',
                stderr: '',
                all: '',
                command,
                escapedCommand,
                parsed,
                timedOut: false,
                isCanceled: false,
                killed: false,
            }),
        );
        mergePromise(dummySpawned, errorPromise);
        return dummySpawned;
    }
    const spawnedPromise = getSpawnedPromise(spawned);
    const timedPromise = setupTimeout(spawned, parsed.options, spawnedPromise);
    const processDone = setExitHandler(spawned, parsed.options, timedPromise);
    const context = { isCanceled: false };
    spawned.kill = spawnedKill.bind(null, spawned.kill.bind(spawned));
    spawned.cancel = spawnedCancel.bind(null, spawned, context);
    const handlePromise = async () => {
        const [{ error, exitCode, signal, timedOut }, stdoutResult, stderrResult, allResult] =
            await getSpawnedResult(spawned, parsed.options, processDone);
        const stdout = handleOutput(parsed.options, stdoutResult);
        const stderr = handleOutput(parsed.options, stderrResult);
        const all = handleOutput(parsed.options, allResult);
        if (error || exitCode !== 0 || signal !== null) {
            const returnedError = makeError({
                error,
                exitCode,
                signal,
                stdout,
                stderr,
                all,
                command,
                escapedCommand,
                parsed,
                timedOut,
                isCanceled:
                    context.isCanceled ||
                    (parsed.options.signal ? parsed.options.signal.aborted : false),
                killed: spawned.killed,
            });
            if (!parsed.options.reject) {
                return returnedError;
            }
            throw returnedError;
        }
        return {
            command,
            escapedCommand,
            exitCode: 0,
            stdout,
            stderr,
            all,
            failed: false,
            timedOut: false,
            isCanceled: false,
            killed: false,
        };
    };
    const handlePromiseOnce = onetime_default(handlePromise);
    handleInput(spawned, parsed.options);
    spawned.all = makeAllStream(spawned, parsed.options);
    addPipeMethods(spawned);
    mergePromise(spawned, handlePromiseOnce);
    return spawned;
}
function execaSync(file, args, options2) {
    const parsed = handleArguments(file, args, options2);
    const command = joinCommand(file, args);
    const escapedCommand = getEscapedCommand(file, args);
    logCommand(escapedCommand, parsed.options);
    const input = handleInputSync(parsed.options);
    let result;
    try {
        result = import_node_child_process3.default.spawnSync(parsed.file, parsed.args, {
            ...parsed.options,
            input,
        });
    } catch (error) {
        throw makeError({
            error,
            stdout: '',
            stderr: '',
            all: '',
            command,
            escapedCommand,
            parsed,
            timedOut: false,
            isCanceled: false,
            killed: false,
        });
    }
    const stdout = handleOutput(parsed.options, result.stdout, result.error);
    const stderr = handleOutput(parsed.options, result.stderr, result.error);
    if (result.error || result.status !== 0 || result.signal !== null) {
        const error = makeError({
            stdout,
            stderr,
            error: result.error,
            signal: result.signal,
            exitCode: result.status,
            command,
            escapedCommand,
            parsed,
            timedOut: result.error && result.error.code === 'ETIMEDOUT',
            isCanceled: false,
            killed: result.signal !== null,
        });
        if (!parsed.options.reject) {
            return error;
        }
        throw error;
    }
    return {
        command,
        escapedCommand,
        exitCode: 0,
        stdout,
        stderr,
        failed: false,
        timedOut: false,
        isCanceled: false,
        killed: false,
    };
}
var normalizeScriptStdin = ({ input, inputFile, stdio }) =>
    input === void 0 && inputFile === void 0 && stdio === void 0 ? { stdin: 'inherit' } : {};
var normalizeScriptOptions = (options2 = {}) => ({
    preferLocal: true,
    ...normalizeScriptStdin(options2),
    ...options2,
});
function create$(options2) {
    function $4(templatesOrOptions, ...expressions) {
        if (!Array.isArray(templatesOrOptions)) {
            return create$({ ...options2, ...templatesOrOptions });
        }
        const [file, ...args] = parseTemplates(templatesOrOptions, expressions);
        return execa(file, args, normalizeScriptOptions(options2));
    }
    $4.sync = (templates, ...expressions) => {
        if (!Array.isArray(templates)) {
            throw new TypeError(
                'Please use $(options).sync`command` instead of $.sync(options)`command`.',
            );
        }
        const [file, ...args] = parseTemplates(templates, expressions);
        return execaSync(file, args, normalizeScriptOptions(options2));
    };
    return $4;
}
var $2 = create$();

// utils/png_webp.ts
async function pngToWebp() {
    console.log();
    await $2`npx webp-batch-convert -I images -O images_webp`;
    console.log();
}
var png_webp_default = {
    pngToWebp,
};

// utils/lang.ts
var import_xlsx = __toESM(require_xlsx(), 1);
var import_path = __toESM(require('path'), 1);
var import_fs_extra = __toESM(require_lib2(), 1);
function exportLangToJson() {
    const currentDirectory = process.cwd();
    var files = import_fs_extra.default.readdirSync(currentDirectory);
    const excelFiles = files.filter(
        (file) =>
            import_path.default.extname(file).toLowerCase() === '.xlsx' && !file.includes('~'),
    );
    console.log('\u5F53\u524D\u6587\u4EF6\u5939\u4E0B\u7684.xlsx\u6587\u4EF6:', excelFiles);
    if (excelFiles.length == 0) {
        console.log('\u6CA1\u6709\u627E\u5230.xlsx\u6587\u4EF6');
        return;
    }
    excelFiles.forEach((str, idx) => {
        var data2 = import_xlsx.default.readFile(excelFiles[idx]);
        const Sheet = data2.Sheets[Object.keys(data2.Sheets)[0]];
        const exportJsonMap = {};
        const keyNumMap = {};
        const langNumMap = {};
        const name = str.split('.')[0];
        Object.keys(Sheet).forEach((key) => {
            if (key.indexOf('!') != -1) {
                return;
            }
            const value = Sheet[key];
            const s2 = key.slice(0, 1);
            const v = parseInt(key.slice(1, key.length)) * 1;
            if (s2 == 'A') {
                keyNumMap[v] = value.w.trim();
            } else {
                if (v == 1) {
                    exportJsonMap[value.w] = {};
                    langNumMap[s2] = value.w.trim();
                } else {
                    const lang = langNumMap[s2];
                    exportJsonMap[lang][keyNumMap[v]] = value.w.trim();
                }
            }
        });
        import_fs_extra.default.removeSync(`${currentDirectory}/langs`);
        import_fs_extra.default.mkdirSync(`${currentDirectory}/langs`);
        if (!import_fs_extra.default.existsSync(`${currentDirectory}/langs/${name}`)) {
            import_fs_extra.default.mkdirSync(`${currentDirectory}/langs/${name}`);
        }
        const newObj = {};
        Object.keys(exportJsonMap).forEach((i2) => {
            newObj[i2] = {
                ...exportJsonMap[i2],
            };
        });
        import_fs_extra.default.writeFile(
            `${currentDirectory}/langs/${name}/langs.json`,
            JSON.stringify(newObj, null, 4),
        );
        import_fs_extra.default.writeFile(
            `${currentDirectory}/langs/${name}/langsKey.json`,
            JSON.stringify(Object.keys(exportJsonMap), null, 4),
        );
        console.log(
            '\u6587\u4EF6\u5DF2\u7ECF\u751F\u6210',
            excelFiles[idx],
            '==>',
            '`./langs/${name}`',
        );
    });
}
var lang_default = {
    exportLangToJson,
};

// node_modules/node-fetch/src/index.js
var import_node_http2 = __toESM(require('http'), 1);
var import_node_https = __toESM(require('https'), 1);
var import_node_zlib = __toESM(require('zlib'), 1);
var import_node_stream2 = __toESM(require('stream'), 1);
var import_node_buffer4 = require('buffer');

// node_modules/data-uri-to-buffer/dist/index.js
function dataUriToBuffer(uri) {
    if (!/^data:/i.test(uri)) {
        throw new TypeError('`uri` does not appear to be a Data URI (must begin with "data:")');
    }
    uri = uri.replace(/\r?\n/g, '');
    const firstComma = uri.indexOf(',');
    if (firstComma === -1 || firstComma <= 4) {
        throw new TypeError('malformed data: URI');
    }
    const meta = uri.substring(5, firstComma).split(';');
    let charset = '';
    let base64 = false;
    const type = meta[0] || 'text/plain';
    let typeFull = type;
    for (let i2 = 1; i2 < meta.length; i2++) {
        if (meta[i2] === 'base64') {
            base64 = true;
        } else if (meta[i2]) {
            typeFull += `;${meta[i2]}`;
            if (meta[i2].indexOf('charset=') === 0) {
                charset = meta[i2].substring(8);
            }
        }
    }
    if (!meta[0] && !charset.length) {
        typeFull += ';charset=US-ASCII';
        charset = 'US-ASCII';
    }
    const encoding = base64 ? 'base64' : 'ascii';
    const data2 = unescape(uri.substring(firstComma + 1));
    const buffer = Buffer.from(data2, encoding);
    buffer.type = type;
    buffer.typeFull = typeFull;
    buffer.charset = charset;
    return buffer;
}
var dist_default = dataUriToBuffer;

// node_modules/node-fetch/src/body.js
var import_node_stream = __toESM(require('stream'), 1);
var import_node_util2 = require('util');
var import_node_buffer3 = require('buffer');
init_fetch_blob();
init_esm_min();

// node_modules/node-fetch/src/errors/base.js
var FetchBaseError = class extends Error {
    constructor(message, type) {
        super(message);
        Error.captureStackTrace(this, this.constructor);
        this.type = type;
    }
    get name() {
        return this.constructor.name;
    }
    get [Symbol.toStringTag]() {
        return this.constructor.name;
    }
};

// node_modules/node-fetch/src/errors/fetch-error.js
var FetchError = class extends FetchBaseError {
    /**
     * @param  {string} message -      Error message for human
     * @param  {string} [type] -        Error type for machine
     * @param  {SystemError} [systemError] - For Node.js system error
     */
    constructor(message, type, systemError) {
        super(message, type);
        if (systemError) {
            this.code = this.errno = systemError.code;
            this.erroredSysCall = systemError.syscall;
        }
    }
};

// node_modules/node-fetch/src/utils/is.js
var NAME = Symbol.toStringTag;
var isURLSearchParameters = (object) => {
    return (
        typeof object === 'object' &&
        typeof object.append === 'function' &&
        typeof object.delete === 'function' &&
        typeof object.get === 'function' &&
        typeof object.getAll === 'function' &&
        typeof object.has === 'function' &&
        typeof object.set === 'function' &&
        typeof object.sort === 'function' &&
        object[NAME] === 'URLSearchParams'
    );
};
var isBlob = (object) => {
    return (
        object &&
        typeof object === 'object' &&
        typeof object.arrayBuffer === 'function' &&
        typeof object.type === 'string' &&
        typeof object.stream === 'function' &&
        typeof object.constructor === 'function' &&
        /^(Blob|File)$/.test(object[NAME])
    );
};
var isAbortSignal = (object) => {
    return (
        typeof object === 'object' &&
        (object[NAME] === 'AbortSignal' || object[NAME] === 'EventTarget')
    );
};
var isDomainOrSubdomain = (destination, original) => {
    const orig = new URL(original).hostname;
    const dest = new URL(destination).hostname;
    return orig === dest || orig.endsWith(`.${dest}`);
};
var isSameProtocol = (destination, original) => {
    const orig = new URL(original).protocol;
    const dest = new URL(destination).protocol;
    return orig === dest;
};

// node_modules/node-fetch/src/body.js
var pipeline = (0, import_node_util2.promisify)(import_node_stream.default.pipeline);
var INTERNALS = Symbol('Body internals');
var Body = class {
    constructor(body, { size = 0 } = {}) {
        let boundary = null;
        if (body === null) {
            body = null;
        } else if (isURLSearchParameters(body)) {
            body = import_node_buffer3.Buffer.from(body.toString());
        } else if (isBlob(body)) {
        } else if (import_node_buffer3.Buffer.isBuffer(body)) {
        } else if (import_node_util2.types.isAnyArrayBuffer(body)) {
            body = import_node_buffer3.Buffer.from(body);
        } else if (ArrayBuffer.isView(body)) {
            body = import_node_buffer3.Buffer.from(body.buffer, body.byteOffset, body.byteLength);
        } else if (body instanceof import_node_stream.default) {
        } else if (body instanceof FormData) {
            body = formDataToBlob(body);
            boundary = body.type.split('=')[1];
        } else {
            body = import_node_buffer3.Buffer.from(String(body));
        }
        let stream = body;
        if (import_node_buffer3.Buffer.isBuffer(body)) {
            stream = import_node_stream.default.Readable.from(body);
        } else if (isBlob(body)) {
            stream = import_node_stream.default.Readable.from(body.stream());
        }
        this[INTERNALS] = {
            body,
            stream,
            boundary,
            disturbed: false,
            error: null,
        };
        this.size = size;
        if (body instanceof import_node_stream.default) {
            body.on('error', (error_) => {
                const error =
                    error_ instanceof FetchBaseError
                        ? error_
                        : new FetchError(
                              `Invalid response body while trying to fetch ${this.url}: ${error_.message}`,
                              'system',
                              error_,
                          );
                this[INTERNALS].error = error;
            });
        }
    }
    get body() {
        return this[INTERNALS].stream;
    }
    get bodyUsed() {
        return this[INTERNALS].disturbed;
    }
    /**
     * Decode response as ArrayBuffer
     *
     * @return  Promise
     */
    async arrayBuffer() {
        const { buffer, byteOffset, byteLength } = await consumeBody(this);
        return buffer.slice(byteOffset, byteOffset + byteLength);
    }
    async formData() {
        const ct = this.headers.get('content-type');
        if (ct.startsWith('application/x-www-form-urlencoded')) {
            const formData = new FormData();
            const parameters = new URLSearchParams(await this.text());
            for (const [name, value] of parameters) {
                formData.append(name, value);
            }
            return formData;
        }
        const { toFormData: toFormData2 } = await Promise.resolve().then(
            () => (init_multipart_parser(), multipart_parser_exports),
        );
        return toFormData2(this.body, ct);
    }
    /**
     * Return raw response as Blob
     *
     * @return Promise
     */
    async blob() {
        const ct =
            (this.headers && this.headers.get('content-type')) ||
            (this[INTERNALS].body && this[INTERNALS].body.type) ||
            '';
        const buf = await this.arrayBuffer();
        return new fetch_blob_default([buf], {
            type: ct,
        });
    }
    /**
     * Decode response as json
     *
     * @return  Promise
     */
    async json() {
        const text3 = await this.text();
        return JSON.parse(text3);
    }
    /**
     * Decode response as text
     *
     * @return  Promise
     */
    async text() {
        const buffer = await consumeBody(this);
        return new TextDecoder().decode(buffer);
    }
    /**
     * Decode response as buffer (non-spec api)
     *
     * @return  Promise
     */
    buffer() {
        return consumeBody(this);
    }
};
Body.prototype.buffer = (0, import_node_util2.deprecate)(
    Body.prototype.buffer,
    "Please use 'response.arrayBuffer()' instead of 'response.buffer()'",
    'node-fetch#buffer',
);
Object.defineProperties(Body.prototype, {
    body: { enumerable: true },
    bodyUsed: { enumerable: true },
    arrayBuffer: { enumerable: true },
    blob: { enumerable: true },
    json: { enumerable: true },
    text: { enumerable: true },
    data: {
        get: (0, import_node_util2.deprecate)(
            () => {},
            "data doesn't exist, use json(), text(), arrayBuffer(), or body instead",
            'https://github.com/node-fetch/node-fetch/issues/1000 (response)',
        ),
    },
});
async function consumeBody(data2) {
    if (data2[INTERNALS].disturbed) {
        throw new TypeError(`body used already for: ${data2.url}`);
    }
    data2[INTERNALS].disturbed = true;
    if (data2[INTERNALS].error) {
        throw data2[INTERNALS].error;
    }
    const { body } = data2;
    if (body === null) {
        return import_node_buffer3.Buffer.alloc(0);
    }
    if (!(body instanceof import_node_stream.default)) {
        return import_node_buffer3.Buffer.alloc(0);
    }
    const accum = [];
    let accumBytes = 0;
    try {
        for await (const chunk of body) {
            if (data2.size > 0 && accumBytes + chunk.length > data2.size) {
                const error = new FetchError(
                    `content size at ${data2.url} over limit: ${data2.size}`,
                    'max-size',
                );
                body.destroy(error);
                throw error;
            }
            accumBytes += chunk.length;
            accum.push(chunk);
        }
    } catch (error) {
        const error_ =
            error instanceof FetchBaseError
                ? error
                : new FetchError(
                      `Invalid response body while trying to fetch ${data2.url}: ${error.message}`,
                      'system',
                      error,
                  );
        throw error_;
    }
    if (body.readableEnded === true || body._readableState.ended === true) {
        try {
            if (accum.every((c) => typeof c === 'string')) {
                return import_node_buffer3.Buffer.from(accum.join(''));
            }
            return import_node_buffer3.Buffer.concat(accum, accumBytes);
        } catch (error) {
            throw new FetchError(
                `Could not create Buffer from response body for ${data2.url}: ${error.message}`,
                'system',
                error,
            );
        }
    } else {
        throw new FetchError(
            `Premature close of server response while trying to fetch ${data2.url}`,
        );
    }
}
var clone = (instance, highWaterMark) => {
    let p1;
    let p2;
    let { body } = instance[INTERNALS];
    if (instance.bodyUsed) {
        throw new Error('cannot clone body after it is used');
    }
    if (body instanceof import_node_stream.default && typeof body.getBoundary !== 'function') {
        p1 = new import_node_stream.PassThrough({ highWaterMark });
        p2 = new import_node_stream.PassThrough({ highWaterMark });
        body.pipe(p1);
        body.pipe(p2);
        instance[INTERNALS].stream = p1;
        body = p2;
    }
    return body;
};
var getNonSpecFormDataBoundary = (0, import_node_util2.deprecate)(
    (body) => body.getBoundary(),
    "form-data doesn't follow the spec and requires special treatment. Use alternative package",
    'https://github.com/node-fetch/node-fetch/issues/1167',
);
var extractContentType = (body, request) => {
    if (body === null) {
        return null;
    }
    if (typeof body === 'string') {
        return 'text/plain;charset=UTF-8';
    }
    if (isURLSearchParameters(body)) {
        return 'application/x-www-form-urlencoded;charset=UTF-8';
    }
    if (isBlob(body)) {
        return body.type || null;
    }
    if (
        import_node_buffer3.Buffer.isBuffer(body) ||
        import_node_util2.types.isAnyArrayBuffer(body) ||
        ArrayBuffer.isView(body)
    ) {
        return null;
    }
    if (body instanceof FormData) {
        return `multipart/form-data; boundary=${request[INTERNALS].boundary}`;
    }
    if (body && typeof body.getBoundary === 'function') {
        return `multipart/form-data;boundary=${getNonSpecFormDataBoundary(body)}`;
    }
    if (body instanceof import_node_stream.default) {
        return null;
    }
    return 'text/plain;charset=UTF-8';
};
var getTotalBytes = (request) => {
    const { body } = request[INTERNALS];
    if (body === null) {
        return 0;
    }
    if (isBlob(body)) {
        return body.size;
    }
    if (import_node_buffer3.Buffer.isBuffer(body)) {
        return body.length;
    }
    if (body && typeof body.getLengthSync === 'function') {
        return body.hasKnownLength && body.hasKnownLength() ? body.getLengthSync() : null;
    }
    return null;
};
var writeToStream = async (dest, { body }) => {
    if (body === null) {
        dest.end();
    } else {
        await pipeline(body, dest);
    }
};

// node_modules/node-fetch/src/headers.js
var import_node_util3 = require('util');
var import_node_http = __toESM(require('http'), 1);
var validateHeaderName =
    typeof import_node_http.default.validateHeaderName === 'function'
        ? import_node_http.default.validateHeaderName
        : (name) => {
              if (!/^[\^`\-\w!#$%&'*+.|~]+$/.test(name)) {
                  const error = new TypeError(`Header name must be a valid HTTP token [${name}]`);
                  Object.defineProperty(error, 'code', { value: 'ERR_INVALID_HTTP_TOKEN' });
                  throw error;
              }
          };
var validateHeaderValue =
    typeof import_node_http.default.validateHeaderValue === 'function'
        ? import_node_http.default.validateHeaderValue
        : (name, value) => {
              if (/[^\t\u0020-\u007E\u0080-\u00FF]/.test(value)) {
                  const error = new TypeError(`Invalid character in header content ["${name}"]`);
                  Object.defineProperty(error, 'code', { value: 'ERR_INVALID_CHAR' });
                  throw error;
              }
          };
var Headers = class _Headers extends URLSearchParams {
    /**
     * Headers class
     *
     * @constructor
     * @param {HeadersInit} [init] - Response headers
     */
    constructor(init2) {
        let result = [];
        if (init2 instanceof _Headers) {
            const raw = init2.raw();
            for (const [name, values] of Object.entries(raw)) {
                result.push(...values.map((value) => [name, value]));
            }
        } else if (init2 == null) {
        } else if (typeof init2 === 'object' && !import_node_util3.types.isBoxedPrimitive(init2)) {
            const method = init2[Symbol.iterator];
            if (method == null) {
                result.push(...Object.entries(init2));
            } else {
                if (typeof method !== 'function') {
                    throw new TypeError('Header pairs must be iterable');
                }
                result = [...init2]
                    .map((pair) => {
                        if (
                            typeof pair !== 'object' ||
                            import_node_util3.types.isBoxedPrimitive(pair)
                        ) {
                            throw new TypeError('Each header pair must be an iterable object');
                        }
                        return [...pair];
                    })
                    .map((pair) => {
                        if (pair.length !== 2) {
                            throw new TypeError('Each header pair must be a name/value tuple');
                        }
                        return [...pair];
                    });
            }
        } else {
            throw new TypeError(
                "Failed to construct 'Headers': The provided value is not of type '(sequence<sequence<ByteString>> or record<ByteString, ByteString>)",
            );
        }
        result =
            result.length > 0
                ? result.map(([name, value]) => {
                      validateHeaderName(name);
                      validateHeaderValue(name, String(value));
                      return [String(name).toLowerCase(), String(value)];
                  })
                : void 0;
        super(result);
        return new Proxy(this, {
            get(target, p, receiver) {
                switch (p) {
                    case 'append':
                    case 'set':
                        return (name, value) => {
                            validateHeaderName(name);
                            validateHeaderValue(name, String(value));
                            return URLSearchParams.prototype[p].call(
                                target,
                                String(name).toLowerCase(),
                                String(value),
                            );
                        };
                    case 'delete':
                    case 'has':
                    case 'getAll':
                        return (name) => {
                            validateHeaderName(name);
                            return URLSearchParams.prototype[p].call(
                                target,
                                String(name).toLowerCase(),
                            );
                        };
                    case 'keys':
                        return () => {
                            target.sort();
                            return new Set(URLSearchParams.prototype.keys.call(target)).keys();
                        };
                    default:
                        return Reflect.get(target, p, receiver);
                }
            },
        });
    }
    get [Symbol.toStringTag]() {
        return this.constructor.name;
    }
    toString() {
        return Object.prototype.toString.call(this);
    }
    get(name) {
        const values = this.getAll(name);
        if (values.length === 0) {
            return null;
        }
        let value = values.join(', ');
        if (/^content-encoding$/i.test(name)) {
            value = value.toLowerCase();
        }
        return value;
    }
    forEach(callback, thisArg = void 0) {
        for (const name of this.keys()) {
            Reflect.apply(callback, thisArg, [this.get(name), name, this]);
        }
    }
    *values() {
        for (const name of this.keys()) {
            yield this.get(name);
        }
    }
    /**
     * @type {() => IterableIterator<[string, string]>}
     */
    *entries() {
        for (const name of this.keys()) {
            yield [name, this.get(name)];
        }
    }
    [Symbol.iterator]() {
        return this.entries();
    }
    /**
     * Node-fetch non-spec method
     * returning all headers and their values as array
     * @returns {Record<string, string[]>}
     */
    raw() {
        return [...this.keys()].reduce((result, key) => {
            result[key] = this.getAll(key);
            return result;
        }, {});
    }
    /**
     * For better console.log(headers) and also to convert Headers into Node.js Request compatible format
     */
    [Symbol.for('nodejs.util.inspect.custom')]() {
        return [...this.keys()].reduce((result, key) => {
            const values = this.getAll(key);
            if (key === 'host') {
                result[key] = values[0];
            } else {
                result[key] = values.length > 1 ? values : values[0];
            }
            return result;
        }, {});
    }
};
Object.defineProperties(
    Headers.prototype,
    ['get', 'entries', 'forEach', 'values'].reduce((result, property) => {
        result[property] = { enumerable: true };
        return result;
    }, {}),
);
function fromRawHeaders(headers = []) {
    return new Headers(
        headers
            .reduce((result, value, index2, array) => {
                if (index2 % 2 === 0) {
                    result.push(array.slice(index2, index2 + 2));
                }
                return result;
            }, [])
            .filter(([name, value]) => {
                try {
                    validateHeaderName(name);
                    validateHeaderValue(name, String(value));
                    return true;
                } catch {
                    return false;
                }
            }),
    );
}

// node_modules/node-fetch/src/utils/is-redirect.js
var redirectStatus = /* @__PURE__ */ new Set([301, 302, 303, 307, 308]);
var isRedirect = (code) => {
    return redirectStatus.has(code);
};

// node_modules/node-fetch/src/response.js
var INTERNALS2 = Symbol('Response internals');
var Response = class _Response extends Body {
    constructor(body = null, options2 = {}) {
        super(body, options2);
        const status = options2.status != null ? options2.status : 200;
        const headers = new Headers(options2.headers);
        if (body !== null && !headers.has('Content-Type')) {
            const contentType = extractContentType(body, this);
            if (contentType) {
                headers.append('Content-Type', contentType);
            }
        }
        this[INTERNALS2] = {
            type: 'default',
            url: options2.url,
            status,
            statusText: options2.statusText || '',
            headers,
            counter: options2.counter,
            highWaterMark: options2.highWaterMark,
        };
    }
    get type() {
        return this[INTERNALS2].type;
    }
    get url() {
        return this[INTERNALS2].url || '';
    }
    get status() {
        return this[INTERNALS2].status;
    }
    /**
     * Convenience property representing if the request ended normally
     */
    get ok() {
        return this[INTERNALS2].status >= 200 && this[INTERNALS2].status < 300;
    }
    get redirected() {
        return this[INTERNALS2].counter > 0;
    }
    get statusText() {
        return this[INTERNALS2].statusText;
    }
    get headers() {
        return this[INTERNALS2].headers;
    }
    get highWaterMark() {
        return this[INTERNALS2].highWaterMark;
    }
    /**
     * Clone this response
     *
     * @return  Response
     */
    clone() {
        return new _Response(clone(this, this.highWaterMark), {
            type: this.type,
            url: this.url,
            status: this.status,
            statusText: this.statusText,
            headers: this.headers,
            ok: this.ok,
            redirected: this.redirected,
            size: this.size,
            highWaterMark: this.highWaterMark,
        });
    }
    /**
     * @param {string} url    The URL that the new response is to originate from.
     * @param {number} status An optional status code for the response (e.g., 302.)
     * @returns {Response}    A Response object.
     */
    static redirect(url, status = 302) {
        if (!isRedirect(status)) {
            throw new RangeError('Failed to execute "redirect" on "response": Invalid status code');
        }
        return new _Response(null, {
            headers: {
                location: new URL(url).toString(),
            },
            status,
        });
    }
    static error() {
        const response = new _Response(null, { status: 0, statusText: '' });
        response[INTERNALS2].type = 'error';
        return response;
    }
    static json(data2 = void 0, init2 = {}) {
        const body = JSON.stringify(data2);
        if (body === void 0) {
            throw new TypeError('data is not JSON serializable');
        }
        const headers = new Headers(init2 && init2.headers);
        if (!headers.has('content-type')) {
            headers.set('content-type', 'application/json');
        }
        return new _Response(body, {
            ...init2,
            headers,
        });
    }
    get [Symbol.toStringTag]() {
        return 'Response';
    }
};
Object.defineProperties(Response.prototype, {
    type: { enumerable: true },
    url: { enumerable: true },
    status: { enumerable: true },
    ok: { enumerable: true },
    redirected: { enumerable: true },
    statusText: { enumerable: true },
    headers: { enumerable: true },
    clone: { enumerable: true },
});

// node_modules/node-fetch/src/request.js
var import_node_url2 = require('url');
var import_node_util4 = require('util');

// node_modules/node-fetch/src/utils/get-search.js
var getSearch = (parsedURL) => {
    if (parsedURL.search) {
        return parsedURL.search;
    }
    const lastOffset = parsedURL.href.length - 1;
    const hash = parsedURL.hash || (parsedURL.href[lastOffset] === '#' ? '#' : '');
    return parsedURL.href[lastOffset - hash.length] === '?' ? '?' : '';
};

// node_modules/node-fetch/src/utils/referrer.js
var import_node_net = require('net');
function stripURLForUseAsAReferrer(url, originOnly = false) {
    if (url == null) {
        return 'no-referrer';
    }
    url = new URL(url);
    if (/^(about|blob|data):$/.test(url.protocol)) {
        return 'no-referrer';
    }
    url.username = '';
    url.password = '';
    url.hash = '';
    if (originOnly) {
        url.pathname = '';
        url.search = '';
    }
    return url;
}
var ReferrerPolicy = /* @__PURE__ */ new Set([
    '',
    'no-referrer',
    'no-referrer-when-downgrade',
    'same-origin',
    'origin',
    'strict-origin',
    'origin-when-cross-origin',
    'strict-origin-when-cross-origin',
    'unsafe-url',
]);
var DEFAULT_REFERRER_POLICY = 'strict-origin-when-cross-origin';
function validateReferrerPolicy(referrerPolicy) {
    if (!ReferrerPolicy.has(referrerPolicy)) {
        throw new TypeError(`Invalid referrerPolicy: ${referrerPolicy}`);
    }
    return referrerPolicy;
}
function isOriginPotentiallyTrustworthy(url) {
    if (/^(http|ws)s:$/.test(url.protocol)) {
        return true;
    }
    const hostIp = url.host.replace(/(^\[)|(]$)/g, '');
    const hostIPVersion = (0, import_node_net.isIP)(hostIp);
    if (hostIPVersion === 4 && /^127\./.test(hostIp)) {
        return true;
    }
    if (hostIPVersion === 6 && /^(((0+:){7})|(::(0+:){0,6}))0*1$/.test(hostIp)) {
        return true;
    }
    if (url.host === 'localhost' || url.host.endsWith('.localhost')) {
        return false;
    }
    if (url.protocol === 'file:') {
        return true;
    }
    return false;
}
function isUrlPotentiallyTrustworthy(url) {
    if (/^about:(blank|srcdoc)$/.test(url)) {
        return true;
    }
    if (url.protocol === 'data:') {
        return true;
    }
    if (/^(blob|filesystem):$/.test(url.protocol)) {
        return true;
    }
    return isOriginPotentiallyTrustworthy(url);
}
function determineRequestsReferrer(request, { referrerURLCallback, referrerOriginCallback } = {}) {
    if (request.referrer === 'no-referrer' || request.referrerPolicy === '') {
        return null;
    }
    const policy = request.referrerPolicy;
    if (request.referrer === 'about:client') {
        return 'no-referrer';
    }
    const referrerSource = request.referrer;
    let referrerURL = stripURLForUseAsAReferrer(referrerSource);
    let referrerOrigin = stripURLForUseAsAReferrer(referrerSource, true);
    if (referrerURL.toString().length > 4096) {
        referrerURL = referrerOrigin;
    }
    if (referrerURLCallback) {
        referrerURL = referrerURLCallback(referrerURL);
    }
    if (referrerOriginCallback) {
        referrerOrigin = referrerOriginCallback(referrerOrigin);
    }
    const currentURL = new URL(request.url);
    switch (policy) {
        case 'no-referrer':
            return 'no-referrer';
        case 'origin':
            return referrerOrigin;
        case 'unsafe-url':
            return referrerURL;
        case 'strict-origin':
            if (
                isUrlPotentiallyTrustworthy(referrerURL) &&
                !isUrlPotentiallyTrustworthy(currentURL)
            ) {
                return 'no-referrer';
            }
            return referrerOrigin.toString();
        case 'strict-origin-when-cross-origin':
            if (referrerURL.origin === currentURL.origin) {
                return referrerURL;
            }
            if (
                isUrlPotentiallyTrustworthy(referrerURL) &&
                !isUrlPotentiallyTrustworthy(currentURL)
            ) {
                return 'no-referrer';
            }
            return referrerOrigin;
        case 'same-origin':
            if (referrerURL.origin === currentURL.origin) {
                return referrerURL;
            }
            return 'no-referrer';
        case 'origin-when-cross-origin':
            if (referrerURL.origin === currentURL.origin) {
                return referrerURL;
            }
            return referrerOrigin;
        case 'no-referrer-when-downgrade':
            if (
                isUrlPotentiallyTrustworthy(referrerURL) &&
                !isUrlPotentiallyTrustworthy(currentURL)
            ) {
                return 'no-referrer';
            }
            return referrerURL;
        default:
            throw new TypeError(`Invalid referrerPolicy: ${policy}`);
    }
}
function parseReferrerPolicyFromHeader(headers) {
    const policyTokens = (headers.get('referrer-policy') || '').split(/[,\s]+/);
    let policy = '';
    for (const token of policyTokens) {
        if (token && ReferrerPolicy.has(token)) {
            policy = token;
        }
    }
    return policy;
}

// node_modules/node-fetch/src/request.js
var INTERNALS3 = Symbol('Request internals');
var isRequest = (object) => {
    return typeof object === 'object' && typeof object[INTERNALS3] === 'object';
};
var doBadDataWarn = (0, import_node_util4.deprecate)(
    () => {},
    '.data is not a valid RequestInit property, use .body instead',
    'https://github.com/node-fetch/node-fetch/issues/1000 (request)',
);
var Request = class _Request extends Body {
    constructor(input, init2 = {}) {
        let parsedURL;
        if (isRequest(input)) {
            parsedURL = new URL(input.url);
        } else {
            parsedURL = new URL(input);
            input = {};
        }
        if (parsedURL.username !== '' || parsedURL.password !== '') {
            throw new TypeError(`${parsedURL} is an url with embedded credentials.`);
        }
        let method = init2.method || input.method || 'GET';
        if (/^(delete|get|head|options|post|put)$/i.test(method)) {
            method = method.toUpperCase();
        }
        if (!isRequest(init2) && 'data' in init2) {
            doBadDataWarn();
        }
        if (
            (init2.body != null || (isRequest(input) && input.body !== null)) &&
            (method === 'GET' || method === 'HEAD')
        ) {
            throw new TypeError('Request with GET/HEAD method cannot have body');
        }
        const inputBody = init2.body
            ? init2.body
            : isRequest(input) && input.body !== null
              ? clone(input)
              : null;
        super(inputBody, {
            size: init2.size || input.size || 0,
        });
        const headers = new Headers(init2.headers || input.headers || {});
        if (inputBody !== null && !headers.has('Content-Type')) {
            const contentType = extractContentType(inputBody, this);
            if (contentType) {
                headers.set('Content-Type', contentType);
            }
        }
        let signal = isRequest(input) ? input.signal : null;
        if ('signal' in init2) {
            signal = init2.signal;
        }
        if (signal != null && !isAbortSignal(signal)) {
            throw new TypeError('Expected signal to be an instanceof AbortSignal or EventTarget');
        }
        let referrer = init2.referrer == null ? input.referrer : init2.referrer;
        if (referrer === '') {
            referrer = 'no-referrer';
        } else if (referrer) {
            const parsedReferrer = new URL(referrer);
            referrer = /^about:(\/\/)?client$/.test(parsedReferrer) ? 'client' : parsedReferrer;
        } else {
            referrer = void 0;
        }
        this[INTERNALS3] = {
            method,
            redirect: init2.redirect || input.redirect || 'follow',
            headers,
            parsedURL,
            signal,
            referrer,
        };
        this.follow =
            init2.follow === void 0 ? (input.follow === void 0 ? 20 : input.follow) : init2.follow;
        this.compress =
            init2.compress === void 0
                ? input.compress === void 0
                    ? true
                    : input.compress
                : init2.compress;
        this.counter = init2.counter || input.counter || 0;
        this.agent = init2.agent || input.agent;
        this.highWaterMark = init2.highWaterMark || input.highWaterMark || 16384;
        this.insecureHTTPParser = init2.insecureHTTPParser || input.insecureHTTPParser || false;
        this.referrerPolicy = init2.referrerPolicy || input.referrerPolicy || '';
    }
    /** @returns {string} */
    get method() {
        return this[INTERNALS3].method;
    }
    /** @returns {string} */
    get url() {
        return (0, import_node_url2.format)(this[INTERNALS3].parsedURL);
    }
    /** @returns {Headers} */
    get headers() {
        return this[INTERNALS3].headers;
    }
    get redirect() {
        return this[INTERNALS3].redirect;
    }
    /** @returns {AbortSignal} */
    get signal() {
        return this[INTERNALS3].signal;
    }
    // https://fetch.spec.whatwg.org/#dom-request-referrer
    get referrer() {
        if (this[INTERNALS3].referrer === 'no-referrer') {
            return '';
        }
        if (this[INTERNALS3].referrer === 'client') {
            return 'about:client';
        }
        if (this[INTERNALS3].referrer) {
            return this[INTERNALS3].referrer.toString();
        }
        return void 0;
    }
    get referrerPolicy() {
        return this[INTERNALS3].referrerPolicy;
    }
    set referrerPolicy(referrerPolicy) {
        this[INTERNALS3].referrerPolicy = validateReferrerPolicy(referrerPolicy);
    }
    /**
     * Clone this request
     *
     * @return  Request
     */
    clone() {
        return new _Request(this);
    }
    get [Symbol.toStringTag]() {
        return 'Request';
    }
};
Object.defineProperties(Request.prototype, {
    method: { enumerable: true },
    url: { enumerable: true },
    headers: { enumerable: true },
    redirect: { enumerable: true },
    clone: { enumerable: true },
    signal: { enumerable: true },
    referrer: { enumerable: true },
    referrerPolicy: { enumerable: true },
});
var getNodeRequestOptions = (request) => {
    const { parsedURL } = request[INTERNALS3];
    const headers = new Headers(request[INTERNALS3].headers);
    if (!headers.has('Accept')) {
        headers.set('Accept', '*/*');
    }
    let contentLengthValue = null;
    if (request.body === null && /^(post|put)$/i.test(request.method)) {
        contentLengthValue = '0';
    }
    if (request.body !== null) {
        const totalBytes = getTotalBytes(request);
        if (typeof totalBytes === 'number' && !Number.isNaN(totalBytes)) {
            contentLengthValue = String(totalBytes);
        }
    }
    if (contentLengthValue) {
        headers.set('Content-Length', contentLengthValue);
    }
    if (request.referrerPolicy === '') {
        request.referrerPolicy = DEFAULT_REFERRER_POLICY;
    }
    if (request.referrer && request.referrer !== 'no-referrer') {
        request[INTERNALS3].referrer = determineRequestsReferrer(request);
    } else {
        request[INTERNALS3].referrer = 'no-referrer';
    }
    if (request[INTERNALS3].referrer instanceof URL) {
        headers.set('Referer', request.referrer);
    }
    if (!headers.has('User-Agent')) {
        headers.set('User-Agent', 'node-fetch');
    }
    if (request.compress && !headers.has('Accept-Encoding')) {
        headers.set('Accept-Encoding', 'gzip, deflate, br');
    }
    let { agent } = request;
    if (typeof agent === 'function') {
        agent = agent(parsedURL);
    }
    if (!headers.has('Connection') && !agent) {
        headers.set('Connection', 'close');
    }
    const search = getSearch(parsedURL);
    const options2 = {
        // Overwrite search to retain trailing ? (issue #776)
        path: parsedURL.pathname + search,
        // The following options are not expressed in the URL
        method: request.method,
        headers: headers[Symbol.for('nodejs.util.inspect.custom')](),
        insecureHTTPParser: request.insecureHTTPParser,
        agent,
    };
    return {
        /** @type {URL} */
        parsedURL,
        options: options2,
    };
};

// node_modules/node-fetch/src/errors/abort-error.js
var AbortError = class extends FetchBaseError {
    constructor(message, type = 'aborted') {
        super(message, type);
    }
};

// node_modules/node-fetch/src/index.js
init_esm_min();
init_from();
var supportedSchemas = /* @__PURE__ */ new Set(['data:', 'http:', 'https:']);
async function fetch(url, options_) {
    return new Promise((resolve, reject) => {
        const request = new Request(url, options_);
        const { parsedURL, options: options2 } = getNodeRequestOptions(request);
        if (!supportedSchemas.has(parsedURL.protocol)) {
            throw new TypeError(
                `node-fetch cannot load ${url}. URL scheme "${parsedURL.protocol.replace(/:$/, '')}" is not supported.`,
            );
        }
        if (parsedURL.protocol === 'data:') {
            const data2 = dist_default(request.url);
            const response2 = new Response(data2, { headers: { 'Content-Type': data2.typeFull } });
            resolve(response2);
            return;
        }
        const send = (
            parsedURL.protocol === 'https:' ? import_node_https.default : import_node_http2.default
        ).request;
        const { signal } = request;
        let response = null;
        const abort = () => {
            const error = new AbortError('The operation was aborted.');
            reject(error);
            if (request.body && request.body instanceof import_node_stream2.default.Readable) {
                request.body.destroy(error);
            }
            if (!response || !response.body) {
                return;
            }
            response.body.emit('error', error);
        };
        if (signal && signal.aborted) {
            abort();
            return;
        }
        const abortAndFinalize = () => {
            abort();
            finalize();
        };
        const request_ = send(parsedURL.toString(), options2);
        if (signal) {
            signal.addEventListener('abort', abortAndFinalize);
        }
        const finalize = () => {
            request_.abort();
            if (signal) {
                signal.removeEventListener('abort', abortAndFinalize);
            }
        };
        request_.on('error', (error) => {
            reject(
                new FetchError(
                    `request to ${request.url} failed, reason: ${error.message}`,
                    'system',
                    error,
                ),
            );
            finalize();
        });
        fixResponseChunkedTransferBadEnding(request_, (error) => {
            if (response && response.body) {
                response.body.destroy(error);
            }
        });
        if (process.version < 'v14') {
            request_.on('socket', (s2) => {
                let endedWithEventsCount;
                s2.prependListener('end', () => {
                    endedWithEventsCount = s2._eventsCount;
                });
                s2.prependListener('close', (hadError) => {
                    if (response && endedWithEventsCount < s2._eventsCount && !hadError) {
                        const error = new Error('Premature close');
                        error.code = 'ERR_STREAM_PREMATURE_CLOSE';
                        response.body.emit('error', error);
                    }
                });
            });
        }
        request_.on('response', (response_) => {
            request_.setTimeout(0);
            const headers = fromRawHeaders(response_.rawHeaders);
            if (isRedirect(response_.statusCode)) {
                const location = headers.get('Location');
                let locationURL = null;
                try {
                    locationURL = location === null ? null : new URL(location, request.url);
                } catch {
                    if (request.redirect !== 'manual') {
                        reject(
                            new FetchError(
                                `uri requested responds with an invalid redirect URL: ${location}`,
                                'invalid-redirect',
                            ),
                        );
                        finalize();
                        return;
                    }
                }
                switch (request.redirect) {
                    case 'error':
                        reject(
                            new FetchError(
                                `uri requested responds with a redirect, redirect mode is set to error: ${request.url}`,
                                'no-redirect',
                            ),
                        );
                        finalize();
                        return;
                    case 'manual':
                        break;
                    case 'follow': {
                        if (locationURL === null) {
                            break;
                        }
                        if (request.counter >= request.follow) {
                            reject(
                                new FetchError(
                                    `maximum redirect reached at: ${request.url}`,
                                    'max-redirect',
                                ),
                            );
                            finalize();
                            return;
                        }
                        const requestOptions = {
                            headers: new Headers(request.headers),
                            follow: request.follow,
                            counter: request.counter + 1,
                            agent: request.agent,
                            compress: request.compress,
                            method: request.method,
                            body: clone(request),
                            signal: request.signal,
                            size: request.size,
                            referrer: request.referrer,
                            referrerPolicy: request.referrerPolicy,
                        };
                        if (
                            !isDomainOrSubdomain(request.url, locationURL) ||
                            !isSameProtocol(request.url, locationURL)
                        ) {
                            for (const name of [
                                'authorization',
                                'www-authenticate',
                                'cookie',
                                'cookie2',
                            ]) {
                                requestOptions.headers.delete(name);
                            }
                        }
                        if (
                            response_.statusCode !== 303 &&
                            request.body &&
                            options_.body instanceof import_node_stream2.default.Readable
                        ) {
                            reject(
                                new FetchError(
                                    'Cannot follow redirect with body being a readable stream',
                                    'unsupported-redirect',
                                ),
                            );
                            finalize();
                            return;
                        }
                        if (
                            response_.statusCode === 303 ||
                            ((response_.statusCode === 301 || response_.statusCode === 302) &&
                                request.method === 'POST')
                        ) {
                            requestOptions.method = 'GET';
                            requestOptions.body = void 0;
                            requestOptions.headers.delete('content-length');
                        }
                        const responseReferrerPolicy = parseReferrerPolicyFromHeader(headers);
                        if (responseReferrerPolicy) {
                            requestOptions.referrerPolicy = responseReferrerPolicy;
                        }
                        resolve(fetch(new Request(locationURL, requestOptions)));
                        finalize();
                        return;
                    }
                    default:
                        return reject(
                            new TypeError(
                                `Redirect option '${request.redirect}' is not a valid value of RequestRedirect`,
                            ),
                        );
                }
            }
            if (signal) {
                response_.once('end', () => {
                    signal.removeEventListener('abort', abortAndFinalize);
                });
            }
            let body = (0, import_node_stream2.pipeline)(
                response_,
                new import_node_stream2.PassThrough(),
                (error) => {
                    if (error) {
                        reject(error);
                    }
                },
            );
            if (process.version < 'v12.10') {
                response_.on('aborted', abortAndFinalize);
            }
            const responseOptions = {
                url: request.url,
                status: response_.statusCode,
                statusText: response_.statusMessage,
                headers,
                size: request.size,
                counter: request.counter,
                highWaterMark: request.highWaterMark,
            };
            const codings = headers.get('Content-Encoding');
            if (
                !request.compress ||
                request.method === 'HEAD' ||
                codings === null ||
                response_.statusCode === 204 ||
                response_.statusCode === 304
            ) {
                response = new Response(body, responseOptions);
                resolve(response);
                return;
            }
            const zlibOptions = {
                flush: import_node_zlib.default.Z_SYNC_FLUSH,
                finishFlush: import_node_zlib.default.Z_SYNC_FLUSH,
            };
            if (codings === 'gzip' || codings === 'x-gzip') {
                body = (0, import_node_stream2.pipeline)(
                    body,
                    import_node_zlib.default.createGunzip(zlibOptions),
                    (error) => {
                        if (error) {
                            reject(error);
                        }
                    },
                );
                response = new Response(body, responseOptions);
                resolve(response);
                return;
            }
            if (codings === 'deflate' || codings === 'x-deflate') {
                const raw = (0, import_node_stream2.pipeline)(
                    response_,
                    new import_node_stream2.PassThrough(),
                    (error) => {
                        if (error) {
                            reject(error);
                        }
                    },
                );
                raw.once('data', (chunk) => {
                    if ((chunk[0] & 15) === 8) {
                        body = (0, import_node_stream2.pipeline)(
                            body,
                            import_node_zlib.default.createInflate(),
                            (error) => {
                                if (error) {
                                    reject(error);
                                }
                            },
                        );
                    } else {
                        body = (0, import_node_stream2.pipeline)(
                            body,
                            import_node_zlib.default.createInflateRaw(),
                            (error) => {
                                if (error) {
                                    reject(error);
                                }
                            },
                        );
                    }
                    response = new Response(body, responseOptions);
                    resolve(response);
                });
                raw.once('end', () => {
                    if (!response) {
                        response = new Response(body, responseOptions);
                        resolve(response);
                    }
                });
                return;
            }
            if (codings === 'br') {
                body = (0, import_node_stream2.pipeline)(
                    body,
                    import_node_zlib.default.createBrotliDecompress(),
                    (error) => {
                        if (error) {
                            reject(error);
                        }
                    },
                );
                response = new Response(body, responseOptions);
                resolve(response);
                return;
            }
            response = new Response(body, responseOptions);
            resolve(response);
        });
        writeToStream(request_, request).catch(reject);
    });
}
function fixResponseChunkedTransferBadEnding(request, errorCallback) {
    const LAST_CHUNK = import_node_buffer4.Buffer.from('0\r\n\r\n');
    let isChunkedTransfer = false;
    let properLastChunkReceived = false;
    let previousChunk;
    request.on('response', (response) => {
        const { headers } = response;
        isChunkedTransfer =
            headers['transfer-encoding'] === 'chunked' && !headers['content-length'];
    });
    request.on('socket', (socket) => {
        const onSocketClose = () => {
            if (isChunkedTransfer && !properLastChunkReceived) {
                const error = new Error('Premature close');
                error.code = 'ERR_STREAM_PREMATURE_CLOSE';
                errorCallback(error);
            }
        };
        const onData = (buf) => {
            properLastChunkReceived =
                import_node_buffer4.Buffer.compare(buf.slice(-5), LAST_CHUNK) === 0;
            if (!properLastChunkReceived && previousChunk) {
                properLastChunkReceived =
                    import_node_buffer4.Buffer.compare(
                        previousChunk.slice(-3),
                        LAST_CHUNK.slice(0, 3),
                    ) === 0 &&
                    import_node_buffer4.Buffer.compare(buf.slice(-2), LAST_CHUNK.slice(3)) === 0;
            }
            previousChunk = buf;
        };
        socket.prependListener('close', onSocketClose);
        socket.on('data', onData);
        request.on('close', () => {
            socket.removeListener('close', onSocketClose);
            socket.removeListener('data', onData);
        });
    });
}

// node_modules/cheerio/lib/esm/options.js
var defaultOpts = {
    xml: false,
    decodeEntities: true,
};
var options_default = defaultOpts;
var xmlModeDefault = {
    _useHtmlParser2: true,
    xmlMode: true,
};
function flatten(options2) {
    return (options2 === null || options2 === void 0 ? void 0 : options2.xml)
        ? typeof options2.xml === 'boolean'
            ? xmlModeDefault
            : { ...xmlModeDefault, ...options2.xml }
        : options2 !== null && options2 !== void 0
          ? options2
          : void 0;
}

// node_modules/cheerio/lib/esm/static.js
var static_exports = {};
__export(static_exports, {
    contains: () => contains,
    html: () => html,
    merge: () => merge,
    parseHTML: () => parseHTML,
    root: () => root,
    text: () => text,
    xml: () => xml,
});

// node_modules/domutils/lib/esm/index.js
var esm_exports2 = {};
__export(esm_exports2, {
    DocumentPosition: () => DocumentPosition,
    append: () => append,
    appendChild: () => appendChild,
    compareDocumentPosition: () => compareDocumentPosition,
    existsOne: () => existsOne,
    filter: () => filter,
    find: () => find,
    findAll: () => findAll,
    findOne: () => findOne,
    findOneChild: () => findOneChild,
    getAttributeValue: () => getAttributeValue,
    getChildren: () => getChildren,
    getElementById: () => getElementById,
    getElements: () => getElements,
    getElementsByTagName: () => getElementsByTagName,
    getElementsByTagType: () => getElementsByTagType,
    getFeed: () => getFeed,
    getInnerHTML: () => getInnerHTML,
    getName: () => getName,
    getOuterHTML: () => getOuterHTML,
    getParent: () => getParent,
    getSiblings: () => getSiblings,
    getText: () => getText,
    hasAttrib: () => hasAttrib,
    hasChildren: () => hasChildren,
    innerText: () => innerText,
    isCDATA: () => isCDATA,
    isComment: () => isComment,
    isDocument: () => isDocument,
    isTag: () => isTag2,
    isText: () => isText,
    nextElementSibling: () => nextElementSibling,
    prepend: () => prepend,
    prependChild: () => prependChild,
    prevElementSibling: () => prevElementSibling,
    removeElement: () => removeElement,
    removeSubsets: () => removeSubsets,
    replaceElement: () => replaceElement,
    testElement: () => testElement,
    textContent: () => textContent,
    uniqueSort: () => uniqueSort,
});

// node_modules/domelementtype/lib/esm/index.js
var ElementType;
(function (ElementType2) {
    ElementType2['Root'] = 'root';
    ElementType2['Text'] = 'text';
    ElementType2['Directive'] = 'directive';
    ElementType2['Comment'] = 'comment';
    ElementType2['Script'] = 'script';
    ElementType2['Style'] = 'style';
    ElementType2['Tag'] = 'tag';
    ElementType2['CDATA'] = 'cdata';
    ElementType2['Doctype'] = 'doctype';
})(ElementType || (ElementType = {}));
function isTag(elem) {
    return (
        elem.type === ElementType.Tag ||
        elem.type === ElementType.Script ||
        elem.type === ElementType.Style
    );
}
var Root = ElementType.Root;
var Text = ElementType.Text;
var Directive = ElementType.Directive;
var Comment = ElementType.Comment;
var Script = ElementType.Script;
var Style = ElementType.Style;
var Tag = ElementType.Tag;
var CDATA = ElementType.CDATA;
var Doctype = ElementType.Doctype;

// node_modules/domhandler/lib/esm/node.js
var Node = class {
    constructor() {
        this.parent = null;
        this.prev = null;
        this.next = null;
        this.startIndex = null;
        this.endIndex = null;
    }
    // Read-write aliases for properties
    /**
     * Same as {@link parent}.
     * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
     */
    get parentNode() {
        return this.parent;
    }
    set parentNode(parent2) {
        this.parent = parent2;
    }
    /**
     * Same as {@link prev}.
     * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
     */
    get previousSibling() {
        return this.prev;
    }
    set previousSibling(prev2) {
        this.prev = prev2;
    }
    /**
     * Same as {@link next}.
     * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
     */
    get nextSibling() {
        return this.next;
    }
    set nextSibling(next2) {
        this.next = next2;
    }
    /**
     * Clone this node, and optionally its children.
     *
     * @param recursive Clone child nodes as well.
     * @returns A clone of the node.
     */
    cloneNode(recursive = false) {
        return cloneNode(this, recursive);
    }
};
var DataNode = class extends Node {
    /**
     * @param data The content of the data node
     */
    constructor(data2) {
        super();
        this.data = data2;
    }
    /**
     * Same as {@link data}.
     * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
     */
    get nodeValue() {
        return this.data;
    }
    set nodeValue(data2) {
        this.data = data2;
    }
};
var Text2 = class extends DataNode {
    constructor() {
        super(...arguments);
        this.type = ElementType.Text;
    }
    get nodeType() {
        return 3;
    }
};
var Comment2 = class extends DataNode {
    constructor() {
        super(...arguments);
        this.type = ElementType.Comment;
    }
    get nodeType() {
        return 8;
    }
};
var ProcessingInstruction = class extends DataNode {
    constructor(name, data2) {
        super(data2);
        this.name = name;
        this.type = ElementType.Directive;
    }
    get nodeType() {
        return 1;
    }
};
var NodeWithChildren = class extends Node {
    /**
     * @param children Children of the node. Only certain node types can have children.
     */
    constructor(children2) {
        super();
        this.children = children2;
    }
    // Aliases
    /** First child of the node. */
    get firstChild() {
        var _a5;
        return (_a5 = this.children[0]) !== null && _a5 !== void 0 ? _a5 : null;
    }
    /** Last child of the node. */
    get lastChild() {
        return this.children.length > 0 ? this.children[this.children.length - 1] : null;
    }
    /**
     * Same as {@link children}.
     * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
     */
    get childNodes() {
        return this.children;
    }
    set childNodes(children2) {
        this.children = children2;
    }
};
var CDATA2 = class extends NodeWithChildren {
    constructor() {
        super(...arguments);
        this.type = ElementType.CDATA;
    }
    get nodeType() {
        return 4;
    }
};
var Document = class extends NodeWithChildren {
    constructor() {
        super(...arguments);
        this.type = ElementType.Root;
    }
    get nodeType() {
        return 9;
    }
};
var Element = class extends NodeWithChildren {
    /**
     * @param name Name of the tag, eg. `div`, `span`.
     * @param attribs Object mapping attribute names to attribute values.
     * @param children Children of the node.
     */
    constructor(
        name,
        attribs,
        children2 = [],
        type = name === 'script'
            ? ElementType.Script
            : name === 'style'
              ? ElementType.Style
              : ElementType.Tag,
    ) {
        super(children2);
        this.name = name;
        this.attribs = attribs;
        this.type = type;
    }
    get nodeType() {
        return 1;
    }
    // DOM Level 1 aliases
    /**
     * Same as {@link name}.
     * [DOM spec](https://dom.spec.whatwg.org)-compatible alias.
     */
    get tagName() {
        return this.name;
    }
    set tagName(name) {
        this.name = name;
    }
    get attributes() {
        return Object.keys(this.attribs).map((name) => {
            var _a5, _b;
            return {
                name,
                value: this.attribs[name],
                namespace:
                    (_a5 = this['x-attribsNamespace']) === null || _a5 === void 0
                        ? void 0
                        : _a5[name],
                prefix:
                    (_b = this['x-attribsPrefix']) === null || _b === void 0 ? void 0 : _b[name],
            };
        });
    }
};
function isTag2(node) {
    return isTag(node);
}
function isCDATA(node) {
    return node.type === ElementType.CDATA;
}
function isText(node) {
    return node.type === ElementType.Text;
}
function isComment(node) {
    return node.type === ElementType.Comment;
}
function isDirective(node) {
    return node.type === ElementType.Directive;
}
function isDocument(node) {
    return node.type === ElementType.Root;
}
function hasChildren(node) {
    return Object.prototype.hasOwnProperty.call(node, 'children');
}
function cloneNode(node, recursive = false) {
    let result;
    if (isText(node)) {
        result = new Text2(node.data);
    } else if (isComment(node)) {
        result = new Comment2(node.data);
    } else if (isTag2(node)) {
        const children2 = recursive ? cloneChildren(node.children) : [];
        const clone3 = new Element(node.name, { ...node.attribs }, children2);
        children2.forEach((child) => (child.parent = clone3));
        if (node.namespace != null) {
            clone3.namespace = node.namespace;
        }
        if (node['x-attribsNamespace']) {
            clone3['x-attribsNamespace'] = { ...node['x-attribsNamespace'] };
        }
        if (node['x-attribsPrefix']) {
            clone3['x-attribsPrefix'] = { ...node['x-attribsPrefix'] };
        }
        result = clone3;
    } else if (isCDATA(node)) {
        const children2 = recursive ? cloneChildren(node.children) : [];
        const clone3 = new CDATA2(children2);
        children2.forEach((child) => (child.parent = clone3));
        result = clone3;
    } else if (isDocument(node)) {
        const children2 = recursive ? cloneChildren(node.children) : [];
        const clone3 = new Document(children2);
        children2.forEach((child) => (child.parent = clone3));
        if (node['x-mode']) {
            clone3['x-mode'] = node['x-mode'];
        }
        result = clone3;
    } else if (isDirective(node)) {
        const instruction = new ProcessingInstruction(node.name, node.data);
        if (node['x-name'] != null) {
            instruction['x-name'] = node['x-name'];
            instruction['x-publicId'] = node['x-publicId'];
            instruction['x-systemId'] = node['x-systemId'];
        }
        result = instruction;
    } else {
        throw new Error(`Not implemented yet: ${node.type}`);
    }
    result.startIndex = node.startIndex;
    result.endIndex = node.endIndex;
    if (node.sourceCodeLocation != null) {
        result.sourceCodeLocation = node.sourceCodeLocation;
    }
    return result;
}
function cloneChildren(childs) {
    const children2 = childs.map((child) => cloneNode(child, true));
    for (let i2 = 1; i2 < children2.length; i2++) {
        children2[i2].prev = children2[i2 - 1];
        children2[i2 - 1].next = children2[i2];
    }
    return children2;
}

// node_modules/domhandler/lib/esm/index.js
var defaultOpts2 = {
    withStartIndices: false,
    withEndIndices: false,
    xmlMode: false,
};
var DomHandler = class {
    /**
     * @param callback Called once parsing has completed.
     * @param options Settings for the handler.
     * @param elementCB Callback whenever a tag is closed.
     */
    constructor(callback, options2, elementCB) {
        this.dom = [];
        this.root = new Document(this.dom);
        this.done = false;
        this.tagStack = [this.root];
        this.lastNode = null;
        this.parser = null;
        if (typeof options2 === 'function') {
            elementCB = options2;
            options2 = defaultOpts2;
        }
        if (typeof callback === 'object') {
            options2 = callback;
            callback = void 0;
        }
        this.callback = callback !== null && callback !== void 0 ? callback : null;
        this.options = options2 !== null && options2 !== void 0 ? options2 : defaultOpts2;
        this.elementCB = elementCB !== null && elementCB !== void 0 ? elementCB : null;
    }
    onparserinit(parser) {
        this.parser = parser;
    }
    // Resets the handler back to starting state
    onreset() {
        this.dom = [];
        this.root = new Document(this.dom);
        this.done = false;
        this.tagStack = [this.root];
        this.lastNode = null;
        this.parser = null;
    }
    // Signals the handler that parsing is done
    onend() {
        if (this.done) return;
        this.done = true;
        this.parser = null;
        this.handleCallback(null);
    }
    onerror(error) {
        this.handleCallback(error);
    }
    onclosetag() {
        this.lastNode = null;
        const elem = this.tagStack.pop();
        if (this.options.withEndIndices) {
            elem.endIndex = this.parser.endIndex;
        }
        if (this.elementCB) this.elementCB(elem);
    }
    onopentag(name, attribs) {
        const type = this.options.xmlMode ? ElementType.Tag : void 0;
        const element = new Element(name, attribs, void 0, type);
        this.addNode(element);
        this.tagStack.push(element);
    }
    ontext(data2) {
        const { lastNode } = this;
        if (lastNode && lastNode.type === ElementType.Text) {
            lastNode.data += data2;
            if (this.options.withEndIndices) {
                lastNode.endIndex = this.parser.endIndex;
            }
        } else {
            const node = new Text2(data2);
            this.addNode(node);
            this.lastNode = node;
        }
    }
    oncomment(data2) {
        if (this.lastNode && this.lastNode.type === ElementType.Comment) {
            this.lastNode.data += data2;
            return;
        }
        const node = new Comment2(data2);
        this.addNode(node);
        this.lastNode = node;
    }
    oncommentend() {
        this.lastNode = null;
    }
    oncdatastart() {
        const text3 = new Text2('');
        const node = new CDATA2([text3]);
        this.addNode(node);
        text3.parent = node;
        this.lastNode = text3;
    }
    oncdataend() {
        this.lastNode = null;
    }
    onprocessinginstruction(name, data2) {
        const node = new ProcessingInstruction(name, data2);
        this.addNode(node);
    }
    handleCallback(error) {
        if (typeof this.callback === 'function') {
            this.callback(error, this.dom);
        } else if (error) {
            throw error;
        }
    }
    addNode(node) {
        const parent2 = this.tagStack[this.tagStack.length - 1];
        const previousSibling = parent2.children[parent2.children.length - 1];
        if (this.options.withStartIndices) {
            node.startIndex = this.parser.startIndex;
        }
        if (this.options.withEndIndices) {
            node.endIndex = this.parser.endIndex;
        }
        parent2.children.push(node);
        if (previousSibling) {
            node.prev = previousSibling;
            previousSibling.next = node;
        }
        node.parent = parent2;
        this.lastNode = null;
    }
};

// node_modules/entities/lib/esm/generated/decode-data-html.js
var decode_data_html_default = new Uint16Array(
    // prettier-ignore
    '\u1D41<\xD5\u0131\u028A\u049D\u057B\u05D0\u0675\u06DE\u07A2\u07D6\u080F\u0A4A\u0A91\u0DA1\u0E6D\u0F09\u0F26\u10CA\u1228\u12E1\u1415\u149D\u14C3\u14DF\u1525\0\0\0\0\0\0\u156B\u16CD\u198D\u1C12\u1DDD\u1F7E\u2060\u21B0\u228D\u23C0\u23FB\u2442\u2824\u2912\u2D08\u2E48\u2FCE\u3016\u32BA\u3639\u37AC\u38FE\u3A28\u3A71\u3AE0\u3B2E\u0800EMabcfglmnoprstu\\bfms\x7F\x84\x8B\x90\x95\x98\xA6\xB3\xB9\xC8\xCFlig\u803B\xC6\u40C6P\u803B&\u4026cute\u803B\xC1\u40C1reve;\u4102\u0100iyx}rc\u803B\xC2\u40C2;\u4410r;\uC000\u{1D504}rave\u803B\xC0\u40C0pha;\u4391acr;\u4100d;\u6A53\u0100gp\x9D\xA1on;\u4104f;\uC000\u{1D538}plyFunction;\u6061ing\u803B\xC5\u40C5\u0100cs\xBE\xC3r;\uC000\u{1D49C}ign;\u6254ilde\u803B\xC3\u40C3ml\u803B\xC4\u40C4\u0400aceforsu\xE5\xFB\xFE\u0117\u011C\u0122\u0127\u012A\u0100cr\xEA\xF2kslash;\u6216\u0176\xF6\xF8;\u6AE7ed;\u6306y;\u4411\u0180crt\u0105\u010B\u0114ause;\u6235noullis;\u612Ca;\u4392r;\uC000\u{1D505}pf;\uC000\u{1D539}eve;\u42D8c\xF2\u0113mpeq;\u624E\u0700HOacdefhilorsu\u014D\u0151\u0156\u0180\u019E\u01A2\u01B5\u01B7\u01BA\u01DC\u0215\u0273\u0278\u027Ecy;\u4427PY\u803B\xA9\u40A9\u0180cpy\u015D\u0162\u017Aute;\u4106\u0100;i\u0167\u0168\u62D2talDifferentialD;\u6145leys;\u612D\u0200aeio\u0189\u018E\u0194\u0198ron;\u410Cdil\u803B\xC7\u40C7rc;\u4108nint;\u6230ot;\u410A\u0100dn\u01A7\u01ADilla;\u40B8terDot;\u40B7\xF2\u017Fi;\u43A7rcle\u0200DMPT\u01C7\u01CB\u01D1\u01D6ot;\u6299inus;\u6296lus;\u6295imes;\u6297o\u0100cs\u01E2\u01F8kwiseContourIntegral;\u6232eCurly\u0100DQ\u0203\u020FoubleQuote;\u601Duote;\u6019\u0200lnpu\u021E\u0228\u0247\u0255on\u0100;e\u0225\u0226\u6237;\u6A74\u0180git\u022F\u0236\u023Aruent;\u6261nt;\u622FourIntegral;\u622E\u0100fr\u024C\u024E;\u6102oduct;\u6210nterClockwiseContourIntegral;\u6233oss;\u6A2Fcr;\uC000\u{1D49E}p\u0100;C\u0284\u0285\u62D3ap;\u624D\u0580DJSZacefios\u02A0\u02AC\u02B0\u02B4\u02B8\u02CB\u02D7\u02E1\u02E6\u0333\u048D\u0100;o\u0179\u02A5trahd;\u6911cy;\u4402cy;\u4405cy;\u440F\u0180grs\u02BF\u02C4\u02C7ger;\u6021r;\u61A1hv;\u6AE4\u0100ay\u02D0\u02D5ron;\u410E;\u4414l\u0100;t\u02DD\u02DE\u6207a;\u4394r;\uC000\u{1D507}\u0100af\u02EB\u0327\u0100cm\u02F0\u0322ritical\u0200ADGT\u0300\u0306\u0316\u031Ccute;\u40B4o\u0174\u030B\u030D;\u42D9bleAcute;\u42DDrave;\u4060ilde;\u42DCond;\u62C4ferentialD;\u6146\u0470\u033D\0\0\0\u0342\u0354\0\u0405f;\uC000\u{1D53B}\u0180;DE\u0348\u0349\u034D\u40A8ot;\u60DCqual;\u6250ble\u0300CDLRUV\u0363\u0372\u0382\u03CF\u03E2\u03F8ontourIntegra\xEC\u0239o\u0274\u0379\0\0\u037B\xBB\u0349nArrow;\u61D3\u0100eo\u0387\u03A4ft\u0180ART\u0390\u0396\u03A1rrow;\u61D0ightArrow;\u61D4e\xE5\u02CAng\u0100LR\u03AB\u03C4eft\u0100AR\u03B3\u03B9rrow;\u67F8ightArrow;\u67FAightArrow;\u67F9ight\u0100AT\u03D8\u03DErrow;\u61D2ee;\u62A8p\u0241\u03E9\0\0\u03EFrrow;\u61D1ownArrow;\u61D5erticalBar;\u6225n\u0300ABLRTa\u0412\u042A\u0430\u045E\u047F\u037Crrow\u0180;BU\u041D\u041E\u0422\u6193ar;\u6913pArrow;\u61F5reve;\u4311eft\u02D2\u043A\0\u0446\0\u0450ightVector;\u6950eeVector;\u695Eector\u0100;B\u0459\u045A\u61BDar;\u6956ight\u01D4\u0467\0\u0471eeVector;\u695Fector\u0100;B\u047A\u047B\u61C1ar;\u6957ee\u0100;A\u0486\u0487\u62A4rrow;\u61A7\u0100ct\u0492\u0497r;\uC000\u{1D49F}rok;\u4110\u0800NTacdfglmopqstux\u04BD\u04C0\u04C4\u04CB\u04DE\u04E2\u04E7\u04EE\u04F5\u0521\u052F\u0536\u0552\u055D\u0560\u0565G;\u414AH\u803B\xD0\u40D0cute\u803B\xC9\u40C9\u0180aiy\u04D2\u04D7\u04DCron;\u411Arc\u803B\xCA\u40CA;\u442Dot;\u4116r;\uC000\u{1D508}rave\u803B\xC8\u40C8ement;\u6208\u0100ap\u04FA\u04FEcr;\u4112ty\u0253\u0506\0\0\u0512mallSquare;\u65FBerySmallSquare;\u65AB\u0100gp\u0526\u052Aon;\u4118f;\uC000\u{1D53C}silon;\u4395u\u0100ai\u053C\u0549l\u0100;T\u0542\u0543\u6A75ilde;\u6242librium;\u61CC\u0100ci\u0557\u055Ar;\u6130m;\u6A73a;\u4397ml\u803B\xCB\u40CB\u0100ip\u056A\u056Fsts;\u6203onentialE;\u6147\u0280cfios\u0585\u0588\u058D\u05B2\u05CCy;\u4424r;\uC000\u{1D509}lled\u0253\u0597\0\0\u05A3mallSquare;\u65FCerySmallSquare;\u65AA\u0370\u05BA\0\u05BF\0\0\u05C4f;\uC000\u{1D53D}All;\u6200riertrf;\u6131c\xF2\u05CB\u0600JTabcdfgorst\u05E8\u05EC\u05EF\u05FA\u0600\u0612\u0616\u061B\u061D\u0623\u066C\u0672cy;\u4403\u803B>\u403Emma\u0100;d\u05F7\u05F8\u4393;\u43DCreve;\u411E\u0180eiy\u0607\u060C\u0610dil;\u4122rc;\u411C;\u4413ot;\u4120r;\uC000\u{1D50A};\u62D9pf;\uC000\u{1D53E}eater\u0300EFGLST\u0635\u0644\u064E\u0656\u065B\u0666qual\u0100;L\u063E\u063F\u6265ess;\u62DBullEqual;\u6267reater;\u6AA2ess;\u6277lantEqual;\u6A7Eilde;\u6273cr;\uC000\u{1D4A2};\u626B\u0400Aacfiosu\u0685\u068B\u0696\u069B\u069E\u06AA\u06BE\u06CARDcy;\u442A\u0100ct\u0690\u0694ek;\u42C7;\u405Eirc;\u4124r;\u610ClbertSpace;\u610B\u01F0\u06AF\0\u06B2f;\u610DizontalLine;\u6500\u0100ct\u06C3\u06C5\xF2\u06A9rok;\u4126mp\u0144\u06D0\u06D8ownHum\xF0\u012Fqual;\u624F\u0700EJOacdfgmnostu\u06FA\u06FE\u0703\u0707\u070E\u071A\u071E\u0721\u0728\u0744\u0778\u078B\u078F\u0795cy;\u4415lig;\u4132cy;\u4401cute\u803B\xCD\u40CD\u0100iy\u0713\u0718rc\u803B\xCE\u40CE;\u4418ot;\u4130r;\u6111rave\u803B\xCC\u40CC\u0180;ap\u0720\u072F\u073F\u0100cg\u0734\u0737r;\u412AinaryI;\u6148lie\xF3\u03DD\u01F4\u0749\0\u0762\u0100;e\u074D\u074E\u622C\u0100gr\u0753\u0758ral;\u622Bsection;\u62C2isible\u0100CT\u076C\u0772omma;\u6063imes;\u6062\u0180gpt\u077F\u0783\u0788on;\u412Ef;\uC000\u{1D540}a;\u4399cr;\u6110ilde;\u4128\u01EB\u079A\0\u079Ecy;\u4406l\u803B\xCF\u40CF\u0280cfosu\u07AC\u07B7\u07BC\u07C2\u07D0\u0100iy\u07B1\u07B5rc;\u4134;\u4419r;\uC000\u{1D50D}pf;\uC000\u{1D541}\u01E3\u07C7\0\u07CCr;\uC000\u{1D4A5}rcy;\u4408kcy;\u4404\u0380HJacfos\u07E4\u07E8\u07EC\u07F1\u07FD\u0802\u0808cy;\u4425cy;\u440Cppa;\u439A\u0100ey\u07F6\u07FBdil;\u4136;\u441Ar;\uC000\u{1D50E}pf;\uC000\u{1D542}cr;\uC000\u{1D4A6}\u0580JTaceflmost\u0825\u0829\u082C\u0850\u0863\u09B3\u09B8\u09C7\u09CD\u0A37\u0A47cy;\u4409\u803B<\u403C\u0280cmnpr\u0837\u083C\u0841\u0844\u084Dute;\u4139bda;\u439Bg;\u67EAlacetrf;\u6112r;\u619E\u0180aey\u0857\u085C\u0861ron;\u413Ddil;\u413B;\u441B\u0100fs\u0868\u0970t\u0500ACDFRTUVar\u087E\u08A9\u08B1\u08E0\u08E6\u08FC\u092F\u095B\u0390\u096A\u0100nr\u0883\u088FgleBracket;\u67E8row\u0180;BR\u0899\u089A\u089E\u6190ar;\u61E4ightArrow;\u61C6eiling;\u6308o\u01F5\u08B7\0\u08C3bleBracket;\u67E6n\u01D4\u08C8\0\u08D2eeVector;\u6961ector\u0100;B\u08DB\u08DC\u61C3ar;\u6959loor;\u630Aight\u0100AV\u08EF\u08F5rrow;\u6194ector;\u694E\u0100er\u0901\u0917e\u0180;AV\u0909\u090A\u0910\u62A3rrow;\u61A4ector;\u695Aiangle\u0180;BE\u0924\u0925\u0929\u62B2ar;\u69CFqual;\u62B4p\u0180DTV\u0937\u0942\u094CownVector;\u6951eeVector;\u6960ector\u0100;B\u0956\u0957\u61BFar;\u6958ector\u0100;B\u0965\u0966\u61BCar;\u6952ight\xE1\u039Cs\u0300EFGLST\u097E\u098B\u0995\u099D\u09A2\u09ADqualGreater;\u62DAullEqual;\u6266reater;\u6276ess;\u6AA1lantEqual;\u6A7Dilde;\u6272r;\uC000\u{1D50F}\u0100;e\u09BD\u09BE\u62D8ftarrow;\u61DAidot;\u413F\u0180npw\u09D4\u0A16\u0A1Bg\u0200LRlr\u09DE\u09F7\u0A02\u0A10eft\u0100AR\u09E6\u09ECrrow;\u67F5ightArrow;\u67F7ightArrow;\u67F6eft\u0100ar\u03B3\u0A0Aight\xE1\u03BFight\xE1\u03CAf;\uC000\u{1D543}er\u0100LR\u0A22\u0A2CeftArrow;\u6199ightArrow;\u6198\u0180cht\u0A3E\u0A40\u0A42\xF2\u084C;\u61B0rok;\u4141;\u626A\u0400acefiosu\u0A5A\u0A5D\u0A60\u0A77\u0A7C\u0A85\u0A8B\u0A8Ep;\u6905y;\u441C\u0100dl\u0A65\u0A6FiumSpace;\u605Flintrf;\u6133r;\uC000\u{1D510}nusPlus;\u6213pf;\uC000\u{1D544}c\xF2\u0A76;\u439C\u0480Jacefostu\u0AA3\u0AA7\u0AAD\u0AC0\u0B14\u0B19\u0D91\u0D97\u0D9Ecy;\u440Acute;\u4143\u0180aey\u0AB4\u0AB9\u0ABEron;\u4147dil;\u4145;\u441D\u0180gsw\u0AC7\u0AF0\u0B0Eative\u0180MTV\u0AD3\u0ADF\u0AE8ediumSpace;\u600Bhi\u0100cn\u0AE6\u0AD8\xEB\u0AD9eryThi\xEE\u0AD9ted\u0100GL\u0AF8\u0B06reaterGreate\xF2\u0673essLes\xF3\u0A48Line;\u400Ar;\uC000\u{1D511}\u0200Bnpt\u0B22\u0B28\u0B37\u0B3Areak;\u6060BreakingSpace;\u40A0f;\u6115\u0680;CDEGHLNPRSTV\u0B55\u0B56\u0B6A\u0B7C\u0BA1\u0BEB\u0C04\u0C5E\u0C84\u0CA6\u0CD8\u0D61\u0D85\u6AEC\u0100ou\u0B5B\u0B64ngruent;\u6262pCap;\u626DoubleVerticalBar;\u6226\u0180lqx\u0B83\u0B8A\u0B9Bement;\u6209ual\u0100;T\u0B92\u0B93\u6260ilde;\uC000\u2242\u0338ists;\u6204reater\u0380;EFGLST\u0BB6\u0BB7\u0BBD\u0BC9\u0BD3\u0BD8\u0BE5\u626Fqual;\u6271ullEqual;\uC000\u2267\u0338reater;\uC000\u226B\u0338ess;\u6279lantEqual;\uC000\u2A7E\u0338ilde;\u6275ump\u0144\u0BF2\u0BFDownHump;\uC000\u224E\u0338qual;\uC000\u224F\u0338e\u0100fs\u0C0A\u0C27tTriangle\u0180;BE\u0C1A\u0C1B\u0C21\u62EAar;\uC000\u29CF\u0338qual;\u62ECs\u0300;EGLST\u0C35\u0C36\u0C3C\u0C44\u0C4B\u0C58\u626Equal;\u6270reater;\u6278ess;\uC000\u226A\u0338lantEqual;\uC000\u2A7D\u0338ilde;\u6274ested\u0100GL\u0C68\u0C79reaterGreater;\uC000\u2AA2\u0338essLess;\uC000\u2AA1\u0338recedes\u0180;ES\u0C92\u0C93\u0C9B\u6280qual;\uC000\u2AAF\u0338lantEqual;\u62E0\u0100ei\u0CAB\u0CB9verseElement;\u620CghtTriangle\u0180;BE\u0CCB\u0CCC\u0CD2\u62EBar;\uC000\u29D0\u0338qual;\u62ED\u0100qu\u0CDD\u0D0CuareSu\u0100bp\u0CE8\u0CF9set\u0100;E\u0CF0\u0CF3\uC000\u228F\u0338qual;\u62E2erset\u0100;E\u0D03\u0D06\uC000\u2290\u0338qual;\u62E3\u0180bcp\u0D13\u0D24\u0D4Eset\u0100;E\u0D1B\u0D1E\uC000\u2282\u20D2qual;\u6288ceeds\u0200;EST\u0D32\u0D33\u0D3B\u0D46\u6281qual;\uC000\u2AB0\u0338lantEqual;\u62E1ilde;\uC000\u227F\u0338erset\u0100;E\u0D58\u0D5B\uC000\u2283\u20D2qual;\u6289ilde\u0200;EFT\u0D6E\u0D6F\u0D75\u0D7F\u6241qual;\u6244ullEqual;\u6247ilde;\u6249erticalBar;\u6224cr;\uC000\u{1D4A9}ilde\u803B\xD1\u40D1;\u439D\u0700Eacdfgmoprstuv\u0DBD\u0DC2\u0DC9\u0DD5\u0DDB\u0DE0\u0DE7\u0DFC\u0E02\u0E20\u0E22\u0E32\u0E3F\u0E44lig;\u4152cute\u803B\xD3\u40D3\u0100iy\u0DCE\u0DD3rc\u803B\xD4\u40D4;\u441Eblac;\u4150r;\uC000\u{1D512}rave\u803B\xD2\u40D2\u0180aei\u0DEE\u0DF2\u0DF6cr;\u414Cga;\u43A9cron;\u439Fpf;\uC000\u{1D546}enCurly\u0100DQ\u0E0E\u0E1AoubleQuote;\u601Cuote;\u6018;\u6A54\u0100cl\u0E27\u0E2Cr;\uC000\u{1D4AA}ash\u803B\xD8\u40D8i\u016C\u0E37\u0E3Cde\u803B\xD5\u40D5es;\u6A37ml\u803B\xD6\u40D6er\u0100BP\u0E4B\u0E60\u0100ar\u0E50\u0E53r;\u603Eac\u0100ek\u0E5A\u0E5C;\u63DEet;\u63B4arenthesis;\u63DC\u0480acfhilors\u0E7F\u0E87\u0E8A\u0E8F\u0E92\u0E94\u0E9D\u0EB0\u0EFCrtialD;\u6202y;\u441Fr;\uC000\u{1D513}i;\u43A6;\u43A0usMinus;\u40B1\u0100ip\u0EA2\u0EADncareplan\xE5\u069Df;\u6119\u0200;eio\u0EB9\u0EBA\u0EE0\u0EE4\u6ABBcedes\u0200;EST\u0EC8\u0EC9\u0ECF\u0EDA\u627Aqual;\u6AAFlantEqual;\u627Cilde;\u627Eme;\u6033\u0100dp\u0EE9\u0EEEuct;\u620Fortion\u0100;a\u0225\u0EF9l;\u621D\u0100ci\u0F01\u0F06r;\uC000\u{1D4AB};\u43A8\u0200Ufos\u0F11\u0F16\u0F1B\u0F1FOT\u803B"\u4022r;\uC000\u{1D514}pf;\u611Acr;\uC000\u{1D4AC}\u0600BEacefhiorsu\u0F3E\u0F43\u0F47\u0F60\u0F73\u0FA7\u0FAA\u0FAD\u1096\u10A9\u10B4\u10BEarr;\u6910G\u803B\xAE\u40AE\u0180cnr\u0F4E\u0F53\u0F56ute;\u4154g;\u67EBr\u0100;t\u0F5C\u0F5D\u61A0l;\u6916\u0180aey\u0F67\u0F6C\u0F71ron;\u4158dil;\u4156;\u4420\u0100;v\u0F78\u0F79\u611Cerse\u0100EU\u0F82\u0F99\u0100lq\u0F87\u0F8Eement;\u620Builibrium;\u61CBpEquilibrium;\u696Fr\xBB\u0F79o;\u43A1ght\u0400ACDFTUVa\u0FC1\u0FEB\u0FF3\u1022\u1028\u105B\u1087\u03D8\u0100nr\u0FC6\u0FD2gleBracket;\u67E9row\u0180;BL\u0FDC\u0FDD\u0FE1\u6192ar;\u61E5eftArrow;\u61C4eiling;\u6309o\u01F5\u0FF9\0\u1005bleBracket;\u67E7n\u01D4\u100A\0\u1014eeVector;\u695Dector\u0100;B\u101D\u101E\u61C2ar;\u6955loor;\u630B\u0100er\u102D\u1043e\u0180;AV\u1035\u1036\u103C\u62A2rrow;\u61A6ector;\u695Biangle\u0180;BE\u1050\u1051\u1055\u62B3ar;\u69D0qual;\u62B5p\u0180DTV\u1063\u106E\u1078ownVector;\u694FeeVector;\u695Cector\u0100;B\u1082\u1083\u61BEar;\u6954ector\u0100;B\u1091\u1092\u61C0ar;\u6953\u0100pu\u109B\u109Ef;\u611DndImplies;\u6970ightarrow;\u61DB\u0100ch\u10B9\u10BCr;\u611B;\u61B1leDelayed;\u69F4\u0680HOacfhimoqstu\u10E4\u10F1\u10F7\u10FD\u1119\u111E\u1151\u1156\u1161\u1167\u11B5\u11BB\u11BF\u0100Cc\u10E9\u10EEHcy;\u4429y;\u4428FTcy;\u442Ccute;\u415A\u0280;aeiy\u1108\u1109\u110E\u1113\u1117\u6ABCron;\u4160dil;\u415Erc;\u415C;\u4421r;\uC000\u{1D516}ort\u0200DLRU\u112A\u1134\u113E\u1149ownArrow\xBB\u041EeftArrow\xBB\u089AightArrow\xBB\u0FDDpArrow;\u6191gma;\u43A3allCircle;\u6218pf;\uC000\u{1D54A}\u0272\u116D\0\0\u1170t;\u621Aare\u0200;ISU\u117B\u117C\u1189\u11AF\u65A1ntersection;\u6293u\u0100bp\u118F\u119Eset\u0100;E\u1197\u1198\u628Fqual;\u6291erset\u0100;E\u11A8\u11A9\u6290qual;\u6292nion;\u6294cr;\uC000\u{1D4AE}ar;\u62C6\u0200bcmp\u11C8\u11DB\u1209\u120B\u0100;s\u11CD\u11CE\u62D0et\u0100;E\u11CD\u11D5qual;\u6286\u0100ch\u11E0\u1205eeds\u0200;EST\u11ED\u11EE\u11F4\u11FF\u627Bqual;\u6AB0lantEqual;\u627Dilde;\u627FTh\xE1\u0F8C;\u6211\u0180;es\u1212\u1213\u1223\u62D1rset\u0100;E\u121C\u121D\u6283qual;\u6287et\xBB\u1213\u0580HRSacfhiors\u123E\u1244\u1249\u1255\u125E\u1271\u1276\u129F\u12C2\u12C8\u12D1ORN\u803B\xDE\u40DEADE;\u6122\u0100Hc\u124E\u1252cy;\u440By;\u4426\u0100bu\u125A\u125C;\u4009;\u43A4\u0180aey\u1265\u126A\u126Fron;\u4164dil;\u4162;\u4422r;\uC000\u{1D517}\u0100ei\u127B\u1289\u01F2\u1280\0\u1287efore;\u6234a;\u4398\u0100cn\u128E\u1298kSpace;\uC000\u205F\u200ASpace;\u6009lde\u0200;EFT\u12AB\u12AC\u12B2\u12BC\u623Cqual;\u6243ullEqual;\u6245ilde;\u6248pf;\uC000\u{1D54B}ipleDot;\u60DB\u0100ct\u12D6\u12DBr;\uC000\u{1D4AF}rok;\u4166\u0AE1\u12F7\u130E\u131A\u1326\0\u132C\u1331\0\0\0\0\0\u1338\u133D\u1377\u1385\0\u13FF\u1404\u140A\u1410\u0100cr\u12FB\u1301ute\u803B\xDA\u40DAr\u0100;o\u1307\u1308\u619Fcir;\u6949r\u01E3\u1313\0\u1316y;\u440Eve;\u416C\u0100iy\u131E\u1323rc\u803B\xDB\u40DB;\u4423blac;\u4170r;\uC000\u{1D518}rave\u803B\xD9\u40D9acr;\u416A\u0100di\u1341\u1369er\u0100BP\u1348\u135D\u0100ar\u134D\u1350r;\u405Fac\u0100ek\u1357\u1359;\u63DFet;\u63B5arenthesis;\u63DDon\u0100;P\u1370\u1371\u62C3lus;\u628E\u0100gp\u137B\u137Fon;\u4172f;\uC000\u{1D54C}\u0400ADETadps\u1395\u13AE\u13B8\u13C4\u03E8\u13D2\u13D7\u13F3rrow\u0180;BD\u1150\u13A0\u13A4ar;\u6912ownArrow;\u61C5ownArrow;\u6195quilibrium;\u696Eee\u0100;A\u13CB\u13CC\u62A5rrow;\u61A5own\xE1\u03F3er\u0100LR\u13DE\u13E8eftArrow;\u6196ightArrow;\u6197i\u0100;l\u13F9\u13FA\u43D2on;\u43A5ing;\u416Ecr;\uC000\u{1D4B0}ilde;\u4168ml\u803B\xDC\u40DC\u0480Dbcdefosv\u1427\u142C\u1430\u1433\u143E\u1485\u148A\u1490\u1496ash;\u62ABar;\u6AEBy;\u4412ash\u0100;l\u143B\u143C\u62A9;\u6AE6\u0100er\u1443\u1445;\u62C1\u0180bty\u144C\u1450\u147Aar;\u6016\u0100;i\u144F\u1455cal\u0200BLST\u1461\u1465\u146A\u1474ar;\u6223ine;\u407Ceparator;\u6758ilde;\u6240ThinSpace;\u600Ar;\uC000\u{1D519}pf;\uC000\u{1D54D}cr;\uC000\u{1D4B1}dash;\u62AA\u0280cefos\u14A7\u14AC\u14B1\u14B6\u14BCirc;\u4174dge;\u62C0r;\uC000\u{1D51A}pf;\uC000\u{1D54E}cr;\uC000\u{1D4B2}\u0200fios\u14CB\u14D0\u14D2\u14D8r;\uC000\u{1D51B};\u439Epf;\uC000\u{1D54F}cr;\uC000\u{1D4B3}\u0480AIUacfosu\u14F1\u14F5\u14F9\u14FD\u1504\u150F\u1514\u151A\u1520cy;\u442Fcy;\u4407cy;\u442Ecute\u803B\xDD\u40DD\u0100iy\u1509\u150Drc;\u4176;\u442Br;\uC000\u{1D51C}pf;\uC000\u{1D550}cr;\uC000\u{1D4B4}ml;\u4178\u0400Hacdefos\u1535\u1539\u153F\u154B\u154F\u155D\u1560\u1564cy;\u4416cute;\u4179\u0100ay\u1544\u1549ron;\u417D;\u4417ot;\u417B\u01F2\u1554\0\u155BoWidt\xE8\u0AD9a;\u4396r;\u6128pf;\u6124cr;\uC000\u{1D4B5}\u0BE1\u1583\u158A\u1590\0\u15B0\u15B6\u15BF\0\0\0\0\u15C6\u15DB\u15EB\u165F\u166D\0\u1695\u169B\u16B2\u16B9\0\u16BEcute\u803B\xE1\u40E1reve;\u4103\u0300;Ediuy\u159C\u159D\u15A1\u15A3\u15A8\u15AD\u623E;\uC000\u223E\u0333;\u623Frc\u803B\xE2\u40E2te\u80BB\xB4\u0306;\u4430lig\u803B\xE6\u40E6\u0100;r\xB2\u15BA;\uC000\u{1D51E}rave\u803B\xE0\u40E0\u0100ep\u15CA\u15D6\u0100fp\u15CF\u15D4sym;\u6135\xE8\u15D3ha;\u43B1\u0100ap\u15DFc\u0100cl\u15E4\u15E7r;\u4101g;\u6A3F\u0264\u15F0\0\0\u160A\u0280;adsv\u15FA\u15FB\u15FF\u1601\u1607\u6227nd;\u6A55;\u6A5Clope;\u6A58;\u6A5A\u0380;elmrsz\u1618\u1619\u161B\u161E\u163F\u164F\u1659\u6220;\u69A4e\xBB\u1619sd\u0100;a\u1625\u1626\u6221\u0461\u1630\u1632\u1634\u1636\u1638\u163A\u163C\u163E;\u69A8;\u69A9;\u69AA;\u69AB;\u69AC;\u69AD;\u69AE;\u69AFt\u0100;v\u1645\u1646\u621Fb\u0100;d\u164C\u164D\u62BE;\u699D\u0100pt\u1654\u1657h;\u6222\xBB\xB9arr;\u637C\u0100gp\u1663\u1667on;\u4105f;\uC000\u{1D552}\u0380;Eaeiop\u12C1\u167B\u167D\u1682\u1684\u1687\u168A;\u6A70cir;\u6A6F;\u624Ad;\u624Bs;\u4027rox\u0100;e\u12C1\u1692\xF1\u1683ing\u803B\xE5\u40E5\u0180cty\u16A1\u16A6\u16A8r;\uC000\u{1D4B6};\u402Amp\u0100;e\u12C1\u16AF\xF1\u0288ilde\u803B\xE3\u40E3ml\u803B\xE4\u40E4\u0100ci\u16C2\u16C8onin\xF4\u0272nt;\u6A11\u0800Nabcdefiklnoprsu\u16ED\u16F1\u1730\u173C\u1743\u1748\u1778\u177D\u17E0\u17E6\u1839\u1850\u170D\u193D\u1948\u1970ot;\u6AED\u0100cr\u16F6\u171Ek\u0200ceps\u1700\u1705\u170D\u1713ong;\u624Cpsilon;\u43F6rime;\u6035im\u0100;e\u171A\u171B\u623Dq;\u62CD\u0176\u1722\u1726ee;\u62BDed\u0100;g\u172C\u172D\u6305e\xBB\u172Drk\u0100;t\u135C\u1737brk;\u63B6\u0100oy\u1701\u1741;\u4431quo;\u601E\u0280cmprt\u1753\u175B\u1761\u1764\u1768aus\u0100;e\u010A\u0109ptyv;\u69B0s\xE9\u170Cno\xF5\u0113\u0180ahw\u176F\u1771\u1773;\u43B2;\u6136een;\u626Cr;\uC000\u{1D51F}g\u0380costuvw\u178D\u179D\u17B3\u17C1\u17D5\u17DB\u17DE\u0180aiu\u1794\u1796\u179A\xF0\u0760rc;\u65EFp\xBB\u1371\u0180dpt\u17A4\u17A8\u17ADot;\u6A00lus;\u6A01imes;\u6A02\u0271\u17B9\0\0\u17BEcup;\u6A06ar;\u6605riangle\u0100du\u17CD\u17D2own;\u65BDp;\u65B3plus;\u6A04e\xE5\u1444\xE5\u14ADarow;\u690D\u0180ako\u17ED\u1826\u1835\u0100cn\u17F2\u1823k\u0180lst\u17FA\u05AB\u1802ozenge;\u69EBriangle\u0200;dlr\u1812\u1813\u1818\u181D\u65B4own;\u65BEeft;\u65C2ight;\u65B8k;\u6423\u01B1\u182B\0\u1833\u01B2\u182F\0\u1831;\u6592;\u65914;\u6593ck;\u6588\u0100eo\u183E\u184D\u0100;q\u1843\u1846\uC000=\u20E5uiv;\uC000\u2261\u20E5t;\u6310\u0200ptwx\u1859\u185E\u1867\u186Cf;\uC000\u{1D553}\u0100;t\u13CB\u1863om\xBB\u13CCtie;\u62C8\u0600DHUVbdhmptuv\u1885\u1896\u18AA\u18BB\u18D7\u18DB\u18EC\u18FF\u1905\u190A\u1910\u1921\u0200LRlr\u188E\u1890\u1892\u1894;\u6557;\u6554;\u6556;\u6553\u0280;DUdu\u18A1\u18A2\u18A4\u18A6\u18A8\u6550;\u6566;\u6569;\u6564;\u6567\u0200LRlr\u18B3\u18B5\u18B7\u18B9;\u655D;\u655A;\u655C;\u6559\u0380;HLRhlr\u18CA\u18CB\u18CD\u18CF\u18D1\u18D3\u18D5\u6551;\u656C;\u6563;\u6560;\u656B;\u6562;\u655Fox;\u69C9\u0200LRlr\u18E4\u18E6\u18E8\u18EA;\u6555;\u6552;\u6510;\u650C\u0280;DUdu\u06BD\u18F7\u18F9\u18FB\u18FD;\u6565;\u6568;\u652C;\u6534inus;\u629Flus;\u629Eimes;\u62A0\u0200LRlr\u1919\u191B\u191D\u191F;\u655B;\u6558;\u6518;\u6514\u0380;HLRhlr\u1930\u1931\u1933\u1935\u1937\u1939\u193B\u6502;\u656A;\u6561;\u655E;\u653C;\u6524;\u651C\u0100ev\u0123\u1942bar\u803B\xA6\u40A6\u0200ceio\u1951\u1956\u195A\u1960r;\uC000\u{1D4B7}mi;\u604Fm\u0100;e\u171A\u171Cl\u0180;bh\u1968\u1969\u196B\u405C;\u69C5sub;\u67C8\u016C\u1974\u197El\u0100;e\u1979\u197A\u6022t\xBB\u197Ap\u0180;Ee\u012F\u1985\u1987;\u6AAE\u0100;q\u06DC\u06DB\u0CE1\u19A7\0\u19E8\u1A11\u1A15\u1A32\0\u1A37\u1A50\0\0\u1AB4\0\0\u1AC1\0\0\u1B21\u1B2E\u1B4D\u1B52\0\u1BFD\0\u1C0C\u0180cpr\u19AD\u19B2\u19DDute;\u4107\u0300;abcds\u19BF\u19C0\u19C4\u19CA\u19D5\u19D9\u6229nd;\u6A44rcup;\u6A49\u0100au\u19CF\u19D2p;\u6A4Bp;\u6A47ot;\u6A40;\uC000\u2229\uFE00\u0100eo\u19E2\u19E5t;\u6041\xEE\u0693\u0200aeiu\u19F0\u19FB\u1A01\u1A05\u01F0\u19F5\0\u19F8s;\u6A4Don;\u410Ddil\u803B\xE7\u40E7rc;\u4109ps\u0100;s\u1A0C\u1A0D\u6A4Cm;\u6A50ot;\u410B\u0180dmn\u1A1B\u1A20\u1A26il\u80BB\xB8\u01ADptyv;\u69B2t\u8100\xA2;e\u1A2D\u1A2E\u40A2r\xE4\u01B2r;\uC000\u{1D520}\u0180cei\u1A3D\u1A40\u1A4Dy;\u4447ck\u0100;m\u1A47\u1A48\u6713ark\xBB\u1A48;\u43C7r\u0380;Ecefms\u1A5F\u1A60\u1A62\u1A6B\u1AA4\u1AAA\u1AAE\u65CB;\u69C3\u0180;el\u1A69\u1A6A\u1A6D\u42C6q;\u6257e\u0261\u1A74\0\0\u1A88rrow\u0100lr\u1A7C\u1A81eft;\u61BAight;\u61BB\u0280RSacd\u1A92\u1A94\u1A96\u1A9A\u1A9F\xBB\u0F47;\u64C8st;\u629Birc;\u629Aash;\u629Dnint;\u6A10id;\u6AEFcir;\u69C2ubs\u0100;u\u1ABB\u1ABC\u6663it\xBB\u1ABC\u02EC\u1AC7\u1AD4\u1AFA\0\u1B0Aon\u0100;e\u1ACD\u1ACE\u403A\u0100;q\xC7\xC6\u026D\u1AD9\0\0\u1AE2a\u0100;t\u1ADE\u1ADF\u402C;\u4040\u0180;fl\u1AE8\u1AE9\u1AEB\u6201\xEE\u1160e\u0100mx\u1AF1\u1AF6ent\xBB\u1AE9e\xF3\u024D\u01E7\u1AFE\0\u1B07\u0100;d\u12BB\u1B02ot;\u6A6Dn\xF4\u0246\u0180fry\u1B10\u1B14\u1B17;\uC000\u{1D554}o\xE4\u0254\u8100\xA9;s\u0155\u1B1Dr;\u6117\u0100ao\u1B25\u1B29rr;\u61B5ss;\u6717\u0100cu\u1B32\u1B37r;\uC000\u{1D4B8}\u0100bp\u1B3C\u1B44\u0100;e\u1B41\u1B42\u6ACF;\u6AD1\u0100;e\u1B49\u1B4A\u6AD0;\u6AD2dot;\u62EF\u0380delprvw\u1B60\u1B6C\u1B77\u1B82\u1BAC\u1BD4\u1BF9arr\u0100lr\u1B68\u1B6A;\u6938;\u6935\u0270\u1B72\0\0\u1B75r;\u62DEc;\u62DFarr\u0100;p\u1B7F\u1B80\u61B6;\u693D\u0300;bcdos\u1B8F\u1B90\u1B96\u1BA1\u1BA5\u1BA8\u622Arcap;\u6A48\u0100au\u1B9B\u1B9Ep;\u6A46p;\u6A4Aot;\u628Dr;\u6A45;\uC000\u222A\uFE00\u0200alrv\u1BB5\u1BBF\u1BDE\u1BE3rr\u0100;m\u1BBC\u1BBD\u61B7;\u693Cy\u0180evw\u1BC7\u1BD4\u1BD8q\u0270\u1BCE\0\0\u1BD2re\xE3\u1B73u\xE3\u1B75ee;\u62CEedge;\u62CFen\u803B\xA4\u40A4earrow\u0100lr\u1BEE\u1BF3eft\xBB\u1B80ight\xBB\u1BBDe\xE4\u1BDD\u0100ci\u1C01\u1C07onin\xF4\u01F7nt;\u6231lcty;\u632D\u0980AHabcdefhijlorstuwz\u1C38\u1C3B\u1C3F\u1C5D\u1C69\u1C75\u1C8A\u1C9E\u1CAC\u1CB7\u1CFB\u1CFF\u1D0D\u1D7B\u1D91\u1DAB\u1DBB\u1DC6\u1DCDr\xF2\u0381ar;\u6965\u0200glrs\u1C48\u1C4D\u1C52\u1C54ger;\u6020eth;\u6138\xF2\u1133h\u0100;v\u1C5A\u1C5B\u6010\xBB\u090A\u016B\u1C61\u1C67arow;\u690Fa\xE3\u0315\u0100ay\u1C6E\u1C73ron;\u410F;\u4434\u0180;ao\u0332\u1C7C\u1C84\u0100gr\u02BF\u1C81r;\u61CAtseq;\u6A77\u0180glm\u1C91\u1C94\u1C98\u803B\xB0\u40B0ta;\u43B4ptyv;\u69B1\u0100ir\u1CA3\u1CA8sht;\u697F;\uC000\u{1D521}ar\u0100lr\u1CB3\u1CB5\xBB\u08DC\xBB\u101E\u0280aegsv\u1CC2\u0378\u1CD6\u1CDC\u1CE0m\u0180;os\u0326\u1CCA\u1CD4nd\u0100;s\u0326\u1CD1uit;\u6666amma;\u43DDin;\u62F2\u0180;io\u1CE7\u1CE8\u1CF8\u40F7de\u8100\xF7;o\u1CE7\u1CF0ntimes;\u62C7n\xF8\u1CF7cy;\u4452c\u026F\u1D06\0\0\u1D0Arn;\u631Eop;\u630D\u0280lptuw\u1D18\u1D1D\u1D22\u1D49\u1D55lar;\u4024f;\uC000\u{1D555}\u0280;emps\u030B\u1D2D\u1D37\u1D3D\u1D42q\u0100;d\u0352\u1D33ot;\u6251inus;\u6238lus;\u6214quare;\u62A1blebarwedg\xE5\xFAn\u0180adh\u112E\u1D5D\u1D67ownarrow\xF3\u1C83arpoon\u0100lr\u1D72\u1D76ef\xF4\u1CB4igh\xF4\u1CB6\u0162\u1D7F\u1D85karo\xF7\u0F42\u026F\u1D8A\0\0\u1D8Ern;\u631Fop;\u630C\u0180cot\u1D98\u1DA3\u1DA6\u0100ry\u1D9D\u1DA1;\uC000\u{1D4B9};\u4455l;\u69F6rok;\u4111\u0100dr\u1DB0\u1DB4ot;\u62F1i\u0100;f\u1DBA\u1816\u65BF\u0100ah\u1DC0\u1DC3r\xF2\u0429a\xF2\u0FA6angle;\u69A6\u0100ci\u1DD2\u1DD5y;\u445Fgrarr;\u67FF\u0900Dacdefglmnopqrstux\u1E01\u1E09\u1E19\u1E38\u0578\u1E3C\u1E49\u1E61\u1E7E\u1EA5\u1EAF\u1EBD\u1EE1\u1F2A\u1F37\u1F44\u1F4E\u1F5A\u0100Do\u1E06\u1D34o\xF4\u1C89\u0100cs\u1E0E\u1E14ute\u803B\xE9\u40E9ter;\u6A6E\u0200aioy\u1E22\u1E27\u1E31\u1E36ron;\u411Br\u0100;c\u1E2D\u1E2E\u6256\u803B\xEA\u40EAlon;\u6255;\u444Dot;\u4117\u0100Dr\u1E41\u1E45ot;\u6252;\uC000\u{1D522}\u0180;rs\u1E50\u1E51\u1E57\u6A9Aave\u803B\xE8\u40E8\u0100;d\u1E5C\u1E5D\u6A96ot;\u6A98\u0200;ils\u1E6A\u1E6B\u1E72\u1E74\u6A99nters;\u63E7;\u6113\u0100;d\u1E79\u1E7A\u6A95ot;\u6A97\u0180aps\u1E85\u1E89\u1E97cr;\u4113ty\u0180;sv\u1E92\u1E93\u1E95\u6205et\xBB\u1E93p\u01001;\u1E9D\u1EA4\u0133\u1EA1\u1EA3;\u6004;\u6005\u6003\u0100gs\u1EAA\u1EAC;\u414Bp;\u6002\u0100gp\u1EB4\u1EB8on;\u4119f;\uC000\u{1D556}\u0180als\u1EC4\u1ECE\u1ED2r\u0100;s\u1ECA\u1ECB\u62D5l;\u69E3us;\u6A71i\u0180;lv\u1EDA\u1EDB\u1EDF\u43B5on\xBB\u1EDB;\u43F5\u0200csuv\u1EEA\u1EF3\u1F0B\u1F23\u0100io\u1EEF\u1E31rc\xBB\u1E2E\u0269\u1EF9\0\0\u1EFB\xED\u0548ant\u0100gl\u1F02\u1F06tr\xBB\u1E5Dess\xBB\u1E7A\u0180aei\u1F12\u1F16\u1F1Als;\u403Dst;\u625Fv\u0100;D\u0235\u1F20D;\u6A78parsl;\u69E5\u0100Da\u1F2F\u1F33ot;\u6253rr;\u6971\u0180cdi\u1F3E\u1F41\u1EF8r;\u612Fo\xF4\u0352\u0100ah\u1F49\u1F4B;\u43B7\u803B\xF0\u40F0\u0100mr\u1F53\u1F57l\u803B\xEB\u40EBo;\u60AC\u0180cip\u1F61\u1F64\u1F67l;\u4021s\xF4\u056E\u0100eo\u1F6C\u1F74ctatio\xEE\u0559nential\xE5\u0579\u09E1\u1F92\0\u1F9E\0\u1FA1\u1FA7\0\0\u1FC6\u1FCC\0\u1FD3\0\u1FE6\u1FEA\u2000\0\u2008\u205Allingdotse\xF1\u1E44y;\u4444male;\u6640\u0180ilr\u1FAD\u1FB3\u1FC1lig;\u8000\uFB03\u0269\u1FB9\0\0\u1FBDg;\u8000\uFB00ig;\u8000\uFB04;\uC000\u{1D523}lig;\u8000\uFB01lig;\uC000fj\u0180alt\u1FD9\u1FDC\u1FE1t;\u666Dig;\u8000\uFB02ns;\u65B1of;\u4192\u01F0\u1FEE\0\u1FF3f;\uC000\u{1D557}\u0100ak\u05BF\u1FF7\u0100;v\u1FFC\u1FFD\u62D4;\u6AD9artint;\u6A0D\u0100ao\u200C\u2055\u0100cs\u2011\u2052\u03B1\u201A\u2030\u2038\u2045\u2048\0\u2050\u03B2\u2022\u2025\u2027\u202A\u202C\0\u202E\u803B\xBD\u40BD;\u6153\u803B\xBC\u40BC;\u6155;\u6159;\u615B\u01B3\u2034\0\u2036;\u6154;\u6156\u02B4\u203E\u2041\0\0\u2043\u803B\xBE\u40BE;\u6157;\u615C5;\u6158\u01B6\u204C\0\u204E;\u615A;\u615D8;\u615El;\u6044wn;\u6322cr;\uC000\u{1D4BB}\u0880Eabcdefgijlnorstv\u2082\u2089\u209F\u20A5\u20B0\u20B4\u20F0\u20F5\u20FA\u20FF\u2103\u2112\u2138\u0317\u213E\u2152\u219E\u0100;l\u064D\u2087;\u6A8C\u0180cmp\u2090\u2095\u209Dute;\u41F5ma\u0100;d\u209C\u1CDA\u43B3;\u6A86reve;\u411F\u0100iy\u20AA\u20AErc;\u411D;\u4433ot;\u4121\u0200;lqs\u063E\u0642\u20BD\u20C9\u0180;qs\u063E\u064C\u20C4lan\xF4\u0665\u0200;cdl\u0665\u20D2\u20D5\u20E5c;\u6AA9ot\u0100;o\u20DC\u20DD\u6A80\u0100;l\u20E2\u20E3\u6A82;\u6A84\u0100;e\u20EA\u20ED\uC000\u22DB\uFE00s;\u6A94r;\uC000\u{1D524}\u0100;g\u0673\u061Bmel;\u6137cy;\u4453\u0200;Eaj\u065A\u210C\u210E\u2110;\u6A92;\u6AA5;\u6AA4\u0200Eaes\u211B\u211D\u2129\u2134;\u6269p\u0100;p\u2123\u2124\u6A8Arox\xBB\u2124\u0100;q\u212E\u212F\u6A88\u0100;q\u212E\u211Bim;\u62E7pf;\uC000\u{1D558}\u0100ci\u2143\u2146r;\u610Am\u0180;el\u066B\u214E\u2150;\u6A8E;\u6A90\u8300>;cdlqr\u05EE\u2160\u216A\u216E\u2173\u2179\u0100ci\u2165\u2167;\u6AA7r;\u6A7Aot;\u62D7Par;\u6995uest;\u6A7C\u0280adels\u2184\u216A\u2190\u0656\u219B\u01F0\u2189\0\u218Epro\xF8\u209Er;\u6978q\u0100lq\u063F\u2196les\xF3\u2088i\xED\u066B\u0100en\u21A3\u21ADrtneqq;\uC000\u2269\uFE00\xC5\u21AA\u0500Aabcefkosy\u21C4\u21C7\u21F1\u21F5\u21FA\u2218\u221D\u222F\u2268\u227Dr\xF2\u03A0\u0200ilmr\u21D0\u21D4\u21D7\u21DBrs\xF0\u1484f\xBB\u2024il\xF4\u06A9\u0100dr\u21E0\u21E4cy;\u444A\u0180;cw\u08F4\u21EB\u21EFir;\u6948;\u61ADar;\u610Firc;\u4125\u0180alr\u2201\u220E\u2213rts\u0100;u\u2209\u220A\u6665it\xBB\u220Alip;\u6026con;\u62B9r;\uC000\u{1D525}s\u0100ew\u2223\u2229arow;\u6925arow;\u6926\u0280amopr\u223A\u223E\u2243\u225E\u2263rr;\u61FFtht;\u623Bk\u0100lr\u2249\u2253eftarrow;\u61A9ightarrow;\u61AAf;\uC000\u{1D559}bar;\u6015\u0180clt\u226F\u2274\u2278r;\uC000\u{1D4BD}as\xE8\u21F4rok;\u4127\u0100bp\u2282\u2287ull;\u6043hen\xBB\u1C5B\u0AE1\u22A3\0\u22AA\0\u22B8\u22C5\u22CE\0\u22D5\u22F3\0\0\u22F8\u2322\u2367\u2362\u237F\0\u2386\u23AA\u23B4cute\u803B\xED\u40ED\u0180;iy\u0771\u22B0\u22B5rc\u803B\xEE\u40EE;\u4438\u0100cx\u22BC\u22BFy;\u4435cl\u803B\xA1\u40A1\u0100fr\u039F\u22C9;\uC000\u{1D526}rave\u803B\xEC\u40EC\u0200;ino\u073E\u22DD\u22E9\u22EE\u0100in\u22E2\u22E6nt;\u6A0Ct;\u622Dfin;\u69DCta;\u6129lig;\u4133\u0180aop\u22FE\u231A\u231D\u0180cgt\u2305\u2308\u2317r;\u412B\u0180elp\u071F\u230F\u2313in\xE5\u078Ear\xF4\u0720h;\u4131f;\u62B7ed;\u41B5\u0280;cfot\u04F4\u232C\u2331\u233D\u2341are;\u6105in\u0100;t\u2338\u2339\u621Eie;\u69DDdo\xF4\u2319\u0280;celp\u0757\u234C\u2350\u235B\u2361al;\u62BA\u0100gr\u2355\u2359er\xF3\u1563\xE3\u234Darhk;\u6A17rod;\u6A3C\u0200cgpt\u236F\u2372\u2376\u237By;\u4451on;\u412Ff;\uC000\u{1D55A}a;\u43B9uest\u803B\xBF\u40BF\u0100ci\u238A\u238Fr;\uC000\u{1D4BE}n\u0280;Edsv\u04F4\u239B\u239D\u23A1\u04F3;\u62F9ot;\u62F5\u0100;v\u23A6\u23A7\u62F4;\u62F3\u0100;i\u0777\u23AElde;\u4129\u01EB\u23B8\0\u23BCcy;\u4456l\u803B\xEF\u40EF\u0300cfmosu\u23CC\u23D7\u23DC\u23E1\u23E7\u23F5\u0100iy\u23D1\u23D5rc;\u4135;\u4439r;\uC000\u{1D527}ath;\u4237pf;\uC000\u{1D55B}\u01E3\u23EC\0\u23F1r;\uC000\u{1D4BF}rcy;\u4458kcy;\u4454\u0400acfghjos\u240B\u2416\u2422\u2427\u242D\u2431\u2435\u243Bppa\u0100;v\u2413\u2414\u43BA;\u43F0\u0100ey\u241B\u2420dil;\u4137;\u443Ar;\uC000\u{1D528}reen;\u4138cy;\u4445cy;\u445Cpf;\uC000\u{1D55C}cr;\uC000\u{1D4C0}\u0B80ABEHabcdefghjlmnoprstuv\u2470\u2481\u2486\u248D\u2491\u250E\u253D\u255A\u2580\u264E\u265E\u2665\u2679\u267D\u269A\u26B2\u26D8\u275D\u2768\u278B\u27C0\u2801\u2812\u0180art\u2477\u247A\u247Cr\xF2\u09C6\xF2\u0395ail;\u691Barr;\u690E\u0100;g\u0994\u248B;\u6A8Bar;\u6962\u0963\u24A5\0\u24AA\0\u24B1\0\0\0\0\0\u24B5\u24BA\0\u24C6\u24C8\u24CD\0\u24F9ute;\u413Amptyv;\u69B4ra\xEE\u084Cbda;\u43BBg\u0180;dl\u088E\u24C1\u24C3;\u6991\xE5\u088E;\u6A85uo\u803B\xAB\u40ABr\u0400;bfhlpst\u0899\u24DE\u24E6\u24E9\u24EB\u24EE\u24F1\u24F5\u0100;f\u089D\u24E3s;\u691Fs;\u691D\xEB\u2252p;\u61ABl;\u6939im;\u6973l;\u61A2\u0180;ae\u24FF\u2500\u2504\u6AABil;\u6919\u0100;s\u2509\u250A\u6AAD;\uC000\u2AAD\uFE00\u0180abr\u2515\u2519\u251Drr;\u690Crk;\u6772\u0100ak\u2522\u252Cc\u0100ek\u2528\u252A;\u407B;\u405B\u0100es\u2531\u2533;\u698Bl\u0100du\u2539\u253B;\u698F;\u698D\u0200aeuy\u2546\u254B\u2556\u2558ron;\u413E\u0100di\u2550\u2554il;\u413C\xEC\u08B0\xE2\u2529;\u443B\u0200cqrs\u2563\u2566\u256D\u257Da;\u6936uo\u0100;r\u0E19\u1746\u0100du\u2572\u2577har;\u6967shar;\u694Bh;\u61B2\u0280;fgqs\u258B\u258C\u0989\u25F3\u25FF\u6264t\u0280ahlrt\u2598\u25A4\u25B7\u25C2\u25E8rrow\u0100;t\u0899\u25A1a\xE9\u24F6arpoon\u0100du\u25AF\u25B4own\xBB\u045Ap\xBB\u0966eftarrows;\u61C7ight\u0180ahs\u25CD\u25D6\u25DErrow\u0100;s\u08F4\u08A7arpoon\xF3\u0F98quigarro\xF7\u21F0hreetimes;\u62CB\u0180;qs\u258B\u0993\u25FAlan\xF4\u09AC\u0280;cdgs\u09AC\u260A\u260D\u261D\u2628c;\u6AA8ot\u0100;o\u2614\u2615\u6A7F\u0100;r\u261A\u261B\u6A81;\u6A83\u0100;e\u2622\u2625\uC000\u22DA\uFE00s;\u6A93\u0280adegs\u2633\u2639\u263D\u2649\u264Bppro\xF8\u24C6ot;\u62D6q\u0100gq\u2643\u2645\xF4\u0989gt\xF2\u248C\xF4\u099Bi\xED\u09B2\u0180ilr\u2655\u08E1\u265Asht;\u697C;\uC000\u{1D529}\u0100;E\u099C\u2663;\u6A91\u0161\u2669\u2676r\u0100du\u25B2\u266E\u0100;l\u0965\u2673;\u696Alk;\u6584cy;\u4459\u0280;acht\u0A48\u2688\u268B\u2691\u2696r\xF2\u25C1orne\xF2\u1D08ard;\u696Bri;\u65FA\u0100io\u269F\u26A4dot;\u4140ust\u0100;a\u26AC\u26AD\u63B0che\xBB\u26AD\u0200Eaes\u26BB\u26BD\u26C9\u26D4;\u6268p\u0100;p\u26C3\u26C4\u6A89rox\xBB\u26C4\u0100;q\u26CE\u26CF\u6A87\u0100;q\u26CE\u26BBim;\u62E6\u0400abnoptwz\u26E9\u26F4\u26F7\u271A\u272F\u2741\u2747\u2750\u0100nr\u26EE\u26F1g;\u67ECr;\u61FDr\xEB\u08C1g\u0180lmr\u26FF\u270D\u2714eft\u0100ar\u09E6\u2707ight\xE1\u09F2apsto;\u67FCight\xE1\u09FDparrow\u0100lr\u2725\u2729ef\xF4\u24EDight;\u61AC\u0180afl\u2736\u2739\u273Dr;\u6985;\uC000\u{1D55D}us;\u6A2Dimes;\u6A34\u0161\u274B\u274Fst;\u6217\xE1\u134E\u0180;ef\u2757\u2758\u1800\u65CAnge\xBB\u2758ar\u0100;l\u2764\u2765\u4028t;\u6993\u0280achmt\u2773\u2776\u277C\u2785\u2787r\xF2\u08A8orne\xF2\u1D8Car\u0100;d\u0F98\u2783;\u696D;\u600Eri;\u62BF\u0300achiqt\u2798\u279D\u0A40\u27A2\u27AE\u27BBquo;\u6039r;\uC000\u{1D4C1}m\u0180;eg\u09B2\u27AA\u27AC;\u6A8D;\u6A8F\u0100bu\u252A\u27B3o\u0100;r\u0E1F\u27B9;\u601Arok;\u4142\u8400<;cdhilqr\u082B\u27D2\u2639\u27DC\u27E0\u27E5\u27EA\u27F0\u0100ci\u27D7\u27D9;\u6AA6r;\u6A79re\xE5\u25F2mes;\u62C9arr;\u6976uest;\u6A7B\u0100Pi\u27F5\u27F9ar;\u6996\u0180;ef\u2800\u092D\u181B\u65C3r\u0100du\u2807\u280Dshar;\u694Ahar;\u6966\u0100en\u2817\u2821rtneqq;\uC000\u2268\uFE00\xC5\u281E\u0700Dacdefhilnopsu\u2840\u2845\u2882\u288E\u2893\u28A0\u28A5\u28A8\u28DA\u28E2\u28E4\u0A83\u28F3\u2902Dot;\u623A\u0200clpr\u284E\u2852\u2863\u287Dr\u803B\xAF\u40AF\u0100et\u2857\u2859;\u6642\u0100;e\u285E\u285F\u6720se\xBB\u285F\u0100;s\u103B\u2868to\u0200;dlu\u103B\u2873\u2877\u287Bow\xEE\u048Cef\xF4\u090F\xF0\u13D1ker;\u65AE\u0100oy\u2887\u288Cmma;\u6A29;\u443Cash;\u6014asuredangle\xBB\u1626r;\uC000\u{1D52A}o;\u6127\u0180cdn\u28AF\u28B4\u28C9ro\u803B\xB5\u40B5\u0200;acd\u1464\u28BD\u28C0\u28C4s\xF4\u16A7ir;\u6AF0ot\u80BB\xB7\u01B5us\u0180;bd\u28D2\u1903\u28D3\u6212\u0100;u\u1D3C\u28D8;\u6A2A\u0163\u28DE\u28E1p;\u6ADB\xF2\u2212\xF0\u0A81\u0100dp\u28E9\u28EEels;\u62A7f;\uC000\u{1D55E}\u0100ct\u28F8\u28FDr;\uC000\u{1D4C2}pos\xBB\u159D\u0180;lm\u2909\u290A\u290D\u43BCtimap;\u62B8\u0C00GLRVabcdefghijlmoprstuvw\u2942\u2953\u297E\u2989\u2998\u29DA\u29E9\u2A15\u2A1A\u2A58\u2A5D\u2A83\u2A95\u2AA4\u2AA8\u2B04\u2B07\u2B44\u2B7F\u2BAE\u2C34\u2C67\u2C7C\u2CE9\u0100gt\u2947\u294B;\uC000\u22D9\u0338\u0100;v\u2950\u0BCF\uC000\u226B\u20D2\u0180elt\u295A\u2972\u2976ft\u0100ar\u2961\u2967rrow;\u61CDightarrow;\u61CE;\uC000\u22D8\u0338\u0100;v\u297B\u0C47\uC000\u226A\u20D2ightarrow;\u61CF\u0100Dd\u298E\u2993ash;\u62AFash;\u62AE\u0280bcnpt\u29A3\u29A7\u29AC\u29B1\u29CCla\xBB\u02DEute;\u4144g;\uC000\u2220\u20D2\u0280;Eiop\u0D84\u29BC\u29C0\u29C5\u29C8;\uC000\u2A70\u0338d;\uC000\u224B\u0338s;\u4149ro\xF8\u0D84ur\u0100;a\u29D3\u29D4\u666El\u0100;s\u29D3\u0B38\u01F3\u29DF\0\u29E3p\u80BB\xA0\u0B37mp\u0100;e\u0BF9\u0C00\u0280aeouy\u29F4\u29FE\u2A03\u2A10\u2A13\u01F0\u29F9\0\u29FB;\u6A43on;\u4148dil;\u4146ng\u0100;d\u0D7E\u2A0Aot;\uC000\u2A6D\u0338p;\u6A42;\u443Dash;\u6013\u0380;Aadqsx\u0B92\u2A29\u2A2D\u2A3B\u2A41\u2A45\u2A50rr;\u61D7r\u0100hr\u2A33\u2A36k;\u6924\u0100;o\u13F2\u13F0ot;\uC000\u2250\u0338ui\xF6\u0B63\u0100ei\u2A4A\u2A4Ear;\u6928\xED\u0B98ist\u0100;s\u0BA0\u0B9Fr;\uC000\u{1D52B}\u0200Eest\u0BC5\u2A66\u2A79\u2A7C\u0180;qs\u0BBC\u2A6D\u0BE1\u0180;qs\u0BBC\u0BC5\u2A74lan\xF4\u0BE2i\xED\u0BEA\u0100;r\u0BB6\u2A81\xBB\u0BB7\u0180Aap\u2A8A\u2A8D\u2A91r\xF2\u2971rr;\u61AEar;\u6AF2\u0180;sv\u0F8D\u2A9C\u0F8C\u0100;d\u2AA1\u2AA2\u62FC;\u62FAcy;\u445A\u0380AEadest\u2AB7\u2ABA\u2ABE\u2AC2\u2AC5\u2AF6\u2AF9r\xF2\u2966;\uC000\u2266\u0338rr;\u619Ar;\u6025\u0200;fqs\u0C3B\u2ACE\u2AE3\u2AEFt\u0100ar\u2AD4\u2AD9rro\xF7\u2AC1ightarro\xF7\u2A90\u0180;qs\u0C3B\u2ABA\u2AEAlan\xF4\u0C55\u0100;s\u0C55\u2AF4\xBB\u0C36i\xED\u0C5D\u0100;r\u0C35\u2AFEi\u0100;e\u0C1A\u0C25i\xE4\u0D90\u0100pt\u2B0C\u2B11f;\uC000\u{1D55F}\u8180\xAC;in\u2B19\u2B1A\u2B36\u40ACn\u0200;Edv\u0B89\u2B24\u2B28\u2B2E;\uC000\u22F9\u0338ot;\uC000\u22F5\u0338\u01E1\u0B89\u2B33\u2B35;\u62F7;\u62F6i\u0100;v\u0CB8\u2B3C\u01E1\u0CB8\u2B41\u2B43;\u62FE;\u62FD\u0180aor\u2B4B\u2B63\u2B69r\u0200;ast\u0B7B\u2B55\u2B5A\u2B5Flle\xEC\u0B7Bl;\uC000\u2AFD\u20E5;\uC000\u2202\u0338lint;\u6A14\u0180;ce\u0C92\u2B70\u2B73u\xE5\u0CA5\u0100;c\u0C98\u2B78\u0100;e\u0C92\u2B7D\xF1\u0C98\u0200Aait\u2B88\u2B8B\u2B9D\u2BA7r\xF2\u2988rr\u0180;cw\u2B94\u2B95\u2B99\u619B;\uC000\u2933\u0338;\uC000\u219D\u0338ghtarrow\xBB\u2B95ri\u0100;e\u0CCB\u0CD6\u0380chimpqu\u2BBD\u2BCD\u2BD9\u2B04\u0B78\u2BE4\u2BEF\u0200;cer\u0D32\u2BC6\u0D37\u2BC9u\xE5\u0D45;\uC000\u{1D4C3}ort\u026D\u2B05\0\0\u2BD6ar\xE1\u2B56m\u0100;e\u0D6E\u2BDF\u0100;q\u0D74\u0D73su\u0100bp\u2BEB\u2BED\xE5\u0CF8\xE5\u0D0B\u0180bcp\u2BF6\u2C11\u2C19\u0200;Ees\u2BFF\u2C00\u0D22\u2C04\u6284;\uC000\u2AC5\u0338et\u0100;e\u0D1B\u2C0Bq\u0100;q\u0D23\u2C00c\u0100;e\u0D32\u2C17\xF1\u0D38\u0200;Ees\u2C22\u2C23\u0D5F\u2C27\u6285;\uC000\u2AC6\u0338et\u0100;e\u0D58\u2C2Eq\u0100;q\u0D60\u2C23\u0200gilr\u2C3D\u2C3F\u2C45\u2C47\xEC\u0BD7lde\u803B\xF1\u40F1\xE7\u0C43iangle\u0100lr\u2C52\u2C5Ceft\u0100;e\u0C1A\u2C5A\xF1\u0C26ight\u0100;e\u0CCB\u2C65\xF1\u0CD7\u0100;m\u2C6C\u2C6D\u43BD\u0180;es\u2C74\u2C75\u2C79\u4023ro;\u6116p;\u6007\u0480DHadgilrs\u2C8F\u2C94\u2C99\u2C9E\u2CA3\u2CB0\u2CB6\u2CD3\u2CE3ash;\u62ADarr;\u6904p;\uC000\u224D\u20D2ash;\u62AC\u0100et\u2CA8\u2CAC;\uC000\u2265\u20D2;\uC000>\u20D2nfin;\u69DE\u0180Aet\u2CBD\u2CC1\u2CC5rr;\u6902;\uC000\u2264\u20D2\u0100;r\u2CCA\u2CCD\uC000<\u20D2ie;\uC000\u22B4\u20D2\u0100At\u2CD8\u2CDCrr;\u6903rie;\uC000\u22B5\u20D2im;\uC000\u223C\u20D2\u0180Aan\u2CF0\u2CF4\u2D02rr;\u61D6r\u0100hr\u2CFA\u2CFDk;\u6923\u0100;o\u13E7\u13E5ear;\u6927\u1253\u1A95\0\0\0\0\0\0\0\0\0\0\0\0\0\u2D2D\0\u2D38\u2D48\u2D60\u2D65\u2D72\u2D84\u1B07\0\0\u2D8D\u2DAB\0\u2DC8\u2DCE\0\u2DDC\u2E19\u2E2B\u2E3E\u2E43\u0100cs\u2D31\u1A97ute\u803B\xF3\u40F3\u0100iy\u2D3C\u2D45r\u0100;c\u1A9E\u2D42\u803B\xF4\u40F4;\u443E\u0280abios\u1AA0\u2D52\u2D57\u01C8\u2D5Alac;\u4151v;\u6A38old;\u69BClig;\u4153\u0100cr\u2D69\u2D6Dir;\u69BF;\uC000\u{1D52C}\u036F\u2D79\0\0\u2D7C\0\u2D82n;\u42DBave\u803B\xF2\u40F2;\u69C1\u0100bm\u2D88\u0DF4ar;\u69B5\u0200acit\u2D95\u2D98\u2DA5\u2DA8r\xF2\u1A80\u0100ir\u2D9D\u2DA0r;\u69BEoss;\u69BBn\xE5\u0E52;\u69C0\u0180aei\u2DB1\u2DB5\u2DB9cr;\u414Dga;\u43C9\u0180cdn\u2DC0\u2DC5\u01CDron;\u43BF;\u69B6pf;\uC000\u{1D560}\u0180ael\u2DD4\u2DD7\u01D2r;\u69B7rp;\u69B9\u0380;adiosv\u2DEA\u2DEB\u2DEE\u2E08\u2E0D\u2E10\u2E16\u6228r\xF2\u1A86\u0200;efm\u2DF7\u2DF8\u2E02\u2E05\u6A5Dr\u0100;o\u2DFE\u2DFF\u6134f\xBB\u2DFF\u803B\xAA\u40AA\u803B\xBA\u40BAgof;\u62B6r;\u6A56lope;\u6A57;\u6A5B\u0180clo\u2E1F\u2E21\u2E27\xF2\u2E01ash\u803B\xF8\u40F8l;\u6298i\u016C\u2E2F\u2E34de\u803B\xF5\u40F5es\u0100;a\u01DB\u2E3As;\u6A36ml\u803B\xF6\u40F6bar;\u633D\u0AE1\u2E5E\0\u2E7D\0\u2E80\u2E9D\0\u2EA2\u2EB9\0\0\u2ECB\u0E9C\0\u2F13\0\0\u2F2B\u2FBC\0\u2FC8r\u0200;ast\u0403\u2E67\u2E72\u0E85\u8100\xB6;l\u2E6D\u2E6E\u40B6le\xEC\u0403\u0269\u2E78\0\0\u2E7Bm;\u6AF3;\u6AFDy;\u443Fr\u0280cimpt\u2E8B\u2E8F\u2E93\u1865\u2E97nt;\u4025od;\u402Eil;\u6030enk;\u6031r;\uC000\u{1D52D}\u0180imo\u2EA8\u2EB0\u2EB4\u0100;v\u2EAD\u2EAE\u43C6;\u43D5ma\xF4\u0A76ne;\u660E\u0180;tv\u2EBF\u2EC0\u2EC8\u43C0chfork\xBB\u1FFD;\u43D6\u0100au\u2ECF\u2EDFn\u0100ck\u2ED5\u2EDDk\u0100;h\u21F4\u2EDB;\u610E\xF6\u21F4s\u0480;abcdemst\u2EF3\u2EF4\u1908\u2EF9\u2EFD\u2F04\u2F06\u2F0A\u2F0E\u402Bcir;\u6A23ir;\u6A22\u0100ou\u1D40\u2F02;\u6A25;\u6A72n\u80BB\xB1\u0E9Dim;\u6A26wo;\u6A27\u0180ipu\u2F19\u2F20\u2F25ntint;\u6A15f;\uC000\u{1D561}nd\u803B\xA3\u40A3\u0500;Eaceinosu\u0EC8\u2F3F\u2F41\u2F44\u2F47\u2F81\u2F89\u2F92\u2F7E\u2FB6;\u6AB3p;\u6AB7u\xE5\u0ED9\u0100;c\u0ECE\u2F4C\u0300;acens\u0EC8\u2F59\u2F5F\u2F66\u2F68\u2F7Eppro\xF8\u2F43urlye\xF1\u0ED9\xF1\u0ECE\u0180aes\u2F6F\u2F76\u2F7Approx;\u6AB9qq;\u6AB5im;\u62E8i\xED\u0EDFme\u0100;s\u2F88\u0EAE\u6032\u0180Eas\u2F78\u2F90\u2F7A\xF0\u2F75\u0180dfp\u0EEC\u2F99\u2FAF\u0180als\u2FA0\u2FA5\u2FAAlar;\u632Eine;\u6312urf;\u6313\u0100;t\u0EFB\u2FB4\xEF\u0EFBrel;\u62B0\u0100ci\u2FC0\u2FC5r;\uC000\u{1D4C5};\u43C8ncsp;\u6008\u0300fiopsu\u2FDA\u22E2\u2FDF\u2FE5\u2FEB\u2FF1r;\uC000\u{1D52E}pf;\uC000\u{1D562}rime;\u6057cr;\uC000\u{1D4C6}\u0180aeo\u2FF8\u3009\u3013t\u0100ei\u2FFE\u3005rnion\xF3\u06B0nt;\u6A16st\u0100;e\u3010\u3011\u403F\xF1\u1F19\xF4\u0F14\u0A80ABHabcdefhilmnoprstux\u3040\u3051\u3055\u3059\u30E0\u310E\u312B\u3147\u3162\u3172\u318E\u3206\u3215\u3224\u3229\u3258\u326E\u3272\u3290\u32B0\u32B7\u0180art\u3047\u304A\u304Cr\xF2\u10B3\xF2\u03DDail;\u691Car\xF2\u1C65ar;\u6964\u0380cdenqrt\u3068\u3075\u3078\u307F\u308F\u3094\u30CC\u0100eu\u306D\u3071;\uC000\u223D\u0331te;\u4155i\xE3\u116Emptyv;\u69B3g\u0200;del\u0FD1\u3089\u308B\u308D;\u6992;\u69A5\xE5\u0FD1uo\u803B\xBB\u40BBr\u0580;abcfhlpstw\u0FDC\u30AC\u30AF\u30B7\u30B9\u30BC\u30BE\u30C0\u30C3\u30C7\u30CAp;\u6975\u0100;f\u0FE0\u30B4s;\u6920;\u6933s;\u691E\xEB\u225D\xF0\u272El;\u6945im;\u6974l;\u61A3;\u619D\u0100ai\u30D1\u30D5il;\u691Ao\u0100;n\u30DB\u30DC\u6236al\xF3\u0F1E\u0180abr\u30E7\u30EA\u30EEr\xF2\u17E5rk;\u6773\u0100ak\u30F3\u30FDc\u0100ek\u30F9\u30FB;\u407D;\u405D\u0100es\u3102\u3104;\u698Cl\u0100du\u310A\u310C;\u698E;\u6990\u0200aeuy\u3117\u311C\u3127\u3129ron;\u4159\u0100di\u3121\u3125il;\u4157\xEC\u0FF2\xE2\u30FA;\u4440\u0200clqs\u3134\u3137\u313D\u3144a;\u6937dhar;\u6969uo\u0100;r\u020E\u020Dh;\u61B3\u0180acg\u314E\u315F\u0F44l\u0200;ips\u0F78\u3158\u315B\u109Cn\xE5\u10BBar\xF4\u0FA9t;\u65AD\u0180ilr\u3169\u1023\u316Esht;\u697D;\uC000\u{1D52F}\u0100ao\u3177\u3186r\u0100du\u317D\u317F\xBB\u047B\u0100;l\u1091\u3184;\u696C\u0100;v\u318B\u318C\u43C1;\u43F1\u0180gns\u3195\u31F9\u31FCht\u0300ahlrst\u31A4\u31B0\u31C2\u31D8\u31E4\u31EErrow\u0100;t\u0FDC\u31ADa\xE9\u30C8arpoon\u0100du\u31BB\u31BFow\xEE\u317Ep\xBB\u1092eft\u0100ah\u31CA\u31D0rrow\xF3\u0FEAarpoon\xF3\u0551ightarrows;\u61C9quigarro\xF7\u30CBhreetimes;\u62CCg;\u42DAingdotse\xF1\u1F32\u0180ahm\u320D\u3210\u3213r\xF2\u0FEAa\xF2\u0551;\u600Foust\u0100;a\u321E\u321F\u63B1che\xBB\u321Fmid;\u6AEE\u0200abpt\u3232\u323D\u3240\u3252\u0100nr\u3237\u323Ag;\u67EDr;\u61FEr\xEB\u1003\u0180afl\u3247\u324A\u324Er;\u6986;\uC000\u{1D563}us;\u6A2Eimes;\u6A35\u0100ap\u325D\u3267r\u0100;g\u3263\u3264\u4029t;\u6994olint;\u6A12ar\xF2\u31E3\u0200achq\u327B\u3280\u10BC\u3285quo;\u603Ar;\uC000\u{1D4C7}\u0100bu\u30FB\u328Ao\u0100;r\u0214\u0213\u0180hir\u3297\u329B\u32A0re\xE5\u31F8mes;\u62CAi\u0200;efl\u32AA\u1059\u1821\u32AB\u65B9tri;\u69CEluhar;\u6968;\u611E\u0D61\u32D5\u32DB\u32DF\u332C\u3338\u3371\0\u337A\u33A4\0\0\u33EC\u33F0\0\u3428\u3448\u345A\u34AD\u34B1\u34CA\u34F1\0\u3616\0\0\u3633cute;\u415Bqu\xEF\u27BA\u0500;Eaceinpsy\u11ED\u32F3\u32F5\u32FF\u3302\u330B\u330F\u331F\u3326\u3329;\u6AB4\u01F0\u32FA\0\u32FC;\u6AB8on;\u4161u\xE5\u11FE\u0100;d\u11F3\u3307il;\u415Frc;\u415D\u0180Eas\u3316\u3318\u331B;\u6AB6p;\u6ABAim;\u62E9olint;\u6A13i\xED\u1204;\u4441ot\u0180;be\u3334\u1D47\u3335\u62C5;\u6A66\u0380Aacmstx\u3346\u334A\u3357\u335B\u335E\u3363\u336Drr;\u61D8r\u0100hr\u3350\u3352\xEB\u2228\u0100;o\u0A36\u0A34t\u803B\xA7\u40A7i;\u403Bwar;\u6929m\u0100in\u3369\xF0nu\xF3\xF1t;\u6736r\u0100;o\u3376\u2055\uC000\u{1D530}\u0200acoy\u3382\u3386\u3391\u33A0rp;\u666F\u0100hy\u338B\u338Fcy;\u4449;\u4448rt\u026D\u3399\0\0\u339Ci\xE4\u1464ara\xEC\u2E6F\u803B\xAD\u40AD\u0100gm\u33A8\u33B4ma\u0180;fv\u33B1\u33B2\u33B2\u43C3;\u43C2\u0400;deglnpr\u12AB\u33C5\u33C9\u33CE\u33D6\u33DE\u33E1\u33E6ot;\u6A6A\u0100;q\u12B1\u12B0\u0100;E\u33D3\u33D4\u6A9E;\u6AA0\u0100;E\u33DB\u33DC\u6A9D;\u6A9Fe;\u6246lus;\u6A24arr;\u6972ar\xF2\u113D\u0200aeit\u33F8\u3408\u340F\u3417\u0100ls\u33FD\u3404lsetm\xE9\u336Ahp;\u6A33parsl;\u69E4\u0100dl\u1463\u3414e;\u6323\u0100;e\u341C\u341D\u6AAA\u0100;s\u3422\u3423\u6AAC;\uC000\u2AAC\uFE00\u0180flp\u342E\u3433\u3442tcy;\u444C\u0100;b\u3438\u3439\u402F\u0100;a\u343E\u343F\u69C4r;\u633Ff;\uC000\u{1D564}a\u0100dr\u344D\u0402es\u0100;u\u3454\u3455\u6660it\xBB\u3455\u0180csu\u3460\u3479\u349F\u0100au\u3465\u346Fp\u0100;s\u1188\u346B;\uC000\u2293\uFE00p\u0100;s\u11B4\u3475;\uC000\u2294\uFE00u\u0100bp\u347F\u348F\u0180;es\u1197\u119C\u3486et\u0100;e\u1197\u348D\xF1\u119D\u0180;es\u11A8\u11AD\u3496et\u0100;e\u11A8\u349D\xF1\u11AE\u0180;af\u117B\u34A6\u05B0r\u0165\u34AB\u05B1\xBB\u117Car\xF2\u1148\u0200cemt\u34B9\u34BE\u34C2\u34C5r;\uC000\u{1D4C8}tm\xEE\xF1i\xEC\u3415ar\xE6\u11BE\u0100ar\u34CE\u34D5r\u0100;f\u34D4\u17BF\u6606\u0100an\u34DA\u34EDight\u0100ep\u34E3\u34EApsilo\xEE\u1EE0h\xE9\u2EAFs\xBB\u2852\u0280bcmnp\u34FB\u355E\u1209\u358B\u358E\u0480;Edemnprs\u350E\u350F\u3511\u3515\u351E\u3523\u352C\u3531\u3536\u6282;\u6AC5ot;\u6ABD\u0100;d\u11DA\u351Aot;\u6AC3ult;\u6AC1\u0100Ee\u3528\u352A;\u6ACB;\u628Alus;\u6ABFarr;\u6979\u0180eiu\u353D\u3552\u3555t\u0180;en\u350E\u3545\u354Bq\u0100;q\u11DA\u350Feq\u0100;q\u352B\u3528m;\u6AC7\u0100bp\u355A\u355C;\u6AD5;\u6AD3c\u0300;acens\u11ED\u356C\u3572\u3579\u357B\u3326ppro\xF8\u32FAurlye\xF1\u11FE\xF1\u11F3\u0180aes\u3582\u3588\u331Bppro\xF8\u331Aq\xF1\u3317g;\u666A\u0680123;Edehlmnps\u35A9\u35AC\u35AF\u121C\u35B2\u35B4\u35C0\u35C9\u35D5\u35DA\u35DF\u35E8\u35ED\u803B\xB9\u40B9\u803B\xB2\u40B2\u803B\xB3\u40B3;\u6AC6\u0100os\u35B9\u35BCt;\u6ABEub;\u6AD8\u0100;d\u1222\u35C5ot;\u6AC4s\u0100ou\u35CF\u35D2l;\u67C9b;\u6AD7arr;\u697Bult;\u6AC2\u0100Ee\u35E4\u35E6;\u6ACC;\u628Blus;\u6AC0\u0180eiu\u35F4\u3609\u360Ct\u0180;en\u121C\u35FC\u3602q\u0100;q\u1222\u35B2eq\u0100;q\u35E7\u35E4m;\u6AC8\u0100bp\u3611\u3613;\u6AD4;\u6AD6\u0180Aan\u361C\u3620\u362Drr;\u61D9r\u0100hr\u3626\u3628\xEB\u222E\u0100;o\u0A2B\u0A29war;\u692Alig\u803B\xDF\u40DF\u0BE1\u3651\u365D\u3660\u12CE\u3673\u3679\0\u367E\u36C2\0\0\0\0\0\u36DB\u3703\0\u3709\u376C\0\0\0\u3787\u0272\u3656\0\0\u365Bget;\u6316;\u43C4r\xEB\u0E5F\u0180aey\u3666\u366B\u3670ron;\u4165dil;\u4163;\u4442lrec;\u6315r;\uC000\u{1D531}\u0200eiko\u3686\u369D\u36B5\u36BC\u01F2\u368B\0\u3691e\u01004f\u1284\u1281a\u0180;sv\u3698\u3699\u369B\u43B8ym;\u43D1\u0100cn\u36A2\u36B2k\u0100as\u36A8\u36AEppro\xF8\u12C1im\xBB\u12ACs\xF0\u129E\u0100as\u36BA\u36AE\xF0\u12C1rn\u803B\xFE\u40FE\u01EC\u031F\u36C6\u22E7es\u8180\xD7;bd\u36CF\u36D0\u36D8\u40D7\u0100;a\u190F\u36D5r;\u6A31;\u6A30\u0180eps\u36E1\u36E3\u3700\xE1\u2A4D\u0200;bcf\u0486\u36EC\u36F0\u36F4ot;\u6336ir;\u6AF1\u0100;o\u36F9\u36FC\uC000\u{1D565}rk;\u6ADA\xE1\u3362rime;\u6034\u0180aip\u370F\u3712\u3764d\xE5\u1248\u0380adempst\u3721\u374D\u3740\u3751\u3757\u375C\u375Fngle\u0280;dlqr\u3730\u3731\u3736\u3740\u3742\u65B5own\xBB\u1DBBeft\u0100;e\u2800\u373E\xF1\u092E;\u625Cight\u0100;e\u32AA\u374B\xF1\u105Aot;\u65ECinus;\u6A3Alus;\u6A39b;\u69CDime;\u6A3Bezium;\u63E2\u0180cht\u3772\u377D\u3781\u0100ry\u3777\u377B;\uC000\u{1D4C9};\u4446cy;\u445Brok;\u4167\u0100io\u378B\u378Ex\xF4\u1777head\u0100lr\u3797\u37A0eftarro\xF7\u084Fightarrow\xBB\u0F5D\u0900AHabcdfghlmoprstuw\u37D0\u37D3\u37D7\u37E4\u37F0\u37FC\u380E\u381C\u3823\u3834\u3851\u385D\u386B\u38A9\u38CC\u38D2\u38EA\u38F6r\xF2\u03EDar;\u6963\u0100cr\u37DC\u37E2ute\u803B\xFA\u40FA\xF2\u1150r\u01E3\u37EA\0\u37EDy;\u445Eve;\u416D\u0100iy\u37F5\u37FArc\u803B\xFB\u40FB;\u4443\u0180abh\u3803\u3806\u380Br\xF2\u13ADlac;\u4171a\xF2\u13C3\u0100ir\u3813\u3818sht;\u697E;\uC000\u{1D532}rave\u803B\xF9\u40F9\u0161\u3827\u3831r\u0100lr\u382C\u382E\xBB\u0957\xBB\u1083lk;\u6580\u0100ct\u3839\u384D\u026F\u383F\0\0\u384Arn\u0100;e\u3845\u3846\u631Cr\xBB\u3846op;\u630Fri;\u65F8\u0100al\u3856\u385Acr;\u416B\u80BB\xA8\u0349\u0100gp\u3862\u3866on;\u4173f;\uC000\u{1D566}\u0300adhlsu\u114B\u3878\u387D\u1372\u3891\u38A0own\xE1\u13B3arpoon\u0100lr\u3888\u388Cef\xF4\u382Digh\xF4\u382Fi\u0180;hl\u3899\u389A\u389C\u43C5\xBB\u13FAon\xBB\u389Aparrows;\u61C8\u0180cit\u38B0\u38C4\u38C8\u026F\u38B6\0\0\u38C1rn\u0100;e\u38BC\u38BD\u631Dr\xBB\u38BDop;\u630Eng;\u416Fri;\u65F9cr;\uC000\u{1D4CA}\u0180dir\u38D9\u38DD\u38E2ot;\u62F0lde;\u4169i\u0100;f\u3730\u38E8\xBB\u1813\u0100am\u38EF\u38F2r\xF2\u38A8l\u803B\xFC\u40FCangle;\u69A7\u0780ABDacdeflnoprsz\u391C\u391F\u3929\u392D\u39B5\u39B8\u39BD\u39DF\u39E4\u39E8\u39F3\u39F9\u39FD\u3A01\u3A20r\xF2\u03F7ar\u0100;v\u3926\u3927\u6AE8;\u6AE9as\xE8\u03E1\u0100nr\u3932\u3937grt;\u699C\u0380eknprst\u34E3\u3946\u394B\u3952\u395D\u3964\u3996app\xE1\u2415othin\xE7\u1E96\u0180hir\u34EB\u2EC8\u3959op\xF4\u2FB5\u0100;h\u13B7\u3962\xEF\u318D\u0100iu\u3969\u396Dgm\xE1\u33B3\u0100bp\u3972\u3984setneq\u0100;q\u397D\u3980\uC000\u228A\uFE00;\uC000\u2ACB\uFE00setneq\u0100;q\u398F\u3992\uC000\u228B\uFE00;\uC000\u2ACC\uFE00\u0100hr\u399B\u399Fet\xE1\u369Ciangle\u0100lr\u39AA\u39AFeft\xBB\u0925ight\xBB\u1051y;\u4432ash\xBB\u1036\u0180elr\u39C4\u39D2\u39D7\u0180;be\u2DEA\u39CB\u39CFar;\u62BBq;\u625Alip;\u62EE\u0100bt\u39DC\u1468a\xF2\u1469r;\uC000\u{1D533}tr\xE9\u39AEsu\u0100bp\u39EF\u39F1\xBB\u0D1C\xBB\u0D59pf;\uC000\u{1D567}ro\xF0\u0EFBtr\xE9\u39B4\u0100cu\u3A06\u3A0Br;\uC000\u{1D4CB}\u0100bp\u3A10\u3A18n\u0100Ee\u3980\u3A16\xBB\u397En\u0100Ee\u3992\u3A1E\xBB\u3990igzag;\u699A\u0380cefoprs\u3A36\u3A3B\u3A56\u3A5B\u3A54\u3A61\u3A6Airc;\u4175\u0100di\u3A40\u3A51\u0100bg\u3A45\u3A49ar;\u6A5Fe\u0100;q\u15FA\u3A4F;\u6259erp;\u6118r;\uC000\u{1D534}pf;\uC000\u{1D568}\u0100;e\u1479\u3A66at\xE8\u1479cr;\uC000\u{1D4CC}\u0AE3\u178E\u3A87\0\u3A8B\0\u3A90\u3A9B\0\0\u3A9D\u3AA8\u3AAB\u3AAF\0\0\u3AC3\u3ACE\0\u3AD8\u17DC\u17DFtr\xE9\u17D1r;\uC000\u{1D535}\u0100Aa\u3A94\u3A97r\xF2\u03C3r\xF2\u09F6;\u43BE\u0100Aa\u3AA1\u3AA4r\xF2\u03B8r\xF2\u09EBa\xF0\u2713is;\u62FB\u0180dpt\u17A4\u3AB5\u3ABE\u0100fl\u3ABA\u17A9;\uC000\u{1D569}im\xE5\u17B2\u0100Aa\u3AC7\u3ACAr\xF2\u03CEr\xF2\u0A01\u0100cq\u3AD2\u17B8r;\uC000\u{1D4CD}\u0100pt\u17D6\u3ADCr\xE9\u17D4\u0400acefiosu\u3AF0\u3AFD\u3B08\u3B0C\u3B11\u3B15\u3B1B\u3B21c\u0100uy\u3AF6\u3AFBte\u803B\xFD\u40FD;\u444F\u0100iy\u3B02\u3B06rc;\u4177;\u444Bn\u803B\xA5\u40A5r;\uC000\u{1D536}cy;\u4457pf;\uC000\u{1D56A}cr;\uC000\u{1D4CE}\u0100cm\u3B26\u3B29y;\u444El\u803B\xFF\u40FF\u0500acdefhiosw\u3B42\u3B48\u3B54\u3B58\u3B64\u3B69\u3B6D\u3B74\u3B7A\u3B80cute;\u417A\u0100ay\u3B4D\u3B52ron;\u417E;\u4437ot;\u417C\u0100et\u3B5D\u3B61tr\xE6\u155Fa;\u43B6r;\uC000\u{1D537}cy;\u4436grarr;\u61DDpf;\uC000\u{1D56B}cr;\uC000\u{1D4CF}\u0100jn\u3B85\u3B87;\u600Dj;\u600C'.split("").map((c) => c.charCodeAt(0)),
);

// node_modules/entities/lib/esm/generated/decode-data-xml.js
var decode_data_xml_default = new Uint16Array(
    // prettier-ignore
    "\u0200aglq	\x1B\u026D\0\0p;\u4026os;\u4027t;\u403Et;\u403Cuot;\u4022".split("").map((c) => c.charCodeAt(0)),
);

// node_modules/entities/lib/esm/decode_codepoint.js
var _a4;
var decodeMap = /* @__PURE__ */ new Map([
    [0, 65533],
    // C1 Unicode control character reference replacements
    [128, 8364],
    [130, 8218],
    [131, 402],
    [132, 8222],
    [133, 8230],
    [134, 8224],
    [135, 8225],
    [136, 710],
    [137, 8240],
    [138, 352],
    [139, 8249],
    [140, 338],
    [142, 381],
    [145, 8216],
    [146, 8217],
    [147, 8220],
    [148, 8221],
    [149, 8226],
    [150, 8211],
    [151, 8212],
    [152, 732],
    [153, 8482],
    [154, 353],
    [155, 8250],
    [156, 339],
    [158, 382],
    [159, 376],
]);
var fromCodePoint =
    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, node/no-unsupported-features/es-builtins
    (_a4 = String.fromCodePoint) !== null && _a4 !== void 0
        ? _a4
        : function (codePoint) {
              let output = '';
              if (codePoint > 65535) {
                  codePoint -= 65536;
                  output += String.fromCharCode(((codePoint >>> 10) & 1023) | 55296);
                  codePoint = 56320 | (codePoint & 1023);
              }
              output += String.fromCharCode(codePoint);
              return output;
          };
function replaceCodePoint(codePoint) {
    var _a5;
    if ((codePoint >= 55296 && codePoint <= 57343) || codePoint > 1114111) {
        return 65533;
    }
    return (_a5 = decodeMap.get(codePoint)) !== null && _a5 !== void 0 ? _a5 : codePoint;
}

// node_modules/entities/lib/esm/decode.js
var CharCodes;
(function (CharCodes3) {
    CharCodes3[(CharCodes3['NUM'] = 35)] = 'NUM';
    CharCodes3[(CharCodes3['SEMI'] = 59)] = 'SEMI';
    CharCodes3[(CharCodes3['EQUALS'] = 61)] = 'EQUALS';
    CharCodes3[(CharCodes3['ZERO'] = 48)] = 'ZERO';
    CharCodes3[(CharCodes3['NINE'] = 57)] = 'NINE';
    CharCodes3[(CharCodes3['LOWER_A'] = 97)] = 'LOWER_A';
    CharCodes3[(CharCodes3['LOWER_F'] = 102)] = 'LOWER_F';
    CharCodes3[(CharCodes3['LOWER_X'] = 120)] = 'LOWER_X';
    CharCodes3[(CharCodes3['LOWER_Z'] = 122)] = 'LOWER_Z';
    CharCodes3[(CharCodes3['UPPER_A'] = 65)] = 'UPPER_A';
    CharCodes3[(CharCodes3['UPPER_F'] = 70)] = 'UPPER_F';
    CharCodes3[(CharCodes3['UPPER_Z'] = 90)] = 'UPPER_Z';
})(CharCodes || (CharCodes = {}));
var TO_LOWER_BIT = 32;
var BinTrieFlags;
(function (BinTrieFlags2) {
    BinTrieFlags2[(BinTrieFlags2['VALUE_LENGTH'] = 49152)] = 'VALUE_LENGTH';
    BinTrieFlags2[(BinTrieFlags2['BRANCH_LENGTH'] = 16256)] = 'BRANCH_LENGTH';
    BinTrieFlags2[(BinTrieFlags2['JUMP_TABLE'] = 127)] = 'JUMP_TABLE';
})(BinTrieFlags || (BinTrieFlags = {}));
function isNumber(code) {
    return code >= CharCodes.ZERO && code <= CharCodes.NINE;
}
function isHexadecimalCharacter(code) {
    return (
        (code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_F) ||
        (code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_F)
    );
}
function isAsciiAlphaNumeric(code) {
    return (
        (code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_Z) ||
        (code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_Z) ||
        isNumber(code)
    );
}
function isEntityInAttributeInvalidEnd(code) {
    return code === CharCodes.EQUALS || isAsciiAlphaNumeric(code);
}
var EntityDecoderState;
(function (EntityDecoderState2) {
    EntityDecoderState2[(EntityDecoderState2['EntityStart'] = 0)] = 'EntityStart';
    EntityDecoderState2[(EntityDecoderState2['NumericStart'] = 1)] = 'NumericStart';
    EntityDecoderState2[(EntityDecoderState2['NumericDecimal'] = 2)] = 'NumericDecimal';
    EntityDecoderState2[(EntityDecoderState2['NumericHex'] = 3)] = 'NumericHex';
    EntityDecoderState2[(EntityDecoderState2['NamedEntity'] = 4)] = 'NamedEntity';
})(EntityDecoderState || (EntityDecoderState = {}));
var DecodingMode;
(function (DecodingMode2) {
    DecodingMode2[(DecodingMode2['Legacy'] = 0)] = 'Legacy';
    DecodingMode2[(DecodingMode2['Strict'] = 1)] = 'Strict';
    DecodingMode2[(DecodingMode2['Attribute'] = 2)] = 'Attribute';
})(DecodingMode || (DecodingMode = {}));
var EntityDecoder = class {
    constructor(decodeTree, emitCodePoint, errors) {
        this.decodeTree = decodeTree;
        this.emitCodePoint = emitCodePoint;
        this.errors = errors;
        this.state = EntityDecoderState.EntityStart;
        this.consumed = 1;
        this.result = 0;
        this.treeIndex = 0;
        this.excess = 1;
        this.decodeMode = DecodingMode.Strict;
    }
    /** Resets the instance to make it reusable. */
    startEntity(decodeMode) {
        this.decodeMode = decodeMode;
        this.state = EntityDecoderState.EntityStart;
        this.result = 0;
        this.treeIndex = 0;
        this.excess = 1;
        this.consumed = 1;
    }
    /**
     * Write an entity to the decoder. This can be called multiple times with partial entities.
     * If the entity is incomplete, the decoder will return -1.
     *
     * Mirrors the implementation of `getDecoder`, but with the ability to stop decoding if the
     * entity is incomplete, and resume when the next string is written.
     *
     * @param string The string containing the entity (or a continuation of the entity).
     * @param offset The offset at which the entity begins. Should be 0 if this is not the first call.
     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
     */
    write(str, offset) {
        switch (this.state) {
            case EntityDecoderState.EntityStart: {
                if (str.charCodeAt(offset) === CharCodes.NUM) {
                    this.state = EntityDecoderState.NumericStart;
                    this.consumed += 1;
                    return this.stateNumericStart(str, offset + 1);
                }
                this.state = EntityDecoderState.NamedEntity;
                return this.stateNamedEntity(str, offset);
            }
            case EntityDecoderState.NumericStart: {
                return this.stateNumericStart(str, offset);
            }
            case EntityDecoderState.NumericDecimal: {
                return this.stateNumericDecimal(str, offset);
            }
            case EntityDecoderState.NumericHex: {
                return this.stateNumericHex(str, offset);
            }
            case EntityDecoderState.NamedEntity: {
                return this.stateNamedEntity(str, offset);
            }
        }
    }
    /**
     * Switches between the numeric decimal and hexadecimal states.
     *
     * Equivalent to the `Numeric character reference state` in the HTML spec.
     *
     * @param str The string containing the entity (or a continuation of the entity).
     * @param offset The current offset.
     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
     */
    stateNumericStart(str, offset) {
        if (offset >= str.length) {
            return -1;
        }
        if ((str.charCodeAt(offset) | TO_LOWER_BIT) === CharCodes.LOWER_X) {
            this.state = EntityDecoderState.NumericHex;
            this.consumed += 1;
            return this.stateNumericHex(str, offset + 1);
        }
        this.state = EntityDecoderState.NumericDecimal;
        return this.stateNumericDecimal(str, offset);
    }
    addToNumericResult(str, start, end2, base) {
        if (start !== end2) {
            const digitCount = end2 - start;
            this.result =
                this.result * Math.pow(base, digitCount) +
                parseInt(str.substr(start, digitCount), base);
            this.consumed += digitCount;
        }
    }
    /**
     * Parses a hexadecimal numeric entity.
     *
     * Equivalent to the `Hexademical character reference state` in the HTML spec.
     *
     * @param str The string containing the entity (or a continuation of the entity).
     * @param offset The current offset.
     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
     */
    stateNumericHex(str, offset) {
        const startIdx = offset;
        while (offset < str.length) {
            const char = str.charCodeAt(offset);
            if (isNumber(char) || isHexadecimalCharacter(char)) {
                offset += 1;
            } else {
                this.addToNumericResult(str, startIdx, offset, 16);
                return this.emitNumericEntity(char, 3);
            }
        }
        this.addToNumericResult(str, startIdx, offset, 16);
        return -1;
    }
    /**
     * Parses a decimal numeric entity.
     *
     * Equivalent to the `Decimal character reference state` in the HTML spec.
     *
     * @param str The string containing the entity (or a continuation of the entity).
     * @param offset The current offset.
     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
     */
    stateNumericDecimal(str, offset) {
        const startIdx = offset;
        while (offset < str.length) {
            const char = str.charCodeAt(offset);
            if (isNumber(char)) {
                offset += 1;
            } else {
                this.addToNumericResult(str, startIdx, offset, 10);
                return this.emitNumericEntity(char, 2);
            }
        }
        this.addToNumericResult(str, startIdx, offset, 10);
        return -1;
    }
    /**
     * Validate and emit a numeric entity.
     *
     * Implements the logic from the `Hexademical character reference start
     * state` and `Numeric character reference end state` in the HTML spec.
     *
     * @param lastCp The last code point of the entity. Used to see if the
     *               entity was terminated with a semicolon.
     * @param expectedLength The minimum number of characters that should be
     *                       consumed. Used to validate that at least one digit
     *                       was consumed.
     * @returns The number of characters that were consumed.
     */
    emitNumericEntity(lastCp, expectedLength) {
        var _a5;
        if (this.consumed <= expectedLength) {
            (_a5 = this.errors) === null || _a5 === void 0
                ? void 0
                : _a5.absenceOfDigitsInNumericCharacterReference(this.consumed);
            return 0;
        }
        if (lastCp === CharCodes.SEMI) {
            this.consumed += 1;
        } else if (this.decodeMode === DecodingMode.Strict) {
            return 0;
        }
        this.emitCodePoint(replaceCodePoint(this.result), this.consumed);
        if (this.errors) {
            if (lastCp !== CharCodes.SEMI) {
                this.errors.missingSemicolonAfterCharacterReference();
            }
            this.errors.validateNumericCharacterReference(this.result);
        }
        return this.consumed;
    }
    /**
     * Parses a named entity.
     *
     * Equivalent to the `Named character reference state` in the HTML spec.
     *
     * @param str The string containing the entity (or a continuation of the entity).
     * @param offset The current offset.
     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.
     */
    stateNamedEntity(str, offset) {
        const { decodeTree } = this;
        let current = decodeTree[this.treeIndex];
        let valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;
        for (; offset < str.length; offset++, this.excess++) {
            const char = str.charCodeAt(offset);
            this.treeIndex = determineBranch(
                decodeTree,
                current,
                this.treeIndex + Math.max(1, valueLength),
                char,
            );
            if (this.treeIndex < 0) {
                return this.result === 0 || // If we are parsing an attribute
                    (this.decodeMode === DecodingMode.Attribute && // We shouldn't have consumed any characters after the entity,
                        (valueLength === 0 || // And there should be no invalid characters.
                            isEntityInAttributeInvalidEnd(char)))
                    ? 0
                    : this.emitNotTerminatedNamedEntity();
            }
            current = decodeTree[this.treeIndex];
            valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;
            if (valueLength !== 0) {
                if (char === CharCodes.SEMI) {
                    return this.emitNamedEntityData(
                        this.treeIndex,
                        valueLength,
                        this.consumed + this.excess,
                    );
                }
                if (this.decodeMode !== DecodingMode.Strict) {
                    this.result = this.treeIndex;
                    this.consumed += this.excess;
                    this.excess = 0;
                }
            }
        }
        return -1;
    }
    /**
     * Emit a named entity that was not terminated with a semicolon.
     *
     * @returns The number of characters consumed.
     */
    emitNotTerminatedNamedEntity() {
        var _a5;
        const { result, decodeTree } = this;
        const valueLength = (decodeTree[result] & BinTrieFlags.VALUE_LENGTH) >> 14;
        this.emitNamedEntityData(result, valueLength, this.consumed);
        (_a5 = this.errors) === null || _a5 === void 0
            ? void 0
            : _a5.missingSemicolonAfterCharacterReference();
        return this.consumed;
    }
    /**
     * Emit a named entity.
     *
     * @param result The index of the entity in the decode tree.
     * @param valueLength The number of bytes in the entity.
     * @param consumed The number of characters consumed.
     *
     * @returns The number of characters consumed.
     */
    emitNamedEntityData(result, valueLength, consumed) {
        const { decodeTree } = this;
        this.emitCodePoint(
            valueLength === 1
                ? decodeTree[result] & ~BinTrieFlags.VALUE_LENGTH
                : decodeTree[result + 1],
            consumed,
        );
        if (valueLength === 3) {
            this.emitCodePoint(decodeTree[result + 2], consumed);
        }
        return consumed;
    }
    /**
     * Signal to the parser that the end of the input was reached.
     *
     * Remaining data will be emitted and relevant errors will be produced.
     *
     * @returns The number of characters consumed.
     */
    end() {
        var _a5;
        switch (this.state) {
            case EntityDecoderState.NamedEntity: {
                return this.result !== 0 &&
                    (this.decodeMode !== DecodingMode.Attribute || this.result === this.treeIndex)
                    ? this.emitNotTerminatedNamedEntity()
                    : 0;
            }
            case EntityDecoderState.NumericDecimal: {
                return this.emitNumericEntity(0, 2);
            }
            case EntityDecoderState.NumericHex: {
                return this.emitNumericEntity(0, 3);
            }
            case EntityDecoderState.NumericStart: {
                (_a5 = this.errors) === null || _a5 === void 0
                    ? void 0
                    : _a5.absenceOfDigitsInNumericCharacterReference(this.consumed);
                return 0;
            }
            case EntityDecoderState.EntityStart: {
                return 0;
            }
        }
    }
};
function getDecoder(decodeTree) {
    let ret = '';
    const decoder = new EntityDecoder(decodeTree, (str) => (ret += fromCodePoint(str)));
    return function decodeWithTrie(str, decodeMode) {
        let lastIndex = 0;
        let offset = 0;
        while ((offset = str.indexOf('&', offset)) >= 0) {
            ret += str.slice(lastIndex, offset);
            decoder.startEntity(decodeMode);
            const len = decoder.write(
                str,
                // Skip the "&"
                offset + 1,
            );
            if (len < 0) {
                lastIndex = offset + decoder.end();
                break;
            }
            lastIndex = offset + len;
            offset = len === 0 ? lastIndex + 1 : lastIndex;
        }
        const result = ret + str.slice(lastIndex);
        ret = '';
        return result;
    };
}
function determineBranch(decodeTree, current, nodeIdx, char) {
    const branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;
    const jumpOffset = current & BinTrieFlags.JUMP_TABLE;
    if (branchCount === 0) {
        return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;
    }
    if (jumpOffset) {
        const value = char - jumpOffset;
        return value < 0 || value >= branchCount ? -1 : decodeTree[nodeIdx + value] - 1;
    }
    let lo = nodeIdx;
    let hi = lo + branchCount - 1;
    while (lo <= hi) {
        const mid = (lo + hi) >>> 1;
        const midVal = decodeTree[mid];
        if (midVal < char) {
            lo = mid + 1;
        } else if (midVal > char) {
            hi = mid - 1;
        } else {
            return decodeTree[mid + branchCount];
        }
    }
    return -1;
}
var htmlDecoder = getDecoder(decode_data_html_default);
var xmlDecoder = getDecoder(decode_data_xml_default);

// node_modules/entities/lib/esm/generated/encode-html.js
function restoreDiff(arr) {
    for (let i2 = 1; i2 < arr.length; i2++) {
        arr[i2][0] += arr[i2 - 1][0] + 1;
    }
    return arr;
}
var encode_html_default = new Map(
    /* @__PURE__ */ restoreDiff([
        [9, '&Tab;'],
        [0, '&NewLine;'],
        [22, '&excl;'],
        [0, '&quot;'],
        [0, '&num;'],
        [0, '&dollar;'],
        [0, '&percnt;'],
        [0, '&amp;'],
        [0, '&apos;'],
        [0, '&lpar;'],
        [0, '&rpar;'],
        [0, '&ast;'],
        [0, '&plus;'],
        [0, '&comma;'],
        [1, '&period;'],
        [0, '&sol;'],
        [10, '&colon;'],
        [0, '&semi;'],
        [0, { v: '&lt;', n: 8402, o: '&nvlt;' }],
        [0, { v: '&equals;', n: 8421, o: '&bne;' }],
        [0, { v: '&gt;', n: 8402, o: '&nvgt;' }],
        [0, '&quest;'],
        [0, '&commat;'],
        [26, '&lbrack;'],
        [0, '&bsol;'],
        [0, '&rbrack;'],
        [0, '&Hat;'],
        [0, '&lowbar;'],
        [0, '&DiacriticalGrave;'],
        [5, { n: 106, o: '&fjlig;' }],
        [20, '&lbrace;'],
        [0, '&verbar;'],
        [0, '&rbrace;'],
        [34, '&nbsp;'],
        [0, '&iexcl;'],
        [0, '&cent;'],
        [0, '&pound;'],
        [0, '&curren;'],
        [0, '&yen;'],
        [0, '&brvbar;'],
        [0, '&sect;'],
        [0, '&die;'],
        [0, '&copy;'],
        [0, '&ordf;'],
        [0, '&laquo;'],
        [0, '&not;'],
        [0, '&shy;'],
        [0, '&circledR;'],
        [0, '&macr;'],
        [0, '&deg;'],
        [0, '&PlusMinus;'],
        [0, '&sup2;'],
        [0, '&sup3;'],
        [0, '&acute;'],
        [0, '&micro;'],
        [0, '&para;'],
        [0, '&centerdot;'],
        [0, '&cedil;'],
        [0, '&sup1;'],
        [0, '&ordm;'],
        [0, '&raquo;'],
        [0, '&frac14;'],
        [0, '&frac12;'],
        [0, '&frac34;'],
        [0, '&iquest;'],
        [0, '&Agrave;'],
        [0, '&Aacute;'],
        [0, '&Acirc;'],
        [0, '&Atilde;'],
        [0, '&Auml;'],
        [0, '&angst;'],
        [0, '&AElig;'],
        [0, '&Ccedil;'],
        [0, '&Egrave;'],
        [0, '&Eacute;'],
        [0, '&Ecirc;'],
        [0, '&Euml;'],
        [0, '&Igrave;'],
        [0, '&Iacute;'],
        [0, '&Icirc;'],
        [0, '&Iuml;'],
        [0, '&ETH;'],
        [0, '&Ntilde;'],
        [0, '&Ograve;'],
        [0, '&Oacute;'],
        [0, '&Ocirc;'],
        [0, '&Otilde;'],
        [0, '&Ouml;'],
        [0, '&times;'],
        [0, '&Oslash;'],
        [0, '&Ugrave;'],
        [0, '&Uacute;'],
        [0, '&Ucirc;'],
        [0, '&Uuml;'],
        [0, '&Yacute;'],
        [0, '&THORN;'],
        [0, '&szlig;'],
        [0, '&agrave;'],
        [0, '&aacute;'],
        [0, '&acirc;'],
        [0, '&atilde;'],
        [0, '&auml;'],
        [0, '&aring;'],
        [0, '&aelig;'],
        [0, '&ccedil;'],
        [0, '&egrave;'],
        [0, '&eacute;'],
        [0, '&ecirc;'],
        [0, '&euml;'],
        [0, '&igrave;'],
        [0, '&iacute;'],
        [0, '&icirc;'],
        [0, '&iuml;'],
        [0, '&eth;'],
        [0, '&ntilde;'],
        [0, '&ograve;'],
        [0, '&oacute;'],
        [0, '&ocirc;'],
        [0, '&otilde;'],
        [0, '&ouml;'],
        [0, '&div;'],
        [0, '&oslash;'],
        [0, '&ugrave;'],
        [0, '&uacute;'],
        [0, '&ucirc;'],
        [0, '&uuml;'],
        [0, '&yacute;'],
        [0, '&thorn;'],
        [0, '&yuml;'],
        [0, '&Amacr;'],
        [0, '&amacr;'],
        [0, '&Abreve;'],
        [0, '&abreve;'],
        [0, '&Aogon;'],
        [0, '&aogon;'],
        [0, '&Cacute;'],
        [0, '&cacute;'],
        [0, '&Ccirc;'],
        [0, '&ccirc;'],
        [0, '&Cdot;'],
        [0, '&cdot;'],
        [0, '&Ccaron;'],
        [0, '&ccaron;'],
        [0, '&Dcaron;'],
        [0, '&dcaron;'],
        [0, '&Dstrok;'],
        [0, '&dstrok;'],
        [0, '&Emacr;'],
        [0, '&emacr;'],
        [2, '&Edot;'],
        [0, '&edot;'],
        [0, '&Eogon;'],
        [0, '&eogon;'],
        [0, '&Ecaron;'],
        [0, '&ecaron;'],
        [0, '&Gcirc;'],
        [0, '&gcirc;'],
        [0, '&Gbreve;'],
        [0, '&gbreve;'],
        [0, '&Gdot;'],
        [0, '&gdot;'],
        [0, '&Gcedil;'],
        [1, '&Hcirc;'],
        [0, '&hcirc;'],
        [0, '&Hstrok;'],
        [0, '&hstrok;'],
        [0, '&Itilde;'],
        [0, '&itilde;'],
        [0, '&Imacr;'],
        [0, '&imacr;'],
        [2, '&Iogon;'],
        [0, '&iogon;'],
        [0, '&Idot;'],
        [0, '&imath;'],
        [0, '&IJlig;'],
        [0, '&ijlig;'],
        [0, '&Jcirc;'],
        [0, '&jcirc;'],
        [0, '&Kcedil;'],
        [0, '&kcedil;'],
        [0, '&kgreen;'],
        [0, '&Lacute;'],
        [0, '&lacute;'],
        [0, '&Lcedil;'],
        [0, '&lcedil;'],
        [0, '&Lcaron;'],
        [0, '&lcaron;'],
        [0, '&Lmidot;'],
        [0, '&lmidot;'],
        [0, '&Lstrok;'],
        [0, '&lstrok;'],
        [0, '&Nacute;'],
        [0, '&nacute;'],
        [0, '&Ncedil;'],
        [0, '&ncedil;'],
        [0, '&Ncaron;'],
        [0, '&ncaron;'],
        [0, '&napos;'],
        [0, '&ENG;'],
        [0, '&eng;'],
        [0, '&Omacr;'],
        [0, '&omacr;'],
        [2, '&Odblac;'],
        [0, '&odblac;'],
        [0, '&OElig;'],
        [0, '&oelig;'],
        [0, '&Racute;'],
        [0, '&racute;'],
        [0, '&Rcedil;'],
        [0, '&rcedil;'],
        [0, '&Rcaron;'],
        [0, '&rcaron;'],
        [0, '&Sacute;'],
        [0, '&sacute;'],
        [0, '&Scirc;'],
        [0, '&scirc;'],
        [0, '&Scedil;'],
        [0, '&scedil;'],
        [0, '&Scaron;'],
        [0, '&scaron;'],
        [0, '&Tcedil;'],
        [0, '&tcedil;'],
        [0, '&Tcaron;'],
        [0, '&tcaron;'],
        [0, '&Tstrok;'],
        [0, '&tstrok;'],
        [0, '&Utilde;'],
        [0, '&utilde;'],
        [0, '&Umacr;'],
        [0, '&umacr;'],
        [0, '&Ubreve;'],
        [0, '&ubreve;'],
        [0, '&Uring;'],
        [0, '&uring;'],
        [0, '&Udblac;'],
        [0, '&udblac;'],
        [0, '&Uogon;'],
        [0, '&uogon;'],
        [0, '&Wcirc;'],
        [0, '&wcirc;'],
        [0, '&Ycirc;'],
        [0, '&ycirc;'],
        [0, '&Yuml;'],
        [0, '&Zacute;'],
        [0, '&zacute;'],
        [0, '&Zdot;'],
        [0, '&zdot;'],
        [0, '&Zcaron;'],
        [0, '&zcaron;'],
        [19, '&fnof;'],
        [34, '&imped;'],
        [63, '&gacute;'],
        [65, '&jmath;'],
        [142, '&circ;'],
        [0, '&caron;'],
        [16, '&breve;'],
        [0, '&DiacriticalDot;'],
        [0, '&ring;'],
        [0, '&ogon;'],
        [0, '&DiacriticalTilde;'],
        [0, '&dblac;'],
        [51, '&DownBreve;'],
        [127, '&Alpha;'],
        [0, '&Beta;'],
        [0, '&Gamma;'],
        [0, '&Delta;'],
        [0, '&Epsilon;'],
        [0, '&Zeta;'],
        [0, '&Eta;'],
        [0, '&Theta;'],
        [0, '&Iota;'],
        [0, '&Kappa;'],
        [0, '&Lambda;'],
        [0, '&Mu;'],
        [0, '&Nu;'],
        [0, '&Xi;'],
        [0, '&Omicron;'],
        [0, '&Pi;'],
        [0, '&Rho;'],
        [1, '&Sigma;'],
        [0, '&Tau;'],
        [0, '&Upsilon;'],
        [0, '&Phi;'],
        [0, '&Chi;'],
        [0, '&Psi;'],
        [0, '&ohm;'],
        [7, '&alpha;'],
        [0, '&beta;'],
        [0, '&gamma;'],
        [0, '&delta;'],
        [0, '&epsi;'],
        [0, '&zeta;'],
        [0, '&eta;'],
        [0, '&theta;'],
        [0, '&iota;'],
        [0, '&kappa;'],
        [0, '&lambda;'],
        [0, '&mu;'],
        [0, '&nu;'],
        [0, '&xi;'],
        [0, '&omicron;'],
        [0, '&pi;'],
        [0, '&rho;'],
        [0, '&sigmaf;'],
        [0, '&sigma;'],
        [0, '&tau;'],
        [0, '&upsi;'],
        [0, '&phi;'],
        [0, '&chi;'],
        [0, '&psi;'],
        [0, '&omega;'],
        [7, '&thetasym;'],
        [0, '&Upsi;'],
        [2, '&phiv;'],
        [0, '&piv;'],
        [5, '&Gammad;'],
        [0, '&digamma;'],
        [18, '&kappav;'],
        [0, '&rhov;'],
        [3, '&epsiv;'],
        [0, '&backepsilon;'],
        [10, '&IOcy;'],
        [0, '&DJcy;'],
        [0, '&GJcy;'],
        [0, '&Jukcy;'],
        [0, '&DScy;'],
        [0, '&Iukcy;'],
        [0, '&YIcy;'],
        [0, '&Jsercy;'],
        [0, '&LJcy;'],
        [0, '&NJcy;'],
        [0, '&TSHcy;'],
        [0, '&KJcy;'],
        [1, '&Ubrcy;'],
        [0, '&DZcy;'],
        [0, '&Acy;'],
        [0, '&Bcy;'],
        [0, '&Vcy;'],
        [0, '&Gcy;'],
        [0, '&Dcy;'],
        [0, '&IEcy;'],
        [0, '&ZHcy;'],
        [0, '&Zcy;'],
        [0, '&Icy;'],
        [0, '&Jcy;'],
        [0, '&Kcy;'],
        [0, '&Lcy;'],
        [0, '&Mcy;'],
        [0, '&Ncy;'],
        [0, '&Ocy;'],
        [0, '&Pcy;'],
        [0, '&Rcy;'],
        [0, '&Scy;'],
        [0, '&Tcy;'],
        [0, '&Ucy;'],
        [0, '&Fcy;'],
        [0, '&KHcy;'],
        [0, '&TScy;'],
        [0, '&CHcy;'],
        [0, '&SHcy;'],
        [0, '&SHCHcy;'],
        [0, '&HARDcy;'],
        [0, '&Ycy;'],
        [0, '&SOFTcy;'],
        [0, '&Ecy;'],
        [0, '&YUcy;'],
        [0, '&YAcy;'],
        [0, '&acy;'],
        [0, '&bcy;'],
        [0, '&vcy;'],
        [0, '&gcy;'],
        [0, '&dcy;'],
        [0, '&iecy;'],
        [0, '&zhcy;'],
        [0, '&zcy;'],
        [0, '&icy;'],
        [0, '&jcy;'],
        [0, '&kcy;'],
        [0, '&lcy;'],
        [0, '&mcy;'],
        [0, '&ncy;'],
        [0, '&ocy;'],
        [0, '&pcy;'],
        [0, '&rcy;'],
        [0, '&scy;'],
        [0, '&tcy;'],
        [0, '&ucy;'],
        [0, '&fcy;'],
        [0, '&khcy;'],
        [0, '&tscy;'],
        [0, '&chcy;'],
        [0, '&shcy;'],
        [0, '&shchcy;'],
        [0, '&hardcy;'],
        [0, '&ycy;'],
        [0, '&softcy;'],
        [0, '&ecy;'],
        [0, '&yucy;'],
        [0, '&yacy;'],
        [1, '&iocy;'],
        [0, '&djcy;'],
        [0, '&gjcy;'],
        [0, '&jukcy;'],
        [0, '&dscy;'],
        [0, '&iukcy;'],
        [0, '&yicy;'],
        [0, '&jsercy;'],
        [0, '&ljcy;'],
        [0, '&njcy;'],
        [0, '&tshcy;'],
        [0, '&kjcy;'],
        [1, '&ubrcy;'],
        [0, '&dzcy;'],
        [7074, '&ensp;'],
        [0, '&emsp;'],
        [0, '&emsp13;'],
        [0, '&emsp14;'],
        [1, '&numsp;'],
        [0, '&puncsp;'],
        [0, '&ThinSpace;'],
        [0, '&hairsp;'],
        [0, '&NegativeMediumSpace;'],
        [0, '&zwnj;'],
        [0, '&zwj;'],
        [0, '&lrm;'],
        [0, '&rlm;'],
        [0, '&dash;'],
        [2, '&ndash;'],
        [0, '&mdash;'],
        [0, '&horbar;'],
        [0, '&Verbar;'],
        [1, '&lsquo;'],
        [0, '&CloseCurlyQuote;'],
        [0, '&lsquor;'],
        [1, '&ldquo;'],
        [0, '&CloseCurlyDoubleQuote;'],
        [0, '&bdquo;'],
        [1, '&dagger;'],
        [0, '&Dagger;'],
        [0, '&bull;'],
        [2, '&nldr;'],
        [0, '&hellip;'],
        [9, '&permil;'],
        [0, '&pertenk;'],
        [0, '&prime;'],
        [0, '&Prime;'],
        [0, '&tprime;'],
        [0, '&backprime;'],
        [3, '&lsaquo;'],
        [0, '&rsaquo;'],
        [3, '&oline;'],
        [2, '&caret;'],
        [1, '&hybull;'],
        [0, '&frasl;'],
        [10, '&bsemi;'],
        [7, '&qprime;'],
        [7, { v: '&MediumSpace;', n: 8202, o: '&ThickSpace;' }],
        [0, '&NoBreak;'],
        [0, '&af;'],
        [0, '&InvisibleTimes;'],
        [0, '&ic;'],
        [72, '&euro;'],
        [46, '&tdot;'],
        [0, '&DotDot;'],
        [37, '&complexes;'],
        [2, '&incare;'],
        [4, '&gscr;'],
        [0, '&hamilt;'],
        [0, '&Hfr;'],
        [0, '&Hopf;'],
        [0, '&planckh;'],
        [0, '&hbar;'],
        [0, '&imagline;'],
        [0, '&Ifr;'],
        [0, '&lagran;'],
        [0, '&ell;'],
        [1, '&naturals;'],
        [0, '&numero;'],
        [0, '&copysr;'],
        [0, '&weierp;'],
        [0, '&Popf;'],
        [0, '&Qopf;'],
        [0, '&realine;'],
        [0, '&real;'],
        [0, '&reals;'],
        [0, '&rx;'],
        [3, '&trade;'],
        [1, '&integers;'],
        [2, '&mho;'],
        [0, '&zeetrf;'],
        [0, '&iiota;'],
        [2, '&bernou;'],
        [0, '&Cayleys;'],
        [1, '&escr;'],
        [0, '&Escr;'],
        [0, '&Fouriertrf;'],
        [1, '&Mellintrf;'],
        [0, '&order;'],
        [0, '&alefsym;'],
        [0, '&beth;'],
        [0, '&gimel;'],
        [0, '&daleth;'],
        [12, '&CapitalDifferentialD;'],
        [0, '&dd;'],
        [0, '&ee;'],
        [0, '&ii;'],
        [10, '&frac13;'],
        [0, '&frac23;'],
        [0, '&frac15;'],
        [0, '&frac25;'],
        [0, '&frac35;'],
        [0, '&frac45;'],
        [0, '&frac16;'],
        [0, '&frac56;'],
        [0, '&frac18;'],
        [0, '&frac38;'],
        [0, '&frac58;'],
        [0, '&frac78;'],
        [49, '&larr;'],
        [0, '&ShortUpArrow;'],
        [0, '&rarr;'],
        [0, '&darr;'],
        [0, '&harr;'],
        [0, '&updownarrow;'],
        [0, '&nwarr;'],
        [0, '&nearr;'],
        [0, '&LowerRightArrow;'],
        [0, '&LowerLeftArrow;'],
        [0, '&nlarr;'],
        [0, '&nrarr;'],
        [1, { v: '&rarrw;', n: 824, o: '&nrarrw;' }],
        [0, '&Larr;'],
        [0, '&Uarr;'],
        [0, '&Rarr;'],
        [0, '&Darr;'],
        [0, '&larrtl;'],
        [0, '&rarrtl;'],
        [0, '&LeftTeeArrow;'],
        [0, '&mapstoup;'],
        [0, '&map;'],
        [0, '&DownTeeArrow;'],
        [1, '&hookleftarrow;'],
        [0, '&hookrightarrow;'],
        [0, '&larrlp;'],
        [0, '&looparrowright;'],
        [0, '&harrw;'],
        [0, '&nharr;'],
        [1, '&lsh;'],
        [0, '&rsh;'],
        [0, '&ldsh;'],
        [0, '&rdsh;'],
        [1, '&crarr;'],
        [0, '&cularr;'],
        [0, '&curarr;'],
        [2, '&circlearrowleft;'],
        [0, '&circlearrowright;'],
        [0, '&leftharpoonup;'],
        [0, '&DownLeftVector;'],
        [0, '&RightUpVector;'],
        [0, '&LeftUpVector;'],
        [0, '&rharu;'],
        [0, '&DownRightVector;'],
        [0, '&dharr;'],
        [0, '&dharl;'],
        [0, '&RightArrowLeftArrow;'],
        [0, '&udarr;'],
        [0, '&LeftArrowRightArrow;'],
        [0, '&leftleftarrows;'],
        [0, '&upuparrows;'],
        [0, '&rightrightarrows;'],
        [0, '&ddarr;'],
        [0, '&leftrightharpoons;'],
        [0, '&Equilibrium;'],
        [0, '&nlArr;'],
        [0, '&nhArr;'],
        [0, '&nrArr;'],
        [0, '&DoubleLeftArrow;'],
        [0, '&DoubleUpArrow;'],
        [0, '&DoubleRightArrow;'],
        [0, '&dArr;'],
        [0, '&DoubleLeftRightArrow;'],
        [0, '&DoubleUpDownArrow;'],
        [0, '&nwArr;'],
        [0, '&neArr;'],
        [0, '&seArr;'],
        [0, '&swArr;'],
        [0, '&lAarr;'],
        [0, '&rAarr;'],
        [1, '&zigrarr;'],
        [6, '&larrb;'],
        [0, '&rarrb;'],
        [15, '&DownArrowUpArrow;'],
        [7, '&loarr;'],
        [0, '&roarr;'],
        [0, '&hoarr;'],
        [0, '&forall;'],
        [0, '&comp;'],
        [0, { v: '&part;', n: 824, o: '&npart;' }],
        [0, '&exist;'],
        [0, '&nexist;'],
        [0, '&empty;'],
        [1, '&Del;'],
        [0, '&Element;'],
        [0, '&NotElement;'],
        [1, '&ni;'],
        [0, '&notni;'],
        [2, '&prod;'],
        [0, '&coprod;'],
        [0, '&sum;'],
        [0, '&minus;'],
        [0, '&MinusPlus;'],
        [0, '&dotplus;'],
        [1, '&Backslash;'],
        [0, '&lowast;'],
        [0, '&compfn;'],
        [1, '&radic;'],
        [2, '&prop;'],
        [0, '&infin;'],
        [0, '&angrt;'],
        [0, { v: '&ang;', n: 8402, o: '&nang;' }],
        [0, '&angmsd;'],
        [0, '&angsph;'],
        [0, '&mid;'],
        [0, '&nmid;'],
        [0, '&DoubleVerticalBar;'],
        [0, '&NotDoubleVerticalBar;'],
        [0, '&and;'],
        [0, '&or;'],
        [0, { v: '&cap;', n: 65024, o: '&caps;' }],
        [0, { v: '&cup;', n: 65024, o: '&cups;' }],
        [0, '&int;'],
        [0, '&Int;'],
        [0, '&iiint;'],
        [0, '&conint;'],
        [0, '&Conint;'],
        [0, '&Cconint;'],
        [0, '&cwint;'],
        [0, '&ClockwiseContourIntegral;'],
        [0, '&awconint;'],
        [0, '&there4;'],
        [0, '&becaus;'],
        [0, '&ratio;'],
        [0, '&Colon;'],
        [0, '&dotminus;'],
        [1, '&mDDot;'],
        [0, '&homtht;'],
        [0, { v: '&sim;', n: 8402, o: '&nvsim;' }],
        [0, { v: '&backsim;', n: 817, o: '&race;' }],
        [0, { v: '&ac;', n: 819, o: '&acE;' }],
        [0, '&acd;'],
        [0, '&VerticalTilde;'],
        [0, '&NotTilde;'],
        [0, { v: '&eqsim;', n: 824, o: '&nesim;' }],
        [0, '&sime;'],
        [0, '&NotTildeEqual;'],
        [0, '&cong;'],
        [0, '&simne;'],
        [0, '&ncong;'],
        [0, '&ap;'],
        [0, '&nap;'],
        [0, '&ape;'],
        [0, { v: '&apid;', n: 824, o: '&napid;' }],
        [0, '&backcong;'],
        [0, { v: '&asympeq;', n: 8402, o: '&nvap;' }],
        [0, { v: '&bump;', n: 824, o: '&nbump;' }],
        [0, { v: '&bumpe;', n: 824, o: '&nbumpe;' }],
        [0, { v: '&doteq;', n: 824, o: '&nedot;' }],
        [0, '&doteqdot;'],
        [0, '&efDot;'],
        [0, '&erDot;'],
        [0, '&Assign;'],
        [0, '&ecolon;'],
        [0, '&ecir;'],
        [0, '&circeq;'],
        [1, '&wedgeq;'],
        [0, '&veeeq;'],
        [1, '&triangleq;'],
        [2, '&equest;'],
        [0, '&ne;'],
        [0, { v: '&Congruent;', n: 8421, o: '&bnequiv;' }],
        [0, '&nequiv;'],
        [1, { v: '&le;', n: 8402, o: '&nvle;' }],
        [0, { v: '&ge;', n: 8402, o: '&nvge;' }],
        [0, { v: '&lE;', n: 824, o: '&nlE;' }],
        [0, { v: '&gE;', n: 824, o: '&ngE;' }],
        [0, { v: '&lnE;', n: 65024, o: '&lvertneqq;' }],
        [0, { v: '&gnE;', n: 65024, o: '&gvertneqq;' }],
        [
            0,
            {
                v: '&ll;',
                n: new Map(
                    /* @__PURE__ */ restoreDiff([
                        [824, '&nLtv;'],
                        [7577, '&nLt;'],
                    ]),
                ),
            },
        ],
        [
            0,
            {
                v: '&gg;',
                n: new Map(
                    /* @__PURE__ */ restoreDiff([
                        [824, '&nGtv;'],
                        [7577, '&nGt;'],
                    ]),
                ),
            },
        ],
        [0, '&between;'],
        [0, '&NotCupCap;'],
        [0, '&nless;'],
        [0, '&ngt;'],
        [0, '&nle;'],
        [0, '&nge;'],
        [0, '&lesssim;'],
        [0, '&GreaterTilde;'],
        [0, '&nlsim;'],
        [0, '&ngsim;'],
        [0, '&LessGreater;'],
        [0, '&gl;'],
        [0, '&NotLessGreater;'],
        [0, '&NotGreaterLess;'],
        [0, '&pr;'],
        [0, '&sc;'],
        [0, '&prcue;'],
        [0, '&sccue;'],
        [0, '&PrecedesTilde;'],
        [0, { v: '&scsim;', n: 824, o: '&NotSucceedsTilde;' }],
        [0, '&NotPrecedes;'],
        [0, '&NotSucceeds;'],
        [0, { v: '&sub;', n: 8402, o: '&NotSubset;' }],
        [0, { v: '&sup;', n: 8402, o: '&NotSuperset;' }],
        [0, '&nsub;'],
        [0, '&nsup;'],
        [0, '&sube;'],
        [0, '&supe;'],
        [0, '&NotSubsetEqual;'],
        [0, '&NotSupersetEqual;'],
        [0, { v: '&subne;', n: 65024, o: '&varsubsetneq;' }],
        [0, { v: '&supne;', n: 65024, o: '&varsupsetneq;' }],
        [1, '&cupdot;'],
        [0, '&UnionPlus;'],
        [0, { v: '&sqsub;', n: 824, o: '&NotSquareSubset;' }],
        [0, { v: '&sqsup;', n: 824, o: '&NotSquareSuperset;' }],
        [0, '&sqsube;'],
        [0, '&sqsupe;'],
        [0, { v: '&sqcap;', n: 65024, o: '&sqcaps;' }],
        [0, { v: '&sqcup;', n: 65024, o: '&sqcups;' }],
        [0, '&CirclePlus;'],
        [0, '&CircleMinus;'],
        [0, '&CircleTimes;'],
        [0, '&osol;'],
        [0, '&CircleDot;'],
        [0, '&circledcirc;'],
        [0, '&circledast;'],
        [1, '&circleddash;'],
        [0, '&boxplus;'],
        [0, '&boxminus;'],
        [0, '&boxtimes;'],
        [0, '&dotsquare;'],
        [0, '&RightTee;'],
        [0, '&dashv;'],
        [0, '&DownTee;'],
        [0, '&bot;'],
        [1, '&models;'],
        [0, '&DoubleRightTee;'],
        [0, '&Vdash;'],
        [0, '&Vvdash;'],
        [0, '&VDash;'],
        [0, '&nvdash;'],
        [0, '&nvDash;'],
        [0, '&nVdash;'],
        [0, '&nVDash;'],
        [0, '&prurel;'],
        [1, '&LeftTriangle;'],
        [0, '&RightTriangle;'],
        [0, { v: '&LeftTriangleEqual;', n: 8402, o: '&nvltrie;' }],
        [0, { v: '&RightTriangleEqual;', n: 8402, o: '&nvrtrie;' }],
        [0, '&origof;'],
        [0, '&imof;'],
        [0, '&multimap;'],
        [0, '&hercon;'],
        [0, '&intcal;'],
        [0, '&veebar;'],
        [1, '&barvee;'],
        [0, '&angrtvb;'],
        [0, '&lrtri;'],
        [0, '&bigwedge;'],
        [0, '&bigvee;'],
        [0, '&bigcap;'],
        [0, '&bigcup;'],
        [0, '&diam;'],
        [0, '&sdot;'],
        [0, '&sstarf;'],
        [0, '&divideontimes;'],
        [0, '&bowtie;'],
        [0, '&ltimes;'],
        [0, '&rtimes;'],
        [0, '&leftthreetimes;'],
        [0, '&rightthreetimes;'],
        [0, '&backsimeq;'],
        [0, '&curlyvee;'],
        [0, '&curlywedge;'],
        [0, '&Sub;'],
        [0, '&Sup;'],
        [0, '&Cap;'],
        [0, '&Cup;'],
        [0, '&fork;'],
        [0, '&epar;'],
        [0, '&lessdot;'],
        [0, '&gtdot;'],
        [0, { v: '&Ll;', n: 824, o: '&nLl;' }],
        [0, { v: '&Gg;', n: 824, o: '&nGg;' }],
        [0, { v: '&leg;', n: 65024, o: '&lesg;' }],
        [0, { v: '&gel;', n: 65024, o: '&gesl;' }],
        [2, '&cuepr;'],
        [0, '&cuesc;'],
        [0, '&NotPrecedesSlantEqual;'],
        [0, '&NotSucceedsSlantEqual;'],
        [0, '&NotSquareSubsetEqual;'],
        [0, '&NotSquareSupersetEqual;'],
        [2, '&lnsim;'],
        [0, '&gnsim;'],
        [0, '&precnsim;'],
        [0, '&scnsim;'],
        [0, '&nltri;'],
        [0, '&NotRightTriangle;'],
        [0, '&nltrie;'],
        [0, '&NotRightTriangleEqual;'],
        [0, '&vellip;'],
        [0, '&ctdot;'],
        [0, '&utdot;'],
        [0, '&dtdot;'],
        [0, '&disin;'],
        [0, '&isinsv;'],
        [0, '&isins;'],
        [0, { v: '&isindot;', n: 824, o: '&notindot;' }],
        [0, '&notinvc;'],
        [0, '&notinvb;'],
        [1, { v: '&isinE;', n: 824, o: '&notinE;' }],
        [0, '&nisd;'],
        [0, '&xnis;'],
        [0, '&nis;'],
        [0, '&notnivc;'],
        [0, '&notnivb;'],
        [6, '&barwed;'],
        [0, '&Barwed;'],
        [1, '&lceil;'],
        [0, '&rceil;'],
        [0, '&LeftFloor;'],
        [0, '&rfloor;'],
        [0, '&drcrop;'],
        [0, '&dlcrop;'],
        [0, '&urcrop;'],
        [0, '&ulcrop;'],
        [0, '&bnot;'],
        [1, '&profline;'],
        [0, '&profsurf;'],
        [1, '&telrec;'],
        [0, '&target;'],
        [5, '&ulcorn;'],
        [0, '&urcorn;'],
        [0, '&dlcorn;'],
        [0, '&drcorn;'],
        [2, '&frown;'],
        [0, '&smile;'],
        [9, '&cylcty;'],
        [0, '&profalar;'],
        [7, '&topbot;'],
        [6, '&ovbar;'],
        [1, '&solbar;'],
        [60, '&angzarr;'],
        [51, '&lmoustache;'],
        [0, '&rmoustache;'],
        [2, '&OverBracket;'],
        [0, '&bbrk;'],
        [0, '&bbrktbrk;'],
        [37, '&OverParenthesis;'],
        [0, '&UnderParenthesis;'],
        [0, '&OverBrace;'],
        [0, '&UnderBrace;'],
        [2, '&trpezium;'],
        [4, '&elinters;'],
        [59, '&blank;'],
        [164, '&circledS;'],
        [55, '&boxh;'],
        [1, '&boxv;'],
        [9, '&boxdr;'],
        [3, '&boxdl;'],
        [3, '&boxur;'],
        [3, '&boxul;'],
        [3, '&boxvr;'],
        [7, '&boxvl;'],
        [7, '&boxhd;'],
        [7, '&boxhu;'],
        [7, '&boxvh;'],
        [19, '&boxH;'],
        [0, '&boxV;'],
        [0, '&boxdR;'],
        [0, '&boxDr;'],
        [0, '&boxDR;'],
        [0, '&boxdL;'],
        [0, '&boxDl;'],
        [0, '&boxDL;'],
        [0, '&boxuR;'],
        [0, '&boxUr;'],
        [0, '&boxUR;'],
        [0, '&boxuL;'],
        [0, '&boxUl;'],
        [0, '&boxUL;'],
        [0, '&boxvR;'],
        [0, '&boxVr;'],
        [0, '&boxVR;'],
        [0, '&boxvL;'],
        [0, '&boxVl;'],
        [0, '&boxVL;'],
        [0, '&boxHd;'],
        [0, '&boxhD;'],
        [0, '&boxHD;'],
        [0, '&boxHu;'],
        [0, '&boxhU;'],
        [0, '&boxHU;'],
        [0, '&boxvH;'],
        [0, '&boxVh;'],
        [0, '&boxVH;'],
        [19, '&uhblk;'],
        [3, '&lhblk;'],
        [3, '&block;'],
        [8, '&blk14;'],
        [0, '&blk12;'],
        [0, '&blk34;'],
        [13, '&square;'],
        [8, '&blacksquare;'],
        [0, '&EmptyVerySmallSquare;'],
        [1, '&rect;'],
        [0, '&marker;'],
        [2, '&fltns;'],
        [1, '&bigtriangleup;'],
        [0, '&blacktriangle;'],
        [0, '&triangle;'],
        [2, '&blacktriangleright;'],
        [0, '&rtri;'],
        [3, '&bigtriangledown;'],
        [0, '&blacktriangledown;'],
        [0, '&dtri;'],
        [2, '&blacktriangleleft;'],
        [0, '&ltri;'],
        [6, '&loz;'],
        [0, '&cir;'],
        [32, '&tridot;'],
        [2, '&bigcirc;'],
        [8, '&ultri;'],
        [0, '&urtri;'],
        [0, '&lltri;'],
        [0, '&EmptySmallSquare;'],
        [0, '&FilledSmallSquare;'],
        [8, '&bigstar;'],
        [0, '&star;'],
        [7, '&phone;'],
        [49, '&female;'],
        [1, '&male;'],
        [29, '&spades;'],
        [2, '&clubs;'],
        [1, '&hearts;'],
        [0, '&diamondsuit;'],
        [3, '&sung;'],
        [2, '&flat;'],
        [0, '&natural;'],
        [0, '&sharp;'],
        [163, '&check;'],
        [3, '&cross;'],
        [8, '&malt;'],
        [21, '&sext;'],
        [33, '&VerticalSeparator;'],
        [25, '&lbbrk;'],
        [0, '&rbbrk;'],
        [84, '&bsolhsub;'],
        [0, '&suphsol;'],
        [28, '&LeftDoubleBracket;'],
        [0, '&RightDoubleBracket;'],
        [0, '&lang;'],
        [0, '&rang;'],
        [0, '&Lang;'],
        [0, '&Rang;'],
        [0, '&loang;'],
        [0, '&roang;'],
        [7, '&longleftarrow;'],
        [0, '&longrightarrow;'],
        [0, '&longleftrightarrow;'],
        [0, '&DoubleLongLeftArrow;'],
        [0, '&DoubleLongRightArrow;'],
        [0, '&DoubleLongLeftRightArrow;'],
        [1, '&longmapsto;'],
        [2, '&dzigrarr;'],
        [258, '&nvlArr;'],
        [0, '&nvrArr;'],
        [0, '&nvHarr;'],
        [0, '&Map;'],
        [6, '&lbarr;'],
        [0, '&bkarow;'],
        [0, '&lBarr;'],
        [0, '&dbkarow;'],
        [0, '&drbkarow;'],
        [0, '&DDotrahd;'],
        [0, '&UpArrowBar;'],
        [0, '&DownArrowBar;'],
        [2, '&Rarrtl;'],
        [2, '&latail;'],
        [0, '&ratail;'],
        [0, '&lAtail;'],
        [0, '&rAtail;'],
        [0, '&larrfs;'],
        [0, '&rarrfs;'],
        [0, '&larrbfs;'],
        [0, '&rarrbfs;'],
        [2, '&nwarhk;'],
        [0, '&nearhk;'],
        [0, '&hksearow;'],
        [0, '&hkswarow;'],
        [0, '&nwnear;'],
        [0, '&nesear;'],
        [0, '&seswar;'],
        [0, '&swnwar;'],
        [8, { v: '&rarrc;', n: 824, o: '&nrarrc;' }],
        [1, '&cudarrr;'],
        [0, '&ldca;'],
        [0, '&rdca;'],
        [0, '&cudarrl;'],
        [0, '&larrpl;'],
        [2, '&curarrm;'],
        [0, '&cularrp;'],
        [7, '&rarrpl;'],
        [2, '&harrcir;'],
        [0, '&Uarrocir;'],
        [0, '&lurdshar;'],
        [0, '&ldrushar;'],
        [2, '&LeftRightVector;'],
        [0, '&RightUpDownVector;'],
        [0, '&DownLeftRightVector;'],
        [0, '&LeftUpDownVector;'],
        [0, '&LeftVectorBar;'],
        [0, '&RightVectorBar;'],
        [0, '&RightUpVectorBar;'],
        [0, '&RightDownVectorBar;'],
        [0, '&DownLeftVectorBar;'],
        [0, '&DownRightVectorBar;'],
        [0, '&LeftUpVectorBar;'],
        [0, '&LeftDownVectorBar;'],
        [0, '&LeftTeeVector;'],
        [0, '&RightTeeVector;'],
        [0, '&RightUpTeeVector;'],
        [0, '&RightDownTeeVector;'],
        [0, '&DownLeftTeeVector;'],
        [0, '&DownRightTeeVector;'],
        [0, '&LeftUpTeeVector;'],
        [0, '&LeftDownTeeVector;'],
        [0, '&lHar;'],
        [0, '&uHar;'],
        [0, '&rHar;'],
        [0, '&dHar;'],
        [0, '&luruhar;'],
        [0, '&ldrdhar;'],
        [0, '&ruluhar;'],
        [0, '&rdldhar;'],
        [0, '&lharul;'],
        [0, '&llhard;'],
        [0, '&rharul;'],
        [0, '&lrhard;'],
        [0, '&udhar;'],
        [0, '&duhar;'],
        [0, '&RoundImplies;'],
        [0, '&erarr;'],
        [0, '&simrarr;'],
        [0, '&larrsim;'],
        [0, '&rarrsim;'],
        [0, '&rarrap;'],
        [0, '&ltlarr;'],
        [1, '&gtrarr;'],
        [0, '&subrarr;'],
        [1, '&suplarr;'],
        [0, '&lfisht;'],
        [0, '&rfisht;'],
        [0, '&ufisht;'],
        [0, '&dfisht;'],
        [5, '&lopar;'],
        [0, '&ropar;'],
        [4, '&lbrke;'],
        [0, '&rbrke;'],
        [0, '&lbrkslu;'],
        [0, '&rbrksld;'],
        [0, '&lbrksld;'],
        [0, '&rbrkslu;'],
        [0, '&langd;'],
        [0, '&rangd;'],
        [0, '&lparlt;'],
        [0, '&rpargt;'],
        [0, '&gtlPar;'],
        [0, '&ltrPar;'],
        [3, '&vzigzag;'],
        [1, '&vangrt;'],
        [0, '&angrtvbd;'],
        [6, '&ange;'],
        [0, '&range;'],
        [0, '&dwangle;'],
        [0, '&uwangle;'],
        [0, '&angmsdaa;'],
        [0, '&angmsdab;'],
        [0, '&angmsdac;'],
        [0, '&angmsdad;'],
        [0, '&angmsdae;'],
        [0, '&angmsdaf;'],
        [0, '&angmsdag;'],
        [0, '&angmsdah;'],
        [0, '&bemptyv;'],
        [0, '&demptyv;'],
        [0, '&cemptyv;'],
        [0, '&raemptyv;'],
        [0, '&laemptyv;'],
        [0, '&ohbar;'],
        [0, '&omid;'],
        [0, '&opar;'],
        [1, '&operp;'],
        [1, '&olcross;'],
        [0, '&odsold;'],
        [1, '&olcir;'],
        [0, '&ofcir;'],
        [0, '&olt;'],
        [0, '&ogt;'],
        [0, '&cirscir;'],
        [0, '&cirE;'],
        [0, '&solb;'],
        [0, '&bsolb;'],
        [3, '&boxbox;'],
        [3, '&trisb;'],
        [0, '&rtriltri;'],
        [0, { v: '&LeftTriangleBar;', n: 824, o: '&NotLeftTriangleBar;' }],
        [0, { v: '&RightTriangleBar;', n: 824, o: '&NotRightTriangleBar;' }],
        [11, '&iinfin;'],
        [0, '&infintie;'],
        [0, '&nvinfin;'],
        [4, '&eparsl;'],
        [0, '&smeparsl;'],
        [0, '&eqvparsl;'],
        [5, '&blacklozenge;'],
        [8, '&RuleDelayed;'],
        [1, '&dsol;'],
        [9, '&bigodot;'],
        [0, '&bigoplus;'],
        [0, '&bigotimes;'],
        [1, '&biguplus;'],
        [1, '&bigsqcup;'],
        [5, '&iiiint;'],
        [0, '&fpartint;'],
        [2, '&cirfnint;'],
        [0, '&awint;'],
        [0, '&rppolint;'],
        [0, '&scpolint;'],
        [0, '&npolint;'],
        [0, '&pointint;'],
        [0, '&quatint;'],
        [0, '&intlarhk;'],
        [10, '&pluscir;'],
        [0, '&plusacir;'],
        [0, '&simplus;'],
        [0, '&plusdu;'],
        [0, '&plussim;'],
        [0, '&plustwo;'],
        [1, '&mcomma;'],
        [0, '&minusdu;'],
        [2, '&loplus;'],
        [0, '&roplus;'],
        [0, '&Cross;'],
        [0, '&timesd;'],
        [0, '&timesbar;'],
        [1, '&smashp;'],
        [0, '&lotimes;'],
        [0, '&rotimes;'],
        [0, '&otimesas;'],
        [0, '&Otimes;'],
        [0, '&odiv;'],
        [0, '&triplus;'],
        [0, '&triminus;'],
        [0, '&tritime;'],
        [0, '&intprod;'],
        [2, '&amalg;'],
        [0, '&capdot;'],
        [1, '&ncup;'],
        [0, '&ncap;'],
        [0, '&capand;'],
        [0, '&cupor;'],
        [0, '&cupcap;'],
        [0, '&capcup;'],
        [0, '&cupbrcap;'],
        [0, '&capbrcup;'],
        [0, '&cupcup;'],
        [0, '&capcap;'],
        [0, '&ccups;'],
        [0, '&ccaps;'],
        [2, '&ccupssm;'],
        [2, '&And;'],
        [0, '&Or;'],
        [0, '&andand;'],
        [0, '&oror;'],
        [0, '&orslope;'],
        [0, '&andslope;'],
        [1, '&andv;'],
        [0, '&orv;'],
        [0, '&andd;'],
        [0, '&ord;'],
        [1, '&wedbar;'],
        [6, '&sdote;'],
        [3, '&simdot;'],
        [2, { v: '&congdot;', n: 824, o: '&ncongdot;' }],
        [0, '&easter;'],
        [0, '&apacir;'],
        [0, { v: '&apE;', n: 824, o: '&napE;' }],
        [0, '&eplus;'],
        [0, '&pluse;'],
        [0, '&Esim;'],
        [0, '&Colone;'],
        [0, '&Equal;'],
        [1, '&ddotseq;'],
        [0, '&equivDD;'],
        [0, '&ltcir;'],
        [0, '&gtcir;'],
        [0, '&ltquest;'],
        [0, '&gtquest;'],
        [0, { v: '&leqslant;', n: 824, o: '&nleqslant;' }],
        [0, { v: '&geqslant;', n: 824, o: '&ngeqslant;' }],
        [0, '&lesdot;'],
        [0, '&gesdot;'],
        [0, '&lesdoto;'],
        [0, '&gesdoto;'],
        [0, '&lesdotor;'],
        [0, '&gesdotol;'],
        [0, '&lap;'],
        [0, '&gap;'],
        [0, '&lne;'],
        [0, '&gne;'],
        [0, '&lnap;'],
        [0, '&gnap;'],
        [0, '&lEg;'],
        [0, '&gEl;'],
        [0, '&lsime;'],
        [0, '&gsime;'],
        [0, '&lsimg;'],
        [0, '&gsiml;'],
        [0, '&lgE;'],
        [0, '&glE;'],
        [0, '&lesges;'],
        [0, '&gesles;'],
        [0, '&els;'],
        [0, '&egs;'],
        [0, '&elsdot;'],
        [0, '&egsdot;'],
        [0, '&el;'],
        [0, '&eg;'],
        [2, '&siml;'],
        [0, '&simg;'],
        [0, '&simlE;'],
        [0, '&simgE;'],
        [0, { v: '&LessLess;', n: 824, o: '&NotNestedLessLess;' }],
        [0, { v: '&GreaterGreater;', n: 824, o: '&NotNestedGreaterGreater;' }],
        [1, '&glj;'],
        [0, '&gla;'],
        [0, '&ltcc;'],
        [0, '&gtcc;'],
        [0, '&lescc;'],
        [0, '&gescc;'],
        [0, '&smt;'],
        [0, '&lat;'],
        [0, { v: '&smte;', n: 65024, o: '&smtes;' }],
        [0, { v: '&late;', n: 65024, o: '&lates;' }],
        [0, '&bumpE;'],
        [0, { v: '&PrecedesEqual;', n: 824, o: '&NotPrecedesEqual;' }],
        [0, { v: '&sce;', n: 824, o: '&NotSucceedsEqual;' }],
        [2, '&prE;'],
        [0, '&scE;'],
        [0, '&precneqq;'],
        [0, '&scnE;'],
        [0, '&prap;'],
        [0, '&scap;'],
        [0, '&precnapprox;'],
        [0, '&scnap;'],
        [0, '&Pr;'],
        [0, '&Sc;'],
        [0, '&subdot;'],
        [0, '&supdot;'],
        [0, '&subplus;'],
        [0, '&supplus;'],
        [0, '&submult;'],
        [0, '&supmult;'],
        [0, '&subedot;'],
        [0, '&supedot;'],
        [0, { v: '&subE;', n: 824, o: '&nsubE;' }],
        [0, { v: '&supE;', n: 824, o: '&nsupE;' }],
        [0, '&subsim;'],
        [0, '&supsim;'],
        [2, { v: '&subnE;', n: 65024, o: '&varsubsetneqq;' }],
        [0, { v: '&supnE;', n: 65024, o: '&varsupsetneqq;' }],
        [2, '&csub;'],
        [0, '&csup;'],
        [0, '&csube;'],
        [0, '&csupe;'],
        [0, '&subsup;'],
        [0, '&supsub;'],
        [0, '&subsub;'],
        [0, '&supsup;'],
        [0, '&suphsub;'],
        [0, '&supdsub;'],
        [0, '&forkv;'],
        [0, '&topfork;'],
        [0, '&mlcp;'],
        [8, '&Dashv;'],
        [1, '&Vdashl;'],
        [0, '&Barv;'],
        [0, '&vBar;'],
        [0, '&vBarv;'],
        [1, '&Vbar;'],
        [0, '&Not;'],
        [0, '&bNot;'],
        [0, '&rnmid;'],
        [0, '&cirmid;'],
        [0, '&midcir;'],
        [0, '&topcir;'],
        [0, '&nhpar;'],
        [0, '&parsim;'],
        [9, { v: '&parsl;', n: 8421, o: '&nparsl;' }],
        [
            44343,
            {
                n: new Map(
                    /* @__PURE__ */ restoreDiff([
                        [56476, '&Ascr;'],
                        [1, '&Cscr;'],
                        [0, '&Dscr;'],
                        [2, '&Gscr;'],
                        [2, '&Jscr;'],
                        [0, '&Kscr;'],
                        [2, '&Nscr;'],
                        [0, '&Oscr;'],
                        [0, '&Pscr;'],
                        [0, '&Qscr;'],
                        [1, '&Sscr;'],
                        [0, '&Tscr;'],
                        [0, '&Uscr;'],
                        [0, '&Vscr;'],
                        [0, '&Wscr;'],
                        [0, '&Xscr;'],
                        [0, '&Yscr;'],
                        [0, '&Zscr;'],
                        [0, '&ascr;'],
                        [0, '&bscr;'],
                        [0, '&cscr;'],
                        [0, '&dscr;'],
                        [1, '&fscr;'],
                        [1, '&hscr;'],
                        [0, '&iscr;'],
                        [0, '&jscr;'],
                        [0, '&kscr;'],
                        [0, '&lscr;'],
                        [0, '&mscr;'],
                        [0, '&nscr;'],
                        [1, '&pscr;'],
                        [0, '&qscr;'],
                        [0, '&rscr;'],
                        [0, '&sscr;'],
                        [0, '&tscr;'],
                        [0, '&uscr;'],
                        [0, '&vscr;'],
                        [0, '&wscr;'],
                        [0, '&xscr;'],
                        [0, '&yscr;'],
                        [0, '&zscr;'],
                        [52, '&Afr;'],
                        [0, '&Bfr;'],
                        [1, '&Dfr;'],
                        [0, '&Efr;'],
                        [0, '&Ffr;'],
                        [0, '&Gfr;'],
                        [2, '&Jfr;'],
                        [0, '&Kfr;'],
                        [0, '&Lfr;'],
                        [0, '&Mfr;'],
                        [0, '&Nfr;'],
                        [0, '&Ofr;'],
                        [0, '&Pfr;'],
                        [0, '&Qfr;'],
                        [1, '&Sfr;'],
                        [0, '&Tfr;'],
                        [0, '&Ufr;'],
                        [0, '&Vfr;'],
                        [0, '&Wfr;'],
                        [0, '&Xfr;'],
                        [0, '&Yfr;'],
                        [1, '&afr;'],
                        [0, '&bfr;'],
                        [0, '&cfr;'],
                        [0, '&dfr;'],
                        [0, '&efr;'],
                        [0, '&ffr;'],
                        [0, '&gfr;'],
                        [0, '&hfr;'],
                        [0, '&ifr;'],
                        [0, '&jfr;'],
                        [0, '&kfr;'],
                        [0, '&lfr;'],
                        [0, '&mfr;'],
                        [0, '&nfr;'],
                        [0, '&ofr;'],
                        [0, '&pfr;'],
                        [0, '&qfr;'],
                        [0, '&rfr;'],
                        [0, '&sfr;'],
                        [0, '&tfr;'],
                        [0, '&ufr;'],
                        [0, '&vfr;'],
                        [0, '&wfr;'],
                        [0, '&xfr;'],
                        [0, '&yfr;'],
                        [0, '&zfr;'],
                        [0, '&Aopf;'],
                        [0, '&Bopf;'],
                        [1, '&Dopf;'],
                        [0, '&Eopf;'],
                        [0, '&Fopf;'],
                        [0, '&Gopf;'],
                        [1, '&Iopf;'],
                        [0, '&Jopf;'],
                        [0, '&Kopf;'],
                        [0, '&Lopf;'],
                        [0, '&Mopf;'],
                        [1, '&Oopf;'],
                        [3, '&Sopf;'],
                        [0, '&Topf;'],
                        [0, '&Uopf;'],
                        [0, '&Vopf;'],
                        [0, '&Wopf;'],
                        [0, '&Xopf;'],
                        [0, '&Yopf;'],
                        [1, '&aopf;'],
                        [0, '&bopf;'],
                        [0, '&copf;'],
                        [0, '&dopf;'],
                        [0, '&eopf;'],
                        [0, '&fopf;'],
                        [0, '&gopf;'],
                        [0, '&hopf;'],
                        [0, '&iopf;'],
                        [0, '&jopf;'],
                        [0, '&kopf;'],
                        [0, '&lopf;'],
                        [0, '&mopf;'],
                        [0, '&nopf;'],
                        [0, '&oopf;'],
                        [0, '&popf;'],
                        [0, '&qopf;'],
                        [0, '&ropf;'],
                        [0, '&sopf;'],
                        [0, '&topf;'],
                        [0, '&uopf;'],
                        [0, '&vopf;'],
                        [0, '&wopf;'],
                        [0, '&xopf;'],
                        [0, '&yopf;'],
                        [0, '&zopf;'],
                    ]),
                ),
            },
        ],
        [8906, '&fflig;'],
        [0, '&filig;'],
        [0, '&fllig;'],
        [0, '&ffilig;'],
        [0, '&ffllig;'],
    ]),
);

// node_modules/entities/lib/esm/escape.js
var xmlReplacer = /["&'<>$\x80-\uFFFF]/g;
var xmlCodeMap = /* @__PURE__ */ new Map([
    [34, '&quot;'],
    [38, '&amp;'],
    [39, '&apos;'],
    [60, '&lt;'],
    [62, '&gt;'],
]);
var getCodePoint =
    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
    String.prototype.codePointAt != null
        ? (str, index2) => str.codePointAt(index2)
        : // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
          (c, index2) =>
              (c.charCodeAt(index2) & 64512) === 55296
                  ? (c.charCodeAt(index2) - 55296) * 1024 + c.charCodeAt(index2 + 1) - 56320 + 65536
                  : c.charCodeAt(index2);
function encodeXML(str) {
    let ret = '';
    let lastIdx = 0;
    let match;
    while ((match = xmlReplacer.exec(str)) !== null) {
        const i2 = match.index;
        const char = str.charCodeAt(i2);
        const next2 = xmlCodeMap.get(char);
        if (next2 !== void 0) {
            ret += str.substring(lastIdx, i2) + next2;
            lastIdx = i2 + 1;
        } else {
            ret += `${str.substring(lastIdx, i2)}&#x${getCodePoint(str, i2).toString(16)};`;
            lastIdx = xmlReplacer.lastIndex += Number((char & 64512) === 55296);
        }
    }
    return ret + str.substr(lastIdx);
}
function getEscaper(regex, map2) {
    return function escape2(data2) {
        let match;
        let lastIdx = 0;
        let result = '';
        while ((match = regex.exec(data2))) {
            if (lastIdx !== match.index) {
                result += data2.substring(lastIdx, match.index);
            }
            result += map2.get(match[0].charCodeAt(0));
            lastIdx = match.index + 1;
        }
        return result + data2.substring(lastIdx);
    };
}
var escapeUTF8 = getEscaper(/[&<>'"]/g, xmlCodeMap);
var escapeAttribute = getEscaper(
    /["&\u00A0]/g,
    /* @__PURE__ */ new Map([
        [34, '&quot;'],
        [38, '&amp;'],
        [160, '&nbsp;'],
    ]),
);
var escapeText = getEscaper(
    /[&<>\u00A0]/g,
    /* @__PURE__ */ new Map([
        [38, '&amp;'],
        [60, '&lt;'],
        [62, '&gt;'],
        [160, '&nbsp;'],
    ]),
);

// node_modules/entities/lib/esm/index.js
var EntityLevel;
(function (EntityLevel2) {
    EntityLevel2[(EntityLevel2['XML'] = 0)] = 'XML';
    EntityLevel2[(EntityLevel2['HTML'] = 1)] = 'HTML';
})(EntityLevel || (EntityLevel = {}));
var EncodingMode;
(function (EncodingMode2) {
    EncodingMode2[(EncodingMode2['UTF8'] = 0)] = 'UTF8';
    EncodingMode2[(EncodingMode2['ASCII'] = 1)] = 'ASCII';
    EncodingMode2[(EncodingMode2['Extensive'] = 2)] = 'Extensive';
    EncodingMode2[(EncodingMode2['Attribute'] = 3)] = 'Attribute';
    EncodingMode2[(EncodingMode2['Text'] = 4)] = 'Text';
})(EncodingMode || (EncodingMode = {}));

// node_modules/dom-serializer/lib/esm/foreignNames.js
var elementNames = new Map(
    [
        'altGlyph',
        'altGlyphDef',
        'altGlyphItem',
        'animateColor',
        'animateMotion',
        'animateTransform',
        'clipPath',
        'feBlend',
        'feColorMatrix',
        'feComponentTransfer',
        'feComposite',
        'feConvolveMatrix',
        'feDiffuseLighting',
        'feDisplacementMap',
        'feDistantLight',
        'feDropShadow',
        'feFlood',
        'feFuncA',
        'feFuncB',
        'feFuncG',
        'feFuncR',
        'feGaussianBlur',
        'feImage',
        'feMerge',
        'feMergeNode',
        'feMorphology',
        'feOffset',
        'fePointLight',
        'feSpecularLighting',
        'feSpotLight',
        'feTile',
        'feTurbulence',
        'foreignObject',
        'glyphRef',
        'linearGradient',
        'radialGradient',
        'textPath',
    ].map((val2) => [val2.toLowerCase(), val2]),
);
var attributeNames = new Map(
    [
        'definitionURL',
        'attributeName',
        'attributeType',
        'baseFrequency',
        'baseProfile',
        'calcMode',
        'clipPathUnits',
        'diffuseConstant',
        'edgeMode',
        'filterUnits',
        'glyphRef',
        'gradientTransform',
        'gradientUnits',
        'kernelMatrix',
        'kernelUnitLength',
        'keyPoints',
        'keySplines',
        'keyTimes',
        'lengthAdjust',
        'limitingConeAngle',
        'markerHeight',
        'markerUnits',
        'markerWidth',
        'maskContentUnits',
        'maskUnits',
        'numOctaves',
        'pathLength',
        'patternContentUnits',
        'patternTransform',
        'patternUnits',
        'pointsAtX',
        'pointsAtY',
        'pointsAtZ',
        'preserveAlpha',
        'preserveAspectRatio',
        'primitiveUnits',
        'refX',
        'refY',
        'repeatCount',
        'repeatDur',
        'requiredExtensions',
        'requiredFeatures',
        'specularConstant',
        'specularExponent',
        'spreadMethod',
        'startOffset',
        'stdDeviation',
        'stitchTiles',
        'surfaceScale',
        'systemLanguage',
        'tableValues',
        'targetX',
        'targetY',
        'textLength',
        'viewBox',
        'viewTarget',
        'xChannelSelector',
        'yChannelSelector',
        'zoomAndPan',
    ].map((val2) => [val2.toLowerCase(), val2]),
);

// node_modules/dom-serializer/lib/esm/index.js
var unencodedElements = /* @__PURE__ */ new Set([
    'style',
    'script',
    'xmp',
    'iframe',
    'noembed',
    'noframes',
    'plaintext',
    'noscript',
]);
function replaceQuotes(value) {
    return value.replace(/"/g, '&quot;');
}
function formatAttributes(attributes2, opts) {
    var _a5;
    if (!attributes2) return;
    const encode =
        ((_a5 = opts.encodeEntities) !== null && _a5 !== void 0 ? _a5 : opts.decodeEntities) ===
        false
            ? replaceQuotes
            : opts.xmlMode || opts.encodeEntities !== 'utf8'
              ? encodeXML
              : escapeAttribute;
    return Object.keys(attributes2)
        .map((key) => {
            var _a6, _b;
            const value = (_a6 = attributes2[key]) !== null && _a6 !== void 0 ? _a6 : '';
            if (opts.xmlMode === 'foreign') {
                key = (_b = attributeNames.get(key)) !== null && _b !== void 0 ? _b : key;
            }
            if (!opts.emptyAttrs && !opts.xmlMode && value === '') {
                return key;
            }
            return `${key}="${encode(value)}"`;
        })
        .join(' ');
}
var singleTag = /* @__PURE__ */ new Set([
    'area',
    'base',
    'basefont',
    'br',
    'col',
    'command',
    'embed',
    'frame',
    'hr',
    'img',
    'input',
    'isindex',
    'keygen',
    'link',
    'meta',
    'param',
    'source',
    'track',
    'wbr',
]);
function render(node, options2 = {}) {
    const nodes = 'length' in node ? node : [node];
    let output = '';
    for (let i2 = 0; i2 < nodes.length; i2++) {
        output += renderNode(nodes[i2], options2);
    }
    return output;
}
var esm_default = render;
function renderNode(node, options2) {
    switch (node.type) {
        case Root:
            return render(node.children, options2);
        case Doctype:
        case Directive:
            return renderDirective(node);
        case Comment:
            return renderComment(node);
        case CDATA:
            return renderCdata(node);
        case Script:
        case Style:
        case Tag:
            return renderTag(node, options2);
        case Text:
            return renderText(node, options2);
    }
}
var foreignModeIntegrationPoints = /* @__PURE__ */ new Set([
    'mi',
    'mo',
    'mn',
    'ms',
    'mtext',
    'annotation-xml',
    'foreignObject',
    'desc',
    'title',
]);
var foreignElements = /* @__PURE__ */ new Set(['svg', 'math']);
function renderTag(elem, opts) {
    var _a5;
    if (opts.xmlMode === 'foreign') {
        elem.name =
            (_a5 = elementNames.get(elem.name)) !== null && _a5 !== void 0 ? _a5 : elem.name;
        if (elem.parent && foreignModeIntegrationPoints.has(elem.parent.name)) {
            opts = { ...opts, xmlMode: false };
        }
    }
    if (!opts.xmlMode && foreignElements.has(elem.name)) {
        opts = { ...opts, xmlMode: 'foreign' };
    }
    let tag = `<${elem.name}`;
    const attribs = formatAttributes(elem.attribs, opts);
    if (attribs) {
        tag += ` ${attribs}`;
    }
    if (
        elem.children.length === 0 &&
        (opts.xmlMode
            ? // In XML mode or foreign mode, and user hasn't explicitly turned off self-closing tags
              opts.selfClosingTags !== false
            : // User explicitly asked for self-closing tags, even in HTML mode
              opts.selfClosingTags && singleTag.has(elem.name))
    ) {
        if (!opts.xmlMode) tag += ' ';
        tag += '/>';
    } else {
        tag += '>';
        if (elem.children.length > 0) {
            tag += render(elem.children, opts);
        }
        if (opts.xmlMode || !singleTag.has(elem.name)) {
            tag += `</${elem.name}>`;
        }
    }
    return tag;
}
function renderDirective(elem) {
    return `<${elem.data}>`;
}
function renderText(elem, opts) {
    var _a5;
    let data2 = elem.data || '';
    if (
        ((_a5 = opts.encodeEntities) !== null && _a5 !== void 0 ? _a5 : opts.decodeEntities) !==
            false &&
        !(!opts.xmlMode && elem.parent && unencodedElements.has(elem.parent.name))
    ) {
        data2 =
            opts.xmlMode || opts.encodeEntities !== 'utf8' ? encodeXML(data2) : escapeText(data2);
    }
    return data2;
}
function renderCdata(elem) {
    return `<![CDATA[${elem.children[0].data}]]>`;
}
function renderComment(elem) {
    return `<!--${elem.data}-->`;
}

// node_modules/domutils/lib/esm/stringify.js
function getOuterHTML(node, options2) {
    return esm_default(node, options2);
}
function getInnerHTML(node, options2) {
    return hasChildren(node)
        ? node.children.map((node2) => getOuterHTML(node2, options2)).join('')
        : '';
}
function getText(node) {
    if (Array.isArray(node)) return node.map(getText).join('');
    if (isTag2(node)) return node.name === 'br' ? '\n' : getText(node.children);
    if (isCDATA(node)) return getText(node.children);
    if (isText(node)) return node.data;
    return '';
}
function textContent(node) {
    if (Array.isArray(node)) return node.map(textContent).join('');
    if (hasChildren(node) && !isComment(node)) {
        return textContent(node.children);
    }
    if (isText(node)) return node.data;
    return '';
}
function innerText(node) {
    if (Array.isArray(node)) return node.map(innerText).join('');
    if (hasChildren(node) && (node.type === ElementType.Tag || isCDATA(node))) {
        return innerText(node.children);
    }
    if (isText(node)) return node.data;
    return '';
}

// node_modules/domutils/lib/esm/traversal.js
function getChildren(elem) {
    return hasChildren(elem) ? elem.children : [];
}
function getParent(elem) {
    return elem.parent || null;
}
function getSiblings(elem) {
    const parent2 = getParent(elem);
    if (parent2 != null) return getChildren(parent2);
    const siblings2 = [elem];
    let { prev: prev2, next: next2 } = elem;
    while (prev2 != null) {
        siblings2.unshift(prev2);
        ({ prev: prev2 } = prev2);
    }
    while (next2 != null) {
        siblings2.push(next2);
        ({ next: next2 } = next2);
    }
    return siblings2;
}
function getAttributeValue(elem, name) {
    var _a5;
    return (_a5 = elem.attribs) === null || _a5 === void 0 ? void 0 : _a5[name];
}
function hasAttrib(elem, name) {
    return (
        elem.attribs != null &&
        Object.prototype.hasOwnProperty.call(elem.attribs, name) &&
        elem.attribs[name] != null
    );
}
function getName(elem) {
    return elem.name;
}
function nextElementSibling(elem) {
    let { next: next2 } = elem;
    while (next2 !== null && !isTag2(next2)) ({ next: next2 } = next2);
    return next2;
}
function prevElementSibling(elem) {
    let { prev: prev2 } = elem;
    while (prev2 !== null && !isTag2(prev2)) ({ prev: prev2 } = prev2);
    return prev2;
}

// node_modules/domutils/lib/esm/manipulation.js
function removeElement(elem) {
    if (elem.prev) elem.prev.next = elem.next;
    if (elem.next) elem.next.prev = elem.prev;
    if (elem.parent) {
        const childs = elem.parent.children;
        const childsIndex = childs.lastIndexOf(elem);
        if (childsIndex >= 0) {
            childs.splice(childsIndex, 1);
        }
    }
    elem.next = null;
    elem.prev = null;
    elem.parent = null;
}
function replaceElement(elem, replacement) {
    const prev2 = (replacement.prev = elem.prev);
    if (prev2) {
        prev2.next = replacement;
    }
    const next2 = (replacement.next = elem.next);
    if (next2) {
        next2.prev = replacement;
    }
    const parent2 = (replacement.parent = elem.parent);
    if (parent2) {
        const childs = parent2.children;
        childs[childs.lastIndexOf(elem)] = replacement;
        elem.parent = null;
    }
}
function appendChild(parent2, child) {
    removeElement(child);
    child.next = null;
    child.parent = parent2;
    if (parent2.children.push(child) > 1) {
        const sibling = parent2.children[parent2.children.length - 2];
        sibling.next = child;
        child.prev = sibling;
    } else {
        child.prev = null;
    }
}
function append(elem, next2) {
    removeElement(next2);
    const { parent: parent2 } = elem;
    const currNext = elem.next;
    next2.next = currNext;
    next2.prev = elem;
    elem.next = next2;
    next2.parent = parent2;
    if (currNext) {
        currNext.prev = next2;
        if (parent2) {
            const childs = parent2.children;
            childs.splice(childs.lastIndexOf(currNext), 0, next2);
        }
    } else if (parent2) {
        parent2.children.push(next2);
    }
}
function prependChild(parent2, child) {
    removeElement(child);
    child.parent = parent2;
    child.prev = null;
    if (parent2.children.unshift(child) !== 1) {
        const sibling = parent2.children[1];
        sibling.prev = child;
        child.next = sibling;
    } else {
        child.next = null;
    }
}
function prepend(elem, prev2) {
    removeElement(prev2);
    const { parent: parent2 } = elem;
    if (parent2) {
        const childs = parent2.children;
        childs.splice(childs.indexOf(elem), 0, prev2);
    }
    if (elem.prev) {
        elem.prev.next = prev2;
    }
    prev2.parent = parent2;
    prev2.prev = elem.prev;
    prev2.next = elem;
    elem.prev = prev2;
}

// node_modules/domutils/lib/esm/querying.js
function filter(test, node, recurse = true, limit = Infinity) {
    return find(test, Array.isArray(node) ? node : [node], recurse, limit);
}
function find(test, nodes, recurse, limit) {
    const result = [];
    const nodeStack = [nodes];
    const indexStack = [0];
    for (;;) {
        if (indexStack[0] >= nodeStack[0].length) {
            if (indexStack.length === 1) {
                return result;
            }
            nodeStack.shift();
            indexStack.shift();
            continue;
        }
        const elem = nodeStack[0][indexStack[0]++];
        if (test(elem)) {
            result.push(elem);
            if (--limit <= 0) return result;
        }
        if (recurse && hasChildren(elem) && elem.children.length > 0) {
            indexStack.unshift(0);
            nodeStack.unshift(elem.children);
        }
    }
}
function findOneChild(test, nodes) {
    return nodes.find(test);
}
function findOne(test, nodes, recurse = true) {
    let elem = null;
    for (let i2 = 0; i2 < nodes.length && !elem; i2++) {
        const node = nodes[i2];
        if (!isTag2(node)) {
            continue;
        } else if (test(node)) {
            elem = node;
        } else if (recurse && node.children.length > 0) {
            elem = findOne(test, node.children, true);
        }
    }
    return elem;
}
function existsOne(test, nodes) {
    return nodes.some(
        (checked) => isTag2(checked) && (test(checked) || existsOne(test, checked.children)),
    );
}
function findAll(test, nodes) {
    const result = [];
    const nodeStack = [nodes];
    const indexStack = [0];
    for (;;) {
        if (indexStack[0] >= nodeStack[0].length) {
            if (nodeStack.length === 1) {
                return result;
            }
            nodeStack.shift();
            indexStack.shift();
            continue;
        }
        const elem = nodeStack[0][indexStack[0]++];
        if (!isTag2(elem)) continue;
        if (test(elem)) result.push(elem);
        if (elem.children.length > 0) {
            indexStack.unshift(0);
            nodeStack.unshift(elem.children);
        }
    }
}

// node_modules/domutils/lib/esm/legacy.js
var Checks = {
    tag_name(name) {
        if (typeof name === 'function') {
            return (elem) => isTag2(elem) && name(elem.name);
        } else if (name === '*') {
            return isTag2;
        }
        return (elem) => isTag2(elem) && elem.name === name;
    },
    tag_type(type) {
        if (typeof type === 'function') {
            return (elem) => type(elem.type);
        }
        return (elem) => elem.type === type;
    },
    tag_contains(data2) {
        if (typeof data2 === 'function') {
            return (elem) => isText(elem) && data2(elem.data);
        }
        return (elem) => isText(elem) && elem.data === data2;
    },
};
function getAttribCheck(attrib, value) {
    if (typeof value === 'function') {
        return (elem) => isTag2(elem) && value(elem.attribs[attrib]);
    }
    return (elem) => isTag2(elem) && elem.attribs[attrib] === value;
}
function combineFuncs(a, b) {
    return (elem) => a(elem) || b(elem);
}
function compileTest(options2) {
    const funcs = Object.keys(options2).map((key) => {
        const value = options2[key];
        return Object.prototype.hasOwnProperty.call(Checks, key)
            ? Checks[key](value)
            : getAttribCheck(key, value);
    });
    return funcs.length === 0 ? null : funcs.reduce(combineFuncs);
}
function testElement(options2, node) {
    const test = compileTest(options2);
    return test ? test(node) : true;
}
function getElements(options2, nodes, recurse, limit = Infinity) {
    const test = compileTest(options2);
    return test ? filter(test, nodes, recurse, limit) : [];
}
function getElementById(id, nodes, recurse = true) {
    if (!Array.isArray(nodes)) nodes = [nodes];
    return findOne(getAttribCheck('id', id), nodes, recurse);
}
function getElementsByTagName(tagName, nodes, recurse = true, limit = Infinity) {
    return filter(Checks['tag_name'](tagName), nodes, recurse, limit);
}
function getElementsByTagType(type, nodes, recurse = true, limit = Infinity) {
    return filter(Checks['tag_type'](type), nodes, recurse, limit);
}

// node_modules/domutils/lib/esm/helpers.js
function removeSubsets(nodes) {
    let idx = nodes.length;
    while (--idx >= 0) {
        const node = nodes[idx];
        if (idx > 0 && nodes.lastIndexOf(node, idx - 1) >= 0) {
            nodes.splice(idx, 1);
            continue;
        }
        for (let ancestor = node.parent; ancestor; ancestor = ancestor.parent) {
            if (nodes.includes(ancestor)) {
                nodes.splice(idx, 1);
                break;
            }
        }
    }
    return nodes;
}
var DocumentPosition;
(function (DocumentPosition2) {
    DocumentPosition2[(DocumentPosition2['DISCONNECTED'] = 1)] = 'DISCONNECTED';
    DocumentPosition2[(DocumentPosition2['PRECEDING'] = 2)] = 'PRECEDING';
    DocumentPosition2[(DocumentPosition2['FOLLOWING'] = 4)] = 'FOLLOWING';
    DocumentPosition2[(DocumentPosition2['CONTAINS'] = 8)] = 'CONTAINS';
    DocumentPosition2[(DocumentPosition2['CONTAINED_BY'] = 16)] = 'CONTAINED_BY';
})(DocumentPosition || (DocumentPosition = {}));
function compareDocumentPosition(nodeA, nodeB) {
    const aParents = [];
    const bParents = [];
    if (nodeA === nodeB) {
        return 0;
    }
    let current = hasChildren(nodeA) ? nodeA : nodeA.parent;
    while (current) {
        aParents.unshift(current);
        current = current.parent;
    }
    current = hasChildren(nodeB) ? nodeB : nodeB.parent;
    while (current) {
        bParents.unshift(current);
        current = current.parent;
    }
    const maxIdx = Math.min(aParents.length, bParents.length);
    let idx = 0;
    while (idx < maxIdx && aParents[idx] === bParents[idx]) {
        idx++;
    }
    if (idx === 0) {
        return DocumentPosition.DISCONNECTED;
    }
    const sharedParent = aParents[idx - 1];
    const siblings2 = sharedParent.children;
    const aSibling = aParents[idx];
    const bSibling = bParents[idx];
    if (siblings2.indexOf(aSibling) > siblings2.indexOf(bSibling)) {
        if (sharedParent === nodeB) {
            return DocumentPosition.FOLLOWING | DocumentPosition.CONTAINED_BY;
        }
        return DocumentPosition.FOLLOWING;
    }
    if (sharedParent === nodeA) {
        return DocumentPosition.PRECEDING | DocumentPosition.CONTAINS;
    }
    return DocumentPosition.PRECEDING;
}
function uniqueSort(nodes) {
    nodes = nodes.filter((node, i2, arr) => !arr.includes(node, i2 + 1));
    nodes.sort((a, b) => {
        const relative = compareDocumentPosition(a, b);
        if (relative & DocumentPosition.PRECEDING) {
            return -1;
        } else if (relative & DocumentPosition.FOLLOWING) {
            return 1;
        }
        return 0;
    });
    return nodes;
}

// node_modules/domutils/lib/esm/feeds.js
function getFeed(doc) {
    const feedRoot = getOneElement(isValidFeed, doc);
    return !feedRoot
        ? null
        : feedRoot.name === 'feed'
          ? getAtomFeed(feedRoot)
          : getRssFeed(feedRoot);
}
function getAtomFeed(feedRoot) {
    var _a5;
    const childs = feedRoot.children;
    const feed = {
        type: 'atom',
        items: getElementsByTagName('entry', childs).map((item) => {
            var _a6;
            const { children: children2 } = item;
            const entry = { media: getMediaElements(children2) };
            addConditionally(entry, 'id', 'id', children2);
            addConditionally(entry, 'title', 'title', children2);
            const href2 =
                (_a6 = getOneElement('link', children2)) === null || _a6 === void 0
                    ? void 0
                    : _a6.attribs['href'];
            if (href2) {
                entry.link = href2;
            }
            const description = fetch2('summary', children2) || fetch2('content', children2);
            if (description) {
                entry.description = description;
            }
            const pubDate = fetch2('updated', children2);
            if (pubDate) {
                entry.pubDate = new Date(pubDate);
            }
            return entry;
        }),
    };
    addConditionally(feed, 'id', 'id', childs);
    addConditionally(feed, 'title', 'title', childs);
    const href =
        (_a5 = getOneElement('link', childs)) === null || _a5 === void 0
            ? void 0
            : _a5.attribs['href'];
    if (href) {
        feed.link = href;
    }
    addConditionally(feed, 'description', 'subtitle', childs);
    const updated = fetch2('updated', childs);
    if (updated) {
        feed.updated = new Date(updated);
    }
    addConditionally(feed, 'author', 'email', childs, true);
    return feed;
}
function getRssFeed(feedRoot) {
    var _a5, _b;
    const childs =
        (_b =
            (_a5 = getOneElement('channel', feedRoot.children)) === null || _a5 === void 0
                ? void 0
                : _a5.children) !== null && _b !== void 0
            ? _b
            : [];
    const feed = {
        type: feedRoot.name.substr(0, 3),
        id: '',
        items: getElementsByTagName('item', feedRoot.children).map((item) => {
            const { children: children2 } = item;
            const entry = { media: getMediaElements(children2) };
            addConditionally(entry, 'id', 'guid', children2);
            addConditionally(entry, 'title', 'title', children2);
            addConditionally(entry, 'link', 'link', children2);
            addConditionally(entry, 'description', 'description', children2);
            const pubDate = fetch2('pubDate', children2) || fetch2('dc:date', children2);
            if (pubDate) entry.pubDate = new Date(pubDate);
            return entry;
        }),
    };
    addConditionally(feed, 'title', 'title', childs);
    addConditionally(feed, 'link', 'link', childs);
    addConditionally(feed, 'description', 'description', childs);
    const updated = fetch2('lastBuildDate', childs);
    if (updated) {
        feed.updated = new Date(updated);
    }
    addConditionally(feed, 'author', 'managingEditor', childs, true);
    return feed;
}
var MEDIA_KEYS_STRING = ['url', 'type', 'lang'];
var MEDIA_KEYS_INT = [
    'fileSize',
    'bitrate',
    'framerate',
    'samplingrate',
    'channels',
    'duration',
    'height',
    'width',
];
function getMediaElements(where) {
    return getElementsByTagName('media:content', where).map((elem) => {
        const { attribs } = elem;
        const media = {
            medium: attribs['medium'],
            isDefault: !!attribs['isDefault'],
        };
        for (const attrib of MEDIA_KEYS_STRING) {
            if (attribs[attrib]) {
                media[attrib] = attribs[attrib];
            }
        }
        for (const attrib of MEDIA_KEYS_INT) {
            if (attribs[attrib]) {
                media[attrib] = parseInt(attribs[attrib], 10);
            }
        }
        if (attribs['expression']) {
            media.expression = attribs['expression'];
        }
        return media;
    });
}
function getOneElement(tagName, node) {
    return getElementsByTagName(tagName, node, true, 1)[0];
}
function fetch2(tagName, where, recurse = false) {
    return textContent(getElementsByTagName(tagName, where, recurse, 1)).trim();
}
function addConditionally(obj, prop2, tagName, where, recurse = false) {
    const val2 = fetch2(tagName, where, recurse);
    if (val2) obj[prop2] = val2;
}
function isValidFeed(value) {
    return value === 'rss' || value === 'feed' || value === 'rdf:RDF';
}

// node_modules/cheerio/lib/esm/static.js
function render2(that, dom, options2) {
    if (!that) return '';
    return that(
        dom !== null && dom !== void 0 ? dom : that._root.children,
        null,
        void 0,
        options2,
    ).toString();
}
function isOptions(dom, options2) {
    return (
        !options2 &&
        typeof dom === 'object' &&
        dom != null &&
        !('length' in dom) &&
        !('type' in dom)
    );
}
function html(dom, options2) {
    const toRender = isOptions(dom) ? ((options2 = dom), void 0) : dom;
    const opts = {
        ...options_default,
        ...(this === null || this === void 0 ? void 0 : this._options),
        ...flatten(options2 !== null && options2 !== void 0 ? options2 : {}),
    };
    return render2(this, toRender, opts);
}
function xml(dom) {
    const options2 = { ...this._options, xmlMode: true };
    return render2(this, dom, options2);
}
function text(elements) {
    const elems = elements ? elements : this ? this.root() : [];
    let ret = '';
    for (let i2 = 0; i2 < elems.length; i2++) {
        ret += textContent(elems[i2]);
    }
    return ret;
}
function parseHTML(data2, context, keepScripts = typeof context === 'boolean' ? context : false) {
    if (!data2 || typeof data2 !== 'string') {
        return null;
    }
    if (typeof context === 'boolean') {
        keepScripts = context;
    }
    const parsed = this.load(data2, options_default, false);
    if (!keepScripts) {
        parsed('script').remove();
    }
    return parsed.root()[0].children.slice();
}
function root() {
    return this(this._root);
}
function contains(container, contained) {
    if (contained === container) {
        return false;
    }
    let next2 = contained;
    while (next2 && next2 !== next2.parent) {
        next2 = next2.parent;
        if (next2 === container) {
            return true;
        }
    }
    return false;
}
function merge(arr1, arr2) {
    if (!isArrayLike(arr1) || !isArrayLike(arr2)) {
        return;
    }
    let newLength = arr1.length;
    const len = +arr2.length;
    for (let i2 = 0; i2 < len; i2++) {
        arr1[newLength++] = arr2[i2];
    }
    arr1.length = newLength;
    return arr1;
}
function isArrayLike(item) {
    if (Array.isArray(item)) {
        return true;
    }
    if (
        typeof item !== 'object' ||
        !Object.prototype.hasOwnProperty.call(item, 'length') ||
        typeof item.length !== 'number' ||
        item.length < 0
    ) {
        return false;
    }
    for (let i2 = 0; i2 < item.length; i2++) {
        if (!(i2 in item)) {
            return false;
        }
    }
    return true;
}

// node_modules/cheerio/lib/esm/api/attributes.js
var attributes_exports = {};
__export(attributes_exports, {
    addClass: () => addClass,
    attr: () => attr,
    data: () => data,
    hasClass: () => hasClass,
    prop: () => prop,
    removeAttr: () => removeAttr,
    removeClass: () => removeClass,
    toggleClass: () => toggleClass,
    val: () => val,
});

// node_modules/cheerio/lib/esm/utils.js
function isCheerio(maybeCheerio) {
    return maybeCheerio.cheerio != null;
}
function camelCase(str) {
    return str.replace(/[_.-](\w|$)/g, (_, x2) => x2.toUpperCase());
}
function cssCase(str) {
    return str.replace(/[A-Z]/g, '-$&').toLowerCase();
}
function domEach(array, fn) {
    const len = array.length;
    for (let i2 = 0; i2 < len; i2++) fn(array[i2], i2);
    return array;
}
function cloneDom(dom) {
    const clone3 =
        'length' in dom
            ? Array.prototype.map.call(dom, (el) => cloneNode(el, true))
            : [cloneNode(dom, true)];
    const root3 = new Document(clone3);
    clone3.forEach((node) => {
        node.parent = root3;
    });
    return clone3;
}
var CharacterCodes;
(function (CharacterCodes2) {
    CharacterCodes2[(CharacterCodes2['LowerA'] = 97)] = 'LowerA';
    CharacterCodes2[(CharacterCodes2['LowerZ'] = 122)] = 'LowerZ';
    CharacterCodes2[(CharacterCodes2['UpperA'] = 65)] = 'UpperA';
    CharacterCodes2[(CharacterCodes2['UpperZ'] = 90)] = 'UpperZ';
    CharacterCodes2[(CharacterCodes2['Exclamation'] = 33)] = 'Exclamation';
})(CharacterCodes || (CharacterCodes = {}));
function isHtml(str) {
    const tagStart = str.indexOf('<');
    if (tagStart < 0 || tagStart > str.length - 3) return false;
    const tagChar = str.charCodeAt(tagStart + 1);
    return (
        ((tagChar >= CharacterCodes.LowerA && tagChar <= CharacterCodes.LowerZ) ||
            (tagChar >= CharacterCodes.UpperA && tagChar <= CharacterCodes.UpperZ) ||
            tagChar === CharacterCodes.Exclamation) &&
        str.includes('>', tagStart + 2)
    );
}

// node_modules/cheerio/lib/esm/api/attributes.js
var hasOwn = Object.prototype.hasOwnProperty;
var rspace = /\s+/;
var dataAttrPrefix = 'data-';
var primitives = {
    null: null,
    true: true,
    false: false,
};
var rboolean =
    /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i;
var rbrace = /^{[^]*}$|^\[[^]*]$/;
function getAttr(elem, name, xmlMode) {
    var _a5;
    if (!elem || !isTag2(elem)) return void 0;
    (_a5 = elem.attribs) !== null && _a5 !== void 0 ? _a5 : (elem.attribs = {});
    if (!name) {
        return elem.attribs;
    }
    if (hasOwn.call(elem.attribs, name)) {
        return !xmlMode && rboolean.test(name) ? name : elem.attribs[name];
    }
    if (elem.name === 'option' && name === 'value') {
        return text(elem.children);
    }
    if (
        elem.name === 'input' &&
        (elem.attribs['type'] === 'radio' || elem.attribs['type'] === 'checkbox') &&
        name === 'value'
    ) {
        return 'on';
    }
    return void 0;
}
function setAttr(el, name, value) {
    if (value === null) {
        removeAttribute(el, name);
    } else {
        el.attribs[name] = `${value}`;
    }
}
function attr(name, value) {
    if (typeof name === 'object' || value !== void 0) {
        if (typeof value === 'function') {
            if (typeof name !== 'string') {
                {
                    throw new Error('Bad combination of arguments.');
                }
            }
            return domEach(this, (el, i2) => {
                if (isTag2(el)) setAttr(el, name, value.call(el, i2, el.attribs[name]));
            });
        }
        return domEach(this, (el) => {
            if (!isTag2(el)) return;
            if (typeof name === 'object') {
                Object.keys(name).forEach((objName) => {
                    const objValue = name[objName];
                    setAttr(el, objName, objValue);
                });
            } else {
                setAttr(el, name, value);
            }
        });
    }
    return arguments.length > 1 ? this : getAttr(this[0], name, this.options.xmlMode);
}
function getProp(el, name, xmlMode) {
    return name in el
        ? // @ts-expect-error TS doesn't like us accessing the value directly here.
          el[name]
        : !xmlMode && rboolean.test(name)
          ? getAttr(el, name, false) !== void 0
          : getAttr(el, name, xmlMode);
}
function setProp(el, name, value, xmlMode) {
    if (name in el) {
        el[name] = value;
    } else {
        setAttr(el, name, !xmlMode && rboolean.test(name) ? (value ? '' : null) : `${value}`);
    }
}
function prop(name, value) {
    var _a5;
    if (typeof name === 'string' && value === void 0) {
        const el = this[0];
        if (!el || !isTag2(el)) return void 0;
        switch (name) {
            case 'style': {
                const property = this.css();
                const keys = Object.keys(property);
                keys.forEach((p, i2) => {
                    property[i2] = p;
                });
                property.length = keys.length;
                return property;
            }
            case 'tagName':
            case 'nodeName': {
                return el.name.toUpperCase();
            }
            case 'href':
            case 'src': {
                const prop2 = (_a5 = el.attribs) === null || _a5 === void 0 ? void 0 : _a5[name];
                if (
                    typeof URL !== 'undefined' &&
                    ((name === 'href' && (el.tagName === 'a' || el.name === 'link')) ||
                        (name === 'src' &&
                            (el.tagName === 'img' ||
                                el.tagName === 'iframe' ||
                                el.tagName === 'audio' ||
                                el.tagName === 'video' ||
                                el.tagName === 'source'))) &&
                    prop2 !== void 0 &&
                    this.options.baseURI
                ) {
                    return new URL(prop2, this.options.baseURI).href;
                }
                return prop2;
            }
            case 'innerText': {
                return innerText(el);
            }
            case 'textContent': {
                return textContent(el);
            }
            case 'outerHTML':
                return this.clone().wrap('<container />').parent().html();
            case 'innerHTML':
                return this.html();
            default:
                return getProp(el, name, this.options.xmlMode);
        }
    }
    if (typeof name === 'object' || value !== void 0) {
        if (typeof value === 'function') {
            if (typeof name === 'object') {
                throw new Error('Bad combination of arguments.');
            }
            return domEach(this, (el, i2) => {
                if (isTag2(el)) {
                    setProp(
                        el,
                        name,
                        value.call(el, i2, getProp(el, name, this.options.xmlMode)),
                        this.options.xmlMode,
                    );
                }
            });
        }
        return domEach(this, (el) => {
            if (!isTag2(el)) return;
            if (typeof name === 'object') {
                Object.keys(name).forEach((key) => {
                    const val2 = name[key];
                    setProp(el, key, val2, this.options.xmlMode);
                });
            } else {
                setProp(el, name, value, this.options.xmlMode);
            }
        });
    }
    return void 0;
}
function setData(el, name, value) {
    var _a5;
    const elem = el;
    (_a5 = elem.data) !== null && _a5 !== void 0 ? _a5 : (elem.data = {});
    if (typeof name === 'object') Object.assign(elem.data, name);
    else if (typeof name === 'string' && value !== void 0) {
        elem.data[name] = value;
    }
}
function readData(el, name) {
    let domNames;
    let jsNames;
    let value;
    if (name == null) {
        domNames = Object.keys(el.attribs).filter((attrName) =>
            attrName.startsWith(dataAttrPrefix),
        );
        jsNames = domNames.map((domName) => camelCase(domName.slice(dataAttrPrefix.length)));
    } else {
        domNames = [dataAttrPrefix + cssCase(name)];
        jsNames = [name];
    }
    for (let idx = 0; idx < domNames.length; ++idx) {
        const domName = domNames[idx];
        const jsName = jsNames[idx];
        if (hasOwn.call(el.attribs, domName) && !hasOwn.call(el.data, jsName)) {
            value = el.attribs[domName];
            if (hasOwn.call(primitives, value)) {
                value = primitives[value];
            } else if (value === String(Number(value))) {
                value = Number(value);
            } else if (rbrace.test(value)) {
                try {
                    value = JSON.parse(value);
                } catch (e2) {}
            }
            el.data[jsName] = value;
        }
    }
    return name == null ? el.data : value;
}
function data(name, value) {
    var _a5;
    const elem = this[0];
    if (!elem || !isTag2(elem)) return;
    const dataEl = elem;
    (_a5 = dataEl.data) !== null && _a5 !== void 0 ? _a5 : (dataEl.data = {});
    if (!name) {
        return readData(dataEl);
    }
    if (typeof name === 'object' || value !== void 0) {
        domEach(this, (el) => {
            if (isTag2(el)) {
                if (typeof name === 'object') setData(el, name);
                else setData(el, name, value);
            }
        });
        return this;
    }
    if (hasOwn.call(dataEl.data, name)) {
        return dataEl.data[name];
    }
    return readData(dataEl, name);
}
function val(value) {
    const querying = arguments.length === 0;
    const element = this[0];
    if (!element || !isTag2(element)) return querying ? void 0 : this;
    switch (element.name) {
        case 'textarea':
            return this.text(value);
        case 'select': {
            const option = this.find('option:selected');
            if (!querying) {
                if (this.attr('multiple') == null && typeof value === 'object') {
                    return this;
                }
                this.find('option').removeAttr('selected');
                const values = typeof value !== 'object' ? [value] : value;
                for (let i2 = 0; i2 < values.length; i2++) {
                    this.find(`option[value="${values[i2]}"]`).attr('selected', '');
                }
                return this;
            }
            return this.attr('multiple')
                ? option.toArray().map((el) => text(el.children))
                : option.attr('value');
        }
        case 'input':
        case 'option':
            return querying ? this.attr('value') : this.attr('value', value);
    }
    return void 0;
}
function removeAttribute(elem, name) {
    if (!elem.attribs || !hasOwn.call(elem.attribs, name)) return;
    delete elem.attribs[name];
}
function splitNames(names) {
    return names ? names.trim().split(rspace) : [];
}
function removeAttr(name) {
    const attrNames = splitNames(name);
    for (let i2 = 0; i2 < attrNames.length; i2++) {
        domEach(this, (elem) => {
            if (isTag2(elem)) removeAttribute(elem, attrNames[i2]);
        });
    }
    return this;
}
function hasClass(className) {
    return this.toArray().some((elem) => {
        const clazz = isTag2(elem) && elem.attribs['class'];
        let idx = -1;
        if (clazz && className.length) {
            while ((idx = clazz.indexOf(className, idx + 1)) > -1) {
                const end2 = idx + className.length;
                if (
                    (idx === 0 || rspace.test(clazz[idx - 1])) &&
                    (end2 === clazz.length || rspace.test(clazz[end2]))
                ) {
                    return true;
                }
            }
        }
        return false;
    });
}
function addClass(value) {
    if (typeof value === 'function') {
        return domEach(this, (el, i2) => {
            if (isTag2(el)) {
                const className = el.attribs['class'] || '';
                addClass.call([el], value.call(el, i2, className));
            }
        });
    }
    if (!value || typeof value !== 'string') return this;
    const classNames = value.split(rspace);
    const numElements = this.length;
    for (let i2 = 0; i2 < numElements; i2++) {
        const el = this[i2];
        if (!isTag2(el)) continue;
        const className = getAttr(el, 'class', false);
        if (!className) {
            setAttr(el, 'class', classNames.join(' ').trim());
        } else {
            let setClass = ` ${className} `;
            for (let j = 0; j < classNames.length; j++) {
                const appendClass = `${classNames[j]} `;
                if (!setClass.includes(` ${appendClass}`)) setClass += appendClass;
            }
            setAttr(el, 'class', setClass.trim());
        }
    }
    return this;
}
function removeClass(name) {
    if (typeof name === 'function') {
        return domEach(this, (el, i2) => {
            if (isTag2(el)) {
                removeClass.call([el], name.call(el, i2, el.attribs['class'] || ''));
            }
        });
    }
    const classes = splitNames(name);
    const numClasses = classes.length;
    const removeAll = arguments.length === 0;
    return domEach(this, (el) => {
        if (!isTag2(el)) return;
        if (removeAll) {
            el.attribs['class'] = '';
        } else {
            const elClasses = splitNames(el.attribs['class']);
            let changed = false;
            for (let j = 0; j < numClasses; j++) {
                const index2 = elClasses.indexOf(classes[j]);
                if (index2 >= 0) {
                    elClasses.splice(index2, 1);
                    changed = true;
                    j--;
                }
            }
            if (changed) {
                el.attribs['class'] = elClasses.join(' ');
            }
        }
    });
}
function toggleClass(value, stateVal) {
    if (typeof value === 'function') {
        return domEach(this, (el, i2) => {
            if (isTag2(el)) {
                toggleClass.call(
                    [el],
                    value.call(el, i2, el.attribs['class'] || '', stateVal),
                    stateVal,
                );
            }
        });
    }
    if (!value || typeof value !== 'string') return this;
    const classNames = value.split(rspace);
    const numClasses = classNames.length;
    const state = typeof stateVal === 'boolean' ? (stateVal ? 1 : -1) : 0;
    const numElements = this.length;
    for (let i2 = 0; i2 < numElements; i2++) {
        const el = this[i2];
        if (!isTag2(el)) continue;
        const elementClasses = splitNames(el.attribs['class']);
        for (let j = 0; j < numClasses; j++) {
            const index2 = elementClasses.indexOf(classNames[j]);
            if (state >= 0 && index2 < 0) {
                elementClasses.push(classNames[j]);
            } else if (state <= 0 && index2 >= 0) {
                elementClasses.splice(index2, 1);
            }
        }
        el.attribs['class'] = elementClasses.join(' ');
    }
    return this;
}

// node_modules/cheerio/lib/esm/api/traversing.js
var traversing_exports = {};
__export(traversing_exports, {
    add: () => add,
    addBack: () => addBack,
    children: () => children,
    closest: () => closest,
    contents: () => contents,
    each: () => each,
    end: () => end,
    eq: () => eq,
    filter: () => filter3,
    filterArray: () => filterArray,
    find: () => find3,
    first: () => first,
    get: () => get,
    has: () => has,
    index: () => index,
    is: () => is3,
    last: () => last,
    map: () => map,
    next: () => next,
    nextAll: () => nextAll,
    nextUntil: () => nextUntil,
    not: () => not,
    parent: () => parent,
    parents: () => parents,
    parentsUntil: () => parentsUntil,
    prev: () => prev,
    prevAll: () => prevAll,
    prevUntil: () => prevUntil,
    siblings: () => siblings,
    slice: () => slice,
    toArray: () => toArray,
});

// node_modules/cheerio-select/lib/esm/index.js
var import_css_what5 = __toESM(require_commonjs(), 1);

// node_modules/css-select/lib/esm/index.js
var import_boolbase6 = __toESM(require_boolbase(), 1);

// node_modules/css-select/lib/esm/compile.js
var import_css_what4 = __toESM(require_commonjs(), 1);
var import_boolbase5 = __toESM(require_boolbase(), 1);

// node_modules/css-select/lib/esm/sort.js
var import_css_what = __toESM(require_commonjs(), 1);
var procedure = /* @__PURE__ */ new Map([
    [import_css_what.SelectorType.Universal, 50],
    [import_css_what.SelectorType.Tag, 30],
    [import_css_what.SelectorType.Attribute, 1],
    [import_css_what.SelectorType.Pseudo, 0],
]);
function isTraversal(token) {
    return !procedure.has(token.type);
}
var attributes = /* @__PURE__ */ new Map([
    [import_css_what.AttributeAction.Exists, 10],
    [import_css_what.AttributeAction.Equals, 8],
    [import_css_what.AttributeAction.Not, 7],
    [import_css_what.AttributeAction.Start, 6],
    [import_css_what.AttributeAction.End, 6],
    [import_css_what.AttributeAction.Any, 5],
]);
function sortByProcedure(arr) {
    const procs = arr.map(getProcedure);
    for (let i2 = 1; i2 < arr.length; i2++) {
        const procNew = procs[i2];
        if (procNew < 0) continue;
        for (let j = i2 - 1; j >= 0 && procNew < procs[j]; j--) {
            const token = arr[j + 1];
            arr[j + 1] = arr[j];
            arr[j] = token;
            procs[j + 1] = procs[j];
            procs[j] = procNew;
        }
    }
}
function getProcedure(token) {
    var _a5, _b;
    let proc = (_a5 = procedure.get(token.type)) !== null && _a5 !== void 0 ? _a5 : -1;
    if (token.type === import_css_what.SelectorType.Attribute) {
        proc = (_b = attributes.get(token.action)) !== null && _b !== void 0 ? _b : 4;
        if (token.action === import_css_what.AttributeAction.Equals && token.name === 'id') {
            proc = 9;
        }
        if (token.ignoreCase) {
            proc >>= 1;
        }
    } else if (token.type === import_css_what.SelectorType.Pseudo) {
        if (!token.data) {
            proc = 3;
        } else if (token.name === 'has' || token.name === 'contains') {
            proc = 0;
        } else if (Array.isArray(token.data)) {
            proc = Math.min(...token.data.map((d) => Math.min(...d.map(getProcedure))));
            if (proc < 0) {
                proc = 0;
            }
        } else {
            proc = 2;
        }
    }
    return proc;
}

// node_modules/css-select/lib/esm/attributes.js
var import_boolbase = __toESM(require_boolbase(), 1);
var reChars = /[-[\]{}()*+?.,\\^$|#\s]/g;
function escapeRegex(value) {
    return value.replace(reChars, '\\$&');
}
var caseInsensitiveAttributes = /* @__PURE__ */ new Set([
    'accept',
    'accept-charset',
    'align',
    'alink',
    'axis',
    'bgcolor',
    'charset',
    'checked',
    'clear',
    'codetype',
    'color',
    'compact',
    'declare',
    'defer',
    'dir',
    'direction',
    'disabled',
    'enctype',
    'face',
    'frame',
    'hreflang',
    'http-equiv',
    'lang',
    'language',
    'link',
    'media',
    'method',
    'multiple',
    'nohref',
    'noresize',
    'noshade',
    'nowrap',
    'readonly',
    'rel',
    'rev',
    'rules',
    'scope',
    'scrolling',
    'selected',
    'shape',
    'target',
    'text',
    'type',
    'valign',
    'valuetype',
    'vlink',
]);
function shouldIgnoreCase(selector, options2) {
    return typeof selector.ignoreCase === 'boolean'
        ? selector.ignoreCase
        : selector.ignoreCase === 'quirks'
          ? !!options2.quirksMode
          : !options2.xmlMode && caseInsensitiveAttributes.has(selector.name);
}
var attributeRules = {
    equals(next2, data2, options2) {
        const { adapter: adapter2 } = options2;
        const { name } = data2;
        let { value } = data2;
        if (shouldIgnoreCase(data2, options2)) {
            value = value.toLowerCase();
            return (elem) => {
                const attr2 = adapter2.getAttributeValue(elem, name);
                return (
                    attr2 != null &&
                    attr2.length === value.length &&
                    attr2.toLowerCase() === value &&
                    next2(elem)
                );
            };
        }
        return (elem) => adapter2.getAttributeValue(elem, name) === value && next2(elem);
    },
    hyphen(next2, data2, options2) {
        const { adapter: adapter2 } = options2;
        const { name } = data2;
        let { value } = data2;
        const len = value.length;
        if (shouldIgnoreCase(data2, options2)) {
            value = value.toLowerCase();
            return function hyphenIC(elem) {
                const attr2 = adapter2.getAttributeValue(elem, name);
                return (
                    attr2 != null &&
                    (attr2.length === len || attr2.charAt(len) === '-') &&
                    attr2.substr(0, len).toLowerCase() === value &&
                    next2(elem)
                );
            };
        }
        return function hyphen(elem) {
            const attr2 = adapter2.getAttributeValue(elem, name);
            return (
                attr2 != null &&
                (attr2.length === len || attr2.charAt(len) === '-') &&
                attr2.substr(0, len) === value &&
                next2(elem)
            );
        };
    },
    element(next2, data2, options2) {
        const { adapter: adapter2 } = options2;
        const { name, value } = data2;
        if (/\s/.test(value)) {
            return import_boolbase.default.falseFunc;
        }
        const regex = new RegExp(
            `(?:^|\\s)${escapeRegex(value)}(?:$|\\s)`,
            shouldIgnoreCase(data2, options2) ? 'i' : '',
        );
        return function element(elem) {
            const attr2 = adapter2.getAttributeValue(elem, name);
            return (
                attr2 != null && attr2.length >= value.length && regex.test(attr2) && next2(elem)
            );
        };
    },
    exists(next2, { name }, { adapter: adapter2 }) {
        return (elem) => adapter2.hasAttrib(elem, name) && next2(elem);
    },
    start(next2, data2, options2) {
        const { adapter: adapter2 } = options2;
        const { name } = data2;
        let { value } = data2;
        const len = value.length;
        if (len === 0) {
            return import_boolbase.default.falseFunc;
        }
        if (shouldIgnoreCase(data2, options2)) {
            value = value.toLowerCase();
            return (elem) => {
                const attr2 = adapter2.getAttributeValue(elem, name);
                return (
                    attr2 != null &&
                    attr2.length >= len &&
                    attr2.substr(0, len).toLowerCase() === value &&
                    next2(elem)
                );
            };
        }
        return (elem) => {
            var _a5;
            return (
                !!((_a5 = adapter2.getAttributeValue(elem, name)) === null || _a5 === void 0
                    ? void 0
                    : _a5.startsWith(value)) && next2(elem)
            );
        };
    },
    end(next2, data2, options2) {
        const { adapter: adapter2 } = options2;
        const { name } = data2;
        let { value } = data2;
        const len = -value.length;
        if (len === 0) {
            return import_boolbase.default.falseFunc;
        }
        if (shouldIgnoreCase(data2, options2)) {
            value = value.toLowerCase();
            return (elem) => {
                var _a5;
                return (
                    ((_a5 = adapter2.getAttributeValue(elem, name)) === null || _a5 === void 0
                        ? void 0
                        : _a5.substr(len).toLowerCase()) === value && next2(elem)
                );
            };
        }
        return (elem) => {
            var _a5;
            return (
                !!((_a5 = adapter2.getAttributeValue(elem, name)) === null || _a5 === void 0
                    ? void 0
                    : _a5.endsWith(value)) && next2(elem)
            );
        };
    },
    any(next2, data2, options2) {
        const { adapter: adapter2 } = options2;
        const { name, value } = data2;
        if (value === '') {
            return import_boolbase.default.falseFunc;
        }
        if (shouldIgnoreCase(data2, options2)) {
            const regex = new RegExp(escapeRegex(value), 'i');
            return function anyIC(elem) {
                const attr2 = adapter2.getAttributeValue(elem, name);
                return (
                    attr2 != null &&
                    attr2.length >= value.length &&
                    regex.test(attr2) &&
                    next2(elem)
                );
            };
        }
        return (elem) => {
            var _a5;
            return (
                !!((_a5 = adapter2.getAttributeValue(elem, name)) === null || _a5 === void 0
                    ? void 0
                    : _a5.includes(value)) && next2(elem)
            );
        };
    },
    not(next2, data2, options2) {
        const { adapter: adapter2 } = options2;
        const { name } = data2;
        let { value } = data2;
        if (value === '') {
            return (elem) => !!adapter2.getAttributeValue(elem, name) && next2(elem);
        } else if (shouldIgnoreCase(data2, options2)) {
            value = value.toLowerCase();
            return (elem) => {
                const attr2 = adapter2.getAttributeValue(elem, name);
                return (
                    (attr2 == null ||
                        attr2.length !== value.length ||
                        attr2.toLowerCase() !== value) &&
                    next2(elem)
                );
            };
        }
        return (elem) => adapter2.getAttributeValue(elem, name) !== value && next2(elem);
    },
};

// node_modules/css-select/lib/esm/pseudo-selectors/index.js
var import_css_what2 = __toESM(require_commonjs(), 1);

// node_modules/nth-check/lib/esm/parse.js
var whitespace = /* @__PURE__ */ new Set([9, 10, 12, 13, 32]);
var ZERO = '0'.charCodeAt(0);
var NINE = '9'.charCodeAt(0);
function parse(formula) {
    formula = formula.trim().toLowerCase();
    if (formula === 'even') {
        return [2, 0];
    } else if (formula === 'odd') {
        return [2, 1];
    }
    let idx = 0;
    let a = 0;
    let sign = readSign();
    let number = readNumber();
    if (idx < formula.length && formula.charAt(idx) === 'n') {
        idx++;
        a = sign * (number !== null && number !== void 0 ? number : 1);
        skipWhitespace();
        if (idx < formula.length) {
            sign = readSign();
            skipWhitespace();
            number = readNumber();
        } else {
            sign = number = 0;
        }
    }
    if (number === null || idx < formula.length) {
        throw new Error(`n-th rule couldn't be parsed ('${formula}')`);
    }
    return [a, sign * number];
    function readSign() {
        if (formula.charAt(idx) === '-') {
            idx++;
            return -1;
        }
        if (formula.charAt(idx) === '+') {
            idx++;
        }
        return 1;
    }
    function readNumber() {
        const start = idx;
        let value = 0;
        while (
            idx < formula.length &&
            formula.charCodeAt(idx) >= ZERO &&
            formula.charCodeAt(idx) <= NINE
        ) {
            value = value * 10 + (formula.charCodeAt(idx) - ZERO);
            idx++;
        }
        return idx === start ? null : value;
    }
    function skipWhitespace() {
        while (idx < formula.length && whitespace.has(formula.charCodeAt(idx))) {
            idx++;
        }
    }
}

// node_modules/nth-check/lib/esm/compile.js
var import_boolbase2 = __toESM(require_boolbase(), 1);
function compile(parsed) {
    const a = parsed[0];
    const b = parsed[1] - 1;
    if (b < 0 && a <= 0) return import_boolbase2.default.falseFunc;
    if (a === -1) return (index2) => index2 <= b;
    if (a === 0) return (index2) => index2 === b;
    if (a === 1) return b < 0 ? import_boolbase2.default.trueFunc : (index2) => index2 >= b;
    const absA = Math.abs(a);
    const bMod = ((b % absA) + absA) % absA;
    return a > 1
        ? (index2) => index2 >= b && index2 % absA === bMod
        : (index2) => index2 <= b && index2 % absA === bMod;
}

// node_modules/nth-check/lib/esm/index.js
function nthCheck(formula) {
    return compile(parse(formula));
}

// node_modules/css-select/lib/esm/pseudo-selectors/filters.js
var import_boolbase3 = __toESM(require_boolbase(), 1);
function getChildFunc(next2, adapter2) {
    return (elem) => {
        const parent2 = adapter2.getParent(elem);
        return parent2 != null && adapter2.isTag(parent2) && next2(elem);
    };
}
var filters = {
    contains(next2, text3, { adapter: adapter2 }) {
        return function contains3(elem) {
            return next2(elem) && adapter2.getText(elem).includes(text3);
        };
    },
    icontains(next2, text3, { adapter: adapter2 }) {
        const itext = text3.toLowerCase();
        return function icontains(elem) {
            return next2(elem) && adapter2.getText(elem).toLowerCase().includes(itext);
        };
    },
    // Location specific methods
    'nth-child'(next2, rule, { adapter: adapter2, equals }) {
        const func = nthCheck(rule);
        if (func === import_boolbase3.default.falseFunc) return import_boolbase3.default.falseFunc;
        if (func === import_boolbase3.default.trueFunc) return getChildFunc(next2, adapter2);
        return function nthChild(elem) {
            const siblings2 = adapter2.getSiblings(elem);
            let pos = 0;
            for (let i2 = 0; i2 < siblings2.length; i2++) {
                if (equals(elem, siblings2[i2])) break;
                if (adapter2.isTag(siblings2[i2])) {
                    pos++;
                }
            }
            return func(pos) && next2(elem);
        };
    },
    'nth-last-child'(next2, rule, { adapter: adapter2, equals }) {
        const func = nthCheck(rule);
        if (func === import_boolbase3.default.falseFunc) return import_boolbase3.default.falseFunc;
        if (func === import_boolbase3.default.trueFunc) return getChildFunc(next2, adapter2);
        return function nthLastChild(elem) {
            const siblings2 = adapter2.getSiblings(elem);
            let pos = 0;
            for (let i2 = siblings2.length - 1; i2 >= 0; i2--) {
                if (equals(elem, siblings2[i2])) break;
                if (adapter2.isTag(siblings2[i2])) {
                    pos++;
                }
            }
            return func(pos) && next2(elem);
        };
    },
    'nth-of-type'(next2, rule, { adapter: adapter2, equals }) {
        const func = nthCheck(rule);
        if (func === import_boolbase3.default.falseFunc) return import_boolbase3.default.falseFunc;
        if (func === import_boolbase3.default.trueFunc) return getChildFunc(next2, adapter2);
        return function nthOfType(elem) {
            const siblings2 = adapter2.getSiblings(elem);
            let pos = 0;
            for (let i2 = 0; i2 < siblings2.length; i2++) {
                const currentSibling = siblings2[i2];
                if (equals(elem, currentSibling)) break;
                if (
                    adapter2.isTag(currentSibling) &&
                    adapter2.getName(currentSibling) === adapter2.getName(elem)
                ) {
                    pos++;
                }
            }
            return func(pos) && next2(elem);
        };
    },
    'nth-last-of-type'(next2, rule, { adapter: adapter2, equals }) {
        const func = nthCheck(rule);
        if (func === import_boolbase3.default.falseFunc) return import_boolbase3.default.falseFunc;
        if (func === import_boolbase3.default.trueFunc) return getChildFunc(next2, adapter2);
        return function nthLastOfType(elem) {
            const siblings2 = adapter2.getSiblings(elem);
            let pos = 0;
            for (let i2 = siblings2.length - 1; i2 >= 0; i2--) {
                const currentSibling = siblings2[i2];
                if (equals(elem, currentSibling)) break;
                if (
                    adapter2.isTag(currentSibling) &&
                    adapter2.getName(currentSibling) === adapter2.getName(elem)
                ) {
                    pos++;
                }
            }
            return func(pos) && next2(elem);
        };
    },
    // TODO determine the actual root element
    root(next2, _rule, { adapter: adapter2 }) {
        return (elem) => {
            const parent2 = adapter2.getParent(elem);
            return (parent2 == null || !adapter2.isTag(parent2)) && next2(elem);
        };
    },
    scope(next2, rule, options2, context) {
        const { equals } = options2;
        if (!context || context.length === 0) {
            return filters['root'](next2, rule, options2);
        }
        if (context.length === 1) {
            return (elem) => equals(context[0], elem) && next2(elem);
        }
        return (elem) => context.includes(elem) && next2(elem);
    },
    hover: dynamicStatePseudo('isHovered'),
    visited: dynamicStatePseudo('isVisited'),
    active: dynamicStatePseudo('isActive'),
};
function dynamicStatePseudo(name) {
    return function dynamicPseudo(next2, _rule, { adapter: adapter2 }) {
        const func = adapter2[name];
        if (typeof func !== 'function') {
            return import_boolbase3.default.falseFunc;
        }
        return function active(elem) {
            return func(elem) && next2(elem);
        };
    };
}

// node_modules/css-select/lib/esm/pseudo-selectors/pseudos.js
var pseudos = {
    empty(elem, { adapter: adapter2 }) {
        return !adapter2.getChildren(elem).some(
            (elem2) =>
                // FIXME: `getText` call is potentially expensive.
                adapter2.isTag(elem2) || adapter2.getText(elem2) !== '',
        );
    },
    'first-child'(elem, { adapter: adapter2, equals }) {
        if (adapter2.prevElementSibling) {
            return adapter2.prevElementSibling(elem) == null;
        }
        const firstChild = adapter2.getSiblings(elem).find((elem2) => adapter2.isTag(elem2));
        return firstChild != null && equals(elem, firstChild);
    },
    'last-child'(elem, { adapter: adapter2, equals }) {
        const siblings2 = adapter2.getSiblings(elem);
        for (let i2 = siblings2.length - 1; i2 >= 0; i2--) {
            if (equals(elem, siblings2[i2])) return true;
            if (adapter2.isTag(siblings2[i2])) break;
        }
        return false;
    },
    'first-of-type'(elem, { adapter: adapter2, equals }) {
        const siblings2 = adapter2.getSiblings(elem);
        const elemName = adapter2.getName(elem);
        for (let i2 = 0; i2 < siblings2.length; i2++) {
            const currentSibling = siblings2[i2];
            if (equals(elem, currentSibling)) return true;
            if (adapter2.isTag(currentSibling) && adapter2.getName(currentSibling) === elemName) {
                break;
            }
        }
        return false;
    },
    'last-of-type'(elem, { adapter: adapter2, equals }) {
        const siblings2 = adapter2.getSiblings(elem);
        const elemName = adapter2.getName(elem);
        for (let i2 = siblings2.length - 1; i2 >= 0; i2--) {
            const currentSibling = siblings2[i2];
            if (equals(elem, currentSibling)) return true;
            if (adapter2.isTag(currentSibling) && adapter2.getName(currentSibling) === elemName) {
                break;
            }
        }
        return false;
    },
    'only-of-type'(elem, { adapter: adapter2, equals }) {
        const elemName = adapter2.getName(elem);
        return adapter2
            .getSiblings(elem)
            .every(
                (sibling) =>
                    equals(elem, sibling) ||
                    !adapter2.isTag(sibling) ||
                    adapter2.getName(sibling) !== elemName,
            );
    },
    'only-child'(elem, { adapter: adapter2, equals }) {
        return adapter2
            .getSiblings(elem)
            .every((sibling) => equals(elem, sibling) || !adapter2.isTag(sibling));
    },
};
function verifyPseudoArgs(func, name, subselect, argIndex) {
    if (subselect === null) {
        if (func.length > argIndex) {
            throw new Error(`Pseudo-class :${name} requires an argument`);
        }
    } else if (func.length === argIndex) {
        throw new Error(`Pseudo-class :${name} doesn't have any arguments`);
    }
}

// node_modules/css-select/lib/esm/pseudo-selectors/aliases.js
var aliases2 = {
    // Links
    'any-link': ':is(a, area, link)[href]',
    link: ':any-link:not(:visited)',
    // Forms
    // https://html.spec.whatwg.org/multipage/scripting.html#disabled-elements
    disabled: `:is(
        :is(button, input, select, textarea, optgroup, option)[disabled],
        optgroup[disabled] > option,
        fieldset[disabled]:not(fieldset[disabled] legend:first-of-type *)
    )`,
    enabled: ':not(:disabled)',
    checked: ':is(:is(input[type=radio], input[type=checkbox])[checked], option:selected)',
    required: ':is(input, select, textarea)[required]',
    optional: ':is(input, select, textarea):not([required])',
    // JQuery extensions
    // https://html.spec.whatwg.org/multipage/form-elements.html#concept-option-selectedness
    selected:
        'option:is([selected], select:not([multiple]):not(:has(> option[selected])) > :first-of-type)',
    checkbox: '[type=checkbox]',
    file: '[type=file]',
    password: '[type=password]',
    radio: '[type=radio]',
    reset: '[type=reset]',
    image: '[type=image]',
    submit: '[type=submit]',
    parent: ':not(:empty)',
    header: ':is(h1, h2, h3, h4, h5, h6)',
    button: ':is(button, input[type=button])',
    input: ':is(input, textarea, select, button)',
    text: "input:is(:not([type!='']), [type=text])",
};

// node_modules/css-select/lib/esm/pseudo-selectors/subselects.js
var import_boolbase4 = __toESM(require_boolbase(), 1);
var PLACEHOLDER_ELEMENT = {};
function ensureIsTag(next2, adapter2) {
    if (next2 === import_boolbase4.default.falseFunc) return import_boolbase4.default.falseFunc;
    return (elem) => adapter2.isTag(elem) && next2(elem);
}
function getNextSiblings(elem, adapter2) {
    const siblings2 = adapter2.getSiblings(elem);
    if (siblings2.length <= 1) return [];
    const elemIndex = siblings2.indexOf(elem);
    if (elemIndex < 0 || elemIndex === siblings2.length - 1) return [];
    return siblings2.slice(elemIndex + 1).filter(adapter2.isTag);
}
function copyOptions(options2) {
    return {
        xmlMode: !!options2.xmlMode,
        lowerCaseAttributeNames: !!options2.lowerCaseAttributeNames,
        lowerCaseTags: !!options2.lowerCaseTags,
        quirksMode: !!options2.quirksMode,
        cacheResults: !!options2.cacheResults,
        pseudos: options2.pseudos,
        adapter: options2.adapter,
        equals: options2.equals,
    };
}
var is = (next2, token, options2, context, compileToken2) => {
    const func = compileToken2(token, copyOptions(options2), context);
    return func === import_boolbase4.default.trueFunc
        ? next2
        : func === import_boolbase4.default.falseFunc
          ? import_boolbase4.default.falseFunc
          : (elem) => func(elem) && next2(elem);
};
var subselects = {
    is,
    /**
     * `:matches` and `:where` are aliases for `:is`.
     */
    matches: is,
    where: is,
    not(next2, token, options2, context, compileToken2) {
        const func = compileToken2(token, copyOptions(options2), context);
        return func === import_boolbase4.default.falseFunc
            ? next2
            : func === import_boolbase4.default.trueFunc
              ? import_boolbase4.default.falseFunc
              : (elem) => !func(elem) && next2(elem);
    },
    has(next2, subselect, options2, _context, compileToken2) {
        const { adapter: adapter2 } = options2;
        const opts = copyOptions(options2);
        opts.relativeSelector = true;
        const context = subselect.some((s2) => s2.some(isTraversal))
            ? // Used as a placeholder. Will be replaced with the actual element.
              [PLACEHOLDER_ELEMENT]
            : void 0;
        const compiled = compileToken2(subselect, opts, context);
        if (compiled === import_boolbase4.default.falseFunc)
            return import_boolbase4.default.falseFunc;
        const hasElement = ensureIsTag(compiled, adapter2);
        if (context && compiled !== import_boolbase4.default.trueFunc) {
            const { shouldTestNextSiblings = false } = compiled;
            return (elem) => {
                if (!next2(elem)) return false;
                context[0] = elem;
                const childs = adapter2.getChildren(elem);
                const nextElements = shouldTestNextSiblings
                    ? [...childs, ...getNextSiblings(elem, adapter2)]
                    : childs;
                return adapter2.existsOne(hasElement, nextElements);
            };
        }
        return (elem) => next2(elem) && adapter2.existsOne(hasElement, adapter2.getChildren(elem));
    },
};

// node_modules/css-select/lib/esm/pseudo-selectors/index.js
function compilePseudoSelector(next2, selector, options2, context, compileToken2) {
    var _a5;
    const { name, data: data2 } = selector;
    if (Array.isArray(data2)) {
        if (!(name in subselects)) {
            throw new Error(`Unknown pseudo-class :${name}(${data2})`);
        }
        return subselects[name](next2, data2, options2, context, compileToken2);
    }
    const userPseudo = (_a5 = options2.pseudos) === null || _a5 === void 0 ? void 0 : _a5[name];
    const stringPseudo = typeof userPseudo === 'string' ? userPseudo : aliases2[name];
    if (typeof stringPseudo === 'string') {
        if (data2 != null) {
            throw new Error(`Pseudo ${name} doesn't have any arguments`);
        }
        const alias = (0, import_css_what2.parse)(stringPseudo);
        return subselects['is'](next2, alias, options2, context, compileToken2);
    }
    if (typeof userPseudo === 'function') {
        verifyPseudoArgs(userPseudo, name, data2, 1);
        return (elem) => userPseudo(elem, data2) && next2(elem);
    }
    if (name in filters) {
        return filters[name](next2, data2, options2, context);
    }
    if (name in pseudos) {
        const pseudo = pseudos[name];
        verifyPseudoArgs(pseudo, name, data2, 2);
        return (elem) => pseudo(elem, options2, data2) && next2(elem);
    }
    throw new Error(`Unknown pseudo-class :${name}`);
}

// node_modules/css-select/lib/esm/general.js
var import_css_what3 = __toESM(require_commonjs(), 1);
function getElementParent(node, adapter2) {
    const parent2 = adapter2.getParent(node);
    if (parent2 && adapter2.isTag(parent2)) {
        return parent2;
    }
    return null;
}
function compileGeneralSelector(next2, selector, options2, context, compileToken2) {
    const { adapter: adapter2, equals } = options2;
    switch (selector.type) {
        case import_css_what3.SelectorType.PseudoElement: {
            throw new Error('Pseudo-elements are not supported by css-select');
        }
        case import_css_what3.SelectorType.ColumnCombinator: {
            throw new Error('Column combinators are not yet supported by css-select');
        }
        case import_css_what3.SelectorType.Attribute: {
            if (selector.namespace != null) {
                throw new Error('Namespaced attributes are not yet supported by css-select');
            }
            if (!options2.xmlMode || options2.lowerCaseAttributeNames) {
                selector.name = selector.name.toLowerCase();
            }
            return attributeRules[selector.action](next2, selector, options2);
        }
        case import_css_what3.SelectorType.Pseudo: {
            return compilePseudoSelector(next2, selector, options2, context, compileToken2);
        }
        case import_css_what3.SelectorType.Tag: {
            if (selector.namespace != null) {
                throw new Error('Namespaced tag names are not yet supported by css-select');
            }
            let { name } = selector;
            if (!options2.xmlMode || options2.lowerCaseTags) {
                name = name.toLowerCase();
            }
            return function tag(elem) {
                return adapter2.getName(elem) === name && next2(elem);
            };
        }
        case import_css_what3.SelectorType.Descendant: {
            if (options2.cacheResults === false || typeof WeakSet === 'undefined') {
                return function descendant(elem) {
                    let current = elem;
                    while ((current = getElementParent(current, adapter2))) {
                        if (next2(current)) {
                            return true;
                        }
                    }
                    return false;
                };
            }
            const isFalseCache = /* @__PURE__ */ new WeakSet();
            return function cachedDescendant(elem) {
                let current = elem;
                while ((current = getElementParent(current, adapter2))) {
                    if (!isFalseCache.has(current)) {
                        if (adapter2.isTag(current) && next2(current)) {
                            return true;
                        }
                        isFalseCache.add(current);
                    }
                }
                return false;
            };
        }
        case '_flexibleDescendant': {
            return function flexibleDescendant(elem) {
                let current = elem;
                do {
                    if (next2(current)) return true;
                } while ((current = getElementParent(current, adapter2)));
                return false;
            };
        }
        case import_css_what3.SelectorType.Parent: {
            return function parent2(elem) {
                return adapter2
                    .getChildren(elem)
                    .some((elem2) => adapter2.isTag(elem2) && next2(elem2));
            };
        }
        case import_css_what3.SelectorType.Child: {
            return function child(elem) {
                const parent2 = adapter2.getParent(elem);
                return parent2 != null && adapter2.isTag(parent2) && next2(parent2);
            };
        }
        case import_css_what3.SelectorType.Sibling: {
            return function sibling(elem) {
                const siblings2 = adapter2.getSiblings(elem);
                for (let i2 = 0; i2 < siblings2.length; i2++) {
                    const currentSibling = siblings2[i2];
                    if (equals(elem, currentSibling)) break;
                    if (adapter2.isTag(currentSibling) && next2(currentSibling)) {
                        return true;
                    }
                }
                return false;
            };
        }
        case import_css_what3.SelectorType.Adjacent: {
            if (adapter2.prevElementSibling) {
                return function adjacent(elem) {
                    const previous = adapter2.prevElementSibling(elem);
                    return previous != null && next2(previous);
                };
            }
            return function adjacent(elem) {
                const siblings2 = adapter2.getSiblings(elem);
                let lastElement;
                for (let i2 = 0; i2 < siblings2.length; i2++) {
                    const currentSibling = siblings2[i2];
                    if (equals(elem, currentSibling)) break;
                    if (adapter2.isTag(currentSibling)) {
                        lastElement = currentSibling;
                    }
                }
                return !!lastElement && next2(lastElement);
            };
        }
        case import_css_what3.SelectorType.Universal: {
            if (selector.namespace != null && selector.namespace !== '*') {
                throw new Error(
                    'Namespaced universal selectors are not yet supported by css-select',
                );
            }
            return next2;
        }
    }
}

// node_modules/css-select/lib/esm/compile.js
function compile2(selector, options2, context) {
    const next2 = compileUnsafe(selector, options2, context);
    return ensureIsTag(next2, options2.adapter);
}
function compileUnsafe(selector, options2, context) {
    const token = typeof selector === 'string' ? (0, import_css_what4.parse)(selector) : selector;
    return compileToken(token, options2, context);
}
function includesScopePseudo(t2) {
    return (
        t2.type === import_css_what4.SelectorType.Pseudo &&
        (t2.name === 'scope' ||
            (Array.isArray(t2.data) && t2.data.some((data2) => data2.some(includesScopePseudo))))
    );
}
var DESCENDANT_TOKEN = { type: import_css_what4.SelectorType.Descendant };
var FLEXIBLE_DESCENDANT_TOKEN = {
    type: '_flexibleDescendant',
};
var SCOPE_TOKEN = {
    type: import_css_what4.SelectorType.Pseudo,
    name: 'scope',
    data: null,
};
function absolutize(token, { adapter: adapter2 }, context) {
    const hasContext = !!(context === null || context === void 0
        ? void 0
        : context.every((e2) => {
              const parent2 = adapter2.isTag(e2) && adapter2.getParent(e2);
              return e2 === PLACEHOLDER_ELEMENT || (parent2 && adapter2.isTag(parent2));
          }));
    for (const t2 of token) {
        if (
            t2.length > 0 &&
            isTraversal(t2[0]) &&
            t2[0].type !== import_css_what4.SelectorType.Descendant
        ) {
        } else if (hasContext && !t2.some(includesScopePseudo)) {
            t2.unshift(DESCENDANT_TOKEN);
        } else {
            continue;
        }
        t2.unshift(SCOPE_TOKEN);
    }
}
function compileToken(token, options2, context) {
    var _a5;
    token.forEach(sortByProcedure);
    context = (_a5 = options2.context) !== null && _a5 !== void 0 ? _a5 : context;
    const isArrayContext = Array.isArray(context);
    const finalContext = context && (Array.isArray(context) ? context : [context]);
    if (options2.relativeSelector !== false) {
        absolutize(token, options2, finalContext);
    } else if (token.some((t2) => t2.length > 0 && isTraversal(t2[0]))) {
        throw new Error(
            'Relative selectors are not allowed when the `relativeSelector` option is disabled',
        );
    }
    let shouldTestNextSiblings = false;
    const query = token
        .map((rules) => {
            if (rules.length >= 2) {
                const [first2, second] = rules;
                if (
                    first2.type !== import_css_what4.SelectorType.Pseudo ||
                    first2.name !== 'scope'
                ) {
                } else if (
                    isArrayContext &&
                    second.type === import_css_what4.SelectorType.Descendant
                ) {
                    rules[1] = FLEXIBLE_DESCENDANT_TOKEN;
                } else if (
                    second.type === import_css_what4.SelectorType.Adjacent ||
                    second.type === import_css_what4.SelectorType.Sibling
                ) {
                    shouldTestNextSiblings = true;
                }
            }
            return compileRules(rules, options2, finalContext);
        })
        .reduce(reduceRules, import_boolbase5.default.falseFunc);
    query.shouldTestNextSiblings = shouldTestNextSiblings;
    return query;
}
function compileRules(rules, options2, context) {
    var _a5;
    return rules.reduce(
        (previous, rule) =>
            previous === import_boolbase5.default.falseFunc
                ? import_boolbase5.default.falseFunc
                : compileGeneralSelector(previous, rule, options2, context, compileToken),
        (_a5 = options2.rootFunc) !== null && _a5 !== void 0
            ? _a5
            : import_boolbase5.default.trueFunc,
    );
}
function reduceRules(a, b) {
    if (b === import_boolbase5.default.falseFunc || a === import_boolbase5.default.trueFunc) {
        return a;
    }
    if (a === import_boolbase5.default.falseFunc || b === import_boolbase5.default.trueFunc) {
        return b;
    }
    return function combine(elem) {
        return a(elem) || b(elem);
    };
}

// node_modules/css-select/lib/esm/index.js
var defaultEquals = (a, b) => a === b;
var defaultOptions = {
    adapter: esm_exports2,
    equals: defaultEquals,
};
function convertOptionFormats(options2) {
    var _a5, _b, _c, _d2;
    const opts = options2 !== null && options2 !== void 0 ? options2 : defaultOptions;
    (_a5 = opts.adapter) !== null && _a5 !== void 0 ? _a5 : (opts.adapter = esm_exports2);
    (_b = opts.equals) !== null && _b !== void 0
        ? _b
        : (opts.equals =
              (_d2 = (_c = opts.adapter) === null || _c === void 0 ? void 0 : _c.equals) !== null &&
              _d2 !== void 0
                  ? _d2
                  : defaultEquals);
    return opts;
}
function wrapCompile(func) {
    return function addAdapter(selector, options2, context) {
        const opts = convertOptionFormats(options2);
        return func(selector, opts, context);
    };
}
var compile3 = wrapCompile(compile2);
var _compileUnsafe = wrapCompile(compileUnsafe);
var _compileToken = wrapCompile(compileToken);
function getSelectorFunc(searchFunc) {
    return function select2(query, elements, options2) {
        const opts = convertOptionFormats(options2);
        if (typeof query !== 'function') {
            query = compileUnsafe(query, opts, elements);
        }
        const filteredElements = prepareContext(
            elements,
            opts.adapter,
            query.shouldTestNextSiblings,
        );
        return searchFunc(query, filteredElements, opts);
    };
}
function prepareContext(elems, adapter2, shouldTestNextSiblings = false) {
    if (shouldTestNextSiblings) {
        elems = appendNextSiblings(elems, adapter2);
    }
    return Array.isArray(elems) ? adapter2.removeSubsets(elems) : adapter2.getChildren(elems);
}
function appendNextSiblings(elem, adapter2) {
    const elems = Array.isArray(elem) ? elem.slice(0) : [elem];
    const elemsLength = elems.length;
    for (let i2 = 0; i2 < elemsLength; i2++) {
        const nextSiblings = getNextSiblings(elems[i2], adapter2);
        elems.push(...nextSiblings);
    }
    return elems;
}
var selectAll = getSelectorFunc((query, elems, options2) =>
    query === import_boolbase6.default.falseFunc || !elems || elems.length === 0
        ? []
        : options2.adapter.findAll(query, elems),
);
var selectOne = getSelectorFunc((query, elems, options2) =>
    query === import_boolbase6.default.falseFunc || !elems || elems.length === 0
        ? null
        : options2.adapter.findOne(query, elems),
);

// node_modules/cheerio-select/lib/esm/index.js
var boolbase7 = __toESM(require_boolbase(), 1);

// node_modules/cheerio-select/lib/esm/positionals.js
var filterNames = /* @__PURE__ */ new Set([
    'first',
    'last',
    'eq',
    'gt',
    'nth',
    'lt',
    'even',
    'odd',
]);
function isFilter(s2) {
    if (s2.type !== 'pseudo') return false;
    if (filterNames.has(s2.name)) return true;
    if (s2.name === 'not' && Array.isArray(s2.data)) {
        return s2.data.some((s3) => s3.some(isFilter));
    }
    return false;
}
function getLimit(filter4, data2, partLimit) {
    const num = data2 != null ? parseInt(data2, 10) : NaN;
    switch (filter4) {
        case 'first':
            return 1;
        case 'nth':
        case 'eq':
            return isFinite(num) ? (num >= 0 ? num + 1 : Infinity) : 0;
        case 'lt':
            return isFinite(num) ? (num >= 0 ? Math.min(num, partLimit) : Infinity) : 0;
        case 'gt':
            return isFinite(num) ? Infinity : 0;
        case 'odd':
            return 2 * partLimit;
        case 'even':
            return 2 * partLimit - 1;
        case 'last':
        case 'not':
            return Infinity;
    }
}

// node_modules/cheerio-select/lib/esm/helpers.js
function getDocumentRoot(node) {
    while (node.parent) node = node.parent;
    return node;
}
function groupSelectors(selectors) {
    const filteredSelectors = [];
    const plainSelectors = [];
    for (const selector of selectors) {
        if (selector.some(isFilter)) {
            filteredSelectors.push(selector);
        } else {
            plainSelectors.push(selector);
        }
    }
    return [plainSelectors, filteredSelectors];
}

// node_modules/cheerio-select/lib/esm/index.js
var UNIVERSAL_SELECTOR = {
    type: import_css_what5.SelectorType.Universal,
    namespace: null,
};
var SCOPE_PSEUDO = {
    type: import_css_what5.SelectorType.Pseudo,
    name: 'scope',
    data: null,
};
function is2(element, selector, options2 = {}) {
    return some([element], selector, options2);
}
function some(elements, selector, options2 = {}) {
    if (typeof selector === 'function') return elements.some(selector);
    const [plain, filtered] = groupSelectors((0, import_css_what5.parse)(selector));
    return (
        (plain.length > 0 && elements.some(_compileToken(plain, options2))) ||
        filtered.some((sel) => filterBySelector(sel, elements, options2).length > 0)
    );
}
function filterByPosition(filter4, elems, data2, options2) {
    const num = typeof data2 === 'string' ? parseInt(data2, 10) : NaN;
    switch (filter4) {
        case 'first':
        case 'lt':
            return elems;
        case 'last':
            return elems.length > 0 ? [elems[elems.length - 1]] : elems;
        case 'nth':
        case 'eq':
            return isFinite(num) && Math.abs(num) < elems.length
                ? [num < 0 ? elems[elems.length + num] : elems[num]]
                : [];
        case 'gt':
            return isFinite(num) ? elems.slice(num + 1) : [];
        case 'even':
            return elems.filter((_, i2) => i2 % 2 === 0);
        case 'odd':
            return elems.filter((_, i2) => i2 % 2 === 1);
        case 'not': {
            const filtered = new Set(filterParsed(data2, elems, options2));
            return elems.filter((e2) => !filtered.has(e2));
        }
    }
}
function filter2(selector, elements, options2 = {}) {
    return filterParsed((0, import_css_what5.parse)(selector), elements, options2);
}
function filterParsed(selector, elements, options2) {
    if (elements.length === 0) return [];
    const [plainSelectors, filteredSelectors] = groupSelectors(selector);
    let found;
    if (plainSelectors.length) {
        const filtered = filterElements(elements, plainSelectors, options2);
        if (filteredSelectors.length === 0) {
            return filtered;
        }
        if (filtered.length) {
            found = new Set(filtered);
        }
    }
    for (
        let i2 = 0;
        i2 < filteredSelectors.length &&
        (found === null || found === void 0 ? void 0 : found.size) !== elements.length;
        i2++
    ) {
        const filteredSelector = filteredSelectors[i2];
        const missing = found ? elements.filter((e2) => isTag2(e2) && !found.has(e2)) : elements;
        if (missing.length === 0) break;
        const filtered = filterBySelector(filteredSelector, elements, options2);
        if (filtered.length) {
            if (!found) {
                if (i2 === filteredSelectors.length - 1) {
                    return filtered;
                }
                found = new Set(filtered);
            } else {
                filtered.forEach((el) => found.add(el));
            }
        }
    }
    return typeof found !== 'undefined'
        ? found.size === elements.length
            ? elements
            : // Filter elements to preserve order
              elements.filter((el) => found.has(el))
        : [];
}
function filterBySelector(selector, elements, options2) {
    var _a5;
    if (selector.some(import_css_what5.isTraversal)) {
        const root3 =
            (_a5 = options2.root) !== null && _a5 !== void 0 ? _a5 : getDocumentRoot(elements[0]);
        const opts = { ...options2, context: elements, relativeSelector: false };
        selector.push(SCOPE_PSEUDO);
        return findFilterElements(root3, selector, opts, true, elements.length);
    }
    return findFilterElements(elements, selector, options2, false, elements.length);
}
function select(selector, root3, options2 = {}, limit = Infinity) {
    if (typeof selector === 'function') {
        return find2(root3, selector);
    }
    const [plain, filtered] = groupSelectors((0, import_css_what5.parse)(selector));
    const results = filtered.map((sel) => findFilterElements(root3, sel, options2, true, limit));
    if (plain.length) {
        results.push(findElements(root3, plain, options2, limit));
    }
    if (results.length === 0) {
        return [];
    }
    if (results.length === 1) {
        return results[0];
    }
    return uniqueSort(results.reduce((a, b) => [...a, ...b]));
}
function findFilterElements(root3, selector, options2, queryForSelector, totalLimit) {
    const filterIndex = selector.findIndex(isFilter);
    const sub = selector.slice(0, filterIndex);
    const filter4 = selector[filterIndex];
    const partLimit = selector.length - 1 === filterIndex ? totalLimit : Infinity;
    const limit = getLimit(filter4.name, filter4.data, partLimit);
    if (limit === 0) return [];
    const elemsNoLimit =
        sub.length === 0 && !Array.isArray(root3)
            ? getChildren(root3).filter(isTag2)
            : sub.length === 0
              ? (Array.isArray(root3) ? root3 : [root3]).filter(isTag2)
              : queryForSelector || sub.some(import_css_what5.isTraversal)
                ? findElements(root3, [sub], options2, limit)
                : filterElements(root3, [sub], options2);
    const elems = elemsNoLimit.slice(0, limit);
    let result = filterByPosition(filter4.name, elems, filter4.data, options2);
    if (result.length === 0 || selector.length === filterIndex + 1) {
        return result;
    }
    const remainingSelector = selector.slice(filterIndex + 1);
    const remainingHasTraversal = remainingSelector.some(import_css_what5.isTraversal);
    if (remainingHasTraversal) {
        if ((0, import_css_what5.isTraversal)(remainingSelector[0])) {
            const { type } = remainingSelector[0];
            if (
                type === import_css_what5.SelectorType.Sibling ||
                type === import_css_what5.SelectorType.Adjacent
            ) {
                result = prepareContext(result, esm_exports2, true);
            }
            remainingSelector.unshift(UNIVERSAL_SELECTOR);
        }
        options2 = {
            ...options2,
            // Avoid absolutizing the selector
            relativeSelector: false,
            /*
             * Add a custom root func, to make sure traversals don't match elements
             * that aren't a part of the considered tree.
             */
            rootFunc: (el) => result.includes(el),
        };
    } else if (options2.rootFunc && options2.rootFunc !== boolbase7.trueFunc) {
        options2 = { ...options2, rootFunc: boolbase7.trueFunc };
    }
    return remainingSelector.some(isFilter)
        ? findFilterElements(result, remainingSelector, options2, false, totalLimit)
        : remainingHasTraversal
          ? // Query existing elements to resolve traversal.
            findElements(result, [remainingSelector], options2, totalLimit)
          : // If we don't have any more traversals, simply filter elements.
            filterElements(result, [remainingSelector], options2);
}
function findElements(root3, sel, options2, limit) {
    const query = _compileToken(sel, options2, root3);
    return find2(root3, query, limit);
}
function find2(root3, query, limit = Infinity) {
    const elems = prepareContext(root3, esm_exports2, query.shouldTestNextSiblings);
    return find((node) => isTag2(node) && query(node), elems, true, limit);
}
function filterElements(elements, sel, options2) {
    const els = (Array.isArray(elements) ? elements : [elements]).filter(isTag2);
    if (els.length === 0) return els;
    const query = _compileToken(sel, options2);
    return query === boolbase7.trueFunc ? els : els.filter(query);
}

// node_modules/cheerio/lib/esm/api/traversing.js
var reSiblingSelector = /^\s*[~+]/;
function find3(selectorOrHaystack) {
    var _a5;
    if (!selectorOrHaystack) {
        return this._make([]);
    }
    const context = this.toArray();
    if (typeof selectorOrHaystack !== 'string') {
        const haystack = isCheerio(selectorOrHaystack)
            ? selectorOrHaystack.toArray()
            : [selectorOrHaystack];
        return this._make(haystack.filter((elem) => context.some((node) => contains(node, elem))));
    }
    const elems = reSiblingSelector.test(selectorOrHaystack) ? context : this.children().toArray();
    const options2 = {
        context,
        root: (_a5 = this._root) === null || _a5 === void 0 ? void 0 : _a5[0],
        // Pass options that are recognized by `cheerio-select`
        xmlMode: this.options.xmlMode,
        lowerCaseTags: this.options.lowerCaseTags,
        lowerCaseAttributeNames: this.options.lowerCaseAttributeNames,
        pseudos: this.options.pseudos,
        quirksMode: this.options.quirksMode,
    };
    return this._make(select(selectorOrHaystack, elems, options2));
}
function _getMatcher(matchMap) {
    return function (fn, ...postFns) {
        return function (selector) {
            var _a5;
            let matched = matchMap(fn, this);
            if (selector) {
                matched = filterArray(
                    matched,
                    selector,
                    this.options.xmlMode,
                    (_a5 = this._root) === null || _a5 === void 0 ? void 0 : _a5[0],
                );
            }
            return this._make(
                // Post processing is only necessary if there is more than one element.
                this.length > 1 && matched.length > 1
                    ? postFns.reduce((elems, fn2) => fn2(elems), matched)
                    : matched,
            );
        };
    };
}
var _matcher = _getMatcher((fn, elems) => {
    const ret = [];
    for (let i2 = 0; i2 < elems.length; i2++) {
        const value = fn(elems[i2]);
        ret.push(value);
    }
    return new Array().concat(...ret);
});
var _singleMatcher = _getMatcher((fn, elems) => {
    const ret = [];
    for (let i2 = 0; i2 < elems.length; i2++) {
        const value = fn(elems[i2]);
        if (value !== null) {
            ret.push(value);
        }
    }
    return ret;
});
function _matchUntil(nextElem, ...postFns) {
    let matches = null;
    const innerMatcher = _getMatcher((nextElem2, elems) => {
        const matched = [];
        domEach(elems, (elem) => {
            for (let next2; (next2 = nextElem2(elem)); elem = next2) {
                if (
                    matches === null || matches === void 0 ? void 0 : matches(next2, matched.length)
                )
                    break;
                matched.push(next2);
            }
        });
        return matched;
    })(nextElem, ...postFns);
    return function (selector, filterSelector) {
        matches =
            typeof selector === 'string'
                ? (elem) => is2(elem, selector, this.options)
                : selector
                  ? getFilterFn(selector)
                  : null;
        const ret = innerMatcher.call(this, filterSelector);
        matches = null;
        return ret;
    };
}
function _removeDuplicates(elems) {
    return Array.from(new Set(elems));
}
var parent = _singleMatcher(
    ({ parent: parent2 }) => (parent2 && !isDocument(parent2) ? parent2 : null),
    _removeDuplicates,
);
var parents = _matcher(
    (elem) => {
        const matched = [];
        while (elem.parent && !isDocument(elem.parent)) {
            matched.push(elem.parent);
            elem = elem.parent;
        }
        return matched;
    },
    uniqueSort,
    (elems) => elems.reverse(),
);
var parentsUntil = _matchUntil(
    ({ parent: parent2 }) => (parent2 && !isDocument(parent2) ? parent2 : null),
    uniqueSort,
    (elems) => elems.reverse(),
);
function closest(selector) {
    var _a5;
    const set = [];
    if (!selector) {
        return this._make(set);
    }
    const selectOpts = {
        xmlMode: this.options.xmlMode,
        root: (_a5 = this._root) === null || _a5 === void 0 ? void 0 : _a5[0],
    };
    const selectFn =
        typeof selector === 'string'
            ? (elem) => is2(elem, selector, selectOpts)
            : getFilterFn(selector);
    domEach(this, (elem) => {
        while (elem && isTag2(elem)) {
            if (selectFn(elem, 0)) {
                if (!set.includes(elem)) {
                    set.push(elem);
                }
                break;
            }
            elem = elem.parent;
        }
    });
    return this._make(set);
}
var next = _singleMatcher((elem) => nextElementSibling(elem));
var nextAll = _matcher((elem) => {
    const matched = [];
    while (elem.next) {
        elem = elem.next;
        if (isTag2(elem)) matched.push(elem);
    }
    return matched;
}, _removeDuplicates);
var nextUntil = _matchUntil((el) => nextElementSibling(el), _removeDuplicates);
var prev = _singleMatcher((elem) => prevElementSibling(elem));
var prevAll = _matcher((elem) => {
    const matched = [];
    while (elem.prev) {
        elem = elem.prev;
        if (isTag2(elem)) matched.push(elem);
    }
    return matched;
}, _removeDuplicates);
var prevUntil = _matchUntil((el) => prevElementSibling(el), _removeDuplicates);
var siblings = _matcher(
    (elem) => getSiblings(elem).filter((el) => isTag2(el) && el !== elem),
    uniqueSort,
);
var children = _matcher((elem) => getChildren(elem).filter(isTag2), _removeDuplicates);
function contents() {
    const elems = this.toArray().reduce(
        (newElems, elem) => (hasChildren(elem) ? newElems.concat(elem.children) : newElems),
        [],
    );
    return this._make(elems);
}
function each(fn) {
    let i2 = 0;
    const len = this.length;
    while (i2 < len && fn.call(this[i2], i2, this[i2]) !== false) ++i2;
    return this;
}
function map(fn) {
    let elems = [];
    for (let i2 = 0; i2 < this.length; i2++) {
        const el = this[i2];
        const val2 = fn.call(el, i2, el);
        if (val2 != null) {
            elems = elems.concat(val2);
        }
    }
    return this._make(elems);
}
function getFilterFn(match) {
    if (typeof match === 'function') {
        return (el, i2) => match.call(el, i2, el);
    }
    if (isCheerio(match)) {
        return (el) => Array.prototype.includes.call(match, el);
    }
    return function (el) {
        return match === el;
    };
}
function filter3(match) {
    var _a5;
    return this._make(
        filterArray(
            this.toArray(),
            match,
            this.options.xmlMode,
            (_a5 = this._root) === null || _a5 === void 0 ? void 0 : _a5[0],
        ),
    );
}
function filterArray(nodes, match, xmlMode, root3) {
    return typeof match === 'string'
        ? filter2(match, nodes, { xmlMode, root: root3 })
        : nodes.filter(getFilterFn(match));
}
function is3(selector) {
    const nodes = this.toArray();
    return typeof selector === 'string'
        ? some(nodes.filter(isTag2), selector, this.options)
        : selector
          ? nodes.some(getFilterFn(selector))
          : false;
}
function not(match) {
    let nodes = this.toArray();
    if (typeof match === 'string') {
        const matches = new Set(filter2(match, nodes, this.options));
        nodes = nodes.filter((el) => !matches.has(el));
    } else {
        const filterFn = getFilterFn(match);
        nodes = nodes.filter((el, i2) => !filterFn(el, i2));
    }
    return this._make(nodes);
}
function has(selectorOrHaystack) {
    return this.filter(
        typeof selectorOrHaystack === 'string'
            ? // Using the `:has` selector here short-circuits searches.
              `:has(${selectorOrHaystack})`
            : (_, el) => this._make(el).find(selectorOrHaystack).length > 0,
    );
}
function first() {
    return this.length > 1 ? this._make(this[0]) : this;
}
function last() {
    return this.length > 0 ? this._make(this[this.length - 1]) : this;
}
function eq(i2) {
    var _a5;
    i2 = +i2;
    if (i2 === 0 && this.length <= 1) return this;
    if (i2 < 0) i2 = this.length + i2;
    return this._make((_a5 = this[i2]) !== null && _a5 !== void 0 ? _a5 : []);
}
function get(i2) {
    if (i2 == null) {
        return this.toArray();
    }
    return this[i2 < 0 ? this.length + i2 : i2];
}
function toArray() {
    return Array.prototype.slice.call(this);
}
function index(selectorOrNeedle) {
    let $haystack;
    let needle;
    if (selectorOrNeedle == null) {
        $haystack = this.parent().children();
        needle = this[0];
    } else if (typeof selectorOrNeedle === 'string') {
        $haystack = this._make(selectorOrNeedle);
        needle = this[0];
    } else {
        $haystack = this;
        needle = isCheerio(selectorOrNeedle) ? selectorOrNeedle[0] : selectorOrNeedle;
    }
    return Array.prototype.indexOf.call($haystack, needle);
}
function slice(start, end2) {
    return this._make(Array.prototype.slice.call(this, start, end2));
}
function end() {
    var _a5;
    return (_a5 = this.prevObject) !== null && _a5 !== void 0 ? _a5 : this._make([]);
}
function add(other, context) {
    const selection = this._make(other, context);
    const contents2 = uniqueSort([...this.get(), ...selection.get()]);
    return this._make(contents2);
}
function addBack(selector) {
    return this.prevObject
        ? this.add(selector ? this.prevObject.filter(selector) : this.prevObject)
        : this;
}

// node_modules/cheerio/lib/esm/api/manipulation.js
var manipulation_exports = {};
__export(manipulation_exports, {
    _makeDomArray: () => _makeDomArray,
    after: () => after,
    append: () => append2,
    appendTo: () => appendTo,
    before: () => before,
    clone: () => clone2,
    empty: () => empty,
    html: () => html2,
    insertAfter: () => insertAfter,
    insertBefore: () => insertBefore,
    prepend: () => prepend2,
    prependTo: () => prependTo,
    remove: () => remove,
    replaceWith: () => replaceWith,
    text: () => text2,
    toString: () => toString,
    unwrap: () => unwrap,
    wrap: () => wrap,
    wrapAll: () => wrapAll,
    wrapInner: () => wrapInner,
});

// node_modules/cheerio/lib/esm/parse.js
function getParse(parser) {
    return function parse8(content, options2, isDocument2, context) {
        if (typeof Buffer !== 'undefined' && Buffer.isBuffer(content)) {
            content = content.toString();
        }
        if (typeof content === 'string') {
            return parser(content, options2, isDocument2, context);
        }
        const doc = content;
        if (!Array.isArray(doc) && isDocument(doc)) {
            return doc;
        }
        const root3 = new Document([]);
        update(doc, root3);
        return root3;
    };
}
function update(newChilds, parent2) {
    const arr = Array.isArray(newChilds) ? newChilds : [newChilds];
    if (parent2) {
        parent2.children = arr;
    } else {
        parent2 = null;
    }
    for (let i2 = 0; i2 < arr.length; i2++) {
        const node = arr[i2];
        if (node.parent && node.parent.children !== arr) {
            removeElement(node);
        }
        if (parent2) {
            node.prev = arr[i2 - 1] || null;
            node.next = arr[i2 + 1] || null;
        } else {
            node.prev = node.next = null;
        }
        node.parent = parent2;
    }
    return parent2;
}

// node_modules/cheerio/lib/esm/api/manipulation.js
function _makeDomArray(elem, clone3) {
    if (elem == null) {
        return [];
    }
    if (isCheerio(elem)) {
        return clone3 ? cloneDom(elem.get()) : elem.get();
    }
    if (Array.isArray(elem)) {
        return elem.reduce((newElems, el) => newElems.concat(this._makeDomArray(el, clone3)), []);
    }
    if (typeof elem === 'string') {
        return this._parse(elem, this.options, false, null).children;
    }
    return clone3 ? cloneDom([elem]) : [elem];
}
function _insert(concatenator) {
    return function (...elems) {
        const lastIdx = this.length - 1;
        return domEach(this, (el, i2) => {
            if (!hasChildren(el)) return;
            const domSrc =
                typeof elems[0] === 'function'
                    ? elems[0].call(el, i2, this._render(el.children))
                    : elems;
            const dom = this._makeDomArray(domSrc, i2 < lastIdx);
            concatenator(dom, el.children, el);
        });
    };
}
function uniqueSplice(array, spliceIdx, spliceCount, newElems, parent2) {
    var _a5, _b;
    const spliceArgs = [spliceIdx, spliceCount, ...newElems];
    const prev2 = spliceIdx === 0 ? null : array[spliceIdx - 1];
    const next2 = spliceIdx + spliceCount >= array.length ? null : array[spliceIdx + spliceCount];
    for (let idx = 0; idx < newElems.length; ++idx) {
        const node = newElems[idx];
        const oldParent = node.parent;
        if (oldParent) {
            const oldSiblings = oldParent.children;
            const prevIdx = oldSiblings.indexOf(node);
            if (prevIdx > -1) {
                oldParent.children.splice(prevIdx, 1);
                if (parent2 === oldParent && spliceIdx > prevIdx) {
                    spliceArgs[0]--;
                }
            }
        }
        node.parent = parent2;
        if (node.prev) {
            node.prev.next = (_a5 = node.next) !== null && _a5 !== void 0 ? _a5 : null;
        }
        if (node.next) {
            node.next.prev = (_b = node.prev) !== null && _b !== void 0 ? _b : null;
        }
        node.prev = idx === 0 ? prev2 : newElems[idx - 1];
        node.next = idx === newElems.length - 1 ? next2 : newElems[idx + 1];
    }
    if (prev2) {
        prev2.next = newElems[0];
    }
    if (next2) {
        next2.prev = newElems[newElems.length - 1];
    }
    return array.splice(...spliceArgs);
}
function appendTo(target) {
    const appendTarget = isCheerio(target) ? target : this._make(target);
    appendTarget.append(this);
    return this;
}
function prependTo(target) {
    const prependTarget = isCheerio(target) ? target : this._make(target);
    prependTarget.prepend(this);
    return this;
}
var append2 = _insert((dom, children2, parent2) => {
    uniqueSplice(children2, children2.length, 0, dom, parent2);
});
var prepend2 = _insert((dom, children2, parent2) => {
    uniqueSplice(children2, 0, 0, dom, parent2);
});
function _wrap(insert) {
    return function (wrapper) {
        const lastIdx = this.length - 1;
        const lastParent = this.parents().last();
        for (let i2 = 0; i2 < this.length; i2++) {
            const el = this[i2];
            const wrap2 =
                typeof wrapper === 'function'
                    ? wrapper.call(el, i2, el)
                    : typeof wrapper === 'string' && !isHtml(wrapper)
                      ? lastParent.find(wrapper).clone()
                      : wrapper;
            const [wrapperDom] = this._makeDomArray(wrap2, i2 < lastIdx);
            if (!wrapperDom || !hasChildren(wrapperDom)) continue;
            let elInsertLocation = wrapperDom;
            let j = 0;
            while (j < elInsertLocation.children.length) {
                const child = elInsertLocation.children[j];
                if (isTag2(child)) {
                    elInsertLocation = child;
                    j = 0;
                } else {
                    j++;
                }
            }
            insert(el, elInsertLocation, [wrapperDom]);
        }
        return this;
    };
}
var wrap = _wrap((el, elInsertLocation, wrapperDom) => {
    const { parent: parent2 } = el;
    if (!parent2) return;
    const siblings2 = parent2.children;
    const index2 = siblings2.indexOf(el);
    update([el], elInsertLocation);
    uniqueSplice(siblings2, index2, 0, wrapperDom, parent2);
});
var wrapInner = _wrap((el, elInsertLocation, wrapperDom) => {
    if (!hasChildren(el)) return;
    update(el.children, elInsertLocation);
    update(wrapperDom, el);
});
function unwrap(selector) {
    this.parent(selector)
        .not('body')
        .each((_, el) => {
            this._make(el).replaceWith(el.children);
        });
    return this;
}
function wrapAll(wrapper) {
    const el = this[0];
    if (el) {
        const wrap2 = this._make(
            typeof wrapper === 'function' ? wrapper.call(el, 0, el) : wrapper,
        ).insertBefore(el);
        let elInsertLocation;
        for (let i2 = 0; i2 < wrap2.length; i2++) {
            if (wrap2[i2].type === 'tag') elInsertLocation = wrap2[i2];
        }
        let j = 0;
        while (elInsertLocation && j < elInsertLocation.children.length) {
            const child = elInsertLocation.children[j];
            if (child.type === 'tag') {
                elInsertLocation = child;
                j = 0;
            } else {
                j++;
            }
        }
        if (elInsertLocation) this._make(elInsertLocation).append(this);
    }
    return this;
}
function after(...elems) {
    const lastIdx = this.length - 1;
    return domEach(this, (el, i2) => {
        const { parent: parent2 } = el;
        if (!hasChildren(el) || !parent2) {
            return;
        }
        const siblings2 = parent2.children;
        const index2 = siblings2.indexOf(el);
        if (index2 < 0) return;
        const domSrc =
            typeof elems[0] === 'function'
                ? elems[0].call(el, i2, this._render(el.children))
                : elems;
        const dom = this._makeDomArray(domSrc, i2 < lastIdx);
        uniqueSplice(siblings2, index2 + 1, 0, dom, parent2);
    });
}
function insertAfter(target) {
    if (typeof target === 'string') {
        target = this._make(target);
    }
    this.remove();
    const clones = [];
    this._makeDomArray(target).forEach((el) => {
        const clonedSelf = this.clone().toArray();
        const { parent: parent2 } = el;
        if (!parent2) {
            return;
        }
        const siblings2 = parent2.children;
        const index2 = siblings2.indexOf(el);
        if (index2 < 0) return;
        uniqueSplice(siblings2, index2 + 1, 0, clonedSelf, parent2);
        clones.push(...clonedSelf);
    });
    return this._make(clones);
}
function before(...elems) {
    const lastIdx = this.length - 1;
    return domEach(this, (el, i2) => {
        const { parent: parent2 } = el;
        if (!hasChildren(el) || !parent2) {
            return;
        }
        const siblings2 = parent2.children;
        const index2 = siblings2.indexOf(el);
        if (index2 < 0) return;
        const domSrc =
            typeof elems[0] === 'function'
                ? elems[0].call(el, i2, this._render(el.children))
                : elems;
        const dom = this._makeDomArray(domSrc, i2 < lastIdx);
        uniqueSplice(siblings2, index2, 0, dom, parent2);
    });
}
function insertBefore(target) {
    const targetArr = this._make(target);
    this.remove();
    const clones = [];
    domEach(targetArr, (el) => {
        const clonedSelf = this.clone().toArray();
        const { parent: parent2 } = el;
        if (!parent2) {
            return;
        }
        const siblings2 = parent2.children;
        const index2 = siblings2.indexOf(el);
        if (index2 < 0) return;
        uniqueSplice(siblings2, index2, 0, clonedSelf, parent2);
        clones.push(...clonedSelf);
    });
    return this._make(clones);
}
function remove(selector) {
    const elems = selector ? this.filter(selector) : this;
    domEach(elems, (el) => {
        removeElement(el);
        el.prev = el.next = el.parent = null;
    });
    return this;
}
function replaceWith(content) {
    return domEach(this, (el, i2) => {
        const { parent: parent2 } = el;
        if (!parent2) {
            return;
        }
        const siblings2 = parent2.children;
        const cont = typeof content === 'function' ? content.call(el, i2, el) : content;
        const dom = this._makeDomArray(cont);
        update(dom, null);
        const index2 = siblings2.indexOf(el);
        uniqueSplice(siblings2, index2, 1, dom, parent2);
        if (!dom.includes(el)) {
            el.parent = el.prev = el.next = null;
        }
    });
}
function empty() {
    return domEach(this, (el) => {
        if (!hasChildren(el)) return;
        el.children.forEach((child) => {
            child.next = child.prev = child.parent = null;
        });
        el.children.length = 0;
    });
}
function html2(str) {
    if (str === void 0) {
        const el = this[0];
        if (!el || !hasChildren(el)) return null;
        return this._render(el.children);
    }
    return domEach(this, (el) => {
        if (!hasChildren(el)) return;
        el.children.forEach((child) => {
            child.next = child.prev = child.parent = null;
        });
        const content = isCheerio(str)
            ? str.toArray()
            : this._parse(`${str}`, this.options, false, el).children;
        update(content, el);
    });
}
function toString() {
    return this._render(this);
}
function text2(str) {
    if (str === void 0) {
        return text(this);
    }
    if (typeof str === 'function') {
        return domEach(this, (el, i2) => this._make(el).text(str.call(el, i2, text([el]))));
    }
    return domEach(this, (el) => {
        if (!hasChildren(el)) return;
        el.children.forEach((child) => {
            child.next = child.prev = child.parent = null;
        });
        const textNode = new Text2(`${str}`);
        update(textNode, el);
    });
}
function clone2() {
    return this._make(cloneDom(this.get()));
}

// node_modules/cheerio/lib/esm/api/css.js
var css_exports = {};
__export(css_exports, {
    css: () => css,
});
function css(prop2, val2) {
    if (
        (prop2 != null && val2 != null) || // When `prop` is a "plain" object
        (typeof prop2 === 'object' && !Array.isArray(prop2))
    ) {
        return domEach(this, (el, i2) => {
            if (isTag2(el)) {
                setCss(el, prop2, val2, i2);
            }
        });
    }
    if (this.length === 0) {
        return void 0;
    }
    return getCss(this[0], prop2);
}
function setCss(el, prop2, value, idx) {
    if (typeof prop2 === 'string') {
        const styles = getCss(el);
        const val2 = typeof value === 'function' ? value.call(el, idx, styles[prop2]) : value;
        if (val2 === '') {
            delete styles[prop2];
        } else if (val2 != null) {
            styles[prop2] = val2;
        }
        el.attribs['style'] = stringify(styles);
    } else if (typeof prop2 === 'object') {
        Object.keys(prop2).forEach((k, i2) => {
            setCss(el, k, prop2[k], i2);
        });
    }
}
function getCss(el, prop2) {
    if (!el || !isTag2(el)) return;
    const styles = parse5(el.attribs['style']);
    if (typeof prop2 === 'string') {
        return styles[prop2];
    }
    if (Array.isArray(prop2)) {
        const newStyles = {};
        prop2.forEach((item) => {
            if (styles[item] != null) {
                newStyles[item] = styles[item];
            }
        });
        return newStyles;
    }
    return styles;
}
function stringify(obj) {
    return Object.keys(obj).reduce(
        (str, prop2) => `${str}${str ? ' ' : ''}${prop2}: ${obj[prop2]};`,
        '',
    );
}
function parse5(styles) {
    styles = (styles || '').trim();
    if (!styles) return {};
    const obj = {};
    let key;
    for (const str of styles.split(';')) {
        const n = str.indexOf(':');
        if (n < 1 || n === str.length - 1) {
            const trimmed = str.trimEnd();
            if (trimmed.length > 0 && key !== void 0) {
                obj[key] += `;${trimmed}`;
            }
        } else {
            key = str.slice(0, n).trim();
            obj[key] = str.slice(n + 1).trim();
        }
    }
    return obj;
}

// node_modules/cheerio/lib/esm/api/forms.js
var forms_exports = {};
__export(forms_exports, {
    serialize: () => serialize,
    serializeArray: () => serializeArray,
});
var submittableSelector = 'input,select,textarea,keygen';
var r20 = /%20/g;
var rCRLF = /\r?\n/g;
function serialize() {
    const arr = this.serializeArray();
    const retArr = arr.map(
        (data2) => `${encodeURIComponent(data2.name)}=${encodeURIComponent(data2.value)}`,
    );
    return retArr.join('&').replace(r20, '+');
}
function serializeArray() {
    return this.map((_, elem) => {
        const $elem = this._make(elem);
        if (isTag2(elem) && elem.name === 'form') {
            return $elem.find(submittableSelector).toArray();
        }
        return $elem.filter(submittableSelector).toArray();
    })
        .filter(
            // Verify elements have a name (`attr.name`) and are not disabled (`:enabled`)
            '[name!=""]:enabled:not(:submit, :button, :image, :reset, :file):matches([checked], :not(:checkbox, :radio))',
            // Convert each of the elements to its value(s)
        )
        .map((_, elem) => {
            var _a5;
            const $elem = this._make(elem);
            const name = $elem.attr('name');
            const value = (_a5 = $elem.val()) !== null && _a5 !== void 0 ? _a5 : '';
            if (Array.isArray(value)) {
                return value.map((val2) =>
                    /*
                     * We trim replace any line endings (e.g. `\r` or `\r\n` with `\r\n`) to guarantee consistency across platforms
                     * These can occur inside of `<textarea>'s`
                     */
                    ({ name, value: val2.replace(rCRLF, '\r\n') }),
                );
            }
            return { name, value: value.replace(rCRLF, '\r\n') };
        })
        .toArray();
}

// node_modules/cheerio/lib/esm/cheerio.js
var Cheerio = class {
    /**
     * Instance of cheerio. Methods are specified in the modules. Usage of this
     * constructor is not recommended. Please use `$.load` instead.
     *
     * @private
     * @param elements - The new selection.
     * @param root - Sets the root node.
     * @param options - Options for the instance.
     */
    constructor(elements, root3, options2) {
        this.length = 0;
        this.options = options2;
        this._root = root3;
        if (elements) {
            for (let idx = 0; idx < elements.length; idx++) {
                this[idx] = elements[idx];
            }
            this.length = elements.length;
        }
    }
};
Cheerio.prototype.cheerio = '[cheerio object]';
Cheerio.prototype.splice = Array.prototype.splice;
Cheerio.prototype[Symbol.iterator] = Array.prototype[Symbol.iterator];
Object.assign(
    Cheerio.prototype,
    attributes_exports,
    traversing_exports,
    manipulation_exports,
    css_exports,
    forms_exports,
);

// node_modules/cheerio/lib/esm/load.js
function getLoad(parse8, render3) {
    return function load3(content, options2, isDocument2 = true) {
        if (content == null) {
            throw new Error('cheerio.load() expects a string');
        }
        const internalOpts = { ...options_default, ...flatten(options2) };
        const initialRoot = parse8(content, internalOpts, isDocument2, null);
        class LoadedCheerio extends Cheerio {
            _make(selector, context) {
                const cheerio = initialize(selector, context);
                cheerio.prevObject = this;
                return cheerio;
            }
            _parse(content2, options3, isDocument3, context) {
                return parse8(content2, options3, isDocument3, context);
            }
            _render(dom) {
                return render3(dom, this.options);
            }
        }
        function initialize(selector, context, root3 = initialRoot, opts) {
            if (selector && isCheerio(selector)) return selector;
            const options3 = {
                ...internalOpts,
                ...flatten(opts),
            };
            const r2 =
                typeof root3 === 'string'
                    ? [parse8(root3, options3, false, null)]
                    : 'length' in root3
                      ? root3
                      : [root3];
            const rootInstance = isCheerio(r2) ? r2 : new LoadedCheerio(r2, null, options3);
            rootInstance._root = rootInstance;
            if (!selector) {
                return new LoadedCheerio(void 0, rootInstance, options3);
            }
            const elements =
                typeof selector === 'string' && isHtml(selector)
                    ? // $(<html>)
                      parse8(selector, options3, false, null).children
                    : isNode(selector)
                      ? // $(dom)
                        [selector]
                      : Array.isArray(selector)
                        ? // $([dom])
                          selector
                        : void 0;
            const instance = new LoadedCheerio(elements, rootInstance, options3);
            if (elements) {
                return instance;
            }
            if (typeof selector !== 'string') {
                throw new Error('Unexpected type of selector');
            }
            let search = selector;
            const searchContext = !context
                ? // If we don't have a context, maybe we have a root, from loading
                  rootInstance
                : typeof context === 'string'
                  ? isHtml(context)
                      ? // $('li', '<ul>...</ul>')
                        new LoadedCheerio(
                            [parse8(context, options3, false, null)],
                            rootInstance,
                            options3,
                        )
                      : // $('li', 'ul')
                        ((search = `${context} ${search}`), rootInstance)
                  : isCheerio(context)
                    ? // $('li', $)
                      context
                    : // $('li', node), $('li', [nodes])
                      new LoadedCheerio(
                          Array.isArray(context) ? context : [context],
                          rootInstance,
                          options3,
                      );
            if (!searchContext) return instance;
            return searchContext.find(search);
        }
        Object.assign(initialize, static_exports, {
            load: load3,
            // `_root` and `_options` are used in static methods.
            _root: initialRoot,
            _options: internalOpts,
            // Add `fn` for plugins
            fn: LoadedCheerio.prototype,
            // Add the prototype here to maintain `instanceof` behavior.
            prototype: LoadedCheerio.prototype,
        });
        return initialize;
    };
}
function isNode(obj) {
    return !!obj.name || obj.type === 'root' || obj.type === 'text' || obj.type === 'comment';
}

// node_modules/parse5/dist/common/unicode.js
var UNDEFINED_CODE_POINTS = /* @__PURE__ */ new Set([
    65534, 65535, 131070, 131071, 196606, 196607, 262142, 262143, 327678, 327679, 393214, 393215,
    458750, 458751, 524286, 524287, 589822, 589823, 655358, 655359, 720894, 720895, 786430, 786431,
    851966, 851967, 917502, 917503, 983038, 983039, 1048574, 1048575, 1114110, 1114111,
]);
var REPLACEMENT_CHARACTER = '\uFFFD';
var CODE_POINTS;
(function (CODE_POINTS2) {
    CODE_POINTS2[(CODE_POINTS2['EOF'] = -1)] = 'EOF';
    CODE_POINTS2[(CODE_POINTS2['NULL'] = 0)] = 'NULL';
    CODE_POINTS2[(CODE_POINTS2['TABULATION'] = 9)] = 'TABULATION';
    CODE_POINTS2[(CODE_POINTS2['CARRIAGE_RETURN'] = 13)] = 'CARRIAGE_RETURN';
    CODE_POINTS2[(CODE_POINTS2['LINE_FEED'] = 10)] = 'LINE_FEED';
    CODE_POINTS2[(CODE_POINTS2['FORM_FEED'] = 12)] = 'FORM_FEED';
    CODE_POINTS2[(CODE_POINTS2['SPACE'] = 32)] = 'SPACE';
    CODE_POINTS2[(CODE_POINTS2['EXCLAMATION_MARK'] = 33)] = 'EXCLAMATION_MARK';
    CODE_POINTS2[(CODE_POINTS2['QUOTATION_MARK'] = 34)] = 'QUOTATION_MARK';
    CODE_POINTS2[(CODE_POINTS2['NUMBER_SIGN'] = 35)] = 'NUMBER_SIGN';
    CODE_POINTS2[(CODE_POINTS2['AMPERSAND'] = 38)] = 'AMPERSAND';
    CODE_POINTS2[(CODE_POINTS2['APOSTROPHE'] = 39)] = 'APOSTROPHE';
    CODE_POINTS2[(CODE_POINTS2['HYPHEN_MINUS'] = 45)] = 'HYPHEN_MINUS';
    CODE_POINTS2[(CODE_POINTS2['SOLIDUS'] = 47)] = 'SOLIDUS';
    CODE_POINTS2[(CODE_POINTS2['DIGIT_0'] = 48)] = 'DIGIT_0';
    CODE_POINTS2[(CODE_POINTS2['DIGIT_9'] = 57)] = 'DIGIT_9';
    CODE_POINTS2[(CODE_POINTS2['SEMICOLON'] = 59)] = 'SEMICOLON';
    CODE_POINTS2[(CODE_POINTS2['LESS_THAN_SIGN'] = 60)] = 'LESS_THAN_SIGN';
    CODE_POINTS2[(CODE_POINTS2['EQUALS_SIGN'] = 61)] = 'EQUALS_SIGN';
    CODE_POINTS2[(CODE_POINTS2['GREATER_THAN_SIGN'] = 62)] = 'GREATER_THAN_SIGN';
    CODE_POINTS2[(CODE_POINTS2['QUESTION_MARK'] = 63)] = 'QUESTION_MARK';
    CODE_POINTS2[(CODE_POINTS2['LATIN_CAPITAL_A'] = 65)] = 'LATIN_CAPITAL_A';
    CODE_POINTS2[(CODE_POINTS2['LATIN_CAPITAL_F'] = 70)] = 'LATIN_CAPITAL_F';
    CODE_POINTS2[(CODE_POINTS2['LATIN_CAPITAL_X'] = 88)] = 'LATIN_CAPITAL_X';
    CODE_POINTS2[(CODE_POINTS2['LATIN_CAPITAL_Z'] = 90)] = 'LATIN_CAPITAL_Z';
    CODE_POINTS2[(CODE_POINTS2['RIGHT_SQUARE_BRACKET'] = 93)] = 'RIGHT_SQUARE_BRACKET';
    CODE_POINTS2[(CODE_POINTS2['GRAVE_ACCENT'] = 96)] = 'GRAVE_ACCENT';
    CODE_POINTS2[(CODE_POINTS2['LATIN_SMALL_A'] = 97)] = 'LATIN_SMALL_A';
    CODE_POINTS2[(CODE_POINTS2['LATIN_SMALL_F'] = 102)] = 'LATIN_SMALL_F';
    CODE_POINTS2[(CODE_POINTS2['LATIN_SMALL_X'] = 120)] = 'LATIN_SMALL_X';
    CODE_POINTS2[(CODE_POINTS2['LATIN_SMALL_Z'] = 122)] = 'LATIN_SMALL_Z';
    CODE_POINTS2[(CODE_POINTS2['REPLACEMENT_CHARACTER'] = 65533)] = 'REPLACEMENT_CHARACTER';
})((CODE_POINTS = CODE_POINTS || (CODE_POINTS = {})));
var SEQUENCES = {
    DASH_DASH: '--',
    CDATA_START: '[CDATA[',
    DOCTYPE: 'doctype',
    SCRIPT: 'script',
    PUBLIC: 'public',
    SYSTEM: 'system',
};
function isSurrogate(cp) {
    return cp >= 55296 && cp <= 57343;
}
function isSurrogatePair(cp) {
    return cp >= 56320 && cp <= 57343;
}
function getSurrogatePairCodePoint(cp1, cp2) {
    return (cp1 - 55296) * 1024 + 9216 + cp2;
}
function isControlCodePoint(cp) {
    return (
        (cp !== 32 && cp !== 10 && cp !== 13 && cp !== 9 && cp !== 12 && cp >= 1 && cp <= 31) ||
        (cp >= 127 && cp <= 159)
    );
}
function isUndefinedCodePoint(cp) {
    return (cp >= 64976 && cp <= 65007) || UNDEFINED_CODE_POINTS.has(cp);
}

// node_modules/parse5/dist/common/error-codes.js
var ERR;
(function (ERR2) {
    ERR2['controlCharacterInInputStream'] = 'control-character-in-input-stream';
    ERR2['noncharacterInInputStream'] = 'noncharacter-in-input-stream';
    ERR2['surrogateInInputStream'] = 'surrogate-in-input-stream';
    ERR2['nonVoidHtmlElementStartTagWithTrailingSolidus'] =
        'non-void-html-element-start-tag-with-trailing-solidus';
    ERR2['endTagWithAttributes'] = 'end-tag-with-attributes';
    ERR2['endTagWithTrailingSolidus'] = 'end-tag-with-trailing-solidus';
    ERR2['unexpectedSolidusInTag'] = 'unexpected-solidus-in-tag';
    ERR2['unexpectedNullCharacter'] = 'unexpected-null-character';
    ERR2['unexpectedQuestionMarkInsteadOfTagName'] = 'unexpected-question-mark-instead-of-tag-name';
    ERR2['invalidFirstCharacterOfTagName'] = 'invalid-first-character-of-tag-name';
    ERR2['unexpectedEqualsSignBeforeAttributeName'] =
        'unexpected-equals-sign-before-attribute-name';
    ERR2['missingEndTagName'] = 'missing-end-tag-name';
    ERR2['unexpectedCharacterInAttributeName'] = 'unexpected-character-in-attribute-name';
    ERR2['unknownNamedCharacterReference'] = 'unknown-named-character-reference';
    ERR2['missingSemicolonAfterCharacterReference'] = 'missing-semicolon-after-character-reference';
    ERR2['unexpectedCharacterAfterDoctypeSystemIdentifier'] =
        'unexpected-character-after-doctype-system-identifier';
    ERR2['unexpectedCharacterInUnquotedAttributeValue'] =
        'unexpected-character-in-unquoted-attribute-value';
    ERR2['eofBeforeTagName'] = 'eof-before-tag-name';
    ERR2['eofInTag'] = 'eof-in-tag';
    ERR2['missingAttributeValue'] = 'missing-attribute-value';
    ERR2['missingWhitespaceBetweenAttributes'] = 'missing-whitespace-between-attributes';
    ERR2['missingWhitespaceAfterDoctypePublicKeyword'] =
        'missing-whitespace-after-doctype-public-keyword';
    ERR2['missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers'] =
        'missing-whitespace-between-doctype-public-and-system-identifiers';
    ERR2['missingWhitespaceAfterDoctypeSystemKeyword'] =
        'missing-whitespace-after-doctype-system-keyword';
    ERR2['missingQuoteBeforeDoctypePublicIdentifier'] =
        'missing-quote-before-doctype-public-identifier';
    ERR2['missingQuoteBeforeDoctypeSystemIdentifier'] =
        'missing-quote-before-doctype-system-identifier';
    ERR2['missingDoctypePublicIdentifier'] = 'missing-doctype-public-identifier';
    ERR2['missingDoctypeSystemIdentifier'] = 'missing-doctype-system-identifier';
    ERR2['abruptDoctypePublicIdentifier'] = 'abrupt-doctype-public-identifier';
    ERR2['abruptDoctypeSystemIdentifier'] = 'abrupt-doctype-system-identifier';
    ERR2['cdataInHtmlContent'] = 'cdata-in-html-content';
    ERR2['incorrectlyOpenedComment'] = 'incorrectly-opened-comment';
    ERR2['eofInScriptHtmlCommentLikeText'] = 'eof-in-script-html-comment-like-text';
    ERR2['eofInDoctype'] = 'eof-in-doctype';
    ERR2['nestedComment'] = 'nested-comment';
    ERR2['abruptClosingOfEmptyComment'] = 'abrupt-closing-of-empty-comment';
    ERR2['eofInComment'] = 'eof-in-comment';
    ERR2['incorrectlyClosedComment'] = 'incorrectly-closed-comment';
    ERR2['eofInCdata'] = 'eof-in-cdata';
    ERR2['absenceOfDigitsInNumericCharacterReference'] =
        'absence-of-digits-in-numeric-character-reference';
    ERR2['nullCharacterReference'] = 'null-character-reference';
    ERR2['surrogateCharacterReference'] = 'surrogate-character-reference';
    ERR2['characterReferenceOutsideUnicodeRange'] = 'character-reference-outside-unicode-range';
    ERR2['controlCharacterReference'] = 'control-character-reference';
    ERR2['noncharacterCharacterReference'] = 'noncharacter-character-reference';
    ERR2['missingWhitespaceBeforeDoctypeName'] = 'missing-whitespace-before-doctype-name';
    ERR2['missingDoctypeName'] = 'missing-doctype-name';
    ERR2['invalidCharacterSequenceAfterDoctypeName'] =
        'invalid-character-sequence-after-doctype-name';
    ERR2['duplicateAttribute'] = 'duplicate-attribute';
    ERR2['nonConformingDoctype'] = 'non-conforming-doctype';
    ERR2['missingDoctype'] = 'missing-doctype';
    ERR2['misplacedDoctype'] = 'misplaced-doctype';
    ERR2['endTagWithoutMatchingOpenElement'] = 'end-tag-without-matching-open-element';
    ERR2['closingOfElementWithOpenChildElements'] = 'closing-of-element-with-open-child-elements';
    ERR2['disallowedContentInNoscriptInHead'] = 'disallowed-content-in-noscript-in-head';
    ERR2['openElementsLeftAfterEof'] = 'open-elements-left-after-eof';
    ERR2['abandonedHeadElementChild'] = 'abandoned-head-element-child';
    ERR2['misplacedStartTagForHeadElement'] = 'misplaced-start-tag-for-head-element';
    ERR2['nestedNoscriptInHead'] = 'nested-noscript-in-head';
    ERR2['eofInElementThatCanContainOnlyText'] = 'eof-in-element-that-can-contain-only-text';
})((ERR = ERR || (ERR = {})));

// node_modules/parse5/dist/tokenizer/preprocessor.js
var DEFAULT_BUFFER_WATERLINE = 1 << 16;
var Preprocessor = class {
    constructor(handler) {
        this.handler = handler;
        this.html = '';
        this.pos = -1;
        this.lastGapPos = -2;
        this.gapStack = [];
        this.skipNextNewLine = false;
        this.lastChunkWritten = false;
        this.endOfChunkHit = false;
        this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;
        this.isEol = false;
        this.lineStartPos = 0;
        this.droppedBufferSize = 0;
        this.line = 1;
        this.lastErrOffset = -1;
    }
    /** The column on the current line. If we just saw a gap (eg. a surrogate pair), return the index before. */
    get col() {
        return this.pos - this.lineStartPos + Number(this.lastGapPos !== this.pos);
    }
    get offset() {
        return this.droppedBufferSize + this.pos;
    }
    getError(code) {
        const { line, col, offset } = this;
        return {
            code,
            startLine: line,
            endLine: line,
            startCol: col,
            endCol: col,
            startOffset: offset,
            endOffset: offset,
        };
    }
    _err(code) {
        if (this.handler.onParseError && this.lastErrOffset !== this.offset) {
            this.lastErrOffset = this.offset;
            this.handler.onParseError(this.getError(code));
        }
    }
    _addGap() {
        this.gapStack.push(this.lastGapPos);
        this.lastGapPos = this.pos;
    }
    _processSurrogate(cp) {
        if (this.pos !== this.html.length - 1) {
            const nextCp = this.html.charCodeAt(this.pos + 1);
            if (isSurrogatePair(nextCp)) {
                this.pos++;
                this._addGap();
                return getSurrogatePairCodePoint(cp, nextCp);
            }
        } else if (!this.lastChunkWritten) {
            this.endOfChunkHit = true;
            return CODE_POINTS.EOF;
        }
        this._err(ERR.surrogateInInputStream);
        return cp;
    }
    willDropParsedChunk() {
        return this.pos > this.bufferWaterline;
    }
    dropParsedChunk() {
        if (this.willDropParsedChunk()) {
            this.html = this.html.substring(this.pos);
            this.lineStartPos -= this.pos;
            this.droppedBufferSize += this.pos;
            this.pos = 0;
            this.lastGapPos = -2;
            this.gapStack.length = 0;
        }
    }
    write(chunk, isLastChunk) {
        if (this.html.length > 0) {
            this.html += chunk;
        } else {
            this.html = chunk;
        }
        this.endOfChunkHit = false;
        this.lastChunkWritten = isLastChunk;
    }
    insertHtmlAtCurrentPos(chunk) {
        this.html =
            this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1);
        this.endOfChunkHit = false;
    }
    startsWith(pattern, caseSensitive) {
        if (this.pos + pattern.length > this.html.length) {
            this.endOfChunkHit = !this.lastChunkWritten;
            return false;
        }
        if (caseSensitive) {
            return this.html.startsWith(pattern, this.pos);
        }
        for (let i2 = 0; i2 < pattern.length; i2++) {
            const cp = this.html.charCodeAt(this.pos + i2) | 32;
            if (cp !== pattern.charCodeAt(i2)) {
                return false;
            }
        }
        return true;
    }
    peek(offset) {
        const pos = this.pos + offset;
        if (pos >= this.html.length) {
            this.endOfChunkHit = !this.lastChunkWritten;
            return CODE_POINTS.EOF;
        }
        const code = this.html.charCodeAt(pos);
        return code === CODE_POINTS.CARRIAGE_RETURN ? CODE_POINTS.LINE_FEED : code;
    }
    advance() {
        this.pos++;
        if (this.isEol) {
            this.isEol = false;
            this.line++;
            this.lineStartPos = this.pos;
        }
        if (this.pos >= this.html.length) {
            this.endOfChunkHit = !this.lastChunkWritten;
            return CODE_POINTS.EOF;
        }
        let cp = this.html.charCodeAt(this.pos);
        if (cp === CODE_POINTS.CARRIAGE_RETURN) {
            this.isEol = true;
            this.skipNextNewLine = true;
            return CODE_POINTS.LINE_FEED;
        }
        if (cp === CODE_POINTS.LINE_FEED) {
            this.isEol = true;
            if (this.skipNextNewLine) {
                this.line--;
                this.skipNextNewLine = false;
                this._addGap();
                return this.advance();
            }
        }
        this.skipNextNewLine = false;
        if (isSurrogate(cp)) {
            cp = this._processSurrogate(cp);
        }
        const isCommonValidRange =
            this.handler.onParseError === null ||
            (cp > 31 && cp < 127) ||
            cp === CODE_POINTS.LINE_FEED ||
            cp === CODE_POINTS.CARRIAGE_RETURN ||
            (cp > 159 && cp < 64976);
        if (!isCommonValidRange) {
            this._checkForProblematicCharacters(cp);
        }
        return cp;
    }
    _checkForProblematicCharacters(cp) {
        if (isControlCodePoint(cp)) {
            this._err(ERR.controlCharacterInInputStream);
        } else if (isUndefinedCodePoint(cp)) {
            this._err(ERR.noncharacterInInputStream);
        }
    }
    retreat(count) {
        this.pos -= count;
        while (this.pos < this.lastGapPos) {
            this.lastGapPos = this.gapStack.pop();
            this.pos--;
        }
        this.isEol = false;
    }
};

// node_modules/parse5/dist/common/token.js
var TokenType;
(function (TokenType2) {
    TokenType2[(TokenType2['CHARACTER'] = 0)] = 'CHARACTER';
    TokenType2[(TokenType2['NULL_CHARACTER'] = 1)] = 'NULL_CHARACTER';
    TokenType2[(TokenType2['WHITESPACE_CHARACTER'] = 2)] = 'WHITESPACE_CHARACTER';
    TokenType2[(TokenType2['START_TAG'] = 3)] = 'START_TAG';
    TokenType2[(TokenType2['END_TAG'] = 4)] = 'END_TAG';
    TokenType2[(TokenType2['COMMENT'] = 5)] = 'COMMENT';
    TokenType2[(TokenType2['DOCTYPE'] = 6)] = 'DOCTYPE';
    TokenType2[(TokenType2['EOF'] = 7)] = 'EOF';
    TokenType2[(TokenType2['HIBERNATION'] = 8)] = 'HIBERNATION';
})((TokenType = TokenType || (TokenType = {})));
function getTokenAttr(token, attrName) {
    for (let i2 = token.attrs.length - 1; i2 >= 0; i2--) {
        if (token.attrs[i2].name === attrName) {
            return token.attrs[i2].value;
        }
    }
    return null;
}

// node_modules/parse5/dist/common/html.js
var html_exports = {};
__export(html_exports, {
    ATTRS: () => ATTRS,
    DOCUMENT_MODE: () => DOCUMENT_MODE,
    NS: () => NS,
    SPECIAL_ELEMENTS: () => SPECIAL_ELEMENTS,
    TAG_ID: () => TAG_ID,
    TAG_NAMES: () => TAG_NAMES,
    getTagID: () => getTagID,
    hasUnescapedText: () => hasUnescapedText,
    isNumberedHeader: () => isNumberedHeader,
});
var NS;
(function (NS2) {
    NS2['HTML'] = 'http://www.w3.org/1999/xhtml';
    NS2['MATHML'] = 'http://www.w3.org/1998/Math/MathML';
    NS2['SVG'] = 'http://www.w3.org/2000/svg';
    NS2['XLINK'] = 'http://www.w3.org/1999/xlink';
    NS2['XML'] = 'http://www.w3.org/XML/1998/namespace';
    NS2['XMLNS'] = 'http://www.w3.org/2000/xmlns/';
})((NS = NS || (NS = {})));
var ATTRS;
(function (ATTRS2) {
    ATTRS2['TYPE'] = 'type';
    ATTRS2['ACTION'] = 'action';
    ATTRS2['ENCODING'] = 'encoding';
    ATTRS2['PROMPT'] = 'prompt';
    ATTRS2['NAME'] = 'name';
    ATTRS2['COLOR'] = 'color';
    ATTRS2['FACE'] = 'face';
    ATTRS2['SIZE'] = 'size';
})((ATTRS = ATTRS || (ATTRS = {})));
var DOCUMENT_MODE;
(function (DOCUMENT_MODE2) {
    DOCUMENT_MODE2['NO_QUIRKS'] = 'no-quirks';
    DOCUMENT_MODE2['QUIRKS'] = 'quirks';
    DOCUMENT_MODE2['LIMITED_QUIRKS'] = 'limited-quirks';
})((DOCUMENT_MODE = DOCUMENT_MODE || (DOCUMENT_MODE = {})));
var TAG_NAMES;
(function (TAG_NAMES2) {
    TAG_NAMES2['A'] = 'a';
    TAG_NAMES2['ADDRESS'] = 'address';
    TAG_NAMES2['ANNOTATION_XML'] = 'annotation-xml';
    TAG_NAMES2['APPLET'] = 'applet';
    TAG_NAMES2['AREA'] = 'area';
    TAG_NAMES2['ARTICLE'] = 'article';
    TAG_NAMES2['ASIDE'] = 'aside';
    TAG_NAMES2['B'] = 'b';
    TAG_NAMES2['BASE'] = 'base';
    TAG_NAMES2['BASEFONT'] = 'basefont';
    TAG_NAMES2['BGSOUND'] = 'bgsound';
    TAG_NAMES2['BIG'] = 'big';
    TAG_NAMES2['BLOCKQUOTE'] = 'blockquote';
    TAG_NAMES2['BODY'] = 'body';
    TAG_NAMES2['BR'] = 'br';
    TAG_NAMES2['BUTTON'] = 'button';
    TAG_NAMES2['CAPTION'] = 'caption';
    TAG_NAMES2['CENTER'] = 'center';
    TAG_NAMES2['CODE'] = 'code';
    TAG_NAMES2['COL'] = 'col';
    TAG_NAMES2['COLGROUP'] = 'colgroup';
    TAG_NAMES2['DD'] = 'dd';
    TAG_NAMES2['DESC'] = 'desc';
    TAG_NAMES2['DETAILS'] = 'details';
    TAG_NAMES2['DIALOG'] = 'dialog';
    TAG_NAMES2['DIR'] = 'dir';
    TAG_NAMES2['DIV'] = 'div';
    TAG_NAMES2['DL'] = 'dl';
    TAG_NAMES2['DT'] = 'dt';
    TAG_NAMES2['EM'] = 'em';
    TAG_NAMES2['EMBED'] = 'embed';
    TAG_NAMES2['FIELDSET'] = 'fieldset';
    TAG_NAMES2['FIGCAPTION'] = 'figcaption';
    TAG_NAMES2['FIGURE'] = 'figure';
    TAG_NAMES2['FONT'] = 'font';
    TAG_NAMES2['FOOTER'] = 'footer';
    TAG_NAMES2['FOREIGN_OBJECT'] = 'foreignObject';
    TAG_NAMES2['FORM'] = 'form';
    TAG_NAMES2['FRAME'] = 'frame';
    TAG_NAMES2['FRAMESET'] = 'frameset';
    TAG_NAMES2['H1'] = 'h1';
    TAG_NAMES2['H2'] = 'h2';
    TAG_NAMES2['H3'] = 'h3';
    TAG_NAMES2['H4'] = 'h4';
    TAG_NAMES2['H5'] = 'h5';
    TAG_NAMES2['H6'] = 'h6';
    TAG_NAMES2['HEAD'] = 'head';
    TAG_NAMES2['HEADER'] = 'header';
    TAG_NAMES2['HGROUP'] = 'hgroup';
    TAG_NAMES2['HR'] = 'hr';
    TAG_NAMES2['HTML'] = 'html';
    TAG_NAMES2['I'] = 'i';
    TAG_NAMES2['IMG'] = 'img';
    TAG_NAMES2['IMAGE'] = 'image';
    TAG_NAMES2['INPUT'] = 'input';
    TAG_NAMES2['IFRAME'] = 'iframe';
    TAG_NAMES2['KEYGEN'] = 'keygen';
    TAG_NAMES2['LABEL'] = 'label';
    TAG_NAMES2['LI'] = 'li';
    TAG_NAMES2['LINK'] = 'link';
    TAG_NAMES2['LISTING'] = 'listing';
    TAG_NAMES2['MAIN'] = 'main';
    TAG_NAMES2['MALIGNMARK'] = 'malignmark';
    TAG_NAMES2['MARQUEE'] = 'marquee';
    TAG_NAMES2['MATH'] = 'math';
    TAG_NAMES2['MENU'] = 'menu';
    TAG_NAMES2['META'] = 'meta';
    TAG_NAMES2['MGLYPH'] = 'mglyph';
    TAG_NAMES2['MI'] = 'mi';
    TAG_NAMES2['MO'] = 'mo';
    TAG_NAMES2['MN'] = 'mn';
    TAG_NAMES2['MS'] = 'ms';
    TAG_NAMES2['MTEXT'] = 'mtext';
    TAG_NAMES2['NAV'] = 'nav';
    TAG_NAMES2['NOBR'] = 'nobr';
    TAG_NAMES2['NOFRAMES'] = 'noframes';
    TAG_NAMES2['NOEMBED'] = 'noembed';
    TAG_NAMES2['NOSCRIPT'] = 'noscript';
    TAG_NAMES2['OBJECT'] = 'object';
    TAG_NAMES2['OL'] = 'ol';
    TAG_NAMES2['OPTGROUP'] = 'optgroup';
    TAG_NAMES2['OPTION'] = 'option';
    TAG_NAMES2['P'] = 'p';
    TAG_NAMES2['PARAM'] = 'param';
    TAG_NAMES2['PLAINTEXT'] = 'plaintext';
    TAG_NAMES2['PRE'] = 'pre';
    TAG_NAMES2['RB'] = 'rb';
    TAG_NAMES2['RP'] = 'rp';
    TAG_NAMES2['RT'] = 'rt';
    TAG_NAMES2['RTC'] = 'rtc';
    TAG_NAMES2['RUBY'] = 'ruby';
    TAG_NAMES2['S'] = 's';
    TAG_NAMES2['SCRIPT'] = 'script';
    TAG_NAMES2['SECTION'] = 'section';
    TAG_NAMES2['SELECT'] = 'select';
    TAG_NAMES2['SOURCE'] = 'source';
    TAG_NAMES2['SMALL'] = 'small';
    TAG_NAMES2['SPAN'] = 'span';
    TAG_NAMES2['STRIKE'] = 'strike';
    TAG_NAMES2['STRONG'] = 'strong';
    TAG_NAMES2['STYLE'] = 'style';
    TAG_NAMES2['SUB'] = 'sub';
    TAG_NAMES2['SUMMARY'] = 'summary';
    TAG_NAMES2['SUP'] = 'sup';
    TAG_NAMES2['TABLE'] = 'table';
    TAG_NAMES2['TBODY'] = 'tbody';
    TAG_NAMES2['TEMPLATE'] = 'template';
    TAG_NAMES2['TEXTAREA'] = 'textarea';
    TAG_NAMES2['TFOOT'] = 'tfoot';
    TAG_NAMES2['TD'] = 'td';
    TAG_NAMES2['TH'] = 'th';
    TAG_NAMES2['THEAD'] = 'thead';
    TAG_NAMES2['TITLE'] = 'title';
    TAG_NAMES2['TR'] = 'tr';
    TAG_NAMES2['TRACK'] = 'track';
    TAG_NAMES2['TT'] = 'tt';
    TAG_NAMES2['U'] = 'u';
    TAG_NAMES2['UL'] = 'ul';
    TAG_NAMES2['SVG'] = 'svg';
    TAG_NAMES2['VAR'] = 'var';
    TAG_NAMES2['WBR'] = 'wbr';
    TAG_NAMES2['XMP'] = 'xmp';
})((TAG_NAMES = TAG_NAMES || (TAG_NAMES = {})));
var TAG_ID;
(function (TAG_ID2) {
    TAG_ID2[(TAG_ID2['UNKNOWN'] = 0)] = 'UNKNOWN';
    TAG_ID2[(TAG_ID2['A'] = 1)] = 'A';
    TAG_ID2[(TAG_ID2['ADDRESS'] = 2)] = 'ADDRESS';
    TAG_ID2[(TAG_ID2['ANNOTATION_XML'] = 3)] = 'ANNOTATION_XML';
    TAG_ID2[(TAG_ID2['APPLET'] = 4)] = 'APPLET';
    TAG_ID2[(TAG_ID2['AREA'] = 5)] = 'AREA';
    TAG_ID2[(TAG_ID2['ARTICLE'] = 6)] = 'ARTICLE';
    TAG_ID2[(TAG_ID2['ASIDE'] = 7)] = 'ASIDE';
    TAG_ID2[(TAG_ID2['B'] = 8)] = 'B';
    TAG_ID2[(TAG_ID2['BASE'] = 9)] = 'BASE';
    TAG_ID2[(TAG_ID2['BASEFONT'] = 10)] = 'BASEFONT';
    TAG_ID2[(TAG_ID2['BGSOUND'] = 11)] = 'BGSOUND';
    TAG_ID2[(TAG_ID2['BIG'] = 12)] = 'BIG';
    TAG_ID2[(TAG_ID2['BLOCKQUOTE'] = 13)] = 'BLOCKQUOTE';
    TAG_ID2[(TAG_ID2['BODY'] = 14)] = 'BODY';
    TAG_ID2[(TAG_ID2['BR'] = 15)] = 'BR';
    TAG_ID2[(TAG_ID2['BUTTON'] = 16)] = 'BUTTON';
    TAG_ID2[(TAG_ID2['CAPTION'] = 17)] = 'CAPTION';
    TAG_ID2[(TAG_ID2['CENTER'] = 18)] = 'CENTER';
    TAG_ID2[(TAG_ID2['CODE'] = 19)] = 'CODE';
    TAG_ID2[(TAG_ID2['COL'] = 20)] = 'COL';
    TAG_ID2[(TAG_ID2['COLGROUP'] = 21)] = 'COLGROUP';
    TAG_ID2[(TAG_ID2['DD'] = 22)] = 'DD';
    TAG_ID2[(TAG_ID2['DESC'] = 23)] = 'DESC';
    TAG_ID2[(TAG_ID2['DETAILS'] = 24)] = 'DETAILS';
    TAG_ID2[(TAG_ID2['DIALOG'] = 25)] = 'DIALOG';
    TAG_ID2[(TAG_ID2['DIR'] = 26)] = 'DIR';
    TAG_ID2[(TAG_ID2['DIV'] = 27)] = 'DIV';
    TAG_ID2[(TAG_ID2['DL'] = 28)] = 'DL';
    TAG_ID2[(TAG_ID2['DT'] = 29)] = 'DT';
    TAG_ID2[(TAG_ID2['EM'] = 30)] = 'EM';
    TAG_ID2[(TAG_ID2['EMBED'] = 31)] = 'EMBED';
    TAG_ID2[(TAG_ID2['FIELDSET'] = 32)] = 'FIELDSET';
    TAG_ID2[(TAG_ID2['FIGCAPTION'] = 33)] = 'FIGCAPTION';
    TAG_ID2[(TAG_ID2['FIGURE'] = 34)] = 'FIGURE';
    TAG_ID2[(TAG_ID2['FONT'] = 35)] = 'FONT';
    TAG_ID2[(TAG_ID2['FOOTER'] = 36)] = 'FOOTER';
    TAG_ID2[(TAG_ID2['FOREIGN_OBJECT'] = 37)] = 'FOREIGN_OBJECT';
    TAG_ID2[(TAG_ID2['FORM'] = 38)] = 'FORM';
    TAG_ID2[(TAG_ID2['FRAME'] = 39)] = 'FRAME';
    TAG_ID2[(TAG_ID2['FRAMESET'] = 40)] = 'FRAMESET';
    TAG_ID2[(TAG_ID2['H1'] = 41)] = 'H1';
    TAG_ID2[(TAG_ID2['H2'] = 42)] = 'H2';
    TAG_ID2[(TAG_ID2['H3'] = 43)] = 'H3';
    TAG_ID2[(TAG_ID2['H4'] = 44)] = 'H4';
    TAG_ID2[(TAG_ID2['H5'] = 45)] = 'H5';
    TAG_ID2[(TAG_ID2['H6'] = 46)] = 'H6';
    TAG_ID2[(TAG_ID2['HEAD'] = 47)] = 'HEAD';
    TAG_ID2[(TAG_ID2['HEADER'] = 48)] = 'HEADER';
    TAG_ID2[(TAG_ID2['HGROUP'] = 49)] = 'HGROUP';
    TAG_ID2[(TAG_ID2['HR'] = 50)] = 'HR';
    TAG_ID2[(TAG_ID2['HTML'] = 51)] = 'HTML';
    TAG_ID2[(TAG_ID2['I'] = 52)] = 'I';
    TAG_ID2[(TAG_ID2['IMG'] = 53)] = 'IMG';
    TAG_ID2[(TAG_ID2['IMAGE'] = 54)] = 'IMAGE';
    TAG_ID2[(TAG_ID2['INPUT'] = 55)] = 'INPUT';
    TAG_ID2[(TAG_ID2['IFRAME'] = 56)] = 'IFRAME';
    TAG_ID2[(TAG_ID2['KEYGEN'] = 57)] = 'KEYGEN';
    TAG_ID2[(TAG_ID2['LABEL'] = 58)] = 'LABEL';
    TAG_ID2[(TAG_ID2['LI'] = 59)] = 'LI';
    TAG_ID2[(TAG_ID2['LINK'] = 60)] = 'LINK';
    TAG_ID2[(TAG_ID2['LISTING'] = 61)] = 'LISTING';
    TAG_ID2[(TAG_ID2['MAIN'] = 62)] = 'MAIN';
    TAG_ID2[(TAG_ID2['MALIGNMARK'] = 63)] = 'MALIGNMARK';
    TAG_ID2[(TAG_ID2['MARQUEE'] = 64)] = 'MARQUEE';
    TAG_ID2[(TAG_ID2['MATH'] = 65)] = 'MATH';
    TAG_ID2[(TAG_ID2['MENU'] = 66)] = 'MENU';
    TAG_ID2[(TAG_ID2['META'] = 67)] = 'META';
    TAG_ID2[(TAG_ID2['MGLYPH'] = 68)] = 'MGLYPH';
    TAG_ID2[(TAG_ID2['MI'] = 69)] = 'MI';
    TAG_ID2[(TAG_ID2['MO'] = 70)] = 'MO';
    TAG_ID2[(TAG_ID2['MN'] = 71)] = 'MN';
    TAG_ID2[(TAG_ID2['MS'] = 72)] = 'MS';
    TAG_ID2[(TAG_ID2['MTEXT'] = 73)] = 'MTEXT';
    TAG_ID2[(TAG_ID2['NAV'] = 74)] = 'NAV';
    TAG_ID2[(TAG_ID2['NOBR'] = 75)] = 'NOBR';
    TAG_ID2[(TAG_ID2['NOFRAMES'] = 76)] = 'NOFRAMES';
    TAG_ID2[(TAG_ID2['NOEMBED'] = 77)] = 'NOEMBED';
    TAG_ID2[(TAG_ID2['NOSCRIPT'] = 78)] = 'NOSCRIPT';
    TAG_ID2[(TAG_ID2['OBJECT'] = 79)] = 'OBJECT';
    TAG_ID2[(TAG_ID2['OL'] = 80)] = 'OL';
    TAG_ID2[(TAG_ID2['OPTGROUP'] = 81)] = 'OPTGROUP';
    TAG_ID2[(TAG_ID2['OPTION'] = 82)] = 'OPTION';
    TAG_ID2[(TAG_ID2['P'] = 83)] = 'P';
    TAG_ID2[(TAG_ID2['PARAM'] = 84)] = 'PARAM';
    TAG_ID2[(TAG_ID2['PLAINTEXT'] = 85)] = 'PLAINTEXT';
    TAG_ID2[(TAG_ID2['PRE'] = 86)] = 'PRE';
    TAG_ID2[(TAG_ID2['RB'] = 87)] = 'RB';
    TAG_ID2[(TAG_ID2['RP'] = 88)] = 'RP';
    TAG_ID2[(TAG_ID2['RT'] = 89)] = 'RT';
    TAG_ID2[(TAG_ID2['RTC'] = 90)] = 'RTC';
    TAG_ID2[(TAG_ID2['RUBY'] = 91)] = 'RUBY';
    TAG_ID2[(TAG_ID2['S'] = 92)] = 'S';
    TAG_ID2[(TAG_ID2['SCRIPT'] = 93)] = 'SCRIPT';
    TAG_ID2[(TAG_ID2['SECTION'] = 94)] = 'SECTION';
    TAG_ID2[(TAG_ID2['SELECT'] = 95)] = 'SELECT';
    TAG_ID2[(TAG_ID2['SOURCE'] = 96)] = 'SOURCE';
    TAG_ID2[(TAG_ID2['SMALL'] = 97)] = 'SMALL';
    TAG_ID2[(TAG_ID2['SPAN'] = 98)] = 'SPAN';
    TAG_ID2[(TAG_ID2['STRIKE'] = 99)] = 'STRIKE';
    TAG_ID2[(TAG_ID2['STRONG'] = 100)] = 'STRONG';
    TAG_ID2[(TAG_ID2['STYLE'] = 101)] = 'STYLE';
    TAG_ID2[(TAG_ID2['SUB'] = 102)] = 'SUB';
    TAG_ID2[(TAG_ID2['SUMMARY'] = 103)] = 'SUMMARY';
    TAG_ID2[(TAG_ID2['SUP'] = 104)] = 'SUP';
    TAG_ID2[(TAG_ID2['TABLE'] = 105)] = 'TABLE';
    TAG_ID2[(TAG_ID2['TBODY'] = 106)] = 'TBODY';
    TAG_ID2[(TAG_ID2['TEMPLATE'] = 107)] = 'TEMPLATE';
    TAG_ID2[(TAG_ID2['TEXTAREA'] = 108)] = 'TEXTAREA';
    TAG_ID2[(TAG_ID2['TFOOT'] = 109)] = 'TFOOT';
    TAG_ID2[(TAG_ID2['TD'] = 110)] = 'TD';
    TAG_ID2[(TAG_ID2['TH'] = 111)] = 'TH';
    TAG_ID2[(TAG_ID2['THEAD'] = 112)] = 'THEAD';
    TAG_ID2[(TAG_ID2['TITLE'] = 113)] = 'TITLE';
    TAG_ID2[(TAG_ID2['TR'] = 114)] = 'TR';
    TAG_ID2[(TAG_ID2['TRACK'] = 115)] = 'TRACK';
    TAG_ID2[(TAG_ID2['TT'] = 116)] = 'TT';
    TAG_ID2[(TAG_ID2['U'] = 117)] = 'U';
    TAG_ID2[(TAG_ID2['UL'] = 118)] = 'UL';
    TAG_ID2[(TAG_ID2['SVG'] = 119)] = 'SVG';
    TAG_ID2[(TAG_ID2['VAR'] = 120)] = 'VAR';
    TAG_ID2[(TAG_ID2['WBR'] = 121)] = 'WBR';
    TAG_ID2[(TAG_ID2['XMP'] = 122)] = 'XMP';
})((TAG_ID = TAG_ID || (TAG_ID = {})));
var TAG_NAME_TO_ID = /* @__PURE__ */ new Map([
    [TAG_NAMES.A, TAG_ID.A],
    [TAG_NAMES.ADDRESS, TAG_ID.ADDRESS],
    [TAG_NAMES.ANNOTATION_XML, TAG_ID.ANNOTATION_XML],
    [TAG_NAMES.APPLET, TAG_ID.APPLET],
    [TAG_NAMES.AREA, TAG_ID.AREA],
    [TAG_NAMES.ARTICLE, TAG_ID.ARTICLE],
    [TAG_NAMES.ASIDE, TAG_ID.ASIDE],
    [TAG_NAMES.B, TAG_ID.B],
    [TAG_NAMES.BASE, TAG_ID.BASE],
    [TAG_NAMES.BASEFONT, TAG_ID.BASEFONT],
    [TAG_NAMES.BGSOUND, TAG_ID.BGSOUND],
    [TAG_NAMES.BIG, TAG_ID.BIG],
    [TAG_NAMES.BLOCKQUOTE, TAG_ID.BLOCKQUOTE],
    [TAG_NAMES.BODY, TAG_ID.BODY],
    [TAG_NAMES.BR, TAG_ID.BR],
    [TAG_NAMES.BUTTON, TAG_ID.BUTTON],
    [TAG_NAMES.CAPTION, TAG_ID.CAPTION],
    [TAG_NAMES.CENTER, TAG_ID.CENTER],
    [TAG_NAMES.CODE, TAG_ID.CODE],
    [TAG_NAMES.COL, TAG_ID.COL],
    [TAG_NAMES.COLGROUP, TAG_ID.COLGROUP],
    [TAG_NAMES.DD, TAG_ID.DD],
    [TAG_NAMES.DESC, TAG_ID.DESC],
    [TAG_NAMES.DETAILS, TAG_ID.DETAILS],
    [TAG_NAMES.DIALOG, TAG_ID.DIALOG],
    [TAG_NAMES.DIR, TAG_ID.DIR],
    [TAG_NAMES.DIV, TAG_ID.DIV],
    [TAG_NAMES.DL, TAG_ID.DL],
    [TAG_NAMES.DT, TAG_ID.DT],
    [TAG_NAMES.EM, TAG_ID.EM],
    [TAG_NAMES.EMBED, TAG_ID.EMBED],
    [TAG_NAMES.FIELDSET, TAG_ID.FIELDSET],
    [TAG_NAMES.FIGCAPTION, TAG_ID.FIGCAPTION],
    [TAG_NAMES.FIGURE, TAG_ID.FIGURE],
    [TAG_NAMES.FONT, TAG_ID.FONT],
    [TAG_NAMES.FOOTER, TAG_ID.FOOTER],
    [TAG_NAMES.FOREIGN_OBJECT, TAG_ID.FOREIGN_OBJECT],
    [TAG_NAMES.FORM, TAG_ID.FORM],
    [TAG_NAMES.FRAME, TAG_ID.FRAME],
    [TAG_NAMES.FRAMESET, TAG_ID.FRAMESET],
    [TAG_NAMES.H1, TAG_ID.H1],
    [TAG_NAMES.H2, TAG_ID.H2],
    [TAG_NAMES.H3, TAG_ID.H3],
    [TAG_NAMES.H4, TAG_ID.H4],
    [TAG_NAMES.H5, TAG_ID.H5],
    [TAG_NAMES.H6, TAG_ID.H6],
    [TAG_NAMES.HEAD, TAG_ID.HEAD],
    [TAG_NAMES.HEADER, TAG_ID.HEADER],
    [TAG_NAMES.HGROUP, TAG_ID.HGROUP],
    [TAG_NAMES.HR, TAG_ID.HR],
    [TAG_NAMES.HTML, TAG_ID.HTML],
    [TAG_NAMES.I, TAG_ID.I],
    [TAG_NAMES.IMG, TAG_ID.IMG],
    [TAG_NAMES.IMAGE, TAG_ID.IMAGE],
    [TAG_NAMES.INPUT, TAG_ID.INPUT],
    [TAG_NAMES.IFRAME, TAG_ID.IFRAME],
    [TAG_NAMES.KEYGEN, TAG_ID.KEYGEN],
    [TAG_NAMES.LABEL, TAG_ID.LABEL],
    [TAG_NAMES.LI, TAG_ID.LI],
    [TAG_NAMES.LINK, TAG_ID.LINK],
    [TAG_NAMES.LISTING, TAG_ID.LISTING],
    [TAG_NAMES.MAIN, TAG_ID.MAIN],
    [TAG_NAMES.MALIGNMARK, TAG_ID.MALIGNMARK],
    [TAG_NAMES.MARQUEE, TAG_ID.MARQUEE],
    [TAG_NAMES.MATH, TAG_ID.MATH],
    [TAG_NAMES.MENU, TAG_ID.MENU],
    [TAG_NAMES.META, TAG_ID.META],
    [TAG_NAMES.MGLYPH, TAG_ID.MGLYPH],
    [TAG_NAMES.MI, TAG_ID.MI],
    [TAG_NAMES.MO, TAG_ID.MO],
    [TAG_NAMES.MN, TAG_ID.MN],
    [TAG_NAMES.MS, TAG_ID.MS],
    [TAG_NAMES.MTEXT, TAG_ID.MTEXT],
    [TAG_NAMES.NAV, TAG_ID.NAV],
    [TAG_NAMES.NOBR, TAG_ID.NOBR],
    [TAG_NAMES.NOFRAMES, TAG_ID.NOFRAMES],
    [TAG_NAMES.NOEMBED, TAG_ID.NOEMBED],
    [TAG_NAMES.NOSCRIPT, TAG_ID.NOSCRIPT],
    [TAG_NAMES.OBJECT, TAG_ID.OBJECT],
    [TAG_NAMES.OL, TAG_ID.OL],
    [TAG_NAMES.OPTGROUP, TAG_ID.OPTGROUP],
    [TAG_NAMES.OPTION, TAG_ID.OPTION],
    [TAG_NAMES.P, TAG_ID.P],
    [TAG_NAMES.PARAM, TAG_ID.PARAM],
    [TAG_NAMES.PLAINTEXT, TAG_ID.PLAINTEXT],
    [TAG_NAMES.PRE, TAG_ID.PRE],
    [TAG_NAMES.RB, TAG_ID.RB],
    [TAG_NAMES.RP, TAG_ID.RP],
    [TAG_NAMES.RT, TAG_ID.RT],
    [TAG_NAMES.RTC, TAG_ID.RTC],
    [TAG_NAMES.RUBY, TAG_ID.RUBY],
    [TAG_NAMES.S, TAG_ID.S],
    [TAG_NAMES.SCRIPT, TAG_ID.SCRIPT],
    [TAG_NAMES.SECTION, TAG_ID.SECTION],
    [TAG_NAMES.SELECT, TAG_ID.SELECT],
    [TAG_NAMES.SOURCE, TAG_ID.SOURCE],
    [TAG_NAMES.SMALL, TAG_ID.SMALL],
    [TAG_NAMES.SPAN, TAG_ID.SPAN],
    [TAG_NAMES.STRIKE, TAG_ID.STRIKE],
    [TAG_NAMES.STRONG, TAG_ID.STRONG],
    [TAG_NAMES.STYLE, TAG_ID.STYLE],
    [TAG_NAMES.SUB, TAG_ID.SUB],
    [TAG_NAMES.SUMMARY, TAG_ID.SUMMARY],
    [TAG_NAMES.SUP, TAG_ID.SUP],
    [TAG_NAMES.TABLE, TAG_ID.TABLE],
    [TAG_NAMES.TBODY, TAG_ID.TBODY],
    [TAG_NAMES.TEMPLATE, TAG_ID.TEMPLATE],
    [TAG_NAMES.TEXTAREA, TAG_ID.TEXTAREA],
    [TAG_NAMES.TFOOT, TAG_ID.TFOOT],
    [TAG_NAMES.TD, TAG_ID.TD],
    [TAG_NAMES.TH, TAG_ID.TH],
    [TAG_NAMES.THEAD, TAG_ID.THEAD],
    [TAG_NAMES.TITLE, TAG_ID.TITLE],
    [TAG_NAMES.TR, TAG_ID.TR],
    [TAG_NAMES.TRACK, TAG_ID.TRACK],
    [TAG_NAMES.TT, TAG_ID.TT],
    [TAG_NAMES.U, TAG_ID.U],
    [TAG_NAMES.UL, TAG_ID.UL],
    [TAG_NAMES.SVG, TAG_ID.SVG],
    [TAG_NAMES.VAR, TAG_ID.VAR],
    [TAG_NAMES.WBR, TAG_ID.WBR],
    [TAG_NAMES.XMP, TAG_ID.XMP],
]);
function getTagID(tagName) {
    var _a5;
    return (_a5 = TAG_NAME_TO_ID.get(tagName)) !== null && _a5 !== void 0 ? _a5 : TAG_ID.UNKNOWN;
}
var $3 = TAG_ID;
var SPECIAL_ELEMENTS = {
    [NS.HTML]: /* @__PURE__ */ new Set([
        $3.ADDRESS,
        $3.APPLET,
        $3.AREA,
        $3.ARTICLE,
        $3.ASIDE,
        $3.BASE,
        $3.BASEFONT,
        $3.BGSOUND,
        $3.BLOCKQUOTE,
        $3.BODY,
        $3.BR,
        $3.BUTTON,
        $3.CAPTION,
        $3.CENTER,
        $3.COL,
        $3.COLGROUP,
        $3.DD,
        $3.DETAILS,
        $3.DIR,
        $3.DIV,
        $3.DL,
        $3.DT,
        $3.EMBED,
        $3.FIELDSET,
        $3.FIGCAPTION,
        $3.FIGURE,
        $3.FOOTER,
        $3.FORM,
        $3.FRAME,
        $3.FRAMESET,
        $3.H1,
        $3.H2,
        $3.H3,
        $3.H4,
        $3.H5,
        $3.H6,
        $3.HEAD,
        $3.HEADER,
        $3.HGROUP,
        $3.HR,
        $3.HTML,
        $3.IFRAME,
        $3.IMG,
        $3.INPUT,
        $3.LI,
        $3.LINK,
        $3.LISTING,
        $3.MAIN,
        $3.MARQUEE,
        $3.MENU,
        $3.META,
        $3.NAV,
        $3.NOEMBED,
        $3.NOFRAMES,
        $3.NOSCRIPT,
        $3.OBJECT,
        $3.OL,
        $3.P,
        $3.PARAM,
        $3.PLAINTEXT,
        $3.PRE,
        $3.SCRIPT,
        $3.SECTION,
        $3.SELECT,
        $3.SOURCE,
        $3.STYLE,
        $3.SUMMARY,
        $3.TABLE,
        $3.TBODY,
        $3.TD,
        $3.TEMPLATE,
        $3.TEXTAREA,
        $3.TFOOT,
        $3.TH,
        $3.THEAD,
        $3.TITLE,
        $3.TR,
        $3.TRACK,
        $3.UL,
        $3.WBR,
        $3.XMP,
    ]),
    [NS.MATHML]: /* @__PURE__ */ new Set([$3.MI, $3.MO, $3.MN, $3.MS, $3.MTEXT, $3.ANNOTATION_XML]),
    [NS.SVG]: /* @__PURE__ */ new Set([$3.TITLE, $3.FOREIGN_OBJECT, $3.DESC]),
    [NS.XLINK]: /* @__PURE__ */ new Set(),
    [NS.XML]: /* @__PURE__ */ new Set(),
    [NS.XMLNS]: /* @__PURE__ */ new Set(),
};
function isNumberedHeader(tn) {
    return (
        tn === $3.H1 || tn === $3.H2 || tn === $3.H3 || tn === $3.H4 || tn === $3.H5 || tn === $3.H6
    );
}
var UNESCAPED_TEXT = /* @__PURE__ */ new Set([
    TAG_NAMES.STYLE,
    TAG_NAMES.SCRIPT,
    TAG_NAMES.XMP,
    TAG_NAMES.IFRAME,
    TAG_NAMES.NOEMBED,
    TAG_NAMES.NOFRAMES,
    TAG_NAMES.PLAINTEXT,
]);
function hasUnescapedText(tn, scriptingEnabled) {
    return UNESCAPED_TEXT.has(tn) || (scriptingEnabled && tn === TAG_NAMES.NOSCRIPT);
}

// node_modules/parse5/dist/tokenizer/index.js
var C1_CONTROLS_REFERENCE_REPLACEMENTS = /* @__PURE__ */ new Map([
    [128, 8364],
    [130, 8218],
    [131, 402],
    [132, 8222],
    [133, 8230],
    [134, 8224],
    [135, 8225],
    [136, 710],
    [137, 8240],
    [138, 352],
    [139, 8249],
    [140, 338],
    [142, 381],
    [145, 8216],
    [146, 8217],
    [147, 8220],
    [148, 8221],
    [149, 8226],
    [150, 8211],
    [151, 8212],
    [152, 732],
    [153, 8482],
    [154, 353],
    [155, 8250],
    [156, 339],
    [158, 382],
    [159, 376],
]);
var State;
(function (State3) {
    State3[(State3['DATA'] = 0)] = 'DATA';
    State3[(State3['RCDATA'] = 1)] = 'RCDATA';
    State3[(State3['RAWTEXT'] = 2)] = 'RAWTEXT';
    State3[(State3['SCRIPT_DATA'] = 3)] = 'SCRIPT_DATA';
    State3[(State3['PLAINTEXT'] = 4)] = 'PLAINTEXT';
    State3[(State3['TAG_OPEN'] = 5)] = 'TAG_OPEN';
    State3[(State3['END_TAG_OPEN'] = 6)] = 'END_TAG_OPEN';
    State3[(State3['TAG_NAME'] = 7)] = 'TAG_NAME';
    State3[(State3['RCDATA_LESS_THAN_SIGN'] = 8)] = 'RCDATA_LESS_THAN_SIGN';
    State3[(State3['RCDATA_END_TAG_OPEN'] = 9)] = 'RCDATA_END_TAG_OPEN';
    State3[(State3['RCDATA_END_TAG_NAME'] = 10)] = 'RCDATA_END_TAG_NAME';
    State3[(State3['RAWTEXT_LESS_THAN_SIGN'] = 11)] = 'RAWTEXT_LESS_THAN_SIGN';
    State3[(State3['RAWTEXT_END_TAG_OPEN'] = 12)] = 'RAWTEXT_END_TAG_OPEN';
    State3[(State3['RAWTEXT_END_TAG_NAME'] = 13)] = 'RAWTEXT_END_TAG_NAME';
    State3[(State3['SCRIPT_DATA_LESS_THAN_SIGN'] = 14)] = 'SCRIPT_DATA_LESS_THAN_SIGN';
    State3[(State3['SCRIPT_DATA_END_TAG_OPEN'] = 15)] = 'SCRIPT_DATA_END_TAG_OPEN';
    State3[(State3['SCRIPT_DATA_END_TAG_NAME'] = 16)] = 'SCRIPT_DATA_END_TAG_NAME';
    State3[(State3['SCRIPT_DATA_ESCAPE_START'] = 17)] = 'SCRIPT_DATA_ESCAPE_START';
    State3[(State3['SCRIPT_DATA_ESCAPE_START_DASH'] = 18)] = 'SCRIPT_DATA_ESCAPE_START_DASH';
    State3[(State3['SCRIPT_DATA_ESCAPED'] = 19)] = 'SCRIPT_DATA_ESCAPED';
    State3[(State3['SCRIPT_DATA_ESCAPED_DASH'] = 20)] = 'SCRIPT_DATA_ESCAPED_DASH';
    State3[(State3['SCRIPT_DATA_ESCAPED_DASH_DASH'] = 21)] = 'SCRIPT_DATA_ESCAPED_DASH_DASH';
    State3[(State3['SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN'] = 22)] =
        'SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN';
    State3[(State3['SCRIPT_DATA_ESCAPED_END_TAG_OPEN'] = 23)] = 'SCRIPT_DATA_ESCAPED_END_TAG_OPEN';
    State3[(State3['SCRIPT_DATA_ESCAPED_END_TAG_NAME'] = 24)] = 'SCRIPT_DATA_ESCAPED_END_TAG_NAME';
    State3[(State3['SCRIPT_DATA_DOUBLE_ESCAPE_START'] = 25)] = 'SCRIPT_DATA_DOUBLE_ESCAPE_START';
    State3[(State3['SCRIPT_DATA_DOUBLE_ESCAPED'] = 26)] = 'SCRIPT_DATA_DOUBLE_ESCAPED';
    State3[(State3['SCRIPT_DATA_DOUBLE_ESCAPED_DASH'] = 27)] = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH';
    State3[(State3['SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH'] = 28)] =
        'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH';
    State3[(State3['SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN'] = 29)] =
        'SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN';
    State3[(State3['SCRIPT_DATA_DOUBLE_ESCAPE_END'] = 30)] = 'SCRIPT_DATA_DOUBLE_ESCAPE_END';
    State3[(State3['BEFORE_ATTRIBUTE_NAME'] = 31)] = 'BEFORE_ATTRIBUTE_NAME';
    State3[(State3['ATTRIBUTE_NAME'] = 32)] = 'ATTRIBUTE_NAME';
    State3[(State3['AFTER_ATTRIBUTE_NAME'] = 33)] = 'AFTER_ATTRIBUTE_NAME';
    State3[(State3['BEFORE_ATTRIBUTE_VALUE'] = 34)] = 'BEFORE_ATTRIBUTE_VALUE';
    State3[(State3['ATTRIBUTE_VALUE_DOUBLE_QUOTED'] = 35)] = 'ATTRIBUTE_VALUE_DOUBLE_QUOTED';
    State3[(State3['ATTRIBUTE_VALUE_SINGLE_QUOTED'] = 36)] = 'ATTRIBUTE_VALUE_SINGLE_QUOTED';
    State3[(State3['ATTRIBUTE_VALUE_UNQUOTED'] = 37)] = 'ATTRIBUTE_VALUE_UNQUOTED';
    State3[(State3['AFTER_ATTRIBUTE_VALUE_QUOTED'] = 38)] = 'AFTER_ATTRIBUTE_VALUE_QUOTED';
    State3[(State3['SELF_CLOSING_START_TAG'] = 39)] = 'SELF_CLOSING_START_TAG';
    State3[(State3['BOGUS_COMMENT'] = 40)] = 'BOGUS_COMMENT';
    State3[(State3['MARKUP_DECLARATION_OPEN'] = 41)] = 'MARKUP_DECLARATION_OPEN';
    State3[(State3['COMMENT_START'] = 42)] = 'COMMENT_START';
    State3[(State3['COMMENT_START_DASH'] = 43)] = 'COMMENT_START_DASH';
    State3[(State3['COMMENT'] = 44)] = 'COMMENT';
    State3[(State3['COMMENT_LESS_THAN_SIGN'] = 45)] = 'COMMENT_LESS_THAN_SIGN';
    State3[(State3['COMMENT_LESS_THAN_SIGN_BANG'] = 46)] = 'COMMENT_LESS_THAN_SIGN_BANG';
    State3[(State3['COMMENT_LESS_THAN_SIGN_BANG_DASH'] = 47)] = 'COMMENT_LESS_THAN_SIGN_BANG_DASH';
    State3[(State3['COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH'] = 48)] =
        'COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH';
    State3[(State3['COMMENT_END_DASH'] = 49)] = 'COMMENT_END_DASH';
    State3[(State3['COMMENT_END'] = 50)] = 'COMMENT_END';
    State3[(State3['COMMENT_END_BANG'] = 51)] = 'COMMENT_END_BANG';
    State3[(State3['DOCTYPE'] = 52)] = 'DOCTYPE';
    State3[(State3['BEFORE_DOCTYPE_NAME'] = 53)] = 'BEFORE_DOCTYPE_NAME';
    State3[(State3['DOCTYPE_NAME'] = 54)] = 'DOCTYPE_NAME';
    State3[(State3['AFTER_DOCTYPE_NAME'] = 55)] = 'AFTER_DOCTYPE_NAME';
    State3[(State3['AFTER_DOCTYPE_PUBLIC_KEYWORD'] = 56)] = 'AFTER_DOCTYPE_PUBLIC_KEYWORD';
    State3[(State3['BEFORE_DOCTYPE_PUBLIC_IDENTIFIER'] = 57)] = 'BEFORE_DOCTYPE_PUBLIC_IDENTIFIER';
    State3[(State3['DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED'] = 58)] =
        'DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED';
    State3[(State3['DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED'] = 59)] =
        'DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED';
    State3[(State3['AFTER_DOCTYPE_PUBLIC_IDENTIFIER'] = 60)] = 'AFTER_DOCTYPE_PUBLIC_IDENTIFIER';
    State3[(State3['BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS'] = 61)] =
        'BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS';
    State3[(State3['AFTER_DOCTYPE_SYSTEM_KEYWORD'] = 62)] = 'AFTER_DOCTYPE_SYSTEM_KEYWORD';
    State3[(State3['BEFORE_DOCTYPE_SYSTEM_IDENTIFIER'] = 63)] = 'BEFORE_DOCTYPE_SYSTEM_IDENTIFIER';
    State3[(State3['DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED'] = 64)] =
        'DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED';
    State3[(State3['DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED'] = 65)] =
        'DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED';
    State3[(State3['AFTER_DOCTYPE_SYSTEM_IDENTIFIER'] = 66)] = 'AFTER_DOCTYPE_SYSTEM_IDENTIFIER';
    State3[(State3['BOGUS_DOCTYPE'] = 67)] = 'BOGUS_DOCTYPE';
    State3[(State3['CDATA_SECTION'] = 68)] = 'CDATA_SECTION';
    State3[(State3['CDATA_SECTION_BRACKET'] = 69)] = 'CDATA_SECTION_BRACKET';
    State3[(State3['CDATA_SECTION_END'] = 70)] = 'CDATA_SECTION_END';
    State3[(State3['CHARACTER_REFERENCE'] = 71)] = 'CHARACTER_REFERENCE';
    State3[(State3['NAMED_CHARACTER_REFERENCE'] = 72)] = 'NAMED_CHARACTER_REFERENCE';
    State3[(State3['AMBIGUOUS_AMPERSAND'] = 73)] = 'AMBIGUOUS_AMPERSAND';
    State3[(State3['NUMERIC_CHARACTER_REFERENCE'] = 74)] = 'NUMERIC_CHARACTER_REFERENCE';
    State3[(State3['HEXADEMICAL_CHARACTER_REFERENCE_START'] = 75)] =
        'HEXADEMICAL_CHARACTER_REFERENCE_START';
    State3[(State3['HEXADEMICAL_CHARACTER_REFERENCE'] = 76)] = 'HEXADEMICAL_CHARACTER_REFERENCE';
    State3[(State3['DECIMAL_CHARACTER_REFERENCE'] = 77)] = 'DECIMAL_CHARACTER_REFERENCE';
    State3[(State3['NUMERIC_CHARACTER_REFERENCE_END'] = 78)] = 'NUMERIC_CHARACTER_REFERENCE_END';
})(State || (State = {}));
var TokenizerMode = {
    DATA: State.DATA,
    RCDATA: State.RCDATA,
    RAWTEXT: State.RAWTEXT,
    SCRIPT_DATA: State.SCRIPT_DATA,
    PLAINTEXT: State.PLAINTEXT,
    CDATA_SECTION: State.CDATA_SECTION,
};
function isAsciiDigit(cp) {
    return cp >= CODE_POINTS.DIGIT_0 && cp <= CODE_POINTS.DIGIT_9;
}
function isAsciiUpper(cp) {
    return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_Z;
}
function isAsciiLower(cp) {
    return cp >= CODE_POINTS.LATIN_SMALL_A && cp <= CODE_POINTS.LATIN_SMALL_Z;
}
function isAsciiLetter(cp) {
    return isAsciiLower(cp) || isAsciiUpper(cp);
}
function isAsciiAlphaNumeric2(cp) {
    return isAsciiLetter(cp) || isAsciiDigit(cp);
}
function isAsciiUpperHexDigit(cp) {
    return cp >= CODE_POINTS.LATIN_CAPITAL_A && cp <= CODE_POINTS.LATIN_CAPITAL_F;
}
function isAsciiLowerHexDigit(cp) {
    return cp >= CODE_POINTS.LATIN_SMALL_A && cp <= CODE_POINTS.LATIN_SMALL_F;
}
function isAsciiHexDigit(cp) {
    return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);
}
function toAsciiLower(cp) {
    return cp + 32;
}
function isWhitespace(cp) {
    return (
        cp === CODE_POINTS.SPACE ||
        cp === CODE_POINTS.LINE_FEED ||
        cp === CODE_POINTS.TABULATION ||
        cp === CODE_POINTS.FORM_FEED
    );
}
function isEntityInAttributeInvalidEnd2(nextCp) {
    return nextCp === CODE_POINTS.EQUALS_SIGN || isAsciiAlphaNumeric2(nextCp);
}
function isScriptDataDoubleEscapeSequenceEnd(cp) {
    return isWhitespace(cp) || cp === CODE_POINTS.SOLIDUS || cp === CODE_POINTS.GREATER_THAN_SIGN;
}
var Tokenizer = class {
    constructor(options2, handler) {
        this.options = options2;
        this.handler = handler;
        this.paused = false;
        this.inLoop = false;
        this.inForeignNode = false;
        this.lastStartTagName = '';
        this.active = false;
        this.state = State.DATA;
        this.returnState = State.DATA;
        this.charRefCode = -1;
        this.consumedAfterSnapshot = -1;
        this.currentCharacterToken = null;
        this.currentToken = null;
        this.currentAttr = { name: '', value: '' };
        this.preprocessor = new Preprocessor(handler);
        this.currentLocation = this.getCurrentLocation(-1);
    }
    //Errors
    _err(code) {
        var _a5, _b;
        (_b = (_a5 = this.handler).onParseError) === null || _b === void 0
            ? void 0
            : _b.call(_a5, this.preprocessor.getError(code));
    }
    // NOTE: `offset` may never run across line boundaries.
    getCurrentLocation(offset) {
        if (!this.options.sourceCodeLocationInfo) {
            return null;
        }
        return {
            startLine: this.preprocessor.line,
            startCol: this.preprocessor.col - offset,
            startOffset: this.preprocessor.offset - offset,
            endLine: -1,
            endCol: -1,
            endOffset: -1,
        };
    }
    _runParsingLoop() {
        if (this.inLoop) return;
        this.inLoop = true;
        while (this.active && !this.paused) {
            this.consumedAfterSnapshot = 0;
            const cp = this._consume();
            if (!this._ensureHibernation()) {
                this._callState(cp);
            }
        }
        this.inLoop = false;
    }
    //API
    pause() {
        this.paused = true;
    }
    resume(writeCallback) {
        if (!this.paused) {
            throw new Error('Parser was already resumed');
        }
        this.paused = false;
        if (this.inLoop) return;
        this._runParsingLoop();
        if (!this.paused) {
            writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();
        }
    }
    write(chunk, isLastChunk, writeCallback) {
        this.active = true;
        this.preprocessor.write(chunk, isLastChunk);
        this._runParsingLoop();
        if (!this.paused) {
            writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();
        }
    }
    insertHtmlAtCurrentPos(chunk) {
        this.active = true;
        this.preprocessor.insertHtmlAtCurrentPos(chunk);
        this._runParsingLoop();
    }
    //Hibernation
    _ensureHibernation() {
        if (this.preprocessor.endOfChunkHit) {
            this._unconsume(this.consumedAfterSnapshot);
            this.active = false;
            return true;
        }
        return false;
    }
    //Consumption
    _consume() {
        this.consumedAfterSnapshot++;
        return this.preprocessor.advance();
    }
    _unconsume(count) {
        this.consumedAfterSnapshot -= count;
        this.preprocessor.retreat(count);
    }
    _reconsumeInState(state, cp) {
        this.state = state;
        this._callState(cp);
    }
    _advanceBy(count) {
        this.consumedAfterSnapshot += count;
        for (let i2 = 0; i2 < count; i2++) {
            this.preprocessor.advance();
        }
    }
    _consumeSequenceIfMatch(pattern, caseSensitive) {
        if (this.preprocessor.startsWith(pattern, caseSensitive)) {
            this._advanceBy(pattern.length - 1);
            return true;
        }
        return false;
    }
    //Token creation
    _createStartTagToken() {
        this.currentToken = {
            type: TokenType.START_TAG,
            tagName: '',
            tagID: TAG_ID.UNKNOWN,
            selfClosing: false,
            ackSelfClosing: false,
            attrs: [],
            location: this.getCurrentLocation(1),
        };
    }
    _createEndTagToken() {
        this.currentToken = {
            type: TokenType.END_TAG,
            tagName: '',
            tagID: TAG_ID.UNKNOWN,
            selfClosing: false,
            ackSelfClosing: false,
            attrs: [],
            location: this.getCurrentLocation(2),
        };
    }
    _createCommentToken(offset) {
        this.currentToken = {
            type: TokenType.COMMENT,
            data: '',
            location: this.getCurrentLocation(offset),
        };
    }
    _createDoctypeToken(initialName) {
        this.currentToken = {
            type: TokenType.DOCTYPE,
            name: initialName,
            forceQuirks: false,
            publicId: null,
            systemId: null,
            location: this.currentLocation,
        };
    }
    _createCharacterToken(type, chars) {
        this.currentCharacterToken = {
            type,
            chars,
            location: this.currentLocation,
        };
    }
    //Tag attributes
    _createAttr(attrNameFirstCh) {
        this.currentAttr = {
            name: attrNameFirstCh,
            value: '',
        };
        this.currentLocation = this.getCurrentLocation(0);
    }
    _leaveAttrName() {
        var _a5;
        var _b;
        const token = this.currentToken;
        if (getTokenAttr(token, this.currentAttr.name) === null) {
            token.attrs.push(this.currentAttr);
            if (token.location && this.currentLocation) {
                const attrLocations =
                    (_a5 = (_b = token.location).attrs) !== null && _a5 !== void 0
                        ? _a5
                        : (_b.attrs = /* @__PURE__ */ Object.create(null));
                attrLocations[this.currentAttr.name] = this.currentLocation;
                this._leaveAttrValue();
            }
        } else {
            this._err(ERR.duplicateAttribute);
        }
    }
    _leaveAttrValue() {
        if (this.currentLocation) {
            this.currentLocation.endLine = this.preprocessor.line;
            this.currentLocation.endCol = this.preprocessor.col;
            this.currentLocation.endOffset = this.preprocessor.offset;
        }
    }
    //Token emission
    prepareToken(ct) {
        this._emitCurrentCharacterToken(ct.location);
        this.currentToken = null;
        if (ct.location) {
            ct.location.endLine = this.preprocessor.line;
            ct.location.endCol = this.preprocessor.col + 1;
            ct.location.endOffset = this.preprocessor.offset + 1;
        }
        this.currentLocation = this.getCurrentLocation(-1);
    }
    emitCurrentTagToken() {
        const ct = this.currentToken;
        this.prepareToken(ct);
        ct.tagID = getTagID(ct.tagName);
        if (ct.type === TokenType.START_TAG) {
            this.lastStartTagName = ct.tagName;
            this.handler.onStartTag(ct);
        } else {
            if (ct.attrs.length > 0) {
                this._err(ERR.endTagWithAttributes);
            }
            if (ct.selfClosing) {
                this._err(ERR.endTagWithTrailingSolidus);
            }
            this.handler.onEndTag(ct);
        }
        this.preprocessor.dropParsedChunk();
    }
    emitCurrentComment(ct) {
        this.prepareToken(ct);
        this.handler.onComment(ct);
        this.preprocessor.dropParsedChunk();
    }
    emitCurrentDoctype(ct) {
        this.prepareToken(ct);
        this.handler.onDoctype(ct);
        this.preprocessor.dropParsedChunk();
    }
    _emitCurrentCharacterToken(nextLocation) {
        if (this.currentCharacterToken) {
            if (nextLocation && this.currentCharacterToken.location) {
                this.currentCharacterToken.location.endLine = nextLocation.startLine;
                this.currentCharacterToken.location.endCol = nextLocation.startCol;
                this.currentCharacterToken.location.endOffset = nextLocation.startOffset;
            }
            switch (this.currentCharacterToken.type) {
                case TokenType.CHARACTER: {
                    this.handler.onCharacter(this.currentCharacterToken);
                    break;
                }
                case TokenType.NULL_CHARACTER: {
                    this.handler.onNullCharacter(this.currentCharacterToken);
                    break;
                }
                case TokenType.WHITESPACE_CHARACTER: {
                    this.handler.onWhitespaceCharacter(this.currentCharacterToken);
                    break;
                }
            }
            this.currentCharacterToken = null;
        }
    }
    _emitEOFToken() {
        const location = this.getCurrentLocation(0);
        if (location) {
            location.endLine = location.startLine;
            location.endCol = location.startCol;
            location.endOffset = location.startOffset;
        }
        this._emitCurrentCharacterToken(location);
        this.handler.onEof({ type: TokenType.EOF, location });
        this.active = false;
    }
    //Characters emission
    //OPTIMIZATION: specification uses only one type of character tokens (one token per character).
    //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.
    //If we have a sequence of characters that belong to the same group, the parser can process it
    //as a single solid character token.
    //So, there are 3 types of character tokens in parse5:
    //1)TokenType.NULL_CHARACTER - \u0000-character sequences (e.g. '\u0000\u0000\u0000')
    //2)TokenType.WHITESPACE_CHARACTER - any whitespace/new-line character sequences (e.g. '\n  \r\t   \f')
    //3)TokenType.CHARACTER - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')
    _appendCharToCurrentCharacterToken(type, ch) {
        if (this.currentCharacterToken) {
            if (this.currentCharacterToken.type !== type) {
                this.currentLocation = this.getCurrentLocation(0);
                this._emitCurrentCharacterToken(this.currentLocation);
                this.preprocessor.dropParsedChunk();
            } else {
                this.currentCharacterToken.chars += ch;
                return;
            }
        }
        this._createCharacterToken(type, ch);
    }
    _emitCodePoint(cp) {
        const type = isWhitespace(cp)
            ? TokenType.WHITESPACE_CHARACTER
            : cp === CODE_POINTS.NULL
              ? TokenType.NULL_CHARACTER
              : TokenType.CHARACTER;
        this._appendCharToCurrentCharacterToken(type, String.fromCodePoint(cp));
    }
    //NOTE: used when we emit characters explicitly.
    //This is always for non-whitespace and non-null characters, which allows us to avoid additional checks.
    _emitChars(ch) {
        this._appendCharToCurrentCharacterToken(TokenType.CHARACTER, ch);
    }
    // Character reference helpers
    _matchNamedCharacterReference(cp) {
        let result = null;
        let excess = 0;
        let withoutSemicolon = false;
        for (let i2 = 0, current = decode_data_html_default[0]; i2 >= 0; cp = this._consume()) {
            i2 = determineBranch(decode_data_html_default, current, i2 + 1, cp);
            if (i2 < 0) break;
            excess += 1;
            current = decode_data_html_default[i2];
            const masked = current & BinTrieFlags.VALUE_LENGTH;
            if (masked) {
                const valueLength = (masked >> 14) - 1;
                if (
                    cp !== CODE_POINTS.SEMICOLON &&
                    this._isCharacterReferenceInAttribute() &&
                    isEntityInAttributeInvalidEnd2(this.preprocessor.peek(1))
                ) {
                    result = [CODE_POINTS.AMPERSAND];
                    i2 += valueLength;
                } else {
                    result =
                        valueLength === 0
                            ? [decode_data_html_default[i2] & ~BinTrieFlags.VALUE_LENGTH]
                            : valueLength === 1
                              ? [decode_data_html_default[++i2]]
                              : [decode_data_html_default[++i2], decode_data_html_default[++i2]];
                    excess = 0;
                    withoutSemicolon = cp !== CODE_POINTS.SEMICOLON;
                }
                if (valueLength === 0) {
                    this._consume();
                    break;
                }
            }
        }
        this._unconsume(excess);
        if (withoutSemicolon && !this.preprocessor.endOfChunkHit) {
            this._err(ERR.missingSemicolonAfterCharacterReference);
        }
        this._unconsume(1);
        return result;
    }
    _isCharacterReferenceInAttribute() {
        return (
            this.returnState === State.ATTRIBUTE_VALUE_DOUBLE_QUOTED ||
            this.returnState === State.ATTRIBUTE_VALUE_SINGLE_QUOTED ||
            this.returnState === State.ATTRIBUTE_VALUE_UNQUOTED
        );
    }
    _flushCodePointConsumedAsCharacterReference(cp) {
        if (this._isCharacterReferenceInAttribute()) {
            this.currentAttr.value += String.fromCodePoint(cp);
        } else {
            this._emitCodePoint(cp);
        }
    }
    // Calling states this way turns out to be much faster than any other approach.
    _callState(cp) {
        switch (this.state) {
            case State.DATA: {
                this._stateData(cp);
                break;
            }
            case State.RCDATA: {
                this._stateRcdata(cp);
                break;
            }
            case State.RAWTEXT: {
                this._stateRawtext(cp);
                break;
            }
            case State.SCRIPT_DATA: {
                this._stateScriptData(cp);
                break;
            }
            case State.PLAINTEXT: {
                this._statePlaintext(cp);
                break;
            }
            case State.TAG_OPEN: {
                this._stateTagOpen(cp);
                break;
            }
            case State.END_TAG_OPEN: {
                this._stateEndTagOpen(cp);
                break;
            }
            case State.TAG_NAME: {
                this._stateTagName(cp);
                break;
            }
            case State.RCDATA_LESS_THAN_SIGN: {
                this._stateRcdataLessThanSign(cp);
                break;
            }
            case State.RCDATA_END_TAG_OPEN: {
                this._stateRcdataEndTagOpen(cp);
                break;
            }
            case State.RCDATA_END_TAG_NAME: {
                this._stateRcdataEndTagName(cp);
                break;
            }
            case State.RAWTEXT_LESS_THAN_SIGN: {
                this._stateRawtextLessThanSign(cp);
                break;
            }
            case State.RAWTEXT_END_TAG_OPEN: {
                this._stateRawtextEndTagOpen(cp);
                break;
            }
            case State.RAWTEXT_END_TAG_NAME: {
                this._stateRawtextEndTagName(cp);
                break;
            }
            case State.SCRIPT_DATA_LESS_THAN_SIGN: {
                this._stateScriptDataLessThanSign(cp);
                break;
            }
            case State.SCRIPT_DATA_END_TAG_OPEN: {
                this._stateScriptDataEndTagOpen(cp);
                break;
            }
            case State.SCRIPT_DATA_END_TAG_NAME: {
                this._stateScriptDataEndTagName(cp);
                break;
            }
            case State.SCRIPT_DATA_ESCAPE_START: {
                this._stateScriptDataEscapeStart(cp);
                break;
            }
            case State.SCRIPT_DATA_ESCAPE_START_DASH: {
                this._stateScriptDataEscapeStartDash(cp);
                break;
            }
            case State.SCRIPT_DATA_ESCAPED: {
                this._stateScriptDataEscaped(cp);
                break;
            }
            case State.SCRIPT_DATA_ESCAPED_DASH: {
                this._stateScriptDataEscapedDash(cp);
                break;
            }
            case State.SCRIPT_DATA_ESCAPED_DASH_DASH: {
                this._stateScriptDataEscapedDashDash(cp);
                break;
            }
            case State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN: {
                this._stateScriptDataEscapedLessThanSign(cp);
                break;
            }
            case State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN: {
                this._stateScriptDataEscapedEndTagOpen(cp);
                break;
            }
            case State.SCRIPT_DATA_ESCAPED_END_TAG_NAME: {
                this._stateScriptDataEscapedEndTagName(cp);
                break;
            }
            case State.SCRIPT_DATA_DOUBLE_ESCAPE_START: {
                this._stateScriptDataDoubleEscapeStart(cp);
                break;
            }
            case State.SCRIPT_DATA_DOUBLE_ESCAPED: {
                this._stateScriptDataDoubleEscaped(cp);
                break;
            }
            case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH: {
                this._stateScriptDataDoubleEscapedDash(cp);
                break;
            }
            case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH: {
                this._stateScriptDataDoubleEscapedDashDash(cp);
                break;
            }
            case State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN: {
                this._stateScriptDataDoubleEscapedLessThanSign(cp);
                break;
            }
            case State.SCRIPT_DATA_DOUBLE_ESCAPE_END: {
                this._stateScriptDataDoubleEscapeEnd(cp);
                break;
            }
            case State.BEFORE_ATTRIBUTE_NAME: {
                this._stateBeforeAttributeName(cp);
                break;
            }
            case State.ATTRIBUTE_NAME: {
                this._stateAttributeName(cp);
                break;
            }
            case State.AFTER_ATTRIBUTE_NAME: {
                this._stateAfterAttributeName(cp);
                break;
            }
            case State.BEFORE_ATTRIBUTE_VALUE: {
                this._stateBeforeAttributeValue(cp);
                break;
            }
            case State.ATTRIBUTE_VALUE_DOUBLE_QUOTED: {
                this._stateAttributeValueDoubleQuoted(cp);
                break;
            }
            case State.ATTRIBUTE_VALUE_SINGLE_QUOTED: {
                this._stateAttributeValueSingleQuoted(cp);
                break;
            }
            case State.ATTRIBUTE_VALUE_UNQUOTED: {
                this._stateAttributeValueUnquoted(cp);
                break;
            }
            case State.AFTER_ATTRIBUTE_VALUE_QUOTED: {
                this._stateAfterAttributeValueQuoted(cp);
                break;
            }
            case State.SELF_CLOSING_START_TAG: {
                this._stateSelfClosingStartTag(cp);
                break;
            }
            case State.BOGUS_COMMENT: {
                this._stateBogusComment(cp);
                break;
            }
            case State.MARKUP_DECLARATION_OPEN: {
                this._stateMarkupDeclarationOpen(cp);
                break;
            }
            case State.COMMENT_START: {
                this._stateCommentStart(cp);
                break;
            }
            case State.COMMENT_START_DASH: {
                this._stateCommentStartDash(cp);
                break;
            }
            case State.COMMENT: {
                this._stateComment(cp);
                break;
            }
            case State.COMMENT_LESS_THAN_SIGN: {
                this._stateCommentLessThanSign(cp);
                break;
            }
            case State.COMMENT_LESS_THAN_SIGN_BANG: {
                this._stateCommentLessThanSignBang(cp);
                break;
            }
            case State.COMMENT_LESS_THAN_SIGN_BANG_DASH: {
                this._stateCommentLessThanSignBangDash(cp);
                break;
            }
            case State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH: {
                this._stateCommentLessThanSignBangDashDash(cp);
                break;
            }
            case State.COMMENT_END_DASH: {
                this._stateCommentEndDash(cp);
                break;
            }
            case State.COMMENT_END: {
                this._stateCommentEnd(cp);
                break;
            }
            case State.COMMENT_END_BANG: {
                this._stateCommentEndBang(cp);
                break;
            }
            case State.DOCTYPE: {
                this._stateDoctype(cp);
                break;
            }
            case State.BEFORE_DOCTYPE_NAME: {
                this._stateBeforeDoctypeName(cp);
                break;
            }
            case State.DOCTYPE_NAME: {
                this._stateDoctypeName(cp);
                break;
            }
            case State.AFTER_DOCTYPE_NAME: {
                this._stateAfterDoctypeName(cp);
                break;
            }
            case State.AFTER_DOCTYPE_PUBLIC_KEYWORD: {
                this._stateAfterDoctypePublicKeyword(cp);
                break;
            }
            case State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER: {
                this._stateBeforeDoctypePublicIdentifier(cp);
                break;
            }
            case State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED: {
                this._stateDoctypePublicIdentifierDoubleQuoted(cp);
                break;
            }
            case State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED: {
                this._stateDoctypePublicIdentifierSingleQuoted(cp);
                break;
            }
            case State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER: {
                this._stateAfterDoctypePublicIdentifier(cp);
                break;
            }
            case State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS: {
                this._stateBetweenDoctypePublicAndSystemIdentifiers(cp);
                break;
            }
            case State.AFTER_DOCTYPE_SYSTEM_KEYWORD: {
                this._stateAfterDoctypeSystemKeyword(cp);
                break;
            }
            case State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER: {
                this._stateBeforeDoctypeSystemIdentifier(cp);
                break;
            }
            case State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED: {
                this._stateDoctypeSystemIdentifierDoubleQuoted(cp);
                break;
            }
            case State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED: {
                this._stateDoctypeSystemIdentifierSingleQuoted(cp);
                break;
            }
            case State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER: {
                this._stateAfterDoctypeSystemIdentifier(cp);
                break;
            }
            case State.BOGUS_DOCTYPE: {
                this._stateBogusDoctype(cp);
                break;
            }
            case State.CDATA_SECTION: {
                this._stateCdataSection(cp);
                break;
            }
            case State.CDATA_SECTION_BRACKET: {
                this._stateCdataSectionBracket(cp);
                break;
            }
            case State.CDATA_SECTION_END: {
                this._stateCdataSectionEnd(cp);
                break;
            }
            case State.CHARACTER_REFERENCE: {
                this._stateCharacterReference(cp);
                break;
            }
            case State.NAMED_CHARACTER_REFERENCE: {
                this._stateNamedCharacterReference(cp);
                break;
            }
            case State.AMBIGUOUS_AMPERSAND: {
                this._stateAmbiguousAmpersand(cp);
                break;
            }
            case State.NUMERIC_CHARACTER_REFERENCE: {
                this._stateNumericCharacterReference(cp);
                break;
            }
            case State.HEXADEMICAL_CHARACTER_REFERENCE_START: {
                this._stateHexademicalCharacterReferenceStart(cp);
                break;
            }
            case State.HEXADEMICAL_CHARACTER_REFERENCE: {
                this._stateHexademicalCharacterReference(cp);
                break;
            }
            case State.DECIMAL_CHARACTER_REFERENCE: {
                this._stateDecimalCharacterReference(cp);
                break;
            }
            case State.NUMERIC_CHARACTER_REFERENCE_END: {
                this._stateNumericCharacterReferenceEnd(cp);
                break;
            }
            default: {
                throw new Error('Unknown state');
            }
        }
    }
    // State machine
    // Data state
    //------------------------------------------------------------------
    _stateData(cp) {
        switch (cp) {
            case CODE_POINTS.LESS_THAN_SIGN: {
                this.state = State.TAG_OPEN;
                break;
            }
            case CODE_POINTS.AMPERSAND: {
                this.returnState = State.DATA;
                this.state = State.CHARACTER_REFERENCE;
                break;
            }
            case CODE_POINTS.NULL: {
                this._err(ERR.unexpectedNullCharacter);
                this._emitCodePoint(cp);
                break;
            }
            case CODE_POINTS.EOF: {
                this._emitEOFToken();
                break;
            }
            default: {
                this._emitCodePoint(cp);
            }
        }
    }
    //  RCDATA state
    //------------------------------------------------------------------
    _stateRcdata(cp) {
        switch (cp) {
            case CODE_POINTS.AMPERSAND: {
                this.returnState = State.RCDATA;
                this.state = State.CHARACTER_REFERENCE;
                break;
            }
            case CODE_POINTS.LESS_THAN_SIGN: {
                this.state = State.RCDATA_LESS_THAN_SIGN;
                break;
            }
            case CODE_POINTS.NULL: {
                this._err(ERR.unexpectedNullCharacter);
                this._emitChars(REPLACEMENT_CHARACTER);
                break;
            }
            case CODE_POINTS.EOF: {
                this._emitEOFToken();
                break;
            }
            default: {
                this._emitCodePoint(cp);
            }
        }
    }
    // RAWTEXT state
    //------------------------------------------------------------------
    _stateRawtext(cp) {
        switch (cp) {
            case CODE_POINTS.LESS_THAN_SIGN: {
                this.state = State.RAWTEXT_LESS_THAN_SIGN;
                break;
            }
            case CODE_POINTS.NULL: {
                this._err(ERR.unexpectedNullCharacter);
                this._emitChars(REPLACEMENT_CHARACTER);
                break;
            }
            case CODE_POINTS.EOF: {
                this._emitEOFToken();
                break;
            }
            default: {
                this._emitCodePoint(cp);
            }
        }
    }
    // Script data state
    //------------------------------------------------------------------
    _stateScriptData(cp) {
        switch (cp) {
            case CODE_POINTS.LESS_THAN_SIGN: {
                this.state = State.SCRIPT_DATA_LESS_THAN_SIGN;
                break;
            }
            case CODE_POINTS.NULL: {
                this._err(ERR.unexpectedNullCharacter);
                this._emitChars(REPLACEMENT_CHARACTER);
                break;
            }
            case CODE_POINTS.EOF: {
                this._emitEOFToken();
                break;
            }
            default: {
                this._emitCodePoint(cp);
            }
        }
    }
    // PLAINTEXT state
    //------------------------------------------------------------------
    _statePlaintext(cp) {
        switch (cp) {
            case CODE_POINTS.NULL: {
                this._err(ERR.unexpectedNullCharacter);
                this._emitChars(REPLACEMENT_CHARACTER);
                break;
            }
            case CODE_POINTS.EOF: {
                this._emitEOFToken();
                break;
            }
            default: {
                this._emitCodePoint(cp);
            }
        }
    }
    // Tag open state
    //------------------------------------------------------------------
    _stateTagOpen(cp) {
        if (isAsciiLetter(cp)) {
            this._createStartTagToken();
            this.state = State.TAG_NAME;
            this._stateTagName(cp);
        } else
            switch (cp) {
                case CODE_POINTS.EXCLAMATION_MARK: {
                    this.state = State.MARKUP_DECLARATION_OPEN;
                    break;
                }
                case CODE_POINTS.SOLIDUS: {
                    this.state = State.END_TAG_OPEN;
                    break;
                }
                case CODE_POINTS.QUESTION_MARK: {
                    this._err(ERR.unexpectedQuestionMarkInsteadOfTagName);
                    this._createCommentToken(1);
                    this.state = State.BOGUS_COMMENT;
                    this._stateBogusComment(cp);
                    break;
                }
                case CODE_POINTS.EOF: {
                    this._err(ERR.eofBeforeTagName);
                    this._emitChars('<');
                    this._emitEOFToken();
                    break;
                }
                default: {
                    this._err(ERR.invalidFirstCharacterOfTagName);
                    this._emitChars('<');
                    this.state = State.DATA;
                    this._stateData(cp);
                }
            }
    }
    // End tag open state
    //------------------------------------------------------------------
    _stateEndTagOpen(cp) {
        if (isAsciiLetter(cp)) {
            this._createEndTagToken();
            this.state = State.TAG_NAME;
            this._stateTagName(cp);
        } else
            switch (cp) {
                case CODE_POINTS.GREATER_THAN_SIGN: {
                    this._err(ERR.missingEndTagName);
                    this.state = State.DATA;
                    break;
                }
                case CODE_POINTS.EOF: {
                    this._err(ERR.eofBeforeTagName);
                    this._emitChars('</');
                    this._emitEOFToken();
                    break;
                }
                default: {
                    this._err(ERR.invalidFirstCharacterOfTagName);
                    this._createCommentToken(2);
                    this.state = State.BOGUS_COMMENT;
                    this._stateBogusComment(cp);
                }
            }
    }
    // Tag name state
    //------------------------------------------------------------------
    _stateTagName(cp) {
        const token = this.currentToken;
        switch (cp) {
            case CODE_POINTS.SPACE:
            case CODE_POINTS.LINE_FEED:
            case CODE_POINTS.TABULATION:
            case CODE_POINTS.FORM_FEED: {
                this.state = State.BEFORE_ATTRIBUTE_NAME;
                break;
            }
            case CODE_POINTS.SOLIDUS: {
                this.state = State.SELF_CLOSING_START_TAG;
                break;
            }
            case CODE_POINTS.GREATER_THAN_SIGN: {
                this.state = State.DATA;
                this.emitCurrentTagToken();
                break;
            }
            case CODE_POINTS.NULL: {
                this._err(ERR.unexpectedNullCharacter);
                token.tagName += REPLACEMENT_CHARACTER;
                break;
            }
            case CODE_POINTS.EOF: {
                this._err(ERR.eofInTag);
                this._emitEOFToken();
                break;
            }
            default: {
                token.tagName += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);
            }
        }
    }
    // RCDATA less-than sign state
    //------------------------------------------------------------------
    _stateRcdataLessThanSign(cp) {
        if (cp === CODE_POINTS.SOLIDUS) {
            this.state = State.RCDATA_END_TAG_OPEN;
        } else {
            this._emitChars('<');
            this.state = State.RCDATA;
            this._stateRcdata(cp);
        }
    }
    // RCDATA end tag open state
    //------------------------------------------------------------------
    _stateRcdataEndTagOpen(cp) {
        if (isAsciiLetter(cp)) {
            this.state = State.RCDATA_END_TAG_NAME;
            this._stateRcdataEndTagName(cp);
        } else {
            this._emitChars('</');
            this.state = State.RCDATA;
            this._stateRcdata(cp);
        }
    }
    handleSpecialEndTag(_cp) {
        if (!this.preprocessor.startsWith(this.lastStartTagName, false)) {
            return !this._ensureHibernation();
        }
        this._createEndTagToken();
        const token = this.currentToken;
        token.tagName = this.lastStartTagName;
        const cp = this.preprocessor.peek(this.lastStartTagName.length);
        switch (cp) {
            case CODE_POINTS.SPACE:
            case CODE_POINTS.LINE_FEED:
            case CODE_POINTS.TABULATION:
            case CODE_POINTS.FORM_FEED: {
                this._advanceBy(this.lastStartTagName.length);
                this.state = State.BEFORE_ATTRIBUTE_NAME;
                return false;
            }
            case CODE_POINTS.SOLIDUS: {
                this._advanceBy(this.lastStartTagName.length);
                this.state = State.SELF_CLOSING_START_TAG;
                return false;
            }
            case CODE_POINTS.GREATER_THAN_SIGN: {
                this._advanceBy(this.lastStartTagName.length);
                this.emitCurrentTagToken();
                this.state = State.DATA;
                return false;
            }
            default: {
                return !this._ensureHibernation();
            }
        }
    }
    // RCDATA end tag name state
    //------------------------------------------------------------------
    _stateRcdataEndTagName(cp) {
        if (this.handleSpecialEndTag(cp)) {
            this._emitChars('</');
            this.state = State.RCDATA;
            this._stateRcdata(cp);
        }
    }
    // RAWTEXT less-than sign state
    //------------------------------------------------------------------
    _stateRawtextLessThanSign(cp) {
        if (cp === CODE_POINTS.SOLIDUS) {
            this.state = State.RAWTEXT_END_TAG_OPEN;
        } else {
            this._emitChars('<');
            this.state = State.RAWTEXT;
            this._stateRawtext(cp);
        }
    }
    // RAWTEXT end tag open state
    //------------------------------------------------------------------
    _stateRawtextEndTagOpen(cp) {
        if (isAsciiLetter(cp)) {
            this.state = State.RAWTEXT_END_TAG_NAME;
            this._stateRawtextEndTagName(cp);
        } else {
            this._emitChars('</');
            this.state = State.RAWTEXT;
            this._stateRawtext(cp);
        }
    }
    // RAWTEXT end tag name state
    //------------------------------------------------------------------
    _stateRawtextEndTagName(cp) {
        if (this.handleSpecialEndTag(cp)) {
            this._emitChars('</');
            this.state = State.RAWTEXT;
            this._stateRawtext(cp);
        }
    }
    // Script data less-than sign state
    //------------------------------------------------------------------
    _stateScriptDataLessThanSign(cp) {
        switch (cp) {
            case CODE_POINTS.SOLIDUS: {
                this.state = State.SCRIPT_DATA_END_TAG_OPEN;
                break;
            }
            case CODE_POINTS.EXCLAMATION_MARK: {
                this.state = State.SCRIPT_DATA_ESCAPE_START;
                this._emitChars('<!');
                break;
            }
            default: {
                this._emitChars('<');
                this.state = State.SCRIPT_DATA;
                this._stateScriptData(cp);
            }
        }
    }
    // Script data end tag open state
    //------------------------------------------------------------------
    _stateScriptDataEndTagOpen(cp) {
        if (isAsciiLetter(cp)) {
            this.state = State.SCRIPT_DATA_END_TAG_NAME;
            this._stateScriptDataEndTagName(cp);
        } else {
            this._emitChars('</');
            this.state = State.SCRIPT_DATA;
            this._stateScriptData(cp);
        }
    }
    // Script data end tag name state
    //------------------------------------------------------------------
    _stateScriptDataEndTagName(cp) {
        if (this.handleSpecialEndTag(cp)) {
            this._emitChars('</');
            this.state = State.SCRIPT_DATA;
            this._stateScriptData(cp);
        }
    }
    // Script data escape start state
    //------------------------------------------------------------------
    _stateScriptDataEscapeStart(cp) {
        if (cp === CODE_POINTS.HYPHEN_MINUS) {
            this.state = State.SCRIPT_DATA_ESCAPE_START_DASH;
            this._emitChars('-');
        } else {
            this.state = State.SCRIPT_DATA;
            this._stateScriptData(cp);
        }
    }
    // Script data escape start dash state
    //------------------------------------------------------------------
    _stateScriptDataEscapeStartDash(cp) {
        if (cp === CODE_POINTS.HYPHEN_MINUS) {
            this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;
            this._emitChars('-');
        } else {
            this.state = State.SCRIPT_DATA;
            this._stateScriptData(cp);
        }
    }
    // Script data escaped state
    //------------------------------------------------------------------
    _stateScriptDataEscaped(cp) {
        switch (cp) {
            case CODE_POINTS.HYPHEN_MINUS: {
                this.state = State.SCRIPT_DATA_ESCAPED_DASH;
                this._emitChars('-');
                break;
            }
            case CODE_POINTS.LESS_THAN_SIGN: {
                this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;
                break;
            }
            case CODE_POINTS.NULL: {
                this._err(ERR.unexpectedNullCharacter);
                this._emitChars(REPLACEMENT_CHARACTER);
                break;
            }
            case CODE_POINTS.EOF: {
                this._err(ERR.eofInScriptHtmlCommentLikeText);
                this._emitEOFToken();
                break;
            }
            default: {
                this._emitCodePoint(cp);
            }
        }
    }
    // Script data escaped dash state
    //------------------------------------------------------------------
    _stateScriptDataEscapedDash(cp) {
        switch (cp) {
            case CODE_POINTS.HYPHEN_MINUS: {
                this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;
                this._emitChars('-');
                break;
            }
            case CODE_POINTS.LESS_THAN_SIGN: {
                this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;
                break;
            }
            case CODE_POINTS.NULL: {
                this._err(ERR.unexpectedNullCharacter);
                this.state = State.SCRIPT_DATA_ESCAPED;
                this._emitChars(REPLACEMENT_CHARACTER);
                break;
            }
            case CODE_POINTS.EOF: {
                this._err(ERR.eofInScriptHtmlCommentLikeText);
                this._emitEOFToken();
                break;
            }
            default: {
                this.state = State.SCRIPT_DATA_ESCAPED;
                this._emitCodePoint(cp);
            }
        }
    }
    // Script data escaped dash dash state
    //------------------------------------------------------------------
    _stateScriptDataEscapedDashDash(cp) {
        switch (cp) {
            case CODE_POINTS.HYPHEN_MINUS: {
                this._emitChars('-');
                break;
            }
            case CODE_POINTS.LESS_THAN_SIGN: {
                this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;
                break;
            }
            case CODE_POINTS.GREATER_THAN_SIGN: {
                this.state = State.SCRIPT_DATA;
                this._emitChars('>');
                break;
            }
            case CODE_POINTS.NULL: {
                this._err(ERR.unexpectedNullCharacter);
                this.state = State.SCRIPT_DATA_ESCAPED;
                this._emitChars(REPLACEMENT_CHARACTER);
                break;
            }
            case CODE_POINTS.EOF: {
                this._err(ERR.eofInScriptHtmlCommentLikeText);
                this._emitEOFToken();
                break;
            }
            default: {
                this.state = State.SCRIPT_DATA_ESCAPED;
                this._emitCodePoint(cp);
            }
        }
    }
    // Script data escaped less-than sign state
    //------------------------------------------------------------------
    _stateScriptDataEscapedLessThanSign(cp) {
        if (cp === CODE_POINTS.SOLIDUS) {
            this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN;
        } else if (isAsciiLetter(cp)) {
            this._emitChars('<');
            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_START;
            this._stateScriptDataDoubleEscapeStart(cp);
        } else {
            this._emitChars('<');
            this.state = State.SCRIPT_DATA_ESCAPED;
            this._stateScriptDataEscaped(cp);
        }
    }
    // Script data escaped end tag open state
    //------------------------------------------------------------------
    _stateScriptDataEscapedEndTagOpen(cp) {
        if (isAsciiLetter(cp)) {
            this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_NAME;
            this._stateScriptDataEscapedEndTagName(cp);
        } else {
            this._emitChars('</');
            this.state = State.SCRIPT_DATA_ESCAPED;
            this._stateScriptDataEscaped(cp);
        }
    }
    // Script data escaped end tag name state
    //------------------------------------------------------------------
    _stateScriptDataEscapedEndTagName(cp) {
        if (this.handleSpecialEndTag(cp)) {
            this._emitChars('</');
            this.state = State.SCRIPT_DATA_ESCAPED;
            this._stateScriptDataEscaped(cp);
        }
    }
    // Script data double escape start state
    //------------------------------------------------------------------
    _stateScriptDataDoubleEscapeStart(cp) {
        if (
            this.preprocessor.startsWith(SEQUENCES.SCRIPT, false) &&
            isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek(SEQUENCES.SCRIPT.length))
        ) {
            this._emitCodePoint(cp);
            for (let i2 = 0; i2 < SEQUENCES.SCRIPT.length; i2++) {
                this._emitCodePoint(this._consume());
            }
            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;
        } else if (!this._ensureHibernation()) {
            this.state = State.SCRIPT_DATA_ESCAPED;
            this._stateScriptDataEscaped(cp);
        }
    }
    // Script data double escaped state
    //------------------------------------------------------------------
    _stateScriptDataDoubleEscaped(cp) {
        switch (cp) {
            case CODE_POINTS.HYPHEN_MINUS: {
                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH;
                this._emitChars('-');
                break;
            }
            case CODE_POINTS.LESS_THAN_SIGN: {
                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;
                this._emitChars('<');
                break;
            }
            case CODE_POINTS.NULL: {
                this._err(ERR.unexpectedNullCharacter);
                this._emitChars(REPLACEMENT_CHARACTER);
                break;
            }
            case CODE_POINTS.EOF: {
                this._err(ERR.eofInScriptHtmlCommentLikeText);
                this._emitEOFToken();
                break;
            }
            default: {
                this._emitCodePoint(cp);
            }
        }
    }
    // Script data double escaped dash state
    //------------------------------------------------------------------
    _stateScriptDataDoubleEscapedDash(cp) {
        switch (cp) {
            case CODE_POINTS.HYPHEN_MINUS: {
                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH;
                this._emitChars('-');
                break;
            }
            case CODE_POINTS.LESS_THAN_SIGN: {
                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;
                this._emitChars('<');
                break;
            }
            case CODE_POINTS.NULL: {
                this._err(ERR.unexpectedNullCharacter);
                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;
                this._emitChars(REPLACEMENT_CHARACTER);
                break;
            }
            case CODE_POINTS.EOF: {
                this._err(ERR.eofInScriptHtmlCommentLikeText);
                this._emitEOFToken();
                break;
            }
            default: {
                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;
                this._emitCodePoint(cp);
            }
        }
    }
    // Script data double escaped dash dash state
    //------------------------------------------------------------------
    _stateScriptDataDoubleEscapedDashDash(cp) {
        switch (cp) {
            case CODE_POINTS.HYPHEN_MINUS: {
                this._emitChars('-');
                break;
            }
            case CODE_POINTS.LESS_THAN_SIGN: {
                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;
                this._emitChars('<');
                break;
            }
            case CODE_POINTS.GREATER_THAN_SIGN: {
                this.state = State.SCRIPT_DATA;
                this._emitChars('>');
                break;
            }
            case CODE_POINTS.NULL: {
                this._err(ERR.unexpectedNullCharacter);
                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;
                this._emitChars(REPLACEMENT_CHARACTER);
                break;
            }
            case CODE_POINTS.EOF: {
                this._err(ERR.eofInScriptHtmlCommentLikeText);
                this._emitEOFToken();
                break;
            }
            default: {
                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;
                this._emitCodePoint(cp);
            }
        }
    }
    // Script data double escaped less-than sign state
    //------------------------------------------------------------------
    _stateScriptDataDoubleEscapedLessThanSign(cp) {
        if (cp === CODE_POINTS.SOLIDUS) {
            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_END;
            this._emitChars('/');
        } else {
            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;
            this._stateScriptDataDoubleEscaped(cp);
        }
    }
    // Script data double escape end state
    //------------------------------------------------------------------
    _stateScriptDataDoubleEscapeEnd(cp) {
        if (
            this.preprocessor.startsWith(SEQUENCES.SCRIPT, false) &&
            isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek(SEQUENCES.SCRIPT.length))
        ) {
            this._emitCodePoint(cp);
            for (let i2 = 0; i2 < SEQUENCES.SCRIPT.length; i2++) {
                this._emitCodePoint(this._consume());
            }
            this.state = State.SCRIPT_DATA_ESCAPED;
        } else if (!this._ensureHibernation()) {
            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;
            this._stateScriptDataDoubleEscaped(cp);
        }
    }
    // Before attribute name state
    //------------------------------------------------------------------
    _stateBeforeAttributeName(cp) {
        switch (cp) {
            case CODE_POINTS.SPACE:
            case CODE_POINTS.LINE_FEED:
            case CODE_POINTS.TABULATION:
            case CODE_POINTS.FORM_FEED: {
                break;
            }
            case CODE_POINTS.SOLIDUS:
            case CODE_POINTS.GREATER_THAN_SIGN:
            case CODE_POINTS.EOF: {
                this.state = State.AFTER_ATTRIBUTE_NAME;
                this._stateAfterAttributeName(cp);
                break;
            }
            case CODE_POINTS.EQUALS_SIGN: {
                this._err(ERR.unexpectedEqualsSignBeforeAttributeName);
                this._createAttr('=');
                this.state = State.ATTRIBUTE_NAME;
                break;
            }
            default: {
                this._createAttr('');
                this.state = State.ATTRIBUTE_NAME;
                this._stateAttributeName(cp);
            }
        }
    }
    // Attribute name state
    //------------------------------------------------------------------
    _stateAttributeName(cp) {
        switch (cp) {
            case CODE_POINTS.SPACE:
            case CODE_POINTS.LINE_FEED:
            case CODE_POINTS.TABULATION:
            case CODE_POINTS.FORM_FEED:
            case CODE_POINTS.SOLIDUS:
            case CODE_POINTS.GREATER_THAN_SIGN:
            case CODE_POINTS.EOF: {
                this._leaveAttrName();
                this.state = State.AFTER_ATTRIBUTE_NAME;
                this._stateAfterAttributeName(cp);
                break;
            }
            case CODE_POINTS.EQUALS_SIGN: {
                this._leaveAttrName();
                this.state = State.BEFORE_ATTRIBUTE_VALUE;
                break;
            }
            case CODE_POINTS.QUOTATION_MARK:
            case CODE_POINTS.APOSTROPHE:
            case CODE_POINTS.LESS_THAN_SIGN: {
                this._err(ERR.unexpectedCharacterInAttributeName);
                this.currentAttr.name += String.fromCodePoint(cp);
                break;
            }
            case CODE_POINTS.NULL: {
                this._err(ERR.unexpectedNullCharacter);
                this.currentAttr.name += REPLACEMENT_CHARACTER;
                break;
            }
            default: {
                this.currentAttr.name += String.fromCodePoint(
                    isAsciiUpper(cp) ? toAsciiLower(cp) : cp,
                );
            }
        }
    }
    // After attribute name state
    //------------------------------------------------------------------
    _stateAfterAttributeName(cp) {
        switch (cp) {
            case CODE_POINTS.SPACE:
            case CODE_POINTS.LINE_FEED:
            case CODE_POINTS.TABULATION:
            case CODE_POINTS.FORM_FEED: {
                break;
            }
            case CODE_POINTS.SOLIDUS: {
                this.state = State.SELF_CLOSING_START_TAG;
                break;
            }
            case CODE_POINTS.EQUALS_SIGN: {
                this.state = State.BEFORE_ATTRIBUTE_VALUE;
                break;
            }
            case CODE_POINTS.GREATER_THAN_SIGN: {
                this.state = State.DATA;
                this.emitCurrentTagToken();
                break;
            }
            case CODE_POINTS.EOF: {
                this._err(ERR.eofInTag);
                this._emitEOFToken();
                break;
            }
            default: {
                this._createAttr('');
                this.state = State.ATTRIBUTE_NAME;
                this._stateAttributeName(cp);
            }
        }
    }
    // Before attribute value state
    //------------------------------------------------------------------
    _stateBeforeAttributeValue(cp) {
        switch (cp) {
            case CODE_POINTS.SPACE:
            case CODE_POINTS.LINE_FEED:
            case CODE_POINTS.TABULATION:
            case CODE_POINTS.FORM_FEED: {
                break;
            }
            case CODE_POINTS.QUOTATION_MARK: {
                this.state = State.ATTRIBUTE_VALUE_DOUBLE_QUOTED;
                break;
            }
            case CODE_POINTS.APOSTROPHE: {
                this.state = State.ATTRIBUTE_VALUE_SINGLE_QUOTED;
                break;
            }
            case CODE_POINTS.GREATER_THAN_SIGN: {
                this._err(ERR.missingAttributeValue);
                this.state = State.DATA;
                this.emitCurrentTagToken();
                break;
            }
            default: {
                this.state = State.ATTRIBUTE_VALUE_UNQUOTED;
                this._stateAttributeValueUnquoted(cp);
            }
        }
    }
    // Attribute value (double-quoted) state
    //------------------------------------------------------------------
    _stateAttributeValueDoubleQuoted(cp) {
        switch (cp) {
            case CODE_POINTS.QUOTATION_MARK: {
                this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;
                break;
            }
            case CODE_POINTS.AMPERSAND: {
                this.returnState = State.ATTRIBUTE_VALUE_DOUBLE_QUOTED;
                this.state = State.CHARACTER_REFERENCE;
                break;
            }
            case CODE_POINTS.NULL: {
                this._err(ERR.unexpectedNullCharacter);
                this.currentAttr.value += REPLACEMENT_CHARACTER;
                break;
            }
            case CODE_POINTS.EOF: {
                this._err(ERR.eofInTag);
                this._emitEOFToken();
                break;
            }
            default: {
                this.currentAttr.value += String.fromCodePoint(cp);
            }
        }
    }
    // Attribute value (single-quoted) state
    //------------------------------------------------------------------
    _stateAttributeValueSingleQuoted(cp) {
        switch (cp) {
            case CODE_POINTS.APOSTROPHE: {
                this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;
                break;
            }
            case CODE_POINTS.AMPERSAND: {
                this.returnState = State.ATTRIBUTE_VALUE_SINGLE_QUOTED;
                this.state = State.CHARACTER_REFERENCE;
                break;
            }
            case CODE_POINTS.NULL: {
                this._err(ERR.unexpectedNullCharacter);
                this.currentAttr.value += REPLACEMENT_CHARACTER;
                break;
            }
            case CODE_POINTS.EOF: {
                this._err(ERR.eofInTag);
                this._emitEOFToken();
                break;
            }
            default: {
                this.currentAttr.value += String.fromCodePoint(cp);
            }
        }
    }
    // Attribute value (unquoted) state
    //------------------------------------------------------------------
    _stateAttributeValueUnquoted(cp) {
        switch (cp) {
            case CODE_POINTS.SPACE:
            case CODE_POINTS.LINE_FEED:
            case CODE_POINTS.TABULATION:
            case CODE_POINTS.FORM_FEED: {
                this._leaveAttrValue();
                this.state = State.BEFORE_ATTRIBUTE_NAME;
                break;
            }
            case CODE_POINTS.AMPERSAND: {
                this.returnState = State.ATTRIBUTE_VALUE_UNQUOTED;
                this.state = State.CHARACTER_REFERENCE;
                break;
            }
            case CODE_POINTS.GREATER_THAN_SIGN: {
                this._leaveAttrValue();
                this.state = State.DATA;
                this.emitCurrentTagToken();
                break;
            }
            case CODE_POINTS.NULL: {
                this._err(ERR.unexpectedNullCharacter);
                this.currentAttr.value += REPLACEMENT_CHARACTER;
                break;
            }
            case CODE_POINTS.QUOTATION_MARK:
            case CODE_POINTS.APOSTROPHE:
            case CODE_POINTS.LESS_THAN_SIGN:
            case CODE_POINTS.EQUALS_SIGN:
            case CODE_POINTS.GRAVE_ACCENT: {
                this._err(ERR.unexpectedCharacterInUnquotedAttributeValue);
                this.currentAttr.value += String.fromCodePoint(cp);
                break;
            }
            case CODE_POINTS.EOF: {
                this._err(ERR.eofInTag);
                this._emitEOFToken();
                break;
            }
            default: {
                this.currentAttr.value += String.fromCodePoint(cp);
            }
        }
    }
    // After attribute value (quoted) state
    //------------------------------------------------------------------
    _stateAfterAttributeValueQuoted(cp) {
        switch (cp) {
            case CODE_POINTS.SPACE:
            case CODE_POINTS.LINE_FEED:
            case CODE_POINTS.TABULATION:
            case CODE_POINTS.FORM_FEED: {
                this._leaveAttrValue();
                this.state = State.BEFORE_ATTRIBUTE_NAME;
                break;
            }
            case CODE_POINTS.SOLIDUS: {
                this._leaveAttrValue();
                this.state = State.SELF_CLOSING_START_TAG;
                break;
            }
            case CODE_POINTS.GREATER_THAN_SIGN: {
                this._leaveAttrValue();
                this.state = State.DATA;
                this.emitCurrentTagToken();
                break;
            }
            case CODE_POINTS.EOF: {
                this._err(ERR.eofInTag);
                this._emitEOFToken();
                break;
            }
            default: {
                this._err(ERR.missingWhitespaceBetweenAttributes);
                this.state = State.BEFORE_ATTRIBUTE_NAME;
                this._stateBeforeAttributeName(cp);
            }
        }
    }
    // Self-closing start tag state
    //------------------------------------------------------------------
    _stateSelfClosingStartTag(cp) {
        switch (cp) {
            case CODE_POINTS.GREATER_THAN_SIGN: {
                const token = this.currentToken;
                token.selfClosing = true;
                this.state = State.DATA;
                this.emitCurrentTagToken();
                break;
            }
            case CODE_POINTS.EOF: {
                this._err(ERR.eofInTag);
                this._emitEOFToken();
                break;
            }
            default: {
                this._err(ERR.unexpectedSolidusInTag);
                this.state = State.BEFORE_ATTRIBUTE_NAME;
                this._stateBeforeAttributeName(cp);
            }
        }
    }
    // Bogus comment state
    //------------------------------------------------------------------
    _stateBogusComment(cp) {
        const token = this.currentToken;
        switch (cp) {
            case CODE_POINTS.GREATER_THAN_SIGN: {
                this.state = State.DATA;
                this.emitCurrentComment(token);
                break;
            }
            case CODE_POINTS.EOF: {
                this.emitCurrentComment(token);
                this._emitEOFToken();
                break;
            }
            case CODE_POINTS.NULL: {
                this._err(ERR.unexpectedNullCharacter);
                token.data += REPLACEMENT_CHARACTER;
                break;
            }
            default: {
                token.data += String.fromCodePoint(cp);
            }
        }
    }
    // Markup declaration open state
    //------------------------------------------------------------------
    _stateMarkupDeclarationOpen(cp) {
        if (this._consumeSequenceIfMatch(SEQUENCES.DASH_DASH, true)) {
            this._createCommentToken(SEQUENCES.DASH_DASH.length + 1);
            this.state = State.COMMENT_START;
        } else if (this._consumeSequenceIfMatch(SEQUENCES.DOCTYPE, false)) {
            this.currentLocation = this.getCurrentLocation(SEQUENCES.DOCTYPE.length + 1);
            this.state = State.DOCTYPE;
        } else if (this._consumeSequenceIfMatch(SEQUENCES.CDATA_START, true)) {
            if (this.inForeignNode) {
                this.state = State.CDATA_SECTION;
            } else {
                this._err(ERR.cdataInHtmlContent);
                this._createCommentToken(SEQUENCES.CDATA_START.length + 1);
                this.currentToken.data = '[CDATA[';
                this.state = State.BOGUS_COMMENT;
            }
        } else if (!this._ensureHibernation()) {
            this._err(ERR.incorrectlyOpenedComment);
            this._createCommentToken(2);
            this.state = State.BOGUS_COMMENT;
            this._stateBogusComment(cp);
        }
    }
    // Comment start state
    //------------------------------------------------------------------
    _stateCommentStart(cp) {
        switch (cp) {
            case CODE_POINTS.HYPHEN_MINUS: {
                this.state = State.COMMENT_START_DASH;
                break;
            }
            case CODE_POINTS.GREATER_THAN_SIGN: {
                this._err(ERR.abruptClosingOfEmptyComment);
                this.state = State.DATA;
                const token = this.currentToken;
                this.emitCurrentComment(token);
                break;
            }
            default: {
                this.state = State.COMMENT;
                this._stateComment(cp);
            }
        }
    }
    // Comment start dash state
    //------------------------------------------------------------------
    _stateCommentStartDash(cp) {
        const token = this.currentToken;
        switch (cp) {
            case CODE_POINTS.HYPHEN_MINUS: {
                this.state = State.COMMENT_END;
                break;
            }
            case CODE_POINTS.GREATER_THAN_SIGN: {
                this._err(ERR.abruptClosingOfEmptyComment);
                this.state = State.DATA;
                this.emitCurrentComment(token);
                break;
            }
            case CODE_POINTS.EOF: {
                this._err(ERR.eofInComment);
                this.emitCurrentComment(token);
                this._emitEOFToken();
                break;
            }
            default: {
                token.data += '-';
                this.state = State.COMMENT;
                this._stateComment(cp);
            }
        }
    }
    // Comment state
    //------------------------------------------------------------------
    _stateComment(cp) {
        const token = this.currentToken;
        switch (cp) {
            case CODE_POINTS.HYPHEN_MINUS: {
                this.state = State.COMMENT_END_DASH;
                break;
            }
            case CODE_POINTS.LESS_THAN_SIGN: {
                token.data += '<';
                this.state = State.COMMENT_LESS_THAN_SIGN;
                break;
            }
            case CODE_POINTS.NULL: {
                this._err(ERR.unexpectedNullCharacter);
                token.data += REPLACEMENT_CHARACTER;
                break;
            }
            case CODE_POINTS.EOF: {
                this._err(ERR.eofInComment);
                this.emitCurrentComment(token);
                this._emitEOFToken();
                break;
            }
            default: {
                token.data += String.fromCodePoint(cp);
            }
        }
    }
    // Comment less-than sign state
    //------------------------------------------------------------------
    _stateCommentLessThanSign(cp) {
        const token = this.currentToken;
        switch (cp) {
            case CODE_POINTS.EXCLAMATION_MARK: {
                token.data += '!';
                this.state = State.COMMENT_LESS_THAN_SIGN_BANG;
                break;
            }
            case CODE_POINTS.LESS_THAN_SIGN: {
                token.data += '<';
                break;
            }
            default: {
                this.state = State.COMMENT;
                this._stateComment(cp);
            }
        }
    }
    // Comment less-than sign bang state
    //------------------------------------------------------------------
    _stateCommentLessThanSignBang(cp) {
        if (cp === CODE_POINTS.HYPHEN_MINUS) {
            this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH;
        } else {
            this.state = State.COMMENT;
            this._stateComment(cp);
        }
    }
    // Comment less-than sign bang dash state
    //------------------------------------------------------------------
    _stateCommentLessThanSignBangDash(cp) {
        if (cp === CODE_POINTS.HYPHEN_MINUS) {
            this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH;
        } else {
            this.state = State.COMMENT_END_DASH;
            this._stateCommentEndDash(cp);
        }
    }
    // Comment less-than sign bang dash dash state
    //------------------------------------------------------------------
    _stateCommentLessThanSignBangDashDash(cp) {
        if (cp !== CODE_POINTS.GREATER_THAN_SIGN && cp !== CODE_POINTS.EOF) {
            this._err(ERR.nestedComment);
        }
        this.state = State.COMMENT_END;
        this._stateCommentEnd(cp);
    }
    // Comment end dash state
    //------------------------------------------------------------------
    _stateCommentEndDash(cp) {
        const token = this.currentToken;
        switch (cp) {
            case CODE_POINTS.HYPHEN_MINUS: {
                this.state = State.COMMENT_END;
                break;
            }
            case CODE_POINTS.EOF: {
                this._err(ERR.eofInComment);
                this.emitCurrentComment(token);
                this._emitEOFToken();
                break;
            }
            default: {
                token.data += '-';
                this.state = State.COMMENT;
                this._stateComment(cp);
            }
        }
    }
    // Comment end state
    //------------------------------------------------------------------
    _stateCommentEnd(cp) {
        const token = this.currentToken;
        switch (cp) {
            case CODE_POINTS.GREATER_THAN_SIGN: {
                this.state = State.DATA;
                this.emitCurrentComment(token);
                break;
            }
            case CODE_POINTS.EXCLAMATION_MARK: {
                this.state = State.COMMENT_END_BANG;
                break;
            }
            case CODE_POINTS.HYPHEN_MINUS: {
                token.data += '-';
                break;
            }
            case CODE_POINTS.EOF: {
                this._err(ERR.eofInComment);
                this.emitCurrentComment(token);
                this._emitEOFToken();
                break;
            }
            default: {
                token.data += '--';
                this.state = State.COMMENT;
                this._stateComment(cp);
            }
        }
    }
    // Comment end bang state
    //------------------------------------------------------------------
    _stateCommentEndBang(cp) {
        const token = this.currentToken;
        switch (cp) {
            case CODE_POINTS.HYPHEN_MINUS: {
                token.data += '--!';
                this.state = State.COMMENT_END_DASH;
                break;
            }
            case CODE_POINTS.GREATER_THAN_SIGN: {
                this._err(ERR.incorrectlyClosedComment);
                this.state = State.DATA;
                this.emitCurrentComment(token);
                break;
            }
            case CODE_POINTS.EOF: {
                this._err(ERR.eofInComment);
                this.emitCurrentComment(token);
                this._emitEOFToken();
                break;
            }
            default: {
                token.data += '--!';
                this.state = State.COMMENT;
                this._stateComment(cp);
            }
        }
    }
    // DOCTYPE state
    //------------------------------------------------------------------
    _stateDoctype(cp) {
        switch (cp) {
            case CODE_POINTS.SPACE:
            case CODE_POINTS.LINE_FEED:
            case CODE_POINTS.TABULATION:
            case CODE_POINTS.FORM_FEED: {
                this.state = State.BEFORE_DOCTYPE_NAME;
                break;
            }
            case CODE_POINTS.GREATER_THAN_SIGN: {
                this.state = State.BEFORE_DOCTYPE_NAME;
                this._stateBeforeDoctypeName(cp);
                break;
            }
            case CODE_POINTS.EOF: {
                this._err(ERR.eofInDoctype);
                this._createDoctypeToken(null);
                const token = this.currentToken;
                token.forceQuirks = true;
                this.emitCurrentDoctype(token);
                this._emitEOFToken();
                break;
            }
            default: {
                this._err(ERR.missingWhitespaceBeforeDoctypeName);
                this.state = State.BEFORE_DOCTYPE_NAME;
                this._stateBeforeDoctypeName(cp);
            }
        }
    }
    // Before DOCTYPE name state
    //------------------------------------------------------------------
    _stateBeforeDoctypeName(cp) {
        if (isAsciiUpper(cp)) {
            this._createDoctypeToken(String.fromCharCode(toAsciiLower(cp)));
            this.state = State.DOCTYPE_NAME;
        } else
            switch (cp) {
                case CODE_POINTS.SPACE:
                case CODE_POINTS.LINE_FEED:
                case CODE_POINTS.TABULATION:
                case CODE_POINTS.FORM_FEED: {
                    break;
                }
                case CODE_POINTS.NULL: {
                    this._err(ERR.unexpectedNullCharacter);
                    this._createDoctypeToken(REPLACEMENT_CHARACTER);
                    this.state = State.DOCTYPE_NAME;
                    break;
                }
                case CODE_POINTS.GREATER_THAN_SIGN: {
                    this._err(ERR.missingDoctypeName);
                    this._createDoctypeToken(null);
                    const token = this.currentToken;
                    token.forceQuirks = true;
                    this.emitCurrentDoctype(token);
                    this.state = State.DATA;
                    break;
                }
                case CODE_POINTS.EOF: {
                    this._err(ERR.eofInDoctype);
                    this._createDoctypeToken(null);
                    const token = this.currentToken;
                    token.forceQuirks = true;
                    this.emitCurrentDoctype(token);
                    this._emitEOFToken();
                    break;
                }
                default: {
                    this._createDoctypeToken(String.fromCodePoint(cp));
                    this.state = State.DOCTYPE_NAME;
                }
            }
    }
    // DOCTYPE name state
    //------------------------------------------------------------------
    _stateDoctypeName(cp) {
        const token = this.currentToken;
        switch (cp) {
            case CODE_POINTS.SPACE:
            case CODE_POINTS.LINE_FEED:
            case CODE_POINTS.TABULATION:
            case CODE_POINTS.FORM_FEED: {
                this.state = State.AFTER_DOCTYPE_NAME;
                break;
            }
            case CODE_POINTS.GREATER_THAN_SIGN: {
                this.state = State.DATA;
                this.emitCurrentDoctype(token);
                break;
            }
            case CODE_POINTS.NULL: {
                this._err(ERR.unexpectedNullCharacter);
                token.name += REPLACEMENT_CHARACTER;
                break;
            }
            case CODE_POINTS.EOF: {
                this._err(ERR.eofInDoctype);
                token.forceQuirks = true;
                this.emitCurrentDoctype(token);
                this._emitEOFToken();
                break;
            }
            default: {
                token.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);
            }
        }
    }
    // After DOCTYPE name state
    //------------------------------------------------------------------
    _stateAfterDoctypeName(cp) {
        const token = this.currentToken;
        switch (cp) {
            case CODE_POINTS.SPACE:
            case CODE_POINTS.LINE_FEED:
            case CODE_POINTS.TABULATION:
            case CODE_POINTS.FORM_FEED: {
                break;
            }
            case CODE_POINTS.GREATER_THAN_SIGN: {
                this.state = State.DATA;
                this.emitCurrentDoctype(token);
                break;
            }
            case CODE_POINTS.EOF: {
                this._err(ERR.eofInDoctype);
                token.forceQuirks = true;
                this.emitCurrentDoctype(token);
                this._emitEOFToken();
                break;
            }
            default: {
                if (this._consumeSequenceIfMatch(SEQUENCES.PUBLIC, false)) {
                    this.state = State.AFTER_DOCTYPE_PUBLIC_KEYWORD;
                } else if (this._consumeSequenceIfMatch(SEQUENCES.SYSTEM, false)) {
                    this.state = State.AFTER_DOCTYPE_SYSTEM_KEYWORD;
                } else if (!this._ensureHibernation()) {
                    this._err(ERR.invalidCharacterSequenceAfterDoctypeName);
                    token.forceQuirks = true;
                    this.state = State.BOGUS_DOCTYPE;
                    this._stateBogusDoctype(cp);
                }
            }
        }
    }
    // After DOCTYPE public keyword state
    //------------------------------------------------------------------
    _stateAfterDoctypePublicKeyword(cp) {
        const token = this.currentToken;
        switch (cp) {
            case CODE_POINTS.SPACE:
            case CODE_POINTS.LINE_FEED:
            case CODE_POINTS.TABULATION:
            case CODE_POINTS.FORM_FEED: {
                this.state = State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER;
                break;
            }
            case CODE_POINTS.QUOTATION_MARK: {
                this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);
                token.publicId = '';
                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;
                break;
            }
            case CODE_POINTS.APOSTROPHE: {
                this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);
                token.publicId = '';
                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;
                break;
            }
            case CODE_POINTS.GREATER_THAN_SIGN: {
                this._err(ERR.missingDoctypePublicIdentifier);
                token.forceQuirks = true;
                this.state = State.DATA;
                this.emitCurrentDoctype(token);
                break;
            }
            case CODE_POINTS.EOF: {
                this._err(ERR.eofInDoctype);
                token.forceQuirks = true;
                this.emitCurrentDoctype(token);
                this._emitEOFToken();
                break;
            }
            default: {
                this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);
                token.forceQuirks = true;
                this.state = State.BOGUS_DOCTYPE;
                this._stateBogusDoctype(cp);
            }
        }
    }
    // Before DOCTYPE public identifier state
    //------------------------------------------------------------------
    _stateBeforeDoctypePublicIdentifier(cp) {
        const token = this.currentToken;
        switch (cp) {
            case CODE_POINTS.SPACE:
            case CODE_POINTS.LINE_FEED:
            case CODE_POINTS.TABULATION:
            case CODE_POINTS.FORM_FEED: {
                break;
            }
            case CODE_POINTS.QUOTATION_MARK: {
                token.publicId = '';
                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;
                break;
            }
            case CODE_POINTS.APOSTROPHE: {
                token.publicId = '';
                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;
                break;
            }
            case CODE_POINTS.GREATER_THAN_SIGN: {
                this._err(ERR.missingDoctypePublicIdentifier);
                token.forceQuirks = true;
                this.state = State.DATA;
                this.emitCurrentDoctype(token);
                break;
            }
            case CODE_POINTS.EOF: {
                this._err(ERR.eofInDoctype);
                token.forceQuirks = true;
                this.emitCurrentDoctype(token);
                this._emitEOFToken();
                break;
            }
            default: {
                this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);
                token.forceQuirks = true;
                this.state = State.BOGUS_DOCTYPE;
                this._stateBogusDoctype(cp);
            }
        }
    }
    // DOCTYPE public identifier (double-quoted) state
    //------------------------------------------------------------------
    _stateDoctypePublicIdentifierDoubleQuoted(cp) {
        const token = this.currentToken;
        switch (cp) {
            case CODE_POINTS.QUOTATION_MARK: {
                this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;
                break;
            }
            case CODE_POINTS.NULL: {
                this._err(ERR.unexpectedNullCharacter);
                token.publicId += REPLACEMENT_CHARACTER;
                break;
            }
            case CODE_POINTS.GREATER_THAN_SIGN: {
                this._err(ERR.abruptDoctypePublicIdentifier);
                token.forceQuirks = true;
                this.emitCurrentDoctype(token);
                this.state = State.DATA;
                break;
            }
            case CODE_POINTS.EOF: {
                this._err(ERR.eofInDoctype);
                token.forceQuirks = true;
                this.emitCurrentDoctype(token);
                this._emitEOFToken();
                break;
            }
            default: {
                token.publicId += String.fromCodePoint(cp);
            }
        }
    }
    // DOCTYPE public identifier (single-quoted) state
    //------------------------------------------------------------------
    _stateDoctypePublicIdentifierSingleQuoted(cp) {
        const token = this.currentToken;
        switch (cp) {
            case CODE_POINTS.APOSTROPHE: {
                this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;
                break;
            }
            case CODE_POINTS.NULL: {
                this._err(ERR.unexpectedNullCharacter);
                token.publicId += REPLACEMENT_CHARACTER;
                break;
            }
            case CODE_POINTS.GREATER_THAN_SIGN: {
                this._err(ERR.abruptDoctypePublicIdentifier);
                token.forceQuirks = true;
                this.emitCurrentDoctype(token);
                this.state = State.DATA;
                break;
            }
            case CODE_POINTS.EOF: {
                this._err(ERR.eofInDoctype);
                token.forceQuirks = true;
                this.emitCurrentDoctype(token);
                this._emitEOFToken();
                break;
            }
            default: {
                token.publicId += String.fromCodePoint(cp);
            }
        }
    }
    // After DOCTYPE public identifier state
    //------------------------------------------------------------------
    _stateAfterDoctypePublicIdentifier(cp) {
        const token = this.currentToken;
        switch (cp) {
            case CODE_POINTS.SPACE:
            case CODE_POINTS.LINE_FEED:
            case CODE_POINTS.TABULATION:
            case CODE_POINTS.FORM_FEED: {
                this.state = State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS;
                break;
            }
            case CODE_POINTS.GREATER_THAN_SIGN: {
                this.state = State.DATA;
                this.emitCurrentDoctype(token);
                break;
            }
            case CODE_POINTS.QUOTATION_MARK: {
                this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);
                token.systemId = '';
                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
                break;
            }
            case CODE_POINTS.APOSTROPHE: {
                this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);
                token.systemId = '';
                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
                break;
            }
            case CODE_POINTS.EOF: {
                this._err(ERR.eofInDoctype);
                token.forceQuirks = true;
                this.emitCurrentDoctype(token);
                this._emitEOFToken();
                break;
            }
            default: {
                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
                token.forceQuirks = true;
                this.state = State.BOGUS_DOCTYPE;
                this._stateBogusDoctype(cp);
            }
        }
    }
    // Between DOCTYPE public and system identifiers state
    //------------------------------------------------------------------
    _stateBetweenDoctypePublicAndSystemIdentifiers(cp) {
        const token = this.currentToken;
        switch (cp) {
            case CODE_POINTS.SPACE:
            case CODE_POINTS.LINE_FEED:
            case CODE_POINTS.TABULATION:
            case CODE_POINTS.FORM_FEED: {
                break;
            }
            case CODE_POINTS.GREATER_THAN_SIGN: {
                this.emitCurrentDoctype(token);
                this.state = State.DATA;
                break;
            }
            case CODE_POINTS.QUOTATION_MARK: {
                token.systemId = '';
                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
                break;
            }
            case CODE_POINTS.APOSTROPHE: {
                token.systemId = '';
                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
                break;
            }
            case CODE_POINTS.EOF: {
                this._err(ERR.eofInDoctype);
                token.forceQuirks = true;
                this.emitCurrentDoctype(token);
                this._emitEOFToken();
                break;
            }
            default: {
                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
                token.forceQuirks = true;
                this.state = State.BOGUS_DOCTYPE;
                this._stateBogusDoctype(cp);
            }
        }
    }
    // After DOCTYPE system keyword state
    //------------------------------------------------------------------
    _stateAfterDoctypeSystemKeyword(cp) {
        const token = this.currentToken;
        switch (cp) {
            case CODE_POINTS.SPACE:
            case CODE_POINTS.LINE_FEED:
            case CODE_POINTS.TABULATION:
            case CODE_POINTS.FORM_FEED: {
                this.state = State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER;
                break;
            }
            case CODE_POINTS.QUOTATION_MARK: {
                this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);
                token.systemId = '';
                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
                break;
            }
            case CODE_POINTS.APOSTROPHE: {
                this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);
                token.systemId = '';
                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
                break;
            }
            case CODE_POINTS.GREATER_THAN_SIGN: {
                this._err(ERR.missingDoctypeSystemIdentifier);
                token.forceQuirks = true;
                this.state = State.DATA;
                this.emitCurrentDoctype(token);
                break;
            }
            case CODE_POINTS.EOF: {
                this._err(ERR.eofInDoctype);
                token.forceQuirks = true;
                this.emitCurrentDoctype(token);
                this._emitEOFToken();
                break;
            }
            default: {
                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
                token.forceQuirks = true;
                this.state = State.BOGUS_DOCTYPE;
                this._stateBogusDoctype(cp);
            }
        }
    }
    // Before DOCTYPE system identifier state
    //------------------------------------------------------------------
    _stateBeforeDoctypeSystemIdentifier(cp) {
        const token = this.currentToken;
        switch (cp) {
            case CODE_POINTS.SPACE:
            case CODE_POINTS.LINE_FEED:
            case CODE_POINTS.TABULATION:
            case CODE_POINTS.FORM_FEED: {
                break;
            }
            case CODE_POINTS.QUOTATION_MARK: {
                token.systemId = '';
                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;
                break;
            }
            case CODE_POINTS.APOSTROPHE: {
                token.systemId = '';
                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;
                break;
            }
            case CODE_POINTS.GREATER_THAN_SIGN: {
                this._err(ERR.missingDoctypeSystemIdentifier);
                token.forceQuirks = true;
                this.state = State.DATA;
                this.emitCurrentDoctype(token);
                break;
            }
            case CODE_POINTS.EOF: {
                this._err(ERR.eofInDoctype);
                token.forceQuirks = true;
                this.emitCurrentDoctype(token);
                this._emitEOFToken();
                break;
            }
            default: {
                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);
                token.forceQuirks = true;
                this.state = State.BOGUS_DOCTYPE;
                this._stateBogusDoctype(cp);
            }
        }
    }
    // DOCTYPE system identifier (double-quoted) state
    //------------------------------------------------------------------
    _stateDoctypeSystemIdentifierDoubleQuoted(cp) {
        const token = this.currentToken;
        switch (cp) {
            case CODE_POINTS.QUOTATION_MARK: {
                this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;
                break;
            }
            case CODE_POINTS.NULL: {
                this._err(ERR.unexpectedNullCharacter);
                token.systemId += REPLACEMENT_CHARACTER;
                break;
            }
            case CODE_POINTS.GREATER_THAN_SIGN: {
                this._err(ERR.abruptDoctypeSystemIdentifier);
                token.forceQuirks = true;
                this.emitCurrentDoctype(token);
                this.state = State.DATA;
                break;
            }
            case CODE_POINTS.EOF: {
                this._err(ERR.eofInDoctype);
                token.forceQuirks = true;
                this.emitCurrentDoctype(token);
                this._emitEOFToken();
                break;
            }
            default: {
                token.systemId += String.fromCodePoint(cp);
            }
        }
    }
    // DOCTYPE system identifier (single-quoted) state
    //------------------------------------------------------------------
    _stateDoctypeSystemIdentifierSingleQuoted(cp) {
        const token = this.currentToken;
        switch (cp) {
            case CODE_POINTS.APOSTROPHE: {
                this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;
                break;
            }
            case CODE_POINTS.NULL: {
                this._err(ERR.unexpectedNullCharacter);
                token.systemId += REPLACEMENT_CHARACTER;
                break;
            }
            case CODE_POINTS.GREATER_THAN_SIGN: {
                this._err(ERR.abruptDoctypeSystemIdentifier);
                token.forceQuirks = true;
                this.emitCurrentDoctype(token);
                this.state = State.DATA;
                break;
            }
            case CODE_POINTS.EOF: {
                this._err(ERR.eofInDoctype);
                token.forceQuirks = true;
                this.emitCurrentDoctype(token);
                this._emitEOFToken();
                break;
            }
            default: {
                token.systemId += String.fromCodePoint(cp);
            }
        }
    }
    // After DOCTYPE system identifier state
    //------------------------------------------------------------------
    _stateAfterDoctypeSystemIdentifier(cp) {
        const token = this.currentToken;
        switch (cp) {
            case CODE_POINTS.SPACE:
            case CODE_POINTS.LINE_FEED:
            case CODE_POINTS.TABULATION:
            case CODE_POINTS.FORM_FEED: {
                break;
            }
            case CODE_POINTS.GREATER_THAN_SIGN: {
                this.emitCurrentDoctype(token);
                this.state = State.DATA;
                break;
            }
            case CODE_POINTS.EOF: {
                this._err(ERR.eofInDoctype);
                token.forceQuirks = true;
                this.emitCurrentDoctype(token);
                this._emitEOFToken();
                break;
            }
            default: {
                this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);
                this.state = State.BOGUS_DOCTYPE;
                this._stateBogusDoctype(cp);
            }
        }
    }
    // Bogus DOCTYPE state
    //------------------------------------------------------------------
    _stateBogusDoctype(cp) {
        const token = this.currentToken;
        switch (cp) {
            case CODE_POINTS.GREATER_THAN_SIGN: {
                this.emitCurrentDoctype(token);
                this.state = State.DATA;
                break;
            }
            case CODE_POINTS.NULL: {
                this._err(ERR.unexpectedNullCharacter);
                break;
            }
            case CODE_POINTS.EOF: {
                this.emitCurrentDoctype(token);
                this._emitEOFToken();
                break;
            }
            default:
        }
    }
    // CDATA section state
    //------------------------------------------------------------------
    _stateCdataSection(cp) {
        switch (cp) {
            case CODE_POINTS.RIGHT_SQUARE_BRACKET: {
                this.state = State.CDATA_SECTION_BRACKET;
                break;
            }
            case CODE_POINTS.EOF: {
                this._err(ERR.eofInCdata);
                this._emitEOFToken();
                break;
            }
            default: {
                this._emitCodePoint(cp);
            }
        }
    }
    // CDATA section bracket state
    //------------------------------------------------------------------
    _stateCdataSectionBracket(cp) {
        if (cp === CODE_POINTS.RIGHT_SQUARE_BRACKET) {
            this.state = State.CDATA_SECTION_END;
        } else {
            this._emitChars(']');
            this.state = State.CDATA_SECTION;
            this._stateCdataSection(cp);
        }
    }
    // CDATA section end state
    //------------------------------------------------------------------
    _stateCdataSectionEnd(cp) {
        switch (cp) {
            case CODE_POINTS.GREATER_THAN_SIGN: {
                this.state = State.DATA;
                break;
            }
            case CODE_POINTS.RIGHT_SQUARE_BRACKET: {
                this._emitChars(']');
                break;
            }
            default: {
                this._emitChars(']]');
                this.state = State.CDATA_SECTION;
                this._stateCdataSection(cp);
            }
        }
    }
    // Character reference state
    //------------------------------------------------------------------
    _stateCharacterReference(cp) {
        if (cp === CODE_POINTS.NUMBER_SIGN) {
            this.state = State.NUMERIC_CHARACTER_REFERENCE;
        } else if (isAsciiAlphaNumeric2(cp)) {
            this.state = State.NAMED_CHARACTER_REFERENCE;
            this._stateNamedCharacterReference(cp);
        } else {
            this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.AMPERSAND);
            this._reconsumeInState(this.returnState, cp);
        }
    }
    // Named character reference state
    //------------------------------------------------------------------
    _stateNamedCharacterReference(cp) {
        const matchResult = this._matchNamedCharacterReference(cp);
        if (this._ensureHibernation()) {
        } else if (matchResult) {
            for (let i2 = 0; i2 < matchResult.length; i2++) {
                this._flushCodePointConsumedAsCharacterReference(matchResult[i2]);
            }
            this.state = this.returnState;
        } else {
            this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.AMPERSAND);
            this.state = State.AMBIGUOUS_AMPERSAND;
        }
    }
    // Ambiguos ampersand state
    //------------------------------------------------------------------
    _stateAmbiguousAmpersand(cp) {
        if (isAsciiAlphaNumeric2(cp)) {
            this._flushCodePointConsumedAsCharacterReference(cp);
        } else {
            if (cp === CODE_POINTS.SEMICOLON) {
                this._err(ERR.unknownNamedCharacterReference);
            }
            this._reconsumeInState(this.returnState, cp);
        }
    }
    // Numeric character reference state
    //------------------------------------------------------------------
    _stateNumericCharacterReference(cp) {
        this.charRefCode = 0;
        if (cp === CODE_POINTS.LATIN_SMALL_X || cp === CODE_POINTS.LATIN_CAPITAL_X) {
            this.state = State.HEXADEMICAL_CHARACTER_REFERENCE_START;
        } else if (isAsciiDigit(cp)) {
            this.state = State.DECIMAL_CHARACTER_REFERENCE;
            this._stateDecimalCharacterReference(cp);
        } else {
            this._err(ERR.absenceOfDigitsInNumericCharacterReference);
            this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.AMPERSAND);
            this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.NUMBER_SIGN);
            this._reconsumeInState(this.returnState, cp);
        }
    }
    // Hexademical character reference start state
    //------------------------------------------------------------------
    _stateHexademicalCharacterReferenceStart(cp) {
        if (isAsciiHexDigit(cp)) {
            this.state = State.HEXADEMICAL_CHARACTER_REFERENCE;
            this._stateHexademicalCharacterReference(cp);
        } else {
            this._err(ERR.absenceOfDigitsInNumericCharacterReference);
            this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.AMPERSAND);
            this._flushCodePointConsumedAsCharacterReference(CODE_POINTS.NUMBER_SIGN);
            this._unconsume(2);
            this.state = this.returnState;
        }
    }
    // Hexademical character reference state
    //------------------------------------------------------------------
    _stateHexademicalCharacterReference(cp) {
        if (isAsciiUpperHexDigit(cp)) {
            this.charRefCode = this.charRefCode * 16 + cp - 55;
        } else if (isAsciiLowerHexDigit(cp)) {
            this.charRefCode = this.charRefCode * 16 + cp - 87;
        } else if (isAsciiDigit(cp)) {
            this.charRefCode = this.charRefCode * 16 + cp - 48;
        } else if (cp === CODE_POINTS.SEMICOLON) {
            this.state = State.NUMERIC_CHARACTER_REFERENCE_END;
        } else {
            this._err(ERR.missingSemicolonAfterCharacterReference);
            this.state = State.NUMERIC_CHARACTER_REFERENCE_END;
            this._stateNumericCharacterReferenceEnd(cp);
        }
    }
    // Decimal character reference state
    //------------------------------------------------------------------
    _stateDecimalCharacterReference(cp) {
        if (isAsciiDigit(cp)) {
            this.charRefCode = this.charRefCode * 10 + cp - 48;
        } else if (cp === CODE_POINTS.SEMICOLON) {
            this.state = State.NUMERIC_CHARACTER_REFERENCE_END;
        } else {
            this._err(ERR.missingSemicolonAfterCharacterReference);
            this.state = State.NUMERIC_CHARACTER_REFERENCE_END;
            this._stateNumericCharacterReferenceEnd(cp);
        }
    }
    // Numeric character reference end state
    //------------------------------------------------------------------
    _stateNumericCharacterReferenceEnd(cp) {
        if (this.charRefCode === CODE_POINTS.NULL) {
            this._err(ERR.nullCharacterReference);
            this.charRefCode = CODE_POINTS.REPLACEMENT_CHARACTER;
        } else if (this.charRefCode > 1114111) {
            this._err(ERR.characterReferenceOutsideUnicodeRange);
            this.charRefCode = CODE_POINTS.REPLACEMENT_CHARACTER;
        } else if (isSurrogate(this.charRefCode)) {
            this._err(ERR.surrogateCharacterReference);
            this.charRefCode = CODE_POINTS.REPLACEMENT_CHARACTER;
        } else if (isUndefinedCodePoint(this.charRefCode)) {
            this._err(ERR.noncharacterCharacterReference);
        } else if (
            isControlCodePoint(this.charRefCode) ||
            this.charRefCode === CODE_POINTS.CARRIAGE_RETURN
        ) {
            this._err(ERR.controlCharacterReference);
            const replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS.get(this.charRefCode);
            if (replacement !== void 0) {
                this.charRefCode = replacement;
            }
        }
        this._flushCodePointConsumedAsCharacterReference(this.charRefCode);
        this._reconsumeInState(this.returnState, cp);
    }
};

// node_modules/parse5/dist/parser/open-element-stack.js
var IMPLICIT_END_TAG_REQUIRED = /* @__PURE__ */ new Set([
    TAG_ID.DD,
    TAG_ID.DT,
    TAG_ID.LI,
    TAG_ID.OPTGROUP,
    TAG_ID.OPTION,
    TAG_ID.P,
    TAG_ID.RB,
    TAG_ID.RP,
    TAG_ID.RT,
    TAG_ID.RTC,
]);
var IMPLICIT_END_TAG_REQUIRED_THOROUGHLY = /* @__PURE__ */ new Set([
    ...IMPLICIT_END_TAG_REQUIRED,
    TAG_ID.CAPTION,
    TAG_ID.COLGROUP,
    TAG_ID.TBODY,
    TAG_ID.TD,
    TAG_ID.TFOOT,
    TAG_ID.TH,
    TAG_ID.THEAD,
    TAG_ID.TR,
]);
var SCOPING_ELEMENT_NS = /* @__PURE__ */ new Map([
    [TAG_ID.APPLET, NS.HTML],
    [TAG_ID.CAPTION, NS.HTML],
    [TAG_ID.HTML, NS.HTML],
    [TAG_ID.MARQUEE, NS.HTML],
    [TAG_ID.OBJECT, NS.HTML],
    [TAG_ID.TABLE, NS.HTML],
    [TAG_ID.TD, NS.HTML],
    [TAG_ID.TEMPLATE, NS.HTML],
    [TAG_ID.TH, NS.HTML],
    [TAG_ID.ANNOTATION_XML, NS.MATHML],
    [TAG_ID.MI, NS.MATHML],
    [TAG_ID.MN, NS.MATHML],
    [TAG_ID.MO, NS.MATHML],
    [TAG_ID.MS, NS.MATHML],
    [TAG_ID.MTEXT, NS.MATHML],
    [TAG_ID.DESC, NS.SVG],
    [TAG_ID.FOREIGN_OBJECT, NS.SVG],
    [TAG_ID.TITLE, NS.SVG],
]);
var NAMED_HEADERS = [TAG_ID.H1, TAG_ID.H2, TAG_ID.H3, TAG_ID.H4, TAG_ID.H5, TAG_ID.H6];
var TABLE_ROW_CONTEXT = [TAG_ID.TR, TAG_ID.TEMPLATE, TAG_ID.HTML];
var TABLE_BODY_CONTEXT = [TAG_ID.TBODY, TAG_ID.TFOOT, TAG_ID.THEAD, TAG_ID.TEMPLATE, TAG_ID.HTML];
var TABLE_CONTEXT = [TAG_ID.TABLE, TAG_ID.TEMPLATE, TAG_ID.HTML];
var TABLE_CELLS = [TAG_ID.TD, TAG_ID.TH];
var OpenElementStack = class {
    get currentTmplContentOrNode() {
        return this._isInTemplate()
            ? this.treeAdapter.getTemplateContent(this.current)
            : this.current;
    }
    constructor(document2, treeAdapter, handler) {
        this.treeAdapter = treeAdapter;
        this.handler = handler;
        this.items = [];
        this.tagIDs = [];
        this.stackTop = -1;
        this.tmplCount = 0;
        this.currentTagId = TAG_ID.UNKNOWN;
        this.current = document2;
    }
    //Index of element
    _indexOf(element) {
        return this.items.lastIndexOf(element, this.stackTop);
    }
    //Update current element
    _isInTemplate() {
        return (
            this.currentTagId === TAG_ID.TEMPLATE &&
            this.treeAdapter.getNamespaceURI(this.current) === NS.HTML
        );
    }
    _updateCurrentElement() {
        this.current = this.items[this.stackTop];
        this.currentTagId = this.tagIDs[this.stackTop];
    }
    //Mutations
    push(element, tagID) {
        this.stackTop++;
        this.items[this.stackTop] = element;
        this.current = element;
        this.tagIDs[this.stackTop] = tagID;
        this.currentTagId = tagID;
        if (this._isInTemplate()) {
            this.tmplCount++;
        }
        this.handler.onItemPush(element, tagID, true);
    }
    pop() {
        const popped = this.current;
        if (this.tmplCount > 0 && this._isInTemplate()) {
            this.tmplCount--;
        }
        this.stackTop--;
        this._updateCurrentElement();
        this.handler.onItemPop(popped, true);
    }
    replace(oldElement, newElement) {
        const idx = this._indexOf(oldElement);
        this.items[idx] = newElement;
        if (idx === this.stackTop) {
            this.current = newElement;
        }
    }
    insertAfter(referenceElement, newElement, newElementID) {
        const insertionIdx = this._indexOf(referenceElement) + 1;
        this.items.splice(insertionIdx, 0, newElement);
        this.tagIDs.splice(insertionIdx, 0, newElementID);
        this.stackTop++;
        if (insertionIdx === this.stackTop) {
            this._updateCurrentElement();
        }
        this.handler.onItemPush(this.current, this.currentTagId, insertionIdx === this.stackTop);
    }
    popUntilTagNamePopped(tagName) {
        let targetIdx = this.stackTop + 1;
        do {
            targetIdx = this.tagIDs.lastIndexOf(tagName, targetIdx - 1);
        } while (
            targetIdx > 0 &&
            this.treeAdapter.getNamespaceURI(this.items[targetIdx]) !== NS.HTML
        );
        this.shortenToLength(targetIdx < 0 ? 0 : targetIdx);
    }
    shortenToLength(idx) {
        while (this.stackTop >= idx) {
            const popped = this.current;
            if (this.tmplCount > 0 && this._isInTemplate()) {
                this.tmplCount -= 1;
            }
            this.stackTop--;
            this._updateCurrentElement();
            this.handler.onItemPop(popped, this.stackTop < idx);
        }
    }
    popUntilElementPopped(element) {
        const idx = this._indexOf(element);
        this.shortenToLength(idx < 0 ? 0 : idx);
    }
    popUntilPopped(tagNames, targetNS) {
        const idx = this._indexOfTagNames(tagNames, targetNS);
        this.shortenToLength(idx < 0 ? 0 : idx);
    }
    popUntilNumberedHeaderPopped() {
        this.popUntilPopped(NAMED_HEADERS, NS.HTML);
    }
    popUntilTableCellPopped() {
        this.popUntilPopped(TABLE_CELLS, NS.HTML);
    }
    popAllUpToHtmlElement() {
        this.tmplCount = 0;
        this.shortenToLength(1);
    }
    _indexOfTagNames(tagNames, namespace) {
        for (let i2 = this.stackTop; i2 >= 0; i2--) {
            if (
                tagNames.includes(this.tagIDs[i2]) &&
                this.treeAdapter.getNamespaceURI(this.items[i2]) === namespace
            ) {
                return i2;
            }
        }
        return -1;
    }
    clearBackTo(tagNames, targetNS) {
        const idx = this._indexOfTagNames(tagNames, targetNS);
        this.shortenToLength(idx + 1);
    }
    clearBackToTableContext() {
        this.clearBackTo(TABLE_CONTEXT, NS.HTML);
    }
    clearBackToTableBodyContext() {
        this.clearBackTo(TABLE_BODY_CONTEXT, NS.HTML);
    }
    clearBackToTableRowContext() {
        this.clearBackTo(TABLE_ROW_CONTEXT, NS.HTML);
    }
    remove(element) {
        const idx = this._indexOf(element);
        if (idx >= 0) {
            if (idx === this.stackTop) {
                this.pop();
            } else {
                this.items.splice(idx, 1);
                this.tagIDs.splice(idx, 1);
                this.stackTop--;
                this._updateCurrentElement();
                this.handler.onItemPop(element, false);
            }
        }
    }
    //Search
    tryPeekProperlyNestedBodyElement() {
        return this.stackTop >= 1 && this.tagIDs[1] === TAG_ID.BODY ? this.items[1] : null;
    }
    contains(element) {
        return this._indexOf(element) > -1;
    }
    getCommonAncestor(element) {
        const elementIdx = this._indexOf(element) - 1;
        return elementIdx >= 0 ? this.items[elementIdx] : null;
    }
    isRootHtmlElementCurrent() {
        return this.stackTop === 0 && this.tagIDs[0] === TAG_ID.HTML;
    }
    //Element in scope
    hasInScope(tagName) {
        for (let i2 = this.stackTop; i2 >= 0; i2--) {
            const tn = this.tagIDs[i2];
            const ns = this.treeAdapter.getNamespaceURI(this.items[i2]);
            if (tn === tagName && ns === NS.HTML) {
                return true;
            }
            if (SCOPING_ELEMENT_NS.get(tn) === ns) {
                return false;
            }
        }
        return true;
    }
    hasNumberedHeaderInScope() {
        for (let i2 = this.stackTop; i2 >= 0; i2--) {
            const tn = this.tagIDs[i2];
            const ns = this.treeAdapter.getNamespaceURI(this.items[i2]);
            if (isNumberedHeader(tn) && ns === NS.HTML) {
                return true;
            }
            if (SCOPING_ELEMENT_NS.get(tn) === ns) {
                return false;
            }
        }
        return true;
    }
    hasInListItemScope(tagName) {
        for (let i2 = this.stackTop; i2 >= 0; i2--) {
            const tn = this.tagIDs[i2];
            const ns = this.treeAdapter.getNamespaceURI(this.items[i2]);
            if (tn === tagName && ns === NS.HTML) {
                return true;
            }
            if (
                ((tn === TAG_ID.UL || tn === TAG_ID.OL) && ns === NS.HTML) ||
                SCOPING_ELEMENT_NS.get(tn) === ns
            ) {
                return false;
            }
        }
        return true;
    }
    hasInButtonScope(tagName) {
        for (let i2 = this.stackTop; i2 >= 0; i2--) {
            const tn = this.tagIDs[i2];
            const ns = this.treeAdapter.getNamespaceURI(this.items[i2]);
            if (tn === tagName && ns === NS.HTML) {
                return true;
            }
            if ((tn === TAG_ID.BUTTON && ns === NS.HTML) || SCOPING_ELEMENT_NS.get(tn) === ns) {
                return false;
            }
        }
        return true;
    }
    hasInTableScope(tagName) {
        for (let i2 = this.stackTop; i2 >= 0; i2--) {
            const tn = this.tagIDs[i2];
            const ns = this.treeAdapter.getNamespaceURI(this.items[i2]);
            if (ns !== NS.HTML) {
                continue;
            }
            if (tn === tagName) {
                return true;
            }
            if (tn === TAG_ID.TABLE || tn === TAG_ID.TEMPLATE || tn === TAG_ID.HTML) {
                return false;
            }
        }
        return true;
    }
    hasTableBodyContextInTableScope() {
        for (let i2 = this.stackTop; i2 >= 0; i2--) {
            const tn = this.tagIDs[i2];
            const ns = this.treeAdapter.getNamespaceURI(this.items[i2]);
            if (ns !== NS.HTML) {
                continue;
            }
            if (tn === TAG_ID.TBODY || tn === TAG_ID.THEAD || tn === TAG_ID.TFOOT) {
                return true;
            }
            if (tn === TAG_ID.TABLE || tn === TAG_ID.HTML) {
                return false;
            }
        }
        return true;
    }
    hasInSelectScope(tagName) {
        for (let i2 = this.stackTop; i2 >= 0; i2--) {
            const tn = this.tagIDs[i2];
            const ns = this.treeAdapter.getNamespaceURI(this.items[i2]);
            if (ns !== NS.HTML) {
                continue;
            }
            if (tn === tagName) {
                return true;
            }
            if (tn !== TAG_ID.OPTION && tn !== TAG_ID.OPTGROUP) {
                return false;
            }
        }
        return true;
    }
    //Implied end tags
    generateImpliedEndTags() {
        while (IMPLICIT_END_TAG_REQUIRED.has(this.currentTagId)) {
            this.pop();
        }
    }
    generateImpliedEndTagsThoroughly() {
        while (IMPLICIT_END_TAG_REQUIRED_THOROUGHLY.has(this.currentTagId)) {
            this.pop();
        }
    }
    generateImpliedEndTagsWithExclusion(exclusionId) {
        while (
            this.currentTagId !== exclusionId &&
            IMPLICIT_END_TAG_REQUIRED_THOROUGHLY.has(this.currentTagId)
        ) {
            this.pop();
        }
    }
};

// node_modules/parse5/dist/parser/formatting-element-list.js
var NOAH_ARK_CAPACITY = 3;
var EntryType;
(function (EntryType2) {
    EntryType2[(EntryType2['Marker'] = 0)] = 'Marker';
    EntryType2[(EntryType2['Element'] = 1)] = 'Element';
})((EntryType = EntryType || (EntryType = {})));
var MARKER = { type: EntryType.Marker };
var FormattingElementList = class {
    constructor(treeAdapter) {
        this.treeAdapter = treeAdapter;
        this.entries = [];
        this.bookmark = null;
    }
    //Noah Ark's condition
    //OPTIMIZATION: at first we try to find possible candidates for exclusion using
    //lightweight heuristics without thorough attributes check.
    _getNoahArkConditionCandidates(newElement, neAttrs) {
        const candidates = [];
        const neAttrsLength = neAttrs.length;
        const neTagName = this.treeAdapter.getTagName(newElement);
        const neNamespaceURI = this.treeAdapter.getNamespaceURI(newElement);
        for (let i2 = 0; i2 < this.entries.length; i2++) {
            const entry = this.entries[i2];
            if (entry.type === EntryType.Marker) {
                break;
            }
            const { element } = entry;
            if (
                this.treeAdapter.getTagName(element) === neTagName &&
                this.treeAdapter.getNamespaceURI(element) === neNamespaceURI
            ) {
                const elementAttrs = this.treeAdapter.getAttrList(element);
                if (elementAttrs.length === neAttrsLength) {
                    candidates.push({ idx: i2, attrs: elementAttrs });
                }
            }
        }
        return candidates;
    }
    _ensureNoahArkCondition(newElement) {
        if (this.entries.length < NOAH_ARK_CAPACITY) return;
        const neAttrs = this.treeAdapter.getAttrList(newElement);
        const candidates = this._getNoahArkConditionCandidates(newElement, neAttrs);
        if (candidates.length < NOAH_ARK_CAPACITY) return;
        const neAttrsMap = new Map(neAttrs.map((neAttr) => [neAttr.name, neAttr.value]));
        let validCandidates = 0;
        for (let i2 = 0; i2 < candidates.length; i2++) {
            const candidate = candidates[i2];
            if (candidate.attrs.every((cAttr) => neAttrsMap.get(cAttr.name) === cAttr.value)) {
                validCandidates += 1;
                if (validCandidates >= NOAH_ARK_CAPACITY) {
                    this.entries.splice(candidate.idx, 1);
                }
            }
        }
    }
    //Mutations
    insertMarker() {
        this.entries.unshift(MARKER);
    }
    pushElement(element, token) {
        this._ensureNoahArkCondition(element);
        this.entries.unshift({
            type: EntryType.Element,
            element,
            token,
        });
    }
    insertElementAfterBookmark(element, token) {
        const bookmarkIdx = this.entries.indexOf(this.bookmark);
        this.entries.splice(bookmarkIdx, 0, {
            type: EntryType.Element,
            element,
            token,
        });
    }
    removeEntry(entry) {
        const entryIndex = this.entries.indexOf(entry);
        if (entryIndex >= 0) {
            this.entries.splice(entryIndex, 1);
        }
    }
    /**
     * Clears the list of formatting elements up to the last marker.
     *
     * @see https://html.spec.whatwg.org/multipage/parsing.html#clear-the-list-of-active-formatting-elements-up-to-the-last-marker
     */
    clearToLastMarker() {
        const markerIdx = this.entries.indexOf(MARKER);
        if (markerIdx >= 0) {
            this.entries.splice(0, markerIdx + 1);
        } else {
            this.entries.length = 0;
        }
    }
    //Search
    getElementEntryInScopeWithTagName(tagName) {
        const entry = this.entries.find(
            (entry2) =>
                entry2.type === EntryType.Marker ||
                this.treeAdapter.getTagName(entry2.element) === tagName,
        );
        return entry && entry.type === EntryType.Element ? entry : null;
    }
    getElementEntry(element) {
        return this.entries.find(
            (entry) => entry.type === EntryType.Element && entry.element === element,
        );
    }
};

// node_modules/parse5/dist/tree-adapters/default.js
function createTextNode(value) {
    return {
        nodeName: '#text',
        value,
        parentNode: null,
    };
}
var defaultTreeAdapter = {
    //Node construction
    createDocument() {
        return {
            nodeName: '#document',
            mode: DOCUMENT_MODE.NO_QUIRKS,
            childNodes: [],
        };
    },
    createDocumentFragment() {
        return {
            nodeName: '#document-fragment',
            childNodes: [],
        };
    },
    createElement(tagName, namespaceURI, attrs) {
        return {
            nodeName: tagName,
            tagName,
            attrs,
            namespaceURI,
            childNodes: [],
            parentNode: null,
        };
    },
    createCommentNode(data2) {
        return {
            nodeName: '#comment',
            data: data2,
            parentNode: null,
        };
    },
    //Tree mutation
    appendChild(parentNode, newNode) {
        parentNode.childNodes.push(newNode);
        newNode.parentNode = parentNode;
    },
    insertBefore(parentNode, newNode, referenceNode) {
        const insertionIdx = parentNode.childNodes.indexOf(referenceNode);
        parentNode.childNodes.splice(insertionIdx, 0, newNode);
        newNode.parentNode = parentNode;
    },
    setTemplateContent(templateElement, contentElement) {
        templateElement.content = contentElement;
    },
    getTemplateContent(templateElement) {
        return templateElement.content;
    },
    setDocumentType(document2, name, publicId, systemId) {
        const doctypeNode = document2.childNodes.find((node) => node.nodeName === '#documentType');
        if (doctypeNode) {
            doctypeNode.name = name;
            doctypeNode.publicId = publicId;
            doctypeNode.systemId = systemId;
        } else {
            const node = {
                nodeName: '#documentType',
                name,
                publicId,
                systemId,
                parentNode: null,
            };
            defaultTreeAdapter.appendChild(document2, node);
        }
    },
    setDocumentMode(document2, mode) {
        document2.mode = mode;
    },
    getDocumentMode(document2) {
        return document2.mode;
    },
    detachNode(node) {
        if (node.parentNode) {
            const idx = node.parentNode.childNodes.indexOf(node);
            node.parentNode.childNodes.splice(idx, 1);
            node.parentNode = null;
        }
    },
    insertText(parentNode, text3) {
        if (parentNode.childNodes.length > 0) {
            const prevNode = parentNode.childNodes[parentNode.childNodes.length - 1];
            if (defaultTreeAdapter.isTextNode(prevNode)) {
                prevNode.value += text3;
                return;
            }
        }
        defaultTreeAdapter.appendChild(parentNode, createTextNode(text3));
    },
    insertTextBefore(parentNode, text3, referenceNode) {
        const prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];
        if (prevNode && defaultTreeAdapter.isTextNode(prevNode)) {
            prevNode.value += text3;
        } else {
            defaultTreeAdapter.insertBefore(parentNode, createTextNode(text3), referenceNode);
        }
    },
    adoptAttributes(recipient, attrs) {
        const recipientAttrsMap = new Set(recipient.attrs.map((attr2) => attr2.name));
        for (let j = 0; j < attrs.length; j++) {
            if (!recipientAttrsMap.has(attrs[j].name)) {
                recipient.attrs.push(attrs[j]);
            }
        }
    },
    //Tree traversing
    getFirstChild(node) {
        return node.childNodes[0];
    },
    getChildNodes(node) {
        return node.childNodes;
    },
    getParentNode(node) {
        return node.parentNode;
    },
    getAttrList(element) {
        return element.attrs;
    },
    //Node data
    getTagName(element) {
        return element.tagName;
    },
    getNamespaceURI(element) {
        return element.namespaceURI;
    },
    getTextNodeContent(textNode) {
        return textNode.value;
    },
    getCommentNodeContent(commentNode) {
        return commentNode.data;
    },
    getDocumentTypeNodeName(doctypeNode) {
        return doctypeNode.name;
    },
    getDocumentTypeNodePublicId(doctypeNode) {
        return doctypeNode.publicId;
    },
    getDocumentTypeNodeSystemId(doctypeNode) {
        return doctypeNode.systemId;
    },
    //Node types
    isTextNode(node) {
        return node.nodeName === '#text';
    },
    isCommentNode(node) {
        return node.nodeName === '#comment';
    },
    isDocumentTypeNode(node) {
        return node.nodeName === '#documentType';
    },
    isElementNode(node) {
        return Object.prototype.hasOwnProperty.call(node, 'tagName');
    },
    // Source code location
    setNodeSourceCodeLocation(node, location) {
        node.sourceCodeLocation = location;
    },
    getNodeSourceCodeLocation(node) {
        return node.sourceCodeLocation;
    },
    updateNodeSourceCodeLocation(node, endLocation) {
        node.sourceCodeLocation = { ...node.sourceCodeLocation, ...endLocation };
    },
};

// node_modules/parse5/dist/common/doctype.js
var VALID_DOCTYPE_NAME = 'html';
var VALID_SYSTEM_ID = 'about:legacy-compat';
var QUIRKS_MODE_SYSTEM_ID = 'http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd';
var QUIRKS_MODE_PUBLIC_ID_PREFIXES = [
    '+//silmaril//dtd html pro v0r11 19970101//',
    '-//as//dtd html 3.0 aswedit + extensions//',
    '-//advasoft ltd//dtd html 3.0 aswedit + extensions//',
    '-//ietf//dtd html 2.0 level 1//',
    '-//ietf//dtd html 2.0 level 2//',
    '-//ietf//dtd html 2.0 strict level 1//',
    '-//ietf//dtd html 2.0 strict level 2//',
    '-//ietf//dtd html 2.0 strict//',
    '-//ietf//dtd html 2.0//',
    '-//ietf//dtd html 2.1e//',
    '-//ietf//dtd html 3.0//',
    '-//ietf//dtd html 3.2 final//',
    '-//ietf//dtd html 3.2//',
    '-//ietf//dtd html 3//',
    '-//ietf//dtd html level 0//',
    '-//ietf//dtd html level 1//',
    '-//ietf//dtd html level 2//',
    '-//ietf//dtd html level 3//',
    '-//ietf//dtd html strict level 0//',
    '-//ietf//dtd html strict level 1//',
    '-//ietf//dtd html strict level 2//',
    '-//ietf//dtd html strict level 3//',
    '-//ietf//dtd html strict//',
    '-//ietf//dtd html//',
    '-//metrius//dtd metrius presentational//',
    '-//microsoft//dtd internet explorer 2.0 html strict//',
    '-//microsoft//dtd internet explorer 2.0 html//',
    '-//microsoft//dtd internet explorer 2.0 tables//',
    '-//microsoft//dtd internet explorer 3.0 html strict//',
    '-//microsoft//dtd internet explorer 3.0 html//',
    '-//microsoft//dtd internet explorer 3.0 tables//',
    '-//netscape comm. corp.//dtd html//',
    '-//netscape comm. corp.//dtd strict html//',
    "-//o'reilly and associates//dtd html 2.0//",
    "-//o'reilly and associates//dtd html extended 1.0//",
    "-//o'reilly and associates//dtd html extended relaxed 1.0//",
    '-//sq//dtd html 2.0 hotmetal + extensions//',
    '-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//',
    '-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//',
    '-//spyglass//dtd html 2.0 extended//',
    '-//sun microsystems corp.//dtd hotjava html//',
    '-//sun microsystems corp.//dtd hotjava strict html//',
    '-//w3c//dtd html 3 1995-03-24//',
    '-//w3c//dtd html 3.2 draft//',
    '-//w3c//dtd html 3.2 final//',
    '-//w3c//dtd html 3.2//',
    '-//w3c//dtd html 3.2s draft//',
    '-//w3c//dtd html 4.0 frameset//',
    '-//w3c//dtd html 4.0 transitional//',
    '-//w3c//dtd html experimental 19960712//',
    '-//w3c//dtd html experimental 970421//',
    '-//w3c//dtd w3 html//',
    '-//w3o//dtd w3 html 3.0//',
    '-//webtechs//dtd mozilla html 2.0//',
    '-//webtechs//dtd mozilla html//',
];
var QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES = [
    ...QUIRKS_MODE_PUBLIC_ID_PREFIXES,
    '-//w3c//dtd html 4.01 frameset//',
    '-//w3c//dtd html 4.01 transitional//',
];
var QUIRKS_MODE_PUBLIC_IDS = /* @__PURE__ */ new Set([
    '-//w3o//dtd w3 html strict 3.0//en//',
    '-/w3c/dtd html 4.0 transitional/en',
    'html',
]);
var LIMITED_QUIRKS_PUBLIC_ID_PREFIXES = [
    '-//w3c//dtd xhtml 1.0 frameset//',
    '-//w3c//dtd xhtml 1.0 transitional//',
];
var LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES = [
    ...LIMITED_QUIRKS_PUBLIC_ID_PREFIXES,
    '-//w3c//dtd html 4.01 frameset//',
    '-//w3c//dtd html 4.01 transitional//',
];
function hasPrefix(publicId, prefixes) {
    return prefixes.some((prefix) => publicId.startsWith(prefix));
}
function isConforming(token) {
    return (
        token.name === VALID_DOCTYPE_NAME &&
        token.publicId === null &&
        (token.systemId === null || token.systemId === VALID_SYSTEM_ID)
    );
}
function getDocumentMode(token) {
    if (token.name !== VALID_DOCTYPE_NAME) {
        return DOCUMENT_MODE.QUIRKS;
    }
    const { systemId } = token;
    if (systemId && systemId.toLowerCase() === QUIRKS_MODE_SYSTEM_ID) {
        return DOCUMENT_MODE.QUIRKS;
    }
    let { publicId } = token;
    if (publicId !== null) {
        publicId = publicId.toLowerCase();
        if (QUIRKS_MODE_PUBLIC_IDS.has(publicId)) {
            return DOCUMENT_MODE.QUIRKS;
        }
        let prefixes =
            systemId === null
                ? QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES
                : QUIRKS_MODE_PUBLIC_ID_PREFIXES;
        if (hasPrefix(publicId, prefixes)) {
            return DOCUMENT_MODE.QUIRKS;
        }
        prefixes =
            systemId === null
                ? LIMITED_QUIRKS_PUBLIC_ID_PREFIXES
                : LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES;
        if (hasPrefix(publicId, prefixes)) {
            return DOCUMENT_MODE.LIMITED_QUIRKS;
        }
    }
    return DOCUMENT_MODE.NO_QUIRKS;
}

// node_modules/parse5/dist/common/foreign-content.js
var MIME_TYPES = {
    TEXT_HTML: 'text/html',
    APPLICATION_XML: 'application/xhtml+xml',
};
var DEFINITION_URL_ATTR = 'definitionurl';
var ADJUSTED_DEFINITION_URL_ATTR = 'definitionURL';
var SVG_ATTRS_ADJUSTMENT_MAP = new Map(
    [
        'attributeName',
        'attributeType',
        'baseFrequency',
        'baseProfile',
        'calcMode',
        'clipPathUnits',
        'diffuseConstant',
        'edgeMode',
        'filterUnits',
        'glyphRef',
        'gradientTransform',
        'gradientUnits',
        'kernelMatrix',
        'kernelUnitLength',
        'keyPoints',
        'keySplines',
        'keyTimes',
        'lengthAdjust',
        'limitingConeAngle',
        'markerHeight',
        'markerUnits',
        'markerWidth',
        'maskContentUnits',
        'maskUnits',
        'numOctaves',
        'pathLength',
        'patternContentUnits',
        'patternTransform',
        'patternUnits',
        'pointsAtX',
        'pointsAtY',
        'pointsAtZ',
        'preserveAlpha',
        'preserveAspectRatio',
        'primitiveUnits',
        'refX',
        'refY',
        'repeatCount',
        'repeatDur',
        'requiredExtensions',
        'requiredFeatures',
        'specularConstant',
        'specularExponent',
        'spreadMethod',
        'startOffset',
        'stdDeviation',
        'stitchTiles',
        'surfaceScale',
        'systemLanguage',
        'tableValues',
        'targetX',
        'targetY',
        'textLength',
        'viewBox',
        'viewTarget',
        'xChannelSelector',
        'yChannelSelector',
        'zoomAndPan',
    ].map((attr2) => [attr2.toLowerCase(), attr2]),
);
var XML_ATTRS_ADJUSTMENT_MAP = /* @__PURE__ */ new Map([
    ['xlink:actuate', { prefix: 'xlink', name: 'actuate', namespace: NS.XLINK }],
    ['xlink:arcrole', { prefix: 'xlink', name: 'arcrole', namespace: NS.XLINK }],
    ['xlink:href', { prefix: 'xlink', name: 'href', namespace: NS.XLINK }],
    ['xlink:role', { prefix: 'xlink', name: 'role', namespace: NS.XLINK }],
    ['xlink:show', { prefix: 'xlink', name: 'show', namespace: NS.XLINK }],
    ['xlink:title', { prefix: 'xlink', name: 'title', namespace: NS.XLINK }],
    ['xlink:type', { prefix: 'xlink', name: 'type', namespace: NS.XLINK }],
    ['xml:base', { prefix: 'xml', name: 'base', namespace: NS.XML }],
    ['xml:lang', { prefix: 'xml', name: 'lang', namespace: NS.XML }],
    ['xml:space', { prefix: 'xml', name: 'space', namespace: NS.XML }],
    ['xmlns', { prefix: '', name: 'xmlns', namespace: NS.XMLNS }],
    ['xmlns:xlink', { prefix: 'xmlns', name: 'xlink', namespace: NS.XMLNS }],
]);
var SVG_TAG_NAMES_ADJUSTMENT_MAP = new Map(
    [
        'altGlyph',
        'altGlyphDef',
        'altGlyphItem',
        'animateColor',
        'animateMotion',
        'animateTransform',
        'clipPath',
        'feBlend',
        'feColorMatrix',
        'feComponentTransfer',
        'feComposite',
        'feConvolveMatrix',
        'feDiffuseLighting',
        'feDisplacementMap',
        'feDistantLight',
        'feFlood',
        'feFuncA',
        'feFuncB',
        'feFuncG',
        'feFuncR',
        'feGaussianBlur',
        'feImage',
        'feMerge',
        'feMergeNode',
        'feMorphology',
        'feOffset',
        'fePointLight',
        'feSpecularLighting',
        'feSpotLight',
        'feTile',
        'feTurbulence',
        'foreignObject',
        'glyphRef',
        'linearGradient',
        'radialGradient',
        'textPath',
    ].map((tn) => [tn.toLowerCase(), tn]),
);
var EXITS_FOREIGN_CONTENT = /* @__PURE__ */ new Set([
    TAG_ID.B,
    TAG_ID.BIG,
    TAG_ID.BLOCKQUOTE,
    TAG_ID.BODY,
    TAG_ID.BR,
    TAG_ID.CENTER,
    TAG_ID.CODE,
    TAG_ID.DD,
    TAG_ID.DIV,
    TAG_ID.DL,
    TAG_ID.DT,
    TAG_ID.EM,
    TAG_ID.EMBED,
    TAG_ID.H1,
    TAG_ID.H2,
    TAG_ID.H3,
    TAG_ID.H4,
    TAG_ID.H5,
    TAG_ID.H6,
    TAG_ID.HEAD,
    TAG_ID.HR,
    TAG_ID.I,
    TAG_ID.IMG,
    TAG_ID.LI,
    TAG_ID.LISTING,
    TAG_ID.MENU,
    TAG_ID.META,
    TAG_ID.NOBR,
    TAG_ID.OL,
    TAG_ID.P,
    TAG_ID.PRE,
    TAG_ID.RUBY,
    TAG_ID.S,
    TAG_ID.SMALL,
    TAG_ID.SPAN,
    TAG_ID.STRONG,
    TAG_ID.STRIKE,
    TAG_ID.SUB,
    TAG_ID.SUP,
    TAG_ID.TABLE,
    TAG_ID.TT,
    TAG_ID.U,
    TAG_ID.UL,
    TAG_ID.VAR,
]);
function causesExit(startTagToken) {
    const tn = startTagToken.tagID;
    const isFontWithAttrs =
        tn === TAG_ID.FONT &&
        startTagToken.attrs.some(
            ({ name }) => name === ATTRS.COLOR || name === ATTRS.SIZE || name === ATTRS.FACE,
        );
    return isFontWithAttrs || EXITS_FOREIGN_CONTENT.has(tn);
}
function adjustTokenMathMLAttrs(token) {
    for (let i2 = 0; i2 < token.attrs.length; i2++) {
        if (token.attrs[i2].name === DEFINITION_URL_ATTR) {
            token.attrs[i2].name = ADJUSTED_DEFINITION_URL_ATTR;
            break;
        }
    }
}
function adjustTokenSVGAttrs(token) {
    for (let i2 = 0; i2 < token.attrs.length; i2++) {
        const adjustedAttrName = SVG_ATTRS_ADJUSTMENT_MAP.get(token.attrs[i2].name);
        if (adjustedAttrName != null) {
            token.attrs[i2].name = adjustedAttrName;
        }
    }
}
function adjustTokenXMLAttrs(token) {
    for (let i2 = 0; i2 < token.attrs.length; i2++) {
        const adjustedAttrEntry = XML_ATTRS_ADJUSTMENT_MAP.get(token.attrs[i2].name);
        if (adjustedAttrEntry) {
            token.attrs[i2].prefix = adjustedAttrEntry.prefix;
            token.attrs[i2].name = adjustedAttrEntry.name;
            token.attrs[i2].namespace = adjustedAttrEntry.namespace;
        }
    }
}
function adjustTokenSVGTagName(token) {
    const adjustedTagName = SVG_TAG_NAMES_ADJUSTMENT_MAP.get(token.tagName);
    if (adjustedTagName != null) {
        token.tagName = adjustedTagName;
        token.tagID = getTagID(token.tagName);
    }
}
function isMathMLTextIntegrationPoint(tn, ns) {
    return (
        ns === NS.MATHML &&
        (tn === TAG_ID.MI ||
            tn === TAG_ID.MO ||
            tn === TAG_ID.MN ||
            tn === TAG_ID.MS ||
            tn === TAG_ID.MTEXT)
    );
}
function isHtmlIntegrationPoint(tn, ns, attrs) {
    if (ns === NS.MATHML && tn === TAG_ID.ANNOTATION_XML) {
        for (let i2 = 0; i2 < attrs.length; i2++) {
            if (attrs[i2].name === ATTRS.ENCODING) {
                const value = attrs[i2].value.toLowerCase();
                return value === MIME_TYPES.TEXT_HTML || value === MIME_TYPES.APPLICATION_XML;
            }
        }
    }
    return (
        ns === NS.SVG && (tn === TAG_ID.FOREIGN_OBJECT || tn === TAG_ID.DESC || tn === TAG_ID.TITLE)
    );
}
function isIntegrationPoint(tn, ns, attrs, foreignNS) {
    return (
        ((!foreignNS || foreignNS === NS.HTML) && isHtmlIntegrationPoint(tn, ns, attrs)) ||
        ((!foreignNS || foreignNS === NS.MATHML) && isMathMLTextIntegrationPoint(tn, ns))
    );
}

// node_modules/parse5/dist/parser/index.js
var HIDDEN_INPUT_TYPE = 'hidden';
var AA_OUTER_LOOP_ITER = 8;
var AA_INNER_LOOP_ITER = 3;
var InsertionMode;
(function (InsertionMode2) {
    InsertionMode2[(InsertionMode2['INITIAL'] = 0)] = 'INITIAL';
    InsertionMode2[(InsertionMode2['BEFORE_HTML'] = 1)] = 'BEFORE_HTML';
    InsertionMode2[(InsertionMode2['BEFORE_HEAD'] = 2)] = 'BEFORE_HEAD';
    InsertionMode2[(InsertionMode2['IN_HEAD'] = 3)] = 'IN_HEAD';
    InsertionMode2[(InsertionMode2['IN_HEAD_NO_SCRIPT'] = 4)] = 'IN_HEAD_NO_SCRIPT';
    InsertionMode2[(InsertionMode2['AFTER_HEAD'] = 5)] = 'AFTER_HEAD';
    InsertionMode2[(InsertionMode2['IN_BODY'] = 6)] = 'IN_BODY';
    InsertionMode2[(InsertionMode2['TEXT'] = 7)] = 'TEXT';
    InsertionMode2[(InsertionMode2['IN_TABLE'] = 8)] = 'IN_TABLE';
    InsertionMode2[(InsertionMode2['IN_TABLE_TEXT'] = 9)] = 'IN_TABLE_TEXT';
    InsertionMode2[(InsertionMode2['IN_CAPTION'] = 10)] = 'IN_CAPTION';
    InsertionMode2[(InsertionMode2['IN_COLUMN_GROUP'] = 11)] = 'IN_COLUMN_GROUP';
    InsertionMode2[(InsertionMode2['IN_TABLE_BODY'] = 12)] = 'IN_TABLE_BODY';
    InsertionMode2[(InsertionMode2['IN_ROW'] = 13)] = 'IN_ROW';
    InsertionMode2[(InsertionMode2['IN_CELL'] = 14)] = 'IN_CELL';
    InsertionMode2[(InsertionMode2['IN_SELECT'] = 15)] = 'IN_SELECT';
    InsertionMode2[(InsertionMode2['IN_SELECT_IN_TABLE'] = 16)] = 'IN_SELECT_IN_TABLE';
    InsertionMode2[(InsertionMode2['IN_TEMPLATE'] = 17)] = 'IN_TEMPLATE';
    InsertionMode2[(InsertionMode2['AFTER_BODY'] = 18)] = 'AFTER_BODY';
    InsertionMode2[(InsertionMode2['IN_FRAMESET'] = 19)] = 'IN_FRAMESET';
    InsertionMode2[(InsertionMode2['AFTER_FRAMESET'] = 20)] = 'AFTER_FRAMESET';
    InsertionMode2[(InsertionMode2['AFTER_AFTER_BODY'] = 21)] = 'AFTER_AFTER_BODY';
    InsertionMode2[(InsertionMode2['AFTER_AFTER_FRAMESET'] = 22)] = 'AFTER_AFTER_FRAMESET';
})(InsertionMode || (InsertionMode = {}));
var BASE_LOC = {
    startLine: -1,
    startCol: -1,
    startOffset: -1,
    endLine: -1,
    endCol: -1,
    endOffset: -1,
};
var TABLE_STRUCTURE_TAGS = /* @__PURE__ */ new Set([
    TAG_ID.TABLE,
    TAG_ID.TBODY,
    TAG_ID.TFOOT,
    TAG_ID.THEAD,
    TAG_ID.TR,
]);
var defaultParserOptions = {
    scriptingEnabled: true,
    sourceCodeLocationInfo: false,
    treeAdapter: defaultTreeAdapter,
    onParseError: null,
};
var Parser = class {
    constructor(options2, document2, fragmentContext = null, scriptHandler = null) {
        this.fragmentContext = fragmentContext;
        this.scriptHandler = scriptHandler;
        this.currentToken = null;
        this.stopped = false;
        this.insertionMode = InsertionMode.INITIAL;
        this.originalInsertionMode = InsertionMode.INITIAL;
        this.headElement = null;
        this.formElement = null;
        this.currentNotInHTML = false;
        this.tmplInsertionModeStack = [];
        this.pendingCharacterTokens = [];
        this.hasNonWhitespacePendingCharacterToken = false;
        this.framesetOk = true;
        this.skipNextNewLine = false;
        this.fosterParentingEnabled = false;
        this.options = {
            ...defaultParserOptions,
            ...options2,
        };
        this.treeAdapter = this.options.treeAdapter;
        this.onParseError = this.options.onParseError;
        if (this.onParseError) {
            this.options.sourceCodeLocationInfo = true;
        }
        this.document =
            document2 !== null && document2 !== void 0
                ? document2
                : this.treeAdapter.createDocument();
        this.tokenizer = new Tokenizer(this.options, this);
        this.activeFormattingElements = new FormattingElementList(this.treeAdapter);
        this.fragmentContextID = fragmentContext
            ? getTagID(this.treeAdapter.getTagName(fragmentContext))
            : TAG_ID.UNKNOWN;
        this._setContextModes(
            fragmentContext !== null && fragmentContext !== void 0
                ? fragmentContext
                : this.document,
            this.fragmentContextID,
        );
        this.openElements = new OpenElementStack(this.document, this.treeAdapter, this);
    }
    // API
    static parse(html3, options2) {
        const parser = new this(options2);
        parser.tokenizer.write(html3, true);
        return parser.document;
    }
    static getFragmentParser(fragmentContext, options2) {
        const opts = {
            ...defaultParserOptions,
            ...options2,
        };
        fragmentContext !== null && fragmentContext !== void 0
            ? fragmentContext
            : (fragmentContext = opts.treeAdapter.createElement(TAG_NAMES.TEMPLATE, NS.HTML, []));
        const documentMock = opts.treeAdapter.createElement('documentmock', NS.HTML, []);
        const parser = new this(opts, documentMock, fragmentContext);
        if (parser.fragmentContextID === TAG_ID.TEMPLATE) {
            parser.tmplInsertionModeStack.unshift(InsertionMode.IN_TEMPLATE);
        }
        parser._initTokenizerForFragmentParsing();
        parser._insertFakeRootElement();
        parser._resetInsertionMode();
        parser._findFormInFragmentContext();
        return parser;
    }
    getFragment() {
        const rootElement = this.treeAdapter.getFirstChild(this.document);
        const fragment = this.treeAdapter.createDocumentFragment();
        this._adoptNodes(rootElement, fragment);
        return fragment;
    }
    //Errors
    _err(token, code, beforeToken) {
        var _a5;
        if (!this.onParseError) return;
        const loc = (_a5 = token.location) !== null && _a5 !== void 0 ? _a5 : BASE_LOC;
        const err = {
            code,
            startLine: loc.startLine,
            startCol: loc.startCol,
            startOffset: loc.startOffset,
            endLine: beforeToken ? loc.startLine : loc.endLine,
            endCol: beforeToken ? loc.startCol : loc.endCol,
            endOffset: beforeToken ? loc.startOffset : loc.endOffset,
        };
        this.onParseError(err);
    }
    //Stack events
    onItemPush(node, tid, isTop) {
        var _a5, _b;
        (_b = (_a5 = this.treeAdapter).onItemPush) === null || _b === void 0
            ? void 0
            : _b.call(_a5, node);
        if (isTop && this.openElements.stackTop > 0) this._setContextModes(node, tid);
    }
    onItemPop(node, isTop) {
        var _a5, _b;
        if (this.options.sourceCodeLocationInfo) {
            this._setEndLocation(node, this.currentToken);
        }
        (_b = (_a5 = this.treeAdapter).onItemPop) === null || _b === void 0
            ? void 0
            : _b.call(_a5, node, this.openElements.current);
        if (isTop) {
            let current;
            let currentTagId;
            if (this.openElements.stackTop === 0 && this.fragmentContext) {
                current = this.fragmentContext;
                currentTagId = this.fragmentContextID;
            } else {
                ({ current, currentTagId } = this.openElements);
            }
            this._setContextModes(current, currentTagId);
        }
    }
    _setContextModes(current, tid) {
        const isHTML =
            current === this.document || this.treeAdapter.getNamespaceURI(current) === NS.HTML;
        this.currentNotInHTML = !isHTML;
        this.tokenizer.inForeignNode = !isHTML && !this._isIntegrationPoint(tid, current);
    }
    _switchToTextParsing(currentToken, nextTokenizerState) {
        this._insertElement(currentToken, NS.HTML);
        this.tokenizer.state = nextTokenizerState;
        this.originalInsertionMode = this.insertionMode;
        this.insertionMode = InsertionMode.TEXT;
    }
    switchToPlaintextParsing() {
        this.insertionMode = InsertionMode.TEXT;
        this.originalInsertionMode = InsertionMode.IN_BODY;
        this.tokenizer.state = TokenizerMode.PLAINTEXT;
    }
    //Fragment parsing
    _getAdjustedCurrentElement() {
        return this.openElements.stackTop === 0 && this.fragmentContext
            ? this.fragmentContext
            : this.openElements.current;
    }
    _findFormInFragmentContext() {
        let node = this.fragmentContext;
        while (node) {
            if (this.treeAdapter.getTagName(node) === TAG_NAMES.FORM) {
                this.formElement = node;
                break;
            }
            node = this.treeAdapter.getParentNode(node);
        }
    }
    _initTokenizerForFragmentParsing() {
        if (
            !this.fragmentContext ||
            this.treeAdapter.getNamespaceURI(this.fragmentContext) !== NS.HTML
        ) {
            return;
        }
        switch (this.fragmentContextID) {
            case TAG_ID.TITLE:
            case TAG_ID.TEXTAREA: {
                this.tokenizer.state = TokenizerMode.RCDATA;
                break;
            }
            case TAG_ID.STYLE:
            case TAG_ID.XMP:
            case TAG_ID.IFRAME:
            case TAG_ID.NOEMBED:
            case TAG_ID.NOFRAMES:
            case TAG_ID.NOSCRIPT: {
                this.tokenizer.state = TokenizerMode.RAWTEXT;
                break;
            }
            case TAG_ID.SCRIPT: {
                this.tokenizer.state = TokenizerMode.SCRIPT_DATA;
                break;
            }
            case TAG_ID.PLAINTEXT: {
                this.tokenizer.state = TokenizerMode.PLAINTEXT;
                break;
            }
            default:
        }
    }
    //Tree mutation
    _setDocumentType(token) {
        const name = token.name || '';
        const publicId = token.publicId || '';
        const systemId = token.systemId || '';
        this.treeAdapter.setDocumentType(this.document, name, publicId, systemId);
        if (token.location) {
            const documentChildren = this.treeAdapter.getChildNodes(this.document);
            const docTypeNode = documentChildren.find((node) =>
                this.treeAdapter.isDocumentTypeNode(node),
            );
            if (docTypeNode) {
                this.treeAdapter.setNodeSourceCodeLocation(docTypeNode, token.location);
            }
        }
    }
    _attachElementToTree(element, location) {
        if (this.options.sourceCodeLocationInfo) {
            const loc = location && {
                ...location,
                startTag: location,
            };
            this.treeAdapter.setNodeSourceCodeLocation(element, loc);
        }
        if (this._shouldFosterParentOnInsertion()) {
            this._fosterParentElement(element);
        } else {
            const parent2 = this.openElements.currentTmplContentOrNode;
            this.treeAdapter.appendChild(parent2, element);
        }
    }
    _appendElement(token, namespaceURI) {
        const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);
        this._attachElementToTree(element, token.location);
    }
    _insertElement(token, namespaceURI) {
        const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);
        this._attachElementToTree(element, token.location);
        this.openElements.push(element, token.tagID);
    }
    _insertFakeElement(tagName, tagID) {
        const element = this.treeAdapter.createElement(tagName, NS.HTML, []);
        this._attachElementToTree(element, null);
        this.openElements.push(element, tagID);
    }
    _insertTemplate(token) {
        const tmpl = this.treeAdapter.createElement(token.tagName, NS.HTML, token.attrs);
        const content = this.treeAdapter.createDocumentFragment();
        this.treeAdapter.setTemplateContent(tmpl, content);
        this._attachElementToTree(tmpl, token.location);
        this.openElements.push(tmpl, token.tagID);
        if (this.options.sourceCodeLocationInfo)
            this.treeAdapter.setNodeSourceCodeLocation(content, null);
    }
    _insertFakeRootElement() {
        const element = this.treeAdapter.createElement(TAG_NAMES.HTML, NS.HTML, []);
        if (this.options.sourceCodeLocationInfo)
            this.treeAdapter.setNodeSourceCodeLocation(element, null);
        this.treeAdapter.appendChild(this.openElements.current, element);
        this.openElements.push(element, TAG_ID.HTML);
    }
    _appendCommentNode(token, parent2) {
        const commentNode = this.treeAdapter.createCommentNode(token.data);
        this.treeAdapter.appendChild(parent2, commentNode);
        if (this.options.sourceCodeLocationInfo) {
            this.treeAdapter.setNodeSourceCodeLocation(commentNode, token.location);
        }
    }
    _insertCharacters(token) {
        let parent2;
        let beforeElement;
        if (this._shouldFosterParentOnInsertion()) {
            ({ parent: parent2, beforeElement } = this._findFosterParentingLocation());
            if (beforeElement) {
                this.treeAdapter.insertTextBefore(parent2, token.chars, beforeElement);
            } else {
                this.treeAdapter.insertText(parent2, token.chars);
            }
        } else {
            parent2 = this.openElements.currentTmplContentOrNode;
            this.treeAdapter.insertText(parent2, token.chars);
        }
        if (!token.location) return;
        const siblings2 = this.treeAdapter.getChildNodes(parent2);
        const textNodeIdx = beforeElement ? siblings2.lastIndexOf(beforeElement) : siblings2.length;
        const textNode = siblings2[textNodeIdx - 1];
        const tnLoc = this.treeAdapter.getNodeSourceCodeLocation(textNode);
        if (tnLoc) {
            const { endLine, endCol, endOffset } = token.location;
            this.treeAdapter.updateNodeSourceCodeLocation(textNode, { endLine, endCol, endOffset });
        } else if (this.options.sourceCodeLocationInfo) {
            this.treeAdapter.setNodeSourceCodeLocation(textNode, token.location);
        }
    }
    _adoptNodes(donor, recipient) {
        for (
            let child = this.treeAdapter.getFirstChild(donor);
            child;
            child = this.treeAdapter.getFirstChild(donor)
        ) {
            this.treeAdapter.detachNode(child);
            this.treeAdapter.appendChild(recipient, child);
        }
    }
    _setEndLocation(element, closingToken) {
        if (this.treeAdapter.getNodeSourceCodeLocation(element) && closingToken.location) {
            const ctLoc = closingToken.location;
            const tn = this.treeAdapter.getTagName(element);
            const endLoc =
                // NOTE: For cases like <p> <p> </p> - First 'p' closes without a closing
                // tag and for cases like <td> <p> </td> - 'p' closes without a closing tag.
                closingToken.type === TokenType.END_TAG && tn === closingToken.tagName
                    ? {
                          endTag: { ...ctLoc },
                          endLine: ctLoc.endLine,
                          endCol: ctLoc.endCol,
                          endOffset: ctLoc.endOffset,
                      }
                    : {
                          endLine: ctLoc.startLine,
                          endCol: ctLoc.startCol,
                          endOffset: ctLoc.startOffset,
                      };
            this.treeAdapter.updateNodeSourceCodeLocation(element, endLoc);
        }
    }
    //Token processing
    shouldProcessStartTagTokenInForeignContent(token) {
        if (!this.currentNotInHTML) return false;
        let current;
        let currentTagId;
        if (this.openElements.stackTop === 0 && this.fragmentContext) {
            current = this.fragmentContext;
            currentTagId = this.fragmentContextID;
        } else {
            ({ current, currentTagId } = this.openElements);
        }
        if (
            token.tagID === TAG_ID.SVG &&
            this.treeAdapter.getTagName(current) === TAG_NAMES.ANNOTATION_XML &&
            this.treeAdapter.getNamespaceURI(current) === NS.MATHML
        ) {
            return false;
        }
        return (
            // Check that `current` is not an integration point for HTML or MathML elements.
            this.tokenizer.inForeignNode || // If it _is_ an integration point, then we might have to check that it is not an HTML
            // integration point.
            ((token.tagID === TAG_ID.MGLYPH || token.tagID === TAG_ID.MALIGNMARK) &&
                !this._isIntegrationPoint(currentTagId, current, NS.HTML))
        );
    }
    _processToken(token) {
        switch (token.type) {
            case TokenType.CHARACTER: {
                this.onCharacter(token);
                break;
            }
            case TokenType.NULL_CHARACTER: {
                this.onNullCharacter(token);
                break;
            }
            case TokenType.COMMENT: {
                this.onComment(token);
                break;
            }
            case TokenType.DOCTYPE: {
                this.onDoctype(token);
                break;
            }
            case TokenType.START_TAG: {
                this._processStartTag(token);
                break;
            }
            case TokenType.END_TAG: {
                this.onEndTag(token);
                break;
            }
            case TokenType.EOF: {
                this.onEof(token);
                break;
            }
            case TokenType.WHITESPACE_CHARACTER: {
                this.onWhitespaceCharacter(token);
                break;
            }
        }
    }
    //Integration points
    _isIntegrationPoint(tid, element, foreignNS) {
        const ns = this.treeAdapter.getNamespaceURI(element);
        const attrs = this.treeAdapter.getAttrList(element);
        return isIntegrationPoint(tid, ns, attrs, foreignNS);
    }
    //Active formatting elements reconstruction
    _reconstructActiveFormattingElements() {
        const listLength = this.activeFormattingElements.entries.length;
        if (listLength) {
            const endIndex = this.activeFormattingElements.entries.findIndex(
                (entry) =>
                    entry.type === EntryType.Marker || this.openElements.contains(entry.element),
            );
            const unopenIdx = endIndex < 0 ? listLength - 1 : endIndex - 1;
            for (let i2 = unopenIdx; i2 >= 0; i2--) {
                const entry = this.activeFormattingElements.entries[i2];
                this._insertElement(entry.token, this.treeAdapter.getNamespaceURI(entry.element));
                entry.element = this.openElements.current;
            }
        }
    }
    //Close elements
    _closeTableCell() {
        this.openElements.generateImpliedEndTags();
        this.openElements.popUntilTableCellPopped();
        this.activeFormattingElements.clearToLastMarker();
        this.insertionMode = InsertionMode.IN_ROW;
    }
    _closePElement() {
        this.openElements.generateImpliedEndTagsWithExclusion(TAG_ID.P);
        this.openElements.popUntilTagNamePopped(TAG_ID.P);
    }
    //Insertion modes
    _resetInsertionMode() {
        for (let i2 = this.openElements.stackTop; i2 >= 0; i2--) {
            switch (
                i2 === 0 && this.fragmentContext
                    ? this.fragmentContextID
                    : this.openElements.tagIDs[i2]
            ) {
                case TAG_ID.TR: {
                    this.insertionMode = InsertionMode.IN_ROW;
                    return;
                }
                case TAG_ID.TBODY:
                case TAG_ID.THEAD:
                case TAG_ID.TFOOT: {
                    this.insertionMode = InsertionMode.IN_TABLE_BODY;
                    return;
                }
                case TAG_ID.CAPTION: {
                    this.insertionMode = InsertionMode.IN_CAPTION;
                    return;
                }
                case TAG_ID.COLGROUP: {
                    this.insertionMode = InsertionMode.IN_COLUMN_GROUP;
                    return;
                }
                case TAG_ID.TABLE: {
                    this.insertionMode = InsertionMode.IN_TABLE;
                    return;
                }
                case TAG_ID.BODY: {
                    this.insertionMode = InsertionMode.IN_BODY;
                    return;
                }
                case TAG_ID.FRAMESET: {
                    this.insertionMode = InsertionMode.IN_FRAMESET;
                    return;
                }
                case TAG_ID.SELECT: {
                    this._resetInsertionModeForSelect(i2);
                    return;
                }
                case TAG_ID.TEMPLATE: {
                    this.insertionMode = this.tmplInsertionModeStack[0];
                    return;
                }
                case TAG_ID.HTML: {
                    this.insertionMode = this.headElement
                        ? InsertionMode.AFTER_HEAD
                        : InsertionMode.BEFORE_HEAD;
                    return;
                }
                case TAG_ID.TD:
                case TAG_ID.TH: {
                    if (i2 > 0) {
                        this.insertionMode = InsertionMode.IN_CELL;
                        return;
                    }
                    break;
                }
                case TAG_ID.HEAD: {
                    if (i2 > 0) {
                        this.insertionMode = InsertionMode.IN_HEAD;
                        return;
                    }
                    break;
                }
            }
        }
        this.insertionMode = InsertionMode.IN_BODY;
    }
    _resetInsertionModeForSelect(selectIdx) {
        if (selectIdx > 0) {
            for (let i2 = selectIdx - 1; i2 > 0; i2--) {
                const tn = this.openElements.tagIDs[i2];
                if (tn === TAG_ID.TEMPLATE) {
                    break;
                } else if (tn === TAG_ID.TABLE) {
                    this.insertionMode = InsertionMode.IN_SELECT_IN_TABLE;
                    return;
                }
            }
        }
        this.insertionMode = InsertionMode.IN_SELECT;
    }
    //Foster parenting
    _isElementCausesFosterParenting(tn) {
        return TABLE_STRUCTURE_TAGS.has(tn);
    }
    _shouldFosterParentOnInsertion() {
        return (
            this.fosterParentingEnabled &&
            this._isElementCausesFosterParenting(this.openElements.currentTagId)
        );
    }
    _findFosterParentingLocation() {
        for (let i2 = this.openElements.stackTop; i2 >= 0; i2--) {
            const openElement = this.openElements.items[i2];
            switch (this.openElements.tagIDs[i2]) {
                case TAG_ID.TEMPLATE: {
                    if (this.treeAdapter.getNamespaceURI(openElement) === NS.HTML) {
                        return {
                            parent: this.treeAdapter.getTemplateContent(openElement),
                            beforeElement: null,
                        };
                    }
                    break;
                }
                case TAG_ID.TABLE: {
                    const parent2 = this.treeAdapter.getParentNode(openElement);
                    if (parent2) {
                        return { parent: parent2, beforeElement: openElement };
                    }
                    return { parent: this.openElements.items[i2 - 1], beforeElement: null };
                }
                default:
            }
        }
        return { parent: this.openElements.items[0], beforeElement: null };
    }
    _fosterParentElement(element) {
        const location = this._findFosterParentingLocation();
        if (location.beforeElement) {
            this.treeAdapter.insertBefore(location.parent, element, location.beforeElement);
        } else {
            this.treeAdapter.appendChild(location.parent, element);
        }
    }
    //Special elements
    _isSpecialElement(element, id) {
        const ns = this.treeAdapter.getNamespaceURI(element);
        return SPECIAL_ELEMENTS[ns].has(id);
    }
    onCharacter(token) {
        this.skipNextNewLine = false;
        if (this.tokenizer.inForeignNode) {
            characterInForeignContent(this, token);
            return;
        }
        switch (this.insertionMode) {
            case InsertionMode.INITIAL: {
                tokenInInitialMode(this, token);
                break;
            }
            case InsertionMode.BEFORE_HTML: {
                tokenBeforeHtml(this, token);
                break;
            }
            case InsertionMode.BEFORE_HEAD: {
                tokenBeforeHead(this, token);
                break;
            }
            case InsertionMode.IN_HEAD: {
                tokenInHead(this, token);
                break;
            }
            case InsertionMode.IN_HEAD_NO_SCRIPT: {
                tokenInHeadNoScript(this, token);
                break;
            }
            case InsertionMode.AFTER_HEAD: {
                tokenAfterHead(this, token);
                break;
            }
            case InsertionMode.IN_BODY:
            case InsertionMode.IN_CAPTION:
            case InsertionMode.IN_CELL:
            case InsertionMode.IN_TEMPLATE: {
                characterInBody(this, token);
                break;
            }
            case InsertionMode.TEXT:
            case InsertionMode.IN_SELECT:
            case InsertionMode.IN_SELECT_IN_TABLE: {
                this._insertCharacters(token);
                break;
            }
            case InsertionMode.IN_TABLE:
            case InsertionMode.IN_TABLE_BODY:
            case InsertionMode.IN_ROW: {
                characterInTable(this, token);
                break;
            }
            case InsertionMode.IN_TABLE_TEXT: {
                characterInTableText(this, token);
                break;
            }
            case InsertionMode.IN_COLUMN_GROUP: {
                tokenInColumnGroup(this, token);
                break;
            }
            case InsertionMode.AFTER_BODY: {
                tokenAfterBody(this, token);
                break;
            }
            case InsertionMode.AFTER_AFTER_BODY: {
                tokenAfterAfterBody(this, token);
                break;
            }
            default:
        }
    }
    onNullCharacter(token) {
        this.skipNextNewLine = false;
        if (this.tokenizer.inForeignNode) {
            nullCharacterInForeignContent(this, token);
            return;
        }
        switch (this.insertionMode) {
            case InsertionMode.INITIAL: {
                tokenInInitialMode(this, token);
                break;
            }
            case InsertionMode.BEFORE_HTML: {
                tokenBeforeHtml(this, token);
                break;
            }
            case InsertionMode.BEFORE_HEAD: {
                tokenBeforeHead(this, token);
                break;
            }
            case InsertionMode.IN_HEAD: {
                tokenInHead(this, token);
                break;
            }
            case InsertionMode.IN_HEAD_NO_SCRIPT: {
                tokenInHeadNoScript(this, token);
                break;
            }
            case InsertionMode.AFTER_HEAD: {
                tokenAfterHead(this, token);
                break;
            }
            case InsertionMode.TEXT: {
                this._insertCharacters(token);
                break;
            }
            case InsertionMode.IN_TABLE:
            case InsertionMode.IN_TABLE_BODY:
            case InsertionMode.IN_ROW: {
                characterInTable(this, token);
                break;
            }
            case InsertionMode.IN_COLUMN_GROUP: {
                tokenInColumnGroup(this, token);
                break;
            }
            case InsertionMode.AFTER_BODY: {
                tokenAfterBody(this, token);
                break;
            }
            case InsertionMode.AFTER_AFTER_BODY: {
                tokenAfterAfterBody(this, token);
                break;
            }
            default:
        }
    }
    onComment(token) {
        this.skipNextNewLine = false;
        if (this.currentNotInHTML) {
            appendComment(this, token);
            return;
        }
        switch (this.insertionMode) {
            case InsertionMode.INITIAL:
            case InsertionMode.BEFORE_HTML:
            case InsertionMode.BEFORE_HEAD:
            case InsertionMode.IN_HEAD:
            case InsertionMode.IN_HEAD_NO_SCRIPT:
            case InsertionMode.AFTER_HEAD:
            case InsertionMode.IN_BODY:
            case InsertionMode.IN_TABLE:
            case InsertionMode.IN_CAPTION:
            case InsertionMode.IN_COLUMN_GROUP:
            case InsertionMode.IN_TABLE_BODY:
            case InsertionMode.IN_ROW:
            case InsertionMode.IN_CELL:
            case InsertionMode.IN_SELECT:
            case InsertionMode.IN_SELECT_IN_TABLE:
            case InsertionMode.IN_TEMPLATE:
            case InsertionMode.IN_FRAMESET:
            case InsertionMode.AFTER_FRAMESET: {
                appendComment(this, token);
                break;
            }
            case InsertionMode.IN_TABLE_TEXT: {
                tokenInTableText(this, token);
                break;
            }
            case InsertionMode.AFTER_BODY: {
                appendCommentToRootHtmlElement(this, token);
                break;
            }
            case InsertionMode.AFTER_AFTER_BODY:
            case InsertionMode.AFTER_AFTER_FRAMESET: {
                appendCommentToDocument(this, token);
                break;
            }
            default:
        }
    }
    onDoctype(token) {
        this.skipNextNewLine = false;
        switch (this.insertionMode) {
            case InsertionMode.INITIAL: {
                doctypeInInitialMode(this, token);
                break;
            }
            case InsertionMode.BEFORE_HEAD:
            case InsertionMode.IN_HEAD:
            case InsertionMode.IN_HEAD_NO_SCRIPT:
            case InsertionMode.AFTER_HEAD: {
                this._err(token, ERR.misplacedDoctype);
                break;
            }
            case InsertionMode.IN_TABLE_TEXT: {
                tokenInTableText(this, token);
                break;
            }
            default:
        }
    }
    onStartTag(token) {
        this.skipNextNewLine = false;
        this.currentToken = token;
        this._processStartTag(token);
        if (token.selfClosing && !token.ackSelfClosing) {
            this._err(token, ERR.nonVoidHtmlElementStartTagWithTrailingSolidus);
        }
    }
    /**
     * Processes a given start tag.
     *
     * `onStartTag` checks if a self-closing tag was recognized. When a token
     * is moved inbetween multiple insertion modes, this check for self-closing
     * could lead to false positives. To avoid this, `_processStartTag` is used
     * for nested calls.
     *
     * @param token The token to process.
     */
    _processStartTag(token) {
        if (this.shouldProcessStartTagTokenInForeignContent(token)) {
            startTagInForeignContent(this, token);
        } else {
            this._startTagOutsideForeignContent(token);
        }
    }
    _startTagOutsideForeignContent(token) {
        switch (this.insertionMode) {
            case InsertionMode.INITIAL: {
                tokenInInitialMode(this, token);
                break;
            }
            case InsertionMode.BEFORE_HTML: {
                startTagBeforeHtml(this, token);
                break;
            }
            case InsertionMode.BEFORE_HEAD: {
                startTagBeforeHead(this, token);
                break;
            }
            case InsertionMode.IN_HEAD: {
                startTagInHead(this, token);
                break;
            }
            case InsertionMode.IN_HEAD_NO_SCRIPT: {
                startTagInHeadNoScript(this, token);
                break;
            }
            case InsertionMode.AFTER_HEAD: {
                startTagAfterHead(this, token);
                break;
            }
            case InsertionMode.IN_BODY: {
                startTagInBody(this, token);
                break;
            }
            case InsertionMode.IN_TABLE: {
                startTagInTable(this, token);
                break;
            }
            case InsertionMode.IN_TABLE_TEXT: {
                tokenInTableText(this, token);
                break;
            }
            case InsertionMode.IN_CAPTION: {
                startTagInCaption(this, token);
                break;
            }
            case InsertionMode.IN_COLUMN_GROUP: {
                startTagInColumnGroup(this, token);
                break;
            }
            case InsertionMode.IN_TABLE_BODY: {
                startTagInTableBody(this, token);
                break;
            }
            case InsertionMode.IN_ROW: {
                startTagInRow(this, token);
                break;
            }
            case InsertionMode.IN_CELL: {
                startTagInCell(this, token);
                break;
            }
            case InsertionMode.IN_SELECT: {
                startTagInSelect(this, token);
                break;
            }
            case InsertionMode.IN_SELECT_IN_TABLE: {
                startTagInSelectInTable(this, token);
                break;
            }
            case InsertionMode.IN_TEMPLATE: {
                startTagInTemplate(this, token);
                break;
            }
            case InsertionMode.AFTER_BODY: {
                startTagAfterBody(this, token);
                break;
            }
            case InsertionMode.IN_FRAMESET: {
                startTagInFrameset(this, token);
                break;
            }
            case InsertionMode.AFTER_FRAMESET: {
                startTagAfterFrameset(this, token);
                break;
            }
            case InsertionMode.AFTER_AFTER_BODY: {
                startTagAfterAfterBody(this, token);
                break;
            }
            case InsertionMode.AFTER_AFTER_FRAMESET: {
                startTagAfterAfterFrameset(this, token);
                break;
            }
            default:
        }
    }
    onEndTag(token) {
        this.skipNextNewLine = false;
        this.currentToken = token;
        if (this.currentNotInHTML) {
            endTagInForeignContent(this, token);
        } else {
            this._endTagOutsideForeignContent(token);
        }
    }
    _endTagOutsideForeignContent(token) {
        switch (this.insertionMode) {
            case InsertionMode.INITIAL: {
                tokenInInitialMode(this, token);
                break;
            }
            case InsertionMode.BEFORE_HTML: {
                endTagBeforeHtml(this, token);
                break;
            }
            case InsertionMode.BEFORE_HEAD: {
                endTagBeforeHead(this, token);
                break;
            }
            case InsertionMode.IN_HEAD: {
                endTagInHead(this, token);
                break;
            }
            case InsertionMode.IN_HEAD_NO_SCRIPT: {
                endTagInHeadNoScript(this, token);
                break;
            }
            case InsertionMode.AFTER_HEAD: {
                endTagAfterHead(this, token);
                break;
            }
            case InsertionMode.IN_BODY: {
                endTagInBody(this, token);
                break;
            }
            case InsertionMode.TEXT: {
                endTagInText(this, token);
                break;
            }
            case InsertionMode.IN_TABLE: {
                endTagInTable(this, token);
                break;
            }
            case InsertionMode.IN_TABLE_TEXT: {
                tokenInTableText(this, token);
                break;
            }
            case InsertionMode.IN_CAPTION: {
                endTagInCaption(this, token);
                break;
            }
            case InsertionMode.IN_COLUMN_GROUP: {
                endTagInColumnGroup(this, token);
                break;
            }
            case InsertionMode.IN_TABLE_BODY: {
                endTagInTableBody(this, token);
                break;
            }
            case InsertionMode.IN_ROW: {
                endTagInRow(this, token);
                break;
            }
            case InsertionMode.IN_CELL: {
                endTagInCell(this, token);
                break;
            }
            case InsertionMode.IN_SELECT: {
                endTagInSelect(this, token);
                break;
            }
            case InsertionMode.IN_SELECT_IN_TABLE: {
                endTagInSelectInTable(this, token);
                break;
            }
            case InsertionMode.IN_TEMPLATE: {
                endTagInTemplate(this, token);
                break;
            }
            case InsertionMode.AFTER_BODY: {
                endTagAfterBody(this, token);
                break;
            }
            case InsertionMode.IN_FRAMESET: {
                endTagInFrameset(this, token);
                break;
            }
            case InsertionMode.AFTER_FRAMESET: {
                endTagAfterFrameset(this, token);
                break;
            }
            case InsertionMode.AFTER_AFTER_BODY: {
                tokenAfterAfterBody(this, token);
                break;
            }
            default:
        }
    }
    onEof(token) {
        switch (this.insertionMode) {
            case InsertionMode.INITIAL: {
                tokenInInitialMode(this, token);
                break;
            }
            case InsertionMode.BEFORE_HTML: {
                tokenBeforeHtml(this, token);
                break;
            }
            case InsertionMode.BEFORE_HEAD: {
                tokenBeforeHead(this, token);
                break;
            }
            case InsertionMode.IN_HEAD: {
                tokenInHead(this, token);
                break;
            }
            case InsertionMode.IN_HEAD_NO_SCRIPT: {
                tokenInHeadNoScript(this, token);
                break;
            }
            case InsertionMode.AFTER_HEAD: {
                tokenAfterHead(this, token);
                break;
            }
            case InsertionMode.IN_BODY:
            case InsertionMode.IN_TABLE:
            case InsertionMode.IN_CAPTION:
            case InsertionMode.IN_COLUMN_GROUP:
            case InsertionMode.IN_TABLE_BODY:
            case InsertionMode.IN_ROW:
            case InsertionMode.IN_CELL:
            case InsertionMode.IN_SELECT:
            case InsertionMode.IN_SELECT_IN_TABLE: {
                eofInBody(this, token);
                break;
            }
            case InsertionMode.TEXT: {
                eofInText(this, token);
                break;
            }
            case InsertionMode.IN_TABLE_TEXT: {
                tokenInTableText(this, token);
                break;
            }
            case InsertionMode.IN_TEMPLATE: {
                eofInTemplate(this, token);
                break;
            }
            case InsertionMode.AFTER_BODY:
            case InsertionMode.IN_FRAMESET:
            case InsertionMode.AFTER_FRAMESET:
            case InsertionMode.AFTER_AFTER_BODY:
            case InsertionMode.AFTER_AFTER_FRAMESET: {
                stopParsing(this, token);
                break;
            }
            default:
        }
    }
    onWhitespaceCharacter(token) {
        if (this.skipNextNewLine) {
            this.skipNextNewLine = false;
            if (token.chars.charCodeAt(0) === CODE_POINTS.LINE_FEED) {
                if (token.chars.length === 1) {
                    return;
                }
                token.chars = token.chars.substr(1);
            }
        }
        if (this.tokenizer.inForeignNode) {
            this._insertCharacters(token);
            return;
        }
        switch (this.insertionMode) {
            case InsertionMode.IN_HEAD:
            case InsertionMode.IN_HEAD_NO_SCRIPT:
            case InsertionMode.AFTER_HEAD:
            case InsertionMode.TEXT:
            case InsertionMode.IN_COLUMN_GROUP:
            case InsertionMode.IN_SELECT:
            case InsertionMode.IN_SELECT_IN_TABLE:
            case InsertionMode.IN_FRAMESET:
            case InsertionMode.AFTER_FRAMESET: {
                this._insertCharacters(token);
                break;
            }
            case InsertionMode.IN_BODY:
            case InsertionMode.IN_CAPTION:
            case InsertionMode.IN_CELL:
            case InsertionMode.IN_TEMPLATE:
            case InsertionMode.AFTER_BODY:
            case InsertionMode.AFTER_AFTER_BODY:
            case InsertionMode.AFTER_AFTER_FRAMESET: {
                whitespaceCharacterInBody(this, token);
                break;
            }
            case InsertionMode.IN_TABLE:
            case InsertionMode.IN_TABLE_BODY:
            case InsertionMode.IN_ROW: {
                characterInTable(this, token);
                break;
            }
            case InsertionMode.IN_TABLE_TEXT: {
                whitespaceCharacterInTableText(this, token);
                break;
            }
            default:
        }
    }
};
function aaObtainFormattingElementEntry(p, token) {
    let formattingElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(
        token.tagName,
    );
    if (formattingElementEntry) {
        if (!p.openElements.contains(formattingElementEntry.element)) {
            p.activeFormattingElements.removeEntry(formattingElementEntry);
            formattingElementEntry = null;
        } else if (!p.openElements.hasInScope(token.tagID)) {
            formattingElementEntry = null;
        }
    } else {
        genericEndTagInBody(p, token);
    }
    return formattingElementEntry;
}
function aaObtainFurthestBlock(p, formattingElementEntry) {
    let furthestBlock = null;
    let idx = p.openElements.stackTop;
    for (; idx >= 0; idx--) {
        const element = p.openElements.items[idx];
        if (element === formattingElementEntry.element) {
            break;
        }
        if (p._isSpecialElement(element, p.openElements.tagIDs[idx])) {
            furthestBlock = element;
        }
    }
    if (!furthestBlock) {
        p.openElements.shortenToLength(idx < 0 ? 0 : idx);
        p.activeFormattingElements.removeEntry(formattingElementEntry);
    }
    return furthestBlock;
}
function aaInnerLoop(p, furthestBlock, formattingElement) {
    let lastElement = furthestBlock;
    let nextElement = p.openElements.getCommonAncestor(furthestBlock);
    for (
        let i2 = 0, element = nextElement;
        element !== formattingElement;
        i2++, element = nextElement
    ) {
        nextElement = p.openElements.getCommonAncestor(element);
        const elementEntry = p.activeFormattingElements.getElementEntry(element);
        const counterOverflow = elementEntry && i2 >= AA_INNER_LOOP_ITER;
        const shouldRemoveFromOpenElements = !elementEntry || counterOverflow;
        if (shouldRemoveFromOpenElements) {
            if (counterOverflow) {
                p.activeFormattingElements.removeEntry(elementEntry);
            }
            p.openElements.remove(element);
        } else {
            element = aaRecreateElementFromEntry(p, elementEntry);
            if (lastElement === furthestBlock) {
                p.activeFormattingElements.bookmark = elementEntry;
            }
            p.treeAdapter.detachNode(lastElement);
            p.treeAdapter.appendChild(element, lastElement);
            lastElement = element;
        }
    }
    return lastElement;
}
function aaRecreateElementFromEntry(p, elementEntry) {
    const ns = p.treeAdapter.getNamespaceURI(elementEntry.element);
    const newElement = p.treeAdapter.createElement(
        elementEntry.token.tagName,
        ns,
        elementEntry.token.attrs,
    );
    p.openElements.replace(elementEntry.element, newElement);
    elementEntry.element = newElement;
    return newElement;
}
function aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement) {
    const tn = p.treeAdapter.getTagName(commonAncestor);
    const tid = getTagID(tn);
    if (p._isElementCausesFosterParenting(tid)) {
        p._fosterParentElement(lastElement);
    } else {
        const ns = p.treeAdapter.getNamespaceURI(commonAncestor);
        if (tid === TAG_ID.TEMPLATE && ns === NS.HTML) {
            commonAncestor = p.treeAdapter.getTemplateContent(commonAncestor);
        }
        p.treeAdapter.appendChild(commonAncestor, lastElement);
    }
}
function aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry) {
    const ns = p.treeAdapter.getNamespaceURI(formattingElementEntry.element);
    const { token } = formattingElementEntry;
    const newElement = p.treeAdapter.createElement(token.tagName, ns, token.attrs);
    p._adoptNodes(furthestBlock, newElement);
    p.treeAdapter.appendChild(furthestBlock, newElement);
    p.activeFormattingElements.insertElementAfterBookmark(newElement, token);
    p.activeFormattingElements.removeEntry(formattingElementEntry);
    p.openElements.remove(formattingElementEntry.element);
    p.openElements.insertAfter(furthestBlock, newElement, token.tagID);
}
function callAdoptionAgency(p, token) {
    for (let i2 = 0; i2 < AA_OUTER_LOOP_ITER; i2++) {
        const formattingElementEntry = aaObtainFormattingElementEntry(p, token);
        if (!formattingElementEntry) {
            break;
        }
        const furthestBlock = aaObtainFurthestBlock(p, formattingElementEntry);
        if (!furthestBlock) {
            break;
        }
        p.activeFormattingElements.bookmark = formattingElementEntry;
        const lastElement = aaInnerLoop(p, furthestBlock, formattingElementEntry.element);
        const commonAncestor = p.openElements.getCommonAncestor(formattingElementEntry.element);
        p.treeAdapter.detachNode(lastElement);
        if (commonAncestor) aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement);
        aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry);
    }
}
function appendComment(p, token) {
    p._appendCommentNode(token, p.openElements.currentTmplContentOrNode);
}
function appendCommentToRootHtmlElement(p, token) {
    p._appendCommentNode(token, p.openElements.items[0]);
}
function appendCommentToDocument(p, token) {
    p._appendCommentNode(token, p.document);
}
function stopParsing(p, token) {
    p.stopped = true;
    if (token.location) {
        const target = p.fragmentContext ? 0 : 2;
        for (let i2 = p.openElements.stackTop; i2 >= target; i2--) {
            p._setEndLocation(p.openElements.items[i2], token);
        }
        if (!p.fragmentContext && p.openElements.stackTop >= 0) {
            const htmlElement = p.openElements.items[0];
            const htmlLocation = p.treeAdapter.getNodeSourceCodeLocation(htmlElement);
            if (htmlLocation && !htmlLocation.endTag) {
                p._setEndLocation(htmlElement, token);
                if (p.openElements.stackTop >= 1) {
                    const bodyElement = p.openElements.items[1];
                    const bodyLocation = p.treeAdapter.getNodeSourceCodeLocation(bodyElement);
                    if (bodyLocation && !bodyLocation.endTag) {
                        p._setEndLocation(bodyElement, token);
                    }
                }
            }
        }
    }
}
function doctypeInInitialMode(p, token) {
    p._setDocumentType(token);
    const mode = token.forceQuirks ? DOCUMENT_MODE.QUIRKS : getDocumentMode(token);
    if (!isConforming(token)) {
        p._err(token, ERR.nonConformingDoctype);
    }
    p.treeAdapter.setDocumentMode(p.document, mode);
    p.insertionMode = InsertionMode.BEFORE_HTML;
}
function tokenInInitialMode(p, token) {
    p._err(token, ERR.missingDoctype, true);
    p.treeAdapter.setDocumentMode(p.document, DOCUMENT_MODE.QUIRKS);
    p.insertionMode = InsertionMode.BEFORE_HTML;
    p._processToken(token);
}
function startTagBeforeHtml(p, token) {
    if (token.tagID === TAG_ID.HTML) {
        p._insertElement(token, NS.HTML);
        p.insertionMode = InsertionMode.BEFORE_HEAD;
    } else {
        tokenBeforeHtml(p, token);
    }
}
function endTagBeforeHtml(p, token) {
    const tn = token.tagID;
    if (tn === TAG_ID.HTML || tn === TAG_ID.HEAD || tn === TAG_ID.BODY || tn === TAG_ID.BR) {
        tokenBeforeHtml(p, token);
    }
}
function tokenBeforeHtml(p, token) {
    p._insertFakeRootElement();
    p.insertionMode = InsertionMode.BEFORE_HEAD;
    p._processToken(token);
}
function startTagBeforeHead(p, token) {
    switch (token.tagID) {
        case TAG_ID.HTML: {
            startTagInBody(p, token);
            break;
        }
        case TAG_ID.HEAD: {
            p._insertElement(token, NS.HTML);
            p.headElement = p.openElements.current;
            p.insertionMode = InsertionMode.IN_HEAD;
            break;
        }
        default: {
            tokenBeforeHead(p, token);
        }
    }
}
function endTagBeforeHead(p, token) {
    const tn = token.tagID;
    if (tn === TAG_ID.HEAD || tn === TAG_ID.BODY || tn === TAG_ID.HTML || tn === TAG_ID.BR) {
        tokenBeforeHead(p, token);
    } else {
        p._err(token, ERR.endTagWithoutMatchingOpenElement);
    }
}
function tokenBeforeHead(p, token) {
    p._insertFakeElement(TAG_NAMES.HEAD, TAG_ID.HEAD);
    p.headElement = p.openElements.current;
    p.insertionMode = InsertionMode.IN_HEAD;
    p._processToken(token);
}
function startTagInHead(p, token) {
    switch (token.tagID) {
        case TAG_ID.HTML: {
            startTagInBody(p, token);
            break;
        }
        case TAG_ID.BASE:
        case TAG_ID.BASEFONT:
        case TAG_ID.BGSOUND:
        case TAG_ID.LINK:
        case TAG_ID.META: {
            p._appendElement(token, NS.HTML);
            token.ackSelfClosing = true;
            break;
        }
        case TAG_ID.TITLE: {
            p._switchToTextParsing(token, TokenizerMode.RCDATA);
            break;
        }
        case TAG_ID.NOSCRIPT: {
            if (p.options.scriptingEnabled) {
                p._switchToTextParsing(token, TokenizerMode.RAWTEXT);
            } else {
                p._insertElement(token, NS.HTML);
                p.insertionMode = InsertionMode.IN_HEAD_NO_SCRIPT;
            }
            break;
        }
        case TAG_ID.NOFRAMES:
        case TAG_ID.STYLE: {
            p._switchToTextParsing(token, TokenizerMode.RAWTEXT);
            break;
        }
        case TAG_ID.SCRIPT: {
            p._switchToTextParsing(token, TokenizerMode.SCRIPT_DATA);
            break;
        }
        case TAG_ID.TEMPLATE: {
            p._insertTemplate(token);
            p.activeFormattingElements.insertMarker();
            p.framesetOk = false;
            p.insertionMode = InsertionMode.IN_TEMPLATE;
            p.tmplInsertionModeStack.unshift(InsertionMode.IN_TEMPLATE);
            break;
        }
        case TAG_ID.HEAD: {
            p._err(token, ERR.misplacedStartTagForHeadElement);
            break;
        }
        default: {
            tokenInHead(p, token);
        }
    }
}
function endTagInHead(p, token) {
    switch (token.tagID) {
        case TAG_ID.HEAD: {
            p.openElements.pop();
            p.insertionMode = InsertionMode.AFTER_HEAD;
            break;
        }
        case TAG_ID.BODY:
        case TAG_ID.BR:
        case TAG_ID.HTML: {
            tokenInHead(p, token);
            break;
        }
        case TAG_ID.TEMPLATE: {
            templateEndTagInHead(p, token);
            break;
        }
        default: {
            p._err(token, ERR.endTagWithoutMatchingOpenElement);
        }
    }
}
function templateEndTagInHead(p, token) {
    if (p.openElements.tmplCount > 0) {
        p.openElements.generateImpliedEndTagsThoroughly();
        if (p.openElements.currentTagId !== TAG_ID.TEMPLATE) {
            p._err(token, ERR.closingOfElementWithOpenChildElements);
        }
        p.openElements.popUntilTagNamePopped(TAG_ID.TEMPLATE);
        p.activeFormattingElements.clearToLastMarker();
        p.tmplInsertionModeStack.shift();
        p._resetInsertionMode();
    } else {
        p._err(token, ERR.endTagWithoutMatchingOpenElement);
    }
}
function tokenInHead(p, token) {
    p.openElements.pop();
    p.insertionMode = InsertionMode.AFTER_HEAD;
    p._processToken(token);
}
function startTagInHeadNoScript(p, token) {
    switch (token.tagID) {
        case TAG_ID.HTML: {
            startTagInBody(p, token);
            break;
        }
        case TAG_ID.BASEFONT:
        case TAG_ID.BGSOUND:
        case TAG_ID.HEAD:
        case TAG_ID.LINK:
        case TAG_ID.META:
        case TAG_ID.NOFRAMES:
        case TAG_ID.STYLE: {
            startTagInHead(p, token);
            break;
        }
        case TAG_ID.NOSCRIPT: {
            p._err(token, ERR.nestedNoscriptInHead);
            break;
        }
        default: {
            tokenInHeadNoScript(p, token);
        }
    }
}
function endTagInHeadNoScript(p, token) {
    switch (token.tagID) {
        case TAG_ID.NOSCRIPT: {
            p.openElements.pop();
            p.insertionMode = InsertionMode.IN_HEAD;
            break;
        }
        case TAG_ID.BR: {
            tokenInHeadNoScript(p, token);
            break;
        }
        default: {
            p._err(token, ERR.endTagWithoutMatchingOpenElement);
        }
    }
}
function tokenInHeadNoScript(p, token) {
    const errCode =
        token.type === TokenType.EOF
            ? ERR.openElementsLeftAfterEof
            : ERR.disallowedContentInNoscriptInHead;
    p._err(token, errCode);
    p.openElements.pop();
    p.insertionMode = InsertionMode.IN_HEAD;
    p._processToken(token);
}
function startTagAfterHead(p, token) {
    switch (token.tagID) {
        case TAG_ID.HTML: {
            startTagInBody(p, token);
            break;
        }
        case TAG_ID.BODY: {
            p._insertElement(token, NS.HTML);
            p.framesetOk = false;
            p.insertionMode = InsertionMode.IN_BODY;
            break;
        }
        case TAG_ID.FRAMESET: {
            p._insertElement(token, NS.HTML);
            p.insertionMode = InsertionMode.IN_FRAMESET;
            break;
        }
        case TAG_ID.BASE:
        case TAG_ID.BASEFONT:
        case TAG_ID.BGSOUND:
        case TAG_ID.LINK:
        case TAG_ID.META:
        case TAG_ID.NOFRAMES:
        case TAG_ID.SCRIPT:
        case TAG_ID.STYLE:
        case TAG_ID.TEMPLATE:
        case TAG_ID.TITLE: {
            p._err(token, ERR.abandonedHeadElementChild);
            p.openElements.push(p.headElement, TAG_ID.HEAD);
            startTagInHead(p, token);
            p.openElements.remove(p.headElement);
            break;
        }
        case TAG_ID.HEAD: {
            p._err(token, ERR.misplacedStartTagForHeadElement);
            break;
        }
        default: {
            tokenAfterHead(p, token);
        }
    }
}
function endTagAfterHead(p, token) {
    switch (token.tagID) {
        case TAG_ID.BODY:
        case TAG_ID.HTML:
        case TAG_ID.BR: {
            tokenAfterHead(p, token);
            break;
        }
        case TAG_ID.TEMPLATE: {
            templateEndTagInHead(p, token);
            break;
        }
        default: {
            p._err(token, ERR.endTagWithoutMatchingOpenElement);
        }
    }
}
function tokenAfterHead(p, token) {
    p._insertFakeElement(TAG_NAMES.BODY, TAG_ID.BODY);
    p.insertionMode = InsertionMode.IN_BODY;
    modeInBody(p, token);
}
function modeInBody(p, token) {
    switch (token.type) {
        case TokenType.CHARACTER: {
            characterInBody(p, token);
            break;
        }
        case TokenType.WHITESPACE_CHARACTER: {
            whitespaceCharacterInBody(p, token);
            break;
        }
        case TokenType.COMMENT: {
            appendComment(p, token);
            break;
        }
        case TokenType.START_TAG: {
            startTagInBody(p, token);
            break;
        }
        case TokenType.END_TAG: {
            endTagInBody(p, token);
            break;
        }
        case TokenType.EOF: {
            eofInBody(p, token);
            break;
        }
        default:
    }
}
function whitespaceCharacterInBody(p, token) {
    p._reconstructActiveFormattingElements();
    p._insertCharacters(token);
}
function characterInBody(p, token) {
    p._reconstructActiveFormattingElements();
    p._insertCharacters(token);
    p.framesetOk = false;
}
function htmlStartTagInBody(p, token) {
    if (p.openElements.tmplCount === 0) {
        p.treeAdapter.adoptAttributes(p.openElements.items[0], token.attrs);
    }
}
function bodyStartTagInBody(p, token) {
    const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();
    if (bodyElement && p.openElements.tmplCount === 0) {
        p.framesetOk = false;
        p.treeAdapter.adoptAttributes(bodyElement, token.attrs);
    }
}
function framesetStartTagInBody(p, token) {
    const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();
    if (p.framesetOk && bodyElement) {
        p.treeAdapter.detachNode(bodyElement);
        p.openElements.popAllUpToHtmlElement();
        p._insertElement(token, NS.HTML);
        p.insertionMode = InsertionMode.IN_FRAMESET;
    }
}
function addressStartTagInBody(p, token) {
    if (p.openElements.hasInButtonScope(TAG_ID.P)) {
        p._closePElement();
    }
    p._insertElement(token, NS.HTML);
}
function numberedHeaderStartTagInBody(p, token) {
    if (p.openElements.hasInButtonScope(TAG_ID.P)) {
        p._closePElement();
    }
    if (isNumberedHeader(p.openElements.currentTagId)) {
        p.openElements.pop();
    }
    p._insertElement(token, NS.HTML);
}
function preStartTagInBody(p, token) {
    if (p.openElements.hasInButtonScope(TAG_ID.P)) {
        p._closePElement();
    }
    p._insertElement(token, NS.HTML);
    p.skipNextNewLine = true;
    p.framesetOk = false;
}
function formStartTagInBody(p, token) {
    const inTemplate = p.openElements.tmplCount > 0;
    if (!p.formElement || inTemplate) {
        if (p.openElements.hasInButtonScope(TAG_ID.P)) {
            p._closePElement();
        }
        p._insertElement(token, NS.HTML);
        if (!inTemplate) {
            p.formElement = p.openElements.current;
        }
    }
}
function listItemStartTagInBody(p, token) {
    p.framesetOk = false;
    const tn = token.tagID;
    for (let i2 = p.openElements.stackTop; i2 >= 0; i2--) {
        const elementId = p.openElements.tagIDs[i2];
        if (
            (tn === TAG_ID.LI && elementId === TAG_ID.LI) ||
            ((tn === TAG_ID.DD || tn === TAG_ID.DT) &&
                (elementId === TAG_ID.DD || elementId === TAG_ID.DT))
        ) {
            p.openElements.generateImpliedEndTagsWithExclusion(elementId);
            p.openElements.popUntilTagNamePopped(elementId);
            break;
        }
        if (
            elementId !== TAG_ID.ADDRESS &&
            elementId !== TAG_ID.DIV &&
            elementId !== TAG_ID.P &&
            p._isSpecialElement(p.openElements.items[i2], elementId)
        ) {
            break;
        }
    }
    if (p.openElements.hasInButtonScope(TAG_ID.P)) {
        p._closePElement();
    }
    p._insertElement(token, NS.HTML);
}
function plaintextStartTagInBody(p, token) {
    if (p.openElements.hasInButtonScope(TAG_ID.P)) {
        p._closePElement();
    }
    p._insertElement(token, NS.HTML);
    p.tokenizer.state = TokenizerMode.PLAINTEXT;
}
function buttonStartTagInBody(p, token) {
    if (p.openElements.hasInScope(TAG_ID.BUTTON)) {
        p.openElements.generateImpliedEndTags();
        p.openElements.popUntilTagNamePopped(TAG_ID.BUTTON);
    }
    p._reconstructActiveFormattingElements();
    p._insertElement(token, NS.HTML);
    p.framesetOk = false;
}
function aStartTagInBody(p, token) {
    const activeElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(
        TAG_NAMES.A,
    );
    if (activeElementEntry) {
        callAdoptionAgency(p, token);
        p.openElements.remove(activeElementEntry.element);
        p.activeFormattingElements.removeEntry(activeElementEntry);
    }
    p._reconstructActiveFormattingElements();
    p._insertElement(token, NS.HTML);
    p.activeFormattingElements.pushElement(p.openElements.current, token);
}
function bStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();
    p._insertElement(token, NS.HTML);
    p.activeFormattingElements.pushElement(p.openElements.current, token);
}
function nobrStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();
    if (p.openElements.hasInScope(TAG_ID.NOBR)) {
        callAdoptionAgency(p, token);
        p._reconstructActiveFormattingElements();
    }
    p._insertElement(token, NS.HTML);
    p.activeFormattingElements.pushElement(p.openElements.current, token);
}
function appletStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();
    p._insertElement(token, NS.HTML);
    p.activeFormattingElements.insertMarker();
    p.framesetOk = false;
}
function tableStartTagInBody(p, token) {
    if (
        p.treeAdapter.getDocumentMode(p.document) !== DOCUMENT_MODE.QUIRKS &&
        p.openElements.hasInButtonScope(TAG_ID.P)
    ) {
        p._closePElement();
    }
    p._insertElement(token, NS.HTML);
    p.framesetOk = false;
    p.insertionMode = InsertionMode.IN_TABLE;
}
function areaStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();
    p._appendElement(token, NS.HTML);
    p.framesetOk = false;
    token.ackSelfClosing = true;
}
function isHiddenInput(token) {
    const inputType = getTokenAttr(token, ATTRS.TYPE);
    return inputType != null && inputType.toLowerCase() === HIDDEN_INPUT_TYPE;
}
function inputStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();
    p._appendElement(token, NS.HTML);
    if (!isHiddenInput(token)) {
        p.framesetOk = false;
    }
    token.ackSelfClosing = true;
}
function paramStartTagInBody(p, token) {
    p._appendElement(token, NS.HTML);
    token.ackSelfClosing = true;
}
function hrStartTagInBody(p, token) {
    if (p.openElements.hasInButtonScope(TAG_ID.P)) {
        p._closePElement();
    }
    p._appendElement(token, NS.HTML);
    p.framesetOk = false;
    token.ackSelfClosing = true;
}
function imageStartTagInBody(p, token) {
    token.tagName = TAG_NAMES.IMG;
    token.tagID = TAG_ID.IMG;
    areaStartTagInBody(p, token);
}
function textareaStartTagInBody(p, token) {
    p._insertElement(token, NS.HTML);
    p.skipNextNewLine = true;
    p.tokenizer.state = TokenizerMode.RCDATA;
    p.originalInsertionMode = p.insertionMode;
    p.framesetOk = false;
    p.insertionMode = InsertionMode.TEXT;
}
function xmpStartTagInBody(p, token) {
    if (p.openElements.hasInButtonScope(TAG_ID.P)) {
        p._closePElement();
    }
    p._reconstructActiveFormattingElements();
    p.framesetOk = false;
    p._switchToTextParsing(token, TokenizerMode.RAWTEXT);
}
function iframeStartTagInBody(p, token) {
    p.framesetOk = false;
    p._switchToTextParsing(token, TokenizerMode.RAWTEXT);
}
function noembedStartTagInBody(p, token) {
    p._switchToTextParsing(token, TokenizerMode.RAWTEXT);
}
function selectStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();
    p._insertElement(token, NS.HTML);
    p.framesetOk = false;
    p.insertionMode =
        p.insertionMode === InsertionMode.IN_TABLE ||
        p.insertionMode === InsertionMode.IN_CAPTION ||
        p.insertionMode === InsertionMode.IN_TABLE_BODY ||
        p.insertionMode === InsertionMode.IN_ROW ||
        p.insertionMode === InsertionMode.IN_CELL
            ? InsertionMode.IN_SELECT_IN_TABLE
            : InsertionMode.IN_SELECT;
}
function optgroupStartTagInBody(p, token) {
    if (p.openElements.currentTagId === TAG_ID.OPTION) {
        p.openElements.pop();
    }
    p._reconstructActiveFormattingElements();
    p._insertElement(token, NS.HTML);
}
function rbStartTagInBody(p, token) {
    if (p.openElements.hasInScope(TAG_ID.RUBY)) {
        p.openElements.generateImpliedEndTags();
    }
    p._insertElement(token, NS.HTML);
}
function rtStartTagInBody(p, token) {
    if (p.openElements.hasInScope(TAG_ID.RUBY)) {
        p.openElements.generateImpliedEndTagsWithExclusion(TAG_ID.RTC);
    }
    p._insertElement(token, NS.HTML);
}
function mathStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();
    adjustTokenMathMLAttrs(token);
    adjustTokenXMLAttrs(token);
    if (token.selfClosing) {
        p._appendElement(token, NS.MATHML);
    } else {
        p._insertElement(token, NS.MATHML);
    }
    token.ackSelfClosing = true;
}
function svgStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();
    adjustTokenSVGAttrs(token);
    adjustTokenXMLAttrs(token);
    if (token.selfClosing) {
        p._appendElement(token, NS.SVG);
    } else {
        p._insertElement(token, NS.SVG);
    }
    token.ackSelfClosing = true;
}
function genericStartTagInBody(p, token) {
    p._reconstructActiveFormattingElements();
    p._insertElement(token, NS.HTML);
}
function startTagInBody(p, token) {
    switch (token.tagID) {
        case TAG_ID.I:
        case TAG_ID.S:
        case TAG_ID.B:
        case TAG_ID.U:
        case TAG_ID.EM:
        case TAG_ID.TT:
        case TAG_ID.BIG:
        case TAG_ID.CODE:
        case TAG_ID.FONT:
        case TAG_ID.SMALL:
        case TAG_ID.STRIKE:
        case TAG_ID.STRONG: {
            bStartTagInBody(p, token);
            break;
        }
        case TAG_ID.A: {
            aStartTagInBody(p, token);
            break;
        }
        case TAG_ID.H1:
        case TAG_ID.H2:
        case TAG_ID.H3:
        case TAG_ID.H4:
        case TAG_ID.H5:
        case TAG_ID.H6: {
            numberedHeaderStartTagInBody(p, token);
            break;
        }
        case TAG_ID.P:
        case TAG_ID.DL:
        case TAG_ID.OL:
        case TAG_ID.UL:
        case TAG_ID.DIV:
        case TAG_ID.DIR:
        case TAG_ID.NAV:
        case TAG_ID.MAIN:
        case TAG_ID.MENU:
        case TAG_ID.ASIDE:
        case TAG_ID.CENTER:
        case TAG_ID.FIGURE:
        case TAG_ID.FOOTER:
        case TAG_ID.HEADER:
        case TAG_ID.HGROUP:
        case TAG_ID.DIALOG:
        case TAG_ID.DETAILS:
        case TAG_ID.ADDRESS:
        case TAG_ID.ARTICLE:
        case TAG_ID.SECTION:
        case TAG_ID.SUMMARY:
        case TAG_ID.FIELDSET:
        case TAG_ID.BLOCKQUOTE:
        case TAG_ID.FIGCAPTION: {
            addressStartTagInBody(p, token);
            break;
        }
        case TAG_ID.LI:
        case TAG_ID.DD:
        case TAG_ID.DT: {
            listItemStartTagInBody(p, token);
            break;
        }
        case TAG_ID.BR:
        case TAG_ID.IMG:
        case TAG_ID.WBR:
        case TAG_ID.AREA:
        case TAG_ID.EMBED:
        case TAG_ID.KEYGEN: {
            areaStartTagInBody(p, token);
            break;
        }
        case TAG_ID.HR: {
            hrStartTagInBody(p, token);
            break;
        }
        case TAG_ID.RB:
        case TAG_ID.RTC: {
            rbStartTagInBody(p, token);
            break;
        }
        case TAG_ID.RT:
        case TAG_ID.RP: {
            rtStartTagInBody(p, token);
            break;
        }
        case TAG_ID.PRE:
        case TAG_ID.LISTING: {
            preStartTagInBody(p, token);
            break;
        }
        case TAG_ID.XMP: {
            xmpStartTagInBody(p, token);
            break;
        }
        case TAG_ID.SVG: {
            svgStartTagInBody(p, token);
            break;
        }
        case TAG_ID.HTML: {
            htmlStartTagInBody(p, token);
            break;
        }
        case TAG_ID.BASE:
        case TAG_ID.LINK:
        case TAG_ID.META:
        case TAG_ID.STYLE:
        case TAG_ID.TITLE:
        case TAG_ID.SCRIPT:
        case TAG_ID.BGSOUND:
        case TAG_ID.BASEFONT:
        case TAG_ID.TEMPLATE: {
            startTagInHead(p, token);
            break;
        }
        case TAG_ID.BODY: {
            bodyStartTagInBody(p, token);
            break;
        }
        case TAG_ID.FORM: {
            formStartTagInBody(p, token);
            break;
        }
        case TAG_ID.NOBR: {
            nobrStartTagInBody(p, token);
            break;
        }
        case TAG_ID.MATH: {
            mathStartTagInBody(p, token);
            break;
        }
        case TAG_ID.TABLE: {
            tableStartTagInBody(p, token);
            break;
        }
        case TAG_ID.INPUT: {
            inputStartTagInBody(p, token);
            break;
        }
        case TAG_ID.PARAM:
        case TAG_ID.TRACK:
        case TAG_ID.SOURCE: {
            paramStartTagInBody(p, token);
            break;
        }
        case TAG_ID.IMAGE: {
            imageStartTagInBody(p, token);
            break;
        }
        case TAG_ID.BUTTON: {
            buttonStartTagInBody(p, token);
            break;
        }
        case TAG_ID.APPLET:
        case TAG_ID.OBJECT:
        case TAG_ID.MARQUEE: {
            appletStartTagInBody(p, token);
            break;
        }
        case TAG_ID.IFRAME: {
            iframeStartTagInBody(p, token);
            break;
        }
        case TAG_ID.SELECT: {
            selectStartTagInBody(p, token);
            break;
        }
        case TAG_ID.OPTION:
        case TAG_ID.OPTGROUP: {
            optgroupStartTagInBody(p, token);
            break;
        }
        case TAG_ID.NOEMBED: {
            noembedStartTagInBody(p, token);
            break;
        }
        case TAG_ID.FRAMESET: {
            framesetStartTagInBody(p, token);
            break;
        }
        case TAG_ID.TEXTAREA: {
            textareaStartTagInBody(p, token);
            break;
        }
        case TAG_ID.NOSCRIPT: {
            if (p.options.scriptingEnabled) {
                noembedStartTagInBody(p, token);
            } else {
                genericStartTagInBody(p, token);
            }
            break;
        }
        case TAG_ID.PLAINTEXT: {
            plaintextStartTagInBody(p, token);
            break;
        }
        case TAG_ID.COL:
        case TAG_ID.TH:
        case TAG_ID.TD:
        case TAG_ID.TR:
        case TAG_ID.HEAD:
        case TAG_ID.FRAME:
        case TAG_ID.TBODY:
        case TAG_ID.TFOOT:
        case TAG_ID.THEAD:
        case TAG_ID.CAPTION:
        case TAG_ID.COLGROUP: {
            break;
        }
        default: {
            genericStartTagInBody(p, token);
        }
    }
}
function bodyEndTagInBody(p, token) {
    if (p.openElements.hasInScope(TAG_ID.BODY)) {
        p.insertionMode = InsertionMode.AFTER_BODY;
        if (p.options.sourceCodeLocationInfo) {
            const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();
            if (bodyElement) {
                p._setEndLocation(bodyElement, token);
            }
        }
    }
}
function htmlEndTagInBody(p, token) {
    if (p.openElements.hasInScope(TAG_ID.BODY)) {
        p.insertionMode = InsertionMode.AFTER_BODY;
        endTagAfterBody(p, token);
    }
}
function addressEndTagInBody(p, token) {
    const tn = token.tagID;
    if (p.openElements.hasInScope(tn)) {
        p.openElements.generateImpliedEndTags();
        p.openElements.popUntilTagNamePopped(tn);
    }
}
function formEndTagInBody(p) {
    const inTemplate = p.openElements.tmplCount > 0;
    const { formElement } = p;
    if (!inTemplate) {
        p.formElement = null;
    }
    if ((formElement || inTemplate) && p.openElements.hasInScope(TAG_ID.FORM)) {
        p.openElements.generateImpliedEndTags();
        if (inTemplate) {
            p.openElements.popUntilTagNamePopped(TAG_ID.FORM);
        } else if (formElement) {
            p.openElements.remove(formElement);
        }
    }
}
function pEndTagInBody(p) {
    if (!p.openElements.hasInButtonScope(TAG_ID.P)) {
        p._insertFakeElement(TAG_NAMES.P, TAG_ID.P);
    }
    p._closePElement();
}
function liEndTagInBody(p) {
    if (p.openElements.hasInListItemScope(TAG_ID.LI)) {
        p.openElements.generateImpliedEndTagsWithExclusion(TAG_ID.LI);
        p.openElements.popUntilTagNamePopped(TAG_ID.LI);
    }
}
function ddEndTagInBody(p, token) {
    const tn = token.tagID;
    if (p.openElements.hasInScope(tn)) {
        p.openElements.generateImpliedEndTagsWithExclusion(tn);
        p.openElements.popUntilTagNamePopped(tn);
    }
}
function numberedHeaderEndTagInBody(p) {
    if (p.openElements.hasNumberedHeaderInScope()) {
        p.openElements.generateImpliedEndTags();
        p.openElements.popUntilNumberedHeaderPopped();
    }
}
function appletEndTagInBody(p, token) {
    const tn = token.tagID;
    if (p.openElements.hasInScope(tn)) {
        p.openElements.generateImpliedEndTags();
        p.openElements.popUntilTagNamePopped(tn);
        p.activeFormattingElements.clearToLastMarker();
    }
}
function brEndTagInBody(p) {
    p._reconstructActiveFormattingElements();
    p._insertFakeElement(TAG_NAMES.BR, TAG_ID.BR);
    p.openElements.pop();
    p.framesetOk = false;
}
function genericEndTagInBody(p, token) {
    const tn = token.tagName;
    const tid = token.tagID;
    for (let i2 = p.openElements.stackTop; i2 > 0; i2--) {
        const element = p.openElements.items[i2];
        const elementId = p.openElements.tagIDs[i2];
        if (
            tid === elementId &&
            (tid !== TAG_ID.UNKNOWN || p.treeAdapter.getTagName(element) === tn)
        ) {
            p.openElements.generateImpliedEndTagsWithExclusion(tid);
            if (p.openElements.stackTop >= i2) p.openElements.shortenToLength(i2);
            break;
        }
        if (p._isSpecialElement(element, elementId)) {
            break;
        }
    }
}
function endTagInBody(p, token) {
    switch (token.tagID) {
        case TAG_ID.A:
        case TAG_ID.B:
        case TAG_ID.I:
        case TAG_ID.S:
        case TAG_ID.U:
        case TAG_ID.EM:
        case TAG_ID.TT:
        case TAG_ID.BIG:
        case TAG_ID.CODE:
        case TAG_ID.FONT:
        case TAG_ID.NOBR:
        case TAG_ID.SMALL:
        case TAG_ID.STRIKE:
        case TAG_ID.STRONG: {
            callAdoptionAgency(p, token);
            break;
        }
        case TAG_ID.P: {
            pEndTagInBody(p);
            break;
        }
        case TAG_ID.DL:
        case TAG_ID.UL:
        case TAG_ID.OL:
        case TAG_ID.DIR:
        case TAG_ID.DIV:
        case TAG_ID.NAV:
        case TAG_ID.PRE:
        case TAG_ID.MAIN:
        case TAG_ID.MENU:
        case TAG_ID.ASIDE:
        case TAG_ID.BUTTON:
        case TAG_ID.CENTER:
        case TAG_ID.FIGURE:
        case TAG_ID.FOOTER:
        case TAG_ID.HEADER:
        case TAG_ID.HGROUP:
        case TAG_ID.DIALOG:
        case TAG_ID.ADDRESS:
        case TAG_ID.ARTICLE:
        case TAG_ID.DETAILS:
        case TAG_ID.SECTION:
        case TAG_ID.SUMMARY:
        case TAG_ID.LISTING:
        case TAG_ID.FIELDSET:
        case TAG_ID.BLOCKQUOTE:
        case TAG_ID.FIGCAPTION: {
            addressEndTagInBody(p, token);
            break;
        }
        case TAG_ID.LI: {
            liEndTagInBody(p);
            break;
        }
        case TAG_ID.DD:
        case TAG_ID.DT: {
            ddEndTagInBody(p, token);
            break;
        }
        case TAG_ID.H1:
        case TAG_ID.H2:
        case TAG_ID.H3:
        case TAG_ID.H4:
        case TAG_ID.H5:
        case TAG_ID.H6: {
            numberedHeaderEndTagInBody(p);
            break;
        }
        case TAG_ID.BR: {
            brEndTagInBody(p);
            break;
        }
        case TAG_ID.BODY: {
            bodyEndTagInBody(p, token);
            break;
        }
        case TAG_ID.HTML: {
            htmlEndTagInBody(p, token);
            break;
        }
        case TAG_ID.FORM: {
            formEndTagInBody(p);
            break;
        }
        case TAG_ID.APPLET:
        case TAG_ID.OBJECT:
        case TAG_ID.MARQUEE: {
            appletEndTagInBody(p, token);
            break;
        }
        case TAG_ID.TEMPLATE: {
            templateEndTagInHead(p, token);
            break;
        }
        default: {
            genericEndTagInBody(p, token);
        }
    }
}
function eofInBody(p, token) {
    if (p.tmplInsertionModeStack.length > 0) {
        eofInTemplate(p, token);
    } else {
        stopParsing(p, token);
    }
}
function endTagInText(p, token) {
    var _a5;
    if (token.tagID === TAG_ID.SCRIPT) {
        (_a5 = p.scriptHandler) === null || _a5 === void 0
            ? void 0
            : _a5.call(p, p.openElements.current);
    }
    p.openElements.pop();
    p.insertionMode = p.originalInsertionMode;
}
function eofInText(p, token) {
    p._err(token, ERR.eofInElementThatCanContainOnlyText);
    p.openElements.pop();
    p.insertionMode = p.originalInsertionMode;
    p.onEof(token);
}
function characterInTable(p, token) {
    if (TABLE_STRUCTURE_TAGS.has(p.openElements.currentTagId)) {
        p.pendingCharacterTokens.length = 0;
        p.hasNonWhitespacePendingCharacterToken = false;
        p.originalInsertionMode = p.insertionMode;
        p.insertionMode = InsertionMode.IN_TABLE_TEXT;
        switch (token.type) {
            case TokenType.CHARACTER: {
                characterInTableText(p, token);
                break;
            }
            case TokenType.WHITESPACE_CHARACTER: {
                whitespaceCharacterInTableText(p, token);
                break;
            }
        }
    } else {
        tokenInTable(p, token);
    }
}
function captionStartTagInTable(p, token) {
    p.openElements.clearBackToTableContext();
    p.activeFormattingElements.insertMarker();
    p._insertElement(token, NS.HTML);
    p.insertionMode = InsertionMode.IN_CAPTION;
}
function colgroupStartTagInTable(p, token) {
    p.openElements.clearBackToTableContext();
    p._insertElement(token, NS.HTML);
    p.insertionMode = InsertionMode.IN_COLUMN_GROUP;
}
function colStartTagInTable(p, token) {
    p.openElements.clearBackToTableContext();
    p._insertFakeElement(TAG_NAMES.COLGROUP, TAG_ID.COLGROUP);
    p.insertionMode = InsertionMode.IN_COLUMN_GROUP;
    startTagInColumnGroup(p, token);
}
function tbodyStartTagInTable(p, token) {
    p.openElements.clearBackToTableContext();
    p._insertElement(token, NS.HTML);
    p.insertionMode = InsertionMode.IN_TABLE_BODY;
}
function tdStartTagInTable(p, token) {
    p.openElements.clearBackToTableContext();
    p._insertFakeElement(TAG_NAMES.TBODY, TAG_ID.TBODY);
    p.insertionMode = InsertionMode.IN_TABLE_BODY;
    startTagInTableBody(p, token);
}
function tableStartTagInTable(p, token) {
    if (p.openElements.hasInTableScope(TAG_ID.TABLE)) {
        p.openElements.popUntilTagNamePopped(TAG_ID.TABLE);
        p._resetInsertionMode();
        p._processStartTag(token);
    }
}
function inputStartTagInTable(p, token) {
    if (isHiddenInput(token)) {
        p._appendElement(token, NS.HTML);
    } else {
        tokenInTable(p, token);
    }
    token.ackSelfClosing = true;
}
function formStartTagInTable(p, token) {
    if (!p.formElement && p.openElements.tmplCount === 0) {
        p._insertElement(token, NS.HTML);
        p.formElement = p.openElements.current;
        p.openElements.pop();
    }
}
function startTagInTable(p, token) {
    switch (token.tagID) {
        case TAG_ID.TD:
        case TAG_ID.TH:
        case TAG_ID.TR: {
            tdStartTagInTable(p, token);
            break;
        }
        case TAG_ID.STYLE:
        case TAG_ID.SCRIPT:
        case TAG_ID.TEMPLATE: {
            startTagInHead(p, token);
            break;
        }
        case TAG_ID.COL: {
            colStartTagInTable(p, token);
            break;
        }
        case TAG_ID.FORM: {
            formStartTagInTable(p, token);
            break;
        }
        case TAG_ID.TABLE: {
            tableStartTagInTable(p, token);
            break;
        }
        case TAG_ID.TBODY:
        case TAG_ID.TFOOT:
        case TAG_ID.THEAD: {
            tbodyStartTagInTable(p, token);
            break;
        }
        case TAG_ID.INPUT: {
            inputStartTagInTable(p, token);
            break;
        }
        case TAG_ID.CAPTION: {
            captionStartTagInTable(p, token);
            break;
        }
        case TAG_ID.COLGROUP: {
            colgroupStartTagInTable(p, token);
            break;
        }
        default: {
            tokenInTable(p, token);
        }
    }
}
function endTagInTable(p, token) {
    switch (token.tagID) {
        case TAG_ID.TABLE: {
            if (p.openElements.hasInTableScope(TAG_ID.TABLE)) {
                p.openElements.popUntilTagNamePopped(TAG_ID.TABLE);
                p._resetInsertionMode();
            }
            break;
        }
        case TAG_ID.TEMPLATE: {
            templateEndTagInHead(p, token);
            break;
        }
        case TAG_ID.BODY:
        case TAG_ID.CAPTION:
        case TAG_ID.COL:
        case TAG_ID.COLGROUP:
        case TAG_ID.HTML:
        case TAG_ID.TBODY:
        case TAG_ID.TD:
        case TAG_ID.TFOOT:
        case TAG_ID.TH:
        case TAG_ID.THEAD:
        case TAG_ID.TR: {
            break;
        }
        default: {
            tokenInTable(p, token);
        }
    }
}
function tokenInTable(p, token) {
    const savedFosterParentingState = p.fosterParentingEnabled;
    p.fosterParentingEnabled = true;
    modeInBody(p, token);
    p.fosterParentingEnabled = savedFosterParentingState;
}
function whitespaceCharacterInTableText(p, token) {
    p.pendingCharacterTokens.push(token);
}
function characterInTableText(p, token) {
    p.pendingCharacterTokens.push(token);
    p.hasNonWhitespacePendingCharacterToken = true;
}
function tokenInTableText(p, token) {
    let i2 = 0;
    if (p.hasNonWhitespacePendingCharacterToken) {
        for (; i2 < p.pendingCharacterTokens.length; i2++) {
            tokenInTable(p, p.pendingCharacterTokens[i2]);
        }
    } else {
        for (; i2 < p.pendingCharacterTokens.length; i2++) {
            p._insertCharacters(p.pendingCharacterTokens[i2]);
        }
    }
    p.insertionMode = p.originalInsertionMode;
    p._processToken(token);
}
var TABLE_VOID_ELEMENTS = /* @__PURE__ */ new Set([
    TAG_ID.CAPTION,
    TAG_ID.COL,
    TAG_ID.COLGROUP,
    TAG_ID.TBODY,
    TAG_ID.TD,
    TAG_ID.TFOOT,
    TAG_ID.TH,
    TAG_ID.THEAD,
    TAG_ID.TR,
]);
function startTagInCaption(p, token) {
    const tn = token.tagID;
    if (TABLE_VOID_ELEMENTS.has(tn)) {
        if (p.openElements.hasInTableScope(TAG_ID.CAPTION)) {
            p.openElements.generateImpliedEndTags();
            p.openElements.popUntilTagNamePopped(TAG_ID.CAPTION);
            p.activeFormattingElements.clearToLastMarker();
            p.insertionMode = InsertionMode.IN_TABLE;
            startTagInTable(p, token);
        }
    } else {
        startTagInBody(p, token);
    }
}
function endTagInCaption(p, token) {
    const tn = token.tagID;
    switch (tn) {
        case TAG_ID.CAPTION:
        case TAG_ID.TABLE: {
            if (p.openElements.hasInTableScope(TAG_ID.CAPTION)) {
                p.openElements.generateImpliedEndTags();
                p.openElements.popUntilTagNamePopped(TAG_ID.CAPTION);
                p.activeFormattingElements.clearToLastMarker();
                p.insertionMode = InsertionMode.IN_TABLE;
                if (tn === TAG_ID.TABLE) {
                    endTagInTable(p, token);
                }
            }
            break;
        }
        case TAG_ID.BODY:
        case TAG_ID.COL:
        case TAG_ID.COLGROUP:
        case TAG_ID.HTML:
        case TAG_ID.TBODY:
        case TAG_ID.TD:
        case TAG_ID.TFOOT:
        case TAG_ID.TH:
        case TAG_ID.THEAD:
        case TAG_ID.TR: {
            break;
        }
        default: {
            endTagInBody(p, token);
        }
    }
}
function startTagInColumnGroup(p, token) {
    switch (token.tagID) {
        case TAG_ID.HTML: {
            startTagInBody(p, token);
            break;
        }
        case TAG_ID.COL: {
            p._appendElement(token, NS.HTML);
            token.ackSelfClosing = true;
            break;
        }
        case TAG_ID.TEMPLATE: {
            startTagInHead(p, token);
            break;
        }
        default: {
            tokenInColumnGroup(p, token);
        }
    }
}
function endTagInColumnGroup(p, token) {
    switch (token.tagID) {
        case TAG_ID.COLGROUP: {
            if (p.openElements.currentTagId === TAG_ID.COLGROUP) {
                p.openElements.pop();
                p.insertionMode = InsertionMode.IN_TABLE;
            }
            break;
        }
        case TAG_ID.TEMPLATE: {
            templateEndTagInHead(p, token);
            break;
        }
        case TAG_ID.COL: {
            break;
        }
        default: {
            tokenInColumnGroup(p, token);
        }
    }
}
function tokenInColumnGroup(p, token) {
    if (p.openElements.currentTagId === TAG_ID.COLGROUP) {
        p.openElements.pop();
        p.insertionMode = InsertionMode.IN_TABLE;
        p._processToken(token);
    }
}
function startTagInTableBody(p, token) {
    switch (token.tagID) {
        case TAG_ID.TR: {
            p.openElements.clearBackToTableBodyContext();
            p._insertElement(token, NS.HTML);
            p.insertionMode = InsertionMode.IN_ROW;
            break;
        }
        case TAG_ID.TH:
        case TAG_ID.TD: {
            p.openElements.clearBackToTableBodyContext();
            p._insertFakeElement(TAG_NAMES.TR, TAG_ID.TR);
            p.insertionMode = InsertionMode.IN_ROW;
            startTagInRow(p, token);
            break;
        }
        case TAG_ID.CAPTION:
        case TAG_ID.COL:
        case TAG_ID.COLGROUP:
        case TAG_ID.TBODY:
        case TAG_ID.TFOOT:
        case TAG_ID.THEAD: {
            if (p.openElements.hasTableBodyContextInTableScope()) {
                p.openElements.clearBackToTableBodyContext();
                p.openElements.pop();
                p.insertionMode = InsertionMode.IN_TABLE;
                startTagInTable(p, token);
            }
            break;
        }
        default: {
            startTagInTable(p, token);
        }
    }
}
function endTagInTableBody(p, token) {
    const tn = token.tagID;
    switch (token.tagID) {
        case TAG_ID.TBODY:
        case TAG_ID.TFOOT:
        case TAG_ID.THEAD: {
            if (p.openElements.hasInTableScope(tn)) {
                p.openElements.clearBackToTableBodyContext();
                p.openElements.pop();
                p.insertionMode = InsertionMode.IN_TABLE;
            }
            break;
        }
        case TAG_ID.TABLE: {
            if (p.openElements.hasTableBodyContextInTableScope()) {
                p.openElements.clearBackToTableBodyContext();
                p.openElements.pop();
                p.insertionMode = InsertionMode.IN_TABLE;
                endTagInTable(p, token);
            }
            break;
        }
        case TAG_ID.BODY:
        case TAG_ID.CAPTION:
        case TAG_ID.COL:
        case TAG_ID.COLGROUP:
        case TAG_ID.HTML:
        case TAG_ID.TD:
        case TAG_ID.TH:
        case TAG_ID.TR: {
            break;
        }
        default: {
            endTagInTable(p, token);
        }
    }
}
function startTagInRow(p, token) {
    switch (token.tagID) {
        case TAG_ID.TH:
        case TAG_ID.TD: {
            p.openElements.clearBackToTableRowContext();
            p._insertElement(token, NS.HTML);
            p.insertionMode = InsertionMode.IN_CELL;
            p.activeFormattingElements.insertMarker();
            break;
        }
        case TAG_ID.CAPTION:
        case TAG_ID.COL:
        case TAG_ID.COLGROUP:
        case TAG_ID.TBODY:
        case TAG_ID.TFOOT:
        case TAG_ID.THEAD:
        case TAG_ID.TR: {
            if (p.openElements.hasInTableScope(TAG_ID.TR)) {
                p.openElements.clearBackToTableRowContext();
                p.openElements.pop();
                p.insertionMode = InsertionMode.IN_TABLE_BODY;
                startTagInTableBody(p, token);
            }
            break;
        }
        default: {
            startTagInTable(p, token);
        }
    }
}
function endTagInRow(p, token) {
    switch (token.tagID) {
        case TAG_ID.TR: {
            if (p.openElements.hasInTableScope(TAG_ID.TR)) {
                p.openElements.clearBackToTableRowContext();
                p.openElements.pop();
                p.insertionMode = InsertionMode.IN_TABLE_BODY;
            }
            break;
        }
        case TAG_ID.TABLE: {
            if (p.openElements.hasInTableScope(TAG_ID.TR)) {
                p.openElements.clearBackToTableRowContext();
                p.openElements.pop();
                p.insertionMode = InsertionMode.IN_TABLE_BODY;
                endTagInTableBody(p, token);
            }
            break;
        }
        case TAG_ID.TBODY:
        case TAG_ID.TFOOT:
        case TAG_ID.THEAD: {
            if (
                p.openElements.hasInTableScope(token.tagID) ||
                p.openElements.hasInTableScope(TAG_ID.TR)
            ) {
                p.openElements.clearBackToTableRowContext();
                p.openElements.pop();
                p.insertionMode = InsertionMode.IN_TABLE_BODY;
                endTagInTableBody(p, token);
            }
            break;
        }
        case TAG_ID.BODY:
        case TAG_ID.CAPTION:
        case TAG_ID.COL:
        case TAG_ID.COLGROUP:
        case TAG_ID.HTML:
        case TAG_ID.TD:
        case TAG_ID.TH: {
            break;
        }
        default: {
            endTagInTable(p, token);
        }
    }
}
function startTagInCell(p, token) {
    const tn = token.tagID;
    if (TABLE_VOID_ELEMENTS.has(tn)) {
        if (
            p.openElements.hasInTableScope(TAG_ID.TD) ||
            p.openElements.hasInTableScope(TAG_ID.TH)
        ) {
            p._closeTableCell();
            startTagInRow(p, token);
        }
    } else {
        startTagInBody(p, token);
    }
}
function endTagInCell(p, token) {
    const tn = token.tagID;
    switch (tn) {
        case TAG_ID.TD:
        case TAG_ID.TH: {
            if (p.openElements.hasInTableScope(tn)) {
                p.openElements.generateImpliedEndTags();
                p.openElements.popUntilTagNamePopped(tn);
                p.activeFormattingElements.clearToLastMarker();
                p.insertionMode = InsertionMode.IN_ROW;
            }
            break;
        }
        case TAG_ID.TABLE:
        case TAG_ID.TBODY:
        case TAG_ID.TFOOT:
        case TAG_ID.THEAD:
        case TAG_ID.TR: {
            if (p.openElements.hasInTableScope(tn)) {
                p._closeTableCell();
                endTagInRow(p, token);
            }
            break;
        }
        case TAG_ID.BODY:
        case TAG_ID.CAPTION:
        case TAG_ID.COL:
        case TAG_ID.COLGROUP:
        case TAG_ID.HTML: {
            break;
        }
        default: {
            endTagInBody(p, token);
        }
    }
}
function startTagInSelect(p, token) {
    switch (token.tagID) {
        case TAG_ID.HTML: {
            startTagInBody(p, token);
            break;
        }
        case TAG_ID.OPTION: {
            if (p.openElements.currentTagId === TAG_ID.OPTION) {
                p.openElements.pop();
            }
            p._insertElement(token, NS.HTML);
            break;
        }
        case TAG_ID.OPTGROUP: {
            if (p.openElements.currentTagId === TAG_ID.OPTION) {
                p.openElements.pop();
            }
            if (p.openElements.currentTagId === TAG_ID.OPTGROUP) {
                p.openElements.pop();
            }
            p._insertElement(token, NS.HTML);
            break;
        }
        case TAG_ID.INPUT:
        case TAG_ID.KEYGEN:
        case TAG_ID.TEXTAREA:
        case TAG_ID.SELECT: {
            if (p.openElements.hasInSelectScope(TAG_ID.SELECT)) {
                p.openElements.popUntilTagNamePopped(TAG_ID.SELECT);
                p._resetInsertionMode();
                if (token.tagID !== TAG_ID.SELECT) {
                    p._processStartTag(token);
                }
            }
            break;
        }
        case TAG_ID.SCRIPT:
        case TAG_ID.TEMPLATE: {
            startTagInHead(p, token);
            break;
        }
        default:
    }
}
function endTagInSelect(p, token) {
    switch (token.tagID) {
        case TAG_ID.OPTGROUP: {
            if (
                p.openElements.stackTop > 0 &&
                p.openElements.currentTagId === TAG_ID.OPTION &&
                p.openElements.tagIDs[p.openElements.stackTop - 1] === TAG_ID.OPTGROUP
            ) {
                p.openElements.pop();
            }
            if (p.openElements.currentTagId === TAG_ID.OPTGROUP) {
                p.openElements.pop();
            }
            break;
        }
        case TAG_ID.OPTION: {
            if (p.openElements.currentTagId === TAG_ID.OPTION) {
                p.openElements.pop();
            }
            break;
        }
        case TAG_ID.SELECT: {
            if (p.openElements.hasInSelectScope(TAG_ID.SELECT)) {
                p.openElements.popUntilTagNamePopped(TAG_ID.SELECT);
                p._resetInsertionMode();
            }
            break;
        }
        case TAG_ID.TEMPLATE: {
            templateEndTagInHead(p, token);
            break;
        }
        default:
    }
}
function startTagInSelectInTable(p, token) {
    const tn = token.tagID;
    if (
        tn === TAG_ID.CAPTION ||
        tn === TAG_ID.TABLE ||
        tn === TAG_ID.TBODY ||
        tn === TAG_ID.TFOOT ||
        tn === TAG_ID.THEAD ||
        tn === TAG_ID.TR ||
        tn === TAG_ID.TD ||
        tn === TAG_ID.TH
    ) {
        p.openElements.popUntilTagNamePopped(TAG_ID.SELECT);
        p._resetInsertionMode();
        p._processStartTag(token);
    } else {
        startTagInSelect(p, token);
    }
}
function endTagInSelectInTable(p, token) {
    const tn = token.tagID;
    if (
        tn === TAG_ID.CAPTION ||
        tn === TAG_ID.TABLE ||
        tn === TAG_ID.TBODY ||
        tn === TAG_ID.TFOOT ||
        tn === TAG_ID.THEAD ||
        tn === TAG_ID.TR ||
        tn === TAG_ID.TD ||
        tn === TAG_ID.TH
    ) {
        if (p.openElements.hasInTableScope(tn)) {
            p.openElements.popUntilTagNamePopped(TAG_ID.SELECT);
            p._resetInsertionMode();
            p.onEndTag(token);
        }
    } else {
        endTagInSelect(p, token);
    }
}
function startTagInTemplate(p, token) {
    switch (token.tagID) {
        case TAG_ID.BASE:
        case TAG_ID.BASEFONT:
        case TAG_ID.BGSOUND:
        case TAG_ID.LINK:
        case TAG_ID.META:
        case TAG_ID.NOFRAMES:
        case TAG_ID.SCRIPT:
        case TAG_ID.STYLE:
        case TAG_ID.TEMPLATE:
        case TAG_ID.TITLE: {
            startTagInHead(p, token);
            break;
        }
        case TAG_ID.CAPTION:
        case TAG_ID.COLGROUP:
        case TAG_ID.TBODY:
        case TAG_ID.TFOOT:
        case TAG_ID.THEAD: {
            p.tmplInsertionModeStack[0] = InsertionMode.IN_TABLE;
            p.insertionMode = InsertionMode.IN_TABLE;
            startTagInTable(p, token);
            break;
        }
        case TAG_ID.COL: {
            p.tmplInsertionModeStack[0] = InsertionMode.IN_COLUMN_GROUP;
            p.insertionMode = InsertionMode.IN_COLUMN_GROUP;
            startTagInColumnGroup(p, token);
            break;
        }
        case TAG_ID.TR: {
            p.tmplInsertionModeStack[0] = InsertionMode.IN_TABLE_BODY;
            p.insertionMode = InsertionMode.IN_TABLE_BODY;
            startTagInTableBody(p, token);
            break;
        }
        case TAG_ID.TD:
        case TAG_ID.TH: {
            p.tmplInsertionModeStack[0] = InsertionMode.IN_ROW;
            p.insertionMode = InsertionMode.IN_ROW;
            startTagInRow(p, token);
            break;
        }
        default: {
            p.tmplInsertionModeStack[0] = InsertionMode.IN_BODY;
            p.insertionMode = InsertionMode.IN_BODY;
            startTagInBody(p, token);
        }
    }
}
function endTagInTemplate(p, token) {
    if (token.tagID === TAG_ID.TEMPLATE) {
        templateEndTagInHead(p, token);
    }
}
function eofInTemplate(p, token) {
    if (p.openElements.tmplCount > 0) {
        p.openElements.popUntilTagNamePopped(TAG_ID.TEMPLATE);
        p.activeFormattingElements.clearToLastMarker();
        p.tmplInsertionModeStack.shift();
        p._resetInsertionMode();
        p.onEof(token);
    } else {
        stopParsing(p, token);
    }
}
function startTagAfterBody(p, token) {
    if (token.tagID === TAG_ID.HTML) {
        startTagInBody(p, token);
    } else {
        tokenAfterBody(p, token);
    }
}
function endTagAfterBody(p, token) {
    var _a5;
    if (token.tagID === TAG_ID.HTML) {
        if (!p.fragmentContext) {
            p.insertionMode = InsertionMode.AFTER_AFTER_BODY;
        }
        if (p.options.sourceCodeLocationInfo && p.openElements.tagIDs[0] === TAG_ID.HTML) {
            p._setEndLocation(p.openElements.items[0], token);
            const bodyElement = p.openElements.items[1];
            if (
                bodyElement &&
                !((_a5 = p.treeAdapter.getNodeSourceCodeLocation(bodyElement)) === null ||
                _a5 === void 0
                    ? void 0
                    : _a5.endTag)
            ) {
                p._setEndLocation(bodyElement, token);
            }
        }
    } else {
        tokenAfterBody(p, token);
    }
}
function tokenAfterBody(p, token) {
    p.insertionMode = InsertionMode.IN_BODY;
    modeInBody(p, token);
}
function startTagInFrameset(p, token) {
    switch (token.tagID) {
        case TAG_ID.HTML: {
            startTagInBody(p, token);
            break;
        }
        case TAG_ID.FRAMESET: {
            p._insertElement(token, NS.HTML);
            break;
        }
        case TAG_ID.FRAME: {
            p._appendElement(token, NS.HTML);
            token.ackSelfClosing = true;
            break;
        }
        case TAG_ID.NOFRAMES: {
            startTagInHead(p, token);
            break;
        }
        default:
    }
}
function endTagInFrameset(p, token) {
    if (token.tagID === TAG_ID.FRAMESET && !p.openElements.isRootHtmlElementCurrent()) {
        p.openElements.pop();
        if (!p.fragmentContext && p.openElements.currentTagId !== TAG_ID.FRAMESET) {
            p.insertionMode = InsertionMode.AFTER_FRAMESET;
        }
    }
}
function startTagAfterFrameset(p, token) {
    switch (token.tagID) {
        case TAG_ID.HTML: {
            startTagInBody(p, token);
            break;
        }
        case TAG_ID.NOFRAMES: {
            startTagInHead(p, token);
            break;
        }
        default:
    }
}
function endTagAfterFrameset(p, token) {
    if (token.tagID === TAG_ID.HTML) {
        p.insertionMode = InsertionMode.AFTER_AFTER_FRAMESET;
    }
}
function startTagAfterAfterBody(p, token) {
    if (token.tagID === TAG_ID.HTML) {
        startTagInBody(p, token);
    } else {
        tokenAfterAfterBody(p, token);
    }
}
function tokenAfterAfterBody(p, token) {
    p.insertionMode = InsertionMode.IN_BODY;
    modeInBody(p, token);
}
function startTagAfterAfterFrameset(p, token) {
    switch (token.tagID) {
        case TAG_ID.HTML: {
            startTagInBody(p, token);
            break;
        }
        case TAG_ID.NOFRAMES: {
            startTagInHead(p, token);
            break;
        }
        default:
    }
}
function nullCharacterInForeignContent(p, token) {
    token.chars = REPLACEMENT_CHARACTER;
    p._insertCharacters(token);
}
function characterInForeignContent(p, token) {
    p._insertCharacters(token);
    p.framesetOk = false;
}
function popUntilHtmlOrIntegrationPoint(p) {
    while (
        p.treeAdapter.getNamespaceURI(p.openElements.current) !== NS.HTML &&
        !p._isIntegrationPoint(p.openElements.currentTagId, p.openElements.current)
    ) {
        p.openElements.pop();
    }
}
function startTagInForeignContent(p, token) {
    if (causesExit(token)) {
        popUntilHtmlOrIntegrationPoint(p);
        p._startTagOutsideForeignContent(token);
    } else {
        const current = p._getAdjustedCurrentElement();
        const currentNs = p.treeAdapter.getNamespaceURI(current);
        if (currentNs === NS.MATHML) {
            adjustTokenMathMLAttrs(token);
        } else if (currentNs === NS.SVG) {
            adjustTokenSVGTagName(token);
            adjustTokenSVGAttrs(token);
        }
        adjustTokenXMLAttrs(token);
        if (token.selfClosing) {
            p._appendElement(token, currentNs);
        } else {
            p._insertElement(token, currentNs);
        }
        token.ackSelfClosing = true;
    }
}
function endTagInForeignContent(p, token) {
    if (token.tagID === TAG_ID.P || token.tagID === TAG_ID.BR) {
        popUntilHtmlOrIntegrationPoint(p);
        p._endTagOutsideForeignContent(token);
        return;
    }
    for (let i2 = p.openElements.stackTop; i2 > 0; i2--) {
        const element = p.openElements.items[i2];
        if (p.treeAdapter.getNamespaceURI(element) === NS.HTML) {
            p._endTagOutsideForeignContent(token);
            break;
        }
        const tagName = p.treeAdapter.getTagName(element);
        if (tagName.toLowerCase() === token.tagName) {
            token.tagName = tagName;
            p.openElements.shortenToLength(i2);
            break;
        }
    }
}

// node_modules/parse5/dist/serializer/index.js
var VOID_ELEMENTS = /* @__PURE__ */ new Set([
    TAG_NAMES.AREA,
    TAG_NAMES.BASE,
    TAG_NAMES.BASEFONT,
    TAG_NAMES.BGSOUND,
    TAG_NAMES.BR,
    TAG_NAMES.COL,
    TAG_NAMES.EMBED,
    TAG_NAMES.FRAME,
    TAG_NAMES.HR,
    TAG_NAMES.IMG,
    TAG_NAMES.INPUT,
    TAG_NAMES.KEYGEN,
    TAG_NAMES.LINK,
    TAG_NAMES.META,
    TAG_NAMES.PARAM,
    TAG_NAMES.SOURCE,
    TAG_NAMES.TRACK,
    TAG_NAMES.WBR,
]);
function isVoidElement(node, options2) {
    return (
        options2.treeAdapter.isElementNode(node) &&
        options2.treeAdapter.getNamespaceURI(node) === NS.HTML &&
        VOID_ELEMENTS.has(options2.treeAdapter.getTagName(node))
    );
}
var defaultOpts3 = { treeAdapter: defaultTreeAdapter, scriptingEnabled: true };
function serializeOuter(node, options2) {
    const opts = { ...defaultOpts3, ...options2 };
    return serializeNode(node, opts);
}
function serializeChildNodes(parentNode, options2) {
    let html3 = '';
    const container =
        options2.treeAdapter.isElementNode(parentNode) &&
        options2.treeAdapter.getTagName(parentNode) === TAG_NAMES.TEMPLATE &&
        options2.treeAdapter.getNamespaceURI(parentNode) === NS.HTML
            ? options2.treeAdapter.getTemplateContent(parentNode)
            : parentNode;
    const childNodes = options2.treeAdapter.getChildNodes(container);
    if (childNodes) {
        for (const currentNode of childNodes) {
            html3 += serializeNode(currentNode, options2);
        }
    }
    return html3;
}
function serializeNode(node, options2) {
    if (options2.treeAdapter.isElementNode(node)) {
        return serializeElement(node, options2);
    }
    if (options2.treeAdapter.isTextNode(node)) {
        return serializeTextNode(node, options2);
    }
    if (options2.treeAdapter.isCommentNode(node)) {
        return serializeCommentNode(node, options2);
    }
    if (options2.treeAdapter.isDocumentTypeNode(node)) {
        return serializeDocumentTypeNode(node, options2);
    }
    return '';
}
function serializeElement(node, options2) {
    const tn = options2.treeAdapter.getTagName(node);
    return `<${tn}${serializeAttributes(node, options2)}>${isVoidElement(node, options2) ? '' : `${serializeChildNodes(node, options2)}</${tn}>`}`;
}
function serializeAttributes(node, { treeAdapter }) {
    let html3 = '';
    for (const attr2 of treeAdapter.getAttrList(node)) {
        html3 += ' ';
        if (!attr2.namespace) {
            html3 += attr2.name;
        } else
            switch (attr2.namespace) {
                case NS.XML: {
                    html3 += `xml:${attr2.name}`;
                    break;
                }
                case NS.XMLNS: {
                    if (attr2.name !== 'xmlns') {
                        html3 += 'xmlns:';
                    }
                    html3 += attr2.name;
                    break;
                }
                case NS.XLINK: {
                    html3 += `xlink:${attr2.name}`;
                    break;
                }
                default: {
                    html3 += `${attr2.prefix}:${attr2.name}`;
                }
            }
        html3 += `="${escapeAttribute(attr2.value)}"`;
    }
    return html3;
}
function serializeTextNode(node, options2) {
    const { treeAdapter } = options2;
    const content = treeAdapter.getTextNodeContent(node);
    const parent2 = treeAdapter.getParentNode(node);
    const parentTn =
        parent2 && treeAdapter.isElementNode(parent2) && treeAdapter.getTagName(parent2);
    return parentTn &&
        treeAdapter.getNamespaceURI(parent2) === NS.HTML &&
        hasUnescapedText(parentTn, options2.scriptingEnabled)
        ? content
        : escapeText(content);
}
function serializeCommentNode(node, { treeAdapter }) {
    return `<!--${treeAdapter.getCommentNodeContent(node)}-->`;
}
function serializeDocumentTypeNode(node, { treeAdapter }) {
    return `<!DOCTYPE ${treeAdapter.getDocumentTypeNodeName(node)}>`;
}

// node_modules/parse5/dist/index.js
function parse6(html3, options2) {
    return Parser.parse(html3, options2);
}
function parseFragment(fragmentContext, html3, options2) {
    if (typeof fragmentContext === 'string') {
        options2 = html3;
        html3 = fragmentContext;
        fragmentContext = null;
    }
    const parser = Parser.getFragmentParser(fragmentContext, options2);
    parser.tokenizer.write(html3, true);
    return parser.getFragment();
}

// node_modules/parse5-htmlparser2-tree-adapter/dist/index.js
function createTextNode2(value) {
    return new Text2(value);
}
function enquoteDoctypeId(id) {
    const quote = id.includes('"') ? "'" : '"';
    return quote + id + quote;
}
function serializeDoctypeContent(name, publicId, systemId) {
    let str = '!DOCTYPE ';
    if (name) {
        str += name;
    }
    if (publicId) {
        str += ` PUBLIC ${enquoteDoctypeId(publicId)}`;
    } else if (systemId) {
        str += ' SYSTEM';
    }
    if (systemId) {
        str += ` ${enquoteDoctypeId(systemId)}`;
    }
    return str;
}
var adapter = {
    // Re-exports from domhandler
    isCommentNode: isComment,
    isElementNode: isTag2,
    isTextNode: isText,
    //Node construction
    createDocument() {
        const node = new Document([]);
        node['x-mode'] = html_exports.DOCUMENT_MODE.NO_QUIRKS;
        return node;
    },
    createDocumentFragment() {
        return new Document([]);
    },
    createElement(tagName, namespaceURI, attrs) {
        const attribs = /* @__PURE__ */ Object.create(null);
        const attribsNamespace = /* @__PURE__ */ Object.create(null);
        const attribsPrefix = /* @__PURE__ */ Object.create(null);
        for (let i2 = 0; i2 < attrs.length; i2++) {
            const attrName = attrs[i2].name;
            attribs[attrName] = attrs[i2].value;
            attribsNamespace[attrName] = attrs[i2].namespace;
            attribsPrefix[attrName] = attrs[i2].prefix;
        }
        const node = new Element(tagName, attribs, []);
        node.namespace = namespaceURI;
        node['x-attribsNamespace'] = attribsNamespace;
        node['x-attribsPrefix'] = attribsPrefix;
        return node;
    },
    createCommentNode(data2) {
        return new Comment2(data2);
    },
    //Tree mutation
    appendChild(parentNode, newNode) {
        const prev2 = parentNode.children[parentNode.children.length - 1];
        if (prev2) {
            prev2.next = newNode;
            newNode.prev = prev2;
        }
        parentNode.children.push(newNode);
        newNode.parent = parentNode;
    },
    insertBefore(parentNode, newNode, referenceNode) {
        const insertionIdx = parentNode.children.indexOf(referenceNode);
        const { prev: prev2 } = referenceNode;
        if (prev2) {
            prev2.next = newNode;
            newNode.prev = prev2;
        }
        referenceNode.prev = newNode;
        newNode.next = referenceNode;
        parentNode.children.splice(insertionIdx, 0, newNode);
        newNode.parent = parentNode;
    },
    setTemplateContent(templateElement, contentElement) {
        adapter.appendChild(templateElement, contentElement);
    },
    getTemplateContent(templateElement) {
        return templateElement.children[0];
    },
    setDocumentType(document2, name, publicId, systemId) {
        const data2 = serializeDoctypeContent(name, publicId, systemId);
        let doctypeNode = document2.children.find(
            (node) => isDirective(node) && node.name === '!doctype',
        );
        if (doctypeNode) {
            doctypeNode.data = data2 !== null && data2 !== void 0 ? data2 : null;
        } else {
            doctypeNode = new ProcessingInstruction('!doctype', data2);
            adapter.appendChild(document2, doctypeNode);
        }
        doctypeNode['x-name'] = name !== null && name !== void 0 ? name : void 0;
        doctypeNode['x-publicId'] = publicId !== null && publicId !== void 0 ? publicId : void 0;
        doctypeNode['x-systemId'] = systemId !== null && systemId !== void 0 ? systemId : void 0;
    },
    setDocumentMode(document2, mode) {
        document2['x-mode'] = mode;
    },
    getDocumentMode(document2) {
        return document2['x-mode'];
    },
    detachNode(node) {
        if (node.parent) {
            const idx = node.parent.children.indexOf(node);
            const { prev: prev2, next: next2 } = node;
            node.prev = null;
            node.next = null;
            if (prev2) {
                prev2.next = next2;
            }
            if (next2) {
                next2.prev = prev2;
            }
            node.parent.children.splice(idx, 1);
            node.parent = null;
        }
    },
    insertText(parentNode, text3) {
        const lastChild = parentNode.children[parentNode.children.length - 1];
        if (lastChild && isText(lastChild)) {
            lastChild.data += text3;
        } else {
            adapter.appendChild(parentNode, createTextNode2(text3));
        }
    },
    insertTextBefore(parentNode, text3, referenceNode) {
        const prevNode = parentNode.children[parentNode.children.indexOf(referenceNode) - 1];
        if (prevNode && isText(prevNode)) {
            prevNode.data += text3;
        } else {
            adapter.insertBefore(parentNode, createTextNode2(text3), referenceNode);
        }
    },
    adoptAttributes(recipient, attrs) {
        for (let i2 = 0; i2 < attrs.length; i2++) {
            const attrName = attrs[i2].name;
            if (typeof recipient.attribs[attrName] === 'undefined') {
                recipient.attribs[attrName] = attrs[i2].value;
                recipient['x-attribsNamespace'][attrName] = attrs[i2].namespace;
                recipient['x-attribsPrefix'][attrName] = attrs[i2].prefix;
            }
        }
    },
    //Tree traversing
    getFirstChild(node) {
        return node.children[0];
    },
    getChildNodes(node) {
        return node.children;
    },
    getParentNode(node) {
        return node.parent;
    },
    getAttrList(element) {
        return element.attributes;
    },
    //Node data
    getTagName(element) {
        return element.name;
    },
    getNamespaceURI(element) {
        return element.namespace;
    },
    getTextNodeContent(textNode) {
        return textNode.data;
    },
    getCommentNodeContent(commentNode) {
        return commentNode.data;
    },
    getDocumentTypeNodeName(doctypeNode) {
        var _a5;
        return (_a5 = doctypeNode['x-name']) !== null && _a5 !== void 0 ? _a5 : '';
    },
    getDocumentTypeNodePublicId(doctypeNode) {
        var _a5;
        return (_a5 = doctypeNode['x-publicId']) !== null && _a5 !== void 0 ? _a5 : '';
    },
    getDocumentTypeNodeSystemId(doctypeNode) {
        var _a5;
        return (_a5 = doctypeNode['x-systemId']) !== null && _a5 !== void 0 ? _a5 : '';
    },
    //Node types
    isDocumentTypeNode(node) {
        return isDirective(node) && node.name === '!doctype';
    },
    // Source code location
    setNodeSourceCodeLocation(node, location) {
        if (location) {
            node.startIndex = location.startOffset;
            node.endIndex = location.endOffset;
        }
        node.sourceCodeLocation = location;
    },
    getNodeSourceCodeLocation(node) {
        return node.sourceCodeLocation;
    },
    updateNodeSourceCodeLocation(node, endLocation) {
        if (endLocation.endOffset != null) node.endIndex = endLocation.endOffset;
        node.sourceCodeLocation = {
            ...node.sourceCodeLocation,
            ...endLocation,
        };
    },
};

// node_modules/cheerio/lib/esm/parsers/parse5-adapter.js
function parseWithParse5(content, options2, isDocument2, context) {
    const opts = {
        scriptingEnabled:
            typeof options2.scriptingEnabled === 'boolean' ? options2.scriptingEnabled : true,
        treeAdapter: adapter,
        sourceCodeLocationInfo: options2.sourceCodeLocationInfo,
    };
    return isDocument2 ? parse6(content, opts) : parseFragment(context, content, opts);
}
var renderOpts = { treeAdapter: adapter };
function renderWithParse5(dom) {
    const nodes = 'length' in dom ? dom : [dom];
    for (let index2 = 0; index2 < nodes.length; index2 += 1) {
        const node = nodes[index2];
        if (isDocument(node)) {
            Array.prototype.splice.call(nodes, index2, 1, ...node.children);
        }
    }
    let result = '';
    for (let index2 = 0; index2 < nodes.length; index2 += 1) {
        const node = nodes[index2];
        result += serializeOuter(node, renderOpts);
    }
    return result;
}

// node_modules/htmlparser2/lib/esm/Tokenizer.js
var CharCodes2;
(function (CharCodes3) {
    CharCodes3[(CharCodes3['Tab'] = 9)] = 'Tab';
    CharCodes3[(CharCodes3['NewLine'] = 10)] = 'NewLine';
    CharCodes3[(CharCodes3['FormFeed'] = 12)] = 'FormFeed';
    CharCodes3[(CharCodes3['CarriageReturn'] = 13)] = 'CarriageReturn';
    CharCodes3[(CharCodes3['Space'] = 32)] = 'Space';
    CharCodes3[(CharCodes3['ExclamationMark'] = 33)] = 'ExclamationMark';
    CharCodes3[(CharCodes3['Number'] = 35)] = 'Number';
    CharCodes3[(CharCodes3['Amp'] = 38)] = 'Amp';
    CharCodes3[(CharCodes3['SingleQuote'] = 39)] = 'SingleQuote';
    CharCodes3[(CharCodes3['DoubleQuote'] = 34)] = 'DoubleQuote';
    CharCodes3[(CharCodes3['Dash'] = 45)] = 'Dash';
    CharCodes3[(CharCodes3['Slash'] = 47)] = 'Slash';
    CharCodes3[(CharCodes3['Zero'] = 48)] = 'Zero';
    CharCodes3[(CharCodes3['Nine'] = 57)] = 'Nine';
    CharCodes3[(CharCodes3['Semi'] = 59)] = 'Semi';
    CharCodes3[(CharCodes3['Lt'] = 60)] = 'Lt';
    CharCodes3[(CharCodes3['Eq'] = 61)] = 'Eq';
    CharCodes3[(CharCodes3['Gt'] = 62)] = 'Gt';
    CharCodes3[(CharCodes3['Questionmark'] = 63)] = 'Questionmark';
    CharCodes3[(CharCodes3['UpperA'] = 65)] = 'UpperA';
    CharCodes3[(CharCodes3['LowerA'] = 97)] = 'LowerA';
    CharCodes3[(CharCodes3['UpperF'] = 70)] = 'UpperF';
    CharCodes3[(CharCodes3['LowerF'] = 102)] = 'LowerF';
    CharCodes3[(CharCodes3['UpperZ'] = 90)] = 'UpperZ';
    CharCodes3[(CharCodes3['LowerZ'] = 122)] = 'LowerZ';
    CharCodes3[(CharCodes3['LowerX'] = 120)] = 'LowerX';
    CharCodes3[(CharCodes3['OpeningSquareBracket'] = 91)] = 'OpeningSquareBracket';
})(CharCodes2 || (CharCodes2 = {}));
var State2;
(function (State3) {
    State3[(State3['Text'] = 1)] = 'Text';
    State3[(State3['BeforeTagName'] = 2)] = 'BeforeTagName';
    State3[(State3['InTagName'] = 3)] = 'InTagName';
    State3[(State3['InSelfClosingTag'] = 4)] = 'InSelfClosingTag';
    State3[(State3['BeforeClosingTagName'] = 5)] = 'BeforeClosingTagName';
    State3[(State3['InClosingTagName'] = 6)] = 'InClosingTagName';
    State3[(State3['AfterClosingTagName'] = 7)] = 'AfterClosingTagName';
    State3[(State3['BeforeAttributeName'] = 8)] = 'BeforeAttributeName';
    State3[(State3['InAttributeName'] = 9)] = 'InAttributeName';
    State3[(State3['AfterAttributeName'] = 10)] = 'AfterAttributeName';
    State3[(State3['BeforeAttributeValue'] = 11)] = 'BeforeAttributeValue';
    State3[(State3['InAttributeValueDq'] = 12)] = 'InAttributeValueDq';
    State3[(State3['InAttributeValueSq'] = 13)] = 'InAttributeValueSq';
    State3[(State3['InAttributeValueNq'] = 14)] = 'InAttributeValueNq';
    State3[(State3['BeforeDeclaration'] = 15)] = 'BeforeDeclaration';
    State3[(State3['InDeclaration'] = 16)] = 'InDeclaration';
    State3[(State3['InProcessingInstruction'] = 17)] = 'InProcessingInstruction';
    State3[(State3['BeforeComment'] = 18)] = 'BeforeComment';
    State3[(State3['CDATASequence'] = 19)] = 'CDATASequence';
    State3[(State3['InSpecialComment'] = 20)] = 'InSpecialComment';
    State3[(State3['InCommentLike'] = 21)] = 'InCommentLike';
    State3[(State3['BeforeSpecialS'] = 22)] = 'BeforeSpecialS';
    State3[(State3['SpecialStartSequence'] = 23)] = 'SpecialStartSequence';
    State3[(State3['InSpecialTag'] = 24)] = 'InSpecialTag';
    State3[(State3['BeforeEntity'] = 25)] = 'BeforeEntity';
    State3[(State3['BeforeNumericEntity'] = 26)] = 'BeforeNumericEntity';
    State3[(State3['InNamedEntity'] = 27)] = 'InNamedEntity';
    State3[(State3['InNumericEntity'] = 28)] = 'InNumericEntity';
    State3[(State3['InHexEntity'] = 29)] = 'InHexEntity';
})(State2 || (State2 = {}));
function isWhitespace2(c) {
    return (
        c === CharCodes2.Space ||
        c === CharCodes2.NewLine ||
        c === CharCodes2.Tab ||
        c === CharCodes2.FormFeed ||
        c === CharCodes2.CarriageReturn
    );
}
function isEndOfTagSection(c) {
    return c === CharCodes2.Slash || c === CharCodes2.Gt || isWhitespace2(c);
}
function isNumber2(c) {
    return c >= CharCodes2.Zero && c <= CharCodes2.Nine;
}
function isASCIIAlpha(c) {
    return (
        (c >= CharCodes2.LowerA && c <= CharCodes2.LowerZ) ||
        (c >= CharCodes2.UpperA && c <= CharCodes2.UpperZ)
    );
}
function isHexDigit(c) {
    return (
        (c >= CharCodes2.UpperA && c <= CharCodes2.UpperF) ||
        (c >= CharCodes2.LowerA && c <= CharCodes2.LowerF)
    );
}
var QuoteType;
(function (QuoteType2) {
    QuoteType2[(QuoteType2['NoValue'] = 0)] = 'NoValue';
    QuoteType2[(QuoteType2['Unquoted'] = 1)] = 'Unquoted';
    QuoteType2[(QuoteType2['Single'] = 2)] = 'Single';
    QuoteType2[(QuoteType2['Double'] = 3)] = 'Double';
})(QuoteType || (QuoteType = {}));
var Sequences = {
    Cdata: new Uint8Array([67, 68, 65, 84, 65, 91]),
    CdataEnd: new Uint8Array([93, 93, 62]),
    CommentEnd: new Uint8Array([45, 45, 62]),
    ScriptEnd: new Uint8Array([60, 47, 115, 99, 114, 105, 112, 116]),
    StyleEnd: new Uint8Array([60, 47, 115, 116, 121, 108, 101]),
    TitleEnd: new Uint8Array([60, 47, 116, 105, 116, 108, 101]),
    // `</title`
};
var Tokenizer2 = class {
    constructor({ xmlMode = false, decodeEntities = true }, cbs) {
        this.cbs = cbs;
        this.state = State2.Text;
        this.buffer = '';
        this.sectionStart = 0;
        this.index = 0;
        this.baseState = State2.Text;
        this.isSpecial = false;
        this.running = true;
        this.offset = 0;
        this.currentSequence = void 0;
        this.sequenceIndex = 0;
        this.trieIndex = 0;
        this.trieCurrent = 0;
        this.entityResult = 0;
        this.entityExcess = 0;
        this.xmlMode = xmlMode;
        this.decodeEntities = decodeEntities;
        this.entityTrie = xmlMode ? decode_data_xml_default : decode_data_html_default;
    }
    reset() {
        this.state = State2.Text;
        this.buffer = '';
        this.sectionStart = 0;
        this.index = 0;
        this.baseState = State2.Text;
        this.currentSequence = void 0;
        this.running = true;
        this.offset = 0;
    }
    write(chunk) {
        this.offset += this.buffer.length;
        this.buffer = chunk;
        this.parse();
    }
    end() {
        if (this.running) this.finish();
    }
    pause() {
        this.running = false;
    }
    resume() {
        this.running = true;
        if (this.index < this.buffer.length + this.offset) {
            this.parse();
        }
    }
    /**
     * The current index within all of the written data.
     */
    getIndex() {
        return this.index;
    }
    /**
     * The start of the current section.
     */
    getSectionStart() {
        return this.sectionStart;
    }
    stateText(c) {
        if (c === CharCodes2.Lt || (!this.decodeEntities && this.fastForwardTo(CharCodes2.Lt))) {
            if (this.index > this.sectionStart) {
                this.cbs.ontext(this.sectionStart, this.index);
            }
            this.state = State2.BeforeTagName;
            this.sectionStart = this.index;
        } else if (this.decodeEntities && c === CharCodes2.Amp) {
            this.state = State2.BeforeEntity;
        }
    }
    stateSpecialStartSequence(c) {
        const isEnd = this.sequenceIndex === this.currentSequence.length;
        const isMatch = isEnd
            ? // If we are at the end of the sequence, make sure the tag name has ended
              isEndOfTagSection(c)
            : // Otherwise, do a case-insensitive comparison
              (c | 32) === this.currentSequence[this.sequenceIndex];
        if (!isMatch) {
            this.isSpecial = false;
        } else if (!isEnd) {
            this.sequenceIndex++;
            return;
        }
        this.sequenceIndex = 0;
        this.state = State2.InTagName;
        this.stateInTagName(c);
    }
    /** Look for an end tag. For <title> tags, also decode entities. */
    stateInSpecialTag(c) {
        if (this.sequenceIndex === this.currentSequence.length) {
            if (c === CharCodes2.Gt || isWhitespace2(c)) {
                const endOfText = this.index - this.currentSequence.length;
                if (this.sectionStart < endOfText) {
                    const actualIndex = this.index;
                    this.index = endOfText;
                    this.cbs.ontext(this.sectionStart, endOfText);
                    this.index = actualIndex;
                }
                this.isSpecial = false;
                this.sectionStart = endOfText + 2;
                this.stateInClosingTagName(c);
                return;
            }
            this.sequenceIndex = 0;
        }
        if ((c | 32) === this.currentSequence[this.sequenceIndex]) {
            this.sequenceIndex += 1;
        } else if (this.sequenceIndex === 0) {
            if (this.currentSequence === Sequences.TitleEnd) {
                if (this.decodeEntities && c === CharCodes2.Amp) {
                    this.state = State2.BeforeEntity;
                }
            } else if (this.fastForwardTo(CharCodes2.Lt)) {
                this.sequenceIndex = 1;
            }
        } else {
            this.sequenceIndex = Number(c === CharCodes2.Lt);
        }
    }
    stateCDATASequence(c) {
        if (c === Sequences.Cdata[this.sequenceIndex]) {
            if (++this.sequenceIndex === Sequences.Cdata.length) {
                this.state = State2.InCommentLike;
                this.currentSequence = Sequences.CdataEnd;
                this.sequenceIndex = 0;
                this.sectionStart = this.index + 1;
            }
        } else {
            this.sequenceIndex = 0;
            this.state = State2.InDeclaration;
            this.stateInDeclaration(c);
        }
    }
    /**
     * When we wait for one specific character, we can speed things up
     * by skipping through the buffer until we find it.
     *
     * @returns Whether the character was found.
     */
    fastForwardTo(c) {
        while (++this.index < this.buffer.length + this.offset) {
            if (this.buffer.charCodeAt(this.index - this.offset) === c) {
                return true;
            }
        }
        this.index = this.buffer.length + this.offset - 1;
        return false;
    }
    /**
     * Comments and CDATA end with `-->` and `]]>`.
     *
     * Their common qualities are:
     * - Their end sequences have a distinct character they start with.
     * - That character is then repeated, so we have to check multiple repeats.
     * - All characters but the start character of the sequence can be skipped.
     */
    stateInCommentLike(c) {
        if (c === this.currentSequence[this.sequenceIndex]) {
            if (++this.sequenceIndex === this.currentSequence.length) {
                if (this.currentSequence === Sequences.CdataEnd) {
                    this.cbs.oncdata(this.sectionStart, this.index, 2);
                } else {
                    this.cbs.oncomment(this.sectionStart, this.index, 2);
                }
                this.sequenceIndex = 0;
                this.sectionStart = this.index + 1;
                this.state = State2.Text;
            }
        } else if (this.sequenceIndex === 0) {
            if (this.fastForwardTo(this.currentSequence[0])) {
                this.sequenceIndex = 1;
            }
        } else if (c !== this.currentSequence[this.sequenceIndex - 1]) {
            this.sequenceIndex = 0;
        }
    }
    /**
     * HTML only allows ASCII alpha characters (a-z and A-Z) at the beginning of a tag name.
     *
     * XML allows a lot more characters here (@see https://www.w3.org/TR/REC-xml/#NT-NameStartChar).
     * We allow anything that wouldn't end the tag.
     */
    isTagStartChar(c) {
        return this.xmlMode ? !isEndOfTagSection(c) : isASCIIAlpha(c);
    }
    startSpecial(sequence, offset) {
        this.isSpecial = true;
        this.currentSequence = sequence;
        this.sequenceIndex = offset;
        this.state = State2.SpecialStartSequence;
    }
    stateBeforeTagName(c) {
        if (c === CharCodes2.ExclamationMark) {
            this.state = State2.BeforeDeclaration;
            this.sectionStart = this.index + 1;
        } else if (c === CharCodes2.Questionmark) {
            this.state = State2.InProcessingInstruction;
            this.sectionStart = this.index + 1;
        } else if (this.isTagStartChar(c)) {
            const lower2 = c | 32;
            this.sectionStart = this.index;
            if (!this.xmlMode && lower2 === Sequences.TitleEnd[2]) {
                this.startSpecial(Sequences.TitleEnd, 3);
            } else {
                this.state =
                    !this.xmlMode && lower2 === Sequences.ScriptEnd[2]
                        ? State2.BeforeSpecialS
                        : State2.InTagName;
            }
        } else if (c === CharCodes2.Slash) {
            this.state = State2.BeforeClosingTagName;
        } else {
            this.state = State2.Text;
            this.stateText(c);
        }
    }
    stateInTagName(c) {
        if (isEndOfTagSection(c)) {
            this.cbs.onopentagname(this.sectionStart, this.index);
            this.sectionStart = -1;
            this.state = State2.BeforeAttributeName;
            this.stateBeforeAttributeName(c);
        }
    }
    stateBeforeClosingTagName(c) {
        if (isWhitespace2(c)) {
        } else if (c === CharCodes2.Gt) {
            this.state = State2.Text;
        } else {
            this.state = this.isTagStartChar(c) ? State2.InClosingTagName : State2.InSpecialComment;
            this.sectionStart = this.index;
        }
    }
    stateInClosingTagName(c) {
        if (c === CharCodes2.Gt || isWhitespace2(c)) {
            this.cbs.onclosetag(this.sectionStart, this.index);
            this.sectionStart = -1;
            this.state = State2.AfterClosingTagName;
            this.stateAfterClosingTagName(c);
        }
    }
    stateAfterClosingTagName(c) {
        if (c === CharCodes2.Gt || this.fastForwardTo(CharCodes2.Gt)) {
            this.state = State2.Text;
            this.baseState = State2.Text;
            this.sectionStart = this.index + 1;
        }
    }
    stateBeforeAttributeName(c) {
        if (c === CharCodes2.Gt) {
            this.cbs.onopentagend(this.index);
            if (this.isSpecial) {
                this.state = State2.InSpecialTag;
                this.sequenceIndex = 0;
            } else {
                this.state = State2.Text;
            }
            this.baseState = this.state;
            this.sectionStart = this.index + 1;
        } else if (c === CharCodes2.Slash) {
            this.state = State2.InSelfClosingTag;
        } else if (!isWhitespace2(c)) {
            this.state = State2.InAttributeName;
            this.sectionStart = this.index;
        }
    }
    stateInSelfClosingTag(c) {
        if (c === CharCodes2.Gt) {
            this.cbs.onselfclosingtag(this.index);
            this.state = State2.Text;
            this.baseState = State2.Text;
            this.sectionStart = this.index + 1;
            this.isSpecial = false;
        } else if (!isWhitespace2(c)) {
            this.state = State2.BeforeAttributeName;
            this.stateBeforeAttributeName(c);
        }
    }
    stateInAttributeName(c) {
        if (c === CharCodes2.Eq || isEndOfTagSection(c)) {
            this.cbs.onattribname(this.sectionStart, this.index);
            this.sectionStart = -1;
            this.state = State2.AfterAttributeName;
            this.stateAfterAttributeName(c);
        }
    }
    stateAfterAttributeName(c) {
        if (c === CharCodes2.Eq) {
            this.state = State2.BeforeAttributeValue;
        } else if (c === CharCodes2.Slash || c === CharCodes2.Gt) {
            this.cbs.onattribend(QuoteType.NoValue, this.index);
            this.state = State2.BeforeAttributeName;
            this.stateBeforeAttributeName(c);
        } else if (!isWhitespace2(c)) {
            this.cbs.onattribend(QuoteType.NoValue, this.index);
            this.state = State2.InAttributeName;
            this.sectionStart = this.index;
        }
    }
    stateBeforeAttributeValue(c) {
        if (c === CharCodes2.DoubleQuote) {
            this.state = State2.InAttributeValueDq;
            this.sectionStart = this.index + 1;
        } else if (c === CharCodes2.SingleQuote) {
            this.state = State2.InAttributeValueSq;
            this.sectionStart = this.index + 1;
        } else if (!isWhitespace2(c)) {
            this.sectionStart = this.index;
            this.state = State2.InAttributeValueNq;
            this.stateInAttributeValueNoQuotes(c);
        }
    }
    handleInAttributeValue(c, quote) {
        if (c === quote || (!this.decodeEntities && this.fastForwardTo(quote))) {
            this.cbs.onattribdata(this.sectionStart, this.index);
            this.sectionStart = -1;
            this.cbs.onattribend(
                quote === CharCodes2.DoubleQuote ? QuoteType.Double : QuoteType.Single,
                this.index,
            );
            this.state = State2.BeforeAttributeName;
        } else if (this.decodeEntities && c === CharCodes2.Amp) {
            this.baseState = this.state;
            this.state = State2.BeforeEntity;
        }
    }
    stateInAttributeValueDoubleQuotes(c) {
        this.handleInAttributeValue(c, CharCodes2.DoubleQuote);
    }
    stateInAttributeValueSingleQuotes(c) {
        this.handleInAttributeValue(c, CharCodes2.SingleQuote);
    }
    stateInAttributeValueNoQuotes(c) {
        if (isWhitespace2(c) || c === CharCodes2.Gt) {
            this.cbs.onattribdata(this.sectionStart, this.index);
            this.sectionStart = -1;
            this.cbs.onattribend(QuoteType.Unquoted, this.index);
            this.state = State2.BeforeAttributeName;
            this.stateBeforeAttributeName(c);
        } else if (this.decodeEntities && c === CharCodes2.Amp) {
            this.baseState = this.state;
            this.state = State2.BeforeEntity;
        }
    }
    stateBeforeDeclaration(c) {
        if (c === CharCodes2.OpeningSquareBracket) {
            this.state = State2.CDATASequence;
            this.sequenceIndex = 0;
        } else {
            this.state = c === CharCodes2.Dash ? State2.BeforeComment : State2.InDeclaration;
        }
    }
    stateInDeclaration(c) {
        if (c === CharCodes2.Gt || this.fastForwardTo(CharCodes2.Gt)) {
            this.cbs.ondeclaration(this.sectionStart, this.index);
            this.state = State2.Text;
            this.sectionStart = this.index + 1;
        }
    }
    stateInProcessingInstruction(c) {
        if (c === CharCodes2.Gt || this.fastForwardTo(CharCodes2.Gt)) {
            this.cbs.onprocessinginstruction(this.sectionStart, this.index);
            this.state = State2.Text;
            this.sectionStart = this.index + 1;
        }
    }
    stateBeforeComment(c) {
        if (c === CharCodes2.Dash) {
            this.state = State2.InCommentLike;
            this.currentSequence = Sequences.CommentEnd;
            this.sequenceIndex = 2;
            this.sectionStart = this.index + 1;
        } else {
            this.state = State2.InDeclaration;
        }
    }
    stateInSpecialComment(c) {
        if (c === CharCodes2.Gt || this.fastForwardTo(CharCodes2.Gt)) {
            this.cbs.oncomment(this.sectionStart, this.index, 0);
            this.state = State2.Text;
            this.sectionStart = this.index + 1;
        }
    }
    stateBeforeSpecialS(c) {
        const lower2 = c | 32;
        if (lower2 === Sequences.ScriptEnd[3]) {
            this.startSpecial(Sequences.ScriptEnd, 4);
        } else if (lower2 === Sequences.StyleEnd[3]) {
            this.startSpecial(Sequences.StyleEnd, 4);
        } else {
            this.state = State2.InTagName;
            this.stateInTagName(c);
        }
    }
    stateBeforeEntity(c) {
        this.entityExcess = 1;
        this.entityResult = 0;
        if (c === CharCodes2.Number) {
            this.state = State2.BeforeNumericEntity;
        } else if (c === CharCodes2.Amp) {
        } else {
            this.trieIndex = 0;
            this.trieCurrent = this.entityTrie[0];
            this.state = State2.InNamedEntity;
            this.stateInNamedEntity(c);
        }
    }
    stateInNamedEntity(c) {
        this.entityExcess += 1;
        this.trieIndex = determineBranch(this.entityTrie, this.trieCurrent, this.trieIndex + 1, c);
        if (this.trieIndex < 0) {
            this.emitNamedEntity();
            this.index--;
            return;
        }
        this.trieCurrent = this.entityTrie[this.trieIndex];
        const masked = this.trieCurrent & BinTrieFlags.VALUE_LENGTH;
        if (masked) {
            const valueLength = (masked >> 14) - 1;
            if (!this.allowLegacyEntity() && c !== CharCodes2.Semi) {
                this.trieIndex += valueLength;
            } else {
                const entityStart = this.index - this.entityExcess + 1;
                if (entityStart > this.sectionStart) {
                    this.emitPartial(this.sectionStart, entityStart);
                }
                this.entityResult = this.trieIndex;
                this.trieIndex += valueLength;
                this.entityExcess = 0;
                this.sectionStart = this.index + 1;
                if (valueLength === 0) {
                    this.emitNamedEntity();
                }
            }
        }
    }
    emitNamedEntity() {
        this.state = this.baseState;
        if (this.entityResult === 0) {
            return;
        }
        const valueLength = (this.entityTrie[this.entityResult] & BinTrieFlags.VALUE_LENGTH) >> 14;
        switch (valueLength) {
            case 1: {
                this.emitCodePoint(this.entityTrie[this.entityResult] & ~BinTrieFlags.VALUE_LENGTH);
                break;
            }
            case 2: {
                this.emitCodePoint(this.entityTrie[this.entityResult + 1]);
                break;
            }
            case 3: {
                this.emitCodePoint(this.entityTrie[this.entityResult + 1]);
                this.emitCodePoint(this.entityTrie[this.entityResult + 2]);
            }
        }
    }
    stateBeforeNumericEntity(c) {
        if ((c | 32) === CharCodes2.LowerX) {
            this.entityExcess++;
            this.state = State2.InHexEntity;
        } else {
            this.state = State2.InNumericEntity;
            this.stateInNumericEntity(c);
        }
    }
    emitNumericEntity(strict) {
        const entityStart = this.index - this.entityExcess - 1;
        const numberStart = entityStart + 2 + Number(this.state === State2.InHexEntity);
        if (numberStart !== this.index) {
            if (entityStart > this.sectionStart) {
                this.emitPartial(this.sectionStart, entityStart);
            }
            this.sectionStart = this.index + Number(strict);
            this.emitCodePoint(replaceCodePoint(this.entityResult));
        }
        this.state = this.baseState;
    }
    stateInNumericEntity(c) {
        if (c === CharCodes2.Semi) {
            this.emitNumericEntity(true);
        } else if (isNumber2(c)) {
            this.entityResult = this.entityResult * 10 + (c - CharCodes2.Zero);
            this.entityExcess++;
        } else {
            if (this.allowLegacyEntity()) {
                this.emitNumericEntity(false);
            } else {
                this.state = this.baseState;
            }
            this.index--;
        }
    }
    stateInHexEntity(c) {
        if (c === CharCodes2.Semi) {
            this.emitNumericEntity(true);
        } else if (isNumber2(c)) {
            this.entityResult = this.entityResult * 16 + (c - CharCodes2.Zero);
            this.entityExcess++;
        } else if (isHexDigit(c)) {
            this.entityResult = this.entityResult * 16 + ((c | 32) - CharCodes2.LowerA + 10);
            this.entityExcess++;
        } else {
            if (this.allowLegacyEntity()) {
                this.emitNumericEntity(false);
            } else {
                this.state = this.baseState;
            }
            this.index--;
        }
    }
    allowLegacyEntity() {
        return (
            !this.xmlMode &&
            (this.baseState === State2.Text || this.baseState === State2.InSpecialTag)
        );
    }
    /**
     * Remove data that has already been consumed from the buffer.
     */
    cleanup() {
        if (this.running && this.sectionStart !== this.index) {
            if (
                this.state === State2.Text ||
                (this.state === State2.InSpecialTag && this.sequenceIndex === 0)
            ) {
                this.cbs.ontext(this.sectionStart, this.index);
                this.sectionStart = this.index;
            } else if (
                this.state === State2.InAttributeValueDq ||
                this.state === State2.InAttributeValueSq ||
                this.state === State2.InAttributeValueNq
            ) {
                this.cbs.onattribdata(this.sectionStart, this.index);
                this.sectionStart = this.index;
            }
        }
    }
    shouldContinue() {
        return this.index < this.buffer.length + this.offset && this.running;
    }
    /**
     * Iterates through the buffer, calling the function corresponding to the current state.
     *
     * States that are more likely to be hit are higher up, as a performance improvement.
     */
    parse() {
        while (this.shouldContinue()) {
            const c = this.buffer.charCodeAt(this.index - this.offset);
            switch (this.state) {
                case State2.Text: {
                    this.stateText(c);
                    break;
                }
                case State2.SpecialStartSequence: {
                    this.stateSpecialStartSequence(c);
                    break;
                }
                case State2.InSpecialTag: {
                    this.stateInSpecialTag(c);
                    break;
                }
                case State2.CDATASequence: {
                    this.stateCDATASequence(c);
                    break;
                }
                case State2.InAttributeValueDq: {
                    this.stateInAttributeValueDoubleQuotes(c);
                    break;
                }
                case State2.InAttributeName: {
                    this.stateInAttributeName(c);
                    break;
                }
                case State2.InCommentLike: {
                    this.stateInCommentLike(c);
                    break;
                }
                case State2.InSpecialComment: {
                    this.stateInSpecialComment(c);
                    break;
                }
                case State2.BeforeAttributeName: {
                    this.stateBeforeAttributeName(c);
                    break;
                }
                case State2.InTagName: {
                    this.stateInTagName(c);
                    break;
                }
                case State2.InClosingTagName: {
                    this.stateInClosingTagName(c);
                    break;
                }
                case State2.BeforeTagName: {
                    this.stateBeforeTagName(c);
                    break;
                }
                case State2.AfterAttributeName: {
                    this.stateAfterAttributeName(c);
                    break;
                }
                case State2.InAttributeValueSq: {
                    this.stateInAttributeValueSingleQuotes(c);
                    break;
                }
                case State2.BeforeAttributeValue: {
                    this.stateBeforeAttributeValue(c);
                    break;
                }
                case State2.BeforeClosingTagName: {
                    this.stateBeforeClosingTagName(c);
                    break;
                }
                case State2.AfterClosingTagName: {
                    this.stateAfterClosingTagName(c);
                    break;
                }
                case State2.BeforeSpecialS: {
                    this.stateBeforeSpecialS(c);
                    break;
                }
                case State2.InAttributeValueNq: {
                    this.stateInAttributeValueNoQuotes(c);
                    break;
                }
                case State2.InSelfClosingTag: {
                    this.stateInSelfClosingTag(c);
                    break;
                }
                case State2.InDeclaration: {
                    this.stateInDeclaration(c);
                    break;
                }
                case State2.BeforeDeclaration: {
                    this.stateBeforeDeclaration(c);
                    break;
                }
                case State2.BeforeComment: {
                    this.stateBeforeComment(c);
                    break;
                }
                case State2.InProcessingInstruction: {
                    this.stateInProcessingInstruction(c);
                    break;
                }
                case State2.InNamedEntity: {
                    this.stateInNamedEntity(c);
                    break;
                }
                case State2.BeforeEntity: {
                    this.stateBeforeEntity(c);
                    break;
                }
                case State2.InHexEntity: {
                    this.stateInHexEntity(c);
                    break;
                }
                case State2.InNumericEntity: {
                    this.stateInNumericEntity(c);
                    break;
                }
                default: {
                    this.stateBeforeNumericEntity(c);
                }
            }
            this.index++;
        }
        this.cleanup();
    }
    finish() {
        if (this.state === State2.InNamedEntity) {
            this.emitNamedEntity();
        }
        if (this.sectionStart < this.index) {
            this.handleTrailingData();
        }
        this.cbs.onend();
    }
    /** Handle any trailing data. */
    handleTrailingData() {
        const endIndex = this.buffer.length + this.offset;
        if (this.state === State2.InCommentLike) {
            if (this.currentSequence === Sequences.CdataEnd) {
                this.cbs.oncdata(this.sectionStart, endIndex, 0);
            } else {
                this.cbs.oncomment(this.sectionStart, endIndex, 0);
            }
        } else if (this.state === State2.InNumericEntity && this.allowLegacyEntity()) {
            this.emitNumericEntity(false);
        } else if (this.state === State2.InHexEntity && this.allowLegacyEntity()) {
            this.emitNumericEntity(false);
        } else if (
            this.state === State2.InTagName ||
            this.state === State2.BeforeAttributeName ||
            this.state === State2.BeforeAttributeValue ||
            this.state === State2.AfterAttributeName ||
            this.state === State2.InAttributeName ||
            this.state === State2.InAttributeValueSq ||
            this.state === State2.InAttributeValueDq ||
            this.state === State2.InAttributeValueNq ||
            this.state === State2.InClosingTagName
        ) {
        } else {
            this.cbs.ontext(this.sectionStart, endIndex);
        }
    }
    emitPartial(start, endIndex) {
        if (this.baseState !== State2.Text && this.baseState !== State2.InSpecialTag) {
            this.cbs.onattribdata(start, endIndex);
        } else {
            this.cbs.ontext(start, endIndex);
        }
    }
    emitCodePoint(cp) {
        if (this.baseState !== State2.Text && this.baseState !== State2.InSpecialTag) {
            this.cbs.onattribentity(cp);
        } else {
            this.cbs.ontextentity(cp);
        }
    }
};

// node_modules/htmlparser2/lib/esm/Parser.js
var formTags = /* @__PURE__ */ new Set([
    'input',
    'option',
    'optgroup',
    'select',
    'button',
    'datalist',
    'textarea',
]);
var pTag = /* @__PURE__ */ new Set(['p']);
var tableSectionTags = /* @__PURE__ */ new Set(['thead', 'tbody']);
var ddtTags = /* @__PURE__ */ new Set(['dd', 'dt']);
var rtpTags = /* @__PURE__ */ new Set(['rt', 'rp']);
var openImpliesClose = /* @__PURE__ */ new Map([
    ['tr', /* @__PURE__ */ new Set(['tr', 'th', 'td'])],
    ['th', /* @__PURE__ */ new Set(['th'])],
    ['td', /* @__PURE__ */ new Set(['thead', 'th', 'td'])],
    ['body', /* @__PURE__ */ new Set(['head', 'link', 'script'])],
    ['li', /* @__PURE__ */ new Set(['li'])],
    ['p', pTag],
    ['h1', pTag],
    ['h2', pTag],
    ['h3', pTag],
    ['h4', pTag],
    ['h5', pTag],
    ['h6', pTag],
    ['select', formTags],
    ['input', formTags],
    ['output', formTags],
    ['button', formTags],
    ['datalist', formTags],
    ['textarea', formTags],
    ['option', /* @__PURE__ */ new Set(['option'])],
    ['optgroup', /* @__PURE__ */ new Set(['optgroup', 'option'])],
    ['dd', ddtTags],
    ['dt', ddtTags],
    ['address', pTag],
    ['article', pTag],
    ['aside', pTag],
    ['blockquote', pTag],
    ['details', pTag],
    ['div', pTag],
    ['dl', pTag],
    ['fieldset', pTag],
    ['figcaption', pTag],
    ['figure', pTag],
    ['footer', pTag],
    ['form', pTag],
    ['header', pTag],
    ['hr', pTag],
    ['main', pTag],
    ['nav', pTag],
    ['ol', pTag],
    ['pre', pTag],
    ['section', pTag],
    ['table', pTag],
    ['ul', pTag],
    ['rt', rtpTags],
    ['rp', rtpTags],
    ['tbody', tableSectionTags],
    ['tfoot', tableSectionTags],
]);
var voidElements = /* @__PURE__ */ new Set([
    'area',
    'base',
    'basefont',
    'br',
    'col',
    'command',
    'embed',
    'frame',
    'hr',
    'img',
    'input',
    'isindex',
    'keygen',
    'link',
    'meta',
    'param',
    'source',
    'track',
    'wbr',
]);
var foreignContextElements = /* @__PURE__ */ new Set(['math', 'svg']);
var htmlIntegrationElements = /* @__PURE__ */ new Set([
    'mi',
    'mo',
    'mn',
    'ms',
    'mtext',
    'annotation-xml',
    'foreignobject',
    'desc',
    'title',
]);
var reNameEnd = /\s|\//;
var Parser2 = class {
    constructor(cbs, options2 = {}) {
        var _a5, _b, _c, _d2, _e;
        this.options = options2;
        this.startIndex = 0;
        this.endIndex = 0;
        this.openTagStart = 0;
        this.tagname = '';
        this.attribname = '';
        this.attribvalue = '';
        this.attribs = null;
        this.stack = [];
        this.foreignContext = [];
        this.buffers = [];
        this.bufferOffset = 0;
        this.writeIndex = 0;
        this.ended = false;
        this.cbs = cbs !== null && cbs !== void 0 ? cbs : {};
        this.lowerCaseTagNames =
            (_a5 = options2.lowerCaseTags) !== null && _a5 !== void 0 ? _a5 : !options2.xmlMode;
        this.lowerCaseAttributeNames =
            (_b = options2.lowerCaseAttributeNames) !== null && _b !== void 0
                ? _b
                : !options2.xmlMode;
        this.tokenizer = new (
            (_c = options2.Tokenizer) !== null && _c !== void 0 ? _c : Tokenizer2
        )(this.options, this);
        (_e = (_d2 = this.cbs).onparserinit) === null || _e === void 0
            ? void 0
            : _e.call(_d2, this);
    }
    // Tokenizer event handlers
    /** @internal */
    ontext(start, endIndex) {
        var _a5, _b;
        const data2 = this.getSlice(start, endIndex);
        this.endIndex = endIndex - 1;
        (_b = (_a5 = this.cbs).ontext) === null || _b === void 0 ? void 0 : _b.call(_a5, data2);
        this.startIndex = endIndex;
    }
    /** @internal */
    ontextentity(cp) {
        var _a5, _b;
        const index2 = this.tokenizer.getSectionStart();
        this.endIndex = index2 - 1;
        (_b = (_a5 = this.cbs).ontext) === null || _b === void 0
            ? void 0
            : _b.call(_a5, fromCodePoint(cp));
        this.startIndex = index2;
    }
    isVoidElement(name) {
        return !this.options.xmlMode && voidElements.has(name);
    }
    /** @internal */
    onopentagname(start, endIndex) {
        this.endIndex = endIndex;
        let name = this.getSlice(start, endIndex);
        if (this.lowerCaseTagNames) {
            name = name.toLowerCase();
        }
        this.emitOpenTag(name);
    }
    emitOpenTag(name) {
        var _a5, _b, _c, _d2;
        this.openTagStart = this.startIndex;
        this.tagname = name;
        const impliesClose = !this.options.xmlMode && openImpliesClose.get(name);
        if (impliesClose) {
            while (this.stack.length > 0 && impliesClose.has(this.stack[this.stack.length - 1])) {
                const element = this.stack.pop();
                (_b = (_a5 = this.cbs).onclosetag) === null || _b === void 0
                    ? void 0
                    : _b.call(_a5, element, true);
            }
        }
        if (!this.isVoidElement(name)) {
            this.stack.push(name);
            if (foreignContextElements.has(name)) {
                this.foreignContext.push(true);
            } else if (htmlIntegrationElements.has(name)) {
                this.foreignContext.push(false);
            }
        }
        (_d2 = (_c = this.cbs).onopentagname) === null || _d2 === void 0
            ? void 0
            : _d2.call(_c, name);
        if (this.cbs.onopentag) this.attribs = {};
    }
    endOpenTag(isImplied) {
        var _a5, _b;
        this.startIndex = this.openTagStart;
        if (this.attribs) {
            (_b = (_a5 = this.cbs).onopentag) === null || _b === void 0
                ? void 0
                : _b.call(_a5, this.tagname, this.attribs, isImplied);
            this.attribs = null;
        }
        if (this.cbs.onclosetag && this.isVoidElement(this.tagname)) {
            this.cbs.onclosetag(this.tagname, true);
        }
        this.tagname = '';
    }
    /** @internal */
    onopentagend(endIndex) {
        this.endIndex = endIndex;
        this.endOpenTag(false);
        this.startIndex = endIndex + 1;
    }
    /** @internal */
    onclosetag(start, endIndex) {
        var _a5, _b, _c, _d2, _e, _f;
        this.endIndex = endIndex;
        let name = this.getSlice(start, endIndex);
        if (this.lowerCaseTagNames) {
            name = name.toLowerCase();
        }
        if (foreignContextElements.has(name) || htmlIntegrationElements.has(name)) {
            this.foreignContext.pop();
        }
        if (!this.isVoidElement(name)) {
            const pos = this.stack.lastIndexOf(name);
            if (pos !== -1) {
                if (this.cbs.onclosetag) {
                    let count = this.stack.length - pos;
                    while (count--) {
                        this.cbs.onclosetag(this.stack.pop(), count !== 0);
                    }
                } else this.stack.length = pos;
            } else if (!this.options.xmlMode && name === 'p') {
                this.emitOpenTag('p');
                this.closeCurrentTag(true);
            }
        } else if (!this.options.xmlMode && name === 'br') {
            (_b = (_a5 = this.cbs).onopentagname) === null || _b === void 0
                ? void 0
                : _b.call(_a5, 'br');
            (_d2 = (_c = this.cbs).onopentag) === null || _d2 === void 0
                ? void 0
                : _d2.call(_c, 'br', {}, true);
            (_f = (_e = this.cbs).onclosetag) === null || _f === void 0
                ? void 0
                : _f.call(_e, 'br', false);
        }
        this.startIndex = endIndex + 1;
    }
    /** @internal */
    onselfclosingtag(endIndex) {
        this.endIndex = endIndex;
        if (
            this.options.xmlMode ||
            this.options.recognizeSelfClosing ||
            this.foreignContext[this.foreignContext.length - 1]
        ) {
            this.closeCurrentTag(false);
            this.startIndex = endIndex + 1;
        } else {
            this.onopentagend(endIndex);
        }
    }
    closeCurrentTag(isOpenImplied) {
        var _a5, _b;
        const name = this.tagname;
        this.endOpenTag(isOpenImplied);
        if (this.stack[this.stack.length - 1] === name) {
            (_b = (_a5 = this.cbs).onclosetag) === null || _b === void 0
                ? void 0
                : _b.call(_a5, name, !isOpenImplied);
            this.stack.pop();
        }
    }
    /** @internal */
    onattribname(start, endIndex) {
        this.startIndex = start;
        const name = this.getSlice(start, endIndex);
        this.attribname = this.lowerCaseAttributeNames ? name.toLowerCase() : name;
    }
    /** @internal */
    onattribdata(start, endIndex) {
        this.attribvalue += this.getSlice(start, endIndex);
    }
    /** @internal */
    onattribentity(cp) {
        this.attribvalue += fromCodePoint(cp);
    }
    /** @internal */
    onattribend(quote, endIndex) {
        var _a5, _b;
        this.endIndex = endIndex;
        (_b = (_a5 = this.cbs).onattribute) === null || _b === void 0
            ? void 0
            : _b.call(
                  _a5,
                  this.attribname,
                  this.attribvalue,
                  quote === QuoteType.Double
                      ? '"'
                      : quote === QuoteType.Single
                        ? "'"
                        : quote === QuoteType.NoValue
                          ? void 0
                          : null,
              );
        if (this.attribs && !Object.prototype.hasOwnProperty.call(this.attribs, this.attribname)) {
            this.attribs[this.attribname] = this.attribvalue;
        }
        this.attribvalue = '';
    }
    getInstructionName(value) {
        const index2 = value.search(reNameEnd);
        let name = index2 < 0 ? value : value.substr(0, index2);
        if (this.lowerCaseTagNames) {
            name = name.toLowerCase();
        }
        return name;
    }
    /** @internal */
    ondeclaration(start, endIndex) {
        this.endIndex = endIndex;
        const value = this.getSlice(start, endIndex);
        if (this.cbs.onprocessinginstruction) {
            const name = this.getInstructionName(value);
            this.cbs.onprocessinginstruction(`!${name}`, `!${value}`);
        }
        this.startIndex = endIndex + 1;
    }
    /** @internal */
    onprocessinginstruction(start, endIndex) {
        this.endIndex = endIndex;
        const value = this.getSlice(start, endIndex);
        if (this.cbs.onprocessinginstruction) {
            const name = this.getInstructionName(value);
            this.cbs.onprocessinginstruction(`?${name}`, `?${value}`);
        }
        this.startIndex = endIndex + 1;
    }
    /** @internal */
    oncomment(start, endIndex, offset) {
        var _a5, _b, _c, _d2;
        this.endIndex = endIndex;
        (_b = (_a5 = this.cbs).oncomment) === null || _b === void 0
            ? void 0
            : _b.call(_a5, this.getSlice(start, endIndex - offset));
        (_d2 = (_c = this.cbs).oncommentend) === null || _d2 === void 0 ? void 0 : _d2.call(_c);
        this.startIndex = endIndex + 1;
    }
    /** @internal */
    oncdata(start, endIndex, offset) {
        var _a5, _b, _c, _d2, _e, _f, _g, _h, _j, _k;
        this.endIndex = endIndex;
        const value = this.getSlice(start, endIndex - offset);
        if (this.options.xmlMode || this.options.recognizeCDATA) {
            (_b = (_a5 = this.cbs).oncdatastart) === null || _b === void 0 ? void 0 : _b.call(_a5);
            (_d2 = (_c = this.cbs).ontext) === null || _d2 === void 0
                ? void 0
                : _d2.call(_c, value);
            (_f = (_e = this.cbs).oncdataend) === null || _f === void 0 ? void 0 : _f.call(_e);
        } else {
            (_h = (_g = this.cbs).oncomment) === null || _h === void 0
                ? void 0
                : _h.call(_g, `[CDATA[${value}]]`);
            (_k = (_j = this.cbs).oncommentend) === null || _k === void 0 ? void 0 : _k.call(_j);
        }
        this.startIndex = endIndex + 1;
    }
    /** @internal */
    onend() {
        var _a5, _b;
        if (this.cbs.onclosetag) {
            this.endIndex = this.startIndex;
            for (
                let index2 = this.stack.length;
                index2 > 0;
                this.cbs.onclosetag(this.stack[--index2], true)
            );
        }
        (_b = (_a5 = this.cbs).onend) === null || _b === void 0 ? void 0 : _b.call(_a5);
    }
    /**
     * Resets the parser to a blank state, ready to parse a new HTML document
     */
    reset() {
        var _a5, _b, _c, _d2;
        (_b = (_a5 = this.cbs).onreset) === null || _b === void 0 ? void 0 : _b.call(_a5);
        this.tokenizer.reset();
        this.tagname = '';
        this.attribname = '';
        this.attribs = null;
        this.stack.length = 0;
        this.startIndex = 0;
        this.endIndex = 0;
        (_d2 = (_c = this.cbs).onparserinit) === null || _d2 === void 0
            ? void 0
            : _d2.call(_c, this);
        this.buffers.length = 0;
        this.bufferOffset = 0;
        this.writeIndex = 0;
        this.ended = false;
    }
    /**
     * Resets the parser, then parses a complete document and
     * pushes it to the handler.
     *
     * @param data Document to parse.
     */
    parseComplete(data2) {
        this.reset();
        this.end(data2);
    }
    getSlice(start, end2) {
        while (start - this.bufferOffset >= this.buffers[0].length) {
            this.shiftBuffer();
        }
        let slice2 = this.buffers[0].slice(start - this.bufferOffset, end2 - this.bufferOffset);
        while (end2 - this.bufferOffset > this.buffers[0].length) {
            this.shiftBuffer();
            slice2 += this.buffers[0].slice(0, end2 - this.bufferOffset);
        }
        return slice2;
    }
    shiftBuffer() {
        this.bufferOffset += this.buffers[0].length;
        this.writeIndex--;
        this.buffers.shift();
    }
    /**
     * Parses a chunk of data and calls the corresponding callbacks.
     *
     * @param chunk Chunk to parse.
     */
    write(chunk) {
        var _a5, _b;
        if (this.ended) {
            (_b = (_a5 = this.cbs).onerror) === null || _b === void 0
                ? void 0
                : _b.call(_a5, new Error('.write() after done!'));
            return;
        }
        this.buffers.push(chunk);
        if (this.tokenizer.running) {
            this.tokenizer.write(chunk);
            this.writeIndex++;
        }
    }
    /**
     * Parses the end of the buffer and clears the stack, calls onend.
     *
     * @param chunk Optional final chunk to parse.
     */
    end(chunk) {
        var _a5, _b;
        if (this.ended) {
            (_b = (_a5 = this.cbs).onerror) === null || _b === void 0
                ? void 0
                : _b.call(_a5, new Error('.end() after done!'));
            return;
        }
        if (chunk) this.write(chunk);
        this.ended = true;
        this.tokenizer.end();
    }
    /**
     * Pauses parsing. The parser won't emit events until `resume` is called.
     */
    pause() {
        this.tokenizer.pause();
    }
    /**
     * Resumes parsing after `pause` was called.
     */
    resume() {
        this.tokenizer.resume();
        while (this.tokenizer.running && this.writeIndex < this.buffers.length) {
            this.tokenizer.write(this.buffers[this.writeIndex++]);
        }
        if (this.ended) this.tokenizer.end();
    }
    /**
     * Alias of `write`, for backwards compatibility.
     *
     * @param chunk Chunk to parse.
     * @deprecated
     */
    parseChunk(chunk) {
        this.write(chunk);
    }
    /**
     * Alias of `end`, for backwards compatibility.
     *
     * @param chunk Optional final chunk to parse.
     * @deprecated
     */
    done(chunk) {
        this.end(chunk);
    }
};

// node_modules/htmlparser2/lib/esm/index.js
function parseDocument(data2, options2) {
    const handler = new DomHandler(void 0, options2);
    new Parser2(handler, options2).end(data2);
    return handler.root;
}

// node_modules/cheerio/lib/esm/index.js
var parse7 = getParse((content, options2, isDocument2, context) =>
    options2.xmlMode || options2._useHtmlParser2
        ? parseDocument(content, options2)
        : parseWithParse5(content, options2, isDocument2, context),
);
var load2 = getLoad(parse7, (dom, options2) =>
    options2.xmlMode || options2._useHtmlParser2
        ? esm_default(dom, options2)
        : renderWithParse5(dom),
);
var esm_default2 = load2([]);
var { contains: contains2 } = static_exports;
var { merge: merge2 } = static_exports;
var { parseHTML: parseHTML2 } = static_exports;
var { root: root2 } = static_exports;

// utils/csdn.ts
var indexPage = 1;
async function reptile(author = 'weixin_43575775') {
    let url = `https://blog.csdn.net/${author}/article/list/` + indexPage;
    const res = await fetch(url, {
        headers: {
            'Content-Type': 'text/html; charset=utf8',
        },
    });
    const body = await res.text();
    let $4 = load2(body);
    let allCount = $4('#blog_statistics li span').first().text() || '20';
    let page = parseInt(allCount) / 20;
    let pageStr = page.toString();
    if (pageStr.indexOf('.') > 0) {
        page = parseInt(pageStr.split('.')[0]) + 1;
    }
    let data2 = {};
    let articles = [];
    data2.allPages = page;
    data2.currentPage = parseInt(indexPage.toString());
    $4('.article-list h4 a').each((ins, el) => {
        let article = {};
        $4(el).find('.article-type').remove();
        let text3 = $4(el)
            .text()
            .replace(/\ +/g, '')
            .replace(/[\r\n]/g, '');
        const a = $4(el).attr('href');
        let url2 = a == null ? void 0 : a.replace(/\ +/g, '').replace(/[\r\n]/g, '');
        if (text3.length > 20) {
            text3 = text3.substring(0, 20).concat('...');
        }
        article.title = text3;
        article.url = url2;
        console.log(`article  ${JSON.stringify(article)}`);
        articles.push(article);
    });
    data2.articles = articles;
    if (articles.length > 0) intervalArticle(articles);
}
function intervalArticle(urls) {
    var count = 0;
    var len = urls.length;
    var co = 0;
    setInterval(async function () {
        try {
            count = count + 1;
            co = Math.floor(Math.random() * len);
            const res = await fetch(urls[co].url);
            if (res.ok && res.status === 200) {
                console.log(
                    `seeEount: ${count} , title: ${urls[co].title} , loadTimes: ${parseInt(((count + len) / len).toString())}`,
                );
            }
            ++co;
            if (co === len) {
                co = 0;
            }
        } catch (error) {}
    }, 2e3);
}
var csdn_default = {
    reptile,
};

// index.ts
async function chooseType() {
    const { type } = await (0, import_prompts.default)([
        {
            type: 'select',
            name: 'type',
            message: '\u8BF7\u9009\u62E9\u4F60\u8981\u4F7F\u7528\u7684\u529F\u80FD',
            description: 'Please select the function you want to use',
            choices: [
                {
                    title: '\u521B\u5EFA\u524D\u7AEF\u9879\u76EE',
                    description: 'Creating a front-end project',
                    value: 0 /* create */,
                },
                {
                    title: '\u5237csdn\u535A\u5BA2\u8BBF\u95EE\u91CF',
                    description: 'Brush csdn blog visits',
                    value: 1 /* csdn */,
                },
                {
                    title: '\u5C06\u5F53\u524D\u76EE\u5F55\u4E0B\u7684png\u8F6C\u6210webp',
                    description: 'Convert png in current directory to webp',
                    value: 2 /* transpile */,
                },
                {
                    title: '\u5C06excel\u8F6C\u6210json\u8BED\u8A00\u5305',
                    description: 'Convert excel to json language package',
                    value: 3 /* lang */,
                },
            ],
            initial: 0,
        },
    ]);
    return type;
}
async function init() {
    console.log();
    console.log(
        process.stdout.isTTY && process.stdout.getColorDepth() > 8 ? gradientBanner : defaultBanner,
    );
    console.log();
    const cwd = process.cwd();
    log(`Current working directory: ${cwd}`);
    const args = process.argv.slice(2);
    try {
        const type = await chooseType();
        switch (type) {
            case 0 /* create */:
                break;
            case 1 /* csdn */:
                const { name } = await (0, import_prompts.default)({
                    type: 'text',
                    name: 'name',
                    message: '\u8BF7\u8F93\u5165csdn\u535A\u5BA2\u540D\u5B57',
                    description: 'Please enter csdn blog name',
                    initial: 'weixin_43575775',
                });
                csdn_default.reptile(name);
                break;
            case 3 /* lang */:
                lang_default.exportLangToJson();
                break;
            case 2 /* transpile */:
                png_webp_default.pngToWebp();
                break;
        }
        console.log('type', type);
    } catch (cancelled) {
        console.log(cancelled.message);
        process.exit(1);
    }
}
init();
/*! Bundled license information:

xlsx/dist/cpexcel.js:
  (*! cpexcel.js (C) 2013-present SheetJS -- http://sheetjs.com *)
  (*! cputils.js (C) 2013-present SheetJS -- http://sheetjs.com *)

xlsx/xlsx.js:
  (*! xlsx.js (C) 2013-present SheetJS -- http://sheetjs.com *)
  (*! sheetjs (C) 2013-present SheetJS -- http://sheetjs.com *)

web-streams-polyfill/dist/ponyfill.es2018.js:
  (**
   * @license
   * web-streams-polyfill v3.3.3
   * Copyright 2024 Mattias Buelens, Diwank Singh Tomer and other contributors.
   * This code is released under the MIT license.
   * SPDX-License-Identifier: MIT
   *)

fetch-blob/index.js:
  (*! fetch-blob. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> *)

formdata-polyfill/esm.min.js:
  (*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> *)

node-domexception/index.js:
  (*! node-domexception. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> *)
*/
